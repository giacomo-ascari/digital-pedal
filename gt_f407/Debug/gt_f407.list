
gt_f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006940  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08006ac8  08006ac8  00016ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d60  08006d60  000200c8  2**0
                  CONTENTS
  4 .ARM          00000008  08006d60  08006d60  00016d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d68  08006d68  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d68  08006d68  00016d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d6c  08006d6c  00016d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08006d70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c8  2**0
                  CONTENTS
 10 .bss          00003678  200000c8  200000c8  000200c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003740  20003740  000200c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002795c  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005c9f  00000000  00000000  00047a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00016ff0  00000000  00000000  0004d6f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001308  00000000  00000000  000646e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000015b8  00000000  00000000  000659f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026925  00000000  00000000  00066fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000264e2  00000000  00000000  0008d8cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cdd86  00000000  00000000  000b3daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00181b35  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003684  00000000  00000000  00181b88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000c8 	.word	0x200000c8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006ab0 	.word	0x08006ab0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000cc 	.word	0x200000cc
 80001c4:	08006ab0 	.word	0x08006ab0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 80004cc:	b508      	push	{r3, lr}
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 80004ce:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <I2S3_Init+0x34>)
 80004d0:	4a0c      	ldr	r2, [pc, #48]	; (8000504 <I2S3_Init+0x38>)
 80004d2:	601a      	str	r2, [r3, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 80004d4:	69d1      	ldr	r1, [r2, #28]
 80004d6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80004da:	61d1      	str	r1, [r2, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 80004dc:	6158      	str	r0, [r3, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 80004de:	2200      	movs	r2, #0
 80004e0:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 80004e2:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 80004e4:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 80004e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ea:	6119      	str	r1, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 80004ec:	6059      	str	r1, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 80004ee:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 80004f0:	4618      	mov	r0, r3
 80004f2:	f003 f84f 	bl	8003594 <HAL_I2S_Init>
  }
  else
  {
    return AUDIO_OK;
  }
}
 80004f6:	3800      	subs	r0, #0
 80004f8:	bf18      	it	ne
 80004fa:	2001      	movne	r0, #1
 80004fc:	bd08      	pop	{r3, pc}
 80004fe:	bf00      	nop
 8000500:	200000e4 	.word	0x200000e4
 8000504:	40003c00 	.word	0x40003c00

08000508 <AUDIO_OUT_ClockConfig>:
{ 
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	b085      	sub	sp, #20
  for(index = 0; index < 8; index++)
 800050c:	4a15      	ldr	r2, [pc, #84]	; (8000564 <AUDIO_OUT_ClockConfig+0x5c>)
{ 
 800050e:	2300      	movs	r3, #0
  uint8_t index = 0, freqindex = 0xFF;
 8000510:	24ff      	movs	r4, #255	; 0xff
 8000512:	b2d8      	uxtb	r0, r3
    if(I2SFreq[index] == AudioFreq)
 8000514:	f852 5f04 	ldr.w	r5, [r2, #4]!
 8000518:	428d      	cmp	r5, r1
 800051a:	bf08      	it	eq
 800051c:	4604      	moveq	r4, r0
  for(index = 0; index < 8; index++)
 800051e:	3301      	adds	r3, #1
 8000520:	2b08      	cmp	r3, #8
 8000522:	d1f6      	bne.n	8000512 <AUDIO_OUT_ClockConfig+0xa>
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8000524:	4668      	mov	r0, sp
 8000526:	f003 ffff 	bl	8004528 <HAL_RCCEx_GetPeriphCLKConfig>
  if ((freqindex & 0x7) == 0)
 800052a:	f014 0f07 	tst.w	r4, #7
 800052e:	d10e      	bne.n	800054e <AUDIO_OUT_ClockConfig+0x46>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000530:	2301      	movs	r3, #1
 8000532:	9300      	str	r3, [sp, #0]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <AUDIO_OUT_ClockConfig+0x60>)
 8000536:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800053a:	9301      	str	r3, [sp, #4]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 800053c:	4b0b      	ldr	r3, [pc, #44]	; (800056c <AUDIO_OUT_ClockConfig+0x64>)
 800053e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8000542:	9302      	str	r3, [sp, #8]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000544:	4668      	mov	r0, sp
 8000546:	f003 ff45 	bl	80043d4 <HAL_RCCEx_PeriphCLKConfig>
}
 800054a:	b005      	add	sp, #20
 800054c:	bd30      	pop	{r4, r5, pc}
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800054e:	2301      	movs	r3, #1
 8000550:	9300      	str	r3, [sp, #0]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8000552:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000556:	9301      	str	r3, [sp, #4]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8000558:	2303      	movs	r3, #3
 800055a:	9302      	str	r3, [sp, #8]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 800055c:	4668      	mov	r0, sp
 800055e:	f003 ff39 	bl	80043d4 <HAL_RCCEx_PeriphCLKConfig>
}
 8000562:	e7f2      	b.n	800054a <AUDIO_OUT_ClockConfig+0x42>
 8000564:	08006ac4 	.word	0x08006ac4
 8000568:	08006ae8 	.word	0x08006ae8
 800056c:	08006b08 	.word	0x08006b08

08000570 <AUDIO_OUT_MspInit>:
{
 8000570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000572:	b08b      	sub	sp, #44	; 0x2c
 8000574:	4606      	mov	r6, r0
  I2S3_CLK_ENABLE();
 8000576:	2500      	movs	r5, #0
 8000578:	9500      	str	r5, [sp, #0]
 800057a:	4c3f      	ldr	r4, [pc, #252]	; (8000678 <AUDIO_OUT_MspInit+0x108>)
 800057c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800057e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000582:	6423      	str	r3, [r4, #64]	; 0x40
 8000584:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000586:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	9b00      	ldr	r3, [sp, #0]
  I2S3_SCK_SD_CLK_ENABLE();
 800058e:	9501      	str	r5, [sp, #4]
 8000590:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000592:	f043 0304 	orr.w	r3, r3, #4
 8000596:	6323      	str	r3, [r4, #48]	; 0x30
 8000598:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800059a:	f003 0304 	and.w	r3, r3, #4
 800059e:	9301      	str	r3, [sp, #4]
 80005a0:	9b01      	ldr	r3, [sp, #4]
  I2S3_WS_CLK_ENABLE();
 80005a2:	9502      	str	r5, [sp, #8]
 80005a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80005a6:	f043 0301 	orr.w	r3, r3, #1
 80005aa:	6323      	str	r3, [r4, #48]	; 0x30
 80005ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	9302      	str	r3, [sp, #8]
 80005b4:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 80005b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ba:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 80005bc:	2302      	movs	r3, #2
 80005be:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 80005c0:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 80005c2:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 80005c4:	2306      	movs	r3, #6
 80005c6:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 80005c8:	4f2c      	ldr	r7, [pc, #176]	; (800067c <AUDIO_OUT_MspInit+0x10c>)
 80005ca:	a905      	add	r1, sp, #20
 80005cc:	4638      	mov	r0, r7
 80005ce:	f001 fb61 	bl	8001c94 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 80005d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005d6:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 80005d8:	a905      	add	r1, sp, #20
 80005da:	4829      	ldr	r0, [pc, #164]	; (8000680 <AUDIO_OUT_MspInit+0x110>)
 80005dc:	f001 fb5a 	bl	8001c94 <HAL_GPIO_Init>
  I2S3_MCK_CLK_ENABLE();
 80005e0:	9503      	str	r5, [sp, #12]
 80005e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80005e4:	f043 0304 	orr.w	r3, r3, #4
 80005e8:	6323      	str	r3, [r4, #48]	; 0x30
 80005ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80005ec:	f003 0304 	and.w	r3, r3, #4
 80005f0:	9303      	str	r3, [sp, #12]
 80005f2:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 80005f4:	2380      	movs	r3, #128	; 0x80
 80005f6:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 80005f8:	a905      	add	r1, sp, #20
 80005fa:	4638      	mov	r0, r7
 80005fc:	f001 fb4a 	bl	8001c94 <HAL_GPIO_Init>
  I2S3_DMAx_CLK_ENABLE(); 
 8000600:	9504      	str	r5, [sp, #16]
 8000602:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000604:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000608:	6323      	str	r3, [r4, #48]	; 0x30
 800060a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800060c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000610:	9304      	str	r3, [sp, #16]
 8000612:	9b04      	ldr	r3, [sp, #16]
  if(hi2s->Instance == I2S3)
 8000614:	6832      	ldr	r2, [r6, #0]
 8000616:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <AUDIO_OUT_MspInit+0x114>)
 8000618:	429a      	cmp	r2, r3
 800061a:	d009      	beq.n	8000630 <AUDIO_OUT_MspInit+0xc0>
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 800061c:	2200      	movs	r2, #0
 800061e:	210e      	movs	r1, #14
 8000620:	202f      	movs	r0, #47	; 0x2f
 8000622:	f001 f8bd 	bl	80017a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);  
 8000626:	202f      	movs	r0, #47	; 0x2f
 8000628:	f001 f8f0 	bl	800180c <HAL_NVIC_EnableIRQ>
}
 800062c:	b00b      	add	sp, #44	; 0x2c
 800062e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 8000630:	4c15      	ldr	r4, [pc, #84]	; (8000688 <AUDIO_OUT_MspInit+0x118>)
 8000632:	6065      	str	r5, [r4, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000634:	2240      	movs	r2, #64	; 0x40
 8000636:	60a2      	str	r2, [r4, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000638:	60e5      	str	r5, [r4, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 800063a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800063e:	6122      	str	r2, [r4, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 8000640:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000644:	6162      	str	r2, [r4, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 8000646:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800064a:	61a2      	str	r2, [r4, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 800064c:	61e5      	str	r5, [r4, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 800064e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000652:	6222      	str	r2, [r4, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8000654:	2204      	movs	r2, #4
 8000656:	6262      	str	r2, [r4, #36]	; 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000658:	2203      	movs	r2, #3
 800065a:	62a2      	str	r2, [r4, #40]	; 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800065c:	62e5      	str	r5, [r4, #44]	; 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800065e:	6325      	str	r5, [r4, #48]	; 0x30
    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <AUDIO_OUT_MspInit+0x11c>)
 8000662:	6023      	str	r3, [r4, #0]
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 8000664:	63b4      	str	r4, [r6, #56]	; 0x38
 8000666:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_DMA_DeInit(&hdma_i2sTx);
 8000668:	4620      	mov	r0, r4
 800066a:	f001 f9a9 	bl	80019c0 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_i2sTx);
 800066e:	4620      	mov	r0, r4
 8000670:	f001 f90e 	bl	8001890 <HAL_DMA_Init>
 8000674:	e7d2      	b.n	800061c <AUDIO_OUT_MspInit+0xac>
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800
 800067c:	40020800 	.word	0x40020800
 8000680:	40020000 	.word	0x40020000
 8000684:	40003c00 	.word	0x40003c00
 8000688:	2000012c 	.word	0x2000012c
 800068c:	400260b8 	.word	0x400260b8

08000690 <AUDIO_OUT_Init>:
{    
 8000690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000694:	4606      	mov	r6, r0
 8000696:	460f      	mov	r7, r1
 8000698:	4614      	mov	r4, r2
  AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 800069a:	4d17      	ldr	r5, [pc, #92]	; (80006f8 <AUDIO_OUT_Init+0x68>)
 800069c:	2200      	movs	r2, #0
 800069e:	4621      	mov	r1, r4
 80006a0:	4628      	mov	r0, r5
 80006a2:	f7ff ff31 	bl	8000508 <AUDIO_OUT_ClockConfig>
  hAudioOutI2s.Instance = I2S3;
 80006a6:	4b15      	ldr	r3, [pc, #84]	; (80006fc <AUDIO_OUT_Init+0x6c>)
 80006a8:	602b      	str	r3, [r5, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 80006aa:	4628      	mov	r0, r5
 80006ac:	f003 f9f6 	bl	8003a9c <HAL_I2S_GetState>
 80006b0:	b170      	cbz	r0, 80006d0 <AUDIO_OUT_Init+0x40>
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 80006b2:	4620      	mov	r0, r4
 80006b4:	f7ff ff0a 	bl	80004cc <I2S3_Init>
 80006b8:	4605      	mov	r5, r0
 80006ba:	b9c8      	cbnz	r0, 80006f0 <AUDIO_OUT_Init+0x60>
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 80006bc:	4b10      	ldr	r3, [pc, #64]	; (8000700 <AUDIO_OUT_Init+0x70>)
 80006be:	689b      	ldr	r3, [r3, #8]
 80006c0:	2094      	movs	r0, #148	; 0x94
 80006c2:	4798      	blx	r3
 80006c4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80006c8:	28e0      	cmp	r0, #224	; 0xe0
 80006ca:	d006      	beq.n	80006da <AUDIO_OUT_Init+0x4a>
      ret = AUDIO_ERROR;
 80006cc:	2501      	movs	r5, #1
 80006ce:	e010      	b.n	80006f2 <AUDIO_OUT_Init+0x62>
    AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 80006d0:	2100      	movs	r1, #0
 80006d2:	4628      	mov	r0, r5
 80006d4:	f7ff ff4c 	bl	8000570 <AUDIO_OUT_MspInit>
 80006d8:	e7eb      	b.n	80006b2 <AUDIO_OUT_Init+0x22>
      pAudioDrv = &cs43l22_drv; 
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <AUDIO_OUT_Init+0x70>)
 80006dc:	4a09      	ldr	r2, [pc, #36]	; (8000704 <AUDIO_OUT_Init+0x74>)
 80006de:	6013      	str	r3, [r2, #0]
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 80006e0:	f8d3 8000 	ldr.w	r8, [r3]
 80006e4:	4623      	mov	r3, r4
 80006e6:	463a      	mov	r2, r7
 80006e8:	4631      	mov	r1, r6
 80006ea:	2094      	movs	r0, #148	; 0x94
 80006ec:	47c0      	blx	r8
 80006ee:	e000      	b.n	80006f2 <AUDIO_OUT_Init+0x62>
 80006f0:	2501      	movs	r5, #1
}
 80006f2:	4628      	mov	r0, r5
 80006f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80006f8:	200000e4 	.word	0x200000e4
 80006fc:	40003c00 	.word	0x40003c00
 8000700:	20000008 	.word	0x20000008
 8000704:	2000018c 	.word	0x2000018c

08000708 <HAL_I2S_TxCpltCallback>:
{
 8000708:	b508      	push	{r3, lr}
  if(hi2s->Instance == I2S3)
 800070a:	6802      	ldr	r2, [r0, #0]
 800070c:	4b03      	ldr	r3, [pc, #12]	; (800071c <HAL_I2S_TxCpltCallback+0x14>)
 800070e:	429a      	cmp	r2, r3
 8000710:	d000      	beq.n	8000714 <HAL_I2S_TxCpltCallback+0xc>
}
 8000712:	bd08      	pop	{r3, pc}
    AUDIO_OUT_TransferComplete_CallBack();
 8000714:	f000 fb62 	bl	8000ddc <AUDIO_OUT_TransferComplete_CallBack>
}
 8000718:	e7fb      	b.n	8000712 <HAL_I2S_TxCpltCallback+0xa>
 800071a:	bf00      	nop
 800071c:	40003c00 	.word	0x40003c00

08000720 <HAL_I2S_TxHalfCpltCallback>:
{
 8000720:	b508      	push	{r3, lr}
  if(hi2s->Instance == I2S3)
 8000722:	6802      	ldr	r2, [r0, #0]
 8000724:	4b03      	ldr	r3, [pc, #12]	; (8000734 <HAL_I2S_TxHalfCpltCallback+0x14>)
 8000726:	429a      	cmp	r2, r3
 8000728:	d000      	beq.n	800072c <HAL_I2S_TxHalfCpltCallback+0xc>
}
 800072a:	bd08      	pop	{r3, pc}
    AUDIO_OUT_HalfTransfer_CallBack();
 800072c:	f000 fb4a 	bl	8000dc4 <AUDIO_OUT_HalfTransfer_CallBack>
}
 8000730:	e7fb      	b.n	800072a <HAL_I2S_TxHalfCpltCallback+0xa>
 8000732:	bf00      	nop
 8000734:	40003c00 	.word	0x40003c00

08000738 <AUDIO_OUT_Error_CallBack>:
}
 8000738:	4770      	bx	lr
	...

0800073c <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800073c:	b508      	push	{r3, lr}
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 800073e:	6802      	ldr	r2, [r0, #0]
 8000740:	4b03      	ldr	r3, [pc, #12]	; (8000750 <HAL_I2S_ErrorCallback+0x14>)
 8000742:	429a      	cmp	r2, r3
 8000744:	d000      	beq.n	8000748 <HAL_I2S_ErrorCallback+0xc>
  {
    AUDIO_OUT_Error_CallBack();
  }
}
 8000746:	bd08      	pop	{r3, pc}
    AUDIO_OUT_Error_CallBack();
 8000748:	f7ff fff6 	bl	8000738 <AUDIO_OUT_Error_CallBack>
}
 800074c:	e7fb      	b.n	8000746 <HAL_I2S_ErrorCallback+0xa>
 800074e:	bf00      	nop
 8000750:	40003c00 	.word	0x40003c00

08000754 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	b088      	sub	sp, #32
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8000758:	482b      	ldr	r0, [pc, #172]	; (8000808 <I2Cx_Init+0xb4>)
 800075a:	f002 ff17 	bl	800358c <HAL_I2C_GetState>
 800075e:	b108      	cbz	r0, 8000764 <I2Cx_Init+0x10>

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
    HAL_I2C_Init(&I2cHandle);
  }
}
 8000760:	b008      	add	sp, #32
 8000762:	bd70      	pop	{r4, r5, r6, pc}
    I2cHandle.Instance = AUDIO_I2Cx;
 8000764:	4c28      	ldr	r4, [pc, #160]	; (8000808 <I2Cx_Init+0xb4>)
 8000766:	4b29      	ldr	r3, [pc, #164]	; (800080c <I2Cx_Init+0xb8>)
 8000768:	6023      	str	r3, [r4, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 800076a:	2343      	movs	r3, #67	; 0x43
 800076c:	60e3      	str	r3, [r4, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 800076e:	4b28      	ldr	r3, [pc, #160]	; (8000810 <I2Cx_Init+0xbc>)
 8000770:	6063      	str	r3, [r4, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000772:	2500      	movs	r5, #0
 8000774:	60a5      	str	r5, [r4, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000776:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800077a:	6123      	str	r3, [r4, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 800077c:	6165      	str	r5, [r4, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 800077e:	61a5      	str	r5, [r4, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8000780:	61e5      	str	r5, [r4, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8000782:	6225      	str	r5, [r4, #32]
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the I2C peripheral */
  AUDIO_I2Cx_CLOCK_ENABLE();
 8000784:	9501      	str	r5, [sp, #4]
 8000786:	4e23      	ldr	r6, [pc, #140]	; (8000814 <I2Cx_Init+0xc0>)
 8000788:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800078a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800078e:	6433      	str	r3, [r6, #64]	; 0x40
 8000790:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8000792:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000796:	9301      	str	r3, [sp, #4]
 8000798:	9b01      	ldr	r3, [sp, #4]

  /* Enable SCK and SDA GPIO clocks */
  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 800079a:	9502      	str	r5, [sp, #8]
 800079c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800079e:	f043 0302 	orr.w	r3, r3, #2
 80007a2:	6333      	str	r3, [r6, #48]	; 0x30
 80007a4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	9302      	str	r3, [sp, #8]
 80007ac:	9b02      	ldr	r3, [sp, #8]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 80007ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007b2:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 80007b4:	2312      	movs	r3, #18
 80007b6:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80007b8:	9505      	str	r5, [sp, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80007ba:	2302      	movs	r3, #2
 80007bc:	9306      	str	r3, [sp, #24]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 80007be:	2304      	movs	r3, #4
 80007c0:	9307      	str	r3, [sp, #28]

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 80007c2:	a903      	add	r1, sp, #12
 80007c4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80007c8:	f500 3001 	add.w	r0, r0, #132096	; 0x20400
 80007cc:	f001 fa62 	bl	8001c94 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  AUDIO_I2Cx_FORCE_RESET();
 80007d0:	6a33      	ldr	r3, [r6, #32]
 80007d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007d6:	6233      	str	r3, [r6, #32]

  /* Release the I2C peripheral clock reset */
  AUDIO_I2Cx_RELEASE_RESET();
 80007d8:	6a33      	ldr	r3, [r6, #32]
 80007da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80007de:	6233      	str	r3, [r6, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80007e0:	462a      	mov	r2, r5
 80007e2:	210f      	movs	r1, #15
 80007e4:	201f      	movs	r0, #31
 80007e6:	f000 ffdb 	bl	80017a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 80007ea:	201f      	movs	r0, #31
 80007ec:	f001 f80e 	bl	800180c <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80007f0:	462a      	mov	r2, r5
 80007f2:	210f      	movs	r1, #15
 80007f4:	2020      	movs	r0, #32
 80007f6:	f000 ffd3 	bl	80017a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 80007fa:	2020      	movs	r0, #32
 80007fc:	f001 f806 	bl	800180c <HAL_NVIC_EnableIRQ>
    HAL_I2C_Init(&I2cHandle);
 8000800:	4620      	mov	r0, r4
 8000802:	f002 fbb7 	bl	8002f74 <HAL_I2C_Init>
}
 8000806:	e7ab      	b.n	8000760 <I2Cx_Init+0xc>
 8000808:	20000190 	.word	0x20000190
 800080c:	40005400 	.word	0x40005400
 8000810:	000186a0 	.word	0x000186a0
 8000814:	40023800 	.word	0x40023800

08000818 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8000818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800081a:	b087      	sub	sp, #28
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 800081c:	2600      	movs	r6, #0
 800081e:	9600      	str	r6, [sp, #0]
 8000820:	4b15      	ldr	r3, [pc, #84]	; (8000878 <AUDIO_IO_Init+0x60>)
 8000822:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000824:	f042 0208 	orr.w	r2, r2, #8
 8000828:	631a      	str	r2, [r3, #48]	; 0x30
 800082a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082c:	f003 0308 	and.w	r3, r3, #8
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	9b00      	ldr	r3, [sp, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8000834:	f44f 7580 	mov.w	r5, #256	; 0x100
 8000838:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2701      	movs	r7, #1
 800083c:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800083e:	2302      	movs	r3, #2
 8000840:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000842:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8000844:	4c0d      	ldr	r4, [pc, #52]	; (800087c <AUDIO_IO_Init+0x64>)
 8000846:	a901      	add	r1, sp, #4
 8000848:	4620      	mov	r0, r4
 800084a:	f001 fa23 	bl	8001c94 <HAL_GPIO_Init>
  
  I2Cx_Init();
 800084e:	f7ff ff81 	bl	8000754 <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8000852:	4632      	mov	r2, r6
 8000854:	4629      	mov	r1, r5
 8000856:	4620      	mov	r0, r4
 8000858:	f001 fbce 	bl	8001ff8 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 800085c:	2005      	movs	r0, #5
 800085e:	f000 ff79 	bl	8001754 <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8000862:	463a      	mov	r2, r7
 8000864:	4629      	mov	r1, r5
 8000866:	4620      	mov	r0, r4
 8000868:	f001 fbc6 	bl	8001ff8 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 800086c:	2005      	movs	r0, #5
 800086e:	f000 ff71 	bl	8001754 <HAL_Delay>
}
 8000872:	b007      	add	sp, #28
 8000874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800
 800087c:	40020800 	.word	0x40020800

08000880 <AUDIO_IO_DeInit>:
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
  
}
 8000880:	4770      	bx	lr
	...

08000884 <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000884:	b500      	push	{lr}
 8000886:	b087      	sub	sp, #28
  I2Cx_WriteData(Addr, Reg, Value);
 8000888:	f88d 2017 	strb.w	r2, [sp, #23]
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 800088c:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <AUDIO_IO_Write+0x38>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	9302      	str	r3, [sp, #8]
 8000892:	2301      	movs	r3, #1
 8000894:	9301      	str	r3, [sp, #4]
 8000896:	f10d 0217 	add.w	r2, sp, #23
 800089a:	9200      	str	r2, [sp, #0]
 800089c:	460a      	mov	r2, r1
 800089e:	4601      	mov	r1, r0
 80008a0:	4807      	ldr	r0, [pc, #28]	; (80008c0 <AUDIO_IO_Write+0x3c>)
 80008a2:	f002 fc43 	bl	800312c <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 80008a6:	b910      	cbnz	r0, 80008ae <AUDIO_IO_Write+0x2a>
}
 80008a8:	b007      	add	sp, #28
 80008aa:	f85d fb04 	ldr.w	pc, [sp], #4
  HAL_I2C_DeInit(&I2cHandle);
 80008ae:	4804      	ldr	r0, [pc, #16]	; (80008c0 <AUDIO_IO_Write+0x3c>)
 80008b0:	f002 fc22 	bl	80030f8 <HAL_I2C_DeInit>
  I2Cx_Init();
 80008b4:	f7ff ff4e 	bl	8000754 <I2Cx_Init>
}
 80008b8:	e7f6      	b.n	80008a8 <AUDIO_IO_Write+0x24>
 80008ba:	bf00      	nop
 80008bc:	20000000 	.word	0x20000000
 80008c0:	20000190 	.word	0x20000190

080008c4 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
 80008c4:	b500      	push	{lr}
 80008c6:	b087      	sub	sp, #28
 80008c8:	460a      	mov	r2, r1
  uint8_t value = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80008d0:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <AUDIO_IO_Read+0x3c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	9302      	str	r3, [sp, #8]
 80008d6:	2301      	movs	r3, #1
 80008d8:	9301      	str	r3, [sp, #4]
 80008da:	f10d 0117 	add.w	r1, sp, #23
 80008de:	9100      	str	r1, [sp, #0]
 80008e0:	4601      	mov	r1, r0
 80008e2:	4808      	ldr	r0, [pc, #32]	; (8000904 <AUDIO_IO_Read+0x40>)
 80008e4:	f002 fcd8 	bl	8003298 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80008e8:	b920      	cbnz	r0, 80008f4 <AUDIO_IO_Read+0x30>
  return I2Cx_ReadData(Addr, Reg);
}
 80008ea:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80008ee:	b007      	add	sp, #28
 80008f0:	f85d fb04 	ldr.w	pc, [sp], #4
  HAL_I2C_DeInit(&I2cHandle);
 80008f4:	4803      	ldr	r0, [pc, #12]	; (8000904 <AUDIO_IO_Read+0x40>)
 80008f6:	f002 fbff 	bl	80030f8 <HAL_I2C_DeInit>
  I2Cx_Init();
 80008fa:	f7ff ff2b 	bl	8000754 <I2Cx_Init>
}
 80008fe:	e7f4      	b.n	80008ea <AUDIO_IO_Read+0x26>
 8000900:	20000000 	.word	0x20000000
 8000904:	20000190 	.word	0x20000190

08000908 <cs43l22_SetFrequency>:
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
  return 0;
}
 8000908:	2000      	movs	r0, #0
 800090a:	4770      	bx	lr

0800090c <cs43l22_Reset>:
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
  return 0;
}
 800090c:	2000      	movs	r0, #0
 800090e:	4770      	bx	lr

08000910 <cs43l22_DeInit>:
{
 8000910:	b508      	push	{r3, lr}
  AUDIO_IO_DeInit();
 8000912:	f7ff ffb5 	bl	8000880 <AUDIO_IO_DeInit>
}
 8000916:	bd08      	pop	{r3, pc}

08000918 <cs43l22_ReadID>:
{
 8000918:	b510      	push	{r4, lr}
 800091a:	4604      	mov	r4, r0
  AUDIO_IO_Init(); 
 800091c:	f7ff ff7c 	bl	8000818 <AUDIO_IO_Init>
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8000920:	2101      	movs	r1, #1
 8000922:	b2e0      	uxtb	r0, r4
 8000924:	f7ff ffce 	bl	80008c4 <AUDIO_IO_Read>
}
 8000928:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 800092c:	bd10      	pop	{r4, pc}
	...

08000930 <cs43l22_SetOutputMode>:
{
 8000930:	b508      	push	{r3, lr}
  switch (Output) 
 8000932:	3901      	subs	r1, #1
 8000934:	2903      	cmp	r1, #3
 8000936:	d828      	bhi.n	800098a <cs43l22_SetOutputMode+0x5a>
 8000938:	e8df f001 	tbb	[pc, r1]
 800093c:	1e150c02 	.word	0x1e150c02
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
  uint32_t result = 0;
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8000940:	22fa      	movs	r2, #250	; 0xfa
 8000942:	2104      	movs	r1, #4
 8000944:	b2c0      	uxtb	r0, r0
 8000946:	f7ff ff9d 	bl	8000884 <AUDIO_IO_Write>
      OutputDev = 0xFA;
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <cs43l22_SetOutputMode+0x6c>)
 800094c:	22fa      	movs	r2, #250	; 0xfa
 800094e:	701a      	strb	r2, [r3, #0]
}
 8000950:	2000      	movs	r0, #0
 8000952:	bd08      	pop	{r3, pc}
  AUDIO_IO_Write(Addr, Reg, Value);
 8000954:	22af      	movs	r2, #175	; 0xaf
 8000956:	2104      	movs	r1, #4
 8000958:	b2c0      	uxtb	r0, r0
 800095a:	f7ff ff93 	bl	8000884 <AUDIO_IO_Write>
      OutputDev = 0xAF;
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <cs43l22_SetOutputMode+0x6c>)
 8000960:	22af      	movs	r2, #175	; 0xaf
 8000962:	701a      	strb	r2, [r3, #0]
      break;
 8000964:	e7f4      	b.n	8000950 <cs43l22_SetOutputMode+0x20>
  AUDIO_IO_Write(Addr, Reg, Value);
 8000966:	22aa      	movs	r2, #170	; 0xaa
 8000968:	2104      	movs	r1, #4
 800096a:	b2c0      	uxtb	r0, r0
 800096c:	f7ff ff8a 	bl	8000884 <AUDIO_IO_Write>
      OutputDev = 0xAA;
 8000970:	4b0a      	ldr	r3, [pc, #40]	; (800099c <cs43l22_SetOutputMode+0x6c>)
 8000972:	22aa      	movs	r2, #170	; 0xaa
 8000974:	701a      	strb	r2, [r3, #0]
      break;
 8000976:	e7eb      	b.n	8000950 <cs43l22_SetOutputMode+0x20>
  AUDIO_IO_Write(Addr, Reg, Value);
 8000978:	2205      	movs	r2, #5
 800097a:	2104      	movs	r1, #4
 800097c:	b2c0      	uxtb	r0, r0
 800097e:	f7ff ff81 	bl	8000884 <AUDIO_IO_Write>
      OutputDev = 0x05;
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <cs43l22_SetOutputMode+0x6c>)
 8000984:	2205      	movs	r2, #5
 8000986:	701a      	strb	r2, [r3, #0]
      break;    
 8000988:	e7e2      	b.n	8000950 <cs43l22_SetOutputMode+0x20>
  AUDIO_IO_Write(Addr, Reg, Value);
 800098a:	2205      	movs	r2, #5
 800098c:	2104      	movs	r1, #4
 800098e:	b2c0      	uxtb	r0, r0
 8000990:	f7ff ff78 	bl	8000884 <AUDIO_IO_Write>
      OutputDev = 0x05;
 8000994:	4b01      	ldr	r3, [pc, #4]	; (800099c <cs43l22_SetOutputMode+0x6c>)
 8000996:	2205      	movs	r2, #5
 8000998:	701a      	strb	r2, [r3, #0]
      break;
 800099a:	e7d9      	b.n	8000950 <cs43l22_SetOutputMode+0x20>
 800099c:	200001e4 	.word	0x200001e4

080009a0 <cs43l22_SetMute>:
{
 80009a0:	b510      	push	{r4, lr}
  if(Cmd == AUDIO_MUTE_ON)
 80009a2:	2901      	cmp	r1, #1
 80009a4:	d012      	beq.n	80009cc <cs43l22_SetMute+0x2c>
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 80009a6:	b2c4      	uxtb	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2122      	movs	r1, #34	; 0x22
 80009ac:	4620      	mov	r0, r4
 80009ae:	f7ff ff69 	bl	8000884 <AUDIO_IO_Write>
 80009b2:	2200      	movs	r2, #0
 80009b4:	2123      	movs	r1, #35	; 0x23
 80009b6:	4620      	mov	r0, r4
 80009b8:	f7ff ff64 	bl	8000884 <AUDIO_IO_Write>
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <cs43l22_SetMute+0x50>)
 80009be:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 80009c0:	2104      	movs	r1, #4
 80009c2:	4620      	mov	r0, r4
 80009c4:	f7ff ff5e 	bl	8000884 <AUDIO_IO_Write>
}
 80009c8:	2000      	movs	r0, #0
 80009ca:	bd10      	pop	{r4, pc}
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 80009cc:	b2c4      	uxtb	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 80009ce:	22ff      	movs	r2, #255	; 0xff
 80009d0:	2104      	movs	r1, #4
 80009d2:	4620      	mov	r0, r4
 80009d4:	f7ff ff56 	bl	8000884 <AUDIO_IO_Write>
 80009d8:	2201      	movs	r2, #1
 80009da:	2122      	movs	r1, #34	; 0x22
 80009dc:	4620      	mov	r0, r4
 80009de:	f7ff ff51 	bl	8000884 <AUDIO_IO_Write>
 80009e2:	2201      	movs	r2, #1
 80009e4:	2123      	movs	r1, #35	; 0x23
 80009e6:	4620      	mov	r0, r4
 80009e8:	f7ff ff4c 	bl	8000884 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80009ec:	e7ec      	b.n	80009c8 <cs43l22_SetMute+0x28>
 80009ee:	bf00      	nop
 80009f0:	200001e4 	.word	0x200001e4

080009f4 <cs43l22_Play>:
{
 80009f4:	b538      	push	{r3, r4, r5, lr}
  if(Is_cs43l22_Stop == 1)
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <cs43l22_Play+0x3c>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d002      	beq.n	8000a04 <cs43l22_Play+0x10>
  uint32_t counter = 0;
 80009fe:	2400      	movs	r4, #0
}
 8000a00:	4620      	mov	r0, r4
 8000a02:	bd38      	pop	{r3, r4, r5, pc}
 8000a04:	4604      	mov	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0b00000110);
 8000a06:	b2c5      	uxtb	r5, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8000a08:	2206      	movs	r2, #6
 8000a0a:	210e      	movs	r1, #14
 8000a0c:	4628      	mov	r0, r5
 8000a0e:	f7ff ff39 	bl	8000884 <AUDIO_IO_Write>
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000a12:	2100      	movs	r1, #0
 8000a14:	4620      	mov	r0, r4
 8000a16:	f7ff ffc3 	bl	80009a0 <cs43l22_SetMute>
 8000a1a:	4604      	mov	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8000a1c:	229e      	movs	r2, #158	; 0x9e
 8000a1e:	2102      	movs	r1, #2
 8000a20:	4628      	mov	r0, r5
 8000a22:	f7ff ff2f 	bl	8000884 <AUDIO_IO_Write>
    Is_cs43l22_Stop = 0;
 8000a26:	4b02      	ldr	r3, [pc, #8]	; (8000a30 <cs43l22_Play+0x3c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
 8000a2c:	e7e8      	b.n	8000a00 <cs43l22_Play+0xc>
 8000a2e:	bf00      	nop
 8000a30:	20000004 	.word	0x20000004

08000a34 <cs43l22_Pause>:
{  
 8000a34:	b538      	push	{r3, r4, r5, lr}
 8000a36:	4605      	mov	r5, r0
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000a38:	2101      	movs	r1, #1
 8000a3a:	f7ff ffb1 	bl	80009a0 <cs43l22_SetMute>
 8000a3e:	4604      	mov	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8000a40:	2201      	movs	r2, #1
 8000a42:	2102      	movs	r1, #2
 8000a44:	b2e8      	uxtb	r0, r5
 8000a46:	f7ff ff1d 	bl	8000884 <AUDIO_IO_Write>
}
 8000a4a:	4620      	mov	r0, r4
 8000a4c:	bd38      	pop	{r3, r4, r5, pc}
	...

08000a50 <cs43l22_Resume>:
{
 8000a50:	b570      	push	{r4, r5, r6, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	4604      	mov	r4, r0
  volatile uint32_t index = 0x00;
 8000a56:	2600      	movs	r6, #0
 8000a58:	9601      	str	r6, [sp, #4]
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000a5a:	4631      	mov	r1, r6
 8000a5c:	f7ff ffa0 	bl	80009a0 <cs43l22_SetMute>
 8000a60:	4605      	mov	r5, r0
  for(index = 0x00; index < 0xFF; index++);
 8000a62:	9601      	str	r6, [sp, #4]
 8000a64:	9b01      	ldr	r3, [sp, #4]
 8000a66:	2bfe      	cmp	r3, #254	; 0xfe
 8000a68:	d805      	bhi.n	8000a76 <cs43l22_Resume+0x26>
 8000a6a:	9b01      	ldr	r3, [sp, #4]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	9301      	str	r3, [sp, #4]
 8000a70:	9b01      	ldr	r3, [sp, #4]
 8000a72:	2bfe      	cmp	r3, #254	; 0xfe
 8000a74:	d9f9      	bls.n	8000a6a <cs43l22_Resume+0x1a>
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000a76:	b2e4      	uxtb	r4, r4
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <cs43l22_Resume+0x44>)
 8000a7a:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 8000a7c:	2104      	movs	r1, #4
 8000a7e:	4620      	mov	r0, r4
 8000a80:	f7ff ff00 	bl	8000884 <AUDIO_IO_Write>
 8000a84:	229e      	movs	r2, #158	; 0x9e
 8000a86:	2102      	movs	r1, #2
 8000a88:	4620      	mov	r0, r4
 8000a8a:	f7ff fefb 	bl	8000884 <AUDIO_IO_Write>
}
 8000a8e:	4628      	mov	r0, r5
 8000a90:	b002      	add	sp, #8
 8000a92:	bd70      	pop	{r4, r5, r6, pc}
 8000a94:	200001e4 	.word	0x200001e4

08000a98 <cs43l22_Stop>:
{
 8000a98:	b538      	push	{r3, r4, r5, lr}
 8000a9a:	4604      	mov	r4, r0
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	f7ff ff7f 	bl	80009a0 <cs43l22_SetMute>
 8000aa2:	4605      	mov	r5, r0
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000aa4:	b2e4      	uxtb	r4, r4
  AUDIO_IO_Write(Addr, Reg, Value);
 8000aa6:	2204      	movs	r2, #4
 8000aa8:	210e      	movs	r1, #14
 8000aaa:	4620      	mov	r0, r4
 8000aac:	f7ff feea 	bl	8000884 <AUDIO_IO_Write>
 8000ab0:	229f      	movs	r2, #159	; 0x9f
 8000ab2:	2102      	movs	r1, #2
 8000ab4:	4620      	mov	r0, r4
 8000ab6:	f7ff fee5 	bl	8000884 <AUDIO_IO_Write>
  Is_cs43l22_Stop = 1;
 8000aba:	4b02      	ldr	r3, [pc, #8]	; (8000ac4 <cs43l22_Stop+0x2c>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	701a      	strb	r2, [r3, #0]
}
 8000ac0:	4628      	mov	r0, r5
 8000ac2:	bd38      	pop	{r3, r4, r5, pc}
 8000ac4:	20000004 	.word	0x20000004

08000ac8 <cs43l22_SetVolume>:
{
 8000ac8:	b538      	push	{r3, r4, r5, lr}
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 8000aca:	b2c5      	uxtb	r5, r0
 8000acc:	3119      	adds	r1, #25
 8000ace:	b2cc      	uxtb	r4, r1
  AUDIO_IO_Write(Addr, Reg, Value);
 8000ad0:	4622      	mov	r2, r4
 8000ad2:	2120      	movs	r1, #32
 8000ad4:	4628      	mov	r0, r5
 8000ad6:	f7ff fed5 	bl	8000884 <AUDIO_IO_Write>
 8000ada:	4622      	mov	r2, r4
 8000adc:	2121      	movs	r1, #33	; 0x21
 8000ade:	4628      	mov	r0, r5
 8000ae0:	f7ff fed0 	bl	8000884 <AUDIO_IO_Write>
}
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	bd38      	pop	{r3, r4, r5, pc}

08000ae8 <cs43l22_Init>:
{
 8000ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000aec:	4605      	mov	r5, r0
 8000aee:	460e      	mov	r6, r1
 8000af0:	4617      	mov	r7, r2
  AUDIO_IO_Init();     
 8000af2:	f7ff fe91 	bl	8000818 <AUDIO_IO_Init>
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000af6:	b2ec      	uxtb	r4, r5
  AUDIO_IO_Write(Addr, Reg, Value);
 8000af8:	2201      	movs	r2, #1
 8000afa:	2102      	movs	r1, #2
 8000afc:	4620      	mov	r0, r4
 8000afe:	f7ff fec1 	bl	8000884 <AUDIO_IO_Write>
  switch (OutputDevice)
 8000b02:	1e73      	subs	r3, r6, #1
 8000b04:	2b03      	cmp	r3, #3
 8000b06:	d875      	bhi.n	8000bf4 <cs43l22_Init+0x10c>
 8000b08:	e8df f003 	tbb	[pc, r3]
 8000b0c:	706c5402 	.word	0x706c5402
    OutputDev = 0xFA;
 8000b10:	4b46      	ldr	r3, [pc, #280]	; (8000c2c <cs43l22_Init+0x144>)
 8000b12:	22fa      	movs	r2, #250	; 0xfa
 8000b14:	701a      	strb	r2, [r3, #0]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000b16:	4b45      	ldr	r3, [pc, #276]	; (8000c2c <cs43l22_Init+0x144>)
 8000b18:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 8000b1a:	2104      	movs	r1, #4
 8000b1c:	4620      	mov	r0, r4
 8000b1e:	f7ff feb1 	bl	8000884 <AUDIO_IO_Write>
 8000b22:	2281      	movs	r2, #129	; 0x81
 8000b24:	2105      	movs	r1, #5
 8000b26:	4620      	mov	r0, r4
 8000b28:	f7ff feac 	bl	8000884 <AUDIO_IO_Write>
 8000b2c:	2204      	movs	r2, #4
 8000b2e:	2106      	movs	r1, #6
 8000b30:	4620      	mov	r0, r4
 8000b32:	f7ff fea7 	bl	8000884 <AUDIO_IO_Write>
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000b36:	4639      	mov	r1, r7
 8000b38:	4628      	mov	r0, r5
 8000b3a:	f7ff ffc5 	bl	8000ac8 <cs43l22_SetVolume>
 8000b3e:	4605      	mov	r5, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8000b40:	2206      	movs	r2, #6
 8000b42:	210f      	movs	r1, #15
 8000b44:	4620      	mov	r0, r4
 8000b46:	f7ff fe9d 	bl	8000884 <AUDIO_IO_Write>
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2124      	movs	r1, #36	; 0x24
 8000b4e:	4620      	mov	r0, r4
 8000b50:	f7ff fe98 	bl	8000884 <AUDIO_IO_Write>
 8000b54:	2200      	movs	r2, #0
 8000b56:	2125      	movs	r1, #37	; 0x25
 8000b58:	4620      	mov	r0, r4
 8000b5a:	f7ff fe93 	bl	8000884 <AUDIO_IO_Write>
 8000b5e:	2200      	movs	r2, #0
 8000b60:	210a      	movs	r1, #10
 8000b62:	4620      	mov	r0, r4
 8000b64:	f7ff fe8e 	bl	8000884 <AUDIO_IO_Write>
 8000b68:	2204      	movs	r2, #4
 8000b6a:	210e      	movs	r1, #14
 8000b6c:	4620      	mov	r0, r4
 8000b6e:	f7ff fe89 	bl	8000884 <AUDIO_IO_Write>
 8000b72:	2200      	movs	r2, #0
 8000b74:	2127      	movs	r1, #39	; 0x27
 8000b76:	4620      	mov	r0, r4
 8000b78:	f7ff fe84 	bl	8000884 <AUDIO_IO_Write>
 8000b7c:	220f      	movs	r2, #15
 8000b7e:	211f      	movs	r1, #31
 8000b80:	4620      	mov	r0, r4
 8000b82:	f7ff fe7f 	bl	8000884 <AUDIO_IO_Write>
 8000b86:	220a      	movs	r2, #10
 8000b88:	211a      	movs	r1, #26
 8000b8a:	4620      	mov	r0, r4
 8000b8c:	f7ff fe7a 	bl	8000884 <AUDIO_IO_Write>
 8000b90:	220a      	movs	r2, #10
 8000b92:	211b      	movs	r1, #27
 8000b94:	4620      	mov	r0, r4
 8000b96:	f7ff fe75 	bl	8000884 <AUDIO_IO_Write>
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2108      	movs	r1, #8
 8000b9e:	4620      	mov	r0, r4
 8000ba0:	f7ff fe70 	bl	8000884 <AUDIO_IO_Write>
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2108      	movs	r1, #8
 8000ba8:	4620      	mov	r0, r4
 8000baa:	f7ff fe6b 	bl	8000884 <AUDIO_IO_Write>
}
 8000bae:	4628      	mov	r0, r5
 8000bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    OutputDev = 0xAF;
 8000bb4:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <cs43l22_Init+0x144>)
 8000bb6:	22af      	movs	r2, #175	; 0xaf
 8000bb8:	701a      	strb	r2, [r3, #0]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000bba:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 8000bbc:	2104      	movs	r1, #4
 8000bbe:	4620      	mov	r0, r4
 8000bc0:	f7ff fe60 	bl	8000884 <AUDIO_IO_Write>
 8000bc4:	2281      	movs	r2, #129	; 0x81
 8000bc6:	2105      	movs	r1, #5
 8000bc8:	4620      	mov	r0, r4
 8000bca:	f7ff fe5b 	bl	8000884 <AUDIO_IO_Write>
 8000bce:	2204      	movs	r2, #4
 8000bd0:	2106      	movs	r1, #6
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	f7ff fe56 	bl	8000884 <AUDIO_IO_Write>
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000bd8:	4639      	mov	r1, r7
 8000bda:	4628      	mov	r0, r5
 8000bdc:	f7ff ff74 	bl	8000ac8 <cs43l22_SetVolume>
 8000be0:	4605      	mov	r5, r0
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000be2:	e7bc      	b.n	8000b5e <cs43l22_Init+0x76>
    OutputDev = 0xAA;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <cs43l22_Init+0x144>)
 8000be6:	22aa      	movs	r2, #170	; 0xaa
 8000be8:	701a      	strb	r2, [r3, #0]
    break;
 8000bea:	e794      	b.n	8000b16 <cs43l22_Init+0x2e>
    OutputDev = 0x05;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <cs43l22_Init+0x144>)
 8000bee:	2205      	movs	r2, #5
 8000bf0:	701a      	strb	r2, [r3, #0]
    break;    
 8000bf2:	e790      	b.n	8000b16 <cs43l22_Init+0x2e>
    OutputDev = 0x05;
 8000bf4:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <cs43l22_Init+0x144>)
 8000bf6:	f04f 0805 	mov.w	r8, #5
 8000bfa:	f883 8000 	strb.w	r8, [r3]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000bfe:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 8000c00:	2104      	movs	r1, #4
 8000c02:	4620      	mov	r0, r4
 8000c04:	f7ff fe3e 	bl	8000884 <AUDIO_IO_Write>
 8000c08:	2281      	movs	r2, #129	; 0x81
 8000c0a:	4641      	mov	r1, r8
 8000c0c:	4620      	mov	r0, r4
 8000c0e:	f7ff fe39 	bl	8000884 <AUDIO_IO_Write>
 8000c12:	2204      	movs	r2, #4
 8000c14:	2106      	movs	r1, #6
 8000c16:	4620      	mov	r0, r4
 8000c18:	f7ff fe34 	bl	8000884 <AUDIO_IO_Write>
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000c1c:	4639      	mov	r1, r7
 8000c1e:	4628      	mov	r0, r5
 8000c20:	f7ff ff52 	bl	8000ac8 <cs43l22_SetVolume>
 8000c24:	4605      	mov	r5, r0
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000c26:	2e02      	cmp	r6, #2
 8000c28:	d099      	beq.n	8000b5e <cs43l22_Init+0x76>
 8000c2a:	e789      	b.n	8000b40 <cs43l22_Init+0x58>
 8000c2c:	200001e4 	.word	0x200001e4

08000c30 <cs43l22_SetPassThrough>:
{
 8000c30:	b510      	push	{r4, lr}
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, 0x00);
 8000c32:	b2c4      	uxtb	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2120      	movs	r1, #32
 8000c38:	4620      	mov	r0, r4
 8000c3a:	f7ff fe23 	bl	8000884 <AUDIO_IO_Write>
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2121      	movs	r1, #33	; 0x21
 8000c42:	4620      	mov	r0, r4
 8000c44:	f7ff fe1e 	bl	8000884 <AUDIO_IO_Write>
 8000c48:	221c      	movs	r2, #28
 8000c4a:	2108      	movs	r1, #8
 8000c4c:	4620      	mov	r0, r4
 8000c4e:	f7ff fe19 	bl	8000884 <AUDIO_IO_Write>
 8000c52:	221c      	movs	r2, #28
 8000c54:	2109      	movs	r1, #9
 8000c56:	4620      	mov	r0, r4
 8000c58:	f7ff fe14 	bl	8000884 <AUDIO_IO_Write>
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2114      	movs	r1, #20
 8000c60:	4620      	mov	r0, r4
 8000c62:	f7ff fe0f 	bl	8000884 <AUDIO_IO_Write>
 8000c66:	2200      	movs	r2, #0
 8000c68:	2115      	movs	r1, #21
 8000c6a:	4620      	mov	r0, r4
 8000c6c:	f7ff fe0a 	bl	8000884 <AUDIO_IO_Write>
 8000c70:	22c6      	movs	r2, #198	; 0xc6
 8000c72:	210e      	movs	r1, #14
 8000c74:	4620      	mov	r0, r4
 8000c76:	f7ff fe05 	bl	8000884 <AUDIO_IO_Write>
}
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	bd10      	pop	{r4, pc}

08000c7e <command_callback>:
	Command command;
	memcpy(&command, hcommander.uart_rx_buffer + COMMAND_BYTESIZE, COMMAND_BYTESIZE);
	Commander_Enqueue(&hcommander, &command);
}

void command_callback(Command command) {
 8000c7e:	b084      	sub	sp, #16
 8000c80:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
	//states[0] = states[0] == GPIO_PIN_RESET ? GPIO_PIN_SET : GPIO_PIN_RESET;
}
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <HAL_UART_RxHalfCpltCallback>:
{
 8000c88:	b510      	push	{r4, lr}
 8000c8a:	b0a2      	sub	sp, #136	; 0x88
	memcpy(&command, hcommander.uart_rx_buffer, COMMAND_BYTESIZE);
 8000c8c:	4c06      	ldr	r4, [pc, #24]	; (8000ca8 <HAL_UART_RxHalfCpltCallback+0x20>)
 8000c8e:	2282      	movs	r2, #130	; 0x82
 8000c90:	f104 0108 	add.w	r1, r4, #8
 8000c94:	a801      	add	r0, sp, #4
 8000c96:	f005 fdf7 	bl	8006888 <memcpy>
	Commander_Enqueue(&hcommander, &command);
 8000c9a:	a901      	add	r1, sp, #4
 8000c9c:	4620      	mov	r0, r4
 8000c9e:	f000 fcd8 	bl	8001652 <Commander_Enqueue>
}
 8000ca2:	b022      	add	sp, #136	; 0x88
 8000ca4:	bd10      	pop	{r4, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20002494 	.word	0x20002494

08000cac <HAL_UART_RxCpltCallback>:
{
 8000cac:	b510      	push	{r4, lr}
 8000cae:	b0a2      	sub	sp, #136	; 0x88
	memcpy(&command, hcommander.uart_rx_buffer + COMMAND_BYTESIZE, COMMAND_BYTESIZE);
 8000cb0:	4c06      	ldr	r4, [pc, #24]	; (8000ccc <HAL_UART_RxCpltCallback+0x20>)
 8000cb2:	2282      	movs	r2, #130	; 0x82
 8000cb4:	f104 018a 	add.w	r1, r4, #138	; 0x8a
 8000cb8:	a801      	add	r0, sp, #4
 8000cba:	f005 fde5 	bl	8006888 <memcpy>
	Commander_Enqueue(&hcommander, &command);
 8000cbe:	a901      	add	r1, sp, #4
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	f000 fcc6 	bl	8001652 <Commander_Enqueue>
}
 8000cc6:	b022      	add	sp, #136	; 0x88
 8000cc8:	bd10      	pop	{r4, pc}
 8000cca:	bf00      	nop
 8000ccc:	20002494 	.word	0x20002494

08000cd0 <wave_gen>:
float wave_gen(char t, u_int32_t i, float tone) {

	static float sin_table[128] = { 0.000000F, 0.024541F, 0.049068F, 0.073565F, 0.098017F, 0.122411F, 0.146730F, 0.170962F, 0.195090F, 0.219101F, 0.242980F, 0.266713F, 0.290284F, 0.313681F, 0.336890F, 0.359895F, 0.382683F, 0.405241F, 0.427555F, 0.449611F, 0.471396F, 0.492898F, 0.514102F, 0.534997F, 0.555570F, 0.575808F, 0.595699F, 0.615231F, 0.634393F, 0.653172F, 0.671559F, 0.689540F, 0.707106F, 0.724247F, 0.740951F, 0.757208F, 0.773010F, 0.788346F, 0.803207F, 0.817584F, 0.831469F, 0.844853F, 0.857728F, 0.870087F, 0.881921F, 0.893224F, 0.903989F, 0.914209F, 0.923879F, 0.932992F, 0.941544F, 0.949528F, 0.956940F, 0.963776F, 0.970031F, 0.975702F, 0.980785F, 0.985277F, 0.989176F, 0.992479F, 0.995185F, 0.997290F, 0.998795F, 0.999699F, 1.000000F, 0.999699F, 0.998796F, 0.997291F, 0.995185F, 0.992480F, 0.989177F, 0.985278F, 0.980786F, 0.975702F, 0.970032F, 0.963776F, 0.956941F, 0.949529F, 0.941545F, 0.932993F, 0.923880F, 0.914210F, 0.903990F, 0.893225F, 0.881922F, 0.870088F, 0.857729F, 0.844855F, 0.831471F, 0.817586F, 0.803209F, 0.788348F, 0.773012F, 0.757210F, 0.740952F, 0.724248F, 0.707108F, 0.689542F, 0.671560F, 0.653174F, 0.634395F, 0.615233F, 0.595701F, 0.575810F, 0.555572F, 0.534999F, 0.514105F, 0.492900F, 0.471399F, 0.449613F, 0.427557F, 0.405243F, 0.382685F, 0.359897F, 0.336892F, 0.313684F, 0.290287F, 0.266715F, 0.242982F, 0.219104F, 0.195093F, 0.170964F, 0.146733F, 0.122413F, 0.098019F, 0.073567F, 0.049070F, 0.024544F };
	float period_f = 48000.F / tone;
	u_int32_t period_i = period_f;
	u_int32_t table_index = (i * 256 / period_i) % 256;
 8000cd0:	020b      	lsls	r3, r1, #8
	float period_f = 48000.F / tone;
 8000cd2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000d30 <wave_gen+0x60>
 8000cd6:	eec7 7a00 	vdiv.f32	s15, s14, s0
	u_int32_t period_i = period_f;
 8000cda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cde:	ee17 1a90 	vmov	r1, s15
	u_int32_t table_index = (i * 256 / period_i) % 256;
 8000ce2:	fbb3 f1f1 	udiv	r1, r3, r1

	if (t == 's') {
 8000ce6:	2873      	cmp	r0, #115	; 0x73
 8000ce8:	d00b      	beq.n	8000d02 <wave_gen+0x32>
		if (table_index <= 127) {
			return sin_table[table_index];
		} else {
			return -sin_table[table_index - 128];
		}
	} else if (t == 'q') {
 8000cea:	2871      	cmp	r0, #113	; 0x71
 8000cec:	d11c      	bne.n	8000d28 <wave_gen+0x58>
		if (table_index <= 127) {
			return -1.F;
		} else {
			return 1.F;
 8000cee:	f011 0f80 	tst.w	r1, #128	; 0x80
 8000cf2:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8000cf6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000cfa:	bf18      	it	ne
 8000cfc:	eeb0 0a67 	vmovne.f32	s0, s15
 8000d00:	4770      	bx	lr
	u_int32_t table_index = (i * 256 / period_i) % 256;
 8000d02:	b2cb      	uxtb	r3, r1
		if (table_index <= 127) {
 8000d04:	f011 0f80 	tst.w	r1, #128	; 0x80
 8000d08:	d105      	bne.n	8000d16 <wave_gen+0x46>
			return sin_table[table_index];
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <wave_gen+0x64>)
 8000d0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000d10:	ed93 0a00 	vldr	s0, [r3]
 8000d14:	4770      	bx	lr
			return -sin_table[table_index - 128];
 8000d16:	3b80      	subs	r3, #128	; 0x80
 8000d18:	4a06      	ldr	r2, [pc, #24]	; (8000d34 <wave_gen+0x64>)
 8000d1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000d1e:	ed93 0a00 	vldr	s0, [r3]
 8000d22:	eeb1 0a40 	vneg.f32	s0, s0
 8000d26:	4770      	bx	lr
		}
	} else {
		return 0;
 8000d28:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8000d38 <wave_gen+0x68>
	}
}
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	473b8000 	.word	0x473b8000
 8000d34:	08006b28 	.word	0x08006b28
 8000d38:	00000000 	.word	0x00000000

08000d3c <Convert_ADC>:
//		*res = -16000;
	//*res = 0x0000 + ((buf[1] << 8) + (buf[3]));

//	int32_t tmp = 0xFF000000 * ((buf[1]>>7)&1) + (buf[1]<<16) + (buf[0]<<8) + (buf[3]);

	*res = (buf[1]<<8)+buf[3];
 8000d3c:	7842      	ldrb	r2, [r0, #1]
 8000d3e:	78c3      	ldrb	r3, [r0, #3]
 8000d40:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8000d44:	800b      	strh	r3, [r1, #0]

}
 8000d46:	4770      	bx	lr

08000d48 <HAL_I2S_RxHalfCpltCallback>:

#define BT 3
uint32_t counter = 0;
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000d48:	b538      	push	{r3, r4, r5, lr}
	if (hi2s->Instance == SPI2) {
 8000d4a:	6802      	ldr	r2, [r0, #0]
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <HAL_I2S_RxHalfCpltCallback+0x2c>)
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d000      	beq.n	8000d54 <HAL_I2S_RxHalfCpltCallback+0xc>
		//	debug_samples[samples_count] = temp;
		//	samples_count++;
		//}
		counter++;
	}
}
 8000d52:	bd38      	pop	{r3, r4, r5, pc}
		Convert_ADC(&ADC_BUFF.ADC8[0], &DSP_BUFF[0]);
 8000d54:	4d08      	ldr	r5, [pc, #32]	; (8000d78 <HAL_I2S_RxHalfCpltCallback+0x30>)
 8000d56:	4c09      	ldr	r4, [pc, #36]	; (8000d7c <HAL_I2S_RxHalfCpltCallback+0x34>)
 8000d58:	4629      	mov	r1, r5
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	f7ff ffee 	bl	8000d3c <Convert_ADC>
		Convert_ADC(&ADC_BUFF.ADC8[4], &DSP_BUFF[1]);
 8000d60:	1ca9      	adds	r1, r5, #2
 8000d62:	1d20      	adds	r0, r4, #4
 8000d64:	f7ff ffea 	bl	8000d3c <Convert_ADC>
		counter++;
 8000d68:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <HAL_I2S_RxHalfCpltCallback+0x38>)
 8000d6a:	6813      	ldr	r3, [r2, #0]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	6013      	str	r3, [r2, #0]
}
 8000d70:	e7ef      	b.n	8000d52 <HAL_I2S_RxHalfCpltCallback+0xa>
 8000d72:	bf00      	nop
 8000d74:	40003800 	.word	0x40003800
 8000d78:	20002488 	.word	0x20002488
 8000d7c:	200001e8 	.word	0x200001e8
 8000d80:	20002490 	.word	0x20002490

08000d84 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000d84:	b538      	push	{r3, r4, r5, lr}
	if (hi2s->Instance == SPI2) {
 8000d86:	6802      	ldr	r2, [r0, #0]
 8000d88:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <HAL_I2S_RxCpltCallback+0x30>)
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d000      	beq.n	8000d90 <HAL_I2S_RxCpltCallback+0xc>
		//	debug_samples[samples_count] = temp;
		//	samples_count++;
		//}
		counter++;
	}
}
 8000d8e:	bd38      	pop	{r3, r4, r5, pc}
		Convert_ADC(&ADC_BUFF.ADC8[8], &DSP_BUFF[2]);
 8000d90:	4d09      	ldr	r5, [pc, #36]	; (8000db8 <HAL_I2S_RxCpltCallback+0x34>)
 8000d92:	4c0a      	ldr	r4, [pc, #40]	; (8000dbc <HAL_I2S_RxCpltCallback+0x38>)
 8000d94:	1d29      	adds	r1, r5, #4
 8000d96:	f104 0008 	add.w	r0, r4, #8
 8000d9a:	f7ff ffcf 	bl	8000d3c <Convert_ADC>
		Convert_ADC(&ADC_BUFF.ADC8[12], &DSP_BUFF[3]);
 8000d9e:	1da9      	adds	r1, r5, #6
 8000da0:	f104 000c 	add.w	r0, r4, #12
 8000da4:	f7ff ffca 	bl	8000d3c <Convert_ADC>
		counter++;
 8000da8:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <HAL_I2S_RxCpltCallback+0x3c>)
 8000daa:	6813      	ldr	r3, [r2, #0]
 8000dac:	3301      	adds	r3, #1
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	e7ed      	b.n	8000d8e <HAL_I2S_RxCpltCallback+0xa>
 8000db2:	bf00      	nop
 8000db4:	40003800 	.word	0x40003800
 8000db8:	20002488 	.word	0x20002488
 8000dbc:	200001e8 	.word	0x200001e8
 8000dc0:	20002490 	.word	0x20002490

08000dc4 <AUDIO_OUT_HalfTransfer_CallBack>:

void AUDIO_OUT_HalfTransfer_CallBack() {

	DAC_BUFF[0] = DSP_BUFF[0];
 8000dc4:	4a03      	ldr	r2, [pc, #12]	; (8000dd4 <AUDIO_OUT_HalfTransfer_CallBack+0x10>)
 8000dc6:	8811      	ldrh	r1, [r2, #0]
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <AUDIO_OUT_HalfTransfer_CallBack+0x14>)
 8000dca:	8019      	strh	r1, [r3, #0]
	DAC_BUFF[1] = DSP_BUFF[1];
 8000dcc:	8852      	ldrh	r2, [r2, #2]
 8000dce:	805a      	strh	r2, [r3, #2]
	//DAC_BUFF[2] = DSP_BUFF[2];
	//DAC_BUFF[3] = DSP_BUFF[3];

}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20002488 	.word	0x20002488
 8000dd8:	20002408 	.word	0x20002408

08000ddc <AUDIO_OUT_TransferComplete_CallBack>:

void AUDIO_OUT_TransferComplete_CallBack() {

	//DAC_BUFF[0] = DSP_BUFF[0];
	//DAC_BUFF[1] = DSP_BUFF[1];
	DAC_BUFF[2] = DSP_BUFF[2];
 8000ddc:	4a03      	ldr	r2, [pc, #12]	; (8000dec <AUDIO_OUT_TransferComplete_CallBack+0x10>)
 8000dde:	8891      	ldrh	r1, [r2, #4]
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <AUDIO_OUT_TransferComplete_CallBack+0x14>)
 8000de2:	8099      	strh	r1, [r3, #4]
	DAC_BUFF[3] = DSP_BUFF[3];
 8000de4:	88d2      	ldrh	r2, [r2, #6]
 8000de6:	80da      	strh	r2, [r3, #6]

}
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20002488 	.word	0x20002488
 8000df0:	20002408 	.word	0x20002408

08000df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df4:	b500      	push	{lr}
 8000df6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df8:	2230      	movs	r2, #48	; 0x30
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	a808      	add	r0, sp, #32
 8000dfe:	f005 fd51 	bl	80068a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e02:	2300      	movs	r3, #0
 8000e04:	9303      	str	r3, [sp, #12]
 8000e06:	9304      	str	r3, [sp, #16]
 8000e08:	9305      	str	r3, [sp, #20]
 8000e0a:	9306      	str	r3, [sp, #24]
 8000e0c:	9307      	str	r3, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0e:	9301      	str	r3, [sp, #4]
 8000e10:	4a20      	ldr	r2, [pc, #128]	; (8000e94 <SystemClock_Config+0xa0>)
 8000e12:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000e14:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000e18:	6411      	str	r1, [r2, #64]	; 0x40
 8000e1a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000e1c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000e20:	9201      	str	r2, [sp, #4]
 8000e22:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e24:	9302      	str	r3, [sp, #8]
 8000e26:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <SystemClock_Config+0xa4>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e36:	9302      	str	r3, [sp, #8]
 8000e38:	9b02      	ldr	r3, [sp, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e42:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e44:	2302      	movs	r3, #2
 8000e46:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e48:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000e4c:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e4e:	2204      	movs	r2, #4
 8000e50:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e52:	22a8      	movs	r2, #168	; 0xa8
 8000e54:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e56:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e58:	2307      	movs	r3, #7
 8000e5a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e5c:	a808      	add	r0, sp, #32
 8000e5e:	f002 ff81 	bl	8003d64 <HAL_RCC_OscConfig>
 8000e62:	b998      	cbnz	r0, 8000e8c <SystemClock_Config+0x98>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e64:	230f      	movs	r3, #15
 8000e66:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e74:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e7a:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e7c:	2105      	movs	r1, #5
 8000e7e:	a803      	add	r0, sp, #12
 8000e80:	f003 f9d6 	bl	8004230 <HAL_RCC_ClockConfig>
 8000e84:	b920      	cbnz	r0, 8000e90 <SystemClock_Config+0x9c>
  {
    Error_Handler();
  }
}
 8000e86:	b015      	add	sp, #84	; 0x54
 8000e88:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e8c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e8e:	e7fe      	b.n	8000e8e <SystemClock_Config+0x9a>
 8000e90:	b672      	cpsid	i
 8000e92:	e7fe      	b.n	8000e92 <SystemClock_Config+0x9e>
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40007000 	.word	0x40007000

08000e9c <PeriphCommonClock_Config>:
{
 8000e9c:	b500      	push	{lr}
 8000e9e:	b085      	sub	sp, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 196;
 8000ea8:	23c4      	movs	r3, #196	; 0xc4
 8000eaa:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 4;
 8000eac:	2304      	movs	r3, #4
 8000eae:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eb0:	4668      	mov	r0, sp
 8000eb2:	f003 fa8f 	bl	80043d4 <HAL_RCCEx_PeriphCLKConfig>
 8000eb6:	b910      	cbnz	r0, 8000ebe <PeriphCommonClock_Config+0x22>
}
 8000eb8:	b005      	add	sp, #20
 8000eba:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ebe:	b672      	cpsid	i
	while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <PeriphCommonClock_Config+0x24>
	...

08000ec4 <main>:
{
 8000ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ec8:	ed2d 8b02 	vpush	{d8}
 8000ecc:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8000ece:	f000 fc15 	bl	80016fc <HAL_Init>
  SystemClock_Config();
 8000ed2:	f7ff ff8f 	bl	8000df4 <SystemClock_Config>
  PeriphCommonClock_Config();
 8000ed6:	f7ff ffe1 	bl	8000e9c <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eda:	2400      	movs	r4, #0
 8000edc:	9407      	str	r4, [sp, #28]
 8000ede:	9408      	str	r4, [sp, #32]
 8000ee0:	9409      	str	r4, [sp, #36]	; 0x24
 8000ee2:	940a      	str	r4, [sp, #40]	; 0x28
 8000ee4:	940b      	str	r4, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ee6:	9402      	str	r4, [sp, #8]
 8000ee8:	4da6      	ldr	r5, [pc, #664]	; (8001184 <main+0x2c0>)
 8000eea:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ef0:	632b      	str	r3, [r5, #48]	; 0x30
 8000ef2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ef8:	9302      	str	r3, [sp, #8]
 8000efa:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efc:	9403      	str	r4, [sp, #12]
 8000efe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	632b      	str	r3, [r5, #48]	; 0x30
 8000f06:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	9303      	str	r3, [sp, #12]
 8000f0e:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f10:	9404      	str	r4, [sp, #16]
 8000f12:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000f14:	f043 0304 	orr.w	r3, r3, #4
 8000f18:	632b      	str	r3, [r5, #48]	; 0x30
 8000f1a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000f1c:	f003 0304 	and.w	r3, r3, #4
 8000f20:	9304      	str	r3, [sp, #16]
 8000f22:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f24:	9405      	str	r4, [sp, #20]
 8000f26:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	632b      	str	r3, [r5, #48]	; 0x30
 8000f2e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	9305      	str	r3, [sp, #20]
 8000f36:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f38:	9406      	str	r4, [sp, #24]
 8000f3a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000f3c:	f043 0308 	orr.w	r3, r3, #8
 8000f40:	632b      	str	r3, [r5, #48]	; 0x30
 8000f42:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000f44:	f003 0308 	and.w	r3, r3, #8
 8000f48:	9306      	str	r3, [sp, #24]
 8000f4a:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(SPKRPower_GPIO_Port, SPKRPower_Pin, GPIO_PIN_RESET);
 8000f4c:	f8df 9278 	ldr.w	r9, [pc, #632]	; 80011c8 <main+0x304>
 8000f50:	4622      	mov	r2, r4
 8000f52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f56:	4648      	mov	r0, r9
 8000f58:	f001 f84e 	bl	8001ff8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8000f5c:	f8df 827c 	ldr.w	r8, [pc, #636]	; 80011dc <main+0x318>
 8000f60:	4622      	mov	r2, r4
 8000f62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f66:	4640      	mov	r0, r8
 8000f68:	f001 f846 	bl	8001ff8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f6c:	4f86      	ldr	r7, [pc, #536]	; (8001188 <main+0x2c4>)
 8000f6e:	4622      	mov	r2, r4
 8000f70:	2118      	movs	r1, #24
 8000f72:	4638      	mov	r0, r7
 8000f74:	f001 f840 	bl	8001ff8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SPKRPower_Pin;
 8000f78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f7c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	2601      	movs	r6, #1
 8000f80:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f84:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(SPKRPower_GPIO_Port, &GPIO_InitStruct);
 8000f86:	a907      	add	r1, sp, #28
 8000f88:	4648      	mov	r0, r9
 8000f8a:	f000 fe83 	bl	8001c94 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OtgPower_Pin;
 8000f8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f92:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f94:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(OtgPower_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	a907      	add	r1, sp, #28
 8000f9c:	4640      	mov	r0, r8
 8000f9e:	f000 fe79 	bl	8001c94 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 8000fa2:	2318      	movs	r3, #24
 8000fa4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fac:	a907      	add	r1, sp, #28
 8000fae:	4638      	mov	r0, r7
 8000fb0:	f000 fe70 	bl	8001c94 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fb4:	9401      	str	r4, [sp, #4]
 8000fb6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000fb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fbc:	632b      	str	r3, [r5, #48]	; 0x30
 8000fbe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000fc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fc8:	9407      	str	r4, [sp, #28]
 8000fca:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000fcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fd0:	632b      	str	r3, [r5, #48]	; 0x30
 8000fd2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd8:	9307      	str	r3, [sp, #28]
 8000fda:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000fdc:	4622      	mov	r2, r4
 8000fde:	4621      	mov	r1, r4
 8000fe0:	200e      	movs	r0, #14
 8000fe2:	f000 fbdd 	bl	80017a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000fe6:	200e      	movs	r0, #14
 8000fe8:	f000 fc10 	bl	800180c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000fec:	4622      	mov	r2, r4
 8000fee:	4621      	mov	r1, r4
 8000ff0:	2010      	movs	r0, #16
 8000ff2:	f000 fbd5 	bl	80017a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ff6:	2010      	movs	r0, #16
 8000ff8:	f000 fc08 	bl	800180c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000ffc:	4622      	mov	r2, r4
 8000ffe:	4621      	mov	r1, r4
 8001000:	203a      	movs	r0, #58	; 0x3a
 8001002:	f000 fbcd 	bl	80017a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001006:	203a      	movs	r0, #58	; 0x3a
 8001008:	f000 fc00 	bl	800180c <HAL_NVIC_EnableIRQ>
  huart1.Instance = USART1;
 800100c:	485f      	ldr	r0, [pc, #380]	; (800118c <main+0x2c8>)
 800100e:	4b60      	ldr	r3, [pc, #384]	; (8001190 <main+0x2cc>)
 8001010:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001012:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001016:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001018:	6084      	str	r4, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800101a:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800101c:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800101e:	230c      	movs	r3, #12
 8001020:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001022:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001024:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001026:	f003 fb73 	bl	8004710 <HAL_UART_Init>
 800102a:	2800      	cmp	r0, #0
 800102c:	f040 80a1 	bne.w	8001172 <main+0x2ae>
  MX_FATFS_Init();
 8001030:	f004 f8c8 	bl	80051c4 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001034:	f005 faa2 	bl	800657c <MX_USB_HOST_Init>
  hi2s3.Instance = SPI3;
 8001038:	4856      	ldr	r0, [pc, #344]	; (8001194 <main+0x2d0>)
 800103a:	4b57      	ldr	r3, [pc, #348]	; (8001198 <main+0x2d4>)
 800103c:	6003      	str	r3, [r0, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800103e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001042:	6042      	str	r2, [r0, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001044:	2300      	movs	r3, #0
 8001046:	6083      	str	r3, [r0, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001048:	60c3      	str	r3, [r0, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800104a:	6102      	str	r2, [r0, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800104c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001050:	6142      	str	r2, [r0, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001052:	6183      	str	r3, [r0, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001054:	61c3      	str	r3, [r0, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001056:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001058:	f002 fa9c 	bl	8003594 <HAL_I2S_Init>
 800105c:	2800      	cmp	r0, #0
 800105e:	f040 808a 	bne.w	8001176 <main+0x2b2>
  hi2c1.Instance = I2C1;
 8001062:	484e      	ldr	r0, [pc, #312]	; (800119c <main+0x2d8>)
 8001064:	4b4e      	ldr	r3, [pc, #312]	; (80011a0 <main+0x2dc>)
 8001066:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001068:	4b4e      	ldr	r3, [pc, #312]	; (80011a4 <main+0x2e0>)
 800106a:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800106c:	2300      	movs	r3, #0
 800106e:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001070:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001072:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001076:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001078:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800107a:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800107c:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800107e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001080:	f001 ff78 	bl	8002f74 <HAL_I2C_Init>
 8001084:	2800      	cmp	r0, #0
 8001086:	d178      	bne.n	800117a <main+0x2b6>
  hi2s2.Instance = SPI2;
 8001088:	4847      	ldr	r0, [pc, #284]	; (80011a8 <main+0x2e4>)
 800108a:	4b48      	ldr	r3, [pc, #288]	; (80011ac <main+0x2e8>)
 800108c:	6003      	str	r3, [r0, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800108e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001092:	6043      	str	r3, [r0, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001094:	2300      	movs	r3, #0
 8001096:	6083      	str	r3, [r0, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001098:	2203      	movs	r2, #3
 800109a:	60c2      	str	r2, [r0, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800109c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a0:	6102      	str	r2, [r0, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80010a2:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80010a6:	6142      	str	r2, [r0, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80010a8:	6183      	str	r3, [r0, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80010aa:	61c3      	str	r3, [r0, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80010ac:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80010ae:	f002 fa71 	bl	8003594 <HAL_I2S_Init>
 80010b2:	2800      	cmp	r0, #0
 80010b4:	d163      	bne.n	800117e <main+0x2ba>
	Commander_Init(&hcommander, &huart1, &hdma_usart1_rx, command_callback);
 80010b6:	4c3e      	ldr	r4, [pc, #248]	; (80011b0 <main+0x2ec>)
 80010b8:	4b3e      	ldr	r3, [pc, #248]	; (80011b4 <main+0x2f0>)
 80010ba:	4a3f      	ldr	r2, [pc, #252]	; (80011b8 <main+0x2f4>)
 80010bc:	4933      	ldr	r1, [pc, #204]	; (800118c <main+0x2c8>)
 80010be:	4620      	mov	r0, r4
 80010c0:	f000 faaf 	bl	8001622 <Commander_Init>
	Commander_Start(&hcommander);
 80010c4:	4620      	mov	r0, r4
 80010c6:	f000 fabb 	bl	8001640 <Commander_Start>
	for(int i = 1;i < 2180; i+=2) {
 80010ca:	2401      	movs	r4, #1
		float temp = wave_gen('s', i/2, 220.) * 16000;
 80010cc:	eddf 8a3b 	vldr	s17, [pc, #236]	; 80011bc <main+0x2f8>
 80010d0:	f04f 0873 	mov.w	r8, #115	; 0x73
 80010d4:	ed9f 8a3a 	vldr	s16, [pc, #232]	; 80011c0 <main+0x2fc>
		AUDIO_OUT[i] = temp;
 80010d8:	4d3a      	ldr	r5, [pc, #232]	; (80011c4 <main+0x300>)
		AUDIO_OUT[i-1] = temp;
 80010da:	1eaf      	subs	r7, r5, #2
	for(int i = 1;i < 2180; i+=2) {
 80010dc:	f640 0685 	movw	r6, #2181	; 0x885
		float temp = wave_gen('s', i/2, 220.) * 16000;
 80010e0:	eb04 71d4 	add.w	r1, r4, r4, lsr #31
 80010e4:	eeb0 0a68 	vmov.f32	s0, s17
 80010e8:	1049      	asrs	r1, r1, #1
 80010ea:	4640      	mov	r0, r8
 80010ec:	f7ff fdf0 	bl	8000cd0 <wave_gen>
 80010f0:	ee20 0a08 	vmul.f32	s0, s0, s16
		AUDIO_OUT[i] = temp;
 80010f4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80010f8:	ee10 3a10 	vmov	r3, s0
 80010fc:	b21b      	sxth	r3, r3
 80010fe:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
		AUDIO_OUT[i-1] = temp;
 8001102:	f827 3014 	strh.w	r3, [r7, r4, lsl #1]
	for(int i = 1;i < 2180; i+=2) {
 8001106:	3402      	adds	r4, #2
 8001108:	42b4      	cmp	r4, r6
 800110a:	d1e9      	bne.n	80010e0 <main+0x21c>
	HAL_GPIO_WritePin(SPKRPower_GPIO_Port, SPKRPower_Pin, RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001112:	482d      	ldr	r0, [pc, #180]	; (80011c8 <main+0x304>)
 8001114:	f000 ff70 	bl	8001ff8 <HAL_GPIO_WritePin>
	AUDIO_OUT_Init(3, 0,  AUDIO_FREQUENCY_48K);
 8001118:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800111c:	2100      	movs	r1, #0
 800111e:	2003      	movs	r0, #3
 8001120:	f7ff fab6 	bl	8000690 <AUDIO_OUT_Init>
	cs43l22_SetOutputMode(AUDIO_I2C_ADDRESS,OUTPUT_DEVICE_HEADPHONE ); //OUTPUT_DEVICE_BOTH
 8001124:	2102      	movs	r1, #2
 8001126:	2094      	movs	r0, #148	; 0x94
 8001128:	f7ff fc02 	bl	8000930 <cs43l22_SetOutputMode>
	cs43l22_SetPassThrough(AUDIO_I2C_ADDRESS,0,0);
 800112c:	2200      	movs	r2, #0
 800112e:	4611      	mov	r1, r2
 8001130:	2094      	movs	r0, #148	; 0x94
 8001132:	f7ff fd7d 	bl	8000c30 <cs43l22_SetPassThrough>
	cs43l22_drv.Play(AUDIO_I2C_ADDRESS, (uint16_t *)DAC_BUFF, 4);
 8001136:	4c25      	ldr	r4, [pc, #148]	; (80011cc <main+0x308>)
 8001138:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <main+0x30c>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	2204      	movs	r2, #4
 800113e:	4621      	mov	r1, r4
 8001140:	2094      	movs	r0, #148	; 0x94
 8001142:	4798      	blx	r3
	cs43l22_SetVolume(AUDIO_I2C_ADDRESS, 150);
 8001144:	2196      	movs	r1, #150	; 0x96
 8001146:	2094      	movs	r0, #148	; 0x94
 8001148:	f7ff fcbe 	bl	8000ac8 <cs43l22_SetVolume>
	HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)DAC_BUFF, 4);
 800114c:	2204      	movs	r2, #4
 800114e:	4621      	mov	r1, r4
 8001150:	4810      	ldr	r0, [pc, #64]	; (8001194 <main+0x2d0>)
 8001152:	f002 fae1 	bl	8003718 <HAL_I2S_Transmit_DMA>
	HAL_I2S_Receive_DMA(&hi2s2, ADC_BUFF.ADC16, 4);
 8001156:	2204      	movs	r2, #4
 8001158:	491e      	ldr	r1, [pc, #120]	; (80011d4 <main+0x310>)
 800115a:	4813      	ldr	r0, [pc, #76]	; (80011a8 <main+0x2e4>)
 800115c:	f002 fb4a 	bl	80037f4 <HAL_I2S_Receive_DMA>
		HAL_Delay(1000);
 8001160:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
		counter = 0;
 8001164:	4d1c      	ldr	r5, [pc, #112]	; (80011d8 <main+0x314>)
 8001166:	2400      	movs	r4, #0
		HAL_Delay(1000);
 8001168:	4630      	mov	r0, r6
 800116a:	f000 faf3 	bl	8001754 <HAL_Delay>
		counter = 0;
 800116e:	602c      	str	r4, [r5, #0]
	while(1){
 8001170:	e7fa      	b.n	8001168 <main+0x2a4>
 8001172:	b672      	cpsid	i
	while (1)
 8001174:	e7fe      	b.n	8001174 <main+0x2b0>
 8001176:	b672      	cpsid	i
 8001178:	e7fe      	b.n	8001178 <main+0x2b4>
 800117a:	b672      	cpsid	i
 800117c:	e7fe      	b.n	800117c <main+0x2b8>
 800117e:	b672      	cpsid	i
 8001180:	e7fe      	b.n	8001180 <main+0x2bc>
 8001182:	bf00      	nop
 8001184:	40023800 	.word	0x40023800
 8001188:	40020c00 	.word	0x40020c00
 800118c:	20002ff0 	.word	0x20002ff0
 8001190:	40011000 	.word	0x40011000
 8001194:	20002fa8 	.word	0x20002fa8
 8001198:	40003c00 	.word	0x40003c00
 800119c:	20002f0c 	.word	0x20002f0c
 80011a0:	40005400 	.word	0x40005400
 80011a4:	000186a0 	.word	0x000186a0
 80011a8:	20002f60 	.word	0x20002f60
 80011ac:	40003800 	.word	0x40003800
 80011b0:	20002494 	.word	0x20002494
 80011b4:	08000c7f 	.word	0x08000c7f
 80011b8:	20002eac 	.word	0x20002eac
 80011bc:	435c0000 	.word	0x435c0000
 80011c0:	467a0000 	.word	0x467a0000
 80011c4:	200001f8 	.word	0x200001f8
 80011c8:	40020400 	.word	0x40020400
 80011cc:	20002408 	.word	0x20002408
 80011d0:	20000008 	.word	0x20000008
 80011d4:	200001e8 	.word	0x200001e8
 80011d8:	20002490 	.word	0x20002490
 80011dc:	40020800 	.word	0x40020800

080011e0 <Error_Handler>:
 80011e0:	b672      	cpsid	i
 80011e2:	e7fe      	b.n	80011e2 <Error_Handler+0x2>

080011e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e6:	2100      	movs	r1, #0
 80011e8:	9100      	str	r1, [sp, #0]
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <HAL_MspInit+0x34>)
 80011ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011f2:	645a      	str	r2, [r3, #68]	; 0x44
 80011f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011f6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80011fa:	9200      	str	r2, [sp, #0]
 80011fc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fe:	9101      	str	r1, [sp, #4]
 8001200:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001202:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001206:	641a      	str	r2, [r3, #64]	; 0x40
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120e:	9301      	str	r3, [sp, #4]
 8001210:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001212:	b002      	add	sp, #8
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800

0800121c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800121c:	b530      	push	{r4, r5, lr}
 800121e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	2300      	movs	r3, #0
 8001222:	9303      	str	r3, [sp, #12]
 8001224:	9304      	str	r3, [sp, #16]
 8001226:	9305      	str	r3, [sp, #20]
 8001228:	9306      	str	r3, [sp, #24]
 800122a:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 800122c:	6802      	ldr	r2, [r0, #0]
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <HAL_I2C_MspInit+0x64>)
 8001230:	429a      	cmp	r2, r3
 8001232:	d001      	beq.n	8001238 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001234:	b009      	add	sp, #36	; 0x24
 8001236:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001238:	2500      	movs	r5, #0
 800123a:	9501      	str	r5, [sp, #4]
 800123c:	4c11      	ldr	r4, [pc, #68]	; (8001284 <HAL_I2C_MspInit+0x68>)
 800123e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001240:	f043 0302 	orr.w	r3, r3, #2
 8001244:	6323      	str	r3, [r4, #48]	; 0x30
 8001246:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	9301      	str	r3, [sp, #4]
 800124e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001250:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001254:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001256:	2312      	movs	r3, #18
 8001258:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125a:	2303      	movs	r3, #3
 800125c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800125e:	2304      	movs	r3, #4
 8001260:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001262:	a903      	add	r1, sp, #12
 8001264:	4808      	ldr	r0, [pc, #32]	; (8001288 <HAL_I2C_MspInit+0x6c>)
 8001266:	f000 fd15 	bl	8001c94 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800126a:	9502      	str	r5, [sp, #8]
 800126c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800126e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001272:	6423      	str	r3, [r4, #64]	; 0x40
 8001274:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001276:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800127a:	9302      	str	r3, [sp, #8]
 800127c:	9b02      	ldr	r3, [sp, #8]
}
 800127e:	e7d9      	b.n	8001234 <HAL_I2C_MspInit+0x18>
 8001280:	40005400 	.word	0x40005400
 8001284:	40023800 	.word	0x40023800
 8001288:	40020400 	.word	0x40020400

0800128c <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C1)
 800128c:	6802      	ldr	r2, [r0, #0]
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_I2C_MspDeInit+0x30>)
 8001290:	429a      	cmp	r2, r3
 8001292:	d000      	beq.n	8001296 <HAL_I2C_MspDeInit+0xa>
 8001294:	4770      	bx	lr
{
 8001296:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001298:	4a09      	ldr	r2, [pc, #36]	; (80012c0 <HAL_I2C_MspDeInit+0x34>)
 800129a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800129c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80012a0:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80012a2:	4c08      	ldr	r4, [pc, #32]	; (80012c4 <HAL_I2C_MspDeInit+0x38>)
 80012a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012a8:	4620      	mov	r0, r4
 80012aa:	f000 fdf9 	bl	8001ea0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80012ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012b2:	4620      	mov	r0, r4
 80012b4:	f000 fdf4 	bl	8001ea0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80012b8:	bd10      	pop	{r4, pc}
 80012ba:	bf00      	nop
 80012bc:	40005400 	.word	0x40005400
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020400 	.word	0x40020400

080012c8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80012c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ca:	b08d      	sub	sp, #52	; 0x34
 80012cc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ce:	2300      	movs	r3, #0
 80012d0:	9307      	str	r3, [sp, #28]
 80012d2:	9308      	str	r3, [sp, #32]
 80012d4:	9309      	str	r3, [sp, #36]	; 0x24
 80012d6:	930a      	str	r3, [sp, #40]	; 0x28
 80012d8:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hi2s->Instance==SPI2)
 80012da:	6803      	ldr	r3, [r0, #0]
 80012dc:	4a59      	ldr	r2, [pc, #356]	; (8001444 <HAL_I2S_MspInit+0x17c>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d004      	beq.n	80012ec <HAL_I2S_MspInit+0x24>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hi2s->Instance==SPI3)
 80012e2:	4a59      	ldr	r2, [pc, #356]	; (8001448 <HAL_I2S_MspInit+0x180>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d058      	beq.n	800139a <HAL_I2S_MspInit+0xd2>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80012e8:	b00d      	add	sp, #52	; 0x34
 80012ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012ec:	2500      	movs	r5, #0
 80012ee:	9501      	str	r5, [sp, #4]
 80012f0:	4b56      	ldr	r3, [pc, #344]	; (800144c <HAL_I2S_MspInit+0x184>)
 80012f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012f8:	641a      	str	r2, [r3, #64]	; 0x40
 80012fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012fc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001300:	9201      	str	r2, [sp, #4]
 8001302:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001304:	9502      	str	r5, [sp, #8]
 8001306:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001308:	f042 0202 	orr.w	r2, r2, #2
 800130c:	631a      	str	r2, [r3, #48]	; 0x30
 800130e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001310:	f002 0202 	and.w	r2, r2, #2
 8001314:	9202      	str	r2, [sp, #8]
 8001316:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001318:	9503      	str	r5, [sp, #12]
 800131a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800131c:	f042 0204 	orr.w	r2, r2, #4
 8001320:	631a      	str	r2, [r3, #48]	; 0x30
 8001322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	9303      	str	r3, [sp, #12]
 800132a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800132c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001330:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2702      	movs	r7, #2
 8001334:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001336:	2605      	movs	r6, #5
 8001338:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133a:	a907      	add	r1, sp, #28
 800133c:	4844      	ldr	r0, [pc, #272]	; (8001450 <HAL_I2S_MspInit+0x188>)
 800133e:	f000 fca9 	bl	8001c94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001342:	2340      	movs	r3, #64	; 0x40
 8001344:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800134c:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134e:	a907      	add	r1, sp, #28
 8001350:	4840      	ldr	r0, [pc, #256]	; (8001454 <HAL_I2S_MspInit+0x18c>)
 8001352:	f000 fc9f 	bl	8001c94 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001356:	4840      	ldr	r0, [pc, #256]	; (8001458 <HAL_I2S_MspInit+0x190>)
 8001358:	4b40      	ldr	r3, [pc, #256]	; (800145c <HAL_I2S_MspInit+0x194>)
 800135a:	6003      	str	r3, [r0, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800135c:	6045      	str	r5, [r0, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800135e:	6085      	str	r5, [r0, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001360:	60c5      	str	r5, [r0, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001366:	6103      	str	r3, [r0, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001368:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800136c:	6143      	str	r3, [r0, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800136e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001372:	6183      	str	r3, [r0, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001374:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001378:	61c3      	str	r3, [r0, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800137a:	6205      	str	r5, [r0, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800137c:	2304      	movs	r3, #4
 800137e:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001380:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001382:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001384:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001386:	f000 fa83 	bl	8001890 <HAL_DMA_Init>
 800138a:	b918      	cbnz	r0, 8001394 <HAL_I2S_MspInit+0xcc>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 800138c:	4b32      	ldr	r3, [pc, #200]	; (8001458 <HAL_I2S_MspInit+0x190>)
 800138e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001390:	639c      	str	r4, [r3, #56]	; 0x38
 8001392:	e7a9      	b.n	80012e8 <HAL_I2S_MspInit+0x20>
      Error_Handler();
 8001394:	f7ff ff24 	bl	80011e0 <Error_Handler>
 8001398:	e7f8      	b.n	800138c <HAL_I2S_MspInit+0xc4>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800139a:	2500      	movs	r5, #0
 800139c:	9504      	str	r5, [sp, #16]
 800139e:	4b2b      	ldr	r3, [pc, #172]	; (800144c <HAL_I2S_MspInit+0x184>)
 80013a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013a6:	641a      	str	r2, [r3, #64]	; 0x40
 80013a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013aa:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80013ae:	9204      	str	r2, [sp, #16]
 80013b0:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b2:	9505      	str	r5, [sp, #20]
 80013b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013b6:	f042 0204 	orr.w	r2, r2, #4
 80013ba:	631a      	str	r2, [r3, #48]	; 0x30
 80013bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013be:	f002 0204 	and.w	r2, r2, #4
 80013c2:	9205      	str	r2, [sp, #20]
 80013c4:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c6:	9506      	str	r5, [sp, #24]
 80013c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013ca:	f042 0201 	orr.w	r2, r2, #1
 80013ce:	631a      	str	r2, [r3, #48]	; 0x30
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	9306      	str	r3, [sp, #24]
 80013d8:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 80013da:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80013de:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2702      	movs	r7, #2
 80013e2:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013e4:	2606      	movs	r6, #6
 80013e6:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e8:	a907      	add	r1, sp, #28
 80013ea:	481a      	ldr	r0, [pc, #104]	; (8001454 <HAL_I2S_MspInit+0x18c>)
 80013ec:	f000 fc52 	bl	8001c94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013f4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013fc:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fe:	a907      	add	r1, sp, #28
 8001400:	4817      	ldr	r0, [pc, #92]	; (8001460 <HAL_I2S_MspInit+0x198>)
 8001402:	f000 fc47 	bl	8001c94 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001406:	4817      	ldr	r0, [pc, #92]	; (8001464 <HAL_I2S_MspInit+0x19c>)
 8001408:	4b17      	ldr	r3, [pc, #92]	; (8001468 <HAL_I2S_MspInit+0x1a0>)
 800140a:	6003      	str	r3, [r0, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800140c:	6045      	str	r5, [r0, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800140e:	2340      	movs	r3, #64	; 0x40
 8001410:	6083      	str	r3, [r0, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001412:	60c5      	str	r5, [r0, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001414:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001418:	6103      	str	r3, [r0, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800141a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800141e:	6143      	str	r3, [r0, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001420:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001424:	6183      	str	r3, [r0, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001426:	f44f 7380 	mov.w	r3, #256	; 0x100
 800142a:	61c3      	str	r3, [r0, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800142c:	6205      	str	r5, [r0, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800142e:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001430:	f000 fa2e 	bl	8001890 <HAL_DMA_Init>
 8001434:	b918      	cbnz	r0, 800143e <HAL_I2S_MspInit+0x176>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <HAL_I2S_MspInit+0x19c>)
 8001438:	63a3      	str	r3, [r4, #56]	; 0x38
 800143a:	639c      	str	r4, [r3, #56]	; 0x38
}
 800143c:	e754      	b.n	80012e8 <HAL_I2S_MspInit+0x20>
      Error_Handler();
 800143e:	f7ff fecf 	bl	80011e0 <Error_Handler>
 8001442:	e7f8      	b.n	8001436 <HAL_I2S_MspInit+0x16e>
 8001444:	40003800 	.word	0x40003800
 8001448:	40003c00 	.word	0x40003c00
 800144c:	40023800 	.word	0x40023800
 8001450:	40020400 	.word	0x40020400
 8001454:	40020800 	.word	0x40020800
 8001458:	20002dec 	.word	0x20002dec
 800145c:	40026058 	.word	0x40026058
 8001460:	40020000 	.word	0x40020000
 8001464:	20002e4c 	.word	0x20002e4c
 8001468:	40026088 	.word	0x40026088

0800146c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800146c:	b530      	push	{r4, r5, lr}
 800146e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	2300      	movs	r3, #0
 8001472:	9303      	str	r3, [sp, #12]
 8001474:	9304      	str	r3, [sp, #16]
 8001476:	9305      	str	r3, [sp, #20]
 8001478:	9306      	str	r3, [sp, #24]
 800147a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 800147c:	6802      	ldr	r2, [r0, #0]
 800147e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001482:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8001486:	429a      	cmp	r2, r3
 8001488:	d001      	beq.n	800148e <HAL_UART_MspInit+0x22>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800148a:	b009      	add	sp, #36	; 0x24
 800148c:	bd30      	pop	{r4, r5, pc}
 800148e:	4604      	mov	r4, r0
    __HAL_RCC_USART1_CLK_ENABLE();
 8001490:	2500      	movs	r5, #0
 8001492:	9501      	str	r5, [sp, #4]
 8001494:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8001498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800149a:	f042 0210 	orr.w	r2, r2, #16
 800149e:	645a      	str	r2, [r3, #68]	; 0x44
 80014a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014a2:	f002 0210 	and.w	r2, r2, #16
 80014a6:	9201      	str	r2, [sp, #4]
 80014a8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014aa:	9502      	str	r5, [sp, #8]
 80014ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014ae:	f042 0202 	orr.w	r2, r2, #2
 80014b2:	631a      	str	r2, [r3, #48]	; 0x30
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	9302      	str	r3, [sp, #8]
 80014bc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014be:	23c0      	movs	r3, #192	; 0xc0
 80014c0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c6:	2303      	movs	r3, #3
 80014c8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014ca:	2307      	movs	r3, #7
 80014cc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ce:	a903      	add	r1, sp, #12
 80014d0:	480f      	ldr	r0, [pc, #60]	; (8001510 <HAL_UART_MspInit+0xa4>)
 80014d2:	f000 fbdf 	bl	8001c94 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80014d6:	480f      	ldr	r0, [pc, #60]	; (8001514 <HAL_UART_MspInit+0xa8>)
 80014d8:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <HAL_UART_MspInit+0xac>)
 80014da:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80014dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80014e0:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014e2:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e4:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ea:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014ec:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014ee:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80014f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014f4:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014f6:	6205      	str	r5, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014f8:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80014fa:	f000 f9c9 	bl	8001890 <HAL_DMA_Init>
 80014fe:	b918      	cbnz	r0, 8001508 <HAL_UART_MspInit+0x9c>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <HAL_UART_MspInit+0xa8>)
 8001502:	63a3      	str	r3, [r4, #56]	; 0x38
 8001504:	639c      	str	r4, [r3, #56]	; 0x38
}
 8001506:	e7c0      	b.n	800148a <HAL_UART_MspInit+0x1e>
      Error_Handler();
 8001508:	f7ff fe6a 	bl	80011e0 <Error_Handler>
 800150c:	e7f8      	b.n	8001500 <HAL_UART_MspInit+0x94>
 800150e:	bf00      	nop
 8001510:	40020400 	.word	0x40020400
 8001514:	20002eac 	.word	0x20002eac
 8001518:	40026440 	.word	0x40026440

0800151c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800151c:	e7fe      	b.n	800151c <NMI_Handler>

0800151e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800151e:	e7fe      	b.n	800151e <HardFault_Handler>

08001520 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <MemManage_Handler>

08001522 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <BusFault_Handler>

08001524 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001524:	e7fe      	b.n	8001524 <UsageFault_Handler>

08001526 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001526:	4770      	bx	lr

08001528 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001528:	4770      	bx	lr

0800152a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152a:	4770      	bx	lr

0800152c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800152e:	f000 f8ff 	bl	8001730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001532:	bd08      	pop	{r3, pc}

08001534 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001534:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001536:	4802      	ldr	r0, [pc, #8]	; (8001540 <DMA1_Stream3_IRQHandler+0xc>)
 8001538:	f000 fabe 	bl	8001ab8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800153c:	bd08      	pop	{r3, pc}
 800153e:	bf00      	nop
 8001540:	20002dec 	.word	0x20002dec

08001544 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001544:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001546:	4802      	ldr	r0, [pc, #8]	; (8001550 <DMA1_Stream5_IRQHandler+0xc>)
 8001548:	f000 fab6 	bl	8001ab8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800154c:	bd08      	pop	{r3, pc}
 800154e:	bf00      	nop
 8001550:	20002e4c 	.word	0x20002e4c

08001554 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001554:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001556:	4802      	ldr	r0, [pc, #8]	; (8001560 <DMA2_Stream2_IRQHandler+0xc>)
 8001558:	f000 faae 	bl	8001ab8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800155c:	bd08      	pop	{r3, pc}
 800155e:	bf00      	nop
 8001560:	20002eac 	.word	0x20002eac

08001564 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001564:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001566:	4802      	ldr	r0, [pc, #8]	; (8001570 <OTG_FS_IRQHandler+0xc>)
 8001568:	f000 fea0 	bl	80022ac <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800156c:	bd08      	pop	{r3, pc}
 800156e:	bf00      	nop
 8001570:	2000342c 	.word	0x2000342c

08001574 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001574:	b508      	push	{r3, lr}
 8001576:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001578:	4a0c      	ldr	r2, [pc, #48]	; (80015ac <_sbrk+0x38>)
 800157a:	6812      	ldr	r2, [r2, #0]
 800157c:	b152      	cbz	r2, 8001594 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800157e:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <_sbrk+0x38>)
 8001580:	6810      	ldr	r0, [r2, #0]
 8001582:	4403      	add	r3, r0
 8001584:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <_sbrk+0x3c>)
 8001586:	490b      	ldr	r1, [pc, #44]	; (80015b4 <_sbrk+0x40>)
 8001588:	1a52      	subs	r2, r2, r1
 800158a:	4293      	cmp	r3, r2
 800158c:	d806      	bhi.n	800159c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800158e:	4a07      	ldr	r2, [pc, #28]	; (80015ac <_sbrk+0x38>)
 8001590:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001592:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8001594:	4a05      	ldr	r2, [pc, #20]	; (80015ac <_sbrk+0x38>)
 8001596:	4908      	ldr	r1, [pc, #32]	; (80015b8 <_sbrk+0x44>)
 8001598:	6011      	str	r1, [r2, #0]
 800159a:	e7f0      	b.n	800157e <_sbrk+0xa>
    errno = ENOMEM;
 800159c:	f005 f93a 	bl	8006814 <__errno>
 80015a0:	230c      	movs	r3, #12
 80015a2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015a8:	e7f3      	b.n	8001592 <_sbrk+0x1e>
 80015aa:	bf00      	nop
 80015ac:	20003034 	.word	0x20003034
 80015b0:	20020000 	.word	0x20020000
 80015b4:	00000400 	.word	0x00000400
 80015b8:	20003740 	.word	0x20003740

080015bc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015bc:	4a03      	ldr	r2, [pc, #12]	; (80015cc <SystemInit+0x10>)
 80015be:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80015c2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015ca:	4770      	bx	lr
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001608 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015d4:	480d      	ldr	r0, [pc, #52]	; (800160c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015d6:	490e      	ldr	r1, [pc, #56]	; (8001610 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015d8:	4a0e      	ldr	r2, [pc, #56]	; (8001614 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015dc:	e002      	b.n	80015e4 <LoopCopyDataInit>

080015de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015e2:	3304      	adds	r3, #4

080015e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e8:	d3f9      	bcc.n	80015de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ea:	4a0b      	ldr	r2, [pc, #44]	; (8001618 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015ec:	4c0b      	ldr	r4, [pc, #44]	; (800161c <LoopFillZerobss+0x26>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f0:	e001      	b.n	80015f6 <LoopFillZerobss>

080015f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f4:	3204      	adds	r2, #4

080015f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f8:	d3fb      	bcc.n	80015f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015fa:	f7ff ffdf 	bl	80015bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015fe:	f005 f90f 	bl	8006820 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001602:	f7ff fc5f 	bl	8000ec4 <main>
  bx  lr    
 8001606:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001608:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800160c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001610:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8001614:	08006d70 	.word	0x08006d70
  ldr r2, =_sbss
 8001618:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 800161c:	20003740 	.word	0x20003740

08001620 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001620:	e7fe      	b.n	8001620 <ADC_IRQHandler>

08001622 <Commander_Init>:
#include "stm32f4xx_hal.h"
#include "commander.h"
#include <string.h>

void Commander_Init(Commander_HandleTypeDef *hcommander, UART_HandleTypeDef *huart, DMA_HandleTypeDef *hdma_uart_rx, void (*command_callback)(Command command)) {
	hcommander->huart = huart;
 8001622:	6001      	str	r1, [r0, #0]
	hcommander->hdma_uart_rx = hdma_uart_rx;
 8001624:	6042      	str	r2, [r0, #4]
	hcommander->rear = -1;
 8001626:	22ff      	movs	r2, #255	; 0xff
 8001628:	f880 294c 	strb.w	r2, [r0, #2380]	; 0x94c
	hcommander->front = -1;
 800162c:	f880 294d 	strb.w	r2, [r0, #2381]	; 0x94d
	hcommander->commands_to_handle = 0;
 8001630:	2200      	movs	r2, #0
 8001632:	f880 294e 	strb.w	r2, [r0, #2382]	; 0x94e
	hcommander->counter = 0;
 8001636:	f8c0 2950 	str.w	r2, [r0, #2384]	; 0x950
	hcommander->command_callback = command_callback;
 800163a:	f8c0 3954 	str.w	r3, [r0, #2388]	; 0x954
}
 800163e:	4770      	bx	lr

08001640 <Commander_Start>:

void Commander_Start(Commander_HandleTypeDef *hcommander) {
 8001640:	b508      	push	{r3, lr}
	HAL_UART_Receive_DMA(hcommander->huart, hcommander->uart_rx_buffer, COMMAND_BYTESIZE * 2);
 8001642:	4601      	mov	r1, r0
 8001644:	f851 0b08 	ldr.w	r0, [r1], #8
 8001648:	f44f 7282 	mov.w	r2, #260	; 0x104
 800164c:	f003 f974 	bl	8004938 <HAL_UART_Receive_DMA>
}
 8001650:	bd08      	pop	{r3, pc}

08001652 <Commander_Enqueue>:
}

void Commander_Enqueue(Commander_HandleTypeDef *hcommander, Command *command) {


	if((hcommander->front == 0 && hcommander->rear == COMMANDS_COUNT-1) || (hcommander->front == hcommander->rear+1)) {
 8001652:	f9b0 394c 	ldrsh.w	r3, [r0, #2380]	; 0x94c
 8001656:	2b0f      	cmp	r3, #15
 8001658:	d028      	beq.n	80016ac <Commander_Enqueue+0x5a>
void Commander_Enqueue(Commander_HandleTypeDef *hcommander, Command *command) {
 800165a:	b510      	push	{r4, lr}
 800165c:	4604      	mov	r4, r0
	if((hcommander->front == 0 && hcommander->rear == COMMANDS_COUNT-1) || (hcommander->front == hcommander->rear+1)) {
 800165e:	f990 294d 	ldrsb.w	r2, [r0, #2381]	; 0x94d
 8001662:	f990 394c 	ldrsb.w	r3, [r0, #2380]	; 0x94c
 8001666:	1c58      	adds	r0, r3, #1
 8001668:	4282      	cmp	r2, r0
 800166a:	d018      	beq.n	800169e <Commander_Enqueue+0x4c>
		// overflow
	} else {
		if(hcommander->front == -1) {
 800166c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8001670:	d016      	beq.n	80016a0 <Commander_Enqueue+0x4e>
			hcommander->front = 0;
			hcommander->rear = 0;
		} else {
			if(hcommander->rear == COMMANDS_COUNT-1) hcommander->rear = 0;
 8001672:	2b0f      	cmp	r3, #15
 8001674:	bf0c      	ite	eq
 8001676:	2300      	moveq	r3, #0
			else hcommander->rear++;
 8001678:	3301      	addne	r3, #1
 800167a:	f884 394c 	strb.w	r3, [r4, #2380]	; 0x94c
		}
		memcpy(hcommander->command_buffer + hcommander->rear, command, COMMAND_BYTESIZE);
 800167e:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 8001682:	f994 394c 	ldrsb.w	r3, [r4, #2380]	; 0x94c
 8001686:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 800168a:	2282      	movs	r2, #130	; 0x82
 800168c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001690:	f005 f8fa 	bl	8006888 <memcpy>
		hcommander->commands_to_handle++;
 8001694:	f894 394e 	ldrb.w	r3, [r4, #2382]	; 0x94e
 8001698:	3301      	adds	r3, #1
 800169a:	f884 394e 	strb.w	r3, [r4, #2382]	; 0x94e
	}


}
 800169e:	bd10      	pop	{r4, pc}
			hcommander->front = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f884 394d 	strb.w	r3, [r4, #2381]	; 0x94d
			hcommander->rear = 0;
 80016a6:	f884 394c 	strb.w	r3, [r4, #2380]	; 0x94c
 80016aa:	e7e8      	b.n	800167e <Commander_Enqueue+0x2c>
 80016ac:	4770      	bx	lr
	...

080016b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b0:	b510      	push	{r4, lr}
 80016b2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b4:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <HAL_InitTick+0x40>)
 80016b6:	7818      	ldrb	r0, [r3, #0]
 80016b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016bc:	fbb3 f3f0 	udiv	r3, r3, r0
 80016c0:	4a0c      	ldr	r2, [pc, #48]	; (80016f4 <HAL_InitTick+0x44>)
 80016c2:	6810      	ldr	r0, [r2, #0]
 80016c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80016c8:	f000 f8ae 	bl	8001828 <HAL_SYSTICK_Config>
 80016cc:	b968      	cbnz	r0, 80016ea <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ce:	2c0f      	cmp	r4, #15
 80016d0:	d901      	bls.n	80016d6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80016d2:	2001      	movs	r0, #1
 80016d4:	e00a      	b.n	80016ec <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d6:	2200      	movs	r2, #0
 80016d8:	4621      	mov	r1, r4
 80016da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016de:	f000 f85f 	bl	80017a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e2:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <HAL_InitTick+0x48>)
 80016e4:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016e6:	2000      	movs	r0, #0
 80016e8:	e000      	b.n	80016ec <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80016ea:	2001      	movs	r0, #1
}
 80016ec:	bd10      	pop	{r4, pc}
 80016ee:	bf00      	nop
 80016f0:	2000003c 	.word	0x2000003c
 80016f4:	20000038 	.word	0x20000038
 80016f8:	20000040 	.word	0x20000040

080016fc <HAL_Init>:
{
 80016fc:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <HAL_Init+0x30>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001706:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800170e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001716:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001718:	2003      	movs	r0, #3
 800171a:	f000 f82f 	bl	800177c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800171e:	200f      	movs	r0, #15
 8001720:	f7ff ffc6 	bl	80016b0 <HAL_InitTick>
  HAL_MspInit();
 8001724:	f7ff fd5e 	bl	80011e4 <HAL_MspInit>
}
 8001728:	2000      	movs	r0, #0
 800172a:	bd08      	pop	{r3, pc}
 800172c:	40023c00 	.word	0x40023c00

08001730 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001730:	4a03      	ldr	r2, [pc, #12]	; (8001740 <HAL_IncTick+0x10>)
 8001732:	6811      	ldr	r1, [r2, #0]
 8001734:	4b03      	ldr	r3, [pc, #12]	; (8001744 <HAL_IncTick+0x14>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	440b      	add	r3, r1
 800173a:	6013      	str	r3, [r2, #0]
}
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20003038 	.word	0x20003038
 8001744:	2000003c 	.word	0x2000003c

08001748 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001748:	4b01      	ldr	r3, [pc, #4]	; (8001750 <HAL_GetTick+0x8>)
 800174a:	6818      	ldr	r0, [r3, #0]
}
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	20003038 	.word	0x20003038

08001754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001754:	b538      	push	{r3, r4, r5, lr}
 8001756:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001758:	f7ff fff6 	bl	8001748 <HAL_GetTick>
 800175c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800175e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8001762:	d002      	beq.n	800176a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <HAL_Delay+0x24>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800176a:	f7ff ffed 	bl	8001748 <HAL_GetTick>
 800176e:	1b40      	subs	r0, r0, r5
 8001770:	42a0      	cmp	r0, r4
 8001772:	d3fa      	bcc.n	800176a <HAL_Delay+0x16>
  {
  }
}
 8001774:	bd38      	pop	{r3, r4, r5, pc}
 8001776:	bf00      	nop
 8001778:	2000003c 	.word	0x2000003c

0800177c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800177c:	4907      	ldr	r1, [pc, #28]	; (800179c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800177e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001780:	0203      	lsls	r3, r0, #8
 8001782:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001786:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800178a:	0412      	lsls	r2, r2, #16
 800178c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800178e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001790:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001798:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800179a:	4770      	bx	lr
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017a0:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a2:	4b18      	ldr	r3, [pc, #96]	; (8001804 <HAL_NVIC_SetPriority+0x64>)
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017aa:	f1c3 0c07 	rsb	ip, r3, #7
 80017ae:	f1bc 0f04 	cmp.w	ip, #4
 80017b2:	bf28      	it	cs
 80017b4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b8:	f103 0e04 	add.w	lr, r3, #4
 80017bc:	f1be 0f06 	cmp.w	lr, #6
 80017c0:	bf8c      	ite	hi
 80017c2:	3b03      	subhi	r3, #3
 80017c4:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c6:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80017ca:	fa0e fc0c 	lsl.w	ip, lr, ip
 80017ce:	ea21 010c 	bic.w	r1, r1, ip
 80017d2:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d4:	fa0e f303 	lsl.w	r3, lr, r3
 80017d8:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017dc:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 80017de:	2800      	cmp	r0, #0
 80017e0:	db09      	blt.n	80017f6 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e2:	0109      	lsls	r1, r1, #4
 80017e4:	b2c9      	uxtb	r1, r1
 80017e6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80017ea:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80017ee:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80017f2:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f6:	f000 000f 	and.w	r0, r0, #15
 80017fa:	0109      	lsls	r1, r1, #4
 80017fc:	b2c9      	uxtb	r1, r1
 80017fe:	4b02      	ldr	r3, [pc, #8]	; (8001808 <HAL_NVIC_SetPriority+0x68>)
 8001800:	5419      	strb	r1, [r3, r0]
 8001802:	e7f6      	b.n	80017f2 <HAL_NVIC_SetPriority+0x52>
 8001804:	e000ed00 	.word	0xe000ed00
 8001808:	e000ed14 	.word	0xe000ed14

0800180c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800180c:	2800      	cmp	r0, #0
 800180e:	db08      	blt.n	8001822 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001810:	0942      	lsrs	r2, r0, #5
 8001812:	f000 001f 	and.w	r0, r0, #31
 8001816:	2301      	movs	r3, #1
 8001818:	fa03 f000 	lsl.w	r0, r3, r0
 800181c:	4b01      	ldr	r3, [pc, #4]	; (8001824 <HAL_NVIC_EnableIRQ+0x18>)
 800181e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001822:	4770      	bx	lr
 8001824:	e000e100 	.word	0xe000e100

08001828 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001828:	3801      	subs	r0, #1
 800182a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800182e:	d20b      	bcs.n	8001848 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001830:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001834:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001836:	4a05      	ldr	r2, [pc, #20]	; (800184c <HAL_SYSTICK_Config+0x24>)
 8001838:	21f0      	movs	r1, #240	; 0xf0
 800183a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800183e:	2000      	movs	r0, #0
 8001840:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001842:	2207      	movs	r2, #7
 8001844:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001846:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001848:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001850:	b410      	push	{r4}
 8001852:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001854:	6803      	ldr	r3, [r0, #0]
 8001856:	b2d8      	uxtb	r0, r3
 8001858:	3810      	subs	r0, #16
 800185a:	490b      	ldr	r1, [pc, #44]	; (8001888 <DMA_CalcBaseAndBitshift+0x38>)
 800185c:	fba1 4100 	umull	r4, r1, r1, r0
 8001860:	0909      	lsrs	r1, r1, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001862:	4c0a      	ldr	r4, [pc, #40]	; (800188c <DMA_CalcBaseAndBitshift+0x3c>)
 8001864:	5c61      	ldrb	r1, [r4, r1]
 8001866:	65d1      	str	r1, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001868:	285f      	cmp	r0, #95	; 0x5f
 800186a:	d908      	bls.n	800187e <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800186c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001870:	f023 0303 	bic.w	r3, r3, #3
 8001874:	1d18      	adds	r0, r3, #4
 8001876:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001878:	f85d 4b04 	ldr.w	r4, [sp], #4
 800187c:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800187e:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8001882:	f020 0003 	bic.w	r0, r0, #3
 8001886:	e7f6      	b.n	8001876 <DMA_CalcBaseAndBitshift+0x26>
 8001888:	aaaaaaab 	.word	0xaaaaaaab
 800188c:	08006d40 	.word	0x08006d40

08001890 <HAL_DMA_Init>:
{
 8001890:	b538      	push	{r3, r4, r5, lr}
 8001892:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001894:	f7ff ff58 	bl	8001748 <HAL_GetTick>
  if(hdma == NULL)
 8001898:	2c00      	cmp	r4, #0
 800189a:	f000 808c 	beq.w	80019b6 <HAL_DMA_Init+0x126>
 800189e:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 80018a0:	2302      	movs	r3, #2
 80018a2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80018a6:	2300      	movs	r3, #0
 80018a8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80018ac:	6822      	ldr	r2, [r4, #0]
 80018ae:	6813      	ldr	r3, [r2, #0]
 80018b0:	f023 0301 	bic.w	r3, r3, #1
 80018b4:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018b6:	6823      	ldr	r3, [r4, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	f012 0f01 	tst.w	r2, #1
 80018be:	d00a      	beq.n	80018d6 <HAL_DMA_Init+0x46>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018c0:	f7ff ff42 	bl	8001748 <HAL_GetTick>
 80018c4:	1b43      	subs	r3, r0, r5
 80018c6:	2b05      	cmp	r3, #5
 80018c8:	d9f5      	bls.n	80018b6 <HAL_DMA_Init+0x26>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018ca:	2320      	movs	r3, #32
 80018cc:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018ce:	2003      	movs	r0, #3
 80018d0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80018d4:	bd38      	pop	{r3, r4, r5, pc}
  tmp = hdma->Instance->CR;
 80018d6:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018d8:	4838      	ldr	r0, [pc, #224]	; (80019bc <HAL_DMA_Init+0x12c>)
 80018da:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018dc:	6861      	ldr	r1, [r4, #4]
 80018de:	68a2      	ldr	r2, [r4, #8]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	68e1      	ldr	r1, [r4, #12]
 80018e4:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018e6:	6921      	ldr	r1, [r4, #16]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	6961      	ldr	r1, [r4, #20]
 80018ec:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ee:	69a1      	ldr	r1, [r4, #24]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	69e1      	ldr	r1, [r4, #28]
 80018f4:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80018f6:	6a21      	ldr	r1, [r4, #32]
 80018f8:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018fa:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80018fe:	2904      	cmp	r1, #4
 8001900:	d021      	beq.n	8001946 <HAL_DMA_Init+0xb6>
  hdma->Instance->CR = tmp;  
 8001902:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001904:	6821      	ldr	r1, [r4, #0]
 8001906:	694a      	ldr	r2, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001908:	f022 0207 	bic.w	r2, r2, #7
  tmp |= hdma->Init.FIFOMode;
 800190c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800190e:	431a      	orrs	r2, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001910:	2b04      	cmp	r3, #4
 8001912:	d10a      	bne.n	800192a <HAL_DMA_Init+0x9a>
    tmp |= hdma->Init.FIFOThreshold;
 8001914:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001916:	4302      	orrs	r2, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001918:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800191a:	b133      	cbz	r3, 800192a <HAL_DMA_Init+0x9a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800191c:	69a5      	ldr	r5, [r4, #24]
 800191e:	bb3d      	cbnz	r5, 8001970 <HAL_DMA_Init+0xe0>
  {
    switch (tmp)
 8001920:	2801      	cmp	r0, #1
 8001922:	d01f      	beq.n	8001964 <HAL_DMA_Init+0xd4>
 8001924:	f030 0002 	bics.w	r0, r0, #2
 8001928:	d012      	beq.n	8001950 <HAL_DMA_Init+0xc0>
  hdma->Instance->FCR = tmp;
 800192a:	614a      	str	r2, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800192c:	4620      	mov	r0, r4
 800192e:	f7ff ff8f 	bl	8001850 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001932:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001934:	233f      	movs	r3, #63	; 0x3f
 8001936:	4093      	lsls	r3, r2
 8001938:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800193a:	2000      	movs	r0, #0
 800193c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800193e:	2301      	movs	r3, #1
 8001940:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001944:	e7c6      	b.n	80018d4 <HAL_DMA_Init+0x44>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001946:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001948:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800194a:	4301      	orrs	r1, r0
 800194c:	430a      	orrs	r2, r1
 800194e:	e7d8      	b.n	8001902 <HAL_DMA_Init+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001950:	f3c3 6300 	ubfx	r3, r3, #24, #1
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0e8      	beq.n	800192a <HAL_DMA_Init+0x9a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001958:	2340      	movs	r3, #64	; 0x40
 800195a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800195c:	2001      	movs	r0, #1
 800195e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8001962:	e7b7      	b.n	80018d4 <HAL_DMA_Init+0x44>
  HAL_StatusTypeDef status = HAL_OK;
 8001964:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001968:	bf14      	ite	ne
 800196a:	2300      	movne	r3, #0
 800196c:	2301      	moveq	r3, #1
 800196e:	e7f1      	b.n	8001954 <HAL_DMA_Init+0xc4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001970:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8001974:	d008      	beq.n	8001988 <HAL_DMA_Init+0xf8>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001976:	2802      	cmp	r0, #2
 8001978:	d9ee      	bls.n	8001958 <HAL_DMA_Init+0xc8>
 800197a:	2803      	cmp	r0, #3
 800197c:	d1d5      	bne.n	800192a <HAL_DMA_Init+0x9a>
  HAL_StatusTypeDef status = HAL_OK;
 800197e:	f3c3 6300 	ubfx	r3, r3, #24, #1
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0d1      	beq.n	800192a <HAL_DMA_Init+0x9a>
 8001986:	e7e7      	b.n	8001958 <HAL_DMA_Init+0xc8>
    switch (tmp)
 8001988:	2803      	cmp	r0, #3
 800198a:	d8ce      	bhi.n	800192a <HAL_DMA_Init+0x9a>
 800198c:	a501      	add	r5, pc, #4	; (adr r5, 8001994 <HAL_DMA_Init+0x104>)
 800198e:	f855 f020 	ldr.w	pc, [r5, r0, lsl #2]
 8001992:	bf00      	nop
 8001994:	08001959 	.word	0x08001959
 8001998:	080019a5 	.word	0x080019a5
 800199c:	08001959 	.word	0x08001959
 80019a0:	080019ab 	.word	0x080019ab
  HAL_StatusTypeDef status = HAL_OK;
 80019a4:	f3c3 6300 	ubfx	r3, r3, #24, #1
 80019a8:	e7eb      	b.n	8001982 <HAL_DMA_Init+0xf2>
 80019aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019ae:	bf14      	ite	ne
 80019b0:	2300      	movne	r3, #0
 80019b2:	2301      	moveq	r3, #1
 80019b4:	e7e5      	b.n	8001982 <HAL_DMA_Init+0xf2>
    return HAL_ERROR;
 80019b6:	2001      	movs	r0, #1
 80019b8:	e78c      	b.n	80018d4 <HAL_DMA_Init+0x44>
 80019ba:	bf00      	nop
 80019bc:	f010803f 	.word	0xf010803f

080019c0 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 80019c0:	2800      	cmp	r0, #0
 80019c2:	d02d      	beq.n	8001a20 <HAL_DMA_DeInit+0x60>
{
 80019c4:	b538      	push	{r3, r4, r5, lr}
 80019c6:	4605      	mov	r5, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80019c8:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 80019cc:	b2c0      	uxtb	r0, r0
 80019ce:	2802      	cmp	r0, #2
 80019d0:	d025      	beq.n	8001a1e <HAL_DMA_DeInit+0x5e>
  __HAL_DMA_DISABLE(hdma);
 80019d2:	682a      	ldr	r2, [r5, #0]
 80019d4:	6813      	ldr	r3, [r2, #0]
 80019d6:	f023 0301 	bic.w	r3, r3, #1
 80019da:	6013      	str	r3, [r2, #0]
  hdma->Instance->CR   = 0U;
 80019dc:	682b      	ldr	r3, [r5, #0]
 80019de:	2400      	movs	r4, #0
 80019e0:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 80019e2:	682b      	ldr	r3, [r5, #0]
 80019e4:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 80019e6:	682b      	ldr	r3, [r5, #0]
 80019e8:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 80019ea:	682b      	ldr	r3, [r5, #0]
 80019ec:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 80019ee:	682b      	ldr	r3, [r5, #0]
 80019f0:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 80019f2:	682b      	ldr	r3, [r5, #0]
 80019f4:	2221      	movs	r2, #33	; 0x21
 80019f6:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019f8:	4628      	mov	r0, r5
 80019fa:	f7ff ff29 	bl	8001850 <DMA_CalcBaseAndBitshift>
  hdma->XferCpltCallback = NULL;
 80019fe:	63ec      	str	r4, [r5, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001a00:	642c      	str	r4, [r5, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001a02:	646c      	str	r4, [r5, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001a04:	64ac      	str	r4, [r5, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001a06:	64ec      	str	r4, [r5, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8001a08:	652c      	str	r4, [r5, #80]	; 0x50
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a0a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001a0c:	233f      	movs	r3, #63	; 0x3f
 8001a0e:	4093      	lsls	r3, r2
 8001a10:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a12:	656c      	str	r4, [r5, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_RESET;
 8001a14:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8001a18:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  return HAL_OK;
 8001a1c:	4620      	mov	r0, r4
}
 8001a1e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001a20:	2001      	movs	r0, #1
}
 8001a22:	4770      	bx	lr

08001a24 <HAL_DMA_Start_IT>:
{
 8001a24:	b470      	push	{r4, r5, r6}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a26:	6d84      	ldr	r4, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8001a28:	f890 c034 	ldrb.w	ip, [r0, #52]	; 0x34
 8001a2c:	f1bc 0f01 	cmp.w	ip, #1
 8001a30:	d03f      	beq.n	8001ab2 <HAL_DMA_Start_IT+0x8e>
 8001a32:	f04f 0c01 	mov.w	ip, #1
 8001a36:	f880 c034 	strb.w	ip, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a3a:	f890 c035 	ldrb.w	ip, [r0, #53]	; 0x35
 8001a3e:	fa5f fc8c 	uxtb.w	ip, ip
 8001a42:	f1bc 0f01 	cmp.w	ip, #1
 8001a46:	d005      	beq.n	8001a54 <HAL_DMA_Start_IT+0x30>
    __HAL_UNLOCK(hdma);	  
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8001a4e:	2002      	movs	r0, #2
}
 8001a50:	bc70      	pop	{r4, r5, r6}
 8001a52:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a54:	2502      	movs	r5, #2
 8001a56:	f880 5035 	strb.w	r5, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a5a:	2500      	movs	r5, #0
 8001a5c:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a5e:	6806      	ldr	r6, [r0, #0]
 8001a60:	6835      	ldr	r5, [r6, #0]
 8001a62:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8001a66:	6035      	str	r5, [r6, #0]
  hdma->Instance->NDTR = DataLength;
 8001a68:	6805      	ldr	r5, [r0, #0]
 8001a6a:	606b      	str	r3, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a6c:	6883      	ldr	r3, [r0, #8]
 8001a6e:	2b40      	cmp	r3, #64	; 0x40
 8001a70:	d01a      	beq.n	8001aa8 <HAL_DMA_Start_IT+0x84>
    hdma->Instance->PAR = SrcAddress;
 8001a72:	6803      	ldr	r3, [r0, #0]
 8001a74:	6099      	str	r1, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a76:	6803      	ldr	r3, [r0, #0]
 8001a78:	60da      	str	r2, [r3, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a7a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001a7c:	233f      	movs	r3, #63	; 0x3f
 8001a7e:	4093      	lsls	r3, r2
 8001a80:	60a3      	str	r3, [r4, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a82:	6802      	ldr	r2, [r0, #0]
 8001a84:	6813      	ldr	r3, [r2, #0]
 8001a86:	f043 0316 	orr.w	r3, r3, #22
 8001a8a:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001a8c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001a8e:	b123      	cbz	r3, 8001a9a <HAL_DMA_Start_IT+0x76>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a90:	6802      	ldr	r2, [r0, #0]
 8001a92:	6813      	ldr	r3, [r2, #0]
 8001a94:	f043 0308 	orr.w	r3, r3, #8
 8001a98:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001a9a:	6802      	ldr	r2, [r0, #0]
 8001a9c:	6813      	ldr	r3, [r2, #0]
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	e7d3      	b.n	8001a50 <HAL_DMA_Start_IT+0x2c>
    hdma->Instance->PAR = DstAddress;
 8001aa8:	6803      	ldr	r3, [r0, #0]
 8001aaa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001aac:	6803      	ldr	r3, [r0, #0]
 8001aae:	60d9      	str	r1, [r3, #12]
 8001ab0:	e7e3      	b.n	8001a7a <HAL_DMA_Start_IT+0x56>
  __HAL_LOCK(hdma);
 8001ab2:	2002      	movs	r0, #2
 8001ab4:	e7cc      	b.n	8001a50 <HAL_DMA_Start_IT+0x2c>
	...

08001ab8 <HAL_DMA_IRQHandler>:
{
 8001ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aba:	b083      	sub	sp, #12
 8001abc:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ac2:	4b72      	ldr	r3, [pc, #456]	; (8001c8c <HAL_DMA_IRQHandler+0x1d4>)
 8001ac4:	681e      	ldr	r6, [r3, #0]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ac6:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8001ac8:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aca:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001acc:	2308      	movs	r3, #8
 8001ace:	4093      	lsls	r3, r2
 8001ad0:	422b      	tst	r3, r5
 8001ad2:	d010      	beq.n	8001af6 <HAL_DMA_IRQHandler+0x3e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ad4:	6803      	ldr	r3, [r0, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	f012 0f04 	tst.w	r2, #4
 8001adc:	d00b      	beq.n	8001af6 <HAL_DMA_IRQHandler+0x3e>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	f022 0204 	bic.w	r2, r2, #4
 8001ae4:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ae6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001ae8:	2308      	movs	r3, #8
 8001aea:	4093      	lsls	r3, r2
 8001aec:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001aee:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001af6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001af8:	2301      	movs	r3, #1
 8001afa:	4093      	lsls	r3, r2
 8001afc:	422b      	tst	r3, r5
 8001afe:	d009      	beq.n	8001b14 <HAL_DMA_IRQHandler+0x5c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b00:	6822      	ldr	r2, [r4, #0]
 8001b02:	6952      	ldr	r2, [r2, #20]
 8001b04:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001b08:	d004      	beq.n	8001b14 <HAL_DMA_IRQHandler+0x5c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b0a:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b0c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001b0e:	f043 0302 	orr.w	r3, r3, #2
 8001b12:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b14:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001b16:	2304      	movs	r3, #4
 8001b18:	4093      	lsls	r3, r2
 8001b1a:	422b      	tst	r3, r5
 8001b1c:	d009      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x7a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b1e:	6822      	ldr	r2, [r4, #0]
 8001b20:	6812      	ldr	r2, [r2, #0]
 8001b22:	f012 0f02 	tst.w	r2, #2
 8001b26:	d004      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x7a>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b28:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b2a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001b2c:	f043 0304 	orr.w	r3, r3, #4
 8001b30:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b32:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001b34:	2310      	movs	r3, #16
 8001b36:	4093      	lsls	r3, r2
 8001b38:	422b      	tst	r3, r5
 8001b3a:	d024      	beq.n	8001b86 <HAL_DMA_IRQHandler+0xce>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b3c:	6822      	ldr	r2, [r4, #0]
 8001b3e:	6812      	ldr	r2, [r2, #0]
 8001b40:	f012 0f08 	tst.w	r2, #8
 8001b44:	d01f      	beq.n	8001b86 <HAL_DMA_IRQHandler+0xce>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b46:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001b50:	d00d      	beq.n	8001b6e <HAL_DMA_IRQHandler+0xb6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001b58:	d104      	bne.n	8001b64 <HAL_DMA_IRQHandler+0xac>
          if(hdma->XferHalfCpltCallback != NULL)
 8001b5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b5c:	b19b      	cbz	r3, 8001b86 <HAL_DMA_IRQHandler+0xce>
            hdma->XferHalfCpltCallback(hdma);
 8001b5e:	4620      	mov	r0, r4
 8001b60:	4798      	blx	r3
 8001b62:	e010      	b.n	8001b86 <HAL_DMA_IRQHandler+0xce>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b64:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001b66:	b173      	cbz	r3, 8001b86 <HAL_DMA_IRQHandler+0xce>
            hdma->XferM1HalfCpltCallback(hdma);
 8001b68:	4620      	mov	r0, r4
 8001b6a:	4798      	blx	r3
 8001b6c:	e00b      	b.n	8001b86 <HAL_DMA_IRQHandler+0xce>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001b74:	d103      	bne.n	8001b7e <HAL_DMA_IRQHandler+0xc6>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	f022 0208 	bic.w	r2, r2, #8
 8001b7c:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001b7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b80:	b10b      	cbz	r3, 8001b86 <HAL_DMA_IRQHandler+0xce>
          hdma->XferHalfCpltCallback(hdma);
 8001b82:	4620      	mov	r0, r4
 8001b84:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b86:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001b88:	2320      	movs	r3, #32
 8001b8a:	4093      	lsls	r3, r2
 8001b8c:	422b      	tst	r3, r5
 8001b8e:	d055      	beq.n	8001c3c <HAL_DMA_IRQHandler+0x184>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b90:	6822      	ldr	r2, [r4, #0]
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	f012 0f10 	tst.w	r2, #16
 8001b98:	d050      	beq.n	8001c3c <HAL_DMA_IRQHandler+0x184>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b9a:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b9c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b05      	cmp	r3, #5
 8001ba4:	d00e      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x10c>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ba6:	6823      	ldr	r3, [r4, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001bae:	d033      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x160>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001bb6:	d12a      	bne.n	8001c0e <HAL_DMA_IRQHandler+0x156>
          if(hdma->XferM1CpltCallback != NULL)
 8001bb8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d03e      	beq.n	8001c3c <HAL_DMA_IRQHandler+0x184>
            hdma->XferM1CpltCallback(hdma);
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	4798      	blx	r3
 8001bc2:	e03b      	b.n	8001c3c <HAL_DMA_IRQHandler+0x184>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bc4:	6822      	ldr	r2, [r4, #0]
 8001bc6:	6813      	ldr	r3, [r2, #0]
 8001bc8:	f023 0316 	bic.w	r3, r3, #22
 8001bcc:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bce:	6822      	ldr	r2, [r4, #0]
 8001bd0:	6953      	ldr	r3, [r2, #20]
 8001bd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bd6:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bda:	b1a3      	cbz	r3, 8001c06 <HAL_DMA_IRQHandler+0x14e>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bdc:	6822      	ldr	r2, [r4, #0]
 8001bde:	6813      	ldr	r3, [r2, #0]
 8001be0:	f023 0308 	bic.w	r3, r3, #8
 8001be4:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001be6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001be8:	233f      	movs	r3, #63	; 0x3f
 8001bea:	4093      	lsls	r3, r2
 8001bec:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8001bfa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d043      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001c00:	4620      	mov	r0, r4
 8001c02:	4798      	blx	r3
 8001c04:	e040      	b.n	8001c88 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c06:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1e7      	bne.n	8001bdc <HAL_DMA_IRQHandler+0x124>
 8001c0c:	e7eb      	b.n	8001be6 <HAL_DMA_IRQHandler+0x12e>
          if(hdma->XferCpltCallback != NULL)
 8001c0e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c10:	b1a3      	cbz	r3, 8001c3c <HAL_DMA_IRQHandler+0x184>
            hdma->XferCpltCallback(hdma);
 8001c12:	4620      	mov	r0, r4
 8001c14:	4798      	blx	r3
 8001c16:	e011      	b.n	8001c3c <HAL_DMA_IRQHandler+0x184>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001c1e:	d109      	bne.n	8001c34 <HAL_DMA_IRQHandler+0x17c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	f022 0210 	bic.w	r2, r2, #16
 8001c26:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8001c34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c36:	b10b      	cbz	r3, 8001c3c <HAL_DMA_IRQHandler+0x184>
          hdma->XferCpltCallback(hdma);
 8001c38:	4620      	mov	r0, r4
 8001c3a:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001c3e:	b31b      	cbz	r3, 8001c88 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c40:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001c42:	f013 0f01 	tst.w	r3, #1
 8001c46:	d01b      	beq.n	8001c80 <HAL_DMA_IRQHandler+0x1c8>
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <HAL_DMA_IRQHandler+0x1d8>)
 8001c4a:	fba3 3606 	umull	r3, r6, r3, r6
 8001c4e:	0ab6      	lsrs	r6, r6, #10
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c50:	2305      	movs	r3, #5
 8001c52:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001c56:	6822      	ldr	r2, [r4, #0]
 8001c58:	6813      	ldr	r3, [r2, #0]
 8001c5a:	f023 0301 	bic.w	r3, r3, #1
 8001c5e:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001c60:	9b01      	ldr	r3, [sp, #4]
 8001c62:	3301      	adds	r3, #1
 8001c64:	9301      	str	r3, [sp, #4]
 8001c66:	42b3      	cmp	r3, r6
 8001c68:	d804      	bhi.n	8001c74 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c6a:	6823      	ldr	r3, [r4, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f013 0f01 	tst.w	r3, #1
 8001c72:	d1f5      	bne.n	8001c60 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8001c74:	2301      	movs	r3, #1
 8001c76:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8001c80:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001c82:	b10b      	cbz	r3, 8001c88 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001c84:	4620      	mov	r0, r4
 8001c86:	4798      	blx	r3
}
 8001c88:	b003      	add	sp, #12
 8001c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c8c:	20000038 	.word	0x20000038
 8001c90:	1b4e81b5 	.word	0x1b4e81b5

08001c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c9c:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9e:	4d7b      	ldr	r5, [pc, #492]	; (8001e8c <HAL_GPIO_Init+0x1f8>)
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ca0:	4c7b      	ldr	r4, [pc, #492]	; (8001e90 <HAL_GPIO_Init+0x1fc>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ca2:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 8001e98 <HAL_GPIO_Init+0x204>
 8001ca6:	e04d      	b.n	8001d44 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001ca8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001caa:	f04f 0903 	mov.w	r9, #3
 8001cae:	fa09 f902 	lsl.w	r9, r9, r2
 8001cb2:	ea27 0909 	bic.w	r9, r7, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cb6:	68cf      	ldr	r7, [r1, #12]
 8001cb8:	4097      	lsls	r7, r2
 8001cba:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8001cbe:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001cc0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cc2:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cc6:	684f      	ldr	r7, [r1, #4]
 8001cc8:	f3c7 1700 	ubfx	r7, r7, #4, #1
 8001ccc:	409f      	lsls	r7, r3
 8001cce:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001cd2:	6047      	str	r7, [r0, #4]
 8001cd4:	e046      	b.n	8001d64 <HAL_GPIO_Init+0xd0>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cd6:	f04f 0e00 	mov.w	lr, #0
 8001cda:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001cde:	ea4e 0e0a 	orr.w	lr, lr, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ce2:	f8c7 e008 	str.w	lr, [r7, #8]
        temp = EXTI->RTSR;
 8001ce6:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001ce8:	ea6f 0e0c 	mvn.w	lr, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cec:	684e      	ldr	r6, [r1, #4]
 8001cee:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001cf2:	bf0c      	ite	eq
 8001cf4:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001cf8:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->RTSR = temp;
 8001cfc:	60a7      	str	r7, [r4, #8]

        temp = EXTI->FTSR;
 8001cfe:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d00:	684e      	ldr	r6, [r1, #4]
 8001d02:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8001d06:	bf0c      	ite	eq
 8001d08:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001d0c:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->FTSR = temp;
 8001d10:	60e7      	str	r7, [r4, #12]

        temp = EXTI->EMR;
 8001d12:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d14:	684e      	ldr	r6, [r1, #4]
 8001d16:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001d1a:	bf0c      	ite	eq
 8001d1c:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001d20:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->EMR = temp;
 8001d24:	6067      	str	r7, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d26:	6827      	ldr	r7, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d28:	684e      	ldr	r6, [r1, #4]
 8001d2a:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001d2e:	bf0c      	ite	eq
 8001d30:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001d34:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->IMR = temp;
 8001d38:	6027      	str	r7, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	3202      	adds	r2, #2
 8001d3e:	2b10      	cmp	r3, #16
 8001d40:	f000 80a1 	beq.w	8001e86 <HAL_GPIO_Init+0x1f2>
    ioposition = 0x01U << position;
 8001d44:	f04f 0e01 	mov.w	lr, #1
 8001d48:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d4c:	680f      	ldr	r7, [r1, #0]
 8001d4e:	ea0e 0c07 	and.w	ip, lr, r7
    if(iocurrent == ioposition)
 8001d52:	ea3e 0607 	bics.w	r6, lr, r7
 8001d56:	d1f0      	bne.n	8001d3a <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d58:	684f      	ldr	r7, [r1, #4]
 8001d5a:	f007 0703 	and.w	r7, r7, #3
 8001d5e:	3f01      	subs	r7, #1
 8001d60:	2f01      	cmp	r7, #1
 8001d62:	d9a1      	bls.n	8001ca8 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d64:	684f      	ldr	r7, [r1, #4]
 8001d66:	f007 0703 	and.w	r7, r7, #3
 8001d6a:	2f03      	cmp	r7, #3
 8001d6c:	d027      	beq.n	8001dbe <HAL_GPIO_Init+0x12a>
        temp = GPIOx->PUPDR;
 8001d6e:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d70:	f04f 0e03 	mov.w	lr, #3
 8001d74:	fa0e fe02 	lsl.w	lr, lr, r2
 8001d78:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d7c:	688f      	ldr	r7, [r1, #8]
 8001d7e:	4097      	lsls	r7, r2
 8001d80:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8001d84:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d86:	684f      	ldr	r7, [r1, #4]
 8001d88:	f007 0703 	and.w	r7, r7, #3
 8001d8c:	2f02      	cmp	r7, #2
 8001d8e:	d116      	bne.n	8001dbe <HAL_GPIO_Init+0x12a>
        temp = GPIOx->AFR[position >> 3U];
 8001d90:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8001d94:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8001d98:	f8de 7020 	ldr.w	r7, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d9c:	f003 0907 	and.w	r9, r3, #7
 8001da0:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8001da4:	f04f 0a0f 	mov.w	sl, #15
 8001da8:	fa0a fa09 	lsl.w	sl, sl, r9
 8001dac:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001db0:	690f      	ldr	r7, [r1, #16]
 8001db2:	fa07 f709 	lsl.w	r7, r7, r9
 8001db6:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->AFR[position >> 3U] = temp;
 8001dba:	f8ce 7020 	str.w	r7, [lr, #32]
      temp = GPIOx->MODER;
 8001dbe:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dc0:	f04f 0e03 	mov.w	lr, #3
 8001dc4:	fa0e fe02 	lsl.w	lr, lr, r2
 8001dc8:	ea27 0e0e 	bic.w	lr, r7, lr
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dcc:	684f      	ldr	r7, [r1, #4]
 8001dce:	f007 0703 	and.w	r7, r7, #3
 8001dd2:	4097      	lsls	r7, r2
 8001dd4:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->MODER = temp;
 8001dd8:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dda:	684f      	ldr	r7, [r1, #4]
 8001ddc:	f417 3f40 	tst.w	r7, #196608	; 0x30000
 8001de0:	d0ab      	beq.n	8001d3a <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de2:	2700      	movs	r7, #0
 8001de4:	9701      	str	r7, [sp, #4]
 8001de6:	6c6f      	ldr	r7, [r5, #68]	; 0x44
 8001de8:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001dec:	646f      	str	r7, [r5, #68]	; 0x44
 8001dee:	6c6f      	ldr	r7, [r5, #68]	; 0x44
 8001df0:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001df4:	9701      	str	r7, [sp, #4]
 8001df6:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001df8:	f023 0703 	bic.w	r7, r3, #3
 8001dfc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001e00:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8001e04:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e08:	f003 0e03 	and.w	lr, r3, #3
 8001e0c:	ea4f 0b8e 	mov.w	fp, lr, lsl #2
 8001e10:	f04f 0e0f 	mov.w	lr, #15
 8001e14:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001e18:	ea2a 0a0e 	bic.w	sl, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e1c:	4e1d      	ldr	r6, [pc, #116]	; (8001e94 <HAL_GPIO_Init+0x200>)
 8001e1e:	42b0      	cmp	r0, r6
 8001e20:	f43f af59 	beq.w	8001cd6 <HAL_GPIO_Init+0x42>
 8001e24:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001e28:	42b0      	cmp	r0, r6
 8001e2a:	d01a      	beq.n	8001e62 <HAL_GPIO_Init+0x1ce>
 8001e2c:	4540      	cmp	r0, r8
 8001e2e:	d01b      	beq.n	8001e68 <HAL_GPIO_Init+0x1d4>
 8001e30:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8001e34:	42b0      	cmp	r0, r6
 8001e36:	d01a      	beq.n	8001e6e <HAL_GPIO_Init+0x1da>
 8001e38:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001e3c:	42b0      	cmp	r0, r6
 8001e3e:	d019      	beq.n	8001e74 <HAL_GPIO_Init+0x1e0>
 8001e40:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001e44:	42b0      	cmp	r0, r6
 8001e46:	d018      	beq.n	8001e7a <HAL_GPIO_Init+0x1e6>
 8001e48:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001e4c:	42b0      	cmp	r0, r6
 8001e4e:	d017      	beq.n	8001e80 <HAL_GPIO_Init+0x1ec>
 8001e50:	f8df e048 	ldr.w	lr, [pc, #72]	; 8001e9c <HAL_GPIO_Init+0x208>
 8001e54:	4570      	cmp	r0, lr
 8001e56:	bf0c      	ite	eq
 8001e58:	f04f 0e07 	moveq.w	lr, #7
 8001e5c:	f04f 0e08 	movne.w	lr, #8
 8001e60:	e73b      	b.n	8001cda <HAL_GPIO_Init+0x46>
 8001e62:	f04f 0e01 	mov.w	lr, #1
 8001e66:	e738      	b.n	8001cda <HAL_GPIO_Init+0x46>
 8001e68:	f04f 0e02 	mov.w	lr, #2
 8001e6c:	e735      	b.n	8001cda <HAL_GPIO_Init+0x46>
 8001e6e:	f04f 0e03 	mov.w	lr, #3
 8001e72:	e732      	b.n	8001cda <HAL_GPIO_Init+0x46>
 8001e74:	f04f 0e04 	mov.w	lr, #4
 8001e78:	e72f      	b.n	8001cda <HAL_GPIO_Init+0x46>
 8001e7a:	f04f 0e05 	mov.w	lr, #5
 8001e7e:	e72c      	b.n	8001cda <HAL_GPIO_Init+0x46>
 8001e80:	f04f 0e06 	mov.w	lr, #6
 8001e84:	e729      	b.n	8001cda <HAL_GPIO_Init+0x46>
      }
    }
  }
}
 8001e86:	b003      	add	sp, #12
 8001e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40013c00 	.word	0x40013c00
 8001e94:	40020000 	.word	0x40020000
 8001e98:	40020800 	.word	0x40020800
 8001e9c:	40021c00 	.word	0x40021c00

08001ea0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ea4:	b083      	sub	sp, #12

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ea6:	2300      	movs	r3, #0
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001ea8:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8001fe8 <HAL_GPIO_DeInit+0x148>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001eac:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8001fec <HAL_GPIO_DeInit+0x14c>
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001eb0:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8001ff0 <HAL_GPIO_DeInit+0x150>
 8001eb4:	f8df b13c 	ldr.w	fp, [pc, #316]	; 8001ff4 <HAL_GPIO_DeInit+0x154>
 8001eb8:	e02b      	b.n	8001f12 <HAL_GPIO_DeInit+0x72>
 8001eba:	f04f 0e00 	mov.w	lr, #0
 8001ebe:	fa0e f505 	lsl.w	r5, lr, r5
 8001ec2:	4565      	cmp	r5, ip
 8001ec4:	d06c      	beq.n	8001fa0 <HAL_GPIO_DeInit+0x100>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ec6:	6805      	ldr	r5, [r0, #0]
 8001ec8:	005c      	lsls	r4, r3, #1
 8001eca:	2603      	movs	r6, #3
 8001ecc:	fa06 f404 	lsl.w	r4, r6, r4
 8001ed0:	ea25 0504 	bic.w	r5, r5, r4
 8001ed4:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ed6:	fa23 f506 	lsr.w	r5, r3, r6
 8001eda:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8001ede:	6a2e      	ldr	r6, [r5, #32]
 8001ee0:	f003 0707 	and.w	r7, r3, #7
 8001ee4:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 8001ee8:	270f      	movs	r7, #15
 8001eea:	fa07 f70c 	lsl.w	r7, r7, ip
 8001eee:	ea26 0607 	bic.w	r6, r6, r7
 8001ef2:	622e      	str	r6, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ef4:	68c5      	ldr	r5, [r0, #12]
 8001ef6:	ea25 0504 	bic.w	r5, r5, r4
 8001efa:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001efc:	6845      	ldr	r5, [r0, #4]
 8001efe:	ea25 0202 	bic.w	r2, r5, r2
 8001f02:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f04:	6882      	ldr	r2, [r0, #8]
 8001f06:	ea22 0404 	bic.w	r4, r2, r4
 8001f0a:	6084      	str	r4, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	2b10      	cmp	r3, #16
 8001f10:	d064      	beq.n	8001fdc <HAL_GPIO_DeInit+0x13c>
    ioposition = 0x01U << position;
 8001f12:	2201      	movs	r2, #1
 8001f14:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8001f16:	ea02 0701 	and.w	r7, r2, r1
    if(iocurrent == ioposition)
 8001f1a:	ea32 0401 	bics.w	r4, r2, r1
 8001f1e:	d1f5      	bne.n	8001f0c <HAL_GPIO_DeInit+0x6c>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001f20:	f023 0403 	bic.w	r4, r3, #3
 8001f24:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001f28:	f504 349c 	add.w	r4, r4, #79872	; 0x13800
 8001f2c:	f8d4 c008 	ldr.w	ip, [r4, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001f30:	f003 0503 	and.w	r5, r3, #3
 8001f34:	00ad      	lsls	r5, r5, #2
 8001f36:	260f      	movs	r6, #15
 8001f38:	40ae      	lsls	r6, r5
 8001f3a:	9601      	str	r6, [sp, #4]
 8001f3c:	ea06 0c0c 	and.w	ip, r6, ip
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001f40:	4548      	cmp	r0, r9
 8001f42:	d0ba      	beq.n	8001eba <HAL_GPIO_DeInit+0x1a>
 8001f44:	4550      	cmp	r0, sl
 8001f46:	d019      	beq.n	8001f7c <HAL_GPIO_DeInit+0xdc>
 8001f48:	4558      	cmp	r0, fp
 8001f4a:	d01a      	beq.n	8001f82 <HAL_GPIO_DeInit+0xe2>
 8001f4c:	4e25      	ldr	r6, [pc, #148]	; (8001fe4 <HAL_GPIO_DeInit+0x144>)
 8001f4e:	42b0      	cmp	r0, r6
 8001f50:	d01a      	beq.n	8001f88 <HAL_GPIO_DeInit+0xe8>
 8001f52:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001f56:	42b0      	cmp	r0, r6
 8001f58:	d019      	beq.n	8001f8e <HAL_GPIO_DeInit+0xee>
 8001f5a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001f5e:	42b0      	cmp	r0, r6
 8001f60:	d018      	beq.n	8001f94 <HAL_GPIO_DeInit+0xf4>
 8001f62:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001f66:	42b0      	cmp	r0, r6
 8001f68:	d017      	beq.n	8001f9a <HAL_GPIO_DeInit+0xfa>
 8001f6a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001f6e:	42b0      	cmp	r0, r6
 8001f70:	bf0c      	ite	eq
 8001f72:	f04f 0e07 	moveq.w	lr, #7
 8001f76:	f04f 0e08 	movne.w	lr, #8
 8001f7a:	e7a0      	b.n	8001ebe <HAL_GPIO_DeInit+0x1e>
 8001f7c:	f04f 0e01 	mov.w	lr, #1
 8001f80:	e79d      	b.n	8001ebe <HAL_GPIO_DeInit+0x1e>
 8001f82:	f04f 0e02 	mov.w	lr, #2
 8001f86:	e79a      	b.n	8001ebe <HAL_GPIO_DeInit+0x1e>
 8001f88:	f04f 0e03 	mov.w	lr, #3
 8001f8c:	e797      	b.n	8001ebe <HAL_GPIO_DeInit+0x1e>
 8001f8e:	f04f 0e04 	mov.w	lr, #4
 8001f92:	e794      	b.n	8001ebe <HAL_GPIO_DeInit+0x1e>
 8001f94:	f04f 0e05 	mov.w	lr, #5
 8001f98:	e791      	b.n	8001ebe <HAL_GPIO_DeInit+0x1e>
 8001f9a:	f04f 0e06 	mov.w	lr, #6
 8001f9e:	e78e      	b.n	8001ebe <HAL_GPIO_DeInit+0x1e>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001fa0:	f8d8 5000 	ldr.w	r5, [r8]
 8001fa4:	ea25 0507 	bic.w	r5, r5, r7
 8001fa8:	f8c8 5000 	str.w	r5, [r8]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001fac:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8001fb0:	ea25 0507 	bic.w	r5, r5, r7
 8001fb4:	f8c8 5004 	str.w	r5, [r8, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001fb8:	f8d8 500c 	ldr.w	r5, [r8, #12]
 8001fbc:	ea25 0507 	bic.w	r5, r5, r7
 8001fc0:	f8c8 500c 	str.w	r5, [r8, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001fc4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8001fc8:	ea25 0707 	bic.w	r7, r5, r7
 8001fcc:	f8c8 7008 	str.w	r7, [r8, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001fd0:	68a5      	ldr	r5, [r4, #8]
 8001fd2:	9e01      	ldr	r6, [sp, #4]
 8001fd4:	ea25 0606 	bic.w	r6, r5, r6
 8001fd8:	60a6      	str	r6, [r4, #8]
 8001fda:	e774      	b.n	8001ec6 <HAL_GPIO_DeInit+0x26>
    }
  }
}
 8001fdc:	b003      	add	sp, #12
 8001fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40020c00 	.word	0x40020c00
 8001fe8:	40020000 	.word	0x40020000
 8001fec:	40013c00 	.word	0x40013c00
 8001ff0:	40020400 	.word	0x40020400
 8001ff4:	40020800 	.word	0x40020800

08001ff8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ff8:	b10a      	cbz	r2, 8001ffe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ffa:	6181      	str	r1, [r0, #24]
 8001ffc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ffe:	0409      	lsls	r1, r1, #16
 8002000:	6181      	str	r1, [r0, #24]
  }
}
 8002002:	4770      	bx	lr

08002004 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002006:	b085      	sub	sp, #20
 8002008:	4604      	mov	r4, r0
 800200a:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 800200e:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8002012:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002016:	f894 52f8 	ldrb.w	r5, [r4, #760]	; 0x2f8
 800201a:	2d01      	cmp	r5, #1
 800201c:	d025      	beq.n	800206a <HAL_HCD_HC_Init+0x66>
 800201e:	2501      	movs	r5, #1
 8002020:	f884 52f8 	strb.w	r5, [r4, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002024:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 8002028:	fb0c 4c01 	mla	ip, ip, r1, r4
 800202c:	2500      	movs	r5, #0
 800202e:	f88c 503d 	strb.w	r5, [ip, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002032:	f88c 3038 	strb.w	r3, [ip, #56]	; 0x38
  hhcd->hc[ch_num].max_packet = mps;
 8002036:	f8ac 7040 	strh.w	r7, [ip, #64]	; 0x40
  hhcd->hc[ch_num].ch_num = ch_num;
 800203a:	f88c 1039 	strb.w	r1, [ip, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 800203e:	f88c 603f 	strb.w	r6, [ip, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002042:	f002 0e7f 	and.w	lr, r2, #127	; 0x7f
 8002046:	f88c e03a 	strb.w	lr, [ip, #58]	; 0x3a

  if ((epnum & 0x80U) == 0x80U)
 800204a:	ea4f 1ed2 	mov.w	lr, r2, lsr #7
 800204e:	f88c e03b 	strb.w	lr, [ip, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 8002052:	f88c 003c 	strb.w	r0, [ip, #60]	; 0x3c

  status =  USB_HC_Init(hhcd->Instance,
 8002056:	9702      	str	r7, [sp, #8]
 8002058:	9601      	str	r6, [sp, #4]
 800205a:	9000      	str	r0, [sp, #0]
 800205c:	6820      	ldr	r0, [r4, #0]
 800205e:	f002 fe8b 	bl	8004d78 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002062:	f884 52f8 	strb.w	r5, [r4, #760]	; 0x2f8

  return status;
}
 8002066:	b005      	add	sp, #20
 8002068:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hhcd);
 800206a:	2002      	movs	r0, #2
 800206c:	e7fb      	b.n	8002066 <HAL_HCD_HC_Init+0x62>

0800206e <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 800206e:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8002072:	2b01      	cmp	r3, #1
 8002074:	d00b      	beq.n	800208e <HAL_HCD_HC_Halt+0x20>
{
 8002076:	b510      	push	{r4, lr}
 8002078:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 800207a:	2301      	movs	r3, #1
 800207c:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002080:	6800      	ldr	r0, [r0, #0]
 8002082:	f002 ff2f 	bl	8004ee4 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002086:	2000      	movs	r0, #0
 8002088:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8

  return status;
}
 800208c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 800208e:	2002      	movs	r0, #2
}
 8002090:	4770      	bx	lr

08002092 <HAL_HCD_Init>:
  if (hhcd == NULL)
 8002092:	2800      	cmp	r0, #0
 8002094:	d04d      	beq.n	8002132 <HAL_HCD_Init+0xa0>
{
 8002096:	b570      	push	{r4, r5, r6, lr}
 8002098:	b08a      	sub	sp, #40	; 0x28
 800209a:	4604      	mov	r4, r0
  USBx = hhcd->Instance;
 800209c:	6805      	ldr	r5, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 800209e:	f890 32f9 	ldrb.w	r3, [r0, #761]	; 0x2f9
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d040      	beq.n	8002128 <HAL_HCD_Init+0x96>
  hhcd->State = HAL_HCD_STATE_BUSY;
 80020a6:	2303      	movs	r3, #3
 80020a8:	f884 32f9 	strb.w	r3, [r4, #761]	; 0x2f9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020ac:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80020ae:	f413 7f80 	tst.w	r3, #256	; 0x100
    hhcd->Init.dma_enable = 0U;
 80020b2:	bf04      	itt	eq
 80020b4:	2300      	moveq	r3, #0
 80020b6:	6123      	streq	r3, [r4, #16]
  __HAL_HCD_DISABLE(hhcd);
 80020b8:	6820      	ldr	r0, [r4, #0]
 80020ba:	f002 fccc 	bl	8004a56 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80020be:	46a4      	mov	ip, r4
 80020c0:	f85c 6b10 	ldr.w	r6, [ip], #16
 80020c4:	46ee      	mov	lr, sp
 80020c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80020ca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80020ce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80020d2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80020d6:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80020da:	e88e 0003 	stmia.w	lr, {r0, r1}
 80020de:	1d25      	adds	r5, r4, #4
 80020e0:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80020e4:	4630      	mov	r0, r6
 80020e6:	f002 fc6b 	bl	80049c0 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80020ea:	2101      	movs	r1, #1
 80020ec:	6820      	ldr	r0, [r4, #0]
 80020ee:	f002 fcb8 	bl	8004a62 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80020f2:	46a4      	mov	ip, r4
 80020f4:	f85c 6b10 	ldr.w	r6, [ip], #16
 80020f8:	46ee      	mov	lr, sp
 80020fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80020fe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002102:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002106:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800210a:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800210e:	e88e 0003 	stmia.w	lr, {r0, r1}
 8002112:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8002116:	4630      	mov	r0, r6
 8002118:	f002 fd66 	bl	8004be8 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 800211c:	2301      	movs	r3, #1
 800211e:	f884 32f9 	strb.w	r3, [r4, #761]	; 0x2f9
  return HAL_OK;
 8002122:	2000      	movs	r0, #0
}
 8002124:	b00a      	add	sp, #40	; 0x28
 8002126:	bd70      	pop	{r4, r5, r6, pc}
    hhcd->Lock = HAL_UNLOCKED;
 8002128:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
    HAL_HCD_MspInit(hhcd);
 800212c:	f004 fa46 	bl	80065bc <HAL_HCD_MspInit>
 8002130:	e7b9      	b.n	80020a6 <HAL_HCD_Init+0x14>
    return HAL_ERROR;
 8002132:	2001      	movs	r0, #1
}
 8002134:	4770      	bx	lr

08002136 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002136:	b538      	push	{r3, r4, r5, lr}
 8002138:	f89d 4010 	ldrb.w	r4, [sp, #16]
 800213c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002140:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 8002144:	fb0c 0c01 	mla	ip, ip, r1, r0
 8002148:	f88c 203b 	strb.w	r2, [ip, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 800214c:	f88c 303f 	strb.w	r3, [ip, #63]	; 0x3f

  if (token == 0U)
 8002150:	bb3c      	cbnz	r4, 80021a2 <HAL_HCD_HC_SubmitRequest+0x6c>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002152:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 8002156:	fb0c 0c01 	mla	ip, ip, r1, r0
 800215a:	2403      	movs	r4, #3
 800215c:	f88c 4042 	strb.w	r4, [ip, #66]	; 0x42
    hhcd->hc[ch_num].do_ping = do_ping;
 8002160:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8002164:	f88c 403d 	strb.w	r4, [ip, #61]	; 0x3d
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002168:	2b02      	cmp	r3, #2
 800216a:	d048      	beq.n	80021fe <HAL_HCD_HC_SubmitRequest+0xc8>
 800216c:	2b03      	cmp	r3, #3
 800216e:	d06e      	beq.n	800224e <HAL_HCD_HC_SubmitRequest+0x118>
 8002170:	2b01      	cmp	r3, #1
 8002172:	f000 8094 	beq.w	800229e <HAL_HCD_HC_SubmitRequest+0x168>

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002176:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 800217a:	fb0c 0301 	mla	r3, ip, r1, r0
 800217e:	9a05      	ldr	r2, [sp, #20]
 8002180:	645a      	str	r2, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 8002182:	64dd      	str	r5, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hhcd->hc[ch_num].xfer_count = 0U;
 800218a:	651a      	str	r2, [r3, #80]	; 0x50
  hhcd->hc[ch_num].ch_num = ch_num;
 800218c:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;
 8002190:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002194:	4619      	mov	r1, r3
 8002196:	7c02      	ldrb	r2, [r0, #16]
 8002198:	3138      	adds	r1, #56	; 0x38
 800219a:	6800      	ldr	r0, [r0, #0]
 800219c:	f002 ff22 	bl	8004fe4 <USB_HC_StartXfer>
}
 80021a0:	bd38      	pop	{r3, r4, r5, pc}
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021a2:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 80021a6:	fb0c 0c01 	mla	ip, ip, r1, r0
 80021aa:	f04f 0e02 	mov.w	lr, #2
 80021ae:	f88c e042 	strb.w	lr, [ip, #66]	; 0x42
  switch (ep_type)
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d8df      	bhi.n	8002176 <HAL_HCD_HC_SubmitRequest+0x40>
 80021b6:	e8df f003 	tbb	[pc, r3]
 80021ba:	7202      	.short	0x7202
 80021bc:	4a22      	.short	0x4a22
      if ((token == 1U) && (direction == 0U)) /*send data */
 80021be:	2c01      	cmp	r4, #1
 80021c0:	d1d9      	bne.n	8002176 <HAL_HCD_HC_SubmitRequest+0x40>
 80021c2:	2a00      	cmp	r2, #0
 80021c4:	d1d7      	bne.n	8002176 <HAL_HCD_HC_SubmitRequest+0x40>
        if (length == 0U)
 80021c6:	b965      	cbnz	r5, 80021e2 <HAL_HCD_HC_SubmitRequest+0xac>
          hhcd->hc[ch_num].toggle_out = 1U;
 80021c8:	232c      	movs	r3, #44	; 0x2c
 80021ca:	fb03 0301 	mla	r3, r3, r1, r0
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021d4:	232c      	movs	r3, #44	; 0x2c
 80021d6:	fb03 0301 	mla	r3, r3, r1, r0
 80021da:	2202      	movs	r2, #2
 80021dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021e0:	e7c9      	b.n	8002176 <HAL_HCD_HC_SubmitRequest+0x40>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021e2:	232c      	movs	r3, #44	; 0x2c
 80021e4:	fb03 0301 	mla	r3, r3, r1, r0
 80021e8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f1      	bne.n	80021d4 <HAL_HCD_HC_SubmitRequest+0x9e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021f0:	232c      	movs	r3, #44	; 0x2c
 80021f2:	fb03 0301 	mla	r3, r3, r1, r0
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021fc:	e7bb      	b.n	8002176 <HAL_HCD_HC_SubmitRequest+0x40>
      if (direction == 0U)
 80021fe:	b992      	cbnz	r2, 8002226 <HAL_HCD_HC_SubmitRequest+0xf0>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002200:	232c      	movs	r3, #44	; 0x2c
 8002202:	fb03 0301 	mla	r3, r3, r1, r0
 8002206:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800220a:	b92b      	cbnz	r3, 8002218 <HAL_HCD_HC_SubmitRequest+0xe2>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800220c:	232c      	movs	r3, #44	; 0x2c
 800220e:	fb03 0301 	mla	r3, r3, r1, r0
 8002212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002216:	e7ae      	b.n	8002176 <HAL_HCD_HC_SubmitRequest+0x40>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002218:	232c      	movs	r3, #44	; 0x2c
 800221a:	fb03 0301 	mla	r3, r3, r1, r0
 800221e:	2202      	movs	r2, #2
 8002220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002224:	e7a7      	b.n	8002176 <HAL_HCD_HC_SubmitRequest+0x40>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002226:	232c      	movs	r3, #44	; 0x2c
 8002228:	fb03 0301 	mla	r3, r3, r1, r0
 800222c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002230:	b933      	cbnz	r3, 8002240 <HAL_HCD_HC_SubmitRequest+0x10a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002232:	232c      	movs	r3, #44	; 0x2c
 8002234:	fb03 0301 	mla	r3, r3, r1, r0
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800223e:	e79a      	b.n	8002176 <HAL_HCD_HC_SubmitRequest+0x40>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002240:	232c      	movs	r3, #44	; 0x2c
 8002242:	fb03 0301 	mla	r3, r3, r1, r0
 8002246:	2202      	movs	r2, #2
 8002248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800224c:	e793      	b.n	8002176 <HAL_HCD_HC_SubmitRequest+0x40>
      if (direction == 0U)
 800224e:	b992      	cbnz	r2, 8002276 <HAL_HCD_HC_SubmitRequest+0x140>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002250:	232c      	movs	r3, #44	; 0x2c
 8002252:	fb03 0301 	mla	r3, r3, r1, r0
 8002256:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800225a:	b92b      	cbnz	r3, 8002268 <HAL_HCD_HC_SubmitRequest+0x132>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800225c:	232c      	movs	r3, #44	; 0x2c
 800225e:	fb03 0301 	mla	r3, r3, r1, r0
 8002262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002266:	e786      	b.n	8002176 <HAL_HCD_HC_SubmitRequest+0x40>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002268:	232c      	movs	r3, #44	; 0x2c
 800226a:	fb03 0301 	mla	r3, r3, r1, r0
 800226e:	2202      	movs	r2, #2
 8002270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002274:	e77f      	b.n	8002176 <HAL_HCD_HC_SubmitRequest+0x40>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002276:	232c      	movs	r3, #44	; 0x2c
 8002278:	fb03 0301 	mla	r3, r3, r1, r0
 800227c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002280:	b933      	cbnz	r3, 8002290 <HAL_HCD_HC_SubmitRequest+0x15a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002282:	232c      	movs	r3, #44	; 0x2c
 8002284:	fb03 0301 	mla	r3, r3, r1, r0
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800228e:	e772      	b.n	8002176 <HAL_HCD_HC_SubmitRequest+0x40>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002290:	232c      	movs	r3, #44	; 0x2c
 8002292:	fb03 0301 	mla	r3, r3, r1, r0
 8002296:	2202      	movs	r2, #2
 8002298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800229c:	e76b      	b.n	8002176 <HAL_HCD_HC_SubmitRequest+0x40>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800229e:	232c      	movs	r3, #44	; 0x2c
 80022a0:	fb03 0301 	mla	r3, r3, r1, r0
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      break;
 80022aa:	e764      	b.n	8002176 <HAL_HCD_HC_SubmitRequest+0x40>

080022ac <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80022ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022b0:	b085      	sub	sp, #20
 80022b2:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022b4:	6805      	ldr	r5, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80022b6:	4628      	mov	r0, r5
 80022b8:	f002 fc92 	bl	8004be0 <USB_GetMode>
 80022bc:	2801      	cmp	r0, #1
 80022be:	d002      	beq.n	80022c6 <HAL_HCD_IRQHandler+0x1a>
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
    }
  }
}
 80022c0:	b005      	add	sp, #20
 80022c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80022c6:	6820      	ldr	r0, [r4, #0]
 80022c8:	f002 fc86 	bl	8004bd8 <USB_ReadInterrupts>
 80022cc:	2800      	cmp	r0, #0
 80022ce:	d0f7      	beq.n	80022c0 <HAL_HCD_IRQHandler+0x14>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022d0:	6820      	ldr	r0, [r4, #0]
 80022d2:	f002 fc81 	bl	8004bd8 <USB_ReadInterrupts>
 80022d6:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 80022da:	d003      	beq.n	80022e4 <HAL_HCD_IRQHandler+0x38>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80022dc:	6823      	ldr	r3, [r4, #0]
 80022de:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80022e2:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80022e4:	6820      	ldr	r0, [r4, #0]
 80022e6:	f002 fc77 	bl	8004bd8 <USB_ReadInterrupts>
 80022ea:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 80022ee:	d003      	beq.n	80022f8 <HAL_HCD_IRQHandler+0x4c>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80022f0:	6823      	ldr	r3, [r4, #0]
 80022f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80022f6:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80022f8:	6820      	ldr	r0, [r4, #0]
 80022fa:	f002 fc6d 	bl	8004bd8 <USB_ReadInterrupts>
 80022fe:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8002302:	d003      	beq.n	800230c <HAL_HCD_IRQHandler+0x60>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002304:	6823      	ldr	r3, [r4, #0]
 8002306:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800230a:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800230c:	6820      	ldr	r0, [r4, #0]
 800230e:	f002 fc63 	bl	8004bd8 <USB_ReadInterrupts>
 8002312:	f010 0f02 	tst.w	r0, #2
 8002316:	d002      	beq.n	800231e <HAL_HCD_IRQHandler+0x72>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002318:	6823      	ldr	r3, [r4, #0]
 800231a:	2202      	movs	r2, #2
 800231c:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800231e:	6820      	ldr	r0, [r4, #0]
 8002320:	f002 fc5a 	bl	8004bd8 <USB_ReadInterrupts>
 8002324:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 8002328:	d008      	beq.n	800233c <HAL_HCD_IRQHandler+0x90>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800232a:	6823      	ldr	r3, [r4, #0]
 800232c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002330:	615a      	str	r2, [r3, #20]
      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002332:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8002336:	f013 0f01 	tst.w	r3, #1
 800233a:	d025      	beq.n	8002388 <HAL_HCD_IRQHandler+0xdc>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800233c:	6820      	ldr	r0, [r4, #0]
 800233e:	f002 fc4b 	bl	8004bd8 <USB_ReadInterrupts>
 8002342:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8002346:	d12e      	bne.n	80023a6 <HAL_HCD_IRQHandler+0xfa>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002348:	6820      	ldr	r0, [r4, #0]
 800234a:	f002 fc45 	bl	8004bd8 <USB_ReadInterrupts>
 800234e:	f010 0f08 	tst.w	r0, #8
 8002352:	d179      	bne.n	8002448 <HAL_HCD_IRQHandler+0x19c>
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002354:	6820      	ldr	r0, [r4, #0]
 8002356:	f002 fc3f 	bl	8004bd8 <USB_ReadInterrupts>
 800235a:	f010 0f10 	tst.w	r0, #16
 800235e:	d17a      	bne.n	8002456 <HAL_HCD_IRQHandler+0x1aa>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002360:	6820      	ldr	r0, [r4, #0]
 8002362:	f002 fc39 	bl	8004bd8 <USB_ReadInterrupts>
 8002366:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 800236a:	d0a9      	beq.n	80022c0 <HAL_HCD_IRQHandler+0x14>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800236c:	6820      	ldr	r0, [r4, #0]
 800236e:	f002 fdb4 	bl	8004eda <USB_HC_ReadInterrupt>
 8002372:	4681      	mov	r9, r0
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002374:	68a3      	ldr	r3, [r4, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 8372 	beq.w	8002a60 <HAL_HCD_IRQHandler+0x7b4>
 800237c:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
 8002380:	2600      	movs	r6, #0
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
  {
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002382:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 8002386:	e149      	b.n	800261c <HAL_HCD_IRQHandler+0x370>
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002388:	2110      	movs	r1, #16
 800238a:	4628      	mov	r0, r5
 800238c:	f002 fb9a 	bl	8004ac4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002390:	4628      	mov	r0, r5
 8002392:	f002 fbbf 	bl	8004b14 <USB_FlushRxFifo>
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002396:	2101      	movs	r1, #1
 8002398:	6820      	ldr	r0, [r4, #0]
 800239a:	f002 fc9b 	bl	8004cd4 <USB_InitFSLSPClkSel>
        HAL_HCD_Disconnect_Callback(hhcd);
 800239e:	4620      	mov	r0, r4
 80023a0:	f004 f964 	bl	800666c <HAL_HCD_Disconnect_Callback>
 80023a4:	e7ca      	b.n	800233c <HAL_HCD_IRQHandler+0x90>
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023a6:	6826      	ldr	r6, [r4, #0]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80023a8:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 80023ac:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 80023ae:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 80023b2:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80023b4:	9b03      	ldr	r3, [sp, #12]
 80023b6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80023ba:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80023bc:	9b02      	ldr	r3, [sp, #8]
 80023be:	f013 0f02 	tst.w	r3, #2
 80023c2:	d007      	beq.n	80023d4 <HAL_HCD_IRQHandler+0x128>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80023c4:	9b02      	ldr	r3, [sp, #8]
 80023c6:	f013 0f01 	tst.w	r3, #1
 80023ca:	d124      	bne.n	8002416 <HAL_HCD_IRQHandler+0x16a>
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80023cc:	9b03      	ldr	r3, [sp, #12]
 80023ce:	f043 0302 	orr.w	r3, r3, #2
 80023d2:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80023d4:	9b02      	ldr	r3, [sp, #8]
 80023d6:	f013 0f08 	tst.w	r3, #8
 80023da:	d010      	beq.n	80023fe <HAL_HCD_IRQHandler+0x152>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80023dc:	9b03      	ldr	r3, [sp, #12]
 80023de:	f043 0308 	orr.w	r3, r3, #8
 80023e2:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80023e4:	9b02      	ldr	r3, [sp, #8]
 80023e6:	f013 0f04 	tst.w	r3, #4
 80023ea:	d029      	beq.n	8002440 <HAL_HCD_IRQHandler+0x194>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80023ec:	69a3      	ldr	r3, [r4, #24]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d015      	beq.n	800241e <HAL_HCD_IRQHandler+0x172>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80023f2:	68e3      	ldr	r3, [r4, #12]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d01e      	beq.n	8002436 <HAL_HCD_IRQHandler+0x18a>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80023f8:	4620      	mov	r0, r4
 80023fa:	f004 f93e 	bl	800667a <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80023fe:	9b02      	ldr	r3, [sp, #8]
 8002400:	f013 0f20 	tst.w	r3, #32
 8002404:	d003      	beq.n	800240e <HAL_HCD_IRQHandler+0x162>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002406:	9b03      	ldr	r3, [sp, #12]
 8002408:	f043 0320 	orr.w	r3, r3, #32
 800240c:	9303      	str	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800240e:	9b03      	ldr	r3, [sp, #12]
 8002410:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
}
 8002414:	e798      	b.n	8002348 <HAL_HCD_IRQHandler+0x9c>
      HAL_HCD_Connect_Callback(hhcd);
 8002416:	4620      	mov	r0, r4
 8002418:	f004 f922 	bl	8006660 <HAL_HCD_Connect_Callback>
 800241c:	e7d6      	b.n	80023cc <HAL_HCD_IRQHandler+0x120>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800241e:	9b02      	ldr	r3, [sp, #8]
 8002420:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002424:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002428:	bf0c      	ite	eq
 800242a:	2102      	moveq	r1, #2
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800242c:	2101      	movne	r1, #1
 800242e:	6820      	ldr	r0, [r4, #0]
 8002430:	f002 fc50 	bl	8004cd4 <USB_InitFSLSPClkSel>
 8002434:	e7e0      	b.n	80023f8 <HAL_HCD_IRQHandler+0x14c>
          USBx_HOST->HFIR = 60000U;
 8002436:	f64e 2260 	movw	r2, #60000	; 0xea60
 800243a:	f8c6 2404 	str.w	r2, [r6, #1028]	; 0x404
 800243e:	e7db      	b.n	80023f8 <HAL_HCD_IRQHandler+0x14c>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002440:	4620      	mov	r0, r4
 8002442:	f004 f920 	bl	8006686 <HAL_HCD_PortDisabled_Callback>
 8002446:	e7da      	b.n	80023fe <HAL_HCD_IRQHandler+0x152>
      HAL_HCD_SOF_Callback(hhcd);
 8002448:	4620      	mov	r0, r4
 800244a:	f004 f903 	bl	8006654 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800244e:	6823      	ldr	r3, [r4, #0]
 8002450:	2208      	movs	r2, #8
 8002452:	615a      	str	r2, [r3, #20]
 8002454:	e77e      	b.n	8002354 <HAL_HCD_IRQHandler+0xa8>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002456:	6822      	ldr	r2, [r4, #0]
 8002458:	6993      	ldr	r3, [r2, #24]
 800245a:	f023 0310 	bic.w	r3, r3, #16
 800245e:	6193      	str	r3, [r2, #24]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002460:	6827      	ldr	r7, [r4, #0]
  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002462:	6a3e      	ldr	r6, [r7, #32]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002464:	f3c6 4243 	ubfx	r2, r6, #17, #4
  switch (pktsts)
 8002468:	2a02      	cmp	r2, #2
 800246a:	d005      	beq.n	8002478 <HAL_HCD_IRQHandler+0x1cc>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800246c:	6822      	ldr	r2, [r4, #0]
 800246e:	6993      	ldr	r3, [r2, #24]
 8002470:	f043 0310 	orr.w	r3, r3, #16
 8002474:	6193      	str	r3, [r2, #24]
 8002476:	e773      	b.n	8002360 <HAL_HCD_IRQHandler+0xb4>
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002478:	f3c6 180a 	ubfx	r8, r6, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800247c:	f1b8 0f00 	cmp.w	r8, #0
 8002480:	d0f4      	beq.n	800246c <HAL_HCD_IRQHandler+0x1c0>
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002482:	f006 060f 	and.w	r6, r6, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002486:	232c      	movs	r3, #44	; 0x2c
 8002488:	fb03 4306 	mla	r3, r3, r6, r4
 800248c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800248e:	2900      	cmp	r1, #0
 8002490:	d0ec      	beq.n	800246c <HAL_HCD_IRQHandler+0x1c0>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002492:	232c      	movs	r3, #44	; 0x2c
 8002494:	fb03 4306 	mla	r3, r3, r6, r4
 8002498:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800249a:	4442      	add	r2, r8
 800249c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249e:	429a      	cmp	r2, r3
 80024a0:	d906      	bls.n	80024b0 <HAL_HCD_IRQHandler+0x204>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80024a2:	232c      	movs	r3, #44	; 0x2c
 80024a4:	fb03 4306 	mla	r3, r3, r6, r4
 80024a8:	2204      	movs	r2, #4
 80024aa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80024ae:	e7dd      	b.n	800246c <HAL_HCD_IRQHandler+0x1c0>
          (void)USB_ReadPacket(hhcd->Instance,
 80024b0:	4642      	mov	r2, r8
 80024b2:	4638      	mov	r0, r7
 80024b4:	f002 fb6b 	bl	8004b8e <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80024b8:	222c      	movs	r2, #44	; 0x2c
 80024ba:	fb02 4206 	mla	r2, r2, r6, r4
 80024be:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80024c0:	4443      	add	r3, r8
 80024c2:	6453      	str	r3, [r2, #68]	; 0x44
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80024c4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80024c6:	4443      	add	r3, r8
 80024c8:	6513      	str	r3, [r2, #80]	; 0x50
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80024ca:	0170      	lsls	r0, r6, #5
 80024cc:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 80024d0:	eb03 1146 	add.w	r1, r3, r6, lsl #5
 80024d4:	6909      	ldr	r1, [r1, #16]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80024d6:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 80024da:	4590      	cmp	r8, r2
 80024dc:	d1c6      	bne.n	800246c <HAL_HCD_IRQHandler+0x1c0>
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80024de:	f3c1 41c9 	ubfx	r1, r1, #19, #10
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80024e2:	2900      	cmp	r1, #0
 80024e4:	d0c2      	beq.n	800246c <HAL_HCD_IRQHandler+0x1c0>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80024e6:	58c2      	ldr	r2, [r0, r3]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024e8:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024ec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80024f0:	50c2      	str	r2, [r0, r3]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80024f2:	232c      	movs	r3, #44	; 0x2c
 80024f4:	fb03 4306 	mla	r3, r3, r6, r4
 80024f8:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80024fc:	f082 0201 	eor.w	r2, r2, #1
 8002500:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002504:	e7b2      	b.n	800246c <HAL_HCD_IRQHandler+0x1c0>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002506:	2304      	movs	r3, #4
 8002508:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800250a:	fb0b 4308 	mla	r3, fp, r8, r4
 800250e:	2206      	movs	r2, #6
 8002510:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002514:	4641      	mov	r1, r8
 8002516:	6820      	ldr	r0, [r4, #0]
 8002518:	f002 fce4 	bl	8004ee4 <USB_HC_Halt>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002522:	d16e      	bne.n	8002602 <HAL_HCD_IRQHandler+0x356>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	f013 0f01 	tst.w	r3, #1
 800252a:	f000 80c2 	beq.w	80026b2 <HAL_HCD_IRQHandler+0x406>
    if (hhcd->Init.dma_enable != 0U)
 800252e:	6923      	ldr	r3, [r4, #16]
 8002530:	b13b      	cbz	r3, 8002542 <HAL_HCD_IRQHandler+0x296>
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002532:	693a      	ldr	r2, [r7, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002534:	fb0b 4108 	mla	r1, fp, r8, r4
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002538:	f3c2 0212 	ubfx	r2, r2, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800253c:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800253e:	1a9b      	subs	r3, r3, r2
 8002540:	650b      	str	r3, [r1, #80]	; 0x50
    hhcd->hc[ch_num].state = HC_XFRC;
 8002542:	fb0b 4308 	mla	r3, fp, r8, r4
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    hhcd->hc[ch_num].ErrCnt = 0U;
 800254c:	2100      	movs	r1, #0
 800254e:	65d9      	str	r1, [r3, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002550:	60ba      	str	r2, [r7, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002552:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002556:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 800255a:	f000 8085 	beq.w	8002668 <HAL_HCD_IRQHandler+0x3bc>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800255e:	2b01      	cmp	r3, #1
 8002560:	f040 8088 	bne.w	8002674 <HAL_HCD_IRQHandler+0x3c8>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002564:	9a01      	ldr	r2, [sp, #4]
 8002566:	f85a 3002 	ldr.w	r3, [sl, r2]
 800256a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800256e:	f84a 3002 	str.w	r3, [sl, r2]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002572:	fb0b 4308 	mla	r3, fp, r8, r4
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800257c:	4641      	mov	r1, r8
 800257e:	4620      	mov	r0, r4
 8002580:	f004 f87a 	bl	8006678 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002584:	e076      	b.n	8002674 <HAL_HCD_IRQHandler+0x3c8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002586:	f44f 7380 	mov.w	r3, #256	; 0x100
 800258a:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800258c:	fb0b 4308 	mla	r3, fp, r8, r4
 8002590:	2207      	movs	r2, #7
 8002592:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002596:	4641      	mov	r1, r8
 8002598:	6820      	ldr	r0, [r4, #0]
 800259a:	f002 fca3 	bl	8004ee4 <USB_HC_Halt>
 800259e:	e7bd      	b.n	800251c <HAL_HCD_IRQHandler+0x270>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	f013 0f08 	tst.w	r3, #8
 80025a6:	d113      	bne.n	80025d0 <HAL_HCD_IRQHandler+0x324>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80025ae:	d11b      	bne.n	80025e8 <HAL_HCD_IRQHandler+0x33c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80025b6:	d0b1      	beq.n	800251c <HAL_HCD_IRQHandler+0x270>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80025b8:	2380      	movs	r3, #128	; 0x80
 80025ba:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80025bc:	fb0b 4308 	mla	r3, fp, r8, r4
 80025c0:	2206      	movs	r2, #6
 80025c2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025c6:	4641      	mov	r1, r8
 80025c8:	6820      	ldr	r0, [r4, #0]
 80025ca:	f002 fc8b 	bl	8004ee4 <USB_HC_Halt>
 80025ce:	e7a5      	b.n	800251c <HAL_HCD_IRQHandler+0x270>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80025d0:	2308      	movs	r3, #8
 80025d2:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80025d4:	fb0b 4308 	mla	r3, fp, r8, r4
 80025d8:	2205      	movs	r2, #5
 80025da:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025de:	4641      	mov	r1, r8
 80025e0:	6820      	ldr	r0, [r4, #0]
 80025e2:	f002 fc7f 	bl	8004ee4 <USB_HC_Halt>
 80025e6:	e799      	b.n	800251c <HAL_HCD_IRQHandler+0x270>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80025e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025ec:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80025ee:	fb0b 4308 	mla	r3, fp, r8, r4
 80025f2:	2208      	movs	r2, #8
 80025f4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025f8:	4641      	mov	r1, r8
 80025fa:	6820      	ldr	r0, [r4, #0]
 80025fc:	f002 fc72 	bl	8004ee4 <USB_HC_Halt>
 8002600:	e78c      	b.n	800251c <HAL_HCD_IRQHandler+0x270>
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002602:	4641      	mov	r1, r8
 8002604:	6820      	ldr	r0, [r4, #0]
 8002606:	f002 fc6d 	bl	8004ee4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800260a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800260e:	60bb      	str	r3, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002610:	3601      	adds	r6, #1
 8002612:	3520      	adds	r5, #32
 8002614:	68a3      	ldr	r3, [r4, #8]
 8002616:	42b3      	cmp	r3, r6
 8002618:	f240 8222 	bls.w	8002a60 <HAL_HCD_IRQHandler+0x7b4>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800261c:	f006 030f 	and.w	r3, r6, #15
 8002620:	fa29 f303 	lsr.w	r3, r9, r3
 8002624:	f013 0f01 	tst.w	r3, #1
 8002628:	d0f2      	beq.n	8002610 <HAL_HCD_IRQHandler+0x364>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800262a:	682b      	ldr	r3, [r5, #0]
 800262c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002630:	f000 80ca 	beq.w	80027c8 <HAL_HCD_IRQHandler+0x51c>
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002634:	fa5f f886 	uxtb.w	r8, r6
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002638:	6823      	ldr	r3, [r4, #0]
 800263a:	f503 6aa0 	add.w	sl, r3, #1280	; 0x500
 800263e:	ea4f 1348 	mov.w	r3, r8, lsl #5
 8002642:	9301      	str	r3, [sp, #4]
 8002644:	eb0a 1748 	add.w	r7, sl, r8, lsl #5
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f013 0f04 	tst.w	r3, #4
 800264e:	f47f af5a 	bne.w	8002506 <HAL_HCD_IRQHandler+0x25a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002658:	d195      	bne.n	8002586 <HAL_HCD_IRQHandler+0x2da>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f013 0f20 	tst.w	r3, #32
 8002660:	d09e      	beq.n	80025a0 <HAL_HCD_IRQHandler+0x2f4>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002662:	2320      	movs	r3, #32
 8002664:	60bb      	str	r3, [r7, #8]
 8002666:	e759      	b.n	800251c <HAL_HCD_IRQHandler+0x270>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002668:	4641      	mov	r1, r8
 800266a:	6820      	ldr	r0, [r4, #0]
 800266c:	f002 fc3a 	bl	8004ee4 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002670:	2310      	movs	r3, #16
 8002672:	60bb      	str	r3, [r7, #8]
    if (hhcd->Init.dma_enable == 1U)
 8002674:	6923      	ldr	r3, [r4, #16]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d008      	beq.n	800268c <HAL_HCD_IRQHandler+0x3e0>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800267a:	fb0b 4808 	mla	r8, fp, r8, r4
 800267e:	f898 3054 	ldrb.w	r3, [r8, #84]	; 0x54
 8002682:	f083 0301 	eor.w	r3, r3, #1
 8002686:	f888 3054 	strb.w	r3, [r8, #84]	; 0x54
 800268a:	e7c1      	b.n	8002610 <HAL_HCD_IRQHandler+0x364>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800268c:	fb0b 4308 	mla	r3, fp, r8, r4
 8002690:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002696:	fbb3 f3f2 	udiv	r3, r3, r2
 800269a:	f013 0f01 	tst.w	r3, #1
 800269e:	d0b7      	beq.n	8002610 <HAL_HCD_IRQHandler+0x364>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80026a0:	fb0b 4808 	mla	r8, fp, r8, r4
 80026a4:	f898 3054 	ldrb.w	r3, [r8, #84]	; 0x54
 80026a8:	f083 0301 	eor.w	r3, r3, #1
 80026ac:	f888 3054 	strb.w	r3, [r8, #84]	; 0x54
 80026b0:	e7ae      	b.n	8002610 <HAL_HCD_IRQHandler+0x364>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	f013 0f02 	tst.w	r3, #2
 80026b8:	d05c      	beq.n	8002774 <HAL_HCD_IRQHandler+0x4c8>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80026ba:	fb0b 4308 	mla	r3, fp, r8, r4
 80026be:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d012      	beq.n	80026ec <HAL_HCD_IRQHandler+0x440>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80026c6:	2b05      	cmp	r3, #5
 80026c8:	d020      	beq.n	800270c <HAL_HCD_IRQHandler+0x460>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80026ca:	2b06      	cmp	r3, #6
 80026cc:	d024      	beq.n	8002718 <HAL_HCD_IRQHandler+0x46c>
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d022      	beq.n	8002718 <HAL_HCD_IRQHandler+0x46c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d03e      	beq.n	8002754 <HAL_HCD_IRQHandler+0x4a8>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80026d6:	2b07      	cmp	r3, #7
 80026d8:	d10d      	bne.n	80026f6 <HAL_HCD_IRQHandler+0x44a>
      hhcd->hc[ch_num].ErrCnt++;
 80026da:	fb0b 4308 	mla	r3, fp, r8, r4
 80026de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026e0:	3201      	adds	r2, #1
 80026e2:	65da      	str	r2, [r3, #92]	; 0x5c
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026e4:	2204      	movs	r2, #4
 80026e6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80026ea:	e004      	b.n	80026f6 <HAL_HCD_IRQHandler+0x44a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80026ec:	fb0b 4308 	mla	r3, fp, r8, r4
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80026f6:	2302      	movs	r3, #2
 80026f8:	60bb      	str	r3, [r7, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80026fa:	fb0b 4308 	mla	r3, fp, r8, r4
 80026fe:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8002702:	4641      	mov	r1, r8
 8002704:	4620      	mov	r0, r4
 8002706:	f003 ffb7 	bl	8006678 <HAL_HCD_HC_NotifyURBChange_Callback>
 800270a:	e781      	b.n	8002610 <HAL_HCD_IRQHandler+0x364>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800270c:	fb0b 4308 	mla	r3, fp, r8, r4
 8002710:	2205      	movs	r2, #5
 8002712:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8002716:	e7ee      	b.n	80026f6 <HAL_HCD_IRQHandler+0x44a>
      hhcd->hc[ch_num].ErrCnt++;
 8002718:	fb0b 4208 	mla	r2, fp, r8, r4
 800271c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800271e:	3301      	adds	r3, #1
 8002720:	65d3      	str	r3, [r2, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002722:	2b02      	cmp	r3, #2
 8002724:	d906      	bls.n	8002734 <HAL_HCD_IRQHandler+0x488>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002726:	4613      	mov	r3, r2
 8002728:	2200      	movs	r2, #0
 800272a:	65da      	str	r2, [r3, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800272c:	2204      	movs	r2, #4
 800272e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8002732:	e7e0      	b.n	80026f6 <HAL_HCD_IRQHandler+0x44a>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002734:	fb0b 4308 	mla	r3, fp, r8, r4
 8002738:	f04f 0202 	mov.w	r2, #2
 800273c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002740:	9a01      	ldr	r2, [sp, #4]
 8002742:	f85a 3002 	ldr.w	r3, [sl, r2]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002746:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800274a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800274e:	f84a 3002 	str.w	r3, [sl, r2]
 8002752:	e7d0      	b.n	80026f6 <HAL_HCD_IRQHandler+0x44a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002754:	fb0b 4308 	mla	r3, fp, r8, r4
 8002758:	f04f 0202 	mov.w	r2, #2
 800275c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002760:	9a01      	ldr	r2, [sp, #4]
 8002762:	f85a 3002 	ldr.w	r3, [sl, r2]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002766:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800276a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800276e:	f84a 3002 	str.w	r3, [sl, r2]
 8002772:	e7c0      	b.n	80026f6 <HAL_HCD_IRQHandler+0x44a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f013 0f10 	tst.w	r3, #16
 800277a:	f43f af49 	beq.w	8002610 <HAL_HCD_IRQHandler+0x364>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800277e:	fb0b 4308 	mla	r3, fp, r8, r4
 8002782:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002786:	2b03      	cmp	r3, #3
 8002788:	d00b      	beq.n	80027a2 <HAL_HCD_IRQHandler+0x4f6>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800278a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800278e:	d105      	bne.n	800279c <HAL_HCD_IRQHandler+0x4f0>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002790:	fb0b 4308 	mla	r3, fp, r8, r4
 8002794:	2200      	movs	r2, #0
 8002796:	65da      	str	r2, [r3, #92]	; 0x5c
      if (hhcd->Init.dma_enable == 0U)
 8002798:	6923      	ldr	r3, [r4, #16]
 800279a:	b15b      	cbz	r3, 80027b4 <HAL_HCD_IRQHandler+0x508>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800279c:	2310      	movs	r3, #16
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	e736      	b.n	8002610 <HAL_HCD_IRQHandler+0x364>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80027a2:	fb0b 4308 	mla	r3, fp, r8, r4
 80027a6:	2200      	movs	r2, #0
 80027a8:	65da      	str	r2, [r3, #92]	; 0x5c
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027aa:	4641      	mov	r1, r8
 80027ac:	6820      	ldr	r0, [r4, #0]
 80027ae:	f002 fb99 	bl	8004ee4 <USB_HC_Halt>
 80027b2:	e7f3      	b.n	800279c <HAL_HCD_IRQHandler+0x4f0>
        hhcd->hc[ch_num].state = HC_NAK;
 80027b4:	fb0b 4308 	mla	r3, fp, r8, r4
 80027b8:	2203      	movs	r2, #3
 80027ba:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027be:	4641      	mov	r1, r8
 80027c0:	6820      	ldr	r0, [r4, #0]
 80027c2:	f002 fb8f 	bl	8004ee4 <USB_HC_Halt>
 80027c6:	e7e9      	b.n	800279c <HAL_HCD_IRQHandler+0x4f0>
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80027c8:	b2f1      	uxtb	r1, r6
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027ca:	6820      	ldr	r0, [r4, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80027cc:	f500 63a0 	add.w	r3, r0, #1280	; 0x500
 80027d0:	ea4f 1c41 	mov.w	ip, r1, lsl #5
 80027d4:	eb03 1741 	add.w	r7, r3, r1, lsl #5
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	f012 0f04 	tst.w	r2, #4
 80027de:	d11a      	bne.n	8002816 <HAL_HCD_IRQHandler+0x56a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	f012 0f20 	tst.w	r2, #32
 80027e6:	d021      	beq.n	800282c <HAL_HCD_IRQHandler+0x580>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80027e8:	2320      	movs	r3, #32
 80027ea:	60bb      	str	r3, [r7, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80027ec:	fb0b 4301 	mla	r3, fp, r1, r4
 80027f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	f47f af0b 	bne.w	8002610 <HAL_HCD_IRQHandler+0x364>
      hhcd->hc[ch_num].do_ping = 0U;
 80027fa:	fb0b 4301 	mla	r3, fp, r1, r4
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002806:	f04f 0202 	mov.w	r2, #2
 800280a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800280e:	6820      	ldr	r0, [r4, #0]
 8002810:	f002 fb68 	bl	8004ee4 <USB_HC_Halt>
 8002814:	e6fc      	b.n	8002610 <HAL_HCD_IRQHandler+0x364>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002816:	2304      	movs	r3, #4
 8002818:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800281a:	fb0b 4301 	mla	r3, fp, r1, r4
 800281e:	2206      	movs	r2, #6
 8002820:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002824:	6820      	ldr	r0, [r4, #0]
 8002826:	f002 fb5d 	bl	8004ee4 <USB_HC_Halt>
 800282a:	e6f1      	b.n	8002610 <HAL_HCD_IRQHandler+0x364>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002832:	d11c      	bne.n	800286e <HAL_HCD_IRQHandler+0x5c2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	f012 0f01 	tst.w	r2, #1
 800283a:	d01f      	beq.n	800287c <HAL_HCD_IRQHandler+0x5d0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800283c:	fb0b 4301 	mla	r3, fp, r1, r4
 8002840:	2200      	movs	r2, #0
 8002842:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	f013 0f40 	tst.w	r3, #64	; 0x40
 800284a:	d006      	beq.n	800285a <HAL_HCD_IRQHandler+0x5ae>
      hhcd->hc[ch_num].do_ping = 1U;
 800284c:	fb0b 4301 	mla	r3, fp, r1, r4
 8002850:	2201      	movs	r2, #1
 8002852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002856:	2340      	movs	r3, #64	; 0x40
 8002858:	60bb      	str	r3, [r7, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800285a:	2301      	movs	r3, #1
 800285c:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800285e:	fb0b 4201 	mla	r2, fp, r1, r4
 8002862:	f882 3061 	strb.w	r3, [r2, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002866:	6820      	ldr	r0, [r4, #0]
 8002868:	f002 fb3c 	bl	8004ee4 <USB_HC_Halt>
 800286c:	e6d0      	b.n	8002610 <HAL_HCD_IRQHandler+0x364>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800286e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002872:	60bb      	str	r3, [r7, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002874:	6820      	ldr	r0, [r4, #0]
 8002876:	f002 fb35 	bl	8004ee4 <USB_HC_Halt>
 800287a:	e6c9      	b.n	8002610 <HAL_HCD_IRQHandler+0x364>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002882:	d120      	bne.n	80028c6 <HAL_HCD_IRQHandler+0x61a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	f012 0f08 	tst.w	r2, #8
 800288a:	d12b      	bne.n	80028e4 <HAL_HCD_IRQHandler+0x638>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	f012 0f10 	tst.w	r2, #16
 8002892:	d032      	beq.n	80028fa <HAL_HCD_IRQHandler+0x64e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002894:	fb0b 4301 	mla	r3, fp, r1, r4
 8002898:	2200      	movs	r2, #0
 800289a:	65da      	str	r2, [r3, #92]	; 0x5c
    hhcd->hc[ch_num].state = HC_NAK;
 800289c:	2203      	movs	r2, #3
 800289e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    if (hhcd->hc[ch_num].do_ping == 0U)
 80028a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a6:	b94b      	cbnz	r3, 80028bc <HAL_HCD_IRQHandler+0x610>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80028a8:	fb0b 4301 	mla	r3, fp, r1, r4
 80028ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b0:	b923      	cbnz	r3, 80028bc <HAL_HCD_IRQHandler+0x610>
        hhcd->hc[ch_num].do_ping = 1U;
 80028b2:	fb0b 4301 	mla	r3, fp, r1, r4
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028bc:	f002 fb12 	bl	8004ee4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028c0:	2310      	movs	r3, #16
 80028c2:	60bb      	str	r3, [r7, #8]
 80028c4:	e6a4      	b.n	8002610 <HAL_HCD_IRQHandler+0x364>
    hhcd->hc[ch_num].state = HC_NYET;
 80028c6:	fb0b 4301 	mla	r3, fp, r1, r4
 80028ca:	2204      	movs	r2, #4
 80028cc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    hhcd->hc[ch_num].do_ping = 1U;
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028d6:	2200      	movs	r2, #0
 80028d8:	65da      	str	r2, [r3, #92]	; 0x5c
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028da:	f002 fb03 	bl	8004ee4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80028de:	2340      	movs	r3, #64	; 0x40
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	e695      	b.n	8002610 <HAL_HCD_IRQHandler+0x364>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80028e4:	2308      	movs	r3, #8
 80028e6:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80028e8:	fb0b 4301 	mla	r3, fp, r1, r4
 80028ec:	2205      	movs	r2, #5
 80028ee:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028f2:	6820      	ldr	r0, [r4, #0]
 80028f4:	f002 faf6 	bl	8004ee4 <USB_HC_Halt>
 80028f8:	e68a      	b.n	8002610 <HAL_HCD_IRQHandler+0x364>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002900:	d023      	beq.n	800294a <HAL_HCD_IRQHandler+0x69e>
    if (hhcd->Init.dma_enable == 0U)
 8002902:	6923      	ldr	r3, [r4, #16]
 8002904:	b17b      	cbz	r3, 8002926 <HAL_HCD_IRQHandler+0x67a>
      hhcd->hc[ch_num].ErrCnt++;
 8002906:	fb0b 4201 	mla	r2, fp, r1, r4
 800290a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800290c:	3301      	adds	r3, #1
 800290e:	65d3      	str	r3, [r2, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002910:	2b02      	cmp	r3, #2
 8002912:	d810      	bhi.n	8002936 <HAL_HCD_IRQHandler+0x68a>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002914:	fb0b 4101 	mla	r1, fp, r1, r4
 8002918:	f04f 0302 	mov.w	r3, #2
 800291c:	f881 3060 	strb.w	r3, [r1, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002920:	2380      	movs	r3, #128	; 0x80
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	e674      	b.n	8002610 <HAL_HCD_IRQHandler+0x364>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002926:	fb0b 4301 	mla	r3, fp, r1, r4
 800292a:	2206      	movs	r2, #6
 800292c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002930:	f002 fad8 	bl	8004ee4 <USB_HC_Halt>
 8002934:	e7f4      	b.n	8002920 <HAL_HCD_IRQHandler+0x674>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002936:	4613      	mov	r3, r2
 8002938:	2200      	movs	r2, #0
 800293a:	65da      	str	r2, [r3, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800293c:	2204      	movs	r2, #4
 800293e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002942:	4620      	mov	r0, r4
 8002944:	f003 fe98 	bl	8006678 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002948:	e7ea      	b.n	8002920 <HAL_HCD_IRQHandler+0x674>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002950:	d121      	bne.n	8002996 <HAL_HCD_IRQHandler+0x6ea>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	f012 0f02 	tst.w	r2, #2
 8002958:	f43f ae5a 	beq.w	8002610 <HAL_HCD_IRQHandler+0x364>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800295c:	fb0b 4201 	mla	r2, fp, r1, r4
 8002960:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
 8002964:	2a01      	cmp	r2, #1
 8002966:	d021      	beq.n	80029ac <HAL_HCD_IRQHandler+0x700>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002968:	2a03      	cmp	r2, #3
 800296a:	d04e      	beq.n	8002a0a <HAL_HCD_IRQHandler+0x75e>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800296c:	2a04      	cmp	r2, #4
 800296e:	d05c      	beq.n	8002a2a <HAL_HCD_IRQHandler+0x77e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002970:	2a05      	cmp	r2, #5
 8002972:	d061      	beq.n	8002a38 <HAL_HCD_IRQHandler+0x78c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002974:	2a06      	cmp	r2, #6
 8002976:	d001      	beq.n	800297c <HAL_HCD_IRQHandler+0x6d0>
 8002978:	2a08      	cmp	r2, #8
 800297a:	d14c      	bne.n	8002a16 <HAL_HCD_IRQHandler+0x76a>
      hhcd->hc[ch_num].ErrCnt++;
 800297c:	fb0b 4001 	mla	r0, fp, r1, r4
 8002980:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002982:	3201      	adds	r2, #1
 8002984:	65c2      	str	r2, [r0, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002986:	2a02      	cmp	r2, #2
 8002988:	d95b      	bls.n	8002a42 <HAL_HCD_IRQHandler+0x796>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800298a:	2200      	movs	r2, #0
 800298c:	65c2      	str	r2, [r0, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800298e:	2204      	movs	r2, #4
 8002990:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
 8002994:	e03f      	b.n	8002a16 <HAL_HCD_IRQHandler+0x76a>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002996:	fb0b 4301 	mla	r3, fp, r1, r4
 800299a:	2208      	movs	r2, #8
 800299c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029a0:	f002 faa0 	bl	8004ee4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80029a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	e631      	b.n	8002610 <HAL_HCD_IRQHandler+0x364>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80029ac:	fb0b 4301 	mla	r3, fp, r1, r4
 80029b0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80029b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029b8:	3b02      	subs	r3, #2
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	4293      	cmp	r3, r2
 80029be:	d82a      	bhi.n	8002a16 <HAL_HCD_IRQHandler+0x76a>
        if (hhcd->Init.dma_enable == 0U)
 80029c0:	6923      	ldr	r3, [r4, #16]
 80029c2:	b943      	cbnz	r3, 80029d6 <HAL_HCD_IRQHandler+0x72a>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80029c4:	fb0b 4201 	mla	r2, fp, r1, r4
 80029c8:	f892 3055 	ldrb.w	r3, [r2, #85]	; 0x55
 80029cc:	f083 0301 	eor.w	r3, r3, #1
 80029d0:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80029d4:	e01f      	b.n	8002a16 <HAL_HCD_IRQHandler+0x76a>
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d11d      	bne.n	8002a16 <HAL_HCD_IRQHandler+0x76a>
 80029da:	fb0b 4301 	mla	r3, fp, r1, r4
 80029de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e0:	b1cb      	cbz	r3, 8002a16 <HAL_HCD_IRQHandler+0x76a>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80029e2:	fb0b 4201 	mla	r2, fp, r1, r4
 80029e6:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 80029ea:	3b01      	subs	r3, #1
 80029ec:	4413      	add	r3, r2
 80029ee:	fbb3 f3f2 	udiv	r3, r3, r2
          if ((num_packets & 1U) != 0U)
 80029f2:	f013 0f01 	tst.w	r3, #1
 80029f6:	d00e      	beq.n	8002a16 <HAL_HCD_IRQHandler+0x76a>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80029f8:	fb0b 4201 	mla	r2, fp, r1, r4
 80029fc:	f892 3055 	ldrb.w	r3, [r2, #85]	; 0x55
 8002a00:	f083 0301 	eor.w	r3, r3, #1
 8002a04:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
 8002a08:	e005      	b.n	8002a16 <HAL_HCD_IRQHandler+0x76a>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a0a:	fb0b 4301 	mla	r3, fp, r1, r4
 8002a0e:	f04f 0202 	mov.w	r2, #2
 8002a12:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a16:	2302      	movs	r3, #2
 8002a18:	60bb      	str	r3, [r7, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a1a:	fb0b 4301 	mla	r3, fp, r1, r4
 8002a1e:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8002a22:	4620      	mov	r0, r4
 8002a24:	f003 fe28 	bl	8006678 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a28:	e5f2      	b.n	8002610 <HAL_HCD_IRQHandler+0x364>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a2a:	fb0b 4301 	mla	r3, fp, r1, r4
 8002a2e:	f04f 0202 	mov.w	r2, #2
 8002a32:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8002a36:	e7ee      	b.n	8002a16 <HAL_HCD_IRQHandler+0x76a>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a38:	fb0b 4301 	mla	r3, fp, r1, r4
 8002a3c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8002a40:	e7e9      	b.n	8002a16 <HAL_HCD_IRQHandler+0x76a>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a42:	fb0b 4201 	mla	r2, fp, r1, r4
 8002a46:	f04f 0002 	mov.w	r0, #2
 8002a4a:	f882 0060 	strb.w	r0, [r2, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a4e:	f853 200c 	ldr.w	r2, [r3, ip]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a52:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a56:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a5a:	f843 200c 	str.w	r2, [r3, ip]
 8002a5e:	e7da      	b.n	8002a16 <HAL_HCD_IRQHandler+0x76a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002a60:	6823      	ldr	r3, [r4, #0]
 8002a62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a66:	615a      	str	r2, [r3, #20]
 8002a68:	e42a      	b.n	80022c0 <HAL_HCD_IRQHandler+0x14>

08002a6a <HAL_HCD_Start>:
  __HAL_LOCK(hhcd);
 8002a6a:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d00e      	beq.n	8002a90 <HAL_HCD_Start+0x26>
{
 8002a72:	b510      	push	{r4, lr}
 8002a74:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8002a76:	2101      	movs	r1, #1
 8002a78:	f880 12f8 	strb.w	r1, [r0, #760]	; 0x2f8
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002a7c:	6800      	ldr	r0, [r0, #0]
 8002a7e:	f002 f947 	bl	8004d10 <USB_DriveVbus>
  __HAL_HCD_ENABLE(hhcd);
 8002a82:	6820      	ldr	r0, [r4, #0]
 8002a84:	f001 ffe1 	bl	8004a4a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002a88:	2000      	movs	r0, #0
 8002a8a:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 8002a8e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8002a90:	2002      	movs	r0, #2
}
 8002a92:	4770      	bx	lr

08002a94 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8002a94:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d00b      	beq.n	8002ab4 <HAL_HCD_Stop+0x20>
{
 8002a9c:	b510      	push	{r4, lr}
 8002a9e:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002aa6:	6800      	ldr	r0, [r0, #0]
 8002aa8:	f002 fb47 	bl	800513a <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002aac:	2000      	movs	r0, #0
 8002aae:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 8002ab2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8002ab4:	2002      	movs	r0, #2
}
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8002ab8:	232c      	movs	r3, #44	; 0x2c
 8002aba:	fb03 0001 	mla	r0, r3, r1, r0
}
 8002abe:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8002ac4:	232c      	movs	r3, #44	; 0x2c
 8002ac6:	fb03 0001 	mla	r0, r3, r1, r0
}
 8002aca:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8002acc:	4770      	bx	lr

08002ace <HAL_HCD_GetCurrentFrame>:
{
 8002ace:	b508      	push	{r3, lr}
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002ad0:	6800      	ldr	r0, [r0, #0]
 8002ad2:	f002 f94c 	bl	8004d6e <USB_GetCurrentFrame>
}
 8002ad6:	bd08      	pop	{r3, pc}

08002ad8 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ad8:	6803      	ldr	r3, [r0, #0]
 8002ada:	695a      	ldr	r2, [r3, #20]
 8002adc:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002ae0:	d101      	bne.n	8002ae6 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8002ae2:	2000      	movs	r0, #0
}
 8002ae4:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ae6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002aea:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002aec:	2300      	movs	r3, #0
 8002aee:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002af0:	2220      	movs	r2, #32
 8002af2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002af6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002afa:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002afc:	f042 0204 	orr.w	r2, r2, #4
 8002b00:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8002b02:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8002b06:	2001      	movs	r0, #1
 8002b08:	4770      	bx	lr

08002b0a <I2C_WaitOnFlagUntilTimeout>:
{
 8002b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b0e:	4606      	mov	r6, r0
 8002b10:	460c      	mov	r4, r1
 8002b12:	4617      	mov	r7, r2
 8002b14:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b16:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8002b1a:	f1b8 0f01 	cmp.w	r8, #1
 8002b1e:	6833      	ldr	r3, [r6, #0]
 8002b20:	bf0c      	ite	eq
 8002b22:	695b      	ldreq	r3, [r3, #20]
 8002b24:	699b      	ldrne	r3, [r3, #24]
 8002b26:	ea24 0c03 	bic.w	ip, r4, r3
 8002b2a:	fa1f fc8c 	uxth.w	ip, ip
 8002b2e:	fabc fc8c 	clz	ip, ip
 8002b32:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8002b36:	4567      	cmp	r7, ip
 8002b38:	d119      	bne.n	8002b6e <I2C_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8002b3a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002b3e:	d0ec      	beq.n	8002b1a <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b40:	f7fe fe02 	bl	8001748 <HAL_GetTick>
 8002b44:	9b06      	ldr	r3, [sp, #24]
 8002b46:	1ac0      	subs	r0, r0, r3
 8002b48:	42a8      	cmp	r0, r5
 8002b4a:	d801      	bhi.n	8002b50 <I2C_WaitOnFlagUntilTimeout+0x46>
 8002b4c:	2d00      	cmp	r5, #0
 8002b4e:	d1e4      	bne.n	8002b1a <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b50:	2300      	movs	r3, #0
 8002b52:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b54:	2220      	movs	r2, #32
 8002b56:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b5a:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b5e:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8002b60:	f042 0220 	orr.w	r2, r2, #32
 8002b64:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002b66:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8002b6a:	2001      	movs	r0, #1
 8002b6c:	e000      	b.n	8002b70 <I2C_WaitOnFlagUntilTimeout+0x66>
  return HAL_OK;
 8002b6e:	2000      	movs	r0, #0
}
 8002b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002b74 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b78:	4605      	mov	r5, r0
 8002b7a:	460e      	mov	r6, r1
 8002b7c:	4617      	mov	r7, r2
 8002b7e:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b80:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8002b84:	e03b      	b.n	8002bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b8c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b8e:	682b      	ldr	r3, [r5, #0]
 8002b90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b94:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b96:	2300      	movs	r3, #0
 8002b98:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ba0:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ba4:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002ba6:	f042 0204 	orr.w	r2, r2, #4
 8002baa:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002bac:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8002bb0:	2001      	movs	r0, #1
}
 8002bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb6:	f7fe fdc7 	bl	8001748 <HAL_GetTick>
 8002bba:	eba0 0009 	sub.w	r0, r0, r9
 8002bbe:	42b8      	cmp	r0, r7
 8002bc0:	d800      	bhi.n	8002bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x50>
 8002bc2:	b9e7      	cbnz	r7, 8002bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bc8:	2220      	movs	r2, #32
 8002bca:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bce:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bd2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002bd4:	f042 0220 	orr.w	r2, r2, #32
 8002bd8:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002bda:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 8002bde:	2001      	movs	r0, #1
 8002be0:	e7e7      	b.n	8002bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002be2:	682b      	ldr	r3, [r5, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	ea26 0303 	bic.w	r3, r6, r3
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	b19b      	cbz	r3, 8002c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bee:	682b      	ldr	r3, [r5, #0]
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002bf6:	d1c6      	bne.n	8002b86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x12>
    if (Timeout != HAL_MAX_DELAY)
 8002bf8:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8002bfc:	d1db      	bne.n	8002bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x42>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bfe:	f1b8 0f01 	cmp.w	r8, #1
 8002c02:	d0ee      	beq.n	8002be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x6e>
 8002c04:	682b      	ldr	r3, [r5, #0]
 8002c06:	699c      	ldr	r4, [r3, #24]
 8002c08:	ea26 0404 	bic.w	r4, r6, r4
 8002c0c:	b2a4      	uxth	r4, r4
 8002c0e:	2c00      	cmp	r4, #0
 8002c10:	d1ed      	bne.n	8002bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x7a>
  return HAL_OK;
 8002c12:	2000      	movs	r0, #0
 8002c14:	e7cd      	b.n	8002bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>
 8002c16:	2000      	movs	r0, #0
 8002c18:	e7cb      	b.n	8002bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

08002c1a <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002c1a:	b570      	push	{r4, r5, r6, lr}
 8002c1c:	4604      	mov	r4, r0
 8002c1e:	460d      	mov	r5, r1
 8002c20:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c22:	6823      	ldr	r3, [r4, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002c2a:	d11c      	bne.n	8002c66 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	f7ff ff53 	bl	8002ad8 <I2C_IsAcknowledgeFailed>
 8002c32:	b9d0      	cbnz	r0, 8002c6a <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002c34:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002c38:	d0f3      	beq.n	8002c22 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c3a:	f7fe fd85 	bl	8001748 <HAL_GetTick>
 8002c3e:	1b80      	subs	r0, r0, r6
 8002c40:	42a8      	cmp	r0, r5
 8002c42:	d801      	bhi.n	8002c48 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8002c44:	2d00      	cmp	r5, #0
 8002c46:	d1ec      	bne.n	8002c22 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c52:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c56:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002c58:	f042 0220 	orr.w	r2, r2, #32
 8002c5c:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002c5e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002c62:	2001      	movs	r0, #1
 8002c64:	e000      	b.n	8002c68 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8002c66:	2000      	movs	r0, #0
}
 8002c68:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002c6a:	2001      	movs	r0, #1
 8002c6c:	e7fc      	b.n	8002c68 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
	...

08002c70 <I2C_RequestMemoryWrite>:
{
 8002c70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c74:	b085      	sub	sp, #20
 8002c76:	4604      	mov	r4, r0
 8002c78:	460d      	mov	r5, r1
 8002c7a:	4691      	mov	r9, r2
 8002c7c:	461f      	mov	r7, r3
 8002c7e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8002c82:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c84:	6803      	ldr	r3, [r0, #0]
 8002c86:	6819      	ldr	r1, [r3, #0]
 8002c88:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002c8c:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c8e:	9600      	str	r6, [sp, #0]
 8002c90:	4643      	mov	r3, r8
 8002c92:	2200      	movs	r2, #0
 8002c94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c98:	f7ff ff37 	bl	8002b0a <I2C_WaitOnFlagUntilTimeout>
 8002c9c:	b970      	cbnz	r0, 8002cbc <I2C_RequestMemoryWrite+0x4c>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c9e:	6823      	ldr	r3, [r4, #0]
 8002ca0:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8002ca4:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ca6:	4633      	mov	r3, r6
 8002ca8:	4642      	mov	r2, r8
 8002caa:	4928      	ldr	r1, [pc, #160]	; (8002d4c <I2C_RequestMemoryWrite+0xdc>)
 8002cac:	4620      	mov	r0, r4
 8002cae:	f7ff ff61 	bl	8002b74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cb2:	b168      	cbz	r0, 8002cd0 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 8002cb4:	2001      	movs	r0, #1
}
 8002cb6:	b005      	add	sp, #20
 8002cb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cbc:	6823      	ldr	r3, [r4, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002cc4:	d040      	beq.n	8002d48 <I2C_RequestMemoryWrite+0xd8>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cca:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8002ccc:	2003      	movs	r0, #3
 8002cce:	e7f2      	b.n	8002cb6 <I2C_RequestMemoryWrite+0x46>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	9303      	str	r3, [sp, #12]
 8002cd4:	6823      	ldr	r3, [r4, #0]
 8002cd6:	695a      	ldr	r2, [r3, #20]
 8002cd8:	9203      	str	r2, [sp, #12]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	9303      	str	r3, [sp, #12]
 8002cde:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ce0:	4632      	mov	r2, r6
 8002ce2:	4641      	mov	r1, r8
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	f7ff ff98 	bl	8002c1a <I2C_WaitOnTXEFlagUntilTimeout>
 8002cea:	b930      	cbnz	r0, 8002cfa <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cec:	2f01      	cmp	r7, #1
 8002cee:	d110      	bne.n	8002d12 <I2C_RequestMemoryWrite+0xa2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cf0:	6823      	ldr	r3, [r4, #0]
 8002cf2:	fa5f f689 	uxtb.w	r6, r9
 8002cf6:	611e      	str	r6, [r3, #16]
 8002cf8:	e7dd      	b.n	8002cb6 <I2C_RequestMemoryWrite+0x46>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d001      	beq.n	8002d04 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 8002d00:	2001      	movs	r0, #1
 8002d02:	e7d8      	b.n	8002cb6 <I2C_RequestMemoryWrite+0x46>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d04:	6822      	ldr	r2, [r4, #0]
 8002d06:	6813      	ldr	r3, [r2, #0]
 8002d08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d0c:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8002d0e:	2001      	movs	r0, #1
 8002d10:	e7d1      	b.n	8002cb6 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d12:	6823      	ldr	r3, [r4, #0]
 8002d14:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8002d18:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d1a:	4632      	mov	r2, r6
 8002d1c:	4641      	mov	r1, r8
 8002d1e:	4620      	mov	r0, r4
 8002d20:	f7ff ff7b 	bl	8002c1a <I2C_WaitOnTXEFlagUntilTimeout>
 8002d24:	b920      	cbnz	r0, 8002d30 <I2C_RequestMemoryWrite+0xc0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d26:	6823      	ldr	r3, [r4, #0]
 8002d28:	fa5f f689 	uxtb.w	r6, r9
 8002d2c:	611e      	str	r6, [r3, #16]
 8002d2e:	e7c2      	b.n	8002cb6 <I2C_RequestMemoryWrite+0x46>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	d001      	beq.n	8002d3a <I2C_RequestMemoryWrite+0xca>
      return HAL_ERROR;
 8002d36:	2001      	movs	r0, #1
 8002d38:	e7bd      	b.n	8002cb6 <I2C_RequestMemoryWrite+0x46>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d3a:	6822      	ldr	r2, [r4, #0]
 8002d3c:	6813      	ldr	r3, [r2, #0]
 8002d3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d42:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8002d44:	2001      	movs	r0, #1
 8002d46:	e7b6      	b.n	8002cb6 <I2C_RequestMemoryWrite+0x46>
    return HAL_TIMEOUT;
 8002d48:	2003      	movs	r0, #3
 8002d4a:	e7b4      	b.n	8002cb6 <I2C_RequestMemoryWrite+0x46>
 8002d4c:	00010002 	.word	0x00010002

08002d50 <I2C_RequestMemoryRead>:
{
 8002d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d54:	b084      	sub	sp, #16
 8002d56:	4604      	mov	r4, r0
 8002d58:	460d      	mov	r5, r1
 8002d5a:	4616      	mov	r6, r2
 8002d5c:	4699      	mov	r9, r3
 8002d5e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8002d60:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d64:	6802      	ldr	r2, [r0, #0]
 8002d66:	6813      	ldr	r3, [r2, #0]
 8002d68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d6c:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d6e:	6803      	ldr	r3, [r0, #0]
 8002d70:	6819      	ldr	r1, [r3, #0]
 8002d72:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002d76:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d78:	f8cd 8000 	str.w	r8, [sp]
 8002d7c:	463b      	mov	r3, r7
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d84:	f7ff fec1 	bl	8002b0a <I2C_WaitOnFlagUntilTimeout>
 8002d88:	b980      	cbnz	r0, 8002dac <I2C_RequestMemoryRead+0x5c>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d8a:	fa5f fa85 	uxtb.w	sl, r5
 8002d8e:	6823      	ldr	r3, [r4, #0]
 8002d90:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8002d94:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d96:	4643      	mov	r3, r8
 8002d98:	463a      	mov	r2, r7
 8002d9a:	4945      	ldr	r1, [pc, #276]	; (8002eb0 <I2C_RequestMemoryRead+0x160>)
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	f7ff fee9 	bl	8002b74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002da2:	b168      	cbz	r0, 8002dc0 <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 8002da4:	2001      	movs	r0, #1
}
 8002da6:	b004      	add	sp, #16
 8002da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dac:	6823      	ldr	r3, [r4, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002db4:	d077      	beq.n	8002ea6 <I2C_RequestMemoryRead+0x156>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002db6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dba:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8002dbc:	2003      	movs	r0, #3
 8002dbe:	e7f2      	b.n	8002da6 <I2C_RequestMemoryRead+0x56>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	9303      	str	r3, [sp, #12]
 8002dc4:	6823      	ldr	r3, [r4, #0]
 8002dc6:	695a      	ldr	r2, [r3, #20]
 8002dc8:	9203      	str	r2, [sp, #12]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	9303      	str	r3, [sp, #12]
 8002dce:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dd0:	4642      	mov	r2, r8
 8002dd2:	4639      	mov	r1, r7
 8002dd4:	4620      	mov	r0, r4
 8002dd6:	f7ff ff20 	bl	8002c1a <I2C_WaitOnTXEFlagUntilTimeout>
 8002dda:	b988      	cbnz	r0, 8002e00 <I2C_RequestMemoryRead+0xb0>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ddc:	f1b9 0f01 	cmp.w	r9, #1
 8002de0:	d11a      	bne.n	8002e18 <I2C_RequestMemoryRead+0xc8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002de2:	6823      	ldr	r3, [r4, #0]
 8002de4:	b2f6      	uxtb	r6, r6
 8002de6:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002de8:	4642      	mov	r2, r8
 8002dea:	4639      	mov	r1, r7
 8002dec:	4620      	mov	r0, r4
 8002dee:	f7ff ff14 	bl	8002c1a <I2C_WaitOnTXEFlagUntilTimeout>
 8002df2:	2800      	cmp	r0, #0
 8002df4:	d030      	beq.n	8002e58 <I2C_RequestMemoryRead+0x108>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002df6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d026      	beq.n	8002e4a <I2C_RequestMemoryRead+0xfa>
    return HAL_ERROR;
 8002dfc:	2001      	movs	r0, #1
 8002dfe:	e7d2      	b.n	8002da6 <I2C_RequestMemoryRead+0x56>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d001      	beq.n	8002e0a <I2C_RequestMemoryRead+0xba>
    return HAL_ERROR;
 8002e06:	2001      	movs	r0, #1
 8002e08:	e7cd      	b.n	8002da6 <I2C_RequestMemoryRead+0x56>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e0a:	6822      	ldr	r2, [r4, #0]
 8002e0c:	6813      	ldr	r3, [r2, #0]
 8002e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e12:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8002e14:	2001      	movs	r0, #1
 8002e16:	e7c6      	b.n	8002da6 <I2C_RequestMemoryRead+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e18:	6823      	ldr	r3, [r4, #0]
 8002e1a:	0a32      	lsrs	r2, r6, #8
 8002e1c:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e1e:	4642      	mov	r2, r8
 8002e20:	4639      	mov	r1, r7
 8002e22:	4620      	mov	r0, r4
 8002e24:	f7ff fef9 	bl	8002c1a <I2C_WaitOnTXEFlagUntilTimeout>
 8002e28:	b918      	cbnz	r0, 8002e32 <I2C_RequestMemoryRead+0xe2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e2a:	6823      	ldr	r3, [r4, #0]
 8002e2c:	b2f6      	uxtb	r6, r6
 8002e2e:	611e      	str	r6, [r3, #16]
 8002e30:	e7da      	b.n	8002de8 <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d001      	beq.n	8002e3c <I2C_RequestMemoryRead+0xec>
      return HAL_ERROR;
 8002e38:	2001      	movs	r0, #1
 8002e3a:	e7b4      	b.n	8002da6 <I2C_RequestMemoryRead+0x56>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e3c:	6822      	ldr	r2, [r4, #0]
 8002e3e:	6813      	ldr	r3, [r2, #0]
 8002e40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e44:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8002e46:	2001      	movs	r0, #1
 8002e48:	e7ad      	b.n	8002da6 <I2C_RequestMemoryRead+0x56>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e4a:	6822      	ldr	r2, [r4, #0]
 8002e4c:	6813      	ldr	r3, [r2, #0]
 8002e4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e52:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8002e54:	2001      	movs	r0, #1
 8002e56:	e7a6      	b.n	8002da6 <I2C_RequestMemoryRead+0x56>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e58:	6822      	ldr	r2, [r4, #0]
 8002e5a:	6813      	ldr	r3, [r2, #0]
 8002e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e60:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e62:	f8cd 8000 	str.w	r8, [sp]
 8002e66:	463b      	mov	r3, r7
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e6e:	4620      	mov	r0, r4
 8002e70:	f7ff fe4b 	bl	8002b0a <I2C_WaitOnFlagUntilTimeout>
 8002e74:	b968      	cbnz	r0, 8002e92 <I2C_RequestMemoryRead+0x142>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e76:	6822      	ldr	r2, [r4, #0]
 8002e78:	f04a 0301 	orr.w	r3, sl, #1
 8002e7c:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e7e:	4643      	mov	r3, r8
 8002e80:	463a      	mov	r2, r7
 8002e82:	490b      	ldr	r1, [pc, #44]	; (8002eb0 <I2C_RequestMemoryRead+0x160>)
 8002e84:	4620      	mov	r0, r4
 8002e86:	f7ff fe75 	bl	8002b74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8002e8a:	3800      	subs	r0, #0
 8002e8c:	bf18      	it	ne
 8002e8e:	2001      	movne	r0, #1
 8002e90:	e789      	b.n	8002da6 <I2C_RequestMemoryRead+0x56>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e92:	6823      	ldr	r3, [r4, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002e9a:	d006      	beq.n	8002eaa <I2C_RequestMemoryRead+0x15a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ea0:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8002ea2:	2003      	movs	r0, #3
 8002ea4:	e77f      	b.n	8002da6 <I2C_RequestMemoryRead+0x56>
    return HAL_TIMEOUT;
 8002ea6:	2003      	movs	r0, #3
 8002ea8:	e77d      	b.n	8002da6 <I2C_RequestMemoryRead+0x56>
    return HAL_TIMEOUT;
 8002eaa:	2003      	movs	r0, #3
 8002eac:	e77b      	b.n	8002da6 <I2C_RequestMemoryRead+0x56>
 8002eae:	bf00      	nop
 8002eb0:	00010002 	.word	0x00010002

08002eb4 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8002eb4:	b570      	push	{r4, r5, r6, lr}
 8002eb6:	4604      	mov	r4, r0
 8002eb8:	460d      	mov	r5, r1
 8002eba:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ebc:	6823      	ldr	r3, [r4, #0]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	f013 0f04 	tst.w	r3, #4
 8002ec4:	d11c      	bne.n	8002f00 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ec6:	4620      	mov	r0, r4
 8002ec8:	f7ff fe06 	bl	8002ad8 <I2C_IsAcknowledgeFailed>
 8002ecc:	b9d0      	cbnz	r0, 8002f04 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002ece:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002ed2:	d0f3      	beq.n	8002ebc <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed4:	f7fe fc38 	bl	8001748 <HAL_GetTick>
 8002ed8:	1b80      	subs	r0, r0, r6
 8002eda:	42a8      	cmp	r0, r5
 8002edc:	d801      	bhi.n	8002ee2 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8002ede:	2d00      	cmp	r5, #0
 8002ee0:	d1ec      	bne.n	8002ebc <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ef0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002ef2:	f042 0220 	orr.w	r2, r2, #32
 8002ef6:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002ef8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002efc:	2001      	movs	r0, #1
 8002efe:	e000      	b.n	8002f02 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8002f00:	2000      	movs	r0, #0
}
 8002f02:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002f04:	2001      	movs	r0, #1
 8002f06:	e7fc      	b.n	8002f02 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08002f08 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8002f08:	b570      	push	{r4, r5, r6, lr}
 8002f0a:	4605      	mov	r5, r0
 8002f0c:	460c      	mov	r4, r1
 8002f0e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f10:	682b      	ldr	r3, [r5, #0]
 8002f12:	6959      	ldr	r1, [r3, #20]
 8002f14:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002f18:	d129      	bne.n	8002f6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f1a:	6959      	ldr	r1, [r3, #20]
 8002f1c:	f011 0f10 	tst.w	r1, #16
 8002f20:	d115      	bne.n	8002f4e <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f22:	f7fe fc11 	bl	8001748 <HAL_GetTick>
 8002f26:	1b80      	subs	r0, r0, r6
 8002f28:	42a0      	cmp	r0, r4
 8002f2a:	d801      	bhi.n	8002f30 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8002f2c:	2c00      	cmp	r4, #0
 8002f2e:	d1ef      	bne.n	8002f10 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f30:	2300      	movs	r3, #0
 8002f32:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f34:	2220      	movs	r2, #32
 8002f36:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f3a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f3e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002f40:	f042 0220 	orr.w	r2, r2, #32
 8002f44:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002f46:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8002f4a:	2001      	movs	r0, #1
}
 8002f4c:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f4e:	f06f 0210 	mvn.w	r2, #16
 8002f52:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f54:	2300      	movs	r3, #0
 8002f56:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f5e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f62:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002f64:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002f66:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8002f6a:	2001      	movs	r0, #1
 8002f6c:	e7ee      	b.n	8002f4c <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8002f6e:	2000      	movs	r0, #0
 8002f70:	e7ec      	b.n	8002f4c <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

08002f74 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002f74:	2800      	cmp	r0, #0
 8002f76:	f000 80b0 	beq.w	80030da <HAL_I2C_Init+0x166>
{
 8002f7a:	b570      	push	{r4, r5, r6, lr}
 8002f7c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f7e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d073      	beq.n	800306e <HAL_I2C_Init+0xfa>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f86:	2324      	movs	r3, #36	; 0x24
 8002f88:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002f8c:	6822      	ldr	r2, [r4, #0]
 8002f8e:	6813      	ldr	r3, [r2, #0]
 8002f90:	f023 0301 	bic.w	r3, r3, #1
 8002f94:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f96:	6822      	ldr	r2, [r4, #0]
 8002f98:	6813      	ldr	r3, [r2, #0]
 8002f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f9e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fa0:	6822      	ldr	r2, [r4, #0]
 8002fa2:	6813      	ldr	r3, [r2, #0]
 8002fa4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002fa8:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002faa:	f001 f9f3 	bl	8004394 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fae:	6862      	ldr	r2, [r4, #4]
 8002fb0:	4b4c      	ldr	r3, [pc, #304]	; (80030e4 <HAL_I2C_Init+0x170>)
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d860      	bhi.n	8003078 <HAL_I2C_Init+0x104>
 8002fb6:	4b4c      	ldr	r3, [pc, #304]	; (80030e8 <HAL_I2C_Init+0x174>)
 8002fb8:	4298      	cmp	r0, r3
 8002fba:	f240 8090 	bls.w	80030de <HAL_I2C_Init+0x16a>
  freqrange = I2C_FREQRANGE(pclk1);
 8002fbe:	494b      	ldr	r1, [pc, #300]	; (80030ec <HAL_I2C_Init+0x178>)
 8002fc0:	fba1 3100 	umull	r3, r1, r1, r0
 8002fc4:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fc6:	6825      	ldr	r5, [r4, #0]
 8002fc8:	686a      	ldr	r2, [r5, #4]
 8002fca:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002fce:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8002fd2:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fd4:	6821      	ldr	r1, [r4, #0]
 8002fd6:	6a0a      	ldr	r2, [r1, #32]
 8002fd8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002fdc:	4d41      	ldr	r5, [pc, #260]	; (80030e4 <HAL_I2C_Init+0x170>)
 8002fde:	6866      	ldr	r6, [r4, #4]
 8002fe0:	42ae      	cmp	r6, r5
 8002fe2:	d84e      	bhi.n	8003082 <HAL_I2C_Init+0x10e>
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fea:	6821      	ldr	r1, [r4, #0]
 8002fec:	69ca      	ldr	r2, [r1, #28]
 8002fee:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 8002ff2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ff6:	6865      	ldr	r5, [r4, #4]
 8002ff8:	4b3a      	ldr	r3, [pc, #232]	; (80030e4 <HAL_I2C_Init+0x170>)
 8002ffa:	429d      	cmp	r5, r3
 8002ffc:	d84b      	bhi.n	8003096 <HAL_I2C_Init+0x122>
 8002ffe:	1e43      	subs	r3, r0, #1
 8003000:	006d      	lsls	r5, r5, #1
 8003002:	fbb3 f3f5 	udiv	r3, r3, r5
 8003006:	3301      	adds	r3, #1
 8003008:	f640 70fc 	movw	r0, #4092	; 0xffc
 800300c:	4203      	tst	r3, r0
 800300e:	d05e      	beq.n	80030ce <HAL_I2C_Init+0x15a>
 8003010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003014:	4313      	orrs	r3, r2
 8003016:	61cb      	str	r3, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003018:	6821      	ldr	r1, [r4, #0]
 800301a:	680a      	ldr	r2, [r1, #0]
 800301c:	69e3      	ldr	r3, [r4, #28]
 800301e:	6a20      	ldr	r0, [r4, #32]
 8003020:	4303      	orrs	r3, r0
 8003022:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003026:	4313      	orrs	r3, r2
 8003028:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800302a:	6821      	ldr	r1, [r4, #0]
 800302c:	688a      	ldr	r2, [r1, #8]
 800302e:	6923      	ldr	r3, [r4, #16]
 8003030:	68e0      	ldr	r0, [r4, #12]
 8003032:	4303      	orrs	r3, r0
 8003034:	f422 4203 	bic.w	r2, r2, #33536	; 0x8300
 8003038:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800303c:	4313      	orrs	r3, r2
 800303e:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003040:	6821      	ldr	r1, [r4, #0]
 8003042:	68ca      	ldr	r2, [r1, #12]
 8003044:	6963      	ldr	r3, [r4, #20]
 8003046:	69a0      	ldr	r0, [r4, #24]
 8003048:	4303      	orrs	r3, r0
 800304a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800304e:	4313      	orrs	r3, r2
 8003050:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003052:	6822      	ldr	r2, [r4, #0]
 8003054:	6813      	ldr	r3, [r2, #0]
 8003056:	f043 0301 	orr.w	r3, r3, #1
 800305a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800305c:	2000      	movs	r0, #0
 800305e:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003060:	2320      	movs	r3, #32
 8003062:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003066:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003068:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 800306c:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800306e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003072:	f7fe f8d3 	bl	800121c <HAL_I2C_MspInit>
 8003076:	e786      	b.n	8002f86 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003078:	4b1d      	ldr	r3, [pc, #116]	; (80030f0 <HAL_I2C_Init+0x17c>)
 800307a:	4298      	cmp	r0, r3
 800307c:	d89f      	bhi.n	8002fbe <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 800307e:	2001      	movs	r0, #1
 8003080:	e7f4      	b.n	800306c <HAL_I2C_Init+0xf8>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003082:	f44f 7596 	mov.w	r5, #300	; 0x12c
 8003086:	fb05 f303 	mul.w	r3, r5, r3
 800308a:	4d1a      	ldr	r5, [pc, #104]	; (80030f4 <HAL_I2C_Init+0x180>)
 800308c:	fba5 5303 	umull	r5, r3, r5, r3
 8003090:	099b      	lsrs	r3, r3, #6
 8003092:	3301      	adds	r3, #1
 8003094:	e7a7      	b.n	8002fe6 <HAL_I2C_Init+0x72>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003096:	68a3      	ldr	r3, [r4, #8]
 8003098:	b95b      	cbnz	r3, 80030b2 <HAL_I2C_Init+0x13e>
 800309a:	3801      	subs	r0, #1
 800309c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80030a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80030a4:	3301      	adds	r3, #1
 80030a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030aa:	b193      	cbz	r3, 80030d2 <HAL_I2C_Init+0x15e>
 80030ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030b0:	e7b0      	b.n	8003014 <HAL_I2C_Init+0xa0>
 80030b2:	3801      	subs	r0, #1
 80030b4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80030b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80030bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80030c0:	3301      	adds	r3, #1
 80030c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c6:	b133      	cbz	r3, 80030d6 <HAL_I2C_Init+0x162>
 80030c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030cc:	e7a2      	b.n	8003014 <HAL_I2C_Init+0xa0>
 80030ce:	2304      	movs	r3, #4
 80030d0:	e7a0      	b.n	8003014 <HAL_I2C_Init+0xa0>
 80030d2:	2301      	movs	r3, #1
 80030d4:	e79e      	b.n	8003014 <HAL_I2C_Init+0xa0>
 80030d6:	2301      	movs	r3, #1
 80030d8:	e79c      	b.n	8003014 <HAL_I2C_Init+0xa0>
    return HAL_ERROR;
 80030da:	2001      	movs	r0, #1
}
 80030dc:	4770      	bx	lr
    return HAL_ERROR;
 80030de:	2001      	movs	r0, #1
 80030e0:	e7c4      	b.n	800306c <HAL_I2C_Init+0xf8>
 80030e2:	bf00      	nop
 80030e4:	000186a0 	.word	0x000186a0
 80030e8:	001e847f 	.word	0x001e847f
 80030ec:	431bde83 	.word	0x431bde83
 80030f0:	003d08ff 	.word	0x003d08ff
 80030f4:	10624dd3 	.word	0x10624dd3

080030f8 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 80030f8:	b1a8      	cbz	r0, 8003126 <HAL_I2C_DeInit+0x2e>
{
 80030fa:	b510      	push	{r4, lr}
 80030fc:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 80030fe:	2324      	movs	r3, #36	; 0x24
 8003100:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003104:	6802      	ldr	r2, [r0, #0]
 8003106:	6813      	ldr	r3, [r2, #0]
 8003108:	f023 0301 	bic.w	r3, r3, #1
 800310c:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800310e:	f7fe f8bd 	bl	800128c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003112:	2000      	movs	r0, #0
 8003114:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003116:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800311a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800311c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  __HAL_UNLOCK(hi2c);
 8003120:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003124:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003126:	2001      	movs	r0, #1
}
 8003128:	4770      	bx	lr
	...

0800312c <HAL_I2C_Mem_Write>:
{
 800312c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003130:	b083      	sub	sp, #12
 8003132:	4604      	mov	r4, r0
 8003134:	460f      	mov	r7, r1
 8003136:	4690      	mov	r8, r2
 8003138:	4699      	mov	r9, r3
 800313a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800313c:	f7fe fb04 	bl	8001748 <HAL_GetTick>
 8003140:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003142:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8003146:	b2c0      	uxtb	r0, r0
 8003148:	2820      	cmp	r0, #32
 800314a:	d003      	beq.n	8003154 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 800314c:	2002      	movs	r0, #2
}
 800314e:	b003      	add	sp, #12
 8003150:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003154:	9500      	str	r5, [sp, #0]
 8003156:	2319      	movs	r3, #25
 8003158:	2201      	movs	r2, #1
 800315a:	494d      	ldr	r1, [pc, #308]	; (8003290 <HAL_I2C_Mem_Write+0x164>)
 800315c:	4620      	mov	r0, r4
 800315e:	f7ff fcd4 	bl	8002b0a <I2C_WaitOnFlagUntilTimeout>
 8003162:	2800      	cmp	r0, #0
 8003164:	f040 808d 	bne.w	8003282 <HAL_I2C_Mem_Write+0x156>
    __HAL_LOCK(hi2c);
 8003168:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800316c:	2b01      	cmp	r3, #1
 800316e:	f000 808a 	beq.w	8003286 <HAL_I2C_Mem_Write+0x15a>
 8003172:	2301      	movs	r3, #1
 8003174:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003178:	6823      	ldr	r3, [r4, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	f012 0f01 	tst.w	r2, #1
 8003180:	d103      	bne.n	800318a <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	f042 0201 	orr.w	r2, r2, #1
 8003188:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800318a:	6822      	ldr	r2, [r4, #0]
 800318c:	6813      	ldr	r3, [r2, #0]
 800318e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003192:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003194:	2321      	movs	r3, #33	; 0x21
 8003196:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800319a:	2340      	movs	r3, #64	; 0x40
 800319c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031a0:	2300      	movs	r3, #0
 80031a2:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80031a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80031a6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031a8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80031ac:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80031b0:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031b2:	4b38      	ldr	r3, [pc, #224]	; (8003294 <HAL_I2C_Mem_Write+0x168>)
 80031b4:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031b6:	9501      	str	r5, [sp, #4]
 80031b8:	9600      	str	r6, [sp, #0]
 80031ba:	464b      	mov	r3, r9
 80031bc:	4642      	mov	r2, r8
 80031be:	4639      	mov	r1, r7
 80031c0:	4620      	mov	r0, r4
 80031c2:	f7ff fd55 	bl	8002c70 <I2C_RequestMemoryWrite>
 80031c6:	2800      	cmp	r0, #0
 80031c8:	d15f      	bne.n	800328a <HAL_I2C_Mem_Write+0x15e>
    while (hi2c->XferSize > 0U)
 80031ca:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80031cc:	b9d3      	cbnz	r3, 8003204 <HAL_I2C_Mem_Write+0xd8>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ce:	462a      	mov	r2, r5
 80031d0:	4631      	mov	r1, r6
 80031d2:	4620      	mov	r0, r4
 80031d4:	f7ff fe6e 	bl	8002eb4 <I2C_WaitOnBTFFlagUntilTimeout>
 80031d8:	2800      	cmp	r0, #0
 80031da:	d044      	beq.n	8003266 <HAL_I2C_Mem_Write+0x13a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d03a      	beq.n	8003258 <HAL_I2C_Mem_Write+0x12c>
      return HAL_ERROR;
 80031e2:	2001      	movs	r0, #1
 80031e4:	e7b3      	b.n	800314e <HAL_I2C_Mem_Write+0x22>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031e8:	2b04      	cmp	r3, #4
 80031ea:	d001      	beq.n	80031f0 <HAL_I2C_Mem_Write+0xc4>
        return HAL_ERROR;
 80031ec:	2001      	movs	r0, #1
 80031ee:	e7ae      	b.n	800314e <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f0:	6822      	ldr	r2, [r4, #0]
 80031f2:	6813      	ldr	r3, [r2, #0]
 80031f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031f8:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80031fa:	2001      	movs	r0, #1
 80031fc:	e7a7      	b.n	800314e <HAL_I2C_Mem_Write+0x22>
    while (hi2c->XferSize > 0U)
 80031fe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0e4      	beq.n	80031ce <HAL_I2C_Mem_Write+0xa2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003204:	462a      	mov	r2, r5
 8003206:	4631      	mov	r1, r6
 8003208:	4620      	mov	r0, r4
 800320a:	f7ff fd06 	bl	8002c1a <I2C_WaitOnTXEFlagUntilTimeout>
 800320e:	2800      	cmp	r0, #0
 8003210:	d1e9      	bne.n	80031e6 <HAL_I2C_Mem_Write+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003212:	6823      	ldr	r3, [r4, #0]
 8003214:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003216:	7812      	ldrb	r2, [r2, #0]
 8003218:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800321a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800321c:	1c43      	adds	r3, r0, #1
 800321e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003220:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003222:	3b01      	subs	r3, #1
 8003224:	b29b      	uxth	r3, r3
 8003226:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003228:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800322a:	3901      	subs	r1, #1
 800322c:	b289      	uxth	r1, r1
 800322e:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003230:	6822      	ldr	r2, [r4, #0]
 8003232:	6951      	ldr	r1, [r2, #20]
 8003234:	f011 0f04 	tst.w	r1, #4
 8003238:	d0e1      	beq.n	80031fe <HAL_I2C_Mem_Write+0xd2>
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0c7      	beq.n	80031ce <HAL_I2C_Mem_Write+0xa2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800323e:	7843      	ldrb	r3, [r0, #1]
 8003240:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8003242:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003244:	3301      	adds	r3, #1
 8003246:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8003248:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800324a:	3b01      	subs	r3, #1
 800324c:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800324e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003250:	3b01      	subs	r3, #1
 8003252:	b29b      	uxth	r3, r3
 8003254:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003256:	e7d2      	b.n	80031fe <HAL_I2C_Mem_Write+0xd2>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003258:	6822      	ldr	r2, [r4, #0]
 800325a:	6813      	ldr	r3, [r2, #0]
 800325c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003260:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8003262:	2001      	movs	r0, #1
 8003264:	e773      	b.n	800314e <HAL_I2C_Mem_Write+0x22>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003266:	6822      	ldr	r2, [r4, #0]
 8003268:	6813      	ldr	r3, [r2, #0]
 800326a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800326e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003270:	2320      	movs	r3, #32
 8003272:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003276:	2300      	movs	r3, #0
 8003278:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800327c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8003280:	e765      	b.n	800314e <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 8003282:	2002      	movs	r0, #2
 8003284:	e763      	b.n	800314e <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8003286:	2002      	movs	r0, #2
 8003288:	e761      	b.n	800314e <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 800328a:	2001      	movs	r0, #1
 800328c:	e75f      	b.n	800314e <HAL_I2C_Mem_Write+0x22>
 800328e:	bf00      	nop
 8003290:	00100002 	.word	0x00100002
 8003294:	ffff0000 	.word	0xffff0000

08003298 <HAL_I2C_Mem_Read>:
{
 8003298:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800329c:	b087      	sub	sp, #28
 800329e:	4604      	mov	r4, r0
 80032a0:	460f      	mov	r7, r1
 80032a2:	4690      	mov	r8, r2
 80032a4:	4699      	mov	r9, r3
 80032a6:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80032a8:	f7fe fa4e 	bl	8001748 <HAL_GetTick>
 80032ac:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ae:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 80032b2:	b2c0      	uxtb	r0, r0
 80032b4:	2820      	cmp	r0, #32
 80032b6:	d005      	beq.n	80032c4 <HAL_I2C_Mem_Read+0x2c>
    return HAL_BUSY;
 80032b8:	f04f 0902 	mov.w	r9, #2
}
 80032bc:	4648      	mov	r0, r9
 80032be:	b007      	add	sp, #28
 80032c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032c4:	9500      	str	r5, [sp, #0]
 80032c6:	2319      	movs	r3, #25
 80032c8:	2201      	movs	r2, #1
 80032ca:	499c      	ldr	r1, [pc, #624]	; (800353c <HAL_I2C_Mem_Read+0x2a4>)
 80032cc:	4620      	mov	r0, r4
 80032ce:	f7ff fc1c 	bl	8002b0a <I2C_WaitOnFlagUntilTimeout>
 80032d2:	2800      	cmp	r0, #0
 80032d4:	f040 8141 	bne.w	800355a <HAL_I2C_Mem_Read+0x2c2>
    __HAL_LOCK(hi2c);
 80032d8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80032dc:	2b01      	cmp	r3, #1
 80032de:	f000 813f 	beq.w	8003560 <HAL_I2C_Mem_Read+0x2c8>
 80032e2:	2301      	movs	r3, #1
 80032e4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032e8:	6823      	ldr	r3, [r4, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	f012 0f01 	tst.w	r2, #1
 80032f0:	d103      	bne.n	80032fa <HAL_I2C_Mem_Read+0x62>
      __HAL_I2C_ENABLE(hi2c);
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	f042 0201 	orr.w	r2, r2, #1
 80032f8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032fa:	6822      	ldr	r2, [r4, #0]
 80032fc:	6813      	ldr	r3, [r2, #0]
 80032fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003302:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003304:	2322      	movs	r3, #34	; 0x22
 8003306:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800330a:	2340      	movs	r3, #64	; 0x40
 800330c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003310:	2300      	movs	r3, #0
 8003312:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003314:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003316:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003318:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800331c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800331e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003320:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003322:	4b87      	ldr	r3, [pc, #540]	; (8003540 <HAL_I2C_Mem_Read+0x2a8>)
 8003324:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003326:	9501      	str	r5, [sp, #4]
 8003328:	9600      	str	r6, [sp, #0]
 800332a:	464b      	mov	r3, r9
 800332c:	4642      	mov	r2, r8
 800332e:	4639      	mov	r1, r7
 8003330:	4620      	mov	r0, r4
 8003332:	f7ff fd0d 	bl	8002d50 <I2C_RequestMemoryRead>
 8003336:	4681      	mov	r9, r0
 8003338:	2800      	cmp	r0, #0
 800333a:	f040 8114 	bne.w	8003566 <HAL_I2C_Mem_Read+0x2ce>
    if (hi2c->XferSize == 0U)
 800333e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003340:	b993      	cbnz	r3, 8003368 <HAL_I2C_Mem_Read+0xd0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003342:	9302      	str	r3, [sp, #8]
 8003344:	6823      	ldr	r3, [r4, #0]
 8003346:	695a      	ldr	r2, [r3, #20]
 8003348:	9202      	str	r2, [sp, #8]
 800334a:	699a      	ldr	r2, [r3, #24]
 800334c:	9202      	str	r2, [sp, #8]
 800334e:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003356:	601a      	str	r2, [r3, #0]
    while (hi2c->XferSize > 0U)
 8003358:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 80f4 	beq.w	8003548 <HAL_I2C_Mem_Read+0x2b0>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003360:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8003544 <HAL_I2C_Mem_Read+0x2ac>
 8003364:	2700      	movs	r7, #0
 8003366:	e075      	b.n	8003454 <HAL_I2C_Mem_Read+0x1bc>
    else if (hi2c->XferSize == 1U)
 8003368:	2b01      	cmp	r3, #1
 800336a:	d00a      	beq.n	8003382 <HAL_I2C_Mem_Read+0xea>
    else if (hi2c->XferSize == 2U)
 800336c:	2b02      	cmp	r3, #2
 800336e:	d01a      	beq.n	80033a6 <HAL_I2C_Mem_Read+0x10e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003370:	2200      	movs	r2, #0
 8003372:	9205      	str	r2, [sp, #20]
 8003374:	6822      	ldr	r2, [r4, #0]
 8003376:	6951      	ldr	r1, [r2, #20]
 8003378:	9105      	str	r1, [sp, #20]
 800337a:	6992      	ldr	r2, [r2, #24]
 800337c:	9205      	str	r2, [sp, #20]
 800337e:	9a05      	ldr	r2, [sp, #20]
    while (hi2c->XferSize > 0U)
 8003380:	e7ee      	b.n	8003360 <HAL_I2C_Mem_Read+0xc8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003382:	6822      	ldr	r2, [r4, #0]
 8003384:	6813      	ldr	r3, [r2, #0]
 8003386:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800338a:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800338c:	2300      	movs	r3, #0
 800338e:	9303      	str	r3, [sp, #12]
 8003390:	6823      	ldr	r3, [r4, #0]
 8003392:	695a      	ldr	r2, [r3, #20]
 8003394:	9203      	str	r2, [sp, #12]
 8003396:	699a      	ldr	r2, [r3, #24]
 8003398:	9203      	str	r2, [sp, #12]
 800339a:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	e7d8      	b.n	8003358 <HAL_I2C_Mem_Read+0xc0>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033a6:	6822      	ldr	r2, [r4, #0]
 80033a8:	6813      	ldr	r3, [r2, #0]
 80033aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033ae:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033b0:	6822      	ldr	r2, [r4, #0]
 80033b2:	6813      	ldr	r3, [r2, #0]
 80033b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033b8:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ba:	2300      	movs	r3, #0
 80033bc:	9304      	str	r3, [sp, #16]
 80033be:	6823      	ldr	r3, [r4, #0]
 80033c0:	695a      	ldr	r2, [r3, #20]
 80033c2:	9204      	str	r2, [sp, #16]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	9304      	str	r3, [sp, #16]
 80033c8:	9b04      	ldr	r3, [sp, #16]
 80033ca:	e7c5      	b.n	8003358 <HAL_I2C_Mem_Read+0xc0>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033cc:	462a      	mov	r2, r5
 80033ce:	4631      	mov	r1, r6
 80033d0:	4620      	mov	r0, r4
 80033d2:	f7ff fd99 	bl	8002f08 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033d6:	2800      	cmp	r0, #0
 80033d8:	f040 80c8 	bne.w	800356c <HAL_I2C_Mem_Read+0x2d4>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033dc:	6823      	ldr	r3, [r4, #0]
 80033de:	691a      	ldr	r2, [r3, #16]
 80033e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033e2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80033e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033e6:	3301      	adds	r3, #1
 80033e8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80033ea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80033ec:	3b01      	subs	r3, #1
 80033ee:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80033f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80033f2:	3b01      	subs	r3, #1
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	8563      	strh	r3, [r4, #42]	; 0x2a
 80033f8:	e029      	b.n	800344e <HAL_I2C_Mem_Read+0x1b6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033fa:	9500      	str	r5, [sp, #0]
 80033fc:	4633      	mov	r3, r6
 80033fe:	463a      	mov	r2, r7
 8003400:	4641      	mov	r1, r8
 8003402:	4620      	mov	r0, r4
 8003404:	f7ff fb81 	bl	8002b0a <I2C_WaitOnFlagUntilTimeout>
 8003408:	2800      	cmp	r0, #0
 800340a:	f040 80b2 	bne.w	8003572 <HAL_I2C_Mem_Read+0x2da>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800340e:	6822      	ldr	r2, [r4, #0]
 8003410:	6813      	ldr	r3, [r2, #0]
 8003412:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003416:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003418:	6823      	ldr	r3, [r4, #0]
 800341a:	691a      	ldr	r2, [r3, #16]
 800341c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800341e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003420:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003422:	1c53      	adds	r3, r2, #1
 8003424:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003426:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003428:	3b01      	subs	r3, #1
 800342a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800342c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800342e:	3b01      	subs	r3, #1
 8003430:	b29b      	uxth	r3, r3
 8003432:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003434:	6823      	ldr	r3, [r4, #0]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800343a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800343c:	3301      	adds	r3, #1
 800343e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003440:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003442:	3b01      	subs	r3, #1
 8003444:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003446:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003448:	3b01      	subs	r3, #1
 800344a:	b29b      	uxth	r3, r3
 800344c:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800344e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003450:	2b00      	cmp	r3, #0
 8003452:	d079      	beq.n	8003548 <HAL_I2C_Mem_Read+0x2b0>
      if (hi2c->XferSize <= 3U)
 8003454:	2b03      	cmp	r3, #3
 8003456:	d84a      	bhi.n	80034ee <HAL_I2C_Mem_Read+0x256>
        if (hi2c->XferSize == 1U)
 8003458:	2b01      	cmp	r3, #1
 800345a:	d0b7      	beq.n	80033cc <HAL_I2C_Mem_Read+0x134>
        else if (hi2c->XferSize == 2U)
 800345c:	2b02      	cmp	r3, #2
 800345e:	d0cc      	beq.n	80033fa <HAL_I2C_Mem_Read+0x162>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003460:	9500      	str	r5, [sp, #0]
 8003462:	4633      	mov	r3, r6
 8003464:	463a      	mov	r2, r7
 8003466:	4641      	mov	r1, r8
 8003468:	4620      	mov	r0, r4
 800346a:	f7ff fb4e 	bl	8002b0a <I2C_WaitOnFlagUntilTimeout>
 800346e:	2800      	cmp	r0, #0
 8003470:	f040 8082 	bne.w	8003578 <HAL_I2C_Mem_Read+0x2e0>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003474:	6822      	ldr	r2, [r4, #0]
 8003476:	6813      	ldr	r3, [r2, #0]
 8003478:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800347c:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800347e:	6823      	ldr	r3, [r4, #0]
 8003480:	691a      	ldr	r2, [r3, #16]
 8003482:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003484:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003486:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003488:	3301      	adds	r3, #1
 800348a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800348c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800348e:	3b01      	subs	r3, #1
 8003490:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003492:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003494:	3b01      	subs	r3, #1
 8003496:	b29b      	uxth	r3, r3
 8003498:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800349a:	9500      	str	r5, [sp, #0]
 800349c:	4633      	mov	r3, r6
 800349e:	463a      	mov	r2, r7
 80034a0:	4641      	mov	r1, r8
 80034a2:	4620      	mov	r0, r4
 80034a4:	f7ff fb31 	bl	8002b0a <I2C_WaitOnFlagUntilTimeout>
 80034a8:	2800      	cmp	r0, #0
 80034aa:	d168      	bne.n	800357e <HAL_I2C_Mem_Read+0x2e6>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ac:	6822      	ldr	r2, [r4, #0]
 80034ae:	6813      	ldr	r3, [r2, #0]
 80034b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034b4:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b6:	6823      	ldr	r3, [r4, #0]
 80034b8:	691a      	ldr	r2, [r3, #16]
 80034ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034bc:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80034be:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80034c0:	1c53      	adds	r3, r2, #1
 80034c2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80034c4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80034c6:	3b01      	subs	r3, #1
 80034c8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80034ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80034d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034da:	3301      	adds	r3, #1
 80034dc:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80034de:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80034e0:	3b01      	subs	r3, #1
 80034e2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80034e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	8563      	strh	r3, [r4, #42]	; 0x2a
 80034ec:	e7af      	b.n	800344e <HAL_I2C_Mem_Read+0x1b6>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ee:	462a      	mov	r2, r5
 80034f0:	4631      	mov	r1, r6
 80034f2:	4620      	mov	r0, r4
 80034f4:	f7ff fd08 	bl	8002f08 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034f8:	2800      	cmp	r0, #0
 80034fa:	d143      	bne.n	8003584 <HAL_I2C_Mem_Read+0x2ec>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003502:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003504:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003506:	1c53      	adds	r3, r2, #1
 8003508:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 800350a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800350c:	3b01      	subs	r3, #1
 800350e:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003510:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003512:	3b01      	subs	r3, #1
 8003514:	b29b      	uxth	r3, r3
 8003516:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003518:	6823      	ldr	r3, [r4, #0]
 800351a:	6959      	ldr	r1, [r3, #20]
 800351c:	f011 0f04 	tst.w	r1, #4
 8003520:	d095      	beq.n	800344e <HAL_I2C_Mem_Read+0x1b6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8003526:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003528:	3301      	adds	r3, #1
 800352a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800352c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800352e:	3b01      	subs	r3, #1
 8003530:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003532:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003534:	3b01      	subs	r3, #1
 8003536:	b29b      	uxth	r3, r3
 8003538:	8563      	strh	r3, [r4, #42]	; 0x2a
 800353a:	e788      	b.n	800344e <HAL_I2C_Mem_Read+0x1b6>
 800353c:	00100002 	.word	0x00100002
 8003540:	ffff0000 	.word	0xffff0000
 8003544:	00010004 	.word	0x00010004
    hi2c->State = HAL_I2C_STATE_READY;
 8003548:	2320      	movs	r3, #32
 800354a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800354e:	2300      	movs	r3, #0
 8003550:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8003554:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8003558:	e6b0      	b.n	80032bc <HAL_I2C_Mem_Read+0x24>
      return HAL_BUSY;
 800355a:	f04f 0902 	mov.w	r9, #2
 800355e:	e6ad      	b.n	80032bc <HAL_I2C_Mem_Read+0x24>
    __HAL_LOCK(hi2c);
 8003560:	f04f 0902 	mov.w	r9, #2
 8003564:	e6aa      	b.n	80032bc <HAL_I2C_Mem_Read+0x24>
      return HAL_ERROR;
 8003566:	f04f 0901 	mov.w	r9, #1
 800356a:	e6a7      	b.n	80032bc <HAL_I2C_Mem_Read+0x24>
            return HAL_ERROR;
 800356c:	f04f 0901 	mov.w	r9, #1
 8003570:	e6a4      	b.n	80032bc <HAL_I2C_Mem_Read+0x24>
            return HAL_ERROR;
 8003572:	f04f 0901 	mov.w	r9, #1
 8003576:	e6a1      	b.n	80032bc <HAL_I2C_Mem_Read+0x24>
            return HAL_ERROR;
 8003578:	f04f 0901 	mov.w	r9, #1
 800357c:	e69e      	b.n	80032bc <HAL_I2C_Mem_Read+0x24>
            return HAL_ERROR;
 800357e:	f04f 0901 	mov.w	r9, #1
 8003582:	e69b      	b.n	80032bc <HAL_I2C_Mem_Read+0x24>
          return HAL_ERROR;
 8003584:	f04f 0901 	mov.w	r9, #1
 8003588:	e698      	b.n	80032bc <HAL_I2C_Mem_Read+0x24>
 800358a:	bf00      	nop

0800358c <HAL_I2C_GetState>:
  return hi2c->State;
 800358c:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8003590:	4770      	bx	lr
	...

08003594 <HAL_I2S_Init>:
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003594:	2800      	cmp	r0, #0
 8003596:	f000 80b3 	beq.w	8003700 <HAL_I2S_Init+0x16c>
{
 800359a:	b538      	push	{r3, r4, r5, lr}
 800359c:	4604      	mov	r4, r0
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800359e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d038      	beq.n	8003618 <HAL_I2S_Init+0x84>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80035a6:	2202      	movs	r2, #2
 80035a8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80035ac:	6821      	ldr	r1, [r4, #0]
 80035ae:	69cb      	ldr	r3, [r1, #28]
 80035b0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80035b4:	f023 030f 	bic.w	r3, r3, #15
 80035b8:	61cb      	str	r3, [r1, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80035be:	6963      	ldr	r3, [r4, #20]
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d04a      	beq.n	800365a <HAL_I2S_Init+0xc6>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80035c4:	68e3      	ldr	r3, [r4, #12]
      packetlength = 16U;
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	bf0c      	ite	eq
 80035ca:	2510      	moveq	r5, #16
 80035cc:	2520      	movne	r5, #32
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80035ce:	68a3      	ldr	r3, [r4, #8]
 80035d0:	2b20      	cmp	r3, #32
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80035d2:	bf98      	it	ls
 80035d4:	006d      	lslls	r5, r5, #1
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80035d6:	2001      	movs	r0, #1
 80035d8:	f000 ffbe 	bl	8004558 <HAL_RCCEx_GetPeriphCLKFreq>
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80035dc:	6923      	ldr	r3, [r4, #16]
 80035de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035e2:	d020      	beq.n	8003626 <HAL_I2S_Init+0x92>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80035e4:	fbb0 f0f5 	udiv	r0, r0, r5
 80035e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80035ec:	0043      	lsls	r3, r0, #1
 80035ee:	6960      	ldr	r0, [r4, #20]
 80035f0:	fbb3 f3f0 	udiv	r3, r3, r0
 80035f4:	3305      	adds	r3, #5
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80035f6:	4a43      	ldr	r2, [pc, #268]	; (8003704 <HAL_I2S_Init+0x170>)
 80035f8:	fba2 2303 	umull	r2, r3, r2, r3

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80035fc:	f3c3 02c0 	ubfx	r2, r3, #3, #1

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003600:	ebc2 03d3 	rsb	r3, r2, r3, lsr #3
 8003604:	085b      	lsrs	r3, r3, #1
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003606:	1e99      	subs	r1, r3, #2
 8003608:	29fd      	cmp	r1, #253	; 0xfd
 800360a:	d924      	bls.n	8003656 <HAL_I2S_Init+0xc2>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800360c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800360e:	f043 0310 	orr.w	r3, r3, #16
 8003612:	6463      	str	r3, [r4, #68]	; 0x44
    return  HAL_ERROR;
 8003614:	2001      	movs	r0, #1
 8003616:	e03f      	b.n	8003698 <HAL_I2S_Init+0x104>
    hi2s->Lock = HAL_UNLOCKED;
 8003618:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800361c:	4b3a      	ldr	r3, [pc, #232]	; (8003708 <HAL_I2S_Init+0x174>)
 800361e:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 8003620:	f7fd fe52 	bl	80012c8 <HAL_I2S_MspInit>
 8003624:	e7bf      	b.n	80035a6 <HAL_I2S_Init+0x12>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003626:	68e3      	ldr	r3, [r4, #12]
 8003628:	b153      	cbz	r3, 8003640 <HAL_I2S_Init+0xac>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800362a:	00ad      	lsls	r5, r5, #2
 800362c:	fbb0 f0f5 	udiv	r0, r0, r5
 8003630:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003634:	0043      	lsls	r3, r0, #1
 8003636:	6960      	ldr	r0, [r4, #20]
 8003638:	fbb3 f3f0 	udiv	r3, r3, r0
 800363c:	3305      	adds	r3, #5
 800363e:	e7da      	b.n	80035f6 <HAL_I2S_Init+0x62>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003640:	00ed      	lsls	r5, r5, #3
 8003642:	fbb0 f0f5 	udiv	r0, r0, r5
 8003646:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800364a:	0043      	lsls	r3, r0, #1
 800364c:	6960      	ldr	r0, [r4, #20]
 800364e:	fbb3 f3f0 	udiv	r3, r3, r0
 8003652:	3305      	adds	r3, #5
 8003654:	e7cf      	b.n	80035f6 <HAL_I2S_Init+0x62>
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003656:	0212      	lsls	r2, r2, #8
 8003658:	e000      	b.n	800365c <HAL_I2S_Init+0xc8>
    i2sodd = 0U;
 800365a:	2200      	movs	r2, #0
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800365c:	6821      	ldr	r1, [r4, #0]
 800365e:	4313      	orrs	r3, r2
 8003660:	6922      	ldr	r2, [r4, #16]
 8003662:	4313      	orrs	r3, r2
 8003664:	620b      	str	r3, [r1, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003666:	6821      	ldr	r1, [r4, #0]
 8003668:	69ca      	ldr	r2, [r1, #28]
 800366a:	6863      	ldr	r3, [r4, #4]
 800366c:	68a0      	ldr	r0, [r4, #8]
 800366e:	4303      	orrs	r3, r0
 8003670:	f422 627b 	bic.w	r2, r2, #4016	; 0xfb0
 8003674:	f022 020f 	bic.w	r2, r2, #15
 8003678:	4313      	orrs	r3, r2
 800367a:	68e2      	ldr	r2, [r4, #12]
 800367c:	4313      	orrs	r3, r2
 800367e:	69a2      	ldr	r2, [r4, #24]
 8003680:	4313      	orrs	r3, r2
 8003682:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003686:	61cb      	str	r3, [r1, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003688:	6a23      	ldr	r3, [r4, #32]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d005      	beq.n	800369a <HAL_I2S_Init+0x106>
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800368e:	2000      	movs	r0, #0
 8003690:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003692:	2301      	movs	r3, #1
 8003694:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  return HAL_OK;
}
 8003698:	bd38      	pop	{r3, r4, r5, pc}
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800369a:	4b1c      	ldr	r3, [pc, #112]	; (800370c <HAL_I2S_Init+0x178>)
 800369c:	6363      	str	r3, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800369e:	6821      	ldr	r1, [r4, #0]
 80036a0:	4b1b      	ldr	r3, [pc, #108]	; (8003710 <HAL_I2S_Init+0x17c>)
 80036a2:	4a1c      	ldr	r2, [pc, #112]	; (8003714 <HAL_I2S_Init+0x180>)
 80036a4:	4299      	cmp	r1, r3
 80036a6:	bf18      	it	ne
 80036a8:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 80036ac:	69d3      	ldr	r3, [r2, #28]
 80036ae:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80036b2:	f023 030f 	bic.w	r3, r3, #15
 80036b6:	61d3      	str	r3, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80036b8:	6821      	ldr	r1, [r4, #0]
 80036ba:	4a15      	ldr	r2, [pc, #84]	; (8003710 <HAL_I2S_Init+0x17c>)
 80036bc:	4b15      	ldr	r3, [pc, #84]	; (8003714 <HAL_I2S_Init+0x180>)
 80036be:	4291      	cmp	r1, r2
 80036c0:	bf18      	it	ne
 80036c2:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80036c6:	2202      	movs	r2, #2
 80036c8:	621a      	str	r2, [r3, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80036ca:	6821      	ldr	r1, [r4, #0]
 80036cc:	4b10      	ldr	r3, [pc, #64]	; (8003710 <HAL_I2S_Init+0x17c>)
 80036ce:	4a11      	ldr	r2, [pc, #68]	; (8003714 <HAL_I2S_Init+0x180>)
 80036d0:	4299      	cmp	r1, r3
 80036d2:	bf18      	it	ne
 80036d4:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 80036d8:	69d1      	ldr	r1, [r2, #28]
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80036da:	6863      	ldr	r3, [r4, #4]
      tmp = I2S_MODE_SLAVE_TX;
 80036dc:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 80036e0:	bf0c      	ite	eq
 80036e2:	f44f 7080 	moveq.w	r0, #256	; 0x100
 80036e6:	2000      	movne	r0, #0
                         (uint16_t)hi2s->Init.Standard   | \
 80036e8:	68a3      	ldr	r3, [r4, #8]
                         (uint16_t)hi2s->Init.DataFormat | \
 80036ea:	68e5      	ldr	r5, [r4, #12]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80036ec:	432b      	orrs	r3, r5
 80036ee:	4303      	orrs	r3, r0
                         (uint16_t)hi2s->Init.CPOL);
 80036f0:	69a0      	ldr	r0, [r4, #24]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80036f2:	4303      	orrs	r3, r0
 80036f4:	430b      	orrs	r3, r1
 80036f6:	b29b      	uxth	r3, r3
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80036f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036fc:	61d3      	str	r3, [r2, #28]
 80036fe:	e7c6      	b.n	800368e <HAL_I2S_Init+0xfa>
    return HAL_ERROR;
 8003700:	2001      	movs	r0, #1
}
 8003702:	4770      	bx	lr
 8003704:	cccccccd 	.word	0xcccccccd
 8003708:	0800394d 	.word	0x0800394d
 800370c:	08003aa5 	.word	0x08003aa5
 8003710:	40003800 	.word	0x40003800
 8003714:	40003400 	.word	0x40003400

08003718 <HAL_I2S_Transmit_DMA>:
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003718:	2900      	cmp	r1, #0
 800371a:	d05e      	beq.n	80037da <HAL_I2S_Transmit_DMA+0xc2>
{
 800371c:	b538      	push	{r3, r4, r5, lr}
 800371e:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0U))
 8003720:	2a00      	cmp	r2, #0
 8003722:	d05c      	beq.n	80037de <HAL_I2S_Transmit_DMA+0xc6>
  {
    return  HAL_ERROR;
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003724:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b01      	cmp	r3, #1
 800372c:	d059      	beq.n	80037e2 <HAL_I2S_Transmit_DMA+0xca>
 800372e:	2301      	movs	r3, #1
 8003730:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003734:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
 8003738:	b2ed      	uxtb	r5, r5
 800373a:	429d      	cmp	r5, r3
 800373c:	d110      	bne.n	8003760 <HAL_I2S_Transmit_DMA+0x48>
    __HAL_UNLOCK(hi2s);
    return HAL_BUSY;
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800373e:	2303      	movs	r3, #3
 8003740:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003744:	2300      	movs	r3, #0
 8003746:	6463      	str	r3, [r4, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8003748:	6261      	str	r1, [r4, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800374a:	6823      	ldr	r3, [r4, #0]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	f003 0307 	and.w	r3, r3, #7

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003752:	2b03      	cmp	r3, #3
 8003754:	d009      	beq.n	800376a <HAL_I2S_Transmit_DMA+0x52>
 8003756:	2b05      	cmp	r3, #5
 8003758:	d007      	beq.n	800376a <HAL_I2S_Transmit_DMA+0x52>
    hi2s->TxXferSize = (Size << 1U);
    hi2s->TxXferCount = (Size << 1U);
  }
  else
  {
    hi2s->TxXferSize = Size;
 800375a:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2s->TxXferCount = Size;
 800375c:	8562      	strh	r2, [r4, #42]	; 0x2a
 800375e:	e008      	b.n	8003772 <HAL_I2S_Transmit_DMA+0x5a>
    __HAL_UNLOCK(hi2s);
 8003760:	2300      	movs	r3, #0
 8003762:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_BUSY;
 8003766:	2002      	movs	r0, #2
 8003768:	e03a      	b.n	80037e0 <HAL_I2S_Transmit_DMA+0xc8>
    hi2s->TxXferSize = (Size << 1U);
 800376a:	0052      	lsls	r2, r2, #1
 800376c:	b292      	uxth	r2, r2
 800376e:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003770:	8562      	strh	r2, [r4, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003772:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003774:	4a1c      	ldr	r2, [pc, #112]	; (80037e8 <HAL_I2S_Transmit_DMA+0xd0>)
 8003776:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003778:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800377a:	4a1c      	ldr	r2, [pc, #112]	; (80037ec <HAL_I2S_Transmit_DMA+0xd4>)
 800377c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800377e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003780:	4a1b      	ldr	r2, [pc, #108]	; (80037f0 <HAL_I2S_Transmit_DMA+0xd8>)
 8003782:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
                                 (uint32_t)hi2s->pTxBuffPtr,
                                 (uint32_t)&hi2s->Instance->DR,
                                 hi2s->TxXferSize))
 8003784:	8d23      	ldrh	r3, [r4, #40]	; 0x28
                                 (uint32_t)&hi2s->Instance->DR,
 8003786:	6822      	ldr	r2, [r4, #0]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003788:	b29b      	uxth	r3, r3
 800378a:	320c      	adds	r2, #12
 800378c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800378e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003790:	f7fe f948 	bl	8001a24 <HAL_DMA_Start_IT>
 8003794:	b9a8      	cbnz	r0, 80037c2 <HAL_I2S_Transmit_DMA+0xaa>
    __HAL_UNLOCK(hi2s);
    return HAL_ERROR;
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003796:	6823      	ldr	r3, [r4, #0]
 8003798:	69da      	ldr	r2, [r3, #28]
 800379a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800379e:	d103      	bne.n	80037a8 <HAL_I2S_Transmit_DMA+0x90>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80037a0:	69da      	ldr	r2, [r3, #28]
 80037a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037a6:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80037a8:	6823      	ldr	r3, [r4, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	f012 0f02 	tst.w	r2, #2
 80037b0:	d103      	bne.n	80037ba <HAL_I2S_Transmit_DMA+0xa2>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	f042 0202 	orr.w	r2, r2, #2
 80037b8:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80037ba:	2300      	movs	r3, #0
 80037bc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return HAL_OK;
 80037c0:	e00e      	b.n	80037e0 <HAL_I2S_Transmit_DMA+0xc8>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80037c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80037c4:	f043 0308 	orr.w	r3, r3, #8
 80037c8:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80037ca:	2301      	movs	r3, #1
 80037cc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 80037d0:	2300      	movs	r3, #0
 80037d2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 80037d6:	4628      	mov	r0, r5
 80037d8:	e002      	b.n	80037e0 <HAL_I2S_Transmit_DMA+0xc8>
    return  HAL_ERROR;
 80037da:	2001      	movs	r0, #1
}
 80037dc:	4770      	bx	lr
    return  HAL_ERROR;
 80037de:	2001      	movs	r0, #1
}
 80037e0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hi2s);
 80037e2:	2002      	movs	r0, #2
 80037e4:	e7fc      	b.n	80037e0 <HAL_I2S_Transmit_DMA+0xc8>
 80037e6:	bf00      	nop
 80037e8:	080038f1 	.word	0x080038f1
 80037ec:	080038fb 	.word	0x080038fb
 80037f0:	08003a75 	.word	0x08003a75

080037f4 <HAL_I2S_Receive_DMA>:
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80037f4:	2900      	cmp	r1, #0
 80037f6:	d06d      	beq.n	80038d4 <HAL_I2S_Receive_DMA+0xe0>
{
 80037f8:	b530      	push	{r4, r5, lr}
 80037fa:	b083      	sub	sp, #12
 80037fc:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0U))
 80037fe:	2a00      	cmp	r2, #0
 8003800:	d06a      	beq.n	80038d8 <HAL_I2S_Receive_DMA+0xe4>
  {
    return  HAL_ERROR;
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003802:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b01      	cmp	r3, #1
 800380a:	d068      	beq.n	80038de <HAL_I2S_Receive_DMA+0xea>
 800380c:	2301      	movs	r3, #1
 800380e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003812:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
 8003816:	b2ed      	uxtb	r5, r5
 8003818:	429d      	cmp	r5, r3
 800381a:	d110      	bne.n	800383e <HAL_I2S_Receive_DMA+0x4a>
    __HAL_UNLOCK(hi2s);
    return HAL_BUSY;
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800381c:	2304      	movs	r3, #4
 800381e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003822:	2300      	movs	r3, #0
 8003824:	6463      	str	r3, [r4, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8003826:	62e1      	str	r1, [r4, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003828:	6823      	ldr	r3, [r4, #0]
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	f003 0307 	and.w	r3, r3, #7

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003830:	2b03      	cmp	r3, #3
 8003832:	d009      	beq.n	8003848 <HAL_I2S_Receive_DMA+0x54>
 8003834:	2b05      	cmp	r3, #5
 8003836:	d007      	beq.n	8003848 <HAL_I2S_Receive_DMA+0x54>
    hi2s->RxXferSize = (Size << 1U);
    hi2s->RxXferCount = (Size << 1U);
  }
  else
  {
    hi2s->RxXferSize = Size;
 8003838:	8622      	strh	r2, [r4, #48]	; 0x30
    hi2s->RxXferCount = Size;
 800383a:	8662      	strh	r2, [r4, #50]	; 0x32
 800383c:	e008      	b.n	8003850 <HAL_I2S_Receive_DMA+0x5c>
    __HAL_UNLOCK(hi2s);
 800383e:	2300      	movs	r3, #0
 8003840:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_BUSY;
 8003844:	2002      	movs	r0, #2
 8003846:	e048      	b.n	80038da <HAL_I2S_Receive_DMA+0xe6>
    hi2s->RxXferSize = (Size << 1U);
 8003848:	0052      	lsls	r2, r2, #1
 800384a:	b292      	uxth	r2, r2
 800384c:	8622      	strh	r2, [r4, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 800384e:	8662      	strh	r2, [r4, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8003850:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003852:	4a24      	ldr	r2, [pc, #144]	; (80038e4 <HAL_I2S_Receive_DMA+0xf0>)
 8003854:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8003856:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003858:	4a23      	ldr	r2, [pc, #140]	; (80038e8 <HAL_I2S_Receive_DMA+0xf4>)
 800385a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800385c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800385e:	4a23      	ldr	r2, [pc, #140]	; (80038ec <HAL_I2S_Receive_DMA+0xf8>)
 8003860:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8003862:	6821      	ldr	r1, [r4, #0]
 8003864:	69cb      	ldr	r3, [r1, #28]
 8003866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800386a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800386e:	d01d      	beq.n	80038ac <HAL_I2S_Receive_DMA+0xb8>
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
                                 hi2s->RxXferSize))
 8003870:	8e23      	ldrh	r3, [r4, #48]	; 0x30
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8003872:	b29b      	uxth	r3, r3
 8003874:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003876:	310c      	adds	r1, #12
 8003878:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800387a:	f7fe f8d3 	bl	8001a24 <HAL_DMA_Start_IT>
 800387e:	b9e8      	cbnz	r0, 80038bc <HAL_I2S_Receive_DMA+0xc8>
    __HAL_UNLOCK(hi2s);
    return HAL_ERROR;
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003880:	6823      	ldr	r3, [r4, #0]
 8003882:	69da      	ldr	r2, [r3, #28]
 8003884:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003888:	d103      	bne.n	8003892 <HAL_I2S_Receive_DMA+0x9e>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800388a:	69da      	ldr	r2, [r3, #28]
 800388c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003890:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	f012 0f01 	tst.w	r2, #1
 800389a:	d103      	bne.n	80038a4 <HAL_I2S_Receive_DMA+0xb0>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80038a4:	2300      	movs	r3, #0
 80038a6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return HAL_OK;
 80038aa:	e016      	b.n	80038da <HAL_I2S_Receive_DMA+0xe6>
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80038ac:	2300      	movs	r3, #0
 80038ae:	9301      	str	r3, [sp, #4]
 80038b0:	68cb      	ldr	r3, [r1, #12]
 80038b2:	9301      	str	r3, [sp, #4]
 80038b4:	688b      	ldr	r3, [r1, #8]
 80038b6:	9301      	str	r3, [sp, #4]
 80038b8:	9b01      	ldr	r3, [sp, #4]
 80038ba:	e7d9      	b.n	8003870 <HAL_I2S_Receive_DMA+0x7c>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80038bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80038be:	f043 0308 	orr.w	r3, r3, #8
 80038c2:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80038c4:	2301      	movs	r3, #1
 80038c6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 80038ca:	2300      	movs	r3, #0
 80038cc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 80038d0:	4628      	mov	r0, r5
 80038d2:	e002      	b.n	80038da <HAL_I2S_Receive_DMA+0xe6>
    return  HAL_ERROR;
 80038d4:	2001      	movs	r0, #1
}
 80038d6:	4770      	bx	lr
    return  HAL_ERROR;
 80038d8:	2001      	movs	r0, #1
}
 80038da:	b003      	add	sp, #12
 80038dc:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hi2s);
 80038de:	2002      	movs	r0, #2
 80038e0:	e7fb      	b.n	80038da <HAL_I2S_Receive_DMA+0xe6>
 80038e2:	bf00      	nop
 80038e4:	0800391f 	.word	0x0800391f
 80038e8:	08003929 	.word	0x08003929
 80038ec:	08003a75 	.word	0x08003a75

080038f0 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80038f0:	b508      	push	{r3, lr}

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80038f2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80038f4:	f7fc ff14 	bl	8000720 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80038f8:	bd08      	pop	{r3, pc}

080038fa <I2S_DMATxCplt>:
{
 80038fa:	b508      	push	{r3, lr}
 80038fc:	4603      	mov	r3, r0
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80038fe:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	b94b      	cbnz	r3, 8003918 <I2S_DMATxCplt+0x1e>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003904:	6802      	ldr	r2, [r0, #0]
 8003906:	6853      	ldr	r3, [r2, #4]
 8003908:	f023 0302 	bic.w	r3, r3, #2
 800390c:	6053      	str	r3, [r2, #4]
    hi2s->TxXferCount = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003912:	2301      	movs	r3, #1
 8003914:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  HAL_I2S_TxCpltCallback(hi2s);
 8003918:	f7fc fef6 	bl	8000708 <HAL_I2S_TxCpltCallback>
}
 800391c:	bd08      	pop	{r3, pc}

0800391e <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800391e:	b508      	push	{r3, lr}

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8003920:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003922:	f7fd fa11 	bl	8000d48 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003926:	bd08      	pop	{r3, pc}

08003928 <I2S_DMARxCplt>:
{
 8003928:	b508      	push	{r3, lr}
 800392a:	4603      	mov	r3, r0
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800392c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	b94b      	cbnz	r3, 8003946 <I2S_DMARxCplt+0x1e>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003932:	6802      	ldr	r2, [r0, #0]
 8003934:	6853      	ldr	r3, [r2, #4]
 8003936:	f023 0301 	bic.w	r3, r3, #1
 800393a:	6053      	str	r3, [r2, #4]
    hi2s->RxXferCount = 0U;
 800393c:	2300      	movs	r3, #0
 800393e:	8643      	strh	r3, [r0, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8003940:	2301      	movs	r3, #1
 8003942:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  HAL_I2S_RxCpltCallback(hi2s);
 8003946:	f7fd fa1d 	bl	8000d84 <HAL_I2S_RxCpltCallback>
}
 800394a:	bd08      	pop	{r3, pc}

0800394c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800394c:	b510      	push	{r4, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	4604      	mov	r4, r0
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003952:	6802      	ldr	r2, [r0, #0]
 8003954:	6893      	ldr	r3, [r2, #8]
 8003956:	9303      	str	r3, [sp, #12]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003958:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b04      	cmp	r3, #4
 8003960:	d006      	beq.n	8003970 <I2S_IRQHandler+0x24>
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003962:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b03      	cmp	r3, #3
 800396a:	d042      	beq.n	80039f2 <I2S_IRQHandler+0xa6>
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800396c:	b004      	add	sp, #16
 800396e:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003970:	9b03      	ldr	r3, [sp, #12]
 8003972:	f013 0f01 	tst.w	r3, #1
 8003976:	d003      	beq.n	8003980 <I2S_IRQHandler+0x34>
 8003978:	6853      	ldr	r3, [r2, #4]
 800397a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800397e:	d11f      	bne.n	80039c0 <I2S_IRQHandler+0x74>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003980:	9b03      	ldr	r3, [sp, #12]
 8003982:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003986:	d0ec      	beq.n	8003962 <I2S_IRQHandler+0x16>
 8003988:	6823      	ldr	r3, [r4, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	f012 0f20 	tst.w	r2, #32
 8003990:	d0e7      	beq.n	8003962 <I2S_IRQHandler+0x16>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003998:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800399a:	2300      	movs	r3, #0
 800399c:	9301      	str	r3, [sp, #4]
 800399e:	6823      	ldr	r3, [r4, #0]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	9201      	str	r2, [sp, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	9301      	str	r3, [sp, #4]
 80039a8:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 80039aa:	2301      	movs	r3, #1
 80039ac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80039b2:	f043 0302 	orr.w	r3, r3, #2
 80039b6:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80039b8:	4620      	mov	r0, r4
 80039ba:	f7fc febf 	bl	800073c <HAL_I2S_ErrorCallback>
 80039be:	e7d0      	b.n	8003962 <I2S_IRQHandler+0x16>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80039c0:	68d2      	ldr	r2, [r2, #12]
 80039c2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80039c4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80039c6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80039c8:	3302      	adds	r3, #2
 80039ca:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 80039cc:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	8643      	strh	r3, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 80039d4:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1d1      	bne.n	8003980 <I2S_IRQHandler+0x34>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039dc:	6802      	ldr	r2, [r0, #0]
 80039de:	6853      	ldr	r3, [r2, #4]
 80039e0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80039e4:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80039e6:	2301      	movs	r3, #1
 80039e8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 80039ec:	f7fd f9ca 	bl	8000d84 <HAL_I2S_RxCpltCallback>
 80039f0:	e7c6      	b.n	8003980 <I2S_IRQHandler+0x34>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80039f2:	9b03      	ldr	r3, [sp, #12]
 80039f4:	f013 0f02 	tst.w	r3, #2
 80039f8:	d004      	beq.n	8003a04 <I2S_IRQHandler+0xb8>
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003a02:	d11d      	bne.n	8003a40 <I2S_IRQHandler+0xf4>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003a04:	9b03      	ldr	r3, [sp, #12]
 8003a06:	f013 0f08 	tst.w	r3, #8
 8003a0a:	d0af      	beq.n	800396c <I2S_IRQHandler+0x20>
 8003a0c:	6823      	ldr	r3, [r4, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	f012 0f20 	tst.w	r2, #32
 8003a14:	d0aa      	beq.n	800396c <I2S_IRQHandler+0x20>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a1c:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003a1e:	2300      	movs	r3, #0
 8003a20:	9302      	str	r3, [sp, #8]
 8003a22:	6823      	ldr	r3, [r4, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	9302      	str	r3, [sp, #8]
 8003a28:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a30:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003a32:	f043 0304 	orr.w	r3, r3, #4
 8003a36:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8003a38:	4620      	mov	r0, r4
 8003a3a:	f7fc fe7f 	bl	800073c <HAL_I2S_ErrorCallback>
}
 8003a3e:	e795      	b.n	800396c <I2S_IRQHandler+0x20>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003a40:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003a42:	8812      	ldrh	r2, [r2, #0]
 8003a44:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003a46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a48:	3302      	adds	r3, #2
 8003a4a:	6263      	str	r3, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 8003a4c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8003a54:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1d3      	bne.n	8003a04 <I2S_IRQHandler+0xb8>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a5c:	6822      	ldr	r2, [r4, #0]
 8003a5e:	6853      	ldr	r3, [r2, #4]
 8003a60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a64:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8003a66:	2301      	movs	r3, #1
 8003a68:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	f7fc fe4b 	bl	8000708 <HAL_I2S_TxCpltCallback>
 8003a72:	e7c7      	b.n	8003a04 <I2S_IRQHandler+0xb8>

08003a74 <I2S_DMAError>:
{
 8003a74:	b508      	push	{r3, lr}
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003a76:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003a78:	6802      	ldr	r2, [r0, #0]
 8003a7a:	6853      	ldr	r3, [r2, #4]
 8003a7c:	f023 0303 	bic.w	r3, r3, #3
 8003a80:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8003a86:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003a8e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003a90:	f043 0308 	orr.w	r3, r3, #8
 8003a94:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 8003a96:	f7fc fe51 	bl	800073c <HAL_I2S_ErrorCallback>
}
 8003a9a:	bd08      	pop	{r3, pc}

08003a9c <HAL_I2S_GetState>:
  return hi2s->State;
 8003a9c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8003aa0:	4770      	bx	lr

08003aa2 <HAL_I2SEx_TxRxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 8003aa4:	b510      	push	{r4, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003aaa:	6802      	ldr	r2, [r0, #0]
 8003aac:	6893      	ldr	r3, [r2, #8]
 8003aae:	9305      	str	r3, [sp, #20]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003ab0:	499a      	ldr	r1, [pc, #616]	; (8003d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x278>)
 8003ab2:	4b9b      	ldr	r3, [pc, #620]	; (8003d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x27c>)
 8003ab4:	428a      	cmp	r2, r1
 8003ab6:	bf18      	it	ne
 8003ab8:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8003abc:	6899      	ldr	r1, [r3, #8]
 8003abe:	9104      	str	r1, [sp, #16]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003ac0:	6851      	ldr	r1, [r2, #4]
 8003ac2:	9103      	str	r1, [sp, #12]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003ac4:	6859      	ldr	r1, [r3, #4]
 8003ac6:	9102      	str	r1, [sp, #8]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ac8:	6841      	ldr	r1, [r0, #4]
 8003aca:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 8003ace:	f040 80ac 	bne.w	8003c2a <HAL_I2SEx_FullDuplex_IRQHandler+0x186>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003ad2:	9b05      	ldr	r3, [sp, #20]
 8003ad4:	f013 0f02 	tst.w	r3, #2
 8003ad8:	d003      	beq.n	8003ae2 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
 8003ada:	9b03      	ldr	r3, [sp, #12]
 8003adc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003ae0:	d15b      	bne.n	8003b9a <HAL_I2SEx_FullDuplex_IRQHandler+0xf6>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003ae2:	9b04      	ldr	r3, [sp, #16]
 8003ae4:	f013 0f01 	tst.w	r3, #1
 8003ae8:	d003      	beq.n	8003af2 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
 8003aea:	9b02      	ldr	r3, [sp, #8]
 8003aec:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003af0:	d16f      	bne.n	8003bd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x12e>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003af2:	9b04      	ldr	r3, [sp, #16]
 8003af4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003af8:	d025      	beq.n	8003b46 <HAL_I2SEx_FullDuplex_IRQHandler+0xa2>
 8003afa:	9b02      	ldr	r3, [sp, #8]
 8003afc:	f013 0f20 	tst.w	r3, #32
 8003b00:	d021      	beq.n	8003b46 <HAL_I2SEx_FullDuplex_IRQHandler+0xa2>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b02:	6821      	ldr	r1, [r4, #0]
 8003b04:	4a85      	ldr	r2, [pc, #532]	; (8003d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x278>)
 8003b06:	4b86      	ldr	r3, [pc, #536]	; (8003d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x27c>)
 8003b08:	4291      	cmp	r1, r2
 8003b0a:	bf18      	it	ne
 8003b0c:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b16:	605a      	str	r2, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b18:	6822      	ldr	r2, [r4, #0]
 8003b1a:	6853      	ldr	r3, [r2, #4]
 8003b1c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b20:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003b22:	2300      	movs	r3, #0
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	6823      	ldr	r3, [r4, #0]
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	9200      	str	r2, [sp, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	9b00      	ldr	r3, [sp, #0]
      hi2s->State = HAL_I2S_STATE_READY;
 8003b32:	2301      	movs	r3, #1
 8003b34:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b38:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003b3a:	f043 0302 	orr.w	r3, r3, #2
 8003b3e:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8003b40:	4620      	mov	r0, r4
 8003b42:	f7fc fdfb 	bl	800073c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b46:	9b05      	ldr	r3, [sp, #20]
 8003b48:	f013 0f08 	tst.w	r3, #8
 8003b4c:	d023      	beq.n	8003b96 <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
 8003b4e:	9b03      	ldr	r3, [sp, #12]
 8003b50:	f013 0f20 	tst.w	r3, #32
 8003b54:	d01f      	beq.n	8003b96 <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b56:	6822      	ldr	r2, [r4, #0]
 8003b58:	6853      	ldr	r3, [r2, #4]
 8003b5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b5e:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b60:	6821      	ldr	r1, [r4, #0]
 8003b62:	4a6e      	ldr	r2, [pc, #440]	; (8003d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x278>)
 8003b64:	4b6e      	ldr	r3, [pc, #440]	; (8003d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x27c>)
 8003b66:	4291      	cmp	r1, r2
 8003b68:	bf18      	it	ne
 8003b6a:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b74:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003b76:	2300      	movs	r3, #0
 8003b78:	9301      	str	r3, [sp, #4]
 8003b7a:	6823      	ldr	r3, [r4, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	9301      	str	r3, [sp, #4]
 8003b80:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8003b82:	2301      	movs	r3, #1
 8003b84:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b88:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003b8a:	f043 0304 	orr.w	r3, r3, #4
 8003b8e:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8003b90:	4620      	mov	r0, r4
 8003b92:	f7fc fdd3 	bl	800073c <HAL_I2S_ErrorCallback>
}
 8003b96:	b006      	add	sp, #24
 8003b98:	bd10      	pop	{r4, pc}
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003b9a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003b9c:	1c99      	adds	r1, r3, #2
 8003b9e:	6241      	str	r1, [r0, #36]	; 0x24
 8003ba0:	881b      	ldrh	r3, [r3, #0]
 8003ba2:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8003ba4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003bac:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d196      	bne.n	8003ae2 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bb4:	6802      	ldr	r2, [r0, #0]
 8003bb6:	6853      	ldr	r3, [r2, #4]
 8003bb8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bbc:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8003bbe:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d18d      	bne.n	8003ae2 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bcc:	f7ff ff69 	bl	8003aa2 <HAL_I2SEx_TxRxCpltCallback>
 8003bd0:	e787      	b.n	8003ae2 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003bd2:	6821      	ldr	r1, [r4, #0]
 8003bd4:	4a51      	ldr	r2, [pc, #324]	; (8003d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x278>)
 8003bd6:	4b52      	ldr	r3, [pc, #328]	; (8003d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x27c>)
 8003bd8:	4291      	cmp	r1, r2
 8003bda:	bf18      	it	ne
 8003bdc:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003be4:	1c99      	adds	r1, r3, #2
 8003be6:	62e1      	str	r1, [r4, #44]	; 0x2c
 8003be8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003bea:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	8663      	strh	r3, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003bf2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f47f af7b 	bne.w	8003af2 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bfc:	6821      	ldr	r1, [r4, #0]
 8003bfe:	4a47      	ldr	r2, [pc, #284]	; (8003d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x278>)
 8003c00:	4b47      	ldr	r3, [pc, #284]	; (8003d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x27c>)
 8003c02:	4291      	cmp	r1, r2
 8003c04:	bf18      	it	ne
 8003c06:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c10:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c12:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f47f af6b 	bne.w	8003af2 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c22:	4620      	mov	r0, r4
 8003c24:	f7ff ff3d 	bl	8003aa2 <HAL_I2SEx_TxRxCpltCallback>
 8003c28:	e763      	b.n	8003af2 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003c2a:	9a04      	ldr	r2, [sp, #16]
 8003c2c:	f012 0f02 	tst.w	r2, #2
 8003c30:	d003      	beq.n	8003c3a <HAL_I2SEx_FullDuplex_IRQHandler+0x196>
 8003c32:	9a02      	ldr	r2, [sp, #8]
 8003c34:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003c38:	d14e      	bne.n	8003cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003c3a:	9b05      	ldr	r3, [sp, #20]
 8003c3c:	f013 0f01 	tst.w	r3, #1
 8003c40:	d003      	beq.n	8003c4a <HAL_I2SEx_FullDuplex_IRQHandler+0x1a6>
 8003c42:	9b03      	ldr	r3, [sp, #12]
 8003c44:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003c48:	d16c      	bne.n	8003d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x280>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c4a:	9b05      	ldr	r3, [sp, #20]
 8003c4c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003c50:	d01d      	beq.n	8003c8e <HAL_I2SEx_FullDuplex_IRQHandler+0x1ea>
 8003c52:	9b03      	ldr	r3, [sp, #12]
 8003c54:	f013 0f20 	tst.w	r3, #32
 8003c58:	d019      	beq.n	8003c8e <HAL_I2SEx_FullDuplex_IRQHandler+0x1ea>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c5a:	6822      	ldr	r2, [r4, #0]
 8003c5c:	6853      	ldr	r3, [r2, #4]
 8003c5e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003c62:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c64:	6821      	ldr	r1, [r4, #0]
 8003c66:	4a2d      	ldr	r2, [pc, #180]	; (8003d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x278>)
 8003c68:	4b2d      	ldr	r3, [pc, #180]	; (8003d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x27c>)
 8003c6a:	4291      	cmp	r1, r2
 8003c6c:	bf18      	it	ne
 8003c6e:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c78:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c80:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003c82:	f043 0302 	orr.w	r3, r3, #2
 8003c86:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8003c88:	4620      	mov	r0, r4
 8003c8a:	f7fc fd57 	bl	800073c <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003c8e:	9b04      	ldr	r3, [sp, #16]
 8003c90:	f013 0f08 	tst.w	r3, #8
 8003c94:	f43f af7f 	beq.w	8003b96 <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
 8003c98:	9b02      	ldr	r3, [sp, #8]
 8003c9a:	f013 0f20 	tst.w	r3, #32
 8003c9e:	f43f af7a 	beq.w	8003b96 <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ca2:	6821      	ldr	r1, [r4, #0]
 8003ca4:	4a1d      	ldr	r2, [pc, #116]	; (8003d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x278>)
 8003ca6:	4b1e      	ldr	r3, [pc, #120]	; (8003d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x27c>)
 8003ca8:	4291      	cmp	r1, r2
 8003caa:	bf18      	it	ne
 8003cac:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cb6:	605a      	str	r2, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cb8:	6822      	ldr	r2, [r4, #0]
 8003cba:	6853      	ldr	r3, [r2, #4]
 8003cbc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003cc0:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003cc8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003cca:	f043 0304 	orr.w	r3, r3, #4
 8003cce:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	f7fc fd33 	bl	800073c <HAL_I2S_ErrorCallback>
}
 8003cd6:	e75e      	b.n	8003b96 <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003cd8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003cda:	1c91      	adds	r1, r2, #2
 8003cdc:	6241      	str	r1, [r0, #36]	; 0x24
 8003cde:	8812      	ldrh	r2, [r2, #0]
 8003ce0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ce2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8003cea:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1a3      	bne.n	8003c3a <HAL_I2SEx_FullDuplex_IRQHandler+0x196>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cf2:	6801      	ldr	r1, [r0, #0]
 8003cf4:	4a09      	ldr	r2, [pc, #36]	; (8003d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x278>)
 8003cf6:	4b0a      	ldr	r3, [pc, #40]	; (8003d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x27c>)
 8003cf8:	4291      	cmp	r1, r2
 8003cfa:	bf18      	it	ne
 8003cfc:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d06:	605a      	str	r2, [r3, #4]
    if (hi2s->RxXferCount == 0U)
 8003d08:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d194      	bne.n	8003c3a <HAL_I2SEx_FullDuplex_IRQHandler+0x196>
      hi2s->State = HAL_I2S_STATE_READY;
 8003d10:	2301      	movs	r3, #1
 8003d12:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d16:	f7ff fec4 	bl	8003aa2 <HAL_I2SEx_TxRxCpltCallback>
 8003d1a:	e78e      	b.n	8003c3a <HAL_I2SEx_FullDuplex_IRQHandler+0x196>
 8003d1c:	40003800 	.word	0x40003800
 8003d20:	40003400 	.word	0x40003400
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003d24:	6823      	ldr	r3, [r4, #0]
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003d2a:	1c99      	adds	r1, r3, #2
 8003d2c:	62e1      	str	r1, [r4, #44]	; 0x2c
 8003d2e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003d30:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	8663      	strh	r3, [r4, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8003d38:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d184      	bne.n	8003c4a <HAL_I2SEx_FullDuplex_IRQHandler+0x1a6>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d40:	6822      	ldr	r2, [r4, #0]
 8003d42:	6853      	ldr	r3, [r2, #4]
 8003d44:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003d48:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 8003d4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f47f af7b 	bne.w	8003c4a <HAL_I2SEx_FullDuplex_IRQHandler+0x1a6>
      hi2s->State = HAL_I2S_STATE_READY;
 8003d54:	2301      	movs	r3, #1
 8003d56:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d5a:	4620      	mov	r0, r4
 8003d5c:	f7ff fea1 	bl	8003aa2 <HAL_I2SEx_TxRxCpltCallback>
 8003d60:	e773      	b.n	8003c4a <HAL_I2SEx_FullDuplex_IRQHandler+0x1a6>
 8003d62:	bf00      	nop

08003d64 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d64:	2800      	cmp	r0, #0
 8003d66:	f000 81e1 	beq.w	800412c <HAL_RCC_OscConfig+0x3c8>
{
 8003d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d72:	6803      	ldr	r3, [r0, #0]
 8003d74:	f013 0f01 	tst.w	r3, #1
 8003d78:	d03b      	beq.n	8003df2 <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d7a:	4b9f      	ldr	r3, [pc, #636]	; (8003ff8 <HAL_RCC_OscConfig+0x294>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 030c 	and.w	r3, r3, #12
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	d02c      	beq.n	8003de0 <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d86:	4b9c      	ldr	r3, [pc, #624]	; (8003ff8 <HAL_RCC_OscConfig+0x294>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	d021      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d92:	6863      	ldr	r3, [r4, #4]
 8003d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d98:	d04f      	beq.n	8003e3a <HAL_RCC_OscConfig+0xd6>
 8003d9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d9e:	d052      	beq.n	8003e46 <HAL_RCC_OscConfig+0xe2>
 8003da0:	4b95      	ldr	r3, [pc, #596]	; (8003ff8 <HAL_RCC_OscConfig+0x294>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003db0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003db2:	6863      	ldr	r3, [r4, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d050      	beq.n	8003e5a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db8:	f7fd fcc6 	bl	8001748 <HAL_GetTick>
 8003dbc:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dbe:	4e8e      	ldr	r6, [pc, #568]	; (8003ff8 <HAL_RCC_OscConfig+0x294>)
 8003dc0:	6833      	ldr	r3, [r6, #0]
 8003dc2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003dc6:	d114      	bne.n	8003df2 <HAL_RCC_OscConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dc8:	f7fd fcbe 	bl	8001748 <HAL_GetTick>
 8003dcc:	1b40      	subs	r0, r0, r5
 8003dce:	2864      	cmp	r0, #100	; 0x64
 8003dd0:	d9f6      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 8003dd2:	2003      	movs	r0, #3
 8003dd4:	e1b1      	b.n	800413a <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dd6:	4b88      	ldr	r3, [pc, #544]	; (8003ff8 <HAL_RCC_OscConfig+0x294>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003dde:	d0d8      	beq.n	8003d92 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de0:	4b85      	ldr	r3, [pc, #532]	; (8003ff8 <HAL_RCC_OscConfig+0x294>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003de8:	d003      	beq.n	8003df2 <HAL_RCC_OscConfig+0x8e>
 8003dea:	6863      	ldr	r3, [r4, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 819f 	beq.w	8004130 <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003df2:	6823      	ldr	r3, [r4, #0]
 8003df4:	f013 0f02 	tst.w	r3, #2
 8003df8:	d054      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dfa:	4b7f      	ldr	r3, [pc, #508]	; (8003ff8 <HAL_RCC_OscConfig+0x294>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f013 0f0c 	tst.w	r3, #12
 8003e02:	d03e      	beq.n	8003e82 <HAL_RCC_OscConfig+0x11e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e04:	4b7c      	ldr	r3, [pc, #496]	; (8003ff8 <HAL_RCC_OscConfig+0x294>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d033      	beq.n	8003e78 <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e10:	68e3      	ldr	r3, [r4, #12]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d068      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x184>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e16:	4b79      	ldr	r3, [pc, #484]	; (8003ffc <HAL_RCC_OscConfig+0x298>)
 8003e18:	2201      	movs	r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1c:	f7fd fc94 	bl	8001748 <HAL_GetTick>
 8003e20:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e22:	4e75      	ldr	r6, [pc, #468]	; (8003ff8 <HAL_RCC_OscConfig+0x294>)
 8003e24:	6833      	ldr	r3, [r6, #0]
 8003e26:	f013 0f02 	tst.w	r3, #2
 8003e2a:	d154      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x172>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e2c:	f7fd fc8c 	bl	8001748 <HAL_GetTick>
 8003e30:	1b40      	subs	r0, r0, r5
 8003e32:	2802      	cmp	r0, #2
 8003e34:	d9f6      	bls.n	8003e24 <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 8003e36:	2003      	movs	r0, #3
 8003e38:	e17f      	b.n	800413a <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e3a:	4a6f      	ldr	r2, [pc, #444]	; (8003ff8 <HAL_RCC_OscConfig+0x294>)
 8003e3c:	6813      	ldr	r3, [r2, #0]
 8003e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e42:	6013      	str	r3, [r2, #0]
 8003e44:	e7b5      	b.n	8003db2 <HAL_RCC_OscConfig+0x4e>
 8003e46:	4b6c      	ldr	r3, [pc, #432]	; (8003ff8 <HAL_RCC_OscConfig+0x294>)
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	e7ab      	b.n	8003db2 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 8003e5a:	f7fd fc75 	bl	8001748 <HAL_GetTick>
 8003e5e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e60:	4e65      	ldr	r6, [pc, #404]	; (8003ff8 <HAL_RCC_OscConfig+0x294>)
 8003e62:	6833      	ldr	r3, [r6, #0]
 8003e64:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003e68:	d0c3      	beq.n	8003df2 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e6a:	f7fd fc6d 	bl	8001748 <HAL_GetTick>
 8003e6e:	1b40      	subs	r0, r0, r5
 8003e70:	2864      	cmp	r0, #100	; 0x64
 8003e72:	d9f6      	bls.n	8003e62 <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 8003e74:	2003      	movs	r0, #3
 8003e76:	e160      	b.n	800413a <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e78:	4b5f      	ldr	r3, [pc, #380]	; (8003ff8 <HAL_RCC_OscConfig+0x294>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003e80:	d1c6      	bne.n	8003e10 <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e82:	4b5d      	ldr	r3, [pc, #372]	; (8003ff8 <HAL_RCC_OscConfig+0x294>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f013 0f02 	tst.w	r3, #2
 8003e8a:	d003      	beq.n	8003e94 <HAL_RCC_OscConfig+0x130>
 8003e8c:	68e3      	ldr	r3, [r4, #12]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	f040 8150 	bne.w	8004134 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e94:	4a58      	ldr	r2, [pc, #352]	; (8003ff8 <HAL_RCC_OscConfig+0x294>)
 8003e96:	6813      	ldr	r3, [r2, #0]
 8003e98:	6921      	ldr	r1, [r4, #16]
 8003e9a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003e9e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003ea2:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	f013 0f08 	tst.w	r3, #8
 8003eaa:	d042      	beq.n	8003f32 <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003eac:	6963      	ldr	r3, [r4, #20]
 8003eae:	b36b      	cbz	r3, 8003f0c <HAL_RCC_OscConfig+0x1a8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eb0:	4b52      	ldr	r3, [pc, #328]	; (8003ffc <HAL_RCC_OscConfig+0x298>)
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb8:	f7fd fc46 	bl	8001748 <HAL_GetTick>
 8003ebc:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ebe:	4e4e      	ldr	r6, [pc, #312]	; (8003ff8 <HAL_RCC_OscConfig+0x294>)
 8003ec0:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8003ec2:	f013 0f02 	tst.w	r3, #2
 8003ec6:	d134      	bne.n	8003f32 <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ec8:	f7fd fc3e 	bl	8001748 <HAL_GetTick>
 8003ecc:	1b40      	subs	r0, r0, r5
 8003ece:	2802      	cmp	r0, #2
 8003ed0:	d9f6      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x15c>
        {
          return HAL_TIMEOUT;
 8003ed2:	2003      	movs	r0, #3
 8003ed4:	e131      	b.n	800413a <HAL_RCC_OscConfig+0x3d6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed6:	4a48      	ldr	r2, [pc, #288]	; (8003ff8 <HAL_RCC_OscConfig+0x294>)
 8003ed8:	6813      	ldr	r3, [r2, #0]
 8003eda:	6921      	ldr	r1, [r4, #16]
 8003edc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003ee0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	e7dd      	b.n	8003ea4 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8003ee8:	4b44      	ldr	r3, [pc, #272]	; (8003ffc <HAL_RCC_OscConfig+0x298>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003eee:	f7fd fc2b 	bl	8001748 <HAL_GetTick>
 8003ef2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ef4:	4e40      	ldr	r6, [pc, #256]	; (8003ff8 <HAL_RCC_OscConfig+0x294>)
 8003ef6:	6833      	ldr	r3, [r6, #0]
 8003ef8:	f013 0f02 	tst.w	r3, #2
 8003efc:	d0d2      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003efe:	f7fd fc23 	bl	8001748 <HAL_GetTick>
 8003f02:	1b40      	subs	r0, r0, r5
 8003f04:	2802      	cmp	r0, #2
 8003f06:	d9f6      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 8003f08:	2003      	movs	r0, #3
 8003f0a:	e116      	b.n	800413a <HAL_RCC_OscConfig+0x3d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f0c:	4b3b      	ldr	r3, [pc, #236]	; (8003ffc <HAL_RCC_OscConfig+0x298>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f14:	f7fd fc18 	bl	8001748 <HAL_GetTick>
 8003f18:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f1a:	4e37      	ldr	r6, [pc, #220]	; (8003ff8 <HAL_RCC_OscConfig+0x294>)
 8003f1c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8003f1e:	f013 0f02 	tst.w	r3, #2
 8003f22:	d006      	beq.n	8003f32 <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f24:	f7fd fc10 	bl	8001748 <HAL_GetTick>
 8003f28:	1b40      	subs	r0, r0, r5
 8003f2a:	2802      	cmp	r0, #2
 8003f2c:	d9f6      	bls.n	8003f1c <HAL_RCC_OscConfig+0x1b8>
        {
          return HAL_TIMEOUT;
 8003f2e:	2003      	movs	r0, #3
 8003f30:	e103      	b.n	800413a <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f32:	6823      	ldr	r3, [r4, #0]
 8003f34:	f013 0f04 	tst.w	r3, #4
 8003f38:	d076      	beq.n	8004028 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f3a:	4b2f      	ldr	r3, [pc, #188]	; (8003ff8 <HAL_RCC_OscConfig+0x294>)
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003f42:	d133      	bne.n	8003fac <HAL_RCC_OscConfig+0x248>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f44:	2300      	movs	r3, #0
 8003f46:	9301      	str	r3, [sp, #4]
 8003f48:	4b2b      	ldr	r3, [pc, #172]	; (8003ff8 <HAL_RCC_OscConfig+0x294>)
 8003f4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f4c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f50:	641a      	str	r2, [r3, #64]	; 0x40
 8003f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f58:	9301      	str	r3, [sp, #4]
 8003f5a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003f5c:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f5e:	4b28      	ldr	r3, [pc, #160]	; (8004000 <HAL_RCC_OscConfig+0x29c>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003f66:	d023      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f68:	68a3      	ldr	r3, [r4, #8]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d034      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x274>
 8003f6e:	2b05      	cmp	r3, #5
 8003f70:	d038      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x280>
 8003f72:	4b21      	ldr	r3, [pc, #132]	; (8003ff8 <HAL_RCC_OscConfig+0x294>)
 8003f74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f76:	f022 0201 	bic.w	r2, r2, #1
 8003f7a:	671a      	str	r2, [r3, #112]	; 0x70
 8003f7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f7e:	f022 0204 	bic.w	r2, r2, #4
 8003f82:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f84:	68a3      	ldr	r3, [r4, #8]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d03c      	beq.n	8004004 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8a:	f7fd fbdd 	bl	8001748 <HAL_GetTick>
 8003f8e:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f90:	4f19      	ldr	r7, [pc, #100]	; (8003ff8 <HAL_RCC_OscConfig+0x294>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f92:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f98:	f013 0f02 	tst.w	r3, #2
 8003f9c:	d143      	bne.n	8004026 <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f9e:	f7fd fbd3 	bl	8001748 <HAL_GetTick>
 8003fa2:	1b80      	subs	r0, r0, r6
 8003fa4:	4540      	cmp	r0, r8
 8003fa6:	d9f6      	bls.n	8003f96 <HAL_RCC_OscConfig+0x232>
        {
          return HAL_TIMEOUT;
 8003fa8:	2003      	movs	r0, #3
 8003faa:	e0c6      	b.n	800413a <HAL_RCC_OscConfig+0x3d6>
    FlagStatus       pwrclkchanged = RESET;
 8003fac:	2500      	movs	r5, #0
 8003fae:	e7d6      	b.n	8003f5e <HAL_RCC_OscConfig+0x1fa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fb0:	4a13      	ldr	r2, [pc, #76]	; (8004000 <HAL_RCC_OscConfig+0x29c>)
 8003fb2:	6813      	ldr	r3, [r2, #0]
 8003fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003fba:	f7fd fbc5 	bl	8001748 <HAL_GetTick>
 8003fbe:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc0:	4f0f      	ldr	r7, [pc, #60]	; (8004000 <HAL_RCC_OscConfig+0x29c>)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003fc8:	d1ce      	bne.n	8003f68 <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fca:	f7fd fbbd 	bl	8001748 <HAL_GetTick>
 8003fce:	1b80      	subs	r0, r0, r6
 8003fd0:	2802      	cmp	r0, #2
 8003fd2:	d9f6      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x25e>
          return HAL_TIMEOUT;
 8003fd4:	2003      	movs	r0, #3
 8003fd6:	e0b0      	b.n	800413a <HAL_RCC_OscConfig+0x3d6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fd8:	4a07      	ldr	r2, [pc, #28]	; (8003ff8 <HAL_RCC_OscConfig+0x294>)
 8003fda:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003fdc:	f043 0301 	orr.w	r3, r3, #1
 8003fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8003fe2:	e7cf      	b.n	8003f84 <HAL_RCC_OscConfig+0x220>
 8003fe4:	4b04      	ldr	r3, [pc, #16]	; (8003ff8 <HAL_RCC_OscConfig+0x294>)
 8003fe6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fe8:	f042 0204 	orr.w	r2, r2, #4
 8003fec:	671a      	str	r2, [r3, #112]	; 0x70
 8003fee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ff0:	f042 0201 	orr.w	r2, r2, #1
 8003ff4:	671a      	str	r2, [r3, #112]	; 0x70
 8003ff6:	e7c5      	b.n	8003f84 <HAL_RCC_OscConfig+0x220>
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	42470000 	.word	0x42470000
 8004000:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004004:	f7fd fba0 	bl	8001748 <HAL_GetTick>
 8004008:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800400a:	4f52      	ldr	r7, [pc, #328]	; (8004154 <HAL_RCC_OscConfig+0x3f0>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800400c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004010:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004012:	f013 0f02 	tst.w	r3, #2
 8004016:	d006      	beq.n	8004026 <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004018:	f7fd fb96 	bl	8001748 <HAL_GetTick>
 800401c:	1b80      	subs	r0, r0, r6
 800401e:	4540      	cmp	r0, r8
 8004020:	d9f6      	bls.n	8004010 <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 8004022:	2003      	movs	r0, #3
 8004024:	e089      	b.n	800413a <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004026:	b9ed      	cbnz	r5, 8004064 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004028:	69a3      	ldr	r3, [r4, #24]
 800402a:	2b00      	cmp	r3, #0
 800402c:	f000 8084 	beq.w	8004138 <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004030:	4a48      	ldr	r2, [pc, #288]	; (8004154 <HAL_RCC_OscConfig+0x3f0>)
 8004032:	6892      	ldr	r2, [r2, #8]
 8004034:	f002 020c 	and.w	r2, r2, #12
 8004038:	2a08      	cmp	r2, #8
 800403a:	d051      	beq.n	80040e0 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800403c:	2b02      	cmp	r3, #2
 800403e:	d017      	beq.n	8004070 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004040:	4b45      	ldr	r3, [pc, #276]	; (8004158 <HAL_RCC_OscConfig+0x3f4>)
 8004042:	2200      	movs	r2, #0
 8004044:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004046:	f7fd fb7f 	bl	8001748 <HAL_GetTick>
 800404a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800404c:	4d41      	ldr	r5, [pc, #260]	; (8004154 <HAL_RCC_OscConfig+0x3f0>)
 800404e:	682b      	ldr	r3, [r5, #0]
 8004050:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004054:	d042      	beq.n	80040dc <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004056:	f7fd fb77 	bl	8001748 <HAL_GetTick>
 800405a:	1b00      	subs	r0, r0, r4
 800405c:	2802      	cmp	r0, #2
 800405e:	d9f6      	bls.n	800404e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8004060:	2003      	movs	r0, #3
 8004062:	e06a      	b.n	800413a <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004064:	4a3b      	ldr	r2, [pc, #236]	; (8004154 <HAL_RCC_OscConfig+0x3f0>)
 8004066:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004068:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800406c:	6413      	str	r3, [r2, #64]	; 0x40
 800406e:	e7db      	b.n	8004028 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8004070:	4b39      	ldr	r3, [pc, #228]	; (8004158 <HAL_RCC_OscConfig+0x3f4>)
 8004072:	2200      	movs	r2, #0
 8004074:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8004076:	f7fd fb67 	bl	8001748 <HAL_GetTick>
 800407a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800407c:	4e35      	ldr	r6, [pc, #212]	; (8004154 <HAL_RCC_OscConfig+0x3f0>)
 800407e:	6833      	ldr	r3, [r6, #0]
 8004080:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004084:	d006      	beq.n	8004094 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004086:	f7fd fb5f 	bl	8001748 <HAL_GetTick>
 800408a:	1b40      	subs	r0, r0, r5
 800408c:	2802      	cmp	r0, #2
 800408e:	d9f6      	bls.n	800407e <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 8004090:	2003      	movs	r0, #3
 8004092:	e052      	b.n	800413a <HAL_RCC_OscConfig+0x3d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004094:	69e3      	ldr	r3, [r4, #28]
 8004096:	6a22      	ldr	r2, [r4, #32]
 8004098:	4313      	orrs	r3, r2
 800409a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800409c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80040a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80040a2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80040a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80040a8:	0852      	lsrs	r2, r2, #1
 80040aa:	3a01      	subs	r2, #1
 80040ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80040b0:	4a28      	ldr	r2, [pc, #160]	; (8004154 <HAL_RCC_OscConfig+0x3f0>)
 80040b2:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80040b4:	4b28      	ldr	r3, [pc, #160]	; (8004158 <HAL_RCC_OscConfig+0x3f4>)
 80040b6:	2201      	movs	r2, #1
 80040b8:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80040ba:	f7fd fb45 	bl	8001748 <HAL_GetTick>
 80040be:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c0:	4d24      	ldr	r5, [pc, #144]	; (8004154 <HAL_RCC_OscConfig+0x3f0>)
 80040c2:	682b      	ldr	r3, [r5, #0]
 80040c4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80040c8:	d106      	bne.n	80040d8 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ca:	f7fd fb3d 	bl	8001748 <HAL_GetTick>
 80040ce:	1b00      	subs	r0, r0, r4
 80040d0:	2802      	cmp	r0, #2
 80040d2:	d9f6      	bls.n	80040c2 <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 80040d4:	2003      	movs	r0, #3
 80040d6:	e030      	b.n	800413a <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80040d8:	2000      	movs	r0, #0
 80040da:	e02e      	b.n	800413a <HAL_RCC_OscConfig+0x3d6>
 80040dc:	2000      	movs	r0, #0
 80040de:	e02c      	b.n	800413a <HAL_RCC_OscConfig+0x3d6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d02d      	beq.n	8004140 <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 80040e4:	4b1b      	ldr	r3, [pc, #108]	; (8004154 <HAL_RCC_OscConfig+0x3f0>)
 80040e6:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e8:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040ec:	69e2      	ldr	r2, [r4, #28]
 80040ee:	4291      	cmp	r1, r2
 80040f0:	d128      	bne.n	8004144 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f6:	6a21      	ldr	r1, [r4, #32]
 80040f8:	428a      	cmp	r2, r1
 80040fa:	d125      	bne.n	8004148 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040fe:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8004102:	401a      	ands	r2, r3
 8004104:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8004108:	d120      	bne.n	800414c <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800410a:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800410e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004110:	0852      	lsrs	r2, r2, #1
 8004112:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004114:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8004118:	d11a      	bne.n	8004150 <HAL_RCC_OscConfig+0x3ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800411a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800411c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004120:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
        return HAL_ERROR;
 8004124:	bf14      	ite	ne
 8004126:	2001      	movne	r0, #1
 8004128:	2000      	moveq	r0, #0
 800412a:	e006      	b.n	800413a <HAL_RCC_OscConfig+0x3d6>
    return HAL_ERROR;
 800412c:	2001      	movs	r0, #1
}
 800412e:	4770      	bx	lr
        return HAL_ERROR;
 8004130:	2001      	movs	r0, #1
 8004132:	e002      	b.n	800413a <HAL_RCC_OscConfig+0x3d6>
        return HAL_ERROR;
 8004134:	2001      	movs	r0, #1
 8004136:	e000      	b.n	800413a <HAL_RCC_OscConfig+0x3d6>
  return HAL_OK;
 8004138:	2000      	movs	r0, #0
}
 800413a:	b002      	add	sp, #8
 800413c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8004140:	2001      	movs	r0, #1
 8004142:	e7fa      	b.n	800413a <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
 8004144:	2001      	movs	r0, #1
 8004146:	e7f8      	b.n	800413a <HAL_RCC_OscConfig+0x3d6>
 8004148:	2001      	movs	r0, #1
 800414a:	e7f6      	b.n	800413a <HAL_RCC_OscConfig+0x3d6>
 800414c:	2001      	movs	r0, #1
 800414e:	e7f4      	b.n	800413a <HAL_RCC_OscConfig+0x3d6>
 8004150:	2001      	movs	r0, #1
 8004152:	e7f2      	b.n	800413a <HAL_RCC_OscConfig+0x3d6>
 8004154:	40023800 	.word	0x40023800
 8004158:	42470000 	.word	0x42470000

0800415c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800415c:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800415e:	4b31      	ldr	r3, [pc, #196]	; (8004224 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 030c 	and.w	r3, r3, #12
 8004166:	2b04      	cmp	r3, #4
 8004168:	d057      	beq.n	800421a <HAL_RCC_GetSysClockFreq+0xbe>
 800416a:	2b08      	cmp	r3, #8
 800416c:	d157      	bne.n	800421e <HAL_RCC_GetSysClockFreq+0xc2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800416e:	4b2d      	ldr	r3, [pc, #180]	; (8004224 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800417c:	d02a      	beq.n	80041d4 <HAL_RCC_GetSysClockFreq+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800417e:	4b29      	ldr	r3, [pc, #164]	; (8004224 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004180:	6859      	ldr	r1, [r3, #4]
 8004182:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8004186:	ea4f 114c 	mov.w	r1, ip, lsl #5
 800418a:	ebb1 000c 	subs.w	r0, r1, ip
 800418e:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8004192:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8004196:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800419a:	0181      	lsls	r1, r0, #6
 800419c:	1a09      	subs	r1, r1, r0
 800419e:	eb63 030e 	sbc.w	r3, r3, lr
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041a8:	00c9      	lsls	r1, r1, #3
 80041aa:	eb11 0c0c 	adds.w	ip, r1, ip
 80041ae:	f143 0300 	adc.w	r3, r3, #0
 80041b2:	0259      	lsls	r1, r3, #9
 80041b4:	2300      	movs	r3, #0
 80041b6:	ea4f 204c 	mov.w	r0, ip, lsl #9
 80041ba:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 80041be:	f7fc f803 	bl	80001c8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041c2:	4b18      	ldr	r3, [pc, #96]	; (8004224 <HAL_RCC_GetSysClockFreq+0xc8>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80041ca:	3301      	adds	r3, #1
 80041cc:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80041ce:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80041d2:	e025      	b.n	8004220 <HAL_RCC_GetSysClockFreq+0xc4>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041d4:	4b13      	ldr	r3, [pc, #76]	; (8004224 <HAL_RCC_GetSysClockFreq+0xc8>)
 80041d6:	6859      	ldr	r1, [r3, #4]
 80041d8:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80041dc:	ea4f 114c 	mov.w	r1, ip, lsl #5
 80041e0:	ebb1 000c 	subs.w	r0, r1, ip
 80041e4:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80041e8:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80041ec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80041f0:	0181      	lsls	r1, r0, #6
 80041f2:	1a09      	subs	r1, r1, r0
 80041f4:	eb63 030e 	sbc.w	r3, r3, lr
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041fe:	00c9      	lsls	r1, r1, #3
 8004200:	eb11 0c0c 	adds.w	ip, r1, ip
 8004204:	f143 0300 	adc.w	r3, r3, #0
 8004208:	0299      	lsls	r1, r3, #10
 800420a:	2300      	movs	r3, #0
 800420c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8004210:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8004214:	f7fb ffd8 	bl	80001c8 <__aeabi_uldivmod>
 8004218:	e7d3      	b.n	80041c2 <HAL_RCC_GetSysClockFreq+0x66>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800421a:	4803      	ldr	r0, [pc, #12]	; (8004228 <HAL_RCC_GetSysClockFreq+0xcc>)
 800421c:	e000      	b.n	8004220 <HAL_RCC_GetSysClockFreq+0xc4>
      sysclockfreq = HSI_VALUE;
 800421e:	4803      	ldr	r0, [pc, #12]	; (800422c <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004220:	bd08      	pop	{r3, pc}
 8004222:	bf00      	nop
 8004224:	40023800 	.word	0x40023800
 8004228:	007a1200 	.word	0x007a1200
 800422c:	00f42400 	.word	0x00f42400

08004230 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004230:	2800      	cmp	r0, #0
 8004232:	f000 809d 	beq.w	8004370 <HAL_RCC_ClockConfig+0x140>
{
 8004236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800423a:	460d      	mov	r5, r1
 800423c:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800423e:	4b50      	ldr	r3, [pc, #320]	; (8004380 <HAL_RCC_ClockConfig+0x150>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0307 	and.w	r3, r3, #7
 8004246:	428b      	cmp	r3, r1
 8004248:	d208      	bcs.n	800425c <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424a:	b2cb      	uxtb	r3, r1
 800424c:	4a4c      	ldr	r2, [pc, #304]	; (8004380 <HAL_RCC_ClockConfig+0x150>)
 800424e:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004250:	6813      	ldr	r3, [r2, #0]
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	428b      	cmp	r3, r1
 8004258:	f040 808c 	bne.w	8004374 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800425c:	6823      	ldr	r3, [r4, #0]
 800425e:	f013 0f02 	tst.w	r3, #2
 8004262:	d017      	beq.n	8004294 <HAL_RCC_ClockConfig+0x64>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004264:	f013 0f04 	tst.w	r3, #4
 8004268:	d004      	beq.n	8004274 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800426a:	4a46      	ldr	r2, [pc, #280]	; (8004384 <HAL_RCC_ClockConfig+0x154>)
 800426c:	6893      	ldr	r3, [r2, #8]
 800426e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004272:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004274:	6823      	ldr	r3, [r4, #0]
 8004276:	f013 0f08 	tst.w	r3, #8
 800427a:	d004      	beq.n	8004286 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800427c:	4a41      	ldr	r2, [pc, #260]	; (8004384 <HAL_RCC_ClockConfig+0x154>)
 800427e:	6893      	ldr	r3, [r2, #8]
 8004280:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004284:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004286:	4a3f      	ldr	r2, [pc, #252]	; (8004384 <HAL_RCC_ClockConfig+0x154>)
 8004288:	6893      	ldr	r3, [r2, #8]
 800428a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800428e:	68a1      	ldr	r1, [r4, #8]
 8004290:	430b      	orrs	r3, r1
 8004292:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004294:	6823      	ldr	r3, [r4, #0]
 8004296:	f013 0f01 	tst.w	r3, #1
 800429a:	d032      	beq.n	8004302 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800429c:	6862      	ldr	r2, [r4, #4]
 800429e:	2a01      	cmp	r2, #1
 80042a0:	d021      	beq.n	80042e6 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042a2:	1e93      	subs	r3, r2, #2
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d925      	bls.n	80042f4 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a8:	4b36      	ldr	r3, [pc, #216]	; (8004384 <HAL_RCC_ClockConfig+0x154>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f013 0f02 	tst.w	r3, #2
 80042b0:	d062      	beq.n	8004378 <HAL_RCC_ClockConfig+0x148>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042b2:	4934      	ldr	r1, [pc, #208]	; (8004384 <HAL_RCC_ClockConfig+0x154>)
 80042b4:	688b      	ldr	r3, [r1, #8]
 80042b6:	f023 0303 	bic.w	r3, r3, #3
 80042ba:	4313      	orrs	r3, r2
 80042bc:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80042be:	f7fd fa43 	bl	8001748 <HAL_GetTick>
 80042c2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c4:	4f2f      	ldr	r7, [pc, #188]	; (8004384 <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042c6:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	f003 030c 	and.w	r3, r3, #12
 80042d0:	6862      	ldr	r2, [r4, #4]
 80042d2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80042d6:	d014      	beq.n	8004302 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042d8:	f7fd fa36 	bl	8001748 <HAL_GetTick>
 80042dc:	1b80      	subs	r0, r0, r6
 80042de:	4540      	cmp	r0, r8
 80042e0:	d9f3      	bls.n	80042ca <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 80042e2:	2003      	movs	r0, #3
 80042e4:	e042      	b.n	800436c <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042e6:	4b27      	ldr	r3, [pc, #156]	; (8004384 <HAL_RCC_ClockConfig+0x154>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80042ee:	d1e0      	bne.n	80042b2 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80042f0:	2001      	movs	r0, #1
 80042f2:	e03b      	b.n	800436c <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f4:	4b23      	ldr	r3, [pc, #140]	; (8004384 <HAL_RCC_ClockConfig+0x154>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80042fc:	d1d9      	bne.n	80042b2 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80042fe:	2001      	movs	r0, #1
 8004300:	e034      	b.n	800436c <HAL_RCC_ClockConfig+0x13c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004302:	4b1f      	ldr	r3, [pc, #124]	; (8004380 <HAL_RCC_ClockConfig+0x150>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	42ab      	cmp	r3, r5
 800430c:	d907      	bls.n	800431e <HAL_RCC_ClockConfig+0xee>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800430e:	b2ea      	uxtb	r2, r5
 8004310:	4b1b      	ldr	r3, [pc, #108]	; (8004380 <HAL_RCC_ClockConfig+0x150>)
 8004312:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	42ab      	cmp	r3, r5
 800431c:	d12e      	bne.n	800437c <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800431e:	6823      	ldr	r3, [r4, #0]
 8004320:	f013 0f04 	tst.w	r3, #4
 8004324:	d006      	beq.n	8004334 <HAL_RCC_ClockConfig+0x104>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004326:	4a17      	ldr	r2, [pc, #92]	; (8004384 <HAL_RCC_ClockConfig+0x154>)
 8004328:	6893      	ldr	r3, [r2, #8]
 800432a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800432e:	68e1      	ldr	r1, [r4, #12]
 8004330:	430b      	orrs	r3, r1
 8004332:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004334:	6823      	ldr	r3, [r4, #0]
 8004336:	f013 0f08 	tst.w	r3, #8
 800433a:	d007      	beq.n	800434c <HAL_RCC_ClockConfig+0x11c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800433c:	4a11      	ldr	r2, [pc, #68]	; (8004384 <HAL_RCC_ClockConfig+0x154>)
 800433e:	6893      	ldr	r3, [r2, #8]
 8004340:	6921      	ldr	r1, [r4, #16]
 8004342:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004346:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800434a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800434c:	f7ff ff06 	bl	800415c <HAL_RCC_GetSysClockFreq>
 8004350:	4b0c      	ldr	r3, [pc, #48]	; (8004384 <HAL_RCC_ClockConfig+0x154>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004358:	4a0b      	ldr	r2, [pc, #44]	; (8004388 <HAL_RCC_ClockConfig+0x158>)
 800435a:	5cd3      	ldrb	r3, [r2, r3]
 800435c:	40d8      	lsrs	r0, r3
 800435e:	4b0b      	ldr	r3, [pc, #44]	; (800438c <HAL_RCC_ClockConfig+0x15c>)
 8004360:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8004362:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <HAL_RCC_ClockConfig+0x160>)
 8004364:	6818      	ldr	r0, [r3, #0]
 8004366:	f7fd f9a3 	bl	80016b0 <HAL_InitTick>
  return HAL_OK;
 800436a:	2000      	movs	r0, #0
}
 800436c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8004370:	2001      	movs	r0, #1
}
 8004372:	4770      	bx	lr
      return HAL_ERROR;
 8004374:	2001      	movs	r0, #1
 8004376:	e7f9      	b.n	800436c <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 8004378:	2001      	movs	r0, #1
 800437a:	e7f7      	b.n	800436c <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 800437c:	2001      	movs	r0, #1
 800437e:	e7f5      	b.n	800436c <HAL_RCC_ClockConfig+0x13c>
 8004380:	40023c00 	.word	0x40023c00
 8004384:	40023800 	.word	0x40023800
 8004388:	08006d28 	.word	0x08006d28
 800438c:	20000038 	.word	0x20000038
 8004390:	20000040 	.word	0x20000040

08004394 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004394:	4b04      	ldr	r3, [pc, #16]	; (80043a8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800439c:	4a03      	ldr	r2, [pc, #12]	; (80043ac <HAL_RCC_GetPCLK1Freq+0x18>)
 800439e:	5cd3      	ldrb	r3, [r2, r3]
 80043a0:	4a03      	ldr	r2, [pc, #12]	; (80043b0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80043a2:	6810      	ldr	r0, [r2, #0]
}
 80043a4:	40d8      	lsrs	r0, r3
 80043a6:	4770      	bx	lr
 80043a8:	40023800 	.word	0x40023800
 80043ac:	08006d38 	.word	0x08006d38
 80043b0:	20000038 	.word	0x20000038

080043b4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043b4:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80043bc:	4a03      	ldr	r2, [pc, #12]	; (80043cc <HAL_RCC_GetPCLK2Freq+0x18>)
 80043be:	5cd3      	ldrb	r3, [r2, r3]
 80043c0:	4a03      	ldr	r2, [pc, #12]	; (80043d0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80043c2:	6810      	ldr	r0, [r2, #0]
}
 80043c4:	40d8      	lsrs	r0, r3
 80043c6:	4770      	bx	lr
 80043c8:	40023800 	.word	0x40023800
 80043cc:	08006d38 	.word	0x08006d38
 80043d0:	20000038 	.word	0x20000038

080043d4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043d6:	b083      	sub	sp, #12
 80043d8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80043da:	6803      	ldr	r3, [r0, #0]
 80043dc:	f013 0f05 	tst.w	r3, #5
 80043e0:	d106      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043e2:	6823      	ldr	r3, [r4, #0]
 80043e4:	f013 0f02 	tst.w	r3, #2
 80043e8:	d12e      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x74>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80043ea:	2000      	movs	r0, #0
}
 80043ec:	b003      	add	sp, #12
 80043ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 80043f0:	4b4a      	ldr	r3, [pc, #296]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 80043f6:	f7fd f9a7 	bl	8001748 <HAL_GetTick>
 80043fa:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043fc:	4e48      	ldr	r6, [pc, #288]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80043fe:	6833      	ldr	r3, [r6, #0]
 8004400:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004404:	d006      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x40>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004406:	f7fd f99f 	bl	8001748 <HAL_GetTick>
 800440a:	1b43      	subs	r3, r0, r5
 800440c:	2b02      	cmp	r3, #2
 800440e:	d9f6      	bls.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x2a>
        return HAL_TIMEOUT;
 8004410:	2003      	movs	r0, #3
 8004412:	e7eb      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004414:	6862      	ldr	r2, [r4, #4]
 8004416:	68a3      	ldr	r3, [r4, #8]
 8004418:	071b      	lsls	r3, r3, #28
 800441a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800441e:	4a40      	ldr	r2, [pc, #256]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004420:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8004424:	4b3d      	ldr	r3, [pc, #244]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8004426:	2201      	movs	r2, #1
 8004428:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 800442a:	f7fd f98d 	bl	8001748 <HAL_GetTick>
 800442e:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004430:	4e3b      	ldr	r6, [pc, #236]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004432:	6833      	ldr	r3, [r6, #0]
 8004434:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004438:	d1d3      	bne.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800443a:	f7fd f985 	bl	8001748 <HAL_GetTick>
 800443e:	1b43      	subs	r3, r0, r5
 8004440:	2b02      	cmp	r3, #2
 8004442:	d9f6      	bls.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x5e>
        return HAL_TIMEOUT;
 8004444:	2003      	movs	r0, #3
 8004446:	e7d1      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PWR_CLK_ENABLE();
 8004448:	2300      	movs	r3, #0
 800444a:	9301      	str	r3, [sp, #4]
 800444c:	4b34      	ldr	r3, [pc, #208]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800444e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004450:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004454:	641a      	str	r2, [r3, #64]	; 0x40
 8004456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445c:	9301      	str	r3, [sp, #4]
 800445e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8004460:	4a30      	ldr	r2, [pc, #192]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004462:	6813      	ldr	r3, [r2, #0]
 8004464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004468:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800446a:	f7fd f96d 	bl	8001748 <HAL_GetTick>
 800446e:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004470:	4e2c      	ldr	r6, [pc, #176]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004472:	6833      	ldr	r3, [r6, #0]
 8004474:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004478:	d106      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800447a:	f7fd f965 	bl	8001748 <HAL_GetTick>
 800447e:	1b43      	subs	r3, r0, r5
 8004480:	2b02      	cmp	r3, #2
 8004482:	d9f6      	bls.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        return HAL_TIMEOUT;
 8004484:	2003      	movs	r0, #3
 8004486:	e7b1      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x18>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004488:	4b25      	ldr	r3, [pc, #148]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800448a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800448c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004490:	d014      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004492:	68e2      	ldr	r2, [r4, #12]
 8004494:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004498:	429a      	cmp	r2, r3
 800449a:	d00f      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800449c:	4b20      	ldr	r3, [pc, #128]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800449e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80044a4:	491d      	ldr	r1, [pc, #116]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80044a6:	2001      	movs	r0, #1
 80044a8:	f8c1 0e40 	str.w	r0, [r1, #3648]	; 0xe40
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044ac:	2000      	movs	r0, #0
 80044ae:	f8c1 0e40 	str.w	r0, [r1, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 80044b2:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b6:	f013 0f01 	tst.w	r3, #1
 80044ba:	d113      	bne.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044bc:	68e3      	ldr	r3, [r4, #12]
 80044be:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80044c2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80044c6:	d01e      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x132>
 80044c8:	4a15      	ldr	r2, [pc, #84]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80044ca:	6893      	ldr	r3, [r2, #8]
 80044cc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044d0:	6093      	str	r3, [r2, #8]
 80044d2:	4a13      	ldr	r2, [pc, #76]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80044d4:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80044d6:	68e3      	ldr	r3, [r4, #12]
 80044d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044dc:	430b      	orrs	r3, r1
 80044de:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 80044e0:	2000      	movs	r0, #0
 80044e2:	e783      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x18>
        tickstart = HAL_GetTick();
 80044e4:	f7fd f930 	bl	8001748 <HAL_GetTick>
 80044e8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ea:	4e0d      	ldr	r6, [pc, #52]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044ec:	f241 3788 	movw	r7, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80044f2:	f013 0f02 	tst.w	r3, #2
 80044f6:	d1e1      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044f8:	f7fd f926 	bl	8001748 <HAL_GetTick>
 80044fc:	1b40      	subs	r0, r0, r5
 80044fe:	42b8      	cmp	r0, r7
 8004500:	d9f6      	bls.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
            return HAL_TIMEOUT;
 8004502:	2003      	movs	r0, #3
 8004504:	e772      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004506:	4906      	ldr	r1, [pc, #24]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004508:	688a      	ldr	r2, [r1, #8]
 800450a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800450e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004516:	4313      	orrs	r3, r2
 8004518:	608b      	str	r3, [r1, #8]
 800451a:	e7da      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800451c:	42470000 	.word	0x42470000
 8004520:	40023800 	.word	0x40023800
 8004524:	40007000 	.word	0x40007000

08004528 <HAL_RCCEx_GetPeriphCLKConfig>:
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8004528:	2303      	movs	r3, #3
 800452a:	6003      	str	r3, [r0, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800452c:	4a09      	ldr	r2, [pc, #36]	; (8004554 <HAL_RCCEx_GetPeriphCLKConfig+0x2c>)
 800452e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8004532:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004536:	6043      	str	r3, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004538:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 800453c:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8004540:	6083      	str	r3, [r0, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8004542:	6891      	ldr	r1, [r2, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8004544:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004546:	f403 7340 	and.w	r3, r3, #768	; 0x300
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800454a:	f401 12f8 	and.w	r2, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800454e:	4313      	orrs	r3, r2
 8004550:	60c3      	str	r3, [r0, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8004552:	4770      	bx	lr
 8004554:	40023800 	.word	0x40023800

08004558 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8004558:	2801      	cmp	r0, #1
 800455a:	d001      	beq.n	8004560 <HAL_RCCEx_GetPeriphCLKFreq+0x8>
  uint32_t frequency = 0U;
 800455c:	2000      	movs	r0, #0
 800455e:	4770      	bx	lr
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004560:	4b10      	ldr	r3, [pc, #64]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 8004562:	689b      	ldr	r3, [r3, #8]
      switch (srcclk)
 8004564:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8004568:	d001      	beq.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0x16>
 800456a:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 800456c:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800456e:	4b0d      	ldr	r3, [pc, #52]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004576:	4b0b      	ldr	r3, [pc, #44]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 8004578:	685a      	ldr	r2, [r3, #4]
 800457a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800457e:	bf14      	ite	ne
 8004580:	4809      	ldrne	r0, [pc, #36]	; (80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004582:	480a      	ldreq	r0, [pc, #40]	; (80045ac <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
 8004584:	fbb0 f2f2 	udiv	r2, r0, r2
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004588:	4b06      	ldr	r3, [pc, #24]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 800458a:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800458e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004592:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8004596:	fb02 f000 	mul.w	r0, r2, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800459a:	f3c3 7302 	ubfx	r3, r3, #28, #3
 800459e:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 80045a2:	4770      	bx	lr
 80045a4:	40023800 	.word	0x40023800
 80045a8:	007a1200 	.word	0x007a1200
 80045ac:	00f42400 	.word	0x00f42400

080045b0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045b0:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b2:	f102 030c 	add.w	r3, r2, #12
 80045b6:	e853 3f00 	ldrex	r3, [r3]
 80045ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045be:	320c      	adds	r2, #12
 80045c0:	e842 3100 	strex	r1, r3, [r2]
 80045c4:	2900      	cmp	r1, #0
 80045c6:	d1f3      	bne.n	80045b0 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ca:	f102 0314 	add.w	r3, r2, #20
 80045ce:	e853 3f00 	ldrex	r3, [r3]
 80045d2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d6:	3214      	adds	r2, #20
 80045d8:	e842 3100 	strex	r1, r3, [r2]
 80045dc:	2900      	cmp	r1, #0
 80045de:	d1f3      	bne.n	80045c8 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d005      	beq.n	80045f2 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045e6:	2320      	movs	r3, #32
 80045e8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ec:	2300      	movs	r3, #0
 80045ee:	6303      	str	r3, [r0, #48]	; 0x30
}
 80045f0:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045f2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f4:	f102 030c 	add.w	r3, r2, #12
 80045f8:	e853 3f00 	ldrex	r3, [r3]
 80045fc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004600:	320c      	adds	r2, #12
 8004602:	e842 3100 	strex	r1, r3, [r2]
 8004606:	2900      	cmp	r1, #0
 8004608:	d1f3      	bne.n	80045f2 <UART_EndRxTransfer+0x42>
 800460a:	e7ec      	b.n	80045e6 <UART_EndRxTransfer+0x36>

0800460c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800460c:	b538      	push	{r3, r4, r5, lr}
 800460e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004610:	6802      	ldr	r2, [r0, #0]
 8004612:	6913      	ldr	r3, [r2, #16]
 8004614:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004618:	68c1      	ldr	r1, [r0, #12]
 800461a:	430b      	orrs	r3, r1
 800461c:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 800461e:	6801      	ldr	r1, [r0, #0]
 8004620:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004622:	6883      	ldr	r3, [r0, #8]
 8004624:	6900      	ldr	r0, [r0, #16]
 8004626:	4303      	orrs	r3, r0
 8004628:	6960      	ldr	r0, [r4, #20]
 800462a:	4303      	orrs	r3, r0
 800462c:	69e0      	ldr	r0, [r4, #28]
 800462e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8004630:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8004634:	f022 020c 	bic.w	r2, r2, #12
 8004638:	4313      	orrs	r3, r2
 800463a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800463c:	6822      	ldr	r2, [r4, #0]
 800463e:	6953      	ldr	r3, [r2, #20]
 8004640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004644:	69a1      	ldr	r1, [r4, #24]
 8004646:	430b      	orrs	r3, r1
 8004648:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800464a:	6823      	ldr	r3, [r4, #0]
 800464c:	4a2e      	ldr	r2, [pc, #184]	; (8004708 <UART_SetConfig+0xfc>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d006      	beq.n	8004660 <UART_SetConfig+0x54>
 8004652:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004656:	4293      	cmp	r3, r2
 8004658:	d002      	beq.n	8004660 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800465a:	f7ff fe9b 	bl	8004394 <HAL_RCC_GetPCLK1Freq>
 800465e:	e001      	b.n	8004664 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004660:	f7ff fea8 	bl	80043b4 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004664:	69e3      	ldr	r3, [r4, #28]
 8004666:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800466a:	d024      	beq.n	80046b6 <UART_SetConfig+0xaa>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800466c:	2100      	movs	r1, #0
 800466e:	1803      	adds	r3, r0, r0
 8004670:	4149      	adcs	r1, r1
 8004672:	181b      	adds	r3, r3, r0
 8004674:	f141 0100 	adc.w	r1, r1, #0
 8004678:	00c9      	lsls	r1, r1, #3
 800467a:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	1818      	adds	r0, r3, r0
 8004682:	6863      	ldr	r3, [r4, #4]
 8004684:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8004688:	ea4f 7393 	mov.w	r3, r3, lsr #30
 800468c:	f141 0100 	adc.w	r1, r1, #0
 8004690:	f7fb fd9a 	bl	80001c8 <__aeabi_uldivmod>
 8004694:	6821      	ldr	r1, [r4, #0]
 8004696:	4a1d      	ldr	r2, [pc, #116]	; (800470c <UART_SetConfig+0x100>)
 8004698:	fba2 4300 	umull	r4, r3, r2, r0
 800469c:	095b      	lsrs	r3, r3, #5
 800469e:	2464      	movs	r4, #100	; 0x64
 80046a0:	fb04 0013 	mls	r0, r4, r3, r0
 80046a4:	0100      	lsls	r0, r0, #4
 80046a6:	3032      	adds	r0, #50	; 0x32
 80046a8:	fba2 2000 	umull	r2, r0, r2, r0
 80046ac:	011b      	lsls	r3, r3, #4
 80046ae:	eb03 1050 	add.w	r0, r3, r0, lsr #5
 80046b2:	6088      	str	r0, [r1, #8]
  }
}
 80046b4:	bd38      	pop	{r3, r4, r5, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046b6:	2300      	movs	r3, #0
 80046b8:	1802      	adds	r2, r0, r0
 80046ba:	eb43 0103 	adc.w	r1, r3, r3
 80046be:	1812      	adds	r2, r2, r0
 80046c0:	f141 0100 	adc.w	r1, r1, #0
 80046c4:	00c9      	lsls	r1, r1, #3
 80046c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046ca:	00d2      	lsls	r2, r2, #3
 80046cc:	1810      	adds	r0, r2, r0
 80046ce:	f141 0100 	adc.w	r1, r1, #0
 80046d2:	6862      	ldr	r2, [r4, #4]
 80046d4:	1892      	adds	r2, r2, r2
 80046d6:	415b      	adcs	r3, r3
 80046d8:	f7fb fd76 	bl	80001c8 <__aeabi_uldivmod>
 80046dc:	4d0b      	ldr	r5, [pc, #44]	; (800470c <UART_SetConfig+0x100>)
 80046de:	fba5 3200 	umull	r3, r2, r5, r0
 80046e2:	0951      	lsrs	r1, r2, #5
 80046e4:	2364      	movs	r3, #100	; 0x64
 80046e6:	fb03 0311 	mls	r3, r3, r1, r0
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	3332      	adds	r3, #50	; 0x32
 80046ee:	fba5 2303 	umull	r2, r3, r5, r3
 80046f2:	6820      	ldr	r0, [r4, #0]
 80046f4:	f3c3 1242 	ubfx	r2, r3, #5, #3
 80046f8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80046fc:	091b      	lsrs	r3, r3, #4
 80046fe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004702:	4413      	add	r3, r2
 8004704:	6083      	str	r3, [r0, #8]
 8004706:	e7d5      	b.n	80046b4 <UART_SetConfig+0xa8>
 8004708:	40011000 	.word	0x40011000
 800470c:	51eb851f 	.word	0x51eb851f

08004710 <HAL_UART_Init>:
  if (huart == NULL)
 8004710:	b358      	cbz	r0, 800476a <HAL_UART_Init+0x5a>
{
 8004712:	b510      	push	{r4, lr}
 8004714:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004716:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800471a:	b30b      	cbz	r3, 8004760 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800471c:	2324      	movs	r3, #36	; 0x24
 800471e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8004722:	6822      	ldr	r2, [r4, #0]
 8004724:	68d3      	ldr	r3, [r2, #12]
 8004726:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800472a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800472c:	4620      	mov	r0, r4
 800472e:	f7ff ff6d 	bl	800460c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004732:	6822      	ldr	r2, [r4, #0]
 8004734:	6913      	ldr	r3, [r2, #16]
 8004736:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800473a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800473c:	6822      	ldr	r2, [r4, #0]
 800473e:	6953      	ldr	r3, [r2, #20]
 8004740:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004744:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004746:	6822      	ldr	r2, [r4, #0]
 8004748:	68d3      	ldr	r3, [r2, #12]
 800474a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800474e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004750:	2000      	movs	r0, #0
 8004752:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004754:	2320      	movs	r3, #32
 8004756:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800475a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800475e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004760:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8004764:	f7fc fe82 	bl	800146c <HAL_UART_MspInit>
 8004768:	e7d8      	b.n	800471c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800476a:	2001      	movs	r0, #1
}
 800476c:	4770      	bx	lr

0800476e <HAL_UART_ErrorCallback>:
}
 800476e:	4770      	bx	lr

08004770 <UART_DMAError>:
{
 8004770:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004772:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004774:	6823      	ldr	r3, [r4, #0]
 8004776:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004778:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b21      	cmp	r3, #33	; 0x21
 8004780:	d00e      	beq.n	80047a0 <UART_DMAError+0x30>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	695a      	ldr	r2, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004786:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b22      	cmp	r3, #34	; 0x22
 800478e:	d01c      	beq.n	80047ca <UART_DMAError+0x5a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004790:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004792:	f043 0310 	orr.w	r3, r3, #16
 8004796:	6423      	str	r3, [r4, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 8004798:	4620      	mov	r0, r4
 800479a:	f7ff ffe8 	bl	800476e <HAL_UART_ErrorCallback>
}
 800479e:	bd10      	pop	{r4, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80047a0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80047a4:	d0ed      	beq.n	8004782 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 80047a6:	2300      	movs	r3, #0
 80047a8:	84e3      	strh	r3, [r4, #38]	; 0x26
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80047aa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ac:	f102 030c 	add.w	r3, r2, #12
 80047b0:	e853 3f00 	ldrex	r3, [r3]
 80047b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b8:	320c      	adds	r2, #12
 80047ba:	e842 3100 	strex	r1, r3, [r2]
 80047be:	2900      	cmp	r1, #0
 80047c0:	d1f3      	bne.n	80047aa <UART_DMAError+0x3a>
  huart->gState = HAL_UART_STATE_READY;
 80047c2:	2320      	movs	r3, #32
 80047c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80047c8:	e7db      	b.n	8004782 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80047ca:	f012 0f40 	tst.w	r2, #64	; 0x40
 80047ce:	d0df      	beq.n	8004790 <UART_DMAError+0x20>
    huart->RxXferCount = 0x00U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80047d4:	4620      	mov	r0, r4
 80047d6:	f7ff feeb 	bl	80045b0 <UART_EndRxTransfer>
 80047da:	e7d9      	b.n	8004790 <UART_DMAError+0x20>

080047dc <HAL_UARTEx_RxEventCallback>:
}
 80047dc:	4770      	bx	lr

080047de <UART_DMARxHalfCplt>:
{
 80047de:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047e0:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047e2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d002      	beq.n	80047ee <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 80047e8:	f7fc fa4e 	bl	8000c88 <HAL_UART_RxHalfCpltCallback>
}
 80047ec:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80047ee:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80047f0:	0849      	lsrs	r1, r1, #1
 80047f2:	f7ff fff3 	bl	80047dc <HAL_UARTEx_RxEventCallback>
 80047f6:	e7f9      	b.n	80047ec <UART_DMARxHalfCplt+0xe>

080047f8 <UART_DMAReceiveCplt>:
{
 80047f8:	b508      	push	{r3, lr}
 80047fa:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047fc:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004806:	d12b      	bne.n	8004860 <UART_DMAReceiveCplt+0x68>
    huart->RxXferCount = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	85c3      	strh	r3, [r0, #46]	; 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800480c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480e:	f102 030c 	add.w	r3, r2, #12
 8004812:	e853 3f00 	ldrex	r3, [r3]
 8004816:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481a:	320c      	adds	r2, #12
 800481c:	e842 3100 	strex	r1, r3, [r2]
 8004820:	2900      	cmp	r1, #0
 8004822:	d1f3      	bne.n	800480c <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004824:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004826:	f102 0314 	add.w	r3, r2, #20
 800482a:	e853 3f00 	ldrex	r3, [r3]
 800482e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004832:	3214      	adds	r2, #20
 8004834:	e842 3100 	strex	r1, r3, [r2]
 8004838:	2900      	cmp	r1, #0
 800483a:	d1f3      	bne.n	8004824 <UART_DMAReceiveCplt+0x2c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800483c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483e:	f102 0314 	add.w	r3, r2, #20
 8004842:	e853 3f00 	ldrex	r3, [r3]
 8004846:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484a:	3214      	adds	r2, #20
 800484c:	e842 3100 	strex	r1, r3, [r2]
 8004850:	2900      	cmp	r1, #0
 8004852:	d1f3      	bne.n	800483c <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 8004854:	2320      	movs	r3, #32
 8004856:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800485a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800485c:	2b01      	cmp	r3, #1
 800485e:	d005      	beq.n	800486c <UART_DMAReceiveCplt+0x74>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004860:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004862:	2b01      	cmp	r3, #1
 8004864:	d00f      	beq.n	8004886 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004866:	f7fc fa21 	bl	8000cac <HAL_UART_RxCpltCallback>
}
 800486a:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800486c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486e:	f102 030c 	add.w	r3, r2, #12
 8004872:	e853 3f00 	ldrex	r3, [r3]
 8004876:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487a:	320c      	adds	r2, #12
 800487c:	e842 3100 	strex	r1, r3, [r2]
 8004880:	2900      	cmp	r1, #0
 8004882:	d1f3      	bne.n	800486c <UART_DMAReceiveCplt+0x74>
 8004884:	e7ec      	b.n	8004860 <UART_DMAReceiveCplt+0x68>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004886:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004888:	f7ff ffa8 	bl	80047dc <HAL_UARTEx_RxEventCallback>
 800488c:	e7ed      	b.n	800486a <UART_DMAReceiveCplt+0x72>
	...

08004890 <UART_Start_Receive_DMA>:
{
 8004890:	b530      	push	{r4, r5, lr}
 8004892:	b083      	sub	sp, #12
 8004894:	4604      	mov	r4, r0
 8004896:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 8004898:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 800489a:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800489c:	2500      	movs	r5, #0
 800489e:	6405      	str	r5, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048a0:	2222      	movs	r2, #34	; 0x22
 80048a2:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80048a6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80048a8:	4820      	ldr	r0, [pc, #128]	; (800492c <UART_Start_Receive_DMA+0x9c>)
 80048aa:	63d0      	str	r0, [r2, #60]	; 0x3c
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80048ac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80048ae:	4820      	ldr	r0, [pc, #128]	; (8004930 <UART_Start_Receive_DMA+0xa0>)
 80048b0:	6410      	str	r0, [r2, #64]	; 0x40
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80048b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80048b4:	481f      	ldr	r0, [pc, #124]	; (8004934 <UART_Start_Receive_DMA+0xa4>)
 80048b6:	64d0      	str	r0, [r2, #76]	; 0x4c
  huart->hdmarx->XferAbortCallback = NULL;
 80048b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80048ba:	6515      	str	r5, [r2, #80]	; 0x50
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80048bc:	6820      	ldr	r0, [r4, #0]
 80048be:	460a      	mov	r2, r1
 80048c0:	1d01      	adds	r1, r0, #4
 80048c2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80048c4:	f7fd f8ae 	bl	8001a24 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 80048c8:	9501      	str	r5, [sp, #4]
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	9201      	str	r2, [sp, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	9301      	str	r3, [sp, #4]
 80048d4:	9b01      	ldr	r3, [sp, #4]
  __HAL_UNLOCK(huart);
 80048d6:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (huart->Init.Parity != UART_PARITY_NONE)
 80048da:	6923      	ldr	r3, [r4, #16]
 80048dc:	b15b      	cbz	r3, 80048f6 <UART_Start_Receive_DMA+0x66>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048de:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e0:	f102 030c 	add.w	r3, r2, #12
 80048e4:	e853 3f00 	ldrex	r3, [r3]
 80048e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ec:	320c      	adds	r2, #12
 80048ee:	e842 3100 	strex	r1, r3, [r2]
 80048f2:	2900      	cmp	r1, #0
 80048f4:	d1f3      	bne.n	80048de <UART_Start_Receive_DMA+0x4e>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f8:	f102 0314 	add.w	r3, r2, #20
 80048fc:	e853 3f00 	ldrex	r3, [r3]
 8004900:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004904:	3214      	adds	r2, #20
 8004906:	e842 3100 	strex	r1, r3, [r2]
 800490a:	2900      	cmp	r1, #0
 800490c:	d1f3      	bne.n	80048f6 <UART_Start_Receive_DMA+0x66>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800490e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004910:	f102 0314 	add.w	r3, r2, #20
 8004914:	e853 3f00 	ldrex	r3, [r3]
 8004918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491c:	3214      	adds	r2, #20
 800491e:	e842 3100 	strex	r1, r3, [r2]
 8004922:	2900      	cmp	r1, #0
 8004924:	d1f3      	bne.n	800490e <UART_Start_Receive_DMA+0x7e>
}
 8004926:	2000      	movs	r0, #0
 8004928:	b003      	add	sp, #12
 800492a:	bd30      	pop	{r4, r5, pc}
 800492c:	080047f9 	.word	0x080047f9
 8004930:	080047df 	.word	0x080047df
 8004934:	08004771 	.word	0x08004771

08004938 <HAL_UART_Receive_DMA>:
{
 8004938:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800493a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b20      	cmp	r3, #32
 8004942:	d10d      	bne.n	8004960 <HAL_UART_Receive_DMA+0x28>
    if ((pData == NULL) || (Size == 0U))
 8004944:	b171      	cbz	r1, 8004964 <HAL_UART_Receive_DMA+0x2c>
 8004946:	b17a      	cbz	r2, 8004968 <HAL_UART_Receive_DMA+0x30>
    __HAL_LOCK(huart);
 8004948:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800494c:	2b01      	cmp	r3, #1
 800494e:	d00d      	beq.n	800496c <HAL_UART_Receive_DMA+0x34>
 8004950:	2301      	movs	r3, #1
 8004952:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004956:	2300      	movs	r3, #0
 8004958:	6303      	str	r3, [r0, #48]	; 0x30
    return (UART_Start_Receive_DMA(huart, pData, Size));
 800495a:	f7ff ff99 	bl	8004890 <UART_Start_Receive_DMA>
 800495e:	e000      	b.n	8004962 <HAL_UART_Receive_DMA+0x2a>
    return HAL_BUSY;
 8004960:	2002      	movs	r0, #2
}
 8004962:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 8004964:	2001      	movs	r0, #1
 8004966:	e7fc      	b.n	8004962 <HAL_UART_Receive_DMA+0x2a>
 8004968:	2001      	movs	r0, #1
 800496a:	e7fa      	b.n	8004962 <HAL_UART_Receive_DMA+0x2a>
    __HAL_LOCK(huart);
 800496c:	2002      	movs	r0, #2
 800496e:	e7f8      	b.n	8004962 <HAL_UART_Receive_DMA+0x2a>

08004970 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004970:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8004972:	2300      	movs	r3, #0
 8004974:	9301      	str	r3, [sp, #4]
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 8004976:	4a11      	ldr	r2, [pc, #68]	; (80049bc <USB_CoreReset+0x4c>)
    count++;
 8004978:	9b01      	ldr	r3, [sp, #4]
 800497a:	3301      	adds	r3, #1
 800497c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800497e:	9b01      	ldr	r3, [sp, #4]
 8004980:	4293      	cmp	r3, r2
 8004982:	d815      	bhi.n	80049b0 <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004984:	6903      	ldr	r3, [r0, #16]
 8004986:	2b00      	cmp	r3, #0
 8004988:	daf6      	bge.n	8004978 <USB_CoreReset+0x8>

  /* Core Soft Reset */
  count = 0U;
 800498a:	2300      	movs	r3, #0
 800498c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800498e:	6903      	ldr	r3, [r0, #16]
 8004990:	f043 0301 	orr.w	r3, r3, #1
 8004994:	6103      	str	r3, [r0, #16]

  do
  {
    count++;

    if (count > 200000U)
 8004996:	4a09      	ldr	r2, [pc, #36]	; (80049bc <USB_CoreReset+0x4c>)
    count++;
 8004998:	9b01      	ldr	r3, [sp, #4]
 800499a:	3301      	adds	r3, #1
 800499c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800499e:	9b01      	ldr	r3, [sp, #4]
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d808      	bhi.n	80049b6 <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80049a4:	6903      	ldr	r3, [r0, #16]
 80049a6:	f013 0f01 	tst.w	r3, #1
 80049aa:	d1f5      	bne.n	8004998 <USB_CoreReset+0x28>

  return HAL_OK;
 80049ac:	2000      	movs	r0, #0
 80049ae:	e000      	b.n	80049b2 <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 80049b0:	2003      	movs	r0, #3
}
 80049b2:	b002      	add	sp, #8
 80049b4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80049b6:	2003      	movs	r0, #3
 80049b8:	e7fb      	b.n	80049b2 <USB_CoreReset+0x42>
 80049ba:	bf00      	nop
 80049bc:	00030d40 	.word	0x00030d40

080049c0 <USB_CoreInit>:
{
 80049c0:	b084      	sub	sp, #16
 80049c2:	b510      	push	{r4, lr}
 80049c4:	4604      	mov	r4, r0
 80049c6:	a803      	add	r0, sp, #12
 80049c8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049cc:	9b08      	ldr	r3, [sp, #32]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d11f      	bne.n	8004a12 <USB_CoreInit+0x52>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80049d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049d8:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80049da:	68e3      	ldr	r3, [r4, #12]
 80049dc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80049e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049e4:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80049e6:	68e3      	ldr	r3, [r4, #12]
 80049e8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80049ec:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 80049ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d009      	beq.n	8004a08 <USB_CoreInit+0x48>
    ret = USB_CoreReset(USBx);
 80049f4:	4620      	mov	r0, r4
 80049f6:	f7ff ffbb 	bl	8004970 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80049fa:	9b06      	ldr	r3, [sp, #24]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d01b      	beq.n	8004a38 <USB_CoreInit+0x78>
}
 8004a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a04:	b004      	add	sp, #16
 8004a06:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a08:	68e3      	ldr	r3, [r4, #12]
 8004a0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a0e:	60e3      	str	r3, [r4, #12]
 8004a10:	e7f0      	b.n	80049f4 <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a12:	68e3      	ldr	r3, [r4, #12]
 8004a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a18:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	f7ff ffa8 	bl	8004970 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8004a20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a22:	b923      	cbnz	r3, 8004a2e <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a2a:	63a3      	str	r3, [r4, #56]	; 0x38
 8004a2c:	e7e5      	b.n	80049fa <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a34:	63a3      	str	r3, [r4, #56]	; 0x38
 8004a36:	e7e0      	b.n	80049fa <USB_CoreInit+0x3a>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a38:	68a3      	ldr	r3, [r4, #8]
 8004a3a:	f043 0306 	orr.w	r3, r3, #6
 8004a3e:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a40:	68a3      	ldr	r3, [r4, #8]
 8004a42:	f043 0320 	orr.w	r3, r3, #32
 8004a46:	60a3      	str	r3, [r4, #8]
 8004a48:	e7da      	b.n	8004a00 <USB_CoreInit+0x40>

08004a4a <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004a4a:	6883      	ldr	r3, [r0, #8]
 8004a4c:	f043 0301 	orr.w	r3, r3, #1
 8004a50:	6083      	str	r3, [r0, #8]
}
 8004a52:	2000      	movs	r0, #0
 8004a54:	4770      	bx	lr

08004a56 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a56:	6883      	ldr	r3, [r0, #8]
 8004a58:	f023 0301 	bic.w	r3, r3, #1
 8004a5c:	6083      	str	r3, [r0, #8]
}
 8004a5e:	2000      	movs	r0, #0
 8004a60:	4770      	bx	lr

08004a62 <USB_SetCurrentMode>:
{
 8004a62:	b570      	push	{r4, r5, r6, lr}
 8004a64:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a66:	68c3      	ldr	r3, [r0, #12]
 8004a68:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004a6c:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004a6e:	2901      	cmp	r1, #1
 8004a70:	d015      	beq.n	8004a9e <USB_SetCurrentMode+0x3c>
  else if (mode == USB_DEVICE_MODE)
 8004a72:	bb29      	cbnz	r1, 8004ac0 <USB_SetCurrentMode+0x5e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a74:	68c3      	ldr	r3, [r0, #12]
 8004a76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a7a:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8004a7c:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8004a7e:	2601      	movs	r6, #1
 8004a80:	4630      	mov	r0, r6
 8004a82:	f7fc fe67 	bl	8001754 <HAL_Delay>
      ms++;
 8004a86:	3401      	adds	r4, #1
  return ((USBx->GINTSTS) & 0x1U);
 8004a88:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004a8a:	f013 0f01 	tst.w	r3, #1
 8004a8e:	d001      	beq.n	8004a94 <USB_SetCurrentMode+0x32>
 8004a90:	2c32      	cmp	r4, #50	; 0x32
 8004a92:	d1f5      	bne.n	8004a80 <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 8004a94:	2c32      	cmp	r4, #50	; 0x32
 8004a96:	bf14      	ite	ne
 8004a98:	2000      	movne	r0, #0
 8004a9a:	2001      	moveq	r0, #1
}
 8004a9c:	bd70      	pop	{r4, r5, r6, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a9e:	68c3      	ldr	r3, [r0, #12]
 8004aa0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004aa4:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8004aa6:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8004aa8:	2601      	movs	r6, #1
 8004aaa:	4630      	mov	r0, r6
 8004aac:	f7fc fe52 	bl	8001754 <HAL_Delay>
      ms++;
 8004ab0:	3401      	adds	r4, #1
  return ((USBx->GINTSTS) & 0x1U);
 8004ab2:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004ab4:	f013 0f01 	tst.w	r3, #1
 8004ab8:	d1ec      	bne.n	8004a94 <USB_SetCurrentMode+0x32>
 8004aba:	2c32      	cmp	r4, #50	; 0x32
 8004abc:	d1f5      	bne.n	8004aaa <USB_SetCurrentMode+0x48>
 8004abe:	e7e9      	b.n	8004a94 <USB_SetCurrentMode+0x32>
    return HAL_ERROR;
 8004ac0:	2001      	movs	r0, #1
 8004ac2:	e7eb      	b.n	8004a9c <USB_SetCurrentMode+0x3a>

08004ac4 <USB_FlushTxFifo>:
{
 8004ac4:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8004aca:	4a11      	ldr	r2, [pc, #68]	; (8004b10 <USB_FlushTxFifo+0x4c>)
    count++;
 8004acc:	9b01      	ldr	r3, [sp, #4]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8004ad2:	9b01      	ldr	r3, [sp, #4]
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d815      	bhi.n	8004b04 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ad8:	6903      	ldr	r3, [r0, #16]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	daf6      	bge.n	8004acc <USB_FlushTxFifo+0x8>
  count = 0U;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ae2:	0189      	lsls	r1, r1, #6
 8004ae4:	f041 0120 	orr.w	r1, r1, #32
 8004ae8:	6101      	str	r1, [r0, #16]
    if (count > 200000U)
 8004aea:	4a09      	ldr	r2, [pc, #36]	; (8004b10 <USB_FlushTxFifo+0x4c>)
    count++;
 8004aec:	9b01      	ldr	r3, [sp, #4]
 8004aee:	3301      	adds	r3, #1
 8004af0:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8004af2:	9b01      	ldr	r3, [sp, #4]
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d808      	bhi.n	8004b0a <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004af8:	6903      	ldr	r3, [r0, #16]
 8004afa:	f013 0f20 	tst.w	r3, #32
 8004afe:	d1f5      	bne.n	8004aec <USB_FlushTxFifo+0x28>
  return HAL_OK;
 8004b00:	2000      	movs	r0, #0
 8004b02:	e000      	b.n	8004b06 <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 8004b04:	2003      	movs	r0, #3
}
 8004b06:	b002      	add	sp, #8
 8004b08:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004b0a:	2003      	movs	r0, #3
 8004b0c:	e7fb      	b.n	8004b06 <USB_FlushTxFifo+0x42>
 8004b0e:	bf00      	nop
 8004b10:	00030d40 	.word	0x00030d40

08004b14 <USB_FlushRxFifo>:
{
 8004b14:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8004b16:	2300      	movs	r3, #0
 8004b18:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8004b1a:	4a10      	ldr	r2, [pc, #64]	; (8004b5c <USB_FlushRxFifo+0x48>)
    count++;
 8004b1c:	9b01      	ldr	r3, [sp, #4]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8004b22:	9b01      	ldr	r3, [sp, #4]
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d813      	bhi.n	8004b50 <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b28:	6903      	ldr	r3, [r0, #16]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	daf6      	bge.n	8004b1c <USB_FlushRxFifo+0x8>
  count = 0U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b32:	2310      	movs	r3, #16
 8004b34:	6103      	str	r3, [r0, #16]
    if (count > 200000U)
 8004b36:	4a09      	ldr	r2, [pc, #36]	; (8004b5c <USB_FlushRxFifo+0x48>)
    count++;
 8004b38:	9b01      	ldr	r3, [sp, #4]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8004b3e:	9b01      	ldr	r3, [sp, #4]
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d808      	bhi.n	8004b56 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b44:	6903      	ldr	r3, [r0, #16]
 8004b46:	f013 0f10 	tst.w	r3, #16
 8004b4a:	d1f5      	bne.n	8004b38 <USB_FlushRxFifo+0x24>
  return HAL_OK;
 8004b4c:	2000      	movs	r0, #0
 8004b4e:	e000      	b.n	8004b52 <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 8004b50:	2003      	movs	r0, #3
}
 8004b52:	b002      	add	sp, #8
 8004b54:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004b56:	2003      	movs	r0, #3
 8004b58:	e7fb      	b.n	8004b52 <USB_FlushRxFifo+0x3e>
 8004b5a:	bf00      	nop
 8004b5c:	00030d40 	.word	0x00030d40

08004b60 <USB_WritePacket>:
{
 8004b60:	b410      	push	{r4}
 8004b62:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 8004b66:	b974      	cbnz	r4, 8004b86 <USB_WritePacket+0x26>
    count32b = ((uint32_t)len + 3U) / 4U;
 8004b68:	3303      	adds	r3, #3
 8004b6a:	ea4f 0c93 	mov.w	ip, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 8004b6e:	2b03      	cmp	r3, #3
 8004b70:	d909      	bls.n	8004b86 <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004b72:	3201      	adds	r2, #1
 8004b74:	eb00 3002 	add.w	r0, r0, r2, lsl #12
    for (i = 0U; i < count32b; i++)
 8004b78:	2300      	movs	r3, #0
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004b7a:	f851 2b04 	ldr.w	r2, [r1], #4
 8004b7e:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8004b80:	3301      	adds	r3, #1
 8004b82:	459c      	cmp	ip, r3
 8004b84:	d8f9      	bhi.n	8004b7a <USB_WritePacket+0x1a>
}
 8004b86:	2000      	movs	r0, #0
 8004b88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <USB_ReadPacket>:
{
 8004b8e:	b570      	push	{r4, r5, r6, lr}
 8004b90:	4606      	mov	r6, r0
  uint16_t remaining_bytes = len % 4U;
 8004b92:	f002 0503 	and.w	r5, r2, #3
  for (i = 0U; i < count32b; i++)
 8004b96:	ea5f 0c92 	movs.w	ip, r2, lsr #2
 8004b9a:	d01b      	beq.n	8004bd4 <USB_ReadPacket+0x46>
  uint8_t *pDest = dest;
 8004b9c:	460a      	mov	r2, r1
  for (i = 0U; i < count32b; i++)
 8004b9e:	2300      	movs	r3, #0
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ba0:	f500 5e80 	add.w	lr, r0, #4096	; 0x1000
 8004ba4:	f8de 4000 	ldr.w	r4, [lr]
 8004ba8:	f842 4b04 	str.w	r4, [r2], #4
  for (i = 0U; i < count32b; i++)
 8004bac:	3301      	adds	r3, #1
 8004bae:	459c      	cmp	ip, r3
 8004bb0:	d1f8      	bne.n	8004ba4 <USB_ReadPacket+0x16>
    pDest++;
 8004bb2:	eb01 0083 	add.w	r0, r1, r3, lsl #2
  if (remaining_bytes != 0U)
 8004bb6:	b165      	cbz	r5, 8004bd2 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004bb8:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 8004bbc:	6834      	ldr	r4, [r6, #0]
 8004bbe:	1941      	adds	r1, r0, r5
 8004bc0:	2300      	movs	r3, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004bc2:	fa24 f203 	lsr.w	r2, r4, r3
 8004bc6:	f800 2b01 	strb.w	r2, [r0], #1
    } while (remaining_bytes != 0U);
 8004bca:	3308      	adds	r3, #8
 8004bcc:	4288      	cmp	r0, r1
 8004bce:	d1f8      	bne.n	8004bc2 <USB_ReadPacket+0x34>
      pDest++;
 8004bd0:	4608      	mov	r0, r1
}
 8004bd2:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 8004bd4:	4608      	mov	r0, r1
 8004bd6:	e7ee      	b.n	8004bb6 <USB_ReadPacket+0x28>

08004bd8 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8004bd8:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8004bda:	6980      	ldr	r0, [r0, #24]
}
 8004bdc:	4010      	ands	r0, r2
 8004bde:	4770      	bx	lr

08004be0 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8004be0:	6940      	ldr	r0, [r0, #20]
}
 8004be2:	f000 0001 	and.w	r0, r0, #1
 8004be6:	4770      	bx	lr

08004be8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004be8:	b084      	sub	sp, #16
 8004bea:	b570      	push	{r4, r5, r6, lr}
 8004bec:	4604      	mov	r4, r0
 8004bee:	a805      	add	r0, sp, #20
 8004bf0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8004bf4:	4615      	mov	r5, r2
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004bfc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004bfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c02:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004c04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c06:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004c0a:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004c0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c12:	63a3      	str	r3, [r4, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004c14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c16:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004c1a:	d045      	beq.n	8004ca8 <USB_HostInit+0xc0>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004c1c:	9b07      	ldr	r3, [sp, #28]
 8004c1e:	2b01      	cmp	r3, #1
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004c20:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8004c24:	bf0c      	ite	eq
 8004c26:	f043 0304 	orreq.w	r3, r3, #4
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004c2a:	f023 0304 	bicne.w	r3, r3, #4
 8004c2e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c32:	2110      	movs	r1, #16
 8004c34:	4620      	mov	r0, r4
 8004c36:	f7ff ff45 	bl	8004ac4 <USB_FlushTxFifo>
 8004c3a:	4606      	mov	r6, r0
  {
    ret = HAL_ERROR;
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c3c:	4620      	mov	r0, r4
 8004c3e:	f7ff ff69 	bl	8004b14 <USB_FlushRxFifo>
 8004c42:	4306      	orrs	r6, r0
 8004c44:	f016 0fff 	tst.w	r6, #255	; 0xff
  {
    ret = HAL_ERROR;
 8004c48:	bf14      	ite	ne
 8004c4a:	2001      	movne	r0, #1
 8004c4c:	2000      	moveq	r0, #0
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004c4e:	b15d      	cbz	r5, 8004c68 <USB_HostInit+0x80>
 8004c50:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 8004c54:	2200      	movs	r2, #0
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004c56:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    USBx_HC(i)->HCINTMSK = 0U;
 8004c5a:	4611      	mov	r1, r2
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004c5c:	609e      	str	r6, [r3, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004c5e:	60d9      	str	r1, [r3, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004c60:	3201      	adds	r2, #1
 8004c62:	3320      	adds	r3, #32
 8004c64:	4295      	cmp	r5, r2
 8004c66:	d1f9      	bne.n	8004c5c <USB_HostInit+0x74>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	61a3      	str	r3, [r4, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004c6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c70:	6163      	str	r3, [r4, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004c72:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c74:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004c78:	d01d      	beq.n	8004cb6 <USB_HostInit+0xce>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004c7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c7e:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004c80:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8004c84:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004c86:	4b10      	ldr	r3, [pc, #64]	; (8004cc8 <USB_HostInit+0xe0>)
 8004c88:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c8c:	9b08      	ldr	r3, [sp, #32]
 8004c8e:	b91b      	cbnz	r3, 8004c98 <USB_HostInit+0xb0>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c90:	69a3      	ldr	r3, [r4, #24]
 8004c92:	f043 0310 	orr.w	r3, r3, #16
 8004c96:	61a3      	str	r3, [r4, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004c98:	69a2      	ldr	r2, [r4, #24]
 8004c9a:	4b0c      	ldr	r3, [pc, #48]	; (8004ccc <USB_HostInit+0xe4>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
}
 8004ca0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004ca4:	b004      	add	sp, #16
 8004ca6:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004ca8:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8004cac:	f023 0304 	bic.w	r3, r3, #4
 8004cb0:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 8004cb4:	e7bd      	b.n	8004c32 <USB_HostInit+0x4a>
    USBx->GRXFSIZ  = 0x80U;
 8004cb6:	2380      	movs	r3, #128	; 0x80
 8004cb8:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004cba:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8004cbe:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004cc0:	4b03      	ldr	r3, [pc, #12]	; (8004cd0 <USB_HostInit+0xe8>)
 8004cc2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004cc6:	e7e1      	b.n	8004c8c <USB_HostInit+0xa4>
 8004cc8:	00e00300 	.word	0x00e00300
 8004ccc:	a3200008 	.word	0xa3200008
 8004cd0:	004000e0 	.word	0x004000e0

08004cd4 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004cd4:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 8004cd8:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8004cdc:	f023 0303 	bic.w	r3, r3, #3
 8004ce0:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004ce4:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
 8004ce8:	f001 0303 	and.w	r3, r1, #3
 8004cec:	4313      	orrs	r3, r2
 8004cee:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400

  if (freq == HCFG_48_MHZ)
 8004cf2:	2901      	cmp	r1, #1
 8004cf4:	d007      	beq.n	8004d06 <USB_InitFSLSPClkSel+0x32>
  {
    USBx_HOST->HFIR = 48000U;
  }
  else if (freq == HCFG_6_MHZ)
 8004cf6:	2902      	cmp	r1, #2
  {
    USBx_HOST->HFIR = 6000U;
 8004cf8:	bf04      	itt	eq
 8004cfa:	f241 7370 	movweq	r3, #6000	; 0x1770
 8004cfe:	f8cc 3004 	streq.w	r3, [ip, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 8004d02:	2000      	movs	r0, #0
 8004d04:	4770      	bx	lr
    USBx_HOST->HFIR = 48000U;
 8004d06:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004d0a:	f8cc 3004 	str.w	r3, [ip, #4]
 8004d0e:	e7f8      	b.n	8004d02 <USB_InitFSLSPClkSel+0x2e>

08004d10 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004d10:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8004d16:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8004d1a:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004d1c:	9b01      	ldr	r3, [sp, #4]
 8004d1e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004d22:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004d24:	9b01      	ldr	r3, [sp, #4]
 8004d26:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004d2a:	d101      	bne.n	8004d30 <USB_DriveVbus+0x20>
 8004d2c:	2901      	cmp	r1, #1
 8004d2e:	d00c      	beq.n	8004d4a <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004d30:	9b01      	ldr	r3, [sp, #4]
 8004d32:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004d36:	d005      	beq.n	8004d44 <USB_DriveVbus+0x34>
 8004d38:	b921      	cbnz	r1, 8004d44 <USB_DriveVbus+0x34>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004d3a:	9b01      	ldr	r3, [sp, #4]
 8004d3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d40:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8004d44:	2000      	movs	r0, #0
 8004d46:	b002      	add	sp, #8
 8004d48:	4770      	bx	lr
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004d4a:	9b01      	ldr	r3, [sp, #4]
 8004d4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d50:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004d54:	9b01      	ldr	r3, [sp, #4]
 8004d56:	e7f5      	b.n	8004d44 <USB_DriveVbus+0x34>

08004d58 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004d58:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8004d5e:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8004d62:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004d64:	9801      	ldr	r0, [sp, #4]
}
 8004d66:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8004d6a:	b002      	add	sp, #8
 8004d6c:	4770      	bx	lr

08004d6e <USB_GetCurrentFrame>:
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004d6e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004d72:	6880      	ldr	r0, [r0, #8]
}
 8004d74:	b280      	uxth	r0, r0
 8004d76:	4770      	bx	lr

08004d78 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d7c:	4691      	mov	r9, r2
 8004d7e:	461c      	mov	r4, r3
 8004d80:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004d84:	eb00 1641 	add.w	r6, r0, r1, lsl #5
 8004d88:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 8004d8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d90:	609a      	str	r2, [r3, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004d92:	2d03      	cmp	r5, #3
 8004d94:	d87a      	bhi.n	8004e8c <USB_HC_Init+0x114>
 8004d96:	e8df f005 	tbb	[pc, r5]
 8004d9a:	6e02      	.short	0x6e02
 8004d9c:	2a02      	.short	0x2a02
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d9e:	f240 429d 	movw	r2, #1181	; 0x49d
 8004da2:	60da      	str	r2, [r3, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004da4:	f019 0f80 	tst.w	r9, #128	; 0x80
 8004da8:	d108      	bne.n	8004dbc <USB_HC_Init+0x44>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
      }
      else
      {
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004daa:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004dac:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004db0:	d023      	beq.n	8004dfa <USB_HC_Init+0x82>
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004db2:	68da      	ldr	r2, [r3, #12]
 8004db4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004db8:	60da      	str	r2, [r3, #12]
 8004dba:	e01e      	b.n	8004dfa <USB_HC_Init+0x82>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004dbc:	68da      	ldr	r2, [r3, #12]
 8004dbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dc2:	60da      	str	r2, [r3, #12]
      ret = HAL_ERROR;
      break;
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	f042 0202 	orr.w	r2, r2, #2
 8004dca:	60da      	str	r2, [r3, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004dcc:	f8d0 2418 	ldr.w	r2, [r0, #1048]	; 0x418
 8004dd0:	f001 070f 	and.w	r7, r1, #15
 8004dd4:	2101      	movs	r1, #1
 8004dd6:	40b9      	lsls	r1, r7
 8004dd8:	4311      	orrs	r1, r2
 8004dda:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004dde:	6983      	ldr	r3, [r0, #24]
 8004de0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004de4:	6183      	str	r3, [r0, #24]
 8004de6:	2700      	movs	r7, #0

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004de8:	f44f 4800 	mov.w	r8, #32768	; 0x8000
 8004dec:	e019      	b.n	8004e22 <USB_HC_Init+0xaa>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004dee:	f240 629d 	movw	r2, #1693	; 0x69d
 8004df2:	60da      	str	r2, [r3, #12]
      if ((epnum & 0x80U) == 0x80U)
 8004df4:	f019 0f80 	tst.w	r9, #128	; 0x80
 8004df8:	d138      	bne.n	8004e6c <USB_HC_Init+0xf4>
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004dfa:	68da      	ldr	r2, [r3, #12]
 8004dfc:	f042 0202 	orr.w	r2, r2, #2
 8004e00:	60da      	str	r2, [r3, #12]
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004e02:	f8d0 7418 	ldr.w	r7, [r0, #1048]	; 0x418
 8004e06:	f001 010f 	and.w	r1, r1, #15
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	fa03 f101 	lsl.w	r1, r3, r1
 8004e10:	4339      	orrs	r1, r7
 8004e12:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004e16:	6983      	ldr	r3, [r0, #24]
 8004e18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e1c:	6183      	str	r3, [r0, #24]
 8004e1e:	2700      	movs	r7, #0
  }
  else
  {
    HCcharEpDir = 0U;
 8004e20:	46b8      	mov	r8, r7
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004e22:	f7ff ff99 	bl	8004d58 <USB_GetHostSpeed>

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004e26:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d048      	beq.n	8004ec0 <USB_HC_Init+0x148>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004e2e:	2100      	movs	r1, #0
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e30:	05a3      	lsls	r3, r4, #22
 8004e32:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e36:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
 8004e3a:	f3c4 040a 	ubfx	r4, r4, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004e3e:	4323      	orrs	r3, r4
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004e40:	ea4f 29c9 	mov.w	r9, r9, lsl #11
 8004e44:	f409 49f0 	and.w	r9, r9, #30720	; 0x7800
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004e48:	ea43 0309 	orr.w	r3, r3, r9
 8004e4c:	04aa      	lsls	r2, r5, #18
 8004e4e:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8004e52:	4313      	orrs	r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e54:	ea43 0308 	orr.w	r3, r3, r8
 8004e58:	430b      	orrs	r3, r1
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e5a:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004e5e:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 8004e62:	2d01      	cmp	r5, #1
 8004e64:	d032      	beq.n	8004ecc <USB_HC_Init+0x154>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
  }

  return ret;
}
 8004e66:	4638      	mov	r0, r7
 8004e68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e72:	60da      	str	r2, [r3, #12]
 8004e74:	e7a6      	b.n	8004dc4 <USB_HC_Init+0x4c>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e76:	f240 2225 	movw	r2, #549	; 0x225
 8004e7a:	60da      	str	r2, [r3, #12]
      if ((epnum & 0x80U) == 0x80U)
 8004e7c:	f019 0f80 	tst.w	r9, #128	; 0x80
 8004e80:	d0bb      	beq.n	8004dfa <USB_HC_Init+0x82>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004e82:	68da      	ldr	r2, [r3, #12]
 8004e84:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004e88:	60da      	str	r2, [r3, #12]
 8004e8a:	e79b      	b.n	8004dc4 <USB_HC_Init+0x4c>
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	f042 0202 	orr.w	r2, r2, #2
 8004e92:	60da      	str	r2, [r3, #12]
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004e94:	f8d0 7418 	ldr.w	r7, [r0, #1048]	; 0x418
 8004e98:	f001 010f 	and.w	r1, r1, #15
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	408b      	lsls	r3, r1
 8004ea0:	433b      	orrs	r3, r7
 8004ea2:	f8c0 3418 	str.w	r3, [r0, #1048]	; 0x418
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004ea6:	6983      	ldr	r3, [r0, #24]
 8004ea8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004eac:	6183      	str	r3, [r0, #24]
      ret = HAL_ERROR;
 8004eae:	2701      	movs	r7, #1
 8004eb0:	f019 0f80 	tst.w	r9, #128	; 0x80
 8004eb4:	bf14      	ite	ne
 8004eb6:	f44f 4800 	movne.w	r8, #32768	; 0x8000
 8004eba:	f04f 0800 	moveq.w	r8, #0
 8004ebe:	e7b0      	b.n	8004e22 <USB_HC_Init+0xaa>
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004ec0:	2802      	cmp	r0, #2
 8004ec2:	bf0c      	ite	eq
 8004ec4:	2100      	moveq	r1, #0
 8004ec6:	f44f 3100 	movne.w	r1, #131072	; 0x20000
 8004eca:	e7b1      	b.n	8004e30 <USB_HC_Init+0xb8>
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004ecc:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
 8004ed0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ed4:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
  return ret;
 8004ed8:	e7c5      	b.n	8004e66 <USB_HC_Init+0xee>

08004eda <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004eda:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004ede:	6940      	ldr	r0, [r0, #20]
}
 8004ee0:	b280      	uxth	r0, r0
 8004ee2:	4770      	bx	lr

08004ee4 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004ee4:	b430      	push	{r4, r5}
 8004ee6:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  __IO uint32_t count = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	9301      	str	r3, [sp, #4]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004eec:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8004ef0:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 8004ef4:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004ef8:	0c9b      	lsrs	r3, r3, #18
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004efa:	f8d1 5500 	ldr.w	r5, [r1, #1280]	; 0x500

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8004efe:	6884      	ldr	r4, [r0, #8]
 8004f00:	f014 0f20 	tst.w	r4, #32
 8004f04:	d001      	beq.n	8004f0a <USB_HC_Halt+0x26>
 8004f06:	2d00      	cmp	r5, #0
 8004f08:	da2d      	bge.n	8004f66 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004f0a:	f013 0f01 	tst.w	r3, #1
 8004f0e:	d12e      	bne.n	8004f6e <USB_HC_Halt+0x8a>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004f10:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004f14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f18:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004f1c:	6883      	ldr	r3, [r0, #8]
 8004f1e:	f013 0f20 	tst.w	r3, #32
 8004f22:	d120      	bne.n	8004f66 <USB_HC_Halt+0x82>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004f24:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004f26:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 8004f2a:	d116      	bne.n	8004f5a <USB_HC_Halt+0x76>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004f2c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004f30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f34:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004f38:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004f3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f40:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        do
        {
          count++;
 8004f44:	9b01      	ldr	r3, [sp, #4]
 8004f46:	3301      	adds	r3, #1
 8004f48:	9301      	str	r3, [sp, #4]

          if (count > 1000U)
 8004f4a:	9b01      	ldr	r3, [sp, #4]
 8004f4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f50:	d809      	bhi.n	8004f66 <USB_HC_Halt+0x82>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004f52:	6813      	ldr	r3, [r2, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	dbf5      	blt.n	8004f44 <USB_HC_Halt+0x60>
 8004f58:	e005      	b.n	8004f66 <USB_HC_Halt+0x82>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004f5a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004f5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f62:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8004f66:	2000      	movs	r0, #0
 8004f68:	b002      	add	sp, #8
 8004f6a:	bc30      	pop	{r4, r5}
 8004f6c:	4770      	bx	lr
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004f6e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004f72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f76:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004f7a:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8004f7e:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 8004f82:	d116      	bne.n	8004fb2 <USB_HC_Halt+0xce>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004f84:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004f88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f8c:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004f90:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004f94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f98:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        count++;
 8004f9c:	9b01      	ldr	r3, [sp, #4]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	9301      	str	r3, [sp, #4]
        if (count > 1000U)
 8004fa2:	9b01      	ldr	r3, [sp, #4]
 8004fa4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fa8:	d8dd      	bhi.n	8004f66 <USB_HC_Halt+0x82>
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004faa:	6813      	ldr	r3, [r2, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	dbf5      	blt.n	8004f9c <USB_HC_Halt+0xb8>
 8004fb0:	e7d9      	b.n	8004f66 <USB_HC_Halt+0x82>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004fb2:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004fb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fba:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8004fbe:	e7d2      	b.n	8004f66 <USB_HC_Halt+0x82>

08004fc0 <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004fc0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8004fc4:	4a06      	ldr	r2, [pc, #24]	; (8004fe0 <USB_DoPing+0x20>)
 8004fc6:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8004fca:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004fce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004fd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8004fd6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

  return HAL_OK;
}
 8004fda:	2000      	movs	r0, #0
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	80080000 	.word	0x80080000

08004fe4 <USB_HC_StartXfer>:
{
 8004fe4:	b530      	push	{r4, r5, lr}
 8004fe6:	b085      	sub	sp, #20
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004fe8:	784b      	ldrb	r3, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004fea:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004fec:	f414 7f80 	tst.w	r4, #256	; 0x100
 8004ff0:	d007      	beq.n	8005002 <USB_HC_StartXfer+0x1e>
 8004ff2:	790c      	ldrb	r4, [r1, #4]
 8004ff4:	b92c      	cbnz	r4, 8005002 <USB_HC_StartXfer+0x1e>
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004ff6:	2a01      	cmp	r2, #1
 8004ff8:	d064      	beq.n	80050c4 <USB_HC_StartXfer+0xe0>
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004ffa:	b912      	cbnz	r2, 8005002 <USB_HC_StartXfer+0x1e>
 8004ffc:	794c      	ldrb	r4, [r1, #5]
 8004ffe:	2c01      	cmp	r4, #1
 8005000:	d06d      	beq.n	80050de <USB_HC_StartXfer+0xfa>
  if (hc->xfer_len > 0U)
 8005002:	694d      	ldr	r5, [r1, #20]
 8005004:	2d00      	cmp	r5, #0
 8005006:	d06e      	beq.n	80050e6 <USB_HC_StartXfer+0x102>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005008:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800500c:	1e6c      	subs	r4, r5, #1
 800500e:	4464      	add	r4, ip
 8005010:	fbb4 f4fc 	udiv	r4, r4, ip
 8005014:	b2a4      	uxth	r4, r4
 8005016:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 800501a:	bf28      	it	cs
 800501c:	f44f 7480 	movcs.w	r4, #256	; 0x100
 8005020:	46a4      	mov	ip, r4
  if (hc->ep_is_in != 0U)
 8005022:	78cc      	ldrb	r4, [r1, #3]
 8005024:	b114      	cbz	r4, 800502c <USB_HC_StartXfer+0x48>
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005026:	890d      	ldrh	r5, [r1, #8]
 8005028:	fb0c f505 	mul.w	r5, ip, r5
 800502c:	610d      	str	r5, [r1, #16]
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800502e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005032:	f503 6ea0 	add.w	lr, r3, #1280	; 0x500
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005036:	7a8c      	ldrb	r4, [r1, #10]
 8005038:	0764      	lsls	r4, r4, #29
 800503a:	f004 44c0 	and.w	r4, r4, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800503e:	ea44 44cc 	orr.w	r4, r4, ip, lsl #19
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005042:	f3c5 0512 	ubfx	r5, r5, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005046:	432c      	orrs	r4, r5
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005048:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
  if (dma != 0U)
 800504c:	b112      	cbz	r2, 8005054 <USB_HC_StartXfer+0x70>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800504e:	68cc      	ldr	r4, [r1, #12]
 8005050:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005054:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 8005058:	f8dc 4008 	ldr.w	r4, [ip, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800505c:	f8d3 5500 	ldr.w	r5, [r3, #1280]	; 0x500
 8005060:	f025 5500 	bic.w	r5, r5, #536870912	; 0x20000000
 8005064:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005068:	f8d3 5500 	ldr.w	r5, [r3, #1280]	; 0x500
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800506c:	f084 0401 	eor.w	r4, r4, #1
 8005070:	f004 0401 	and.w	r4, r4, #1
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005074:	ea45 7444 	orr.w	r4, r5, r4, lsl #29
 8005078:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800507c:	f8d3 4500 	ldr.w	r4, [r3, #1280]	; 0x500
 8005080:	9403      	str	r4, [sp, #12]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005082:	9c03      	ldr	r4, [sp, #12]
 8005084:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
 8005088:	9403      	str	r4, [sp, #12]
  if (hc->ep_is_in != 0U)
 800508a:	78cc      	ldrb	r4, [r1, #3]
 800508c:	2c00      	cmp	r4, #0
 800508e:	d02d      	beq.n	80050ec <USB_HC_StartXfer+0x108>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005090:	9c03      	ldr	r4, [sp, #12]
 8005092:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8005096:	9403      	str	r4, [sp, #12]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005098:	9c03      	ldr	r4, [sp, #12]
 800509a:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 800509e:	9403      	str	r4, [sp, #12]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80050a0:	9c03      	ldr	r4, [sp, #12]
 80050a2:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  if (dma != 0U) /* dma mode */
 80050a6:	2a00      	cmp	r2, #0
 80050a8:	d137      	bne.n	800511a <USB_HC_StartXfer+0x136>
  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80050aa:	78cb      	ldrb	r3, [r1, #3]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d134      	bne.n	800511a <USB_HC_StartXfer+0x136>
 80050b0:	694b      	ldr	r3, [r1, #20]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d031      	beq.n	800511a <USB_HC_StartXfer+0x136>
    switch (hc->ep_type)
 80050b6:	79ca      	ldrb	r2, [r1, #7]
 80050b8:	2a03      	cmp	r2, #3
 80050ba:	d827      	bhi.n	800510c <USB_HC_StartXfer+0x128>
 80050bc:	e8df f002 	tbb	[pc, r2]
 80050c0:	301b301b 	.word	0x301b301b
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80050c4:	79cc      	ldrb	r4, [r1, #7]
 80050c6:	f014 0ffd 	tst.w	r4, #253	; 0xfd
 80050ca:	d19a      	bne.n	8005002 <USB_HC_StartXfer+0x1e>
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80050cc:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 80050d0:	f8d4 550c 	ldr.w	r5, [r4, #1292]	; 0x50c
 80050d4:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 80050d8:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
 80050dc:	e791      	b.n	8005002 <USB_HC_StartXfer+0x1e>
      (void)USB_DoPing(USBx, hc->ch_num);
 80050de:	4619      	mov	r1, r3
 80050e0:	f7ff ff6e 	bl	8004fc0 <USB_DoPing>
      return HAL_OK;
 80050e4:	e019      	b.n	800511a <USB_HC_StartXfer+0x136>
    num_packets = 1U;
 80050e6:	f04f 0c01 	mov.w	ip, #1
 80050ea:	e79a      	b.n	8005022 <USB_HC_StartXfer+0x3e>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80050ec:	9c03      	ldr	r4, [sp, #12]
 80050ee:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
 80050f2:	9403      	str	r4, [sp, #12]
 80050f4:	e7d0      	b.n	8005098 <USB_HC_StartXfer+0xb4>
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80050f6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80050f8:	b292      	uxth	r2, r2
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80050fa:	3303      	adds	r3, #3
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80050fc:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8005100:	429a      	cmp	r2, r3
 8005102:	d203      	bcs.n	800510c <USB_HC_StartXfer+0x128>
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005104:	6983      	ldr	r3, [r0, #24]
 8005106:	f043 0320 	orr.w	r3, r3, #32
 800510a:	6183      	str	r3, [r0, #24]
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800510c:	2300      	movs	r3, #0
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	8a8b      	ldrh	r3, [r1, #20]
 8005112:	784a      	ldrb	r2, [r1, #1]
 8005114:	68c9      	ldr	r1, [r1, #12]
 8005116:	f7ff fd23 	bl	8004b60 <USB_WritePacket>
}
 800511a:	2000      	movs	r0, #0
 800511c:	b005      	add	sp, #20
 800511e:	bd30      	pop	{r4, r5, pc}
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005120:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8005124:	b292      	uxth	r2, r2
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005126:	3303      	adds	r3, #3
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005128:	f3c3 038f 	ubfx	r3, r3, #2, #16
 800512c:	429a      	cmp	r2, r3
 800512e:	d2ed      	bcs.n	800510c <USB_HC_StartXfer+0x128>
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005130:	6983      	ldr	r3, [r0, #24]
 8005132:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005136:	6183      	str	r3, [r0, #24]
 8005138:	e7e8      	b.n	800510c <USB_HC_StartXfer+0x128>

0800513a <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800513a:	b530      	push	{r4, r5, lr}
 800513c:	b083      	sub	sp, #12
 800513e:	4604      	mov	r4, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t count = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	9301      	str	r3, [sp, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005144:	6883      	ldr	r3, [r0, #8]
 8005146:	f023 0301 	bic.w	r3, r3, #1
 800514a:	6083      	str	r3, [r0, #8]
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800514c:	2110      	movs	r1, #16
 800514e:	f7ff fcb9 	bl	8004ac4 <USB_FlushTxFifo>
 8005152:	4605      	mov	r5, r0
  {
    ret = HAL_ERROR;
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005154:	4620      	mov	r0, r4
 8005156:	f7ff fcdd 	bl	8004b14 <USB_FlushRxFifo>
 800515a:	4305      	orrs	r5, r0
 800515c:	f015 0fff 	tst.w	r5, #255	; 0xff
  {
    ret = HAL_ERROR;
 8005160:	bf14      	ite	ne
 8005162:	2001      	movne	r0, #1
 8005164:	2000      	moveq	r0, #0
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005166:	f504 61a0 	add.w	r1, r4, #1280	; 0x500
 800516a:	f504 6ce0 	add.w	ip, r4, #1792	; 0x700
    ret = HAL_ERROR;
 800516e:	460a      	mov	r2, r1
  {
    value = USBx_HC(i)->HCCHAR;
 8005170:	6813      	ldr	r3, [r2, #0]
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005172:	f023 2380 	bic.w	r3, r3, #2147516416	; 0x80008000
 8005176:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800517a:	f842 3b20 	str.w	r3, [r2], #32
  for (i = 0U; i <= 15U; i++)
 800517e:	4562      	cmp	r2, ip
 8005180:	d1f6      	bne.n	8005170 <USB_StopHost+0x36>
 8005182:	e002      	b.n	800518a <USB_StopHost+0x50>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005184:	3120      	adds	r1, #32
 8005186:	4561      	cmp	r1, ip
 8005188:	d011      	beq.n	80051ae <USB_StopHost+0x74>
  {
    value = USBx_HC(i)->HCCHAR;
 800518a:	460a      	mov	r2, r1
 800518c:	680b      	ldr	r3, [r1, #0]
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800518e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005192:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8005196:	600b      	str	r3, [r1, #0]

    do
    {
      count++;
 8005198:	9b01      	ldr	r3, [sp, #4]
 800519a:	3301      	adds	r3, #1
 800519c:	9301      	str	r3, [sp, #4]

      if (count > 1000U)
 800519e:	9b01      	ldr	r3, [sp, #4]
 80051a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051a4:	d8ee      	bhi.n	8005184 <USB_StopHost+0x4a>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80051a6:	6813      	ldr	r3, [r2, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	dbf5      	blt.n	8005198 <USB_StopHost+0x5e>
 80051ac:	e7ea      	b.n	8005184 <USB_StopHost+0x4a>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80051ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051b2:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 80051b6:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80051b8:	68a3      	ldr	r3, [r4, #8]
 80051ba:	f043 0301 	orr.w	r3, r3, #1
 80051be:	60a3      	str	r3, [r4, #8]

  (void)USB_EnableGlobalInt(USBx);

  return ret;
}
 80051c0:	b003      	add	sp, #12
 80051c2:	bd30      	pop	{r4, r5, pc}

080051c4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80051c4:	b508      	push	{r3, lr}
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80051c6:	4903      	ldr	r1, [pc, #12]	; (80051d4 <MX_FATFS_Init+0x10>)
 80051c8:	4803      	ldr	r0, [pc, #12]	; (80051d8 <MX_FATFS_Init+0x14>)
 80051ca:	f001 f9bb 	bl	8006544 <FATFS_LinkDriver>
 80051ce:	4b03      	ldr	r3, [pc, #12]	; (80051dc <MX_FATFS_Init+0x18>)
 80051d0:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80051d2:	bd08      	pop	{r3, pc}
 80051d4:	2000303c 	.word	0x2000303c
 80051d8:	08006d48 	.word	0x08006d48
 80051dc:	20003040 	.word	0x20003040

080051e0 <USBH_initialize>:
DSTATUS USBH_initialize(BYTE lun)
{
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
}
 80051e0:	2000      	movs	r0, #0
 80051e2:	4770      	bx	lr

080051e4 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80051e4:	b508      	push	{r3, lr}
 80051e6:	4601      	mov	r1, r0
  DRESULT res = RES_ERROR;

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80051e8:	4803      	ldr	r0, [pc, #12]	; (80051f8 <USBH_status+0x14>)
 80051ea:	f000 fb45 	bl	8005878 <USBH_MSC_UnitIsReady>
  {
    res = RES_ERROR;
  }

  return res;
}
 80051ee:	fab0 f080 	clz	r0, r0
 80051f2:	0940      	lsrs	r0, r0, #5
 80051f4:	bd08      	pop	{r3, pc}
 80051f6:	bf00      	nop
 80051f8:	20003054 	.word	0x20003054

080051fc <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80051fc:	b510      	push	{r4, lr}
 80051fe:	b090      	sub	sp, #64	; 0x40
 8005200:	4604      	mov	r4, r0
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8005202:	9300      	str	r3, [sp, #0]
 8005204:	460b      	mov	r3, r1
 8005206:	4601      	mov	r1, r0
 8005208:	480c      	ldr	r0, [pc, #48]	; (800523c <USBH_read+0x40>)
 800520a:	f000 fb6c 	bl	80058e6 <USBH_MSC_Read>
 800520e:	b908      	cbnz	r0, 8005214 <USBH_read+0x18>
      break;
    }
  }

  return res;
}
 8005210:	b010      	add	sp, #64	; 0x40
 8005212:	bd10      	pop	{r4, pc}
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005214:	aa03      	add	r2, sp, #12
 8005216:	4621      	mov	r1, r4
 8005218:	4808      	ldr	r0, [pc, #32]	; (800523c <USBH_read+0x40>)
 800521a:	f000 fb3f 	bl	800589c <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 800521e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8005222:	2b28      	cmp	r3, #40	; 0x28
 8005224:	d006      	beq.n	8005234 <USBH_read+0x38>
 8005226:	2b3a      	cmp	r3, #58	; 0x3a
 8005228:	d006      	beq.n	8005238 <USBH_read+0x3c>
      res = RES_NOTRDY;
 800522a:	2b04      	cmp	r3, #4
 800522c:	bf14      	ite	ne
 800522e:	2001      	movne	r0, #1
 8005230:	2003      	moveq	r0, #3
 8005232:	e7ed      	b.n	8005210 <USBH_read+0x14>
 8005234:	2003      	movs	r0, #3
 8005236:	e7eb      	b.n	8005210 <USBH_read+0x14>
 8005238:	2003      	movs	r0, #3
 800523a:	e7e9      	b.n	8005210 <USBH_read+0x14>
 800523c:	20003054 	.word	0x20003054

08005240 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005240:	b530      	push	{r4, r5, lr}
 8005242:	b08f      	sub	sp, #60	; 0x3c
 8005244:	460c      	mov	r4, r1
 8005246:	4615      	mov	r5, r2
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  switch (cmd)
 8005248:	2903      	cmp	r1, #3
 800524a:	d803      	bhi.n	8005254 <USBH_ioctl+0x14>
 800524c:	e8df f001 	tbb	[pc, r1]
 8005250:	170d0422 	.word	0x170d0422
 8005254:	2004      	movs	r0, #4
 8005256:	e01e      	b.n	8005296 <USBH_ioctl+0x56>
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005258:	aa01      	add	r2, sp, #4
 800525a:	4601      	mov	r1, r0
 800525c:	4812      	ldr	r0, [pc, #72]	; (80052a8 <USBH_ioctl+0x68>)
 800525e:	f000 fb1d 	bl	800589c <USBH_MSC_GetLUNInfo>
 8005262:	b9d0      	cbnz	r0, 800529a <USBH_ioctl+0x5a>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8005264:	9b02      	ldr	r3, [sp, #8]
 8005266:	602b      	str	r3, [r5, #0]
      res = RES_OK;
 8005268:	e015      	b.n	8005296 <USBH_ioctl+0x56>
    }
    break;

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800526a:	aa01      	add	r2, sp, #4
 800526c:	4601      	mov	r1, r0
 800526e:	480e      	ldr	r0, [pc, #56]	; (80052a8 <USBH_ioctl+0x68>)
 8005270:	f000 fb14 	bl	800589c <USBH_MSC_GetLUNInfo>
 8005274:	b998      	cbnz	r0, 800529e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8005276:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800527a:	602b      	str	r3, [r5, #0]
      res = RES_OK;
 800527c:	e00b      	b.n	8005296 <USBH_ioctl+0x56>
    break;

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800527e:	aa01      	add	r2, sp, #4
 8005280:	4601      	mov	r1, r0
 8005282:	4809      	ldr	r0, [pc, #36]	; (80052a8 <USBH_ioctl+0x68>)
 8005284:	f000 fb0a 	bl	800589c <USBH_MSC_GetLUNInfo>
 8005288:	b958      	cbnz	r0, 80052a2 <USBH_ioctl+0x62>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800528a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800528e:	0a5b      	lsrs	r3, r3, #9
 8005290:	602b      	str	r3, [r5, #0]
      res = RES_OK;
 8005292:	e000      	b.n	8005296 <USBH_ioctl+0x56>
    res = RES_OK;
 8005294:	4608      	mov	r0, r1
  default:
    res = RES_PARERR;
  }

  return res;
}
 8005296:	b00f      	add	sp, #60	; 0x3c
 8005298:	bd30      	pop	{r4, r5, pc}
      res = RES_ERROR;
 800529a:	4620      	mov	r0, r4
 800529c:	e7fb      	b.n	8005296 <USBH_ioctl+0x56>
      res = RES_ERROR;
 800529e:	2001      	movs	r0, #1
 80052a0:	e7f9      	b.n	8005296 <USBH_ioctl+0x56>
      res = RES_ERROR;
 80052a2:	2001      	movs	r0, #1
 80052a4:	e7f7      	b.n	8005296 <USBH_ioctl+0x56>
 80052a6:	bf00      	nop
 80052a8:	20003054 	.word	0x20003054

080052ac <USBH_write>:
{
 80052ac:	b510      	push	{r4, lr}
 80052ae:	b090      	sub	sp, #64	; 0x40
 80052b0:	4604      	mov	r4, r0
  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	460b      	mov	r3, r1
 80052b6:	4601      	mov	r1, r0
 80052b8:	480f      	ldr	r0, [pc, #60]	; (80052f8 <USBH_write+0x4c>)
 80052ba:	f000 fb64 	bl	8005986 <USBH_MSC_Write>
 80052be:	b908      	cbnz	r0, 80052c4 <USBH_write+0x18>
}
 80052c0:	b010      	add	sp, #64	; 0x40
 80052c2:	bd10      	pop	{r4, pc}
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80052c4:	aa03      	add	r2, sp, #12
 80052c6:	4621      	mov	r1, r4
 80052c8:	480b      	ldr	r0, [pc, #44]	; (80052f8 <USBH_write+0x4c>)
 80052ca:	f000 fae7 	bl	800589c <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 80052ce:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80052d2:	2b27      	cmp	r3, #39	; 0x27
 80052d4:	d00c      	beq.n	80052f0 <USBH_write+0x44>
 80052d6:	d906      	bls.n	80052e6 <USBH_write+0x3a>
 80052d8:	2b28      	cmp	r3, #40	; 0x28
 80052da:	d00b      	beq.n	80052f4 <USBH_write+0x48>
 80052dc:	2b3a      	cmp	r3, #58	; 0x3a
 80052de:	bf14      	ite	ne
 80052e0:	2001      	movne	r0, #1
 80052e2:	2003      	moveq	r0, #3
 80052e4:	e7ec      	b.n	80052c0 <USBH_write+0x14>
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	bf14      	ite	ne
 80052ea:	2001      	movne	r0, #1
 80052ec:	2003      	moveq	r0, #3
 80052ee:	e7e7      	b.n	80052c0 <USBH_write+0x14>
      res = RES_WRPRT;
 80052f0:	2002      	movs	r0, #2
 80052f2:	e7e5      	b.n	80052c0 <USBH_write+0x14>
    switch (info.sense.asc)
 80052f4:	2003      	movs	r0, #3
 80052f6:	e7e3      	b.n	80052c0 <USBH_write+0x14>
 80052f8:	20003054 	.word	0x20003054

080052fc <USBH_MSC_SOFProcess>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
}
 80052fc:	2000      	movs	r0, #0
 80052fe:	4770      	bx	lr

08005300 <USBH_MSC_Process>:
{
 8005300:	b570      	push	{r4, r5, r6, lr}
 8005302:	4605      	mov	r5, r0
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005304:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8005308:	69de      	ldr	r6, [r3, #28]
  switch (MSC_Handle->state)
 800530a:	7b30      	ldrb	r0, [r6, #12]
 800530c:	b118      	cbz	r0, 8005316 <USBH_MSC_Process+0x16>
  USBH_StatusTypeDef error = USBH_BUSY;
 800530e:	3801      	subs	r0, #1
 8005310:	bf18      	it	ne
 8005312:	2001      	movne	r0, #1
}
 8005314:	bd70      	pop	{r4, r5, r6, pc}
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8005316:	f8b6 10f8 	ldrh.w	r1, [r6, #248]	; 0xf8
 800531a:	7833      	ldrb	r3, [r6, #0]
 800531c:	428b      	cmp	r3, r1
 800531e:	f240 8118 	bls.w	8005552 <USBH_MSC_Process+0x252>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8005322:	2334      	movs	r3, #52	; 0x34
 8005324:	fb03 6301 	mla	r3, r3, r1, r6
 8005328:	2201      	movs	r2, #1
 800532a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800532e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8005332:	2b08      	cmp	r3, #8
 8005334:	f200 8119 	bhi.w	800556a <USBH_MSC_Process+0x26a>
 8005338:	e8df f013 	tbh	[pc, r3, lsl #1]
 800533c:	01170009 	.word	0x01170009
 8005340:	00870044 	.word	0x00870044
 8005344:	00bc0015 	.word	0x00bc0015
 8005348:	01170117 	.word	0x01170117
 800534c:	0106      	.short	0x0106
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800534e:	2334      	movs	r3, #52	; 0x34
 8005350:	fb03 6101 	mla	r1, r3, r1, r6
 8005354:	2304      	movs	r3, #4
 8005356:	f881 3090 	strb.w	r3, [r1, #144]	; 0x90
            MSC_Handle->timer = phost->Timer;
 800535a:	f8d5 33c4 	ldr.w	r3, [r5, #964]	; 0x3c4
 800535e:	f8c6 30fc 	str.w	r3, [r6, #252]	; 0xfc
  USBH_StatusTypeDef error = USBH_BUSY;
 8005362:	2001      	movs	r0, #1
            break;
 8005364:	e7d6      	b.n	8005314 <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8005366:	2234      	movs	r2, #52	; 0x34
 8005368:	fb02 6201 	mla	r2, r2, r1, r6
 800536c:	329f      	adds	r2, #159	; 0x9f
 800536e:	b2c9      	uxtb	r1, r1
 8005370:	4628      	mov	r0, r5
 8005372:	f000 fd29 	bl	8005dc8 <USBH_MSC_SCSI_Inquiry>
            if (scsi_status == USBH_OK)
 8005376:	b948      	cbnz	r0, 800538c <USBH_MSC_Process+0x8c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8005378:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 800537c:	2234      	movs	r2, #52	; 0x34
 800537e:	fb02 6603 	mla	r6, r2, r3, r6
 8005382:	2302      	movs	r3, #2
 8005384:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY;
 8005388:	2001      	movs	r0, #1
 800538a:	e7c3      	b.n	8005314 <USBH_MSC_Process+0x14>
            if (scsi_status == USBH_FAIL)
 800538c:	2802      	cmp	r0, #2
 800538e:	d109      	bne.n	80053a4 <USBH_MSC_Process+0xa4>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005390:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8005394:	2234      	movs	r2, #52	; 0x34
 8005396:	fb02 6603 	mla	r6, r2, r3, r6
 800539a:	2305      	movs	r3, #5
 800539c:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY;
 80053a0:	2001      	movs	r0, #1
 80053a2:	e7b7      	b.n	8005314 <USBH_MSC_Process+0x14>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80053a4:	2804      	cmp	r0, #4
 80053a6:	f040 80e2 	bne.w	800556e <USBH_MSC_Process+0x26e>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80053aa:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 80053ae:	2234      	movs	r2, #52	; 0x34
 80053b0:	fb02 6603 	mla	r6, r2, r3, r6
 80053b4:	2301      	movs	r3, #1
 80053b6:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80053ba:	2202      	movs	r2, #2
 80053bc:	f886 2091 	strb.w	r2, [r6, #145]	; 0x91
  USBH_StatusTypeDef error = USBH_BUSY;
 80053c0:	4618      	mov	r0, r3
 80053c2:	e7a7      	b.n	8005314 <USBH_MSC_Process+0x14>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80053c4:	b2c9      	uxtb	r1, r1
 80053c6:	4628      	mov	r0, r5
 80053c8:	f000 fc90 	bl	8005cec <USBH_MSC_SCSI_TestUnitReady>
            if (ready_status == USBH_OK)
 80053cc:	b9a8      	cbnz	r0, 80053fa <USBH_MSC_Process+0xfa>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80053ce:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 80053d2:	2234      	movs	r2, #52	; 0x34
 80053d4:	fb02 6603 	mla	r6, r2, r3, r6
 80053d8:	f896 3092 	ldrb.w	r3, [r6, #146]	; 0x92
 80053dc:	3b00      	subs	r3, #0
 80053de:	bf18      	it	ne
 80053e0:	2301      	movne	r3, #1
 80053e2:	f886 30c1 	strb.w	r3, [r6, #193]	; 0xc1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80053e6:	2303      	movs	r3, #3
 80053e8:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80053ec:	2300      	movs	r3, #0
 80053ee:	f886 3091 	strb.w	r3, [r6, #145]	; 0x91
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80053f2:	f886 3092 	strb.w	r3, [r6, #146]	; 0x92
  USBH_StatusTypeDef error = USBH_BUSY;
 80053f6:	2001      	movs	r0, #1
 80053f8:	e78c      	b.n	8005314 <USBH_MSC_Process+0x14>
            if (ready_status == USBH_FAIL)
 80053fa:	2802      	cmp	r0, #2
 80053fc:	d115      	bne.n	800542a <USBH_MSC_Process+0x12a>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80053fe:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8005402:	2234      	movs	r2, #52	; 0x34
 8005404:	fb02 6603 	mla	r6, r2, r3, r6
 8005408:	f896 3092 	ldrb.w	r3, [r6, #146]	; 0x92
 800540c:	3b02      	subs	r3, #2
 800540e:	bf18      	it	ne
 8005410:	2301      	movne	r3, #1
 8005412:	f886 30c1 	strb.w	r3, [r6, #193]	; 0xc1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005416:	2305      	movs	r3, #5
 8005418:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800541c:	2001      	movs	r0, #1
 800541e:	f886 0091 	strb.w	r0, [r6, #145]	; 0x91
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8005422:	2302      	movs	r3, #2
 8005424:	f886 3092 	strb.w	r3, [r6, #146]	; 0x92
 8005428:	e774      	b.n	8005314 <USBH_MSC_Process+0x14>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800542a:	2804      	cmp	r0, #4
 800542c:	f040 80a1 	bne.w	8005572 <USBH_MSC_Process+0x272>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005430:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8005434:	2234      	movs	r2, #52	; 0x34
 8005436:	fb02 6603 	mla	r6, r2, r3, r6
 800543a:	2301      	movs	r3, #1
 800543c:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005440:	2202      	movs	r2, #2
 8005442:	f886 2091 	strb.w	r2, [r6, #145]	; 0x91
  USBH_StatusTypeDef error = USBH_BUSY;
 8005446:	4618      	mov	r0, r3
 8005448:	e764      	b.n	8005314 <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800544a:	2234      	movs	r2, #52	; 0x34
 800544c:	fb02 6201 	mla	r2, r2, r1, r6
 8005450:	3294      	adds	r2, #148	; 0x94
 8005452:	b2c9      	uxtb	r1, r1
 8005454:	4628      	mov	r0, r5
 8005456:	f000 fc70 	bl	8005d3a <USBH_MSC_SCSI_ReadCapacity>
            if (scsi_status == USBH_OK)
 800545a:	b970      	cbnz	r0, 800547a <USBH_MSC_Process+0x17a>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 800545c:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005460:	2234      	movs	r2, #52	; 0x34
 8005462:	fb02 6203 	mla	r2, r2, r3, r6
 8005466:	2001      	movs	r0, #1
 8005468:	f882 0090 	strb.w	r0, [r2, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800546c:	2100      	movs	r1, #0
 800546e:	f882 1091 	strb.w	r1, [r2, #145]	; 0x91
              MSC_Handle->current_lun++;
 8005472:	4403      	add	r3, r0
 8005474:	f8a6 30f8 	strh.w	r3, [r6, #248]	; 0xf8
 8005478:	e74c      	b.n	8005314 <USBH_MSC_Process+0x14>
            else if (scsi_status == USBH_FAIL)
 800547a:	2802      	cmp	r0, #2
 800547c:	d003      	beq.n	8005486 <USBH_MSC_Process+0x186>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800547e:	2804      	cmp	r0, #4
 8005480:	d00b      	beq.n	800549a <USBH_MSC_Process+0x19a>
  USBH_StatusTypeDef error = USBH_BUSY;
 8005482:	2001      	movs	r0, #1
 8005484:	e746      	b.n	8005314 <USBH_MSC_Process+0x14>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005486:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 800548a:	2234      	movs	r2, #52	; 0x34
 800548c:	fb02 6603 	mla	r6, r2, r3, r6
 8005490:	2305      	movs	r3, #5
 8005492:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY;
 8005496:	2001      	movs	r0, #1
 8005498:	e73c      	b.n	8005314 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800549a:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 800549e:	2234      	movs	r2, #52	; 0x34
 80054a0:	fb02 6603 	mla	r6, r2, r3, r6
 80054a4:	2301      	movs	r3, #1
 80054a6:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80054aa:	2202      	movs	r2, #2
 80054ac:	f886 2091 	strb.w	r2, [r6, #145]	; 0x91
  USBH_StatusTypeDef error = USBH_BUSY;
 80054b0:	4618      	mov	r0, r3
 80054b2:	e72f      	b.n	8005314 <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80054b4:	2234      	movs	r2, #52	; 0x34
 80054b6:	fb02 6201 	mla	r2, r2, r1, r6
 80054ba:	329c      	adds	r2, #156	; 0x9c
 80054bc:	b2c9      	uxtb	r1, r1
 80054be:	4628      	mov	r0, r5
 80054c0:	f000 fce7 	bl	8005e92 <USBH_MSC_SCSI_RequestSense>
            if (scsi_status == USBH_OK)
 80054c4:	bb28      	cbnz	r0, 8005512 <USBH_MSC_Process+0x212>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80054c6:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 80054ca:	2234      	movs	r2, #52	; 0x34
 80054cc:	fb02 6203 	mla	r2, r2, r3, r6
 80054d0:	f892 209c 	ldrb.w	r2, [r2, #156]	; 0x9c
 80054d4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 80054d8:	2a02      	cmp	r2, #2
 80054da:	d009      	beq.n	80054f0 <USBH_MSC_Process+0x1f0>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80054dc:	2234      	movs	r2, #52	; 0x34
 80054de:	fb02 6203 	mla	r2, r2, r3, r6
 80054e2:	2001      	movs	r0, #1
 80054e4:	f882 0090 	strb.w	r0, [r2, #144]	; 0x90
              MSC_Handle->current_lun++;
 80054e8:	4403      	add	r3, r0
 80054ea:	f8a6 30f8 	strh.w	r3, [r6, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 80054ee:	e711      	b.n	8005314 <USBH_MSC_Process+0x14>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80054f0:	f8d5 23c4 	ldr.w	r2, [r5, #964]	; 0x3c4
 80054f4:	f8d6 10fc 	ldr.w	r1, [r6, #252]	; 0xfc
 80054f8:	1a52      	subs	r2, r2, r1
 80054fa:	f242 710f 	movw	r1, #9999	; 0x270f
 80054fe:	428a      	cmp	r2, r1
 8005500:	d8ec      	bhi.n	80054dc <USBH_MSC_Process+0x1dc>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8005502:	2234      	movs	r2, #52	; 0x34
 8005504:	fb02 6303 	mla	r3, r2, r3, r6
 8005508:	2202      	movs	r2, #2
 800550a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY;
 800550e:	2001      	movs	r0, #1
                  break;
 8005510:	e700      	b.n	8005314 <USBH_MSC_Process+0x14>
            if (scsi_status == USBH_FAIL)
 8005512:	2802      	cmp	r0, #2
 8005514:	d109      	bne.n	800552a <USBH_MSC_Process+0x22a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8005516:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 800551a:	2234      	movs	r2, #52	; 0x34
 800551c:	fb02 6603 	mla	r6, r2, r3, r6
 8005520:	2308      	movs	r3, #8
 8005522:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY;
 8005526:	2001      	movs	r0, #1
 8005528:	e6f4      	b.n	8005314 <USBH_MSC_Process+0x14>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800552a:	2804      	cmp	r0, #4
 800552c:	d123      	bne.n	8005576 <USBH_MSC_Process+0x276>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800552e:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8005532:	2234      	movs	r2, #52	; 0x34
 8005534:	fb02 6603 	mla	r6, r2, r3, r6
 8005538:	2301      	movs	r3, #1
 800553a:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800553e:	2202      	movs	r2, #2
 8005540:	f886 2091 	strb.w	r2, [r6, #145]	; 0x91
  USBH_StatusTypeDef error = USBH_BUSY;
 8005544:	4618      	mov	r0, r3
 8005546:	e6e5      	b.n	8005314 <USBH_MSC_Process+0x14>
            MSC_Handle->current_lun++;
 8005548:	3101      	adds	r1, #1
 800554a:	f8a6 10f8 	strh.w	r1, [r6, #248]	; 0xf8
  USBH_StatusTypeDef error = USBH_BUSY;
 800554e:	2001      	movs	r0, #1
            break;
 8005550:	e6e0      	b.n	8005314 <USBH_MSC_Process+0x14>
        MSC_Handle->current_lun = 0U;
 8005552:	2300      	movs	r3, #0
 8005554:	f8a6 30f8 	strh.w	r3, [r6, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8005558:	2401      	movs	r4, #1
 800555a:	7334      	strb	r4, [r6, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800555c:	f8d5 33d4 	ldr.w	r3, [r5, #980]	; 0x3d4
 8005560:	2102      	movs	r1, #2
 8005562:	4628      	mov	r0, r5
 8005564:	4798      	blx	r3
  USBH_StatusTypeDef error = USBH_BUSY;
 8005566:	4620      	mov	r0, r4
 8005568:	e6d4      	b.n	8005314 <USBH_MSC_Process+0x14>
 800556a:	2001      	movs	r0, #1
 800556c:	e6d2      	b.n	8005314 <USBH_MSC_Process+0x14>
 800556e:	2001      	movs	r0, #1
 8005570:	e6d0      	b.n	8005314 <USBH_MSC_Process+0x14>
 8005572:	2001      	movs	r0, #1
 8005574:	e6ce      	b.n	8005314 <USBH_MSC_Process+0x14>
 8005576:	2001      	movs	r0, #1
 8005578:	e6cc      	b.n	8005314 <USBH_MSC_Process+0x14>

0800557a <USBH_MSC_ClassRequest>:
{
 800557a:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800557c:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8005580:	69dc      	ldr	r4, [r3, #28]
  switch (MSC_Handle->req_state)
 8005582:	7ba3      	ldrb	r3, [r4, #14]
 8005584:	2b02      	cmp	r3, #2
 8005586:	d004      	beq.n	8005592 <USBH_MSC_ClassRequest+0x18>
 8005588:	2b03      	cmp	r3, #3
 800558a:	d028      	beq.n	80055de <USBH_MSC_ClassRequest+0x64>
 800558c:	b10b      	cbz	r3, 8005592 <USBH_MSC_ClassRequest+0x18>
 800558e:	2001      	movs	r0, #1
}
 8005590:	bd10      	pop	{r4, pc}
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8005592:	4621      	mov	r1, r4
 8005594:	f000 fa54 	bl	8005a40 <USBH_MSC_BOT_REQ_GetMaxLUN>
      if (status == USBH_NOT_SUPPORTED)
 8005598:	2803      	cmp	r0, #3
 800559a:	d013      	beq.n	80055c4 <USBH_MSC_ClassRequest+0x4a>
      if (status == USBH_OK)
 800559c:	2800      	cmp	r0, #0
 800559e:	d1f7      	bne.n	8005590 <USBH_MSC_ClassRequest+0x16>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80055a0:	7823      	ldrb	r3, [r4, #0]
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d90f      	bls.n	80055c6 <USBH_MSC_ClassRequest+0x4c>
 80055a6:	2302      	movs	r3, #2
 80055a8:	7023      	strb	r3, [r4, #0]
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80055aa:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
          MSC_Handle->unit[i].state_changed = 0U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80055b4:	2302      	movs	r3, #2
 80055b6:	f884 30c6 	strb.w	r3, [r4, #198]	; 0xc6
          MSC_Handle->unit[i].state_changed = 0U;
 80055ba:	2300      	movs	r3, #0
 80055bc:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
  USBH_StatusTypeDef status = USBH_BUSY;
 80055c0:	2000      	movs	r0, #0
 80055c2:	e7e5      	b.n	8005590 <USBH_MSC_ClassRequest+0x16>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80055c4:	2300      	movs	r3, #0
 80055c6:	3301      	adds	r3, #1
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	7023      	strb	r3, [r4, #0]
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80055cc:	2202      	movs	r2, #2
 80055ce:	f884 2092 	strb.w	r2, [r4, #146]	; 0x92
          MSC_Handle->unit[i].state_changed = 0U;
 80055d2:	2200      	movs	r2, #0
 80055d4:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d9f1      	bls.n	80055c0 <USBH_MSC_ClassRequest+0x46>
 80055dc:	e7ea      	b.n	80055b4 <USBH_MSC_ClassRequest+0x3a>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 80055de:	2100      	movs	r1, #0
 80055e0:	f000 fed3 	bl	800638a <USBH_ClrFeature>
 80055e4:	b918      	cbnz	r0, 80055ee <USBH_MSC_ClassRequest+0x74>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80055e6:	7be3      	ldrb	r3, [r4, #15]
 80055e8:	73a3      	strb	r3, [r4, #14]
  USBH_StatusTypeDef status = USBH_BUSY;
 80055ea:	2001      	movs	r0, #1
 80055ec:	e7d0      	b.n	8005590 <USBH_MSC_ClassRequest+0x16>
 80055ee:	2001      	movs	r0, #1
  return status;
 80055f0:	e7ce      	b.n	8005590 <USBH_MSC_ClassRequest+0x16>

080055f2 <USBH_MSC_InterfaceDeInit>:
{
 80055f2:	b538      	push	{r3, r4, r5, lr}
 80055f4:	4604      	mov	r4, r0
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80055f6:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80055fa:	69dd      	ldr	r5, [r3, #28]
  if ((MSC_Handle->OutPipe) != 0U)
 80055fc:	7969      	ldrb	r1, [r5, #5]
 80055fe:	b951      	cbnz	r1, 8005616 <USBH_MSC_InterfaceDeInit+0x24>
  if ((MSC_Handle->InPipe != 0U))
 8005600:	7929      	ldrb	r1, [r5, #4]
 8005602:	b991      	cbnz	r1, 800562a <USBH_MSC_InterfaceDeInit+0x38>
    USBH_free(phost->pActiveClass->pData);
 8005604:	4628      	mov	r0, r5
 8005606:	f001 f937 	bl	8006878 <free>
    phost->pActiveClass->pData = 0U;
 800560a:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 800560e:	2200      	movs	r2, #0
 8005610:	61da      	str	r2, [r3, #28]
}
 8005612:	2000      	movs	r0, #0
 8005614:	bd38      	pop	{r3, r4, r5, pc}
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8005616:	f000 ff3b 	bl	8006490 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800561a:	7969      	ldrb	r1, [r5, #5]
 800561c:	4620      	mov	r0, r4
 800561e:	f000 ff5b 	bl	80064d8 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8005622:	2300      	movs	r3, #0
 8005624:	716b      	strb	r3, [r5, #5]
  if ((MSC_Handle->InPipe != 0U))
 8005626:	7929      	ldrb	r1, [r5, #4]
 8005628:	b141      	cbz	r1, 800563c <USBH_MSC_InterfaceDeInit+0x4a>
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800562a:	4620      	mov	r0, r4
 800562c:	f000 ff30 	bl	8006490 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8005630:	7929      	ldrb	r1, [r5, #4]
 8005632:	4620      	mov	r0, r4
 8005634:	f000 ff50 	bl	80064d8 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8005638:	2300      	movs	r3, #0
 800563a:	712b      	strb	r3, [r5, #4]
  if ((phost->pActiveClass->pData) != NULL)
 800563c:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8005640:	69dd      	ldr	r5, [r3, #28]
 8005642:	2d00      	cmp	r5, #0
 8005644:	d0e5      	beq.n	8005612 <USBH_MSC_InterfaceDeInit+0x20>
 8005646:	e7dd      	b.n	8005604 <USBH_MSC_InterfaceDeInit+0x12>

08005648 <USBH_MSC_InterfaceInit>:
{
 8005648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800564a:	b085      	sub	sp, #20
 800564c:	4604      	mov	r4, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800564e:	f8d0 137c 	ldr.w	r1, [r0, #892]	; 0x37c
 8005652:	2350      	movs	r3, #80	; 0x50
 8005654:	2206      	movs	r2, #6
 8005656:	7909      	ldrb	r1, [r1, #4]
 8005658:	f000 fd51 	bl	80060fe <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800565c:	2801      	cmp	r0, #1
 800565e:	f200 8084 	bhi.w	800576a <USBH_MSC_InterfaceInit+0x122>
 8005662:	4605      	mov	r5, r0
  status = USBH_SelectInterface(phost, interface);
 8005664:	4601      	mov	r1, r0
 8005666:	4620      	mov	r0, r4
 8005668:	f000 fd40 	bl	80060ec <USBH_SelectInterface>
  if (status != USBH_OK)
 800566c:	4607      	mov	r7, r0
 800566e:	2800      	cmp	r0, #0
 8005670:	d17f      	bne.n	8005772 <USBH_MSC_InterfaceInit+0x12a>
  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8005672:	f8d4 637c 	ldr.w	r6, [r4, #892]	; 0x37c
 8005676:	f44f 7080 	mov.w	r0, #256	; 0x100
 800567a:	f001 f8f5 	bl	8006868 <malloc>
 800567e:	61f0      	str	r0, [r6, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005680:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8005684:	69de      	ldr	r6, [r3, #28]
  if (MSC_Handle == NULL)
 8005686:	2e00      	cmp	r6, #0
 8005688:	d075      	beq.n	8005776 <USBH_MSC_InterfaceInit+0x12e>
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800568a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800568e:	2100      	movs	r1, #0
 8005690:	4630      	mov	r0, r6
 8005692:	f001 f907 	bl	80068a4 <memset>
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005696:	231a      	movs	r3, #26
 8005698:	fb03 4305 	mla	r3, r3, r5, r4
 800569c:	f893 234e 	ldrb.w	r2, [r3, #846]	; 0x34e
 80056a0:	f993 334e 	ldrsb.w	r3, [r3, #846]	; 0x34e
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	db50      	blt.n	800574a <USBH_MSC_InterfaceInit+0x102>
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80056a8:	71b2      	strb	r2, [r6, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80056aa:	231a      	movs	r3, #26
 80056ac:	fb03 4305 	mla	r3, r3, r5, r4
 80056b0:	f8b3 3350 	ldrh.w	r3, [r3, #848]	; 0x350
 80056b4:	8133      	strh	r3, [r6, #8]
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80056b6:	231a      	movs	r3, #26
 80056b8:	fb03 4305 	mla	r3, r3, r5, r4
 80056bc:	f893 2356 	ldrb.w	r2, [r3, #854]	; 0x356
 80056c0:	f993 3356 	ldrsb.w	r3, [r3, #854]	; 0x356
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	db48      	blt.n	800575a <USBH_MSC_InterfaceInit+0x112>
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80056c8:	71b2      	strb	r2, [r6, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80056ca:	201a      	movs	r0, #26
 80056cc:	fb00 4505 	mla	r5, r0, r5, r4
 80056d0:	f8b5 3358 	ldrh.w	r3, [r5, #856]	; 0x358
 80056d4:	8133      	strh	r3, [r6, #8]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80056d6:	79b1      	ldrb	r1, [r6, #6]
 80056d8:	4620      	mov	r0, r4
 80056da:	f000 fede 	bl	800649a <USBH_AllocPipe>
 80056de:	7170      	strb	r0, [r6, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80056e0:	79f1      	ldrb	r1, [r6, #7]
 80056e2:	4620      	mov	r0, r4
 80056e4:	f000 fed9 	bl	800649a <USBH_AllocPipe>
 80056e8:	7130      	strb	r0, [r6, #4]
  (void)USBH_MSC_BOT_Init(phost);
 80056ea:	4620      	mov	r0, r4
 80056ec:	f000 f9b6 	bl	8005a5c <USBH_MSC_BOT_Init>
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 80056f0:	79b2      	ldrb	r2, [r6, #6]
 80056f2:	2a00      	cmp	r2, #0
 80056f4:	d041      	beq.n	800577a <USBH_MSC_InterfaceInit+0x132>
 80056f6:	8933      	ldrh	r3, [r6, #8]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d040      	beq.n	800577e <USBH_MSC_InterfaceInit+0x136>
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80056fc:	7971      	ldrb	r1, [r6, #5]
 80056fe:	9302      	str	r3, [sp, #8]
 8005700:	2302      	movs	r3, #2
 8005702:	9301      	str	r3, [sp, #4]
 8005704:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8005708:	9300      	str	r3, [sp, #0]
 800570a:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800570e:	4620      	mov	r0, r4
 8005710:	f000 feae 	bl	8006470 <USBH_OpenPipe>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8005714:	79f2      	ldrb	r2, [r6, #7]
 8005716:	b3a2      	cbz	r2, 8005782 <USBH_MSC_InterfaceInit+0x13a>
 8005718:	8973      	ldrh	r3, [r6, #10]
 800571a:	b3a3      	cbz	r3, 8005786 <USBH_MSC_InterfaceInit+0x13e>
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800571c:	7931      	ldrb	r1, [r6, #4]
 800571e:	9302      	str	r3, [sp, #8]
 8005720:	2302      	movs	r3, #2
 8005722:	9301      	str	r3, [sp, #4]
 8005724:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800572e:	4620      	mov	r0, r4
 8005730:	f000 fe9e 	bl	8006470 <USBH_OpenPipe>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8005734:	2200      	movs	r2, #0
 8005736:	7931      	ldrb	r1, [r6, #4]
 8005738:	4620      	mov	r0, r4
 800573a:	f000 ffef 	bl	800671c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800573e:	2200      	movs	r2, #0
 8005740:	7971      	ldrb	r1, [r6, #5]
 8005742:	4620      	mov	r0, r4
 8005744:	f000 ffea 	bl	800671c <USBH_LL_SetToggle>
  return USBH_OK;
 8005748:	e010      	b.n	800576c <USBH_MSC_InterfaceInit+0x124>
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800574a:	71f2      	strb	r2, [r6, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800574c:	231a      	movs	r3, #26
 800574e:	fb03 4305 	mla	r3, r3, r5, r4
 8005752:	f8b3 3350 	ldrh.w	r3, [r3, #848]	; 0x350
 8005756:	8173      	strh	r3, [r6, #10]
 8005758:	e7ad      	b.n	80056b6 <USBH_MSC_InterfaceInit+0x6e>
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800575a:	71f2      	strb	r2, [r6, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800575c:	201a      	movs	r0, #26
 800575e:	fb00 4505 	mla	r5, r0, r5, r4
 8005762:	f8b5 3358 	ldrh.w	r3, [r5, #856]	; 0x358
 8005766:	8173      	strh	r3, [r6, #10]
 8005768:	e7b5      	b.n	80056d6 <USBH_MSC_InterfaceInit+0x8e>
    return USBH_FAIL;
 800576a:	2702      	movs	r7, #2
}
 800576c:	4638      	mov	r0, r7
 800576e:	b005      	add	sp, #20
 8005770:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return USBH_FAIL;
 8005772:	2702      	movs	r7, #2
 8005774:	e7fa      	b.n	800576c <USBH_MSC_InterfaceInit+0x124>
    return USBH_FAIL;
 8005776:	2702      	movs	r7, #2
 8005778:	e7f8      	b.n	800576c <USBH_MSC_InterfaceInit+0x124>
    return USBH_NOT_SUPPORTED;
 800577a:	2703      	movs	r7, #3
 800577c:	e7f6      	b.n	800576c <USBH_MSC_InterfaceInit+0x124>
 800577e:	2703      	movs	r7, #3
 8005780:	e7f4      	b.n	800576c <USBH_MSC_InterfaceInit+0x124>
    return USBH_NOT_SUPPORTED;
 8005782:	2703      	movs	r7, #3
 8005784:	e7f2      	b.n	800576c <USBH_MSC_InterfaceInit+0x124>
 8005786:	2703      	movs	r7, #3
 8005788:	e7f0      	b.n	800576c <USBH_MSC_InterfaceInit+0x124>

0800578a <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800578a:	b530      	push	{r4, r5, lr}
 800578c:	b083      	sub	sp, #12
 800578e:	460c      	mov	r4, r1
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005790:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8005794:	69dd      	ldr	r5, [r3, #28]
  USBH_StatusTypeDef error = USBH_BUSY ;
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8005796:	2334      	movs	r3, #52	; 0x34
 8005798:	fb03 5301 	mla	r3, r3, r1, r5
 800579c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80057a0:	2b06      	cmp	r3, #6
 80057a2:	d006      	beq.n	80057b2 <USBH_MSC_RdWrProcess+0x28>
 80057a4:	2b07      	cmp	r3, #7
 80057a6:	d027      	beq.n	80057f8 <USBH_MSC_RdWrProcess+0x6e>
 80057a8:	2b05      	cmp	r3, #5
 80057aa:	d048      	beq.n	800583e <USBH_MSC_RdWrProcess+0xb4>
 80057ac:	2001      	movs	r0, #1
    default:
      break;

  }
  return error;
}
 80057ae:	b003      	add	sp, #12
 80057b0:	bd30      	pop	{r4, r5, pc}
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80057b2:	2200      	movs	r2, #0
 80057b4:	9200      	str	r2, [sp, #0]
 80057b6:	4613      	mov	r3, r2
 80057b8:	f000 fbf7 	bl	8005faa <USBH_MSC_SCSI_Read>
      if (scsi_status == USBH_OK)
 80057bc:	b930      	cbnz	r0, 80057cc <USBH_MSC_RdWrProcess+0x42>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80057be:	2134      	movs	r1, #52	; 0x34
 80057c0:	fb01 5404 	mla	r4, r1, r4, r5
 80057c4:	2301      	movs	r3, #1
 80057c6:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        error = USBH_OK;
 80057ca:	e7f0      	b.n	80057ae <USBH_MSC_RdWrProcess+0x24>
      else if (scsi_status == USBH_FAIL)
 80057cc:	2802      	cmp	r0, #2
 80057ce:	d003      	beq.n	80057d8 <USBH_MSC_RdWrProcess+0x4e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80057d0:	2804      	cmp	r0, #4
 80057d2:	d009      	beq.n	80057e8 <USBH_MSC_RdWrProcess+0x5e>
  USBH_StatusTypeDef error = USBH_BUSY ;
 80057d4:	2001      	movs	r0, #1
 80057d6:	e7ea      	b.n	80057ae <USBH_MSC_RdWrProcess+0x24>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80057d8:	2334      	movs	r3, #52	; 0x34
 80057da:	fb03 5404 	mla	r4, r3, r4, r5
 80057de:	2305      	movs	r3, #5
 80057e0:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY ;
 80057e4:	2001      	movs	r0, #1
 80057e6:	e7e2      	b.n	80057ae <USBH_MSC_RdWrProcess+0x24>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80057e8:	2334      	movs	r3, #52	; 0x34
 80057ea:	fb03 5404 	mla	r4, r3, r4, r5
 80057ee:	2308      	movs	r3, #8
 80057f0:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
          error = USBH_FAIL;
 80057f4:	2002      	movs	r0, #2
 80057f6:	e7da      	b.n	80057ae <USBH_MSC_RdWrProcess+0x24>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 80057f8:	2200      	movs	r2, #0
 80057fa:	9200      	str	r2, [sp, #0]
 80057fc:	4613      	mov	r3, r2
 80057fe:	f000 fb8e 	bl	8005f1e <USBH_MSC_SCSI_Write>
      if (scsi_status == USBH_OK)
 8005802:	b930      	cbnz	r0, 8005812 <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8005804:	2134      	movs	r1, #52	; 0x34
 8005806:	fb01 5404 	mla	r4, r1, r4, r5
 800580a:	2301      	movs	r3, #1
 800580c:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        error = USBH_OK;
 8005810:	e7cd      	b.n	80057ae <USBH_MSC_RdWrProcess+0x24>
      else if (scsi_status == USBH_FAIL)
 8005812:	2802      	cmp	r0, #2
 8005814:	d003      	beq.n	800581e <USBH_MSC_RdWrProcess+0x94>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005816:	2804      	cmp	r0, #4
 8005818:	d009      	beq.n	800582e <USBH_MSC_RdWrProcess+0xa4>
  USBH_StatusTypeDef error = USBH_BUSY ;
 800581a:	2001      	movs	r0, #1
 800581c:	e7c7      	b.n	80057ae <USBH_MSC_RdWrProcess+0x24>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800581e:	2334      	movs	r3, #52	; 0x34
 8005820:	fb03 5404 	mla	r4, r3, r4, r5
 8005824:	2305      	movs	r3, #5
 8005826:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY ;
 800582a:	2001      	movs	r0, #1
 800582c:	e7bf      	b.n	80057ae <USBH_MSC_RdWrProcess+0x24>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800582e:	2334      	movs	r3, #52	; 0x34
 8005830:	fb03 5404 	mla	r4, r3, r4, r5
 8005834:	2308      	movs	r3, #8
 8005836:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
          error = USBH_FAIL;
 800583a:	2002      	movs	r0, #2
 800583c:	e7b7      	b.n	80057ae <USBH_MSC_RdWrProcess+0x24>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800583e:	2234      	movs	r2, #52	; 0x34
 8005840:	fb02 5201 	mla	r2, r2, r1, r5
 8005844:	329c      	adds	r2, #156	; 0x9c
 8005846:	f000 fb24 	bl	8005e92 <USBH_MSC_SCSI_RequestSense>
      if (scsi_status == USBH_OK)
 800584a:	b948      	cbnz	r0, 8005860 <USBH_MSC_RdWrProcess+0xd6>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800584c:	2134      	movs	r1, #52	; 0x34
 800584e:	fb01 5404 	mla	r4, r1, r4, r5
 8005852:	2301      	movs	r3, #1
 8005854:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8005858:	2002      	movs	r0, #2
 800585a:	f884 0091 	strb.w	r0, [r4, #145]	; 0x91
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800585e:	e7a6      	b.n	80057ae <USBH_MSC_RdWrProcess+0x24>
 8005860:	2804      	cmp	r0, #4
 8005862:	d001      	beq.n	8005868 <USBH_MSC_RdWrProcess+0xde>
  USBH_StatusTypeDef error = USBH_BUSY ;
 8005864:	2001      	movs	r0, #1
 8005866:	e7a2      	b.n	80057ae <USBH_MSC_RdWrProcess+0x24>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8005868:	2334      	movs	r3, #52	; 0x34
 800586a:	fb03 5404 	mla	r4, r3, r4, r5
 800586e:	2308      	movs	r3, #8
 8005870:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
          error = USBH_FAIL;
 8005874:	2002      	movs	r0, #2
 8005876:	e79a      	b.n	80057ae <USBH_MSC_RdWrProcess+0x24>

08005878 <USBH_MSC_UnitIsReady>:
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8005878:	7803      	ldrb	r3, [r0, #0]
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b0b      	cmp	r3, #11
 800587e:	d001      	beq.n	8005884 <USBH_MSC_UnitIsReady+0xc>
  {
    res = 1U;
  }
  else
  {
    res = 0U;
 8005880:	2000      	movs	r0, #0
  }

  return res;
}
 8005882:	4770      	bx	lr
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005884:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	2234      	movs	r2, #52	; 0x34
 800588c:	fb02 3101 	mla	r1, r2, r1, r3
 8005890:	f891 0091 	ldrb.w	r0, [r1, #145]	; 0x91
    res = 0U;
 8005894:	fab0 f080 	clz	r0, r0
 8005898:	0940      	lsrs	r0, r0, #5
 800589a:	4770      	bx	lr

0800589c <USBH_MSC_GetLUNInfo>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  if (phost->gState == HOST_CLASS)
 800589c:	7803      	ldrb	r3, [r0, #0]
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b0b      	cmp	r3, #11
 80058a2:	d001      	beq.n	80058a8 <USBH_MSC_GetLUNInfo+0xc>
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
    return USBH_OK;
  }
  else
  {
    return USBH_FAIL;
 80058a4:	2002      	movs	r0, #2
  }
}
 80058a6:	4770      	bx	lr
{
 80058a8:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80058aa:	f8d0 037c 	ldr.w	r0, [r0, #892]	; 0x37c
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80058ae:	2334      	movs	r3, #52	; 0x34
 80058b0:	fb03 f101 	mul.w	r1, r3, r1
 80058b4:	3190      	adds	r1, #144	; 0x90
 80058b6:	69c3      	ldr	r3, [r0, #28]
 80058b8:	440b      	add	r3, r1
 80058ba:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80058be:	f8d3 e000 	ldr.w	lr, [r3]
 80058c2:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80058c6:	6898      	ldr	r0, [r3, #8]
 80058c8:	68d9      	ldr	r1, [r3, #12]
 80058ca:	f8c2 e000 	str.w	lr, [r2]
 80058ce:	f8c2 c004 	str.w	ip, [r2, #4]
 80058d2:	6090      	str	r0, [r2, #8]
 80058d4:	60d1      	str	r1, [r2, #12]
 80058d6:	3310      	adds	r3, #16
 80058d8:	3210      	adds	r2, #16
 80058da:	42a3      	cmp	r3, r4
 80058dc:	d1ef      	bne.n	80058be <USBH_MSC_GetLUNInfo+0x22>
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6013      	str	r3, [r2, #0]
    return USBH_OK;
 80058e2:	2000      	movs	r0, #0
}
 80058e4:	bd10      	pop	{r4, pc}

080058e6 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80058e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	460d      	mov	r5, r1
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
 80058ee:	f890 1320 	ldrb.w	r1, [r0, #800]	; 0x320
 80058f2:	2900      	cmp	r1, #0
 80058f4:	d041      	beq.n	800597a <USBH_MSC_Read+0x94>
 80058f6:	4604      	mov	r4, r0
      (phost->gState != HOST_CLASS) ||
 80058f8:	7801      	ldrb	r1, [r0, #0]
 80058fa:	b2c9      	uxtb	r1, r1
  if ((phost->device.is_connected == 0U) ||
 80058fc:	290b      	cmp	r1, #11
 80058fe:	d13e      	bne.n	800597e <USBH_MSC_Read+0x98>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005900:	f8d0 137c 	ldr.w	r1, [r0, #892]	; 0x37c
 8005904:	f8d1 801c 	ldr.w	r8, [r1, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8005908:	2134      	movs	r1, #52	; 0x34
 800590a:	fb01 8105 	mla	r1, r1, r5, r8
      (phost->gState != HOST_CLASS) ||
 800590e:	f891 1090 	ldrb.w	r1, [r1, #144]	; 0x90
 8005912:	2901      	cmp	r1, #1
 8005914:	d001      	beq.n	800591a <USBH_MSC_Read+0x34>
  {
    return  USBH_FAIL;
 8005916:	2002      	movs	r0, #2
 8005918:	e032      	b.n	8005980 <USBH_MSC_Read+0x9a>
  }

  MSC_Handle->state = MSC_READ;
 800591a:	2006      	movs	r0, #6
 800591c:	f888 000c 	strb.w	r0, [r8, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8005920:	2134      	movs	r1, #52	; 0x34
 8005922:	fb01 8105 	mla	r1, r1, r5, r8
 8005926:	f881 0090 	strb.w	r0, [r1, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 800592a:	f8a8 50fa 	strh.w	r5, [r8, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800592e:	9908      	ldr	r1, [sp, #32]
 8005930:	9100      	str	r1, [sp, #0]
 8005932:	4629      	mov	r1, r5
 8005934:	4620      	mov	r0, r4
 8005936:	f000 fb38 	bl	8005faa <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800593a:	f8d4 73c4 	ldr.w	r7, [r4, #964]	; 0x3c4

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800593e:	f242 7610 	movw	r6, #10000	; 0x2710
 8005942:	9b08      	ldr	r3, [sp, #32]
 8005944:	fb03 f606 	mul.w	r6, r3, r6
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8005948:	4629      	mov	r1, r5
 800594a:	4620      	mov	r0, r4
 800594c:	f7ff ff1d 	bl	800578a <USBH_MSC_RdWrProcess>
 8005950:	2801      	cmp	r0, #1
 8005952:	d10d      	bne.n	8005970 <USBH_MSC_Read+0x8a>
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8005954:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8005958:	1bdb      	subs	r3, r3, r7
 800595a:	42b3      	cmp	r3, r6
 800595c:	d803      	bhi.n	8005966 <USBH_MSC_Read+0x80>
 800595e:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1f0      	bne.n	8005948 <USBH_MSC_Read+0x62>
    {
      MSC_Handle->state = MSC_IDLE;
 8005966:	2301      	movs	r3, #1
 8005968:	f888 300c 	strb.w	r3, [r8, #12]
      return USBH_FAIL;
 800596c:	2002      	movs	r0, #2
 800596e:	e007      	b.n	8005980 <USBH_MSC_Read+0x9a>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8005970:	2301      	movs	r3, #1
 8005972:	f888 300c 	strb.w	r3, [r8, #12]

  return USBH_OK;
 8005976:	2000      	movs	r0, #0
 8005978:	e002      	b.n	8005980 <USBH_MSC_Read+0x9a>
    return  USBH_FAIL;
 800597a:	2002      	movs	r0, #2
 800597c:	e000      	b.n	8005980 <USBH_MSC_Read+0x9a>
 800597e:	2002      	movs	r0, #2
}
 8005980:	b002      	add	sp, #8
 8005982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005986 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8005986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	460d      	mov	r5, r1
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
 800598e:	f890 1320 	ldrb.w	r1, [r0, #800]	; 0x320
 8005992:	2900      	cmp	r1, #0
 8005994:	d041      	beq.n	8005a1a <USBH_MSC_Write+0x94>
 8005996:	4604      	mov	r4, r0
      (phost->gState != HOST_CLASS) ||
 8005998:	7801      	ldrb	r1, [r0, #0]
 800599a:	b2c9      	uxtb	r1, r1
  if ((phost->device.is_connected == 0U) ||
 800599c:	290b      	cmp	r1, #11
 800599e:	d13e      	bne.n	8005a1e <USBH_MSC_Write+0x98>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80059a0:	f8d0 137c 	ldr.w	r1, [r0, #892]	; 0x37c
 80059a4:	f8d1 801c 	ldr.w	r8, [r1, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80059a8:	2134      	movs	r1, #52	; 0x34
 80059aa:	fb01 8105 	mla	r1, r1, r5, r8
      (phost->gState != HOST_CLASS) ||
 80059ae:	f891 1090 	ldrb.w	r1, [r1, #144]	; 0x90
 80059b2:	2901      	cmp	r1, #1
 80059b4:	d001      	beq.n	80059ba <USBH_MSC_Write+0x34>
  {
    return  USBH_FAIL;
 80059b6:	2002      	movs	r0, #2
 80059b8:	e032      	b.n	8005a20 <USBH_MSC_Write+0x9a>
  }

  MSC_Handle->state = MSC_WRITE;
 80059ba:	2007      	movs	r0, #7
 80059bc:	f888 000c 	strb.w	r0, [r8, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80059c0:	2134      	movs	r1, #52	; 0x34
 80059c2:	fb01 8105 	mla	r1, r1, r5, r8
 80059c6:	f881 0090 	strb.w	r0, [r1, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 80059ca:	f8a8 50fa 	strh.w	r5, [r8, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80059ce:	9908      	ldr	r1, [sp, #32]
 80059d0:	9100      	str	r1, [sp, #0]
 80059d2:	4629      	mov	r1, r5
 80059d4:	4620      	mov	r0, r4
 80059d6:	f000 faa2 	bl	8005f1e <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80059da:	f8d4 73c4 	ldr.w	r7, [r4, #964]	; 0x3c4
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80059de:	f242 7610 	movw	r6, #10000	; 0x2710
 80059e2:	9b08      	ldr	r3, [sp, #32]
 80059e4:	fb03 f606 	mul.w	r6, r3, r6
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80059e8:	4629      	mov	r1, r5
 80059ea:	4620      	mov	r0, r4
 80059ec:	f7ff fecd 	bl	800578a <USBH_MSC_RdWrProcess>
 80059f0:	2801      	cmp	r0, #1
 80059f2:	d10d      	bne.n	8005a10 <USBH_MSC_Write+0x8a>
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80059f4:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 80059f8:	1bdb      	subs	r3, r3, r7
 80059fa:	42b3      	cmp	r3, r6
 80059fc:	d803      	bhi.n	8005a06 <USBH_MSC_Write+0x80>
 80059fe:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1f0      	bne.n	80059e8 <USBH_MSC_Write+0x62>
    {
      MSC_Handle->state = MSC_IDLE;
 8005a06:	2301      	movs	r3, #1
 8005a08:	f888 300c 	strb.w	r3, [r8, #12]
      return USBH_FAIL;
 8005a0c:	2002      	movs	r0, #2
 8005a0e:	e007      	b.n	8005a20 <USBH_MSC_Write+0x9a>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8005a10:	2301      	movs	r3, #1
 8005a12:	f888 300c 	strb.w	r3, [r8, #12]
  return USBH_OK;
 8005a16:	2000      	movs	r0, #0
 8005a18:	e002      	b.n	8005a20 <USBH_MSC_Write+0x9a>
    return  USBH_FAIL;
 8005a1a:	2002      	movs	r0, #2
 8005a1c:	e000      	b.n	8005a20 <USBH_MSC_Write+0x9a>
 8005a1e:	2002      	movs	r0, #2
}
 8005a20:	b002      	add	sp, #8
 8005a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005a26 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8005a26:	b508      	push	{r3, lr}

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8005a28:	2221      	movs	r2, #33	; 0x21
 8005a2a:	7402      	strb	r2, [r0, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8005a2c:	22ff      	movs	r2, #255	; 0xff
 8005a2e:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005a30:	2100      	movs	r1, #0
 8005a32:	8241      	strh	r1, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005a34:	8281      	strh	r1, [r0, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8005a36:	82c1      	strh	r1, [r0, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8005a38:	460a      	mov	r2, r1
 8005a3a:	f000 fbcb 	bl	80061d4 <USBH_CtlReq>
}
 8005a3e:	bd08      	pop	{r3, pc}

08005a40 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8005a40:	b508      	push	{r3, lr}
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8005a42:	22a1      	movs	r2, #161	; 0xa1
 8005a44:	7402      	strb	r2, [r0, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8005a46:	22fe      	movs	r2, #254	; 0xfe
 8005a48:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	8242      	strh	r2, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005a4e:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8005a50:	2201      	movs	r2, #1
 8005a52:	82c2      	strh	r2, [r0, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8005a54:	f000 fbbe 	bl	80061d4 <USBH_CtlReq>
}
 8005a58:	bd08      	pop	{r3, pc}
	...

08005a5c <USBH_MSC_BOT_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a5c:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8005a60:	69db      	ldr	r3, [r3, #28]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8005a62:	4a05      	ldr	r2, [pc, #20]	; (8005a78 <USBH_MSC_BOT_Init+0x1c>)
 8005a64:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8005a66:	4a05      	ldr	r2, [pc, #20]	; (8005a7c <USBH_MSC_BOT_Init+0x20>)
 8005a68:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8005a70:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
}
 8005a74:	2000      	movs	r0, #0
 8005a76:	4770      	bx	lr
 8005a78:	43425355 	.word	0x43425355
 8005a7c:	20304050 	.word	0x20304050

08005a80 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8005a80:	b570      	push	{r4, r5, r6, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	4605      	mov	r5, r0
  USBH_StatusTypeDef   status = USBH_BUSY;
  USBH_StatusTypeDef   error  = USBH_BUSY;
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a86:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8005a8a:	69de      	ldr	r6, [r3, #28]
  uint8_t toggle = 0U;

  switch (MSC_Handle->hbot.state)
 8005a8c:	f896 4050 	ldrb.w	r4, [r6, #80]	; 0x50
 8005a90:	1e63      	subs	r3, r4, #1
 8005a92:	2b0a      	cmp	r3, #10
 8005a94:	f200 8126 	bhi.w	8005ce4 <USBH_MSC_BOT_Process+0x264>
 8005a98:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005a9c:	001b000b 	.word	0x001b000b
 8005aa0:	004a003f 	.word	0x004a003f
 8005aa4:	007c0070 	.word	0x007c0070
 8005aa8:	00b600ab 	.word	0x00b600ab
 8005aac:	00f800e6 	.word	0x00f800e6
 8005ab0:	011a      	.short	0x011a
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8005ab2:	f886 1061 	strb.w	r1, [r6, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8005abc:	7973      	ldrb	r3, [r6, #5]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	9200      	str	r2, [sp, #0]
 8005ac2:	221f      	movs	r2, #31
 8005ac4:	f106 0154 	add.w	r1, r6, #84	; 0x54
 8005ac8:	f000 fcaa 	bl	8006420 <USBH_BulkSendData>

    default:
      break;
  }
  return status;
}
 8005acc:	4620      	mov	r0, r4
 8005ace:	b002      	add	sp, #8
 8005ad0:	bd70      	pop	{r4, r5, r6, pc}
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8005ad2:	7971      	ldrb	r1, [r6, #5]
 8005ad4:	f000 fe0e 	bl	80066f4 <USBH_LL_GetURBState>
 8005ad8:	4604      	mov	r4, r0
      if (URB_Status == USBH_URB_DONE)
 8005ada:	2801      	cmp	r0, #1
 8005adc:	d005      	beq.n	8005aea <USBH_MSC_BOT_Process+0x6a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8005ade:	2802      	cmp	r0, #2
 8005ae0:	d012      	beq.n	8005b08 <USBH_MSC_BOT_Process+0x88>
        if (URB_Status == USBH_URB_STALL)
 8005ae2:	2805      	cmp	r0, #5
 8005ae4:	d014      	beq.n	8005b10 <USBH_MSC_BOT_Process+0x90>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005ae6:	2401      	movs	r4, #1
 8005ae8:	e7f0      	b.n	8005acc <USBH_MSC_BOT_Process+0x4c>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8005aea:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8005aec:	b143      	cbz	r3, 8005b00 <USBH_MSC_BOT_Process+0x80>
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8005aee:	f996 3060 	ldrsb.w	r3, [r6, #96]	; 0x60
 8005af2:	2b00      	cmp	r3, #0
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8005af4:	bfb4      	ite	lt
 8005af6:	2303      	movlt	r3, #3
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8005af8:	2305      	movge	r3, #5
 8005afa:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8005afe:	e7e5      	b.n	8005acc <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8005b00:	2307      	movs	r3, #7
 8005b02:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8005b06:	e7e1      	b.n	8005acc <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005b08:	2401      	movs	r4, #1
 8005b0a:	f886 4050 	strb.w	r4, [r6, #80]	; 0x50
 8005b0e:	e7dd      	b.n	8005acc <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8005b10:	230a      	movs	r3, #10
 8005b12:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005b16:	2401      	movs	r4, #1
 8005b18:	e7d8      	b.n	8005acc <USBH_MSC_BOT_Process+0x4c>
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8005b1a:	7933      	ldrb	r3, [r6, #4]
 8005b1c:	8972      	ldrh	r2, [r6, #10]
 8005b1e:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8005b22:	f000 fc95 	bl	8006450 <USBH_BulkReceiveData>
      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8005b26:	2304      	movs	r3, #4
 8005b28:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005b2c:	2401      	movs	r4, #1
      break;
 8005b2e:	e7cd      	b.n	8005acc <USBH_MSC_BOT_Process+0x4c>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8005b30:	7931      	ldrb	r1, [r6, #4]
 8005b32:	f000 fddf 	bl	80066f4 <USBH_LL_GetURBState>
 8005b36:	4604      	mov	r4, r0
      if (URB_Status == USBH_URB_DONE)
 8005b38:	2801      	cmp	r0, #1
 8005b3a:	d003      	beq.n	8005b44 <USBH_MSC_BOT_Process+0xc4>
      else if (URB_Status == USBH_URB_STALL)
 8005b3c:	2805      	cmp	r0, #5
 8005b3e:	d018      	beq.n	8005b72 <USBH_MSC_BOT_Process+0xf2>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005b40:	2401      	movs	r4, #1
 8005b42:	e7c3      	b.n	8005acc <USBH_MSC_BOT_Process+0x4c>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8005b44:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8005b46:	8972      	ldrh	r2, [r6, #10]
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d90c      	bls.n	8005b66 <USBH_MSC_BOT_Process+0xe6>
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8005b4c:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8005b50:	4411      	add	r1, r2
 8005b52:	f8c6 108c 	str.w	r1, [r6, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8005b56:	1a9b      	subs	r3, r3, r2
 8005b58:	65f3      	str	r3, [r6, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8005b5a:	b133      	cbz	r3, 8005b6a <USBH_MSC_BOT_Process+0xea>
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8005b5c:	7933      	ldrb	r3, [r6, #4]
 8005b5e:	4628      	mov	r0, r5
 8005b60:	f000 fc76 	bl	8006450 <USBH_BulkReceiveData>
 8005b64:	e7b2      	b.n	8005acc <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	65f3      	str	r3, [r6, #92]	; 0x5c
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8005b6a:	2307      	movs	r3, #7
 8005b6c:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8005b70:	e7ac      	b.n	8005acc <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8005b72:	2309      	movs	r3, #9
 8005b74:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005b78:	2401      	movs	r4, #1
 8005b7a:	e7a7      	b.n	8005acc <USBH_MSC_BOT_Process+0x4c>
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8005b7c:	7973      	ldrb	r3, [r6, #5]
 8005b7e:	8932      	ldrh	r2, [r6, #8]
 8005b80:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8005b84:	2401      	movs	r4, #1
 8005b86:	9400      	str	r4, [sp, #0]
 8005b88:	f000 fc4a 	bl	8006420 <USBH_BulkSendData>
      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8005b8c:	2306      	movs	r3, #6
 8005b8e:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      break;
 8005b92:	e79b      	b.n	8005acc <USBH_MSC_BOT_Process+0x4c>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8005b94:	7971      	ldrb	r1, [r6, #5]
 8005b96:	f000 fdad 	bl	80066f4 <USBH_LL_GetURBState>
 8005b9a:	4604      	mov	r4, r0
      if (URB_Status == USBH_URB_DONE)
 8005b9c:	2801      	cmp	r0, #1
 8005b9e:	d005      	beq.n	8005bac <USBH_MSC_BOT_Process+0x12c>
      else if (URB_Status == USBH_URB_NOTREADY)
 8005ba0:	2802      	cmp	r0, #2
 8005ba2:	d01c      	beq.n	8005bde <USBH_MSC_BOT_Process+0x15e>
      else if (URB_Status == USBH_URB_STALL)
 8005ba4:	2805      	cmp	r0, #5
 8005ba6:	d01f      	beq.n	8005be8 <USBH_MSC_BOT_Process+0x168>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005ba8:	2401      	movs	r4, #1
 8005baa:	e78f      	b.n	8005acc <USBH_MSC_BOT_Process+0x4c>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8005bac:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8005bae:	8932      	ldrh	r2, [r6, #8]
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d90e      	bls.n	8005bd2 <USBH_MSC_BOT_Process+0x152>
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8005bb4:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8005bb8:	4411      	add	r1, r2
 8005bba:	f8c6 108c 	str.w	r1, [r6, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8005bbe:	1a9b      	subs	r3, r3, r2
 8005bc0:	65f3      	str	r3, [r6, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8005bc2:	b143      	cbz	r3, 8005bd6 <USBH_MSC_BOT_Process+0x156>
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8005bc4:	7973      	ldrb	r3, [r6, #5]
 8005bc6:	2001      	movs	r0, #1
 8005bc8:	9000      	str	r0, [sp, #0]
 8005bca:	4628      	mov	r0, r5
 8005bcc:	f000 fc28 	bl	8006420 <USBH_BulkSendData>
 8005bd0:	e77c      	b.n	8005acc <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	65f3      	str	r3, [r6, #92]	; 0x5c
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8005bd6:	2307      	movs	r3, #7
 8005bd8:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8005bdc:	e776      	b.n	8005acc <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8005bde:	2305      	movs	r3, #5
 8005be0:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005be4:	2401      	movs	r4, #1
 8005be6:	e771      	b.n	8005acc <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8005be8:	230a      	movs	r3, #10
 8005bea:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005bee:	2401      	movs	r4, #1
 8005bf0:	e76c      	b.n	8005acc <USBH_MSC_BOT_Process+0x4c>
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8005bf2:	7933      	ldrb	r3, [r6, #4]
 8005bf4:	220d      	movs	r2, #13
 8005bf6:	f106 0178 	add.w	r1, r6, #120	; 0x78
 8005bfa:	f000 fc29 	bl	8006450 <USBH_BulkReceiveData>
      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8005bfe:	2308      	movs	r3, #8
 8005c00:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005c04:	2401      	movs	r4, #1
      break;
 8005c06:	e761      	b.n	8005acc <USBH_MSC_BOT_Process+0x4c>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8005c08:	7931      	ldrb	r1, [r6, #4]
 8005c0a:	f000 fd73 	bl	80066f4 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8005c0e:	2801      	cmp	r0, #1
 8005c10:	d003      	beq.n	8005c1a <USBH_MSC_BOT_Process+0x19a>
      else if (URB_Status == USBH_URB_STALL)
 8005c12:	2805      	cmp	r0, #5
 8005c14:	d023      	beq.n	8005c5e <USBH_MSC_BOT_Process+0x1de>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005c16:	2401      	movs	r4, #1
 8005c18:	e758      	b.n	8005acc <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8005c20:	f886 3052 	strb.w	r3, [r6, #82]	; 0x52
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c24:	f8d5 337c 	ldr.w	r3, [r5, #892]	; 0x37c
 8005c28:	69dc      	ldr	r4, [r3, #28]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8005c2a:	7921      	ldrb	r1, [r4, #4]
 8005c2c:	4628      	mov	r0, r5
 8005c2e:	f000 fd5b 	bl	80066e8 <USBH_LL_GetLastXferSize>
 8005c32:	280d      	cmp	r0, #13
 8005c34:	d001      	beq.n	8005c3a <USBH_MSC_BOT_Process+0x1ba>
          status = USBH_FAIL;
 8005c36:	2402      	movs	r4, #2
 8005c38:	e748      	b.n	8005acc <USBH_MSC_BOT_Process+0x4c>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8005c3a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8005c3c:	4b2a      	ldr	r3, [pc, #168]	; (8005ce8 <USBH_MSC_BOT_Process+0x268>)
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d001      	beq.n	8005c46 <USBH_MSC_BOT_Process+0x1c6>
          status = USBH_FAIL;
 8005c42:	2402      	movs	r4, #2
 8005c44:	e742      	b.n	8005acc <USBH_MSC_BOT_Process+0x4c>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8005c46:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005c48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d001      	beq.n	8005c52 <USBH_MSC_BOT_Process+0x1d2>
          status = USBH_FAIL;
 8005c4e:	2402      	movs	r4, #2
 8005c50:	e73c      	b.n	8005acc <USBH_MSC_BOT_Process+0x4c>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8005c52:	f894 4084 	ldrb.w	r4, [r4, #132]	; 0x84
          status = USBH_FAIL;
 8005c56:	2c00      	cmp	r4, #0
 8005c58:	bf18      	it	ne
 8005c5a:	2402      	movne	r4, #2
 8005c5c:	e736      	b.n	8005acc <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8005c5e:	2309      	movs	r3, #9
 8005c60:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005c64:	2401      	movs	r4, #1
 8005c66:	e731      	b.n	8005acc <USBH_MSC_BOT_Process+0x4c>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8005c68:	79f1      	ldrb	r1, [r6, #7]
 8005c6a:	f000 fb8e 	bl	800638a <USBH_ClrFeature>
      if (error == USBH_OK)
 8005c6e:	b920      	cbnz	r0, 8005c7a <USBH_MSC_BOT_Process+0x1fa>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8005c70:	2307      	movs	r3, #7
 8005c72:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005c76:	2401      	movs	r4, #1
 8005c78:	e728      	b.n	8005acc <USBH_MSC_BOT_Process+0x4c>
      else if (error == USBH_UNRECOVERED_ERROR)
 8005c7a:	2804      	cmp	r0, #4
 8005c7c:	d001      	beq.n	8005c82 <USBH_MSC_BOT_Process+0x202>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005c7e:	2401      	movs	r4, #1
 8005c80:	e724      	b.n	8005acc <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8005c82:	230b      	movs	r3, #11
 8005c84:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005c88:	2401      	movs	r4, #1
 8005c8a:	e71f      	b.n	8005acc <USBH_MSC_BOT_Process+0x4c>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8005c8c:	79b1      	ldrb	r1, [r6, #6]
 8005c8e:	f000 fb7c 	bl	800638a <USBH_ClrFeature>
      if (error == USBH_OK)
 8005c92:	b118      	cbz	r0, 8005c9c <USBH_MSC_BOT_Process+0x21c>
        if (error == USBH_UNRECOVERED_ERROR)
 8005c94:	2804      	cmp	r0, #4
 8005c96:	d016      	beq.n	8005cc6 <USBH_MSC_BOT_Process+0x246>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005c98:	2401      	movs	r4, #1
 8005c9a:	e717      	b.n	8005acc <USBH_MSC_BOT_Process+0x4c>
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8005c9c:	7971      	ldrb	r1, [r6, #5]
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	f000 fd51 	bl	8006746 <USBH_LL_GetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8005ca4:	f1c0 0201 	rsb	r2, r0, #1
 8005ca8:	b2d2      	uxtb	r2, r2
 8005caa:	7971      	ldrb	r1, [r6, #5]
 8005cac:	4628      	mov	r0, r5
 8005cae:	f000 fd35 	bl	800671c <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	7931      	ldrb	r1, [r6, #4]
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	f000 fd30 	bl	800671c <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8005cbc:	2309      	movs	r3, #9
 8005cbe:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005cc2:	2401      	movs	r4, #1
 8005cc4:	e702      	b.n	8005acc <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8005cc6:	230b      	movs	r3, #11
 8005cc8:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005ccc:	2401      	movs	r4, #1
 8005cce:	e6fd      	b.n	8005acc <USBH_MSC_BOT_Process+0x4c>
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8005cd0:	f7ff fea9 	bl	8005a26 <USBH_MSC_BOT_REQ_Reset>
      if (status == USBH_OK)
 8005cd4:	4604      	mov	r4, r0
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	f47f aef8 	bne.w	8005acc <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8005ce2:	e6f3      	b.n	8005acc <USBH_MSC_BOT_Process+0x4c>
  switch (MSC_Handle->hbot.state)
 8005ce4:	2401      	movs	r4, #1
 8005ce6:	e6f1      	b.n	8005acc <USBH_MSC_BOT_Process+0x4c>
 8005ce8:	53425355 	.word	0x53425355

08005cec <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8005cec:	b508      	push	{r3, lr}
 8005cee:	4602      	mov	r2, r0
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005cf0:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8005cf4:	69db      	ldr	r3, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8005cf6:	f893 0052 	ldrb.w	r0, [r3, #82]	; 0x52
 8005cfa:	2801      	cmp	r0, #1
 8005cfc:	d003      	beq.n	8005d06 <USBH_MSC_SCSI_TestUnitReady+0x1a>
 8005cfe:	2802      	cmp	r0, #2
 8005d00:	d017      	beq.n	8005d32 <USBH_MSC_SCSI_TestUnitReady+0x46>
 8005d02:	2002      	movs	r0, #2
    default:
      break;
  }

  return error;
}
 8005d04:	bd08      	pop	{r3, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8005d06:	2200      	movs	r2, #0
 8005d08:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8005d0a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005d0e:	210a      	movs	r1, #10
 8005d10:	f883 1062 	strb.w	r1, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005d14:	f8c3 2063 	str.w	r2, [r3, #99]	; 0x63
 8005d18:	f8c3 2067 	str.w	r2, [r3, #103]	; 0x67
 8005d1c:	f8c3 206b 	str.w	r2, [r3, #107]	; 0x6b
 8005d20:	f8c3 206f 	str.w	r2, [r3, #111]	; 0x6f
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      break;
 8005d30:	e7e8      	b.n	8005d04 <USBH_MSC_SCSI_TestUnitReady+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005d32:	4610      	mov	r0, r2
 8005d34:	f7ff fea4 	bl	8005a80 <USBH_MSC_BOT_Process>
      break;
 8005d38:	e7e4      	b.n	8005d04 <USBH_MSC_SCSI_TestUnitReady+0x18>

08005d3a <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8005d3a:	b538      	push	{r3, r4, r5, lr}
 8005d3c:	4603      	mov	r3, r0
  USBH_StatusTypeDef    error = USBH_BUSY ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d3e:	f8d0 037c 	ldr.w	r0, [r0, #892]	; 0x37c
 8005d42:	69c4      	ldr	r4, [r0, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8005d44:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
 8005d48:	2801      	cmp	r0, #1
 8005d4a:	d004      	beq.n	8005d56 <USBH_MSC_SCSI_ReadCapacity+0x1c>
 8005d4c:	4615      	mov	r5, r2
 8005d4e:	2802      	cmp	r0, #2
 8005d50:	d020      	beq.n	8005d94 <USBH_MSC_SCSI_ReadCapacity+0x5a>
 8005d52:	2001      	movs	r0, #1
    default:
      break;
  }

  return error;
}
 8005d54:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8005d56:	2308      	movs	r3, #8
 8005d58:	65e3      	str	r3, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8005d5a:	2380      	movs	r3, #128	; 0x80
 8005d5c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005d60:	230a      	movs	r3, #10
 8005d62:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005d66:	2300      	movs	r3, #0
 8005d68:	f8c4 3063 	str.w	r3, [r4, #99]	; 0x63
 8005d6c:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 8005d70:	f8c4 306b 	str.w	r3, [r4, #107]	; 0x6b
 8005d74:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8005d78:	2325      	movs	r3, #37	; 0x25
 8005d7a:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005d84:	2302      	movs	r3, #2
 8005d86:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8005d8a:	f104 0310 	add.w	r3, r4, #16
 8005d8e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 8005d92:	e7df      	b.n	8005d54 <USBH_MSC_SCSI_ReadCapacity+0x1a>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005d94:	4618      	mov	r0, r3
 8005d96:	f7ff fe73 	bl	8005a80 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8005d9a:	2800      	cmp	r0, #0
 8005d9c:	d1da      	bne.n	8005d54 <USBH_MSC_SCSI_ReadCapacity+0x1a>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8005d9e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005da2:	7891      	ldrb	r1, [r2, #2]
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8005da4:	7853      	ldrb	r3, [r2, #1]
 8005da6:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8005da8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005dac:	78d1      	ldrb	r1, [r2, #3]
 8005dae:	430b      	orrs	r3, r1
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8005db0:	7812      	ldrb	r2, [r2, #0]
 8005db2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8005db6:	602b      	str	r3, [r5, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8005db8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005dbc:	7991      	ldrb	r1, [r2, #6]
 8005dbe:	79d3      	ldrb	r3, [r2, #7]
 8005dc0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005dc4:	80ab      	strh	r3, [r5, #4]
 8005dc6:	e7c5      	b.n	8005d54 <USBH_MSC_SCSI_ReadCapacity+0x1a>

08005dc8 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8005dc8:	b570      	push	{r4, r5, r6, lr}
  USBH_StatusTypeDef error = USBH_FAIL;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005dca:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8005dce:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8005dd0:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8005dd4:	2d01      	cmp	r5, #1
 8005dd6:	d005      	beq.n	8005de4 <USBH_MSC_SCSI_Inquiry+0x1c>
 8005dd8:	4616      	mov	r6, r2
 8005dda:	2d02      	cmp	r5, #2
 8005ddc:	d024      	beq.n	8005e28 <USBH_MSC_SCSI_Inquiry+0x60>
 8005dde:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
 8005de0:	4628      	mov	r0, r5
 8005de2:	bd70      	pop	{r4, r5, r6, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8005de4:	2224      	movs	r2, #36	; 0x24
 8005de6:	65e2      	str	r2, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8005de8:	2380      	movs	r3, #128	; 0x80
 8005dea:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005dee:	230a      	movs	r3, #10
 8005df0:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8005df4:	2300      	movs	r3, #0
 8005df6:	f8c4 3063 	str.w	r3, [r4, #99]	; 0x63
 8005dfa:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 8005dfe:	f8a4 306b 	strh.w	r3, [r4, #107]	; 0x6b
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8005e02:	2312      	movs	r3, #18
 8005e04:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8005e08:	0149      	lsls	r1, r1, #5
 8005e0a:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8005e0e:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005e12:	2301      	movs	r3, #1
 8005e14:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005e18:	2302      	movs	r3, #2
 8005e1a:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8005e1e:	f104 0310 	add.w	r3, r4, #16
 8005e22:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 8005e26:	e7db      	b.n	8005de0 <USBH_MSC_SCSI_Inquiry+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005e28:	f7ff fe2a 	bl	8005a80 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8005e2c:	4605      	mov	r5, r0
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	d1d6      	bne.n	8005de0 <USBH_MSC_SCSI_Inquiry+0x18>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8005e32:	2222      	movs	r2, #34	; 0x22
 8005e34:	2100      	movs	r1, #0
 8005e36:	4630      	mov	r0, r6
 8005e38:	f000 fd34 	bl	80068a4 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8005e3c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	f003 031f 	and.w	r3, r3, #31
 8005e46:	7073      	strb	r3, [r6, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8005e48:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	095b      	lsrs	r3, r3, #5
 8005e50:	7033      	strb	r3, [r6, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8005e52:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005e56:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005e5a:	2b00      	cmp	r3, #0
          inquiry->RemovableMedia = 1U;
 8005e5c:	bfbc      	itt	lt
 8005e5e:	2301      	movlt	r3, #1
 8005e60:	70b3      	strblt	r3, [r6, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8005e62:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005e66:	689a      	ldr	r2, [r3, #8]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	f8c6 2003 	str.w	r2, [r6, #3]
 8005e6e:	f8c6 3007 	str.w	r3, [r6, #7]
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8005e72:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005e76:	6918      	ldr	r0, [r3, #16]
 8005e78:	6959      	ldr	r1, [r3, #20]
 8005e7a:	699a      	ldr	r2, [r3, #24]
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	60f0      	str	r0, [r6, #12]
 8005e80:	6131      	str	r1, [r6, #16]
 8005e82:	6172      	str	r2, [r6, #20]
 8005e84:	61b3      	str	r3, [r6, #24]
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8005e86:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	f8c6 301d 	str.w	r3, [r6, #29]
 8005e90:	e7a6      	b.n	8005de0 <USBH_MSC_SCSI_Inquiry+0x18>

08005e92 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8005e92:	b538      	push	{r3, r4, r5, lr}
 8005e94:	4603      	mov	r3, r0
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e96:	f8d0 037c 	ldr.w	r0, [r0, #892]	; 0x37c
 8005e9a:	69c4      	ldr	r4, [r0, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8005e9c:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
 8005ea0:	2801      	cmp	r0, #1
 8005ea2:	d004      	beq.n	8005eae <USBH_MSC_SCSI_RequestSense+0x1c>
 8005ea4:	4615      	mov	r5, r2
 8005ea6:	2802      	cmp	r0, #2
 8005ea8:	d025      	beq.n	8005ef6 <USBH_MSC_SCSI_RequestSense+0x64>
 8005eaa:	2002      	movs	r0, #2
    default:
      break;
  }

  return error;
}
 8005eac:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8005eae:	220e      	movs	r2, #14
 8005eb0:	65e2      	str	r2, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8005eb2:	2380      	movs	r3, #128	; 0x80
 8005eb4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005eb8:	230a      	movs	r3, #10
 8005eba:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	f8c4 3063 	str.w	r3, [r4, #99]	; 0x63
 8005ec4:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 8005ec8:	f8c4 306b 	str.w	r3, [r4, #107]	; 0x6b
 8005ecc:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8005ed6:	0149      	lsls	r1, r1, #5
 8005ed8:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8005edc:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8005eec:	f104 0310 	add.w	r3, r4, #16
 8005ef0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 8005ef4:	e7da      	b.n	8005eac <USBH_MSC_SCSI_RequestSense+0x1a>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7ff fdc2 	bl	8005a80 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8005efc:	2800      	cmp	r0, #0
 8005efe:	d1d5      	bne.n	8005eac <USBH_MSC_SCSI_RequestSense+0x1a>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8005f00:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005f04:	789b      	ldrb	r3, [r3, #2]
 8005f06:	f003 030f 	and.w	r3, r3, #15
 8005f0a:	702b      	strb	r3, [r5, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8005f0c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005f10:	7b1b      	ldrb	r3, [r3, #12]
 8005f12:	706b      	strb	r3, [r5, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8005f14:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005f18:	7b5b      	ldrb	r3, [r3, #13]
 8005f1a:	70ab      	strb	r3, [r5, #2]
 8005f1c:	e7c6      	b.n	8005eac <USBH_MSC_SCSI_RequestSense+0x1a>

08005f1e <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8005f1e:	b538      	push	{r3, r4, r5, lr}
 8005f20:	4684      	mov	ip, r0
  USBH_StatusTypeDef    error = USBH_FAIL ;

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f22:	f8d0 037c 	ldr.w	r0, [r0, #892]	; 0x37c
 8005f26:	69c4      	ldr	r4, [r0, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8005f28:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
 8005f2c:	2801      	cmp	r0, #1
 8005f2e:	d003      	beq.n	8005f38 <USBH_MSC_SCSI_Write+0x1a>
 8005f30:	2802      	cmp	r0, #2
 8005f32:	d036      	beq.n	8005fa2 <USBH_MSC_SCSI_Write+0x84>
 8005f34:	2002      	movs	r0, #2
    default:
      break;
  }

  return error;
}
 8005f36:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8005f38:	f8b4 1098 	ldrh.w	r1, [r4, #152]	; 0x98
 8005f3c:	9d04      	ldr	r5, [sp, #16]
 8005f3e:	fb05 f101 	mul.w	r1, r5, r1
 8005f42:	65e1      	str	r1, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8005f44:	2100      	movs	r1, #0
 8005f46:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005f4a:	f04f 0c0a 	mov.w	ip, #10
 8005f4e:	f884 c062 	strb.w	ip, [r4, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005f52:	f8c4 1063 	str.w	r1, [r4, #99]	; 0x63
 8005f56:	f8c4 1067 	str.w	r1, [r4, #103]	; 0x67
 8005f5a:	f8c4 106b 	str.w	r1, [r4, #107]	; 0x6b
 8005f5e:	f8c4 106f 	str.w	r1, [r4, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8005f62:	212a      	movs	r1, #42	; 0x2a
 8005f64:	f884 1063 	strb.w	r1, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8005f68:	f3c2 6107 	ubfx	r1, r2, #24, #8
 8005f6c:	f884 1065 	strb.w	r1, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8005f70:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8005f74:	f884 1066 	strb.w	r1, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8005f78:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005f7c:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8005f80:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8005f84:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8005f88:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8005f8c:	f884 506b 	strb.w	r5, [r4, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005f90:	2201      	movs	r2, #1
 8005f92:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005f96:	2202      	movs	r2, #2
 8005f98:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8005f9c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 8005fa0:	e7c9      	b.n	8005f36 <USBH_MSC_SCSI_Write+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005fa2:	4660      	mov	r0, ip
 8005fa4:	f7ff fd6c 	bl	8005a80 <USBH_MSC_BOT_Process>
      break;
 8005fa8:	e7c5      	b.n	8005f36 <USBH_MSC_SCSI_Write+0x18>

08005faa <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8005faa:	b538      	push	{r3, r4, r5, lr}
 8005fac:	4684      	mov	ip, r0
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005fae:	f8d0 037c 	ldr.w	r0, [r0, #892]	; 0x37c
 8005fb2:	69c4      	ldr	r4, [r0, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8005fb4:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
 8005fb8:	2801      	cmp	r0, #1
 8005fba:	d003      	beq.n	8005fc4 <USBH_MSC_SCSI_Read+0x1a>
 8005fbc:	2802      	cmp	r0, #2
 8005fbe:	d036      	beq.n	800602e <USBH_MSC_SCSI_Read+0x84>
 8005fc0:	2002      	movs	r0, #2
    default:
      break;
  }

  return error;
}
 8005fc2:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8005fc4:	f8b4 1098 	ldrh.w	r1, [r4, #152]	; 0x98
 8005fc8:	9d04      	ldr	r5, [sp, #16]
 8005fca:	fb05 f101 	mul.w	r1, r5, r1
 8005fce:	65e1      	str	r1, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8005fd0:	2180      	movs	r1, #128	; 0x80
 8005fd2:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005fd6:	210a      	movs	r1, #10
 8005fd8:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005fdc:	2100      	movs	r1, #0
 8005fde:	f8c4 1063 	str.w	r1, [r4, #99]	; 0x63
 8005fe2:	f8c4 1067 	str.w	r1, [r4, #103]	; 0x67
 8005fe6:	f8c4 106b 	str.w	r1, [r4, #107]	; 0x6b
 8005fea:	f8c4 106f 	str.w	r1, [r4, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8005fee:	2128      	movs	r1, #40	; 0x28
 8005ff0:	f884 1063 	strb.w	r1, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8005ff4:	f3c2 6107 	ubfx	r1, r2, #24, #8
 8005ff8:	f884 1065 	strb.w	r1, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8005ffc:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8006000:	f884 1066 	strb.w	r1, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8006004:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8006008:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800600c:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8006010:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8006014:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8006018:	f884 506b 	strb.w	r5, [r4, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800601c:	2201      	movs	r2, #1
 800601e:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006022:	2202      	movs	r2, #2
 8006024:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8006028:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 800602c:	e7c9      	b.n	8005fc2 <USBH_MSC_SCSI_Read+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
 800602e:	4660      	mov	r0, ip
 8006030:	f7ff fd26 	bl	8005a80 <USBH_MSC_BOT_Process>
      break;
 8006034:	e7c5      	b.n	8005fc2 <USBH_MSC_SCSI_Read+0x18>

08006036 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006036:	4684      	mov	ip, r0
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006038:	f500 7360 	add.w	r3, r0, #896	; 0x380
 800603c:	f500 7170 	add.w	r1, r0, #960	; 0x3c0
  {
    phost->Pipes[i] = 0U;
 8006040:	2200      	movs	r2, #0
 8006042:	f843 2f04 	str.w	r2, [r3, #4]!
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006046:	428b      	cmp	r3, r1
 8006048:	d1fb      	bne.n	8006042 <DeInitStateMachine+0xc>
 800604a:	f20c 131b 	addw	r3, ip, #283	; 0x11b
 800604e:	f20c 311b 	addw	r1, ip, #795	; 0x31b
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 8006052:	2200      	movs	r2, #0
 8006054:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006058:	428b      	cmp	r3, r1
 800605a:	d1fb      	bne.n	8006054 <DeInitStateMachine+0x1e>
  }

  phost->gState = HOST_IDLE;
 800605c:	2000      	movs	r0, #0
 800605e:	f88c 0000 	strb.w	r0, [ip]
  phost->EnumState = ENUM_IDLE;
 8006062:	f88c 0001 	strb.w	r0, [ip, #1]
  phost->RequestState = CMD_SEND;
 8006066:	2301      	movs	r3, #1
 8006068:	f88c 3002 	strb.w	r3, [ip, #2]
  phost->Timer = 0U;
 800606c:	f8cc 03c4 	str.w	r0, [ip, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006070:	f88c 3018 	strb.w	r3, [ip, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006074:	2240      	movs	r2, #64	; 0x40
 8006076:	f88c 2006 	strb.w	r2, [ip, #6]
  phost->Control.errorcount = 0U;
 800607a:	f88c 0019 	strb.w	r0, [ip, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800607e:	f88c 031c 	strb.w	r0, [ip, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006082:	f88c 331d 	strb.w	r3, [ip, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006086:	f88c 031f 	strb.w	r0, [ip, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800608a:	f88c 031e 	strb.w	r0, [ip, #798]	; 0x31e

  return USBH_OK;
}
 800608e:	4770      	bx	lr

08006090 <USBH_Init>:
  if (phost == NULL)
 8006090:	b1d8      	cbz	r0, 80060ca <USBH_Init+0x3a>
{
 8006092:	b570      	push	{r4, r5, r6, lr}
 8006094:	460e      	mov	r6, r1
 8006096:	4604      	mov	r4, r0
  phost->id = id;
 8006098:	f880 23cc 	strb.w	r2, [r0, #972]	; 0x3cc
  phost->pActiveClass = NULL;
 800609c:	2500      	movs	r5, #0
 800609e:	f8c0 537c 	str.w	r5, [r0, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80060a2:	f8c0 5380 	str.w	r5, [r0, #896]	; 0x380
  (void)DeInitStateMachine(phost);
 80060a6:	f7ff ffc6 	bl	8006036 <DeInitStateMachine>
  phost->device.PortEnabled = 0U;
 80060aa:	f884 5323 	strb.w	r5, [r4, #803]	; 0x323
  phost->device.is_connected = 0U;
 80060ae:	f884 5320 	strb.w	r5, [r4, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80060b2:	f884 5321 	strb.w	r5, [r4, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80060b6:	f884 5322 	strb.w	r5, [r4, #802]	; 0x322
  if (pUsrFunc != NULL)
 80060ba:	b10e      	cbz	r6, 80060c0 <USBH_Init+0x30>
    phost->pUser = pUsrFunc;
 80060bc:	f8c4 63d4 	str.w	r6, [r4, #980]	; 0x3d4
  (void)USBH_LL_Init(phost);
 80060c0:	4620      	mov	r0, r4
 80060c2:	f000 fae7 	bl	8006694 <USBH_LL_Init>
  return USBH_OK;
 80060c6:	2000      	movs	r0, #0
}
 80060c8:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL;
 80060ca:	2002      	movs	r0, #2
}
 80060cc:	4770      	bx	lr

080060ce <USBH_RegisterClass>:
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef status = USBH_OK;

  if (pclass != NULL)
 80060ce:	b149      	cbz	r1, 80060e4 <USBH_RegisterClass+0x16>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80060d0:	f8d0 3380 	ldr.w	r3, [r0, #896]	; 0x380
 80060d4:	b943      	cbnz	r3, 80060e8 <USBH_RegisterClass+0x1a>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80060d6:	2301      	movs	r3, #1
 80060d8:	f8c0 3380 	str.w	r3, [r0, #896]	; 0x380
 80060dc:	f8c0 1378 	str.w	r1, [r0, #888]	; 0x378
      status = USBH_OK;
 80060e0:	2000      	movs	r0, #0
 80060e2:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80060e4:	2002      	movs	r0, #2
 80060e6:	4770      	bx	lr
      status = USBH_FAIL;
 80060e8:	2002      	movs	r0, #2
  }

  return status;
}
 80060ea:	4770      	bx	lr

080060ec <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef status = USBH_OK;

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80060ec:	f890 333c 	ldrb.w	r3, [r0, #828]	; 0x33c
 80060f0:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 80060f2:	bf86      	itte	hi
 80060f4:	f880 1324 	strbhi.w	r1, [r0, #804]	; 0x324
  USBH_StatusTypeDef status = USBH_OK;
 80060f8:	2000      	movhi	r0, #0
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80060fa:	2002      	movls	r0, #2
  }

  return status;
}
 80060fc:	4770      	bx	lr

080060fe <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80060fe:	b530      	push	{r4, r5, lr}
  uint8_t if_ix = 0U;

  pif = (USBH_InterfaceDescTypeDef *)NULL;
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006100:	4684      	mov	ip, r0
{
 8006102:	f04f 0e00 	mov.w	lr, #0
 8006106:	e00c      	b.n	8006122 <USBH_FindInterface+0x24>
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006108:	f895 4349 	ldrb.w	r4, [r5, #841]	; 0x349
 800610c:	429c      	cmp	r4, r3
 800610e:	d019      	beq.n	8006144 <USBH_FindInterface+0x46>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006110:	2bff      	cmp	r3, #255	; 0xff
 8006112:	d017      	beq.n	8006144 <USBH_FindInterface+0x46>
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006114:	f10e 0e01 	add.w	lr, lr, #1
 8006118:	f10c 0c1a 	add.w	ip, ip, #26
 800611c:	f1be 0f02 	cmp.w	lr, #2
 8006120:	d00f      	beq.n	8006142 <USBH_FindInterface+0x44>
 8006122:	fa5f f08e 	uxtb.w	r0, lr
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006126:	4665      	mov	r5, ip
 8006128:	f89c 4347 	ldrb.w	r4, [ip, #839]	; 0x347
 800612c:	428c      	cmp	r4, r1
 800612e:	d001      	beq.n	8006134 <USBH_FindInterface+0x36>
 8006130:	29ff      	cmp	r1, #255	; 0xff
 8006132:	d1ef      	bne.n	8006114 <USBH_FindInterface+0x16>
 8006134:	f895 4348 	ldrb.w	r4, [r5, #840]	; 0x348
 8006138:	4294      	cmp	r4, r2
 800613a:	d0e5      	beq.n	8006108 <USBH_FindInterface+0xa>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800613c:	2aff      	cmp	r2, #255	; 0xff
 800613e:	d1e9      	bne.n	8006114 <USBH_FindInterface+0x16>
 8006140:	e7e2      	b.n	8006108 <USBH_FindInterface+0xa>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 8006142:	20ff      	movs	r0, #255	; 0xff
}
 8006144:	bd30      	pop	{r4, r5, pc}

08006146 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006146:	b510      	push	{r4, lr}
 8006148:	4604      	mov	r4, r0
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800614a:	f000 fb17 	bl	800677c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800614e:	2101      	movs	r1, #1
 8006150:	4620      	mov	r0, r4
 8006152:	f000 fad5 	bl	8006700 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 8006156:	2000      	movs	r0, #0
 8006158:	bd10      	pop	{r4, pc}

0800615a <USBH_LL_SetTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
  phost->Timer = time;
 800615a:	f8c0 13c4 	str.w	r1, [r0, #964]	; 0x3c4
}
 800615e:	4770      	bx	lr

08006160 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006160:	b508      	push	{r3, lr}
  phost->Timer++;
 8006162:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8006166:	3301      	adds	r3, #1
 8006168:	f8c0 33c4 	str.w	r3, [r0, #964]	; 0x3c4
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800616c:	7803      	ldrb	r3, [r0, #0]
 800616e:	b2db      	uxtb	r3, r3
 8006170:	2b0b      	cmp	r3, #11
 8006172:	d000      	beq.n	8006176 <USBH_LL_IncTimer+0x16>
}
 8006174:	bd08      	pop	{r3, pc}
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006176:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 800617a:	2b00      	cmp	r3, #0
 800617c:	d0fa      	beq.n	8006174 <USBH_LL_IncTimer+0x14>
  {
    phost->pActiveClass->SOFProcess(phost);
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	4798      	blx	r3
}
 8006182:	e7f7      	b.n	8006174 <USBH_LL_IncTimer+0x14>

08006184 <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
 8006184:	2301      	movs	r3, #1
 8006186:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
}
 800618a:	4770      	bx	lr

0800618c <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
 800618c:	2300      	movs	r3, #0
 800618e:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323

  return;
}
 8006192:	4770      	bx	lr

08006194 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006194:	4603      	mov	r3, r0
  phost->device.is_connected = 1U;
 8006196:	2201      	movs	r2, #1
 8006198:	f880 2320 	strb.w	r2, [r0, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800619c:	2000      	movs	r0, #0
 800619e:	f883 0321 	strb.w	r0, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80061a2:	f883 0322 	strb.w	r0, [r3, #802]	; 0x322
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
}
 80061a6:	4770      	bx	lr

080061a8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80061a8:	b538      	push	{r3, r4, r5, lr}
 80061aa:	4604      	mov	r4, r0
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80061ac:	2301      	movs	r3, #1
 80061ae:	f880 3321 	strb.w	r3, [r0, #801]	; 0x321
  phost->device.is_connected = 0U;
 80061b2:	2500      	movs	r5, #0
 80061b4:	f880 5320 	strb.w	r5, [r0, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80061b8:	f880 5323 	strb.w	r5, [r0, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80061bc:	f000 fae6 	bl	800678c <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80061c0:	7921      	ldrb	r1, [r4, #4]
 80061c2:	4620      	mov	r0, r4
 80061c4:	f000 f988 	bl	80064d8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80061c8:	7961      	ldrb	r1, [r4, #5]
 80061ca:	4620      	mov	r0, r4
 80061cc:	f000 f984 	bl	80064d8 <USBH_FreePipe>
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
}
 80061d0:	4628      	mov	r0, r5
 80061d2:	bd38      	pop	{r3, r4, r5, pc}

080061d4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80061d4:	b570      	push	{r4, r5, r6, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	4604      	mov	r4, r0
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 80061da:	7885      	ldrb	r5, [r0, #2]
 80061dc:	2d01      	cmp	r5, #1
 80061de:	d005      	beq.n	80061ec <USBH_CtlReq+0x18>
 80061e0:	2d02      	cmp	r5, #2
 80061e2:	d00a      	beq.n	80061fa <USBH_CtlReq+0x26>
 80061e4:	2501      	movs	r5, #1

    default:
      break;
  }
  return status;
}
 80061e6:	4628      	mov	r0, r5
 80061e8:	b002      	add	sp, #8
 80061ea:	bd70      	pop	{r4, r5, r6, pc}
      phost->Control.buff = buff;
 80061ec:	6081      	str	r1, [r0, #8]
      phost->Control.length = length;
 80061ee:	8182      	strh	r2, [r0, #12]
      phost->Control.state = CTRL_SETUP;
 80061f0:	2301      	movs	r3, #1
 80061f2:	7603      	strb	r3, [r0, #24]
      phost->RequestState = CMD_WAIT;
 80061f4:	2302      	movs	r3, #2
 80061f6:	7083      	strb	r3, [r0, #2]
      break;
 80061f8:	e7f5      	b.n	80061e6 <USBH_CtlReq+0x12>
{
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 80061fa:	7e03      	ldrb	r3, [r0, #24]
 80061fc:	3b01      	subs	r3, #1
 80061fe:	2b0a      	cmp	r3, #10
 8006200:	f200 80bb 	bhi.w	800637a <USBH_CtlReq+0x1a6>
 8006204:	e8df f003 	tbb	[pc, r3]
 8006208:	372c0f06 	.word	0x372c0f06
 800620c:	72675346 	.word	0x72675346
 8006210:	8d80      	.short	0x8d80
 8006212:	9d          	.byte	0x9d
 8006213:	00          	.byte	0x00
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006214:	7942      	ldrb	r2, [r0, #5]
 8006216:	f100 0110 	add.w	r1, r0, #16
 800621a:	f000 f8c8 	bl	80063ae <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800621e:	2302      	movs	r3, #2
 8006220:	7623      	strb	r3, [r4, #24]
  switch (phost->RequestState)
 8006222:	2501      	movs	r5, #1
  return status;
 8006224:	e7df      	b.n	80061e6 <USBH_CtlReq+0x12>
      break;

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006226:	7941      	ldrb	r1, [r0, #5]
 8006228:	f000 fa64 	bl	80066f4 <USBH_LL_GetURBState>
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800622c:	2801      	cmp	r0, #1
 800622e:	d006      	beq.n	800623e <USBH_CtlReq+0x6a>
#endif
#endif
      }
      else
      {
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006230:	2804      	cmp	r0, #4
 8006232:	d001      	beq.n	8006238 <USBH_CtlReq+0x64>
 8006234:	2802      	cmp	r0, #2
 8006236:	d1f4      	bne.n	8006222 <USBH_CtlReq+0x4e>
        {
          phost->Control.state = CTRL_ERROR;
 8006238:	230b      	movs	r3, #11
 800623a:	7623      	strb	r3, [r4, #24]
 800623c:	e7f1      	b.n	8006222 <USBH_CtlReq+0x4e>
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800623e:	7c22      	ldrb	r2, [r4, #16]
        if (phost->Control.setup.b.wLength.w != 0U)
 8006240:	8ae3      	ldrh	r3, [r4, #22]
 8006242:	b133      	cbz	r3, 8006252 <USBH_CtlReq+0x7e>
          if (direction == USB_D2H)
 8006244:	f012 0f80 	tst.w	r2, #128	; 0x80
            phost->Control.state = CTRL_DATA_IN;
 8006248:	bf14      	ite	ne
 800624a:	2303      	movne	r3, #3
            phost->Control.state = CTRL_DATA_OUT;
 800624c:	2305      	moveq	r3, #5
 800624e:	7623      	strb	r3, [r4, #24]
 8006250:	e7e7      	b.n	8006222 <USBH_CtlReq+0x4e>
          if (direction == USB_D2H)
 8006252:	f012 0f80 	tst.w	r2, #128	; 0x80
            phost->Control.state = CTRL_STATUS_OUT;
 8006256:	bf14      	ite	ne
 8006258:	2309      	movne	r3, #9
            phost->Control.state = CTRL_STATUS_IN;
 800625a:	2307      	moveq	r3, #7
 800625c:	7623      	strb	r3, [r4, #24]
 800625e:	e7e0      	b.n	8006222 <USBH_CtlReq+0x4e>
      }
      break;

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006260:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8006264:	81c3      	strh	r3, [r0, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8006266:	7903      	ldrb	r3, [r0, #4]
 8006268:	8982      	ldrh	r2, [r0, #12]
 800626a:	6881      	ldr	r1, [r0, #8]
 800626c:	f000 f8c8 	bl	8006400 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006270:	2304      	movs	r3, #4
 8006272:	7623      	strb	r3, [r4, #24]
      break;
 8006274:	e7d5      	b.n	8006222 <USBH_CtlReq+0x4e>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006276:	7901      	ldrb	r1, [r0, #4]
 8006278:	f000 fa3c 	bl	80066f4 <USBH_LL_GetURBState>

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800627c:	2801      	cmp	r0, #1
 800627e:	d006      	beq.n	800628e <USBH_CtlReq+0xba>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006280:	2805      	cmp	r0, #5
 8006282:	d03c      	beq.n	80062fe <USBH_CtlReq+0x12a>
#endif
#endif
      }
      else
      {
        if (URB_Status == USBH_URB_ERROR)
 8006284:	2804      	cmp	r0, #4
 8006286:	d1cc      	bne.n	8006222 <USBH_CtlReq+0x4e>
        {
          /* Device error */
          phost->Control.state = CTRL_ERROR;
 8006288:	230b      	movs	r3, #11
 800628a:	7623      	strb	r3, [r4, #24]
 800628c:	e7c9      	b.n	8006222 <USBH_CtlReq+0x4e>
        phost->Control.state = CTRL_STATUS_OUT;
 800628e:	2309      	movs	r3, #9
 8006290:	7623      	strb	r3, [r4, #24]
      if (URB_Status == USBH_URB_STALL)
 8006292:	e7c6      	b.n	8006222 <USBH_CtlReq+0x4e>
      }
      break;

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006294:	2301      	movs	r3, #1
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	7943      	ldrb	r3, [r0, #5]
 800629a:	8982      	ldrh	r2, [r0, #12]
 800629c:	6881      	ldr	r1, [r0, #8]
 800629e:	f000 f897 	bl	80063d0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80062a2:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 80062a6:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80062a8:	2306      	movs	r3, #6
 80062aa:	7623      	strb	r3, [r4, #24]
      break;
 80062ac:	e7b9      	b.n	8006222 <USBH_CtlReq+0x4e>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80062ae:	7941      	ldrb	r1, [r0, #5]
 80062b0:	f000 fa20 	bl	80066f4 <USBH_LL_GetURBState>

      if (URB_Status == USBH_URB_DONE)
 80062b4:	2801      	cmp	r0, #1
 80062b6:	d008      	beq.n	80062ca <USBH_CtlReq+0xf6>
#endif
#endif
      }

      /* handle error cases */
      else if (URB_Status == USBH_URB_STALL)
 80062b8:	2805      	cmp	r0, #5
 80062ba:	d020      	beq.n	80062fe <USBH_CtlReq+0x12a>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      else if (URB_Status == USBH_URB_NOTREADY)
 80062bc:	2802      	cmp	r0, #2
 80062be:	d007      	beq.n	80062d0 <USBH_CtlReq+0xfc>
#endif
#endif
      }
      else
      {
        if (URB_Status == USBH_URB_ERROR)
 80062c0:	2804      	cmp	r0, #4
 80062c2:	d1ae      	bne.n	8006222 <USBH_CtlReq+0x4e>
        {
          /* device error */
          phost->Control.state = CTRL_ERROR;
 80062c4:	230b      	movs	r3, #11
 80062c6:	7623      	strb	r3, [r4, #24]
          status = USBH_FAIL;
 80062c8:	e054      	b.n	8006374 <USBH_CtlReq+0x1a0>
        phost->Control.state = CTRL_STATUS_IN;
 80062ca:	2307      	movs	r3, #7
 80062cc:	7623      	strb	r3, [r4, #24]
 80062ce:	e7a8      	b.n	8006222 <USBH_CtlReq+0x4e>
        phost->Control.state = CTRL_DATA_OUT;
 80062d0:	2305      	movs	r3, #5
 80062d2:	7623      	strb	r3, [r4, #24]
 80062d4:	e7a5      	b.n	8006222 <USBH_CtlReq+0x4e>
      }
      break;

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80062d6:	7903      	ldrb	r3, [r0, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	4611      	mov	r1, r2
 80062dc:	f000 f890 	bl	8006400 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80062e0:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 80062e4:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80062e6:	2308      	movs	r3, #8
 80062e8:	7623      	strb	r3, [r4, #24]

      break;
 80062ea:	e79a      	b.n	8006222 <USBH_CtlReq+0x4e>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80062ec:	7901      	ldrb	r1, [r0, #4]
 80062ee:	f000 fa01 	bl	80066f4 <USBH_LL_GetURBState>

      if (URB_Status == USBH_URB_DONE)
 80062f2:	2801      	cmp	r0, #1
 80062f4:	d043      	beq.n	800637e <USBH_CtlReq+0x1aa>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      else if (URB_Status == USBH_URB_ERROR)
 80062f6:	2804      	cmp	r0, #4
 80062f8:	d003      	beq.n	8006302 <USBH_CtlReq+0x12e>
#endif
#endif
      }
      else
      {
        if (URB_Status == USBH_URB_STALL)
 80062fa:	2805      	cmp	r0, #5
 80062fc:	d191      	bne.n	8006222 <USBH_CtlReq+0x4e>
{
 80062fe:	2503      	movs	r5, #3
 8006300:	e03e      	b.n	8006380 <USBH_CtlReq+0x1ac>
        phost->Control.state = CTRL_ERROR;
 8006302:	230b      	movs	r3, #11
 8006304:	7623      	strb	r3, [r4, #24]
 8006306:	e78c      	b.n	8006222 <USBH_CtlReq+0x4e>
        }
      }
      break;

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8006308:	2301      	movs	r3, #1
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	7943      	ldrb	r3, [r0, #5]
 800630e:	2200      	movs	r2, #0
 8006310:	4611      	mov	r1, r2
 8006312:	f000 f85d 	bl	80063d0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006316:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 800631a:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800631c:	230a      	movs	r3, #10
 800631e:	7623      	strb	r3, [r4, #24]
      break;
 8006320:	e77f      	b.n	8006222 <USBH_CtlReq+0x4e>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006322:	7941      	ldrb	r1, [r0, #5]
 8006324:	f000 f9e6 	bl	80066f4 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8006328:	2801      	cmp	r0, #1
 800632a:	d028      	beq.n	800637e <USBH_CtlReq+0x1aa>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      else if (URB_Status == USBH_URB_NOTREADY)
 800632c:	2802      	cmp	r0, #2
 800632e:	d005      	beq.n	800633c <USBH_CtlReq+0x168>
#endif
#endif
      }
      else
      {
        if (URB_Status == USBH_URB_ERROR)
 8006330:	2804      	cmp	r0, #4
 8006332:	f47f af76 	bne.w	8006222 <USBH_CtlReq+0x4e>
        {
          phost->Control.state = CTRL_ERROR;
 8006336:	230b      	movs	r3, #11
 8006338:	7623      	strb	r3, [r4, #24]
 800633a:	e772      	b.n	8006222 <USBH_CtlReq+0x4e>
        phost->Control.state = CTRL_STATUS_OUT;
 800633c:	2309      	movs	r3, #9
 800633e:	7623      	strb	r3, [r4, #24]
 8006340:	e76f      	b.n	8006222 <USBH_CtlReq+0x4e>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006342:	7e43      	ldrb	r3, [r0, #25]
 8006344:	3301      	adds	r3, #1
 8006346:	b2db      	uxtb	r3, r3
 8006348:	7643      	strb	r3, [r0, #25]
 800634a:	2b02      	cmp	r3, #2
 800634c:	d803      	bhi.n	8006356 <USBH_CtlReq+0x182>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800634e:	2301      	movs	r3, #1
 8006350:	7603      	strb	r3, [r0, #24]
        phost->RequestState = CMD_SEND;
 8006352:	7083      	strb	r3, [r0, #2]
 8006354:	e765      	b.n	8006222 <USBH_CtlReq+0x4e>
      }
      else
      {
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006356:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 800635a:	2106      	movs	r1, #6
 800635c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800635e:	2600      	movs	r6, #0
 8006360:	7666      	strb	r6, [r4, #25]
        USBH_ErrLog("Control error: Device not responding");

        /* Free control pipes */
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006362:	7961      	ldrb	r1, [r4, #5]
 8006364:	4620      	mov	r0, r4
 8006366:	f000 f8b7 	bl	80064d8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800636a:	7921      	ldrb	r1, [r4, #4]
 800636c:	4620      	mov	r0, r4
 800636e:	f000 f8b3 	bl	80064d8 <USBH_FreePipe>

        phost->gState = HOST_IDLE;
 8006372:	7026      	strb	r6, [r4, #0]
        phost->RequestState = CMD_SEND;
 8006374:	2301      	movs	r3, #1
 8006376:	70a3      	strb	r3, [r4, #2]
 8006378:	e735      	b.n	80061e6 <USBH_CtlReq+0x12>
  switch (phost->Control.state)
 800637a:	2501      	movs	r5, #1
 800637c:	e733      	b.n	80061e6 <USBH_CtlReq+0x12>
{
 800637e:	2500      	movs	r5, #0
        phost->RequestState = CMD_SEND;
 8006380:	2301      	movs	r3, #1
 8006382:	70a3      	strb	r3, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 8006384:	2300      	movs	r3, #0
 8006386:	7623      	strb	r3, [r4, #24]
 8006388:	e72d      	b.n	80061e6 <USBH_CtlReq+0x12>

0800638a <USBH_ClrFeature>:
{
 800638a:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 800638c:	7883      	ldrb	r3, [r0, #2]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d004      	beq.n	800639c <USBH_ClrFeature+0x12>
  return USBH_CtlReq(phost, NULL, 0U);
 8006392:	2200      	movs	r2, #0
 8006394:	4611      	mov	r1, r2
 8006396:	f7ff ff1d 	bl	80061d4 <USBH_CtlReq>
}
 800639a:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800639c:	2302      	movs	r3, #2
 800639e:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80063a0:	2301      	movs	r3, #1
 80063a2:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80063a4:	2300      	movs	r3, #0
 80063a6:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80063a8:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80063aa:	82c3      	strh	r3, [r0, #22]
 80063ac:	e7f1      	b.n	8006392 <USBH_ClrFeature+0x8>

080063ae <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80063ae:	b510      	push	{r4, lr}
 80063b0:	b084      	sub	sp, #16
 80063b2:	460b      	mov	r3, r1
 80063b4:	4611      	mov	r1, r2

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80063b6:	2400      	movs	r4, #0
 80063b8:	9403      	str	r4, [sp, #12]
 80063ba:	2208      	movs	r2, #8
 80063bc:	9202      	str	r2, [sp, #8]
 80063be:	9301      	str	r3, [sp, #4]
 80063c0:	9400      	str	r4, [sp, #0]
 80063c2:	4623      	mov	r3, r4
 80063c4:	4622      	mov	r2, r4
 80063c6:	f000 fa04 	bl	80067d2 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 80063ca:	4620      	mov	r0, r4
 80063cc:	b004      	add	sp, #16
 80063ce:	bd10      	pop	{r4, pc}

080063d0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80063d0:	b510      	push	{r4, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	460c      	mov	r4, r1
 80063d6:	4619      	mov	r1, r3
 80063d8:	f89d 3018 	ldrb.w	r3, [sp, #24]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80063dc:	f890 c31d 	ldrb.w	ip, [r0, #797]	; 0x31d
  {
    do_ping = 0U;
 80063e0:	f1bc 0f00 	cmp.w	ip, #0
 80063e4:	bf18      	it	ne
 80063e6:	2300      	movne	r3, #0
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80063e8:	9303      	str	r3, [sp, #12]
 80063ea:	9202      	str	r2, [sp, #8]
 80063ec:	9401      	str	r4, [sp, #4]
 80063ee:	2301      	movs	r3, #1
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	2300      	movs	r3, #0
 80063f4:	461a      	mov	r2, r3
 80063f6:	f000 f9ec 	bl	80067d2 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 80063fa:	2000      	movs	r0, #0
 80063fc:	b004      	add	sp, #16
 80063fe:	bd10      	pop	{r4, pc}

08006400 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006400:	b530      	push	{r4, r5, lr}
 8006402:	b085      	sub	sp, #20
 8006404:	460d      	mov	r5, r1
 8006406:	4619      	mov	r1, r3
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006408:	2400      	movs	r4, #0
 800640a:	9403      	str	r4, [sp, #12]
 800640c:	9202      	str	r2, [sp, #8]
 800640e:	9501      	str	r5, [sp, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	9200      	str	r2, [sp, #0]
 8006414:	4623      	mov	r3, r4
 8006416:	f000 f9dc 	bl	80067d2 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 800641a:	4620      	mov	r0, r4
 800641c:	b005      	add	sp, #20
 800641e:	bd30      	pop	{r4, r5, pc}

08006420 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8006420:	b510      	push	{r4, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	460c      	mov	r4, r1
 8006426:	4619      	mov	r1, r3
 8006428:	f89d 3018 	ldrb.w	r3, [sp, #24]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800642c:	f890 c31d 	ldrb.w	ip, [r0, #797]	; 0x31d
  {
    do_ping = 0U;
 8006430:	f1bc 0f00 	cmp.w	ip, #0
 8006434:	bf18      	it	ne
 8006436:	2300      	movne	r3, #0
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006438:	9303      	str	r3, [sp, #12]
 800643a:	9202      	str	r2, [sp, #8]
 800643c:	9401      	str	r4, [sp, #4]
 800643e:	2301      	movs	r3, #1
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	2302      	movs	r3, #2
 8006444:	2200      	movs	r2, #0
 8006446:	f000 f9c4 	bl	80067d2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 800644a:	2000      	movs	r0, #0
 800644c:	b004      	add	sp, #16
 800644e:	bd10      	pop	{r4, pc}

08006450 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8006450:	b530      	push	{r4, r5, lr}
 8006452:	b085      	sub	sp, #20
 8006454:	460d      	mov	r5, r1
 8006456:	4619      	mov	r1, r3
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006458:	2400      	movs	r4, #0
 800645a:	9403      	str	r4, [sp, #12]
 800645c:	9202      	str	r2, [sp, #8]
 800645e:	9501      	str	r5, [sp, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	9200      	str	r2, [sp, #0]
 8006464:	2302      	movs	r3, #2
 8006466:	f000 f9b4 	bl	80067d2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 800646a:	4620      	mov	r0, r4
 800646c:	b005      	add	sp, #20
 800646e:	bd30      	pop	{r4, r5, pc}

08006470 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006470:	b510      	push	{r4, lr}
 8006472:	b084      	sub	sp, #16
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006474:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8006478:	9402      	str	r4, [sp, #8]
 800647a:	f89d 401c 	ldrb.w	r4, [sp, #28]
 800647e:	9401      	str	r4, [sp, #4]
 8006480:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8006484:	9400      	str	r4, [sp, #0]
 8006486:	f000 f989 	bl	800679c <USBH_LL_OpenPipe>

  return USBH_OK;
}
 800648a:	2000      	movs	r0, #0
 800648c:	b004      	add	sp, #16
 800648e:	bd10      	pop	{r4, pc}

08006490 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006490:	b508      	push	{r3, lr}
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8006492:	f000 f996 	bl	80067c2 <USBH_LL_ClosePipe>

  return USBH_OK;
}
 8006496:	2000      	movs	r0, #0
 8006498:	bd08      	pop	{r3, pc}

0800649a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800649a:	b410      	push	{r4}
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800649c:	f500 7260 	add.w	r2, r0, #896	; 0x380
{
 80064a0:	2300      	movs	r3, #0
 80064a2:	fa5f fc83 	uxtb.w	ip, r3
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80064a6:	f852 4f04 	ldr.w	r4, [r2, #4]!
 80064aa:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80064ae:	d005      	beq.n	80064bc <USBH_AllocPipe+0x22>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80064b0:	3301      	adds	r3, #1
 80064b2:	2b10      	cmp	r3, #16
 80064b4:	d1f5      	bne.n	80064a2 <USBH_AllocPipe+0x8>
    {
      return (uint16_t)idx;
    }
  }

  return 0xFFFFU;
 80064b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064ba:	e009      	b.n	80064d0 <USBH_AllocPipe+0x36>
      return (uint16_t)idx;
 80064bc:	fa1f f38c 	uxth.w	r3, ip
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80064c0:	f00c 0c0f 	and.w	ip, ip, #15
 80064c4:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80064c8:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80064cc:	f8cc 1384 	str.w	r1, [ip, #900]	; 0x384
}
 80064d0:	b2d8      	uxtb	r0, r3
 80064d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <USBH_FreePipe>:
  if (idx < USBH_MAX_PIPES_NBR)
 80064d8:	290f      	cmp	r1, #15
 80064da:	d807      	bhi.n	80064ec <USBH_FreePipe+0x14>
    phost->Pipes[idx] &= 0x7FFFU;
 80064dc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80064e0:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 80064e4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80064e8:	f8c0 3384 	str.w	r3, [r0, #900]	; 0x384
}
 80064ec:	2000      	movs	r0, #0
 80064ee:	4770      	bx	lr

080064f0 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 80064f0:	4b13      	ldr	r3, [pc, #76]	; (8006540 <FATFS_LinkDriverEx+0x50>)
 80064f2:	7a5b      	ldrb	r3, [r3, #9]
 80064f4:	bb13      	cbnz	r3, 800653c <FATFS_LinkDriverEx+0x4c>
{
 80064f6:	b510      	push	{r4, lr}
 80064f8:	4604      	mov	r4, r0
 80064fa:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 80064fe:	4b10      	ldr	r3, [pc, #64]	; (8006540 <FATFS_LinkDriverEx+0x50>)
 8006500:	f893 c009 	ldrb.w	ip, [r3, #9]
 8006504:	fa5f fc8c 	uxtb.w	ip, ip
 8006508:	f04f 0e00 	mov.w	lr, #0
 800650c:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 8006510:	f893 c009 	ldrb.w	ip, [r3, #9]
 8006514:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8006518:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 800651c:	7a5c      	ldrb	r4, [r3, #9]
 800651e:	441c      	add	r4, r3
 8006520:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 8006522:	7a5a      	ldrb	r2, [r3, #9]
 8006524:	1c54      	adds	r4, r2, #1
 8006526:	b2e4      	uxtb	r4, r4
 8006528:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 800652a:	3230      	adds	r2, #48	; 0x30
 800652c:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800652e:	233a      	movs	r3, #58	; 0x3a
 8006530:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8006532:	232f      	movs	r3, #47	; 0x2f
 8006534:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8006536:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 800653a:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 800653c:	2001      	movs	r0, #1
}
 800653e:	4770      	bx	lr
 8006540:	20003044 	.word	0x20003044

08006544 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006544:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8006546:	2200      	movs	r2, #0
 8006548:	f7ff ffd2 	bl	80064f0 <FATFS_LinkDriverEx>
}
 800654c:	bd08      	pop	{r3, pc}
	...

08006550 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006550:	2904      	cmp	r1, #4
 8006552:	d00c      	beq.n	800656e <USBH_UserProcess+0x1e>
 8006554:	2905      	cmp	r1, #5
 8006556:	d002      	beq.n	800655e <USBH_UserProcess+0xe>
 8006558:	2902      	cmp	r1, #2
 800655a:	d004      	beq.n	8006566 <USBH_UserProcess+0x16>

  default:
  break;
  }
  /* USER CODE END CALL_BACK_1 */
}
 800655c:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 800655e:	4b06      	ldr	r3, [pc, #24]	; (8006578 <USBH_UserProcess+0x28>)
 8006560:	2203      	movs	r2, #3
 8006562:	701a      	strb	r2, [r3, #0]
  break;
 8006564:	4770      	bx	lr
  Appli_state = APPLICATION_READY;
 8006566:	4b04      	ldr	r3, [pc, #16]	; (8006578 <USBH_UserProcess+0x28>)
 8006568:	2202      	movs	r2, #2
 800656a:	701a      	strb	r2, [r3, #0]
  break;
 800656c:	4770      	bx	lr
  Appli_state = APPLICATION_START;
 800656e:	4b02      	ldr	r3, [pc, #8]	; (8006578 <USBH_UserProcess+0x28>)
 8006570:	2201      	movs	r2, #1
 8006572:	701a      	strb	r2, [r3, #0]
}
 8006574:	e7f2      	b.n	800655c <USBH_UserProcess+0xc>
 8006576:	bf00      	nop
 8006578:	20003050 	.word	0x20003050

0800657c <MX_USB_HOST_Init>:
{
 800657c:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800657e:	2201      	movs	r2, #1
 8006580:	490b      	ldr	r1, [pc, #44]	; (80065b0 <MX_USB_HOST_Init+0x34>)
 8006582:	480c      	ldr	r0, [pc, #48]	; (80065b4 <MX_USB_HOST_Init+0x38>)
 8006584:	f7ff fd84 	bl	8006090 <USBH_Init>
 8006588:	b948      	cbnz	r0, 800659e <MX_USB_HOST_Init+0x22>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800658a:	490b      	ldr	r1, [pc, #44]	; (80065b8 <MX_USB_HOST_Init+0x3c>)
 800658c:	4809      	ldr	r0, [pc, #36]	; (80065b4 <MX_USB_HOST_Init+0x38>)
 800658e:	f7ff fd9e 	bl	80060ce <USBH_RegisterClass>
 8006592:	b938      	cbnz	r0, 80065a4 <MX_USB_HOST_Init+0x28>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006594:	4807      	ldr	r0, [pc, #28]	; (80065b4 <MX_USB_HOST_Init+0x38>)
 8006596:	f7ff fdd6 	bl	8006146 <USBH_Start>
 800659a:	b930      	cbnz	r0, 80065aa <MX_USB_HOST_Init+0x2e>
}
 800659c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800659e:	f7fa fe1f 	bl	80011e0 <Error_Handler>
 80065a2:	e7f2      	b.n	800658a <MX_USB_HOST_Init+0xe>
    Error_Handler();
 80065a4:	f7fa fe1c 	bl	80011e0 <Error_Handler>
 80065a8:	e7f4      	b.n	8006594 <MX_USB_HOST_Init+0x18>
    Error_Handler();
 80065aa:	f7fa fe19 	bl	80011e0 <Error_Handler>
}
 80065ae:	e7f5      	b.n	800659c <MX_USB_HOST_Init+0x20>
 80065b0:	08006551 	.word	0x08006551
 80065b4:	20003054 	.word	0x20003054
 80065b8:	20000044 	.word	0x20000044

080065bc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80065bc:	b570      	push	{r4, r5, r6, lr}
 80065be:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065c0:	2300      	movs	r3, #0
 80065c2:	9303      	str	r3, [sp, #12]
 80065c4:	9304      	str	r3, [sp, #16]
 80065c6:	9305      	str	r3, [sp, #20]
 80065c8:	9306      	str	r3, [sp, #24]
 80065ca:	9307      	str	r3, [sp, #28]
  if(hcdHandle->Instance==USB_OTG_FS)
 80065cc:	6803      	ldr	r3, [r0, #0]
 80065ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065d2:	d001      	beq.n	80065d8 <HAL_HCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80065d4:	b008      	add	sp, #32
 80065d6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065d8:	2500      	movs	r5, #0
 80065da:	9501      	str	r5, [sp, #4]
 80065dc:	4c1b      	ldr	r4, [pc, #108]	; (800664c <HAL_HCD_MspInit+0x90>)
 80065de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80065e0:	f043 0301 	orr.w	r3, r3, #1
 80065e4:	6323      	str	r3, [r4, #48]	; 0x30
 80065e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	9301      	str	r3, [sp, #4]
 80065ee:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80065f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065f4:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065f6:	4e16      	ldr	r6, [pc, #88]	; (8006650 <HAL_HCD_MspInit+0x94>)
 80065f8:	a903      	add	r1, sp, #12
 80065fa:	4630      	mov	r0, r6
 80065fc:	f7fb fb4a 	bl	8001c94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006600:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006604:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006606:	2302      	movs	r3, #2
 8006608:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800660a:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800660c:	2303      	movs	r3, #3
 800660e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006610:	230a      	movs	r3, #10
 8006612:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006614:	a903      	add	r1, sp, #12
 8006616:	4630      	mov	r0, r6
 8006618:	f7fb fb3c 	bl	8001c94 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800661c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800661e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006622:	6363      	str	r3, [r4, #52]	; 0x34
 8006624:	9502      	str	r5, [sp, #8]
 8006626:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800662c:	6463      	str	r3, [r4, #68]	; 0x44
 800662e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006634:	9302      	str	r3, [sp, #8]
 8006636:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006638:	462a      	mov	r2, r5
 800663a:	4629      	mov	r1, r5
 800663c:	2043      	movs	r0, #67	; 0x43
 800663e:	f7fb f8af 	bl	80017a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006642:	2043      	movs	r0, #67	; 0x43
 8006644:	f7fb f8e2 	bl	800180c <HAL_NVIC_EnableIRQ>
}
 8006648:	e7c4      	b.n	80065d4 <HAL_HCD_MspInit+0x18>
 800664a:	bf00      	nop
 800664c:	40023800 	.word	0x40023800
 8006650:	40020000 	.word	0x40020000

08006654 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006654:	b508      	push	{r3, lr}
  USBH_LL_IncTimer(hhcd->pData);
 8006656:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 800665a:	f7ff fd81 	bl	8006160 <USBH_LL_IncTimer>
}
 800665e:	bd08      	pop	{r3, pc}

08006660 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006660:	b508      	push	{r3, lr}
  USBH_LL_Connect(hhcd->pData);
 8006662:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8006666:	f7ff fd95 	bl	8006194 <USBH_LL_Connect>
}
 800666a:	bd08      	pop	{r3, pc}

0800666c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800666c:	b508      	push	{r3, lr}
  USBH_LL_Disconnect(hhcd->pData);
 800666e:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8006672:	f7ff fd99 	bl	80061a8 <USBH_LL_Disconnect>
}
 8006676:	bd08      	pop	{r3, pc}

08006678 <HAL_HCD_HC_NotifyURBChange_Callback>:
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006678:	4770      	bx	lr

0800667a <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800667a:	b508      	push	{r3, lr}
  USBH_LL_PortEnabled(hhcd->pData);
 800667c:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8006680:	f7ff fd80 	bl	8006184 <USBH_LL_PortEnabled>
}
 8006684:	bd08      	pop	{r3, pc}

08006686 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006686:	b508      	push	{r3, lr}
  USBH_LL_PortDisabled(hhcd->pData);
 8006688:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 800668c:	f7ff fd7e 	bl	800618c <USBH_LL_PortDisabled>
}
 8006690:	bd08      	pop	{r3, pc}
	...

08006694 <USBH_LL_Init>:
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006694:	f890 33cc 	ldrb.w	r3, [r0, #972]	; 0x3cc
 8006698:	2b01      	cmp	r3, #1
 800669a:	d001      	beq.n	80066a0 <USBH_LL_Init+0xc>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
  }
  return USBH_OK;
}
 800669c:	2000      	movs	r0, #0
 800669e:	4770      	bx	lr
{
 80066a0:	b510      	push	{r4, lr}
 80066a2:	4604      	mov	r4, r0
  hhcd_USB_OTG_FS.pData = phost;
 80066a4:	480f      	ldr	r0, [pc, #60]	; (80066e4 <USBH_LL_Init+0x50>)
 80066a6:	f8c0 4300 	str.w	r4, [r0, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80066aa:	f8c4 03d0 	str.w	r0, [r4, #976]	; 0x3d0
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80066ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80066b2:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80066b4:	2308      	movs	r3, #8
 80066b6:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80066b8:	2301      	movs	r3, #1
 80066ba:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80066bc:	2300      	movs	r3, #0
 80066be:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80066c0:	2202      	movs	r2, #2
 80066c2:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80066c4:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80066c6:	f7fb fce4 	bl	8002092 <HAL_HCD_Init>
 80066ca:	b940      	cbnz	r0, 80066de <USBH_LL_Init+0x4a>
  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80066cc:	4805      	ldr	r0, [pc, #20]	; (80066e4 <USBH_LL_Init+0x50>)
 80066ce:	f7fc f9fe 	bl	8002ace <HAL_HCD_GetCurrentFrame>
 80066d2:	4601      	mov	r1, r0
 80066d4:	4620      	mov	r0, r4
 80066d6:	f7ff fd40 	bl	800615a <USBH_LL_SetTimer>
}
 80066da:	2000      	movs	r0, #0
 80066dc:	bd10      	pop	{r4, pc}
    Error_Handler( );
 80066de:	f7fa fd7f 	bl	80011e0 <Error_Handler>
 80066e2:	e7f3      	b.n	80066cc <USBH_LL_Init+0x38>
 80066e4:	2000342c 	.word	0x2000342c

080066e8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80066e8:	b508      	push	{r3, lr}
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80066ea:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80066ee:	f7fc f9e9 	bl	8002ac4 <HAL_HCD_HC_GetXferCount>
}
 80066f2:	bd08      	pop	{r3, pc}

080066f4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80066f4:	b508      	push	{r3, lr}
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80066f6:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80066fa:	f7fc f9dd 	bl	8002ab8 <HAL_HCD_HC_GetURBState>
}
 80066fe:	bd08      	pop	{r3, pc}

08006700 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8006700:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 8006702:	f890 33cc 	ldrb.w	r3, [r0, #972]	; 0x3cc
 8006706:	2b01      	cmp	r3, #1
 8006708:	d004      	beq.n	8006714 <USBH_LL_DriverVBUS+0x14>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800670a:	20c8      	movs	r0, #200	; 0xc8
 800670c:	f7fb f822 	bl	8001754 <HAL_Delay>
  return USBH_OK;
}
 8006710:	2000      	movs	r0, #0
 8006712:	bd08      	pop	{r3, pc}
    MX_DriverVbusFS(state);
 8006714:	4608      	mov	r0, r1
 8006716:	f000 f871 	bl	80067fc <MX_DriverVbusFS>
 800671a:	e7f6      	b.n	800670a <USBH_LL_DriverVBUS+0xa>

0800671c <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800671c:	f8d0 33d0 	ldr.w	r3, [r0, #976]	; 0x3d0

  if(pHandle->hc[pipe].ep_is_in)
 8006720:	202c      	movs	r0, #44	; 0x2c
 8006722:	fb00 3001 	mla	r0, r0, r1, r3
 8006726:	f890 003b 	ldrb.w	r0, [r0, #59]	; 0x3b
 800672a:	b130      	cbz	r0, 800673a <USBH_LL_SetToggle+0x1e>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800672c:	202c      	movs	r0, #44	; 0x2c
 800672e:	fb00 3301 	mla	r3, r0, r1, r3
 8006732:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 8006736:	2000      	movs	r0, #0
 8006738:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 800673a:	202c      	movs	r0, #44	; 0x2c
 800673c:	fb00 3301 	mla	r3, r0, r1, r3
 8006740:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8006744:	e7f7      	b.n	8006736 <USBH_LL_SetToggle+0x1a>

08006746 <USBH_LL_GetToggle>:
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  uint8_t toggle = 0;
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8006746:	f8d0 33d0 	ldr.w	r3, [r0, #976]	; 0x3d0

  if(pHandle->hc[pipe].ep_is_in)
 800674a:	222c      	movs	r2, #44	; 0x2c
 800674c:	fb02 3201 	mla	r2, r2, r1, r3
 8006750:	f892 203b 	ldrb.w	r2, [r2, #59]	; 0x3b
 8006754:	b12a      	cbz	r2, 8006762 <USBH_LL_GetToggle+0x1c>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8006756:	222c      	movs	r2, #44	; 0x2c
 8006758:	fb02 3301 	mla	r3, r2, r1, r3
 800675c:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 8006760:	4770      	bx	lr
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8006762:	222c      	movs	r2, #44	; 0x2c
 8006764:	fb02 3301 	mla	r3, r2, r1, r3
 8006768:	f893 0055 	ldrb.w	r0, [r3, #85]	; 0x55
  }
  return toggle;
}
 800676c:	4770      	bx	lr

0800676e <USBH_Get_USB_Status>:
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBH_StatusTypeDef usb_status = USBH_OK;

  switch (hal_status)
 800676e:	b120      	cbz	r0, 800677a <USBH_Get_USB_Status+0xc>
    break;
    case HAL_ERROR :
      usb_status = USBH_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8006770:	2802      	cmp	r0, #2
 8006772:	bf14      	ite	ne
 8006774:	2002      	movne	r0, #2
 8006776:	2001      	moveq	r0, #1
 8006778:	4770      	bx	lr
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 800677a:	4770      	bx	lr

0800677c <USBH_LL_Start>:
{
 800677c:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Start(phost->pData);
 800677e:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8006782:	f7fc f972 	bl	8002a6a <HAL_HCD_Start>
  usb_status = USBH_Get_USB_Status(hal_status);
 8006786:	f7ff fff2 	bl	800676e <USBH_Get_USB_Status>
}
 800678a:	bd08      	pop	{r3, pc}

0800678c <USBH_LL_Stop>:
{
 800678c:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Stop(phost->pData);
 800678e:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8006792:	f7fc f97f 	bl	8002a94 <HAL_HCD_Stop>
  usb_status = USBH_Get_USB_Status(hal_status);
 8006796:	f7ff ffea 	bl	800676e <USBH_Get_USB_Status>
}
 800679a:	bd08      	pop	{r3, pc}

0800679c <USBH_LL_OpenPipe>:
{
 800679c:	b510      	push	{r4, lr}
 800679e:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80067a0:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80067a4:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80067a8:	9402      	str	r4, [sp, #8]
 80067aa:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80067ae:	9401      	str	r4, [sp, #4]
 80067b0:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80067b4:	9400      	str	r4, [sp, #0]
 80067b6:	f7fb fc25 	bl	8002004 <HAL_HCD_HC_Init>
  usb_status = USBH_Get_USB_Status(hal_status);
 80067ba:	f7ff ffd8 	bl	800676e <USBH_Get_USB_Status>
}
 80067be:	b004      	add	sp, #16
 80067c0:	bd10      	pop	{r4, pc}

080067c2 <USBH_LL_ClosePipe>:
{
 80067c2:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80067c4:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80067c8:	f7fb fc51 	bl	800206e <HAL_HCD_HC_Halt>
  usb_status = USBH_Get_USB_Status(hal_status);
 80067cc:	f7ff ffcf 	bl	800676e <USBH_Get_USB_Status>
}
 80067d0:	bd08      	pop	{r3, pc}

080067d2 <USBH_LL_SubmitURB>:
{
 80067d2:	b510      	push	{r4, lr}
 80067d4:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80067d6:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80067da:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 80067de:	9403      	str	r4, [sp, #12]
 80067e0:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80067e4:	9402      	str	r4, [sp, #8]
 80067e6:	9c07      	ldr	r4, [sp, #28]
 80067e8:	9401      	str	r4, [sp, #4]
 80067ea:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80067ee:	9400      	str	r4, [sp, #0]
 80067f0:	f7fb fca1 	bl	8002136 <HAL_HCD_HC_SubmitRequest>
  usb_status =  USBH_Get_USB_Status(hal_status);
 80067f4:	f7ff ffbb 	bl	800676e <USBH_Get_USB_Status>
}
 80067f8:	b004      	add	sp, #16
 80067fa:	bd10      	pop	{r4, pc}

080067fc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80067fc:	b508      	push	{r3, lr}
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 80067fe:	1e02      	subs	r2, r0, #0
 8006800:	bf18      	it	ne
 8006802:	2201      	movne	r2, #1
 8006804:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006808:	4801      	ldr	r0, [pc, #4]	; (8006810 <MX_DriverVbusFS+0x14>)
 800680a:	f7fb fbf5 	bl	8001ff8 <HAL_GPIO_WritePin>
}
 800680e:	bd08      	pop	{r3, pc}
 8006810:	40020800 	.word	0x40020800

08006814 <__errno>:
 8006814:	4b01      	ldr	r3, [pc, #4]	; (800681c <__errno+0x8>)
 8006816:	6818      	ldr	r0, [r3, #0]
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	20000064 	.word	0x20000064

08006820 <__libc_init_array>:
 8006820:	b570      	push	{r4, r5, r6, lr}
 8006822:	4d0d      	ldr	r5, [pc, #52]	; (8006858 <__libc_init_array+0x38>)
 8006824:	4c0d      	ldr	r4, [pc, #52]	; (800685c <__libc_init_array+0x3c>)
 8006826:	1b64      	subs	r4, r4, r5
 8006828:	10a4      	asrs	r4, r4, #2
 800682a:	2600      	movs	r6, #0
 800682c:	42a6      	cmp	r6, r4
 800682e:	d109      	bne.n	8006844 <__libc_init_array+0x24>
 8006830:	4d0b      	ldr	r5, [pc, #44]	; (8006860 <__libc_init_array+0x40>)
 8006832:	4c0c      	ldr	r4, [pc, #48]	; (8006864 <__libc_init_array+0x44>)
 8006834:	f000 f93c 	bl	8006ab0 <_init>
 8006838:	1b64      	subs	r4, r4, r5
 800683a:	10a4      	asrs	r4, r4, #2
 800683c:	2600      	movs	r6, #0
 800683e:	42a6      	cmp	r6, r4
 8006840:	d105      	bne.n	800684e <__libc_init_array+0x2e>
 8006842:	bd70      	pop	{r4, r5, r6, pc}
 8006844:	f855 3b04 	ldr.w	r3, [r5], #4
 8006848:	4798      	blx	r3
 800684a:	3601      	adds	r6, #1
 800684c:	e7ee      	b.n	800682c <__libc_init_array+0xc>
 800684e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006852:	4798      	blx	r3
 8006854:	3601      	adds	r6, #1
 8006856:	e7f2      	b.n	800683e <__libc_init_array+0x1e>
 8006858:	08006d68 	.word	0x08006d68
 800685c:	08006d68 	.word	0x08006d68
 8006860:	08006d68 	.word	0x08006d68
 8006864:	08006d6c 	.word	0x08006d6c

08006868 <malloc>:
 8006868:	4b02      	ldr	r3, [pc, #8]	; (8006874 <malloc+0xc>)
 800686a:	4601      	mov	r1, r0
 800686c:	6818      	ldr	r0, [r3, #0]
 800686e:	f000 b88d 	b.w	800698c <_malloc_r>
 8006872:	bf00      	nop
 8006874:	20000064 	.word	0x20000064

08006878 <free>:
 8006878:	4b02      	ldr	r3, [pc, #8]	; (8006884 <free+0xc>)
 800687a:	4601      	mov	r1, r0
 800687c:	6818      	ldr	r0, [r3, #0]
 800687e:	f000 b819 	b.w	80068b4 <_free_r>
 8006882:	bf00      	nop
 8006884:	20000064 	.word	0x20000064

08006888 <memcpy>:
 8006888:	440a      	add	r2, r1
 800688a:	4291      	cmp	r1, r2
 800688c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006890:	d100      	bne.n	8006894 <memcpy+0xc>
 8006892:	4770      	bx	lr
 8006894:	b510      	push	{r4, lr}
 8006896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800689a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800689e:	4291      	cmp	r1, r2
 80068a0:	d1f9      	bne.n	8006896 <memcpy+0xe>
 80068a2:	bd10      	pop	{r4, pc}

080068a4 <memset>:
 80068a4:	4402      	add	r2, r0
 80068a6:	4603      	mov	r3, r0
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d100      	bne.n	80068ae <memset+0xa>
 80068ac:	4770      	bx	lr
 80068ae:	f803 1b01 	strb.w	r1, [r3], #1
 80068b2:	e7f9      	b.n	80068a8 <memset+0x4>

080068b4 <_free_r>:
 80068b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068b6:	2900      	cmp	r1, #0
 80068b8:	d044      	beq.n	8006944 <_free_r+0x90>
 80068ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068be:	9001      	str	r0, [sp, #4]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f1a1 0404 	sub.w	r4, r1, #4
 80068c6:	bfb8      	it	lt
 80068c8:	18e4      	addlt	r4, r4, r3
 80068ca:	f000 f8e3 	bl	8006a94 <__malloc_lock>
 80068ce:	4a1e      	ldr	r2, [pc, #120]	; (8006948 <_free_r+0x94>)
 80068d0:	9801      	ldr	r0, [sp, #4]
 80068d2:	6813      	ldr	r3, [r2, #0]
 80068d4:	b933      	cbnz	r3, 80068e4 <_free_r+0x30>
 80068d6:	6063      	str	r3, [r4, #4]
 80068d8:	6014      	str	r4, [r2, #0]
 80068da:	b003      	add	sp, #12
 80068dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068e0:	f000 b8de 	b.w	8006aa0 <__malloc_unlock>
 80068e4:	42a3      	cmp	r3, r4
 80068e6:	d908      	bls.n	80068fa <_free_r+0x46>
 80068e8:	6825      	ldr	r5, [r4, #0]
 80068ea:	1961      	adds	r1, r4, r5
 80068ec:	428b      	cmp	r3, r1
 80068ee:	bf01      	itttt	eq
 80068f0:	6819      	ldreq	r1, [r3, #0]
 80068f2:	685b      	ldreq	r3, [r3, #4]
 80068f4:	1949      	addeq	r1, r1, r5
 80068f6:	6021      	streq	r1, [r4, #0]
 80068f8:	e7ed      	b.n	80068d6 <_free_r+0x22>
 80068fa:	461a      	mov	r2, r3
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	b10b      	cbz	r3, 8006904 <_free_r+0x50>
 8006900:	42a3      	cmp	r3, r4
 8006902:	d9fa      	bls.n	80068fa <_free_r+0x46>
 8006904:	6811      	ldr	r1, [r2, #0]
 8006906:	1855      	adds	r5, r2, r1
 8006908:	42a5      	cmp	r5, r4
 800690a:	d10b      	bne.n	8006924 <_free_r+0x70>
 800690c:	6824      	ldr	r4, [r4, #0]
 800690e:	4421      	add	r1, r4
 8006910:	1854      	adds	r4, r2, r1
 8006912:	42a3      	cmp	r3, r4
 8006914:	6011      	str	r1, [r2, #0]
 8006916:	d1e0      	bne.n	80068da <_free_r+0x26>
 8006918:	681c      	ldr	r4, [r3, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	6053      	str	r3, [r2, #4]
 800691e:	4421      	add	r1, r4
 8006920:	6011      	str	r1, [r2, #0]
 8006922:	e7da      	b.n	80068da <_free_r+0x26>
 8006924:	d902      	bls.n	800692c <_free_r+0x78>
 8006926:	230c      	movs	r3, #12
 8006928:	6003      	str	r3, [r0, #0]
 800692a:	e7d6      	b.n	80068da <_free_r+0x26>
 800692c:	6825      	ldr	r5, [r4, #0]
 800692e:	1961      	adds	r1, r4, r5
 8006930:	428b      	cmp	r3, r1
 8006932:	bf04      	itt	eq
 8006934:	6819      	ldreq	r1, [r3, #0]
 8006936:	685b      	ldreq	r3, [r3, #4]
 8006938:	6063      	str	r3, [r4, #4]
 800693a:	bf04      	itt	eq
 800693c:	1949      	addeq	r1, r1, r5
 800693e:	6021      	streq	r1, [r4, #0]
 8006940:	6054      	str	r4, [r2, #4]
 8006942:	e7ca      	b.n	80068da <_free_r+0x26>
 8006944:	b003      	add	sp, #12
 8006946:	bd30      	pop	{r4, r5, pc}
 8006948:	20003730 	.word	0x20003730

0800694c <sbrk_aligned>:
 800694c:	b570      	push	{r4, r5, r6, lr}
 800694e:	4e0e      	ldr	r6, [pc, #56]	; (8006988 <sbrk_aligned+0x3c>)
 8006950:	460c      	mov	r4, r1
 8006952:	6831      	ldr	r1, [r6, #0]
 8006954:	4605      	mov	r5, r0
 8006956:	b911      	cbnz	r1, 800695e <sbrk_aligned+0x12>
 8006958:	f000 f88c 	bl	8006a74 <_sbrk_r>
 800695c:	6030      	str	r0, [r6, #0]
 800695e:	4621      	mov	r1, r4
 8006960:	4628      	mov	r0, r5
 8006962:	f000 f887 	bl	8006a74 <_sbrk_r>
 8006966:	1c43      	adds	r3, r0, #1
 8006968:	d00a      	beq.n	8006980 <sbrk_aligned+0x34>
 800696a:	1cc4      	adds	r4, r0, #3
 800696c:	f024 0403 	bic.w	r4, r4, #3
 8006970:	42a0      	cmp	r0, r4
 8006972:	d007      	beq.n	8006984 <sbrk_aligned+0x38>
 8006974:	1a21      	subs	r1, r4, r0
 8006976:	4628      	mov	r0, r5
 8006978:	f000 f87c 	bl	8006a74 <_sbrk_r>
 800697c:	3001      	adds	r0, #1
 800697e:	d101      	bne.n	8006984 <sbrk_aligned+0x38>
 8006980:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006984:	4620      	mov	r0, r4
 8006986:	bd70      	pop	{r4, r5, r6, pc}
 8006988:	20003734 	.word	0x20003734

0800698c <_malloc_r>:
 800698c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006990:	1ccd      	adds	r5, r1, #3
 8006992:	f025 0503 	bic.w	r5, r5, #3
 8006996:	3508      	adds	r5, #8
 8006998:	2d0c      	cmp	r5, #12
 800699a:	bf38      	it	cc
 800699c:	250c      	movcc	r5, #12
 800699e:	2d00      	cmp	r5, #0
 80069a0:	4607      	mov	r7, r0
 80069a2:	db01      	blt.n	80069a8 <_malloc_r+0x1c>
 80069a4:	42a9      	cmp	r1, r5
 80069a6:	d905      	bls.n	80069b4 <_malloc_r+0x28>
 80069a8:	230c      	movs	r3, #12
 80069aa:	603b      	str	r3, [r7, #0]
 80069ac:	2600      	movs	r6, #0
 80069ae:	4630      	mov	r0, r6
 80069b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069b4:	4e2e      	ldr	r6, [pc, #184]	; (8006a70 <_malloc_r+0xe4>)
 80069b6:	f000 f86d 	bl	8006a94 <__malloc_lock>
 80069ba:	6833      	ldr	r3, [r6, #0]
 80069bc:	461c      	mov	r4, r3
 80069be:	bb34      	cbnz	r4, 8006a0e <_malloc_r+0x82>
 80069c0:	4629      	mov	r1, r5
 80069c2:	4638      	mov	r0, r7
 80069c4:	f7ff ffc2 	bl	800694c <sbrk_aligned>
 80069c8:	1c43      	adds	r3, r0, #1
 80069ca:	4604      	mov	r4, r0
 80069cc:	d14d      	bne.n	8006a6a <_malloc_r+0xde>
 80069ce:	6834      	ldr	r4, [r6, #0]
 80069d0:	4626      	mov	r6, r4
 80069d2:	2e00      	cmp	r6, #0
 80069d4:	d140      	bne.n	8006a58 <_malloc_r+0xcc>
 80069d6:	6823      	ldr	r3, [r4, #0]
 80069d8:	4631      	mov	r1, r6
 80069da:	4638      	mov	r0, r7
 80069dc:	eb04 0803 	add.w	r8, r4, r3
 80069e0:	f000 f848 	bl	8006a74 <_sbrk_r>
 80069e4:	4580      	cmp	r8, r0
 80069e6:	d13a      	bne.n	8006a5e <_malloc_r+0xd2>
 80069e8:	6821      	ldr	r1, [r4, #0]
 80069ea:	3503      	adds	r5, #3
 80069ec:	1a6d      	subs	r5, r5, r1
 80069ee:	f025 0503 	bic.w	r5, r5, #3
 80069f2:	3508      	adds	r5, #8
 80069f4:	2d0c      	cmp	r5, #12
 80069f6:	bf38      	it	cc
 80069f8:	250c      	movcc	r5, #12
 80069fa:	4629      	mov	r1, r5
 80069fc:	4638      	mov	r0, r7
 80069fe:	f7ff ffa5 	bl	800694c <sbrk_aligned>
 8006a02:	3001      	adds	r0, #1
 8006a04:	d02b      	beq.n	8006a5e <_malloc_r+0xd2>
 8006a06:	6823      	ldr	r3, [r4, #0]
 8006a08:	442b      	add	r3, r5
 8006a0a:	6023      	str	r3, [r4, #0]
 8006a0c:	e00e      	b.n	8006a2c <_malloc_r+0xa0>
 8006a0e:	6822      	ldr	r2, [r4, #0]
 8006a10:	1b52      	subs	r2, r2, r5
 8006a12:	d41e      	bmi.n	8006a52 <_malloc_r+0xc6>
 8006a14:	2a0b      	cmp	r2, #11
 8006a16:	d916      	bls.n	8006a46 <_malloc_r+0xba>
 8006a18:	1961      	adds	r1, r4, r5
 8006a1a:	42a3      	cmp	r3, r4
 8006a1c:	6025      	str	r5, [r4, #0]
 8006a1e:	bf18      	it	ne
 8006a20:	6059      	strne	r1, [r3, #4]
 8006a22:	6863      	ldr	r3, [r4, #4]
 8006a24:	bf08      	it	eq
 8006a26:	6031      	streq	r1, [r6, #0]
 8006a28:	5162      	str	r2, [r4, r5]
 8006a2a:	604b      	str	r3, [r1, #4]
 8006a2c:	4638      	mov	r0, r7
 8006a2e:	f104 060b 	add.w	r6, r4, #11
 8006a32:	f000 f835 	bl	8006aa0 <__malloc_unlock>
 8006a36:	f026 0607 	bic.w	r6, r6, #7
 8006a3a:	1d23      	adds	r3, r4, #4
 8006a3c:	1af2      	subs	r2, r6, r3
 8006a3e:	d0b6      	beq.n	80069ae <_malloc_r+0x22>
 8006a40:	1b9b      	subs	r3, r3, r6
 8006a42:	50a3      	str	r3, [r4, r2]
 8006a44:	e7b3      	b.n	80069ae <_malloc_r+0x22>
 8006a46:	6862      	ldr	r2, [r4, #4]
 8006a48:	42a3      	cmp	r3, r4
 8006a4a:	bf0c      	ite	eq
 8006a4c:	6032      	streq	r2, [r6, #0]
 8006a4e:	605a      	strne	r2, [r3, #4]
 8006a50:	e7ec      	b.n	8006a2c <_malloc_r+0xa0>
 8006a52:	4623      	mov	r3, r4
 8006a54:	6864      	ldr	r4, [r4, #4]
 8006a56:	e7b2      	b.n	80069be <_malloc_r+0x32>
 8006a58:	4634      	mov	r4, r6
 8006a5a:	6876      	ldr	r6, [r6, #4]
 8006a5c:	e7b9      	b.n	80069d2 <_malloc_r+0x46>
 8006a5e:	230c      	movs	r3, #12
 8006a60:	603b      	str	r3, [r7, #0]
 8006a62:	4638      	mov	r0, r7
 8006a64:	f000 f81c 	bl	8006aa0 <__malloc_unlock>
 8006a68:	e7a1      	b.n	80069ae <_malloc_r+0x22>
 8006a6a:	6025      	str	r5, [r4, #0]
 8006a6c:	e7de      	b.n	8006a2c <_malloc_r+0xa0>
 8006a6e:	bf00      	nop
 8006a70:	20003730 	.word	0x20003730

08006a74 <_sbrk_r>:
 8006a74:	b538      	push	{r3, r4, r5, lr}
 8006a76:	4d06      	ldr	r5, [pc, #24]	; (8006a90 <_sbrk_r+0x1c>)
 8006a78:	2300      	movs	r3, #0
 8006a7a:	4604      	mov	r4, r0
 8006a7c:	4608      	mov	r0, r1
 8006a7e:	602b      	str	r3, [r5, #0]
 8006a80:	f7fa fd78 	bl	8001574 <_sbrk>
 8006a84:	1c43      	adds	r3, r0, #1
 8006a86:	d102      	bne.n	8006a8e <_sbrk_r+0x1a>
 8006a88:	682b      	ldr	r3, [r5, #0]
 8006a8a:	b103      	cbz	r3, 8006a8e <_sbrk_r+0x1a>
 8006a8c:	6023      	str	r3, [r4, #0]
 8006a8e:	bd38      	pop	{r3, r4, r5, pc}
 8006a90:	20003738 	.word	0x20003738

08006a94 <__malloc_lock>:
 8006a94:	4801      	ldr	r0, [pc, #4]	; (8006a9c <__malloc_lock+0x8>)
 8006a96:	f000 b809 	b.w	8006aac <__retarget_lock_acquire_recursive>
 8006a9a:	bf00      	nop
 8006a9c:	2000373c 	.word	0x2000373c

08006aa0 <__malloc_unlock>:
 8006aa0:	4801      	ldr	r0, [pc, #4]	; (8006aa8 <__malloc_unlock+0x8>)
 8006aa2:	f000 b804 	b.w	8006aae <__retarget_lock_release_recursive>
 8006aa6:	bf00      	nop
 8006aa8:	2000373c 	.word	0x2000373c

08006aac <__retarget_lock_acquire_recursive>:
 8006aac:	4770      	bx	lr

08006aae <__retarget_lock_release_recursive>:
 8006aae:	4770      	bx	lr

08006ab0 <_init>:
 8006ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab2:	bf00      	nop
 8006ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ab6:	bc08      	pop	{r3}
 8006ab8:	469e      	mov	lr, r3
 8006aba:	4770      	bx	lr

08006abc <_fini>:
 8006abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006abe:	bf00      	nop
 8006ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ac2:	bc08      	pop	{r3}
 8006ac4:	469e      	mov	lr, r3
 8006ac6:	4770      	bx	lr
