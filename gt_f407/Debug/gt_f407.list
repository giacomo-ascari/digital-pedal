
gt_f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ccb4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  0800ce3c  0800ce3c  0001ce3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0d4  0800d0d4  000200c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0d4  0800d0d4  0001d0d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0dc  0800d0dc  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0dc  0800d0dc  0001d0dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0e0  0800d0e0  0001d0e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  0800d0e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c8  2**0
                  CONTENTS
 10 .bss          00003488  200000c8  200000c8  000200c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003550  20003550  000200c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002213f  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005329  00000000  00000000  00042237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001740  00000000  00000000  00047560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001540  00000000  00000000  00048ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002767d  00000000  00000000  0004a1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023995  00000000  00000000  0007185d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cece5  00000000  00000000  000951f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00163ed7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000612c  00000000  00000000  00163f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000c8 	.word	0x200000c8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800ce24 	.word	0x0800ce24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000cc 	.word	0x200000cc
 80001c4:	0800ce24 	.word	0x0800ce24

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	603a      	str	r2, [r7, #0]
 80004d6:	80fb      	strh	r3, [r7, #6]
 80004d8:	460b      	mov	r3, r1
 80004da:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 80004dc:	2300      	movs	r3, #0
 80004de:	73fb      	strb	r3, [r7, #15]
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 80004e0:	2200      	movs	r2, #0
 80004e2:	6839      	ldr	r1, [r7, #0]
 80004e4:	481c      	ldr	r0, [pc, #112]	; (8000558 <AUDIO_OUT_Init+0x8c>)
 80004e6:	f000 f863 	bl	80005b0 <AUDIO_OUT_ClockConfig>
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  hAudioOutI2s.Instance = I2S3;
 80004ea:	4b1b      	ldr	r3, [pc, #108]	; (8000558 <AUDIO_OUT_Init+0x8c>)
 80004ec:	4a1b      	ldr	r2, [pc, #108]	; (800055c <AUDIO_OUT_Init+0x90>)
 80004ee:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 80004f0:	4819      	ldr	r0, [pc, #100]	; (8000558 <AUDIO_OUT_Init+0x8c>)
 80004f2:	f005 fb15 	bl	8005b20 <HAL_I2S_GetState>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d103      	bne.n	8000504 <AUDIO_OUT_Init+0x38>
  {
    /* Init the I2S MSP: this __weak function can be redefined by the application*/
    AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 80004fc:	2100      	movs	r1, #0
 80004fe:	4816      	ldr	r0, [pc, #88]	; (8000558 <AUDIO_OUT_Init+0x8c>)
 8000500:	f000 f8b0 	bl	8000664 <AUDIO_OUT_MspInit>
  }

  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  /* Configure the I2S peripheral */
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 8000504:	6838      	ldr	r0, [r7, #0]
 8000506:	f000 f985 	bl	8000814 <I2S3_Init>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 8000510:	2301      	movs	r3, #1
 8000512:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 8000514:	7bfb      	ldrb	r3, [r7, #15]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d10e      	bne.n	8000538 <AUDIO_OUT_Init+0x6c>
  {
    /* Retieve audio codec identifier */
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 800051a:	4b11      	ldr	r3, [pc, #68]	; (8000560 <AUDIO_OUT_Init+0x94>)
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	2094      	movs	r0, #148	; 0x94
 8000520:	4798      	blx	r3
 8000522:	4603      	mov	r3, r0
 8000524:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8000528:	2be0      	cmp	r3, #224	; 0xe0
 800052a:	d103      	bne.n	8000534 <AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv; 
 800052c:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <AUDIO_OUT_Init+0x98>)
 800052e:	4a0c      	ldr	r2, [pc, #48]	; (8000560 <AUDIO_OUT_Init+0x94>)
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	e001      	b.n	8000538 <AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 8000534:	2301      	movs	r3, #1
 8000536:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 8000538:	7bfb      	ldrb	r3, [r7, #15]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d107      	bne.n	800054e <AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <AUDIO_OUT_Init+0x98>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	681c      	ldr	r4, [r3, #0]
 8000544:	797a      	ldrb	r2, [r7, #5]
 8000546:	88f9      	ldrh	r1, [r7, #6]
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	2094      	movs	r0, #148	; 0x94
 800054c:	47a0      	blx	r4
  }
  
  return ret;
 800054e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000550:	4618      	mov	r0, r3
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	bd90      	pop	{r4, r7, pc}
 8000558:	200000e8 	.word	0x200000e8
 800055c:	40003c00 	.word	0x40003c00
 8000560:	20000004 	.word	0x20000004
 8000564:	200000e4 	.word	0x200000e4

08000568 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a04      	ldr	r2, [pc, #16]	; (8000588 <HAL_I2S_TxCpltCallback+0x20>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d101      	bne.n	800057e <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    AUDIO_OUT_TransferComplete_CallBack();
 800057a:	f000 f935 	bl	80007e8 <AUDIO_OUT_TransferComplete_CallBack>
  }
}
 800057e:	bf00      	nop
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40003c00 	.word	0x40003c00

0800058c <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a04      	ldr	r2, [pc, #16]	; (80005ac <HAL_I2S_TxHalfCpltCallback+0x20>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d101      	bne.n	80005a2 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    AUDIO_OUT_HalfTransfer_CallBack();
 800059e:	f000 f92a 	bl	80007f6 <AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40003c00 	.word	0x40003c00

080005b0 <AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	; 0x28
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 80005bc:	2300      	movs	r3, #0
 80005be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80005c2:	23ff      	movs	r3, #255	; 0xff
 80005c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
  for(index = 0; index < 8; index++)
 80005c8:	2300      	movs	r3, #0
 80005ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80005ce:	e010      	b.n	80005f2 <AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 80005d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005d4:	4a20      	ldr	r2, [pc, #128]	; (8000658 <AUDIO_OUT_ClockConfig+0xa8>)
 80005d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d103      	bne.n	80005e8 <AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 80005e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  for(index = 0; index < 8; index++)
 80005e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005ec:	3301      	adds	r3, #1
 80005ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80005f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005f6:	2b07      	cmp	r3, #7
 80005f8:	d9ea      	bls.n	80005d0 <AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4618      	mov	r0, r3
 8000600:	f006 fbac 	bl	8006d5c <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8000604:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000608:	f003 0307 	and.w	r3, r3, #7
 800060c:	2b00      	cmp	r3, #0
 800060e:	d113      	bne.n	8000638 <AUDIO_OUT_ClockConfig+0x88>
  {
    /* I2S clock config 
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000610:	2301      	movs	r3, #1
 8000612:	617b      	str	r3, [r7, #20]
//    rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8000614:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000618:	4a10      	ldr	r2, [pc, #64]	; (800065c <AUDIO_OUT_ClockConfig+0xac>)
 800061a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800061e:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8000620:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000624:	4a0e      	ldr	r2, [pc, #56]	; (8000660 <AUDIO_OUT_ClockConfig+0xb0>)
 8000626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800062a:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4618      	mov	r0, r3
 8000632:	f006 fab1 	bl	8006b98 <HAL_RCCEx_PeriphCLKConfig>
//    rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 8000636:	e00b      	b.n	8000650 <AUDIO_OUT_ClockConfig+0xa0>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000638:	2301      	movs	r3, #1
 800063a:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 800063c:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000640:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8000642:	2303      	movs	r3, #3
 8000644:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4618      	mov	r0, r3
 800064c:	f006 faa4 	bl	8006b98 <HAL_RCCEx_PeriphCLKConfig>
}
 8000650:	bf00      	nop
 8000652:	3728      	adds	r7, #40	; 0x28
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	0800d040 	.word	0x0800d040
 800065c:	0800d060 	.word	0x0800d060
 8000660:	0800d080 	.word	0x0800d080

08000664 <AUDIO_OUT_MspInit>:
  * @brief  AUDIO OUT I2S MSP Init.
  * @param  hi2s: might be required to set audio peripheral predivider if any.
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08c      	sub	sp, #48	; 0x30
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	61bb      	str	r3, [r7, #24]
 8000672:	4b57      	ldr	r3, [pc, #348]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 8000674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000676:	4a56      	ldr	r2, [pc, #344]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 8000678:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800067c:	6413      	str	r3, [r2, #64]	; 0x40
 800067e:	4b54      	ldr	r3, [pc, #336]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 8000680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000682:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000686:	61bb      	str	r3, [r7, #24]
 8000688:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/  
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
 800068e:	4b50      	ldr	r3, [pc, #320]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a4f      	ldr	r2, [pc, #316]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b4d      	ldr	r3, [pc, #308]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	617b      	str	r3, [r7, #20]
 80006a4:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
 80006aa:	4b49      	ldr	r3, [pc, #292]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a48      	ldr	r2, [pc, #288]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b46      	ldr	r3, [pc, #280]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]

  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 80006c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 80006c8:	2302      	movs	r3, #2
 80006ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 80006d0:	2302      	movs	r3, #2
 80006d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 80006d4:	2306      	movs	r3, #6
 80006d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4619      	mov	r1, r3
 80006de:	483d      	ldr	r0, [pc, #244]	; (80007d4 <AUDIO_OUT_MspInit+0x170>)
 80006e0:	f002 f972 	bl	80029c8 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 80006e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	4619      	mov	r1, r3
 80006f0:	4839      	ldr	r0, [pc, #228]	; (80007d8 <AUDIO_OUT_MspInit+0x174>)
 80006f2:	f002 f969 	bl	80029c8 <HAL_GPIO_Init>

  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	4b35      	ldr	r3, [pc, #212]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a34      	ldr	r2, [pc, #208]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b32      	ldr	r3, [pc, #200]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 8000712:	2380      	movs	r3, #128	; 0x80
 8000714:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	4619      	mov	r1, r3
 800071c:	482d      	ldr	r0, [pc, #180]	; (80007d4 <AUDIO_OUT_MspInit+0x170>)
 800071e:	f002 f953 	bl	80029c8 <HAL_GPIO_Init>

  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE(); 
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a29      	ldr	r2, [pc, #164]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 800072c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b27      	ldr	r3, [pc, #156]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a26      	ldr	r2, [pc, #152]	; (80007dc <AUDIO_OUT_MspInit+0x178>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d136      	bne.n	80007b6 <AUDIO_OUT_MspInit+0x152>
  {
    /* Configure the hdma_i2sTx handle parameters */   
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 8000748:	4b25      	ldr	r3, [pc, #148]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 800074a:	2200      	movs	r2, #0
 800074c:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800074e:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 8000750:	2240      	movs	r2, #64	; 0x40
 8000752:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000754:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 800075a:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 800075c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000760:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 8000762:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 8000764:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000768:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 800076a:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 800076c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000770:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 8000772:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 8000774:	2200      	movs	r2, #0
 8000776:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000778:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 800077a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800077e:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8000780:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 8000782:	2204      	movs	r2, #4
 8000784:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 8000788:	2203      	movs	r2, #3
 800078a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 800078e:	2200      	movs	r2, #0
 8000790:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 8000794:	2200      	movs	r2, #0
 8000796:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 800079a:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <AUDIO_OUT_MspInit+0x180>)
 800079c:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 80007a2:	639a      	str	r2, [r3, #56]	; 0x38
 80007a4:	4a0e      	ldr	r2, [pc, #56]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 80007aa:	480d      	ldr	r0, [pc, #52]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 80007ac:	f001 fdec 	bl	8002388 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 80007b0:	480b      	ldr	r0, [pc, #44]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 80007b2:	f001 fd3b 	bl	800222c <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	210e      	movs	r1, #14
 80007ba:	202f      	movs	r0, #47	; 0x2f
 80007bc:	f001 fcff 	bl	80021be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);  
 80007c0:	202f      	movs	r0, #47	; 0x2f
 80007c2:	f001 fd18 	bl	80021f6 <HAL_NVIC_EnableIRQ>
}
 80007c6:	bf00      	nop
 80007c8:	3730      	adds	r7, #48	; 0x30
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020800 	.word	0x40020800
 80007d8:	40020000 	.word	0x40020000
 80007dc:	40003c00 	.word	0x40003c00
 80007e0:	20000130 	.word	0x20000130
 80007e4:	400260b8 	.word	0x400260b8

080007e8 <AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void AUDIO_OUT_TransferComplete_CallBack(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <AUDIO_OUT_HalfTransfer_CallBack>:

/**
  * @brief  Manages the DMA Half Transfer complete event.
  */
__weak void AUDIO_OUT_HalfTransfer_CallBack(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void AUDIO_OUT_Error_CallBack(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
	...

08000814 <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <I2S3_Init+0x68>)
 800081e:	4a18      	ldr	r2, [pc, #96]	; (8000880 <I2S3_Init+0x6c>)
 8000820:	601a      	str	r2, [r3, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <I2S3_Init+0x68>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	69da      	ldr	r2, [r3, #28]
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <I2S3_Init+0x68>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000830:	61da      	str	r2, [r3, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 8000832:	4a12      	ldr	r2, [pc, #72]	; (800087c <I2S3_Init+0x68>)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8000838:	4b10      	ldr	r3, [pc, #64]	; (800087c <I2S3_Init+0x68>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <I2S3_Init+0x68>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000844:	4b0d      	ldr	r3, [pc, #52]	; (800087c <I2S3_Init+0x68>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <I2S3_Init+0x68>)
 800084c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000850:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <I2S3_Init+0x68>)
 8000854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000858:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <I2S3_Init+0x68>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 8000860:	4806      	ldr	r0, [pc, #24]	; (800087c <I2S3_Init+0x68>)
 8000862:	f004 ff6b 	bl	800573c <HAL_I2S_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <I2S3_Init+0x5c>
  {
    return AUDIO_ERROR;
 800086c:	2301      	movs	r3, #1
 800086e:	e000      	b.n	8000872 <I2S3_Init+0x5e>
  }
  else
  {
    return AUDIO_OK;
 8000870:	2300      	movs	r3, #0
  }
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200000e8 	.word	0x200000e8
 8000880:	40003c00 	.word	0x40003c00

08000884 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a04      	ldr	r2, [pc, #16]	; (80008a4 <HAL_I2S_ErrorCallback+0x20>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d101      	bne.n	800089a <HAL_I2S_ErrorCallback+0x16>
  {
    AUDIO_OUT_Error_CallBack();
 8000896:	f7ff ffb5 	bl	8000804 <AUDIO_OUT_Error_CallBack>
  }
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40003c00 	.word	0x40003c00

080008a8 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80008ac:	4814      	ldr	r0, [pc, #80]	; (8000900 <I2Cx_Init+0x58>)
 80008ae:	f004 fbdb 	bl	8005068 <HAL_I2C_GetState>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d121      	bne.n	80008fc <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = AUDIO_I2Cx;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <I2Cx_Init+0x58>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	; (8000904 <I2Cx_Init+0x5c>)
 80008bc:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <I2Cx_Init+0x58>)
 80008c0:	2243      	movs	r2, #67	; 0x43
 80008c2:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 80008c4:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <I2Cx_Init+0x58>)
 80008c6:	4a10      	ldr	r2, [pc, #64]	; (8000908 <I2Cx_Init+0x60>)
 80008c8:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <I2Cx_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d0:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <I2Cx_Init+0x58>)
 80008d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008d6:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <I2Cx_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <I2Cx_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <I2Cx_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 80008ea:	4b05      	ldr	r3, [pc, #20]	; (8000900 <I2Cx_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80008f0:	4803      	ldr	r0, [pc, #12]	; (8000900 <I2Cx_Init+0x58>)
 80008f2:	f000 f86b 	bl	80009cc <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80008f6:	4802      	ldr	r0, [pc, #8]	; (8000900 <I2Cx_Init+0x58>)
 80008f8:	f003 ff22 	bl	8004740 <HAL_I2C_Init>
  }
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000190 	.word	0x20000190
 8000904:	40005400 	.word	0x40005400
 8000908:	000186a0 	.word	0x000186a0

0800090c <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af04      	add	r7, sp, #16
 8000912:	4603      	mov	r3, r0
 8000914:	80fb      	strh	r3, [r7, #6]
 8000916:	460b      	mov	r3, r1
 8000918:	717b      	strb	r3, [r7, #5]
 800091a:	4613      	mov	r3, r2
 800091c:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800091e:	2300      	movs	r3, #0
 8000920:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8000922:	797b      	ldrb	r3, [r7, #5]
 8000924:	b29a      	uxth	r2, r3
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <I2Cx_WriteData+0x48>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	88f9      	ldrh	r1, [r7, #6]
 800092c:	9302      	str	r3, [sp, #8]
 800092e:	2301      	movs	r3, #1
 8000930:	9301      	str	r3, [sp, #4]
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	2301      	movs	r3, #1
 8000938:	4807      	ldr	r0, [pc, #28]	; (8000958 <I2Cx_WriteData+0x4c>)
 800093a:	f004 f875 	bl	8004a28 <HAL_I2C_Mem_Write>
 800093e:	4603      	mov	r3, r0
 8000940:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000942:	7bfb      	ldrb	r3, [r7, #15]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000948:	f000 f834 	bl	80009b4 <I2Cx_Error>
  }
}
 800094c:	bf00      	nop
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000000 	.word	0x20000000
 8000958:	20000190 	.word	0x20000190

0800095c <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af04      	add	r7, sp, #16
 8000962:	4603      	mov	r3, r0
 8000964:	460a      	mov	r2, r1
 8000966:	80fb      	strh	r3, [r7, #6]
 8000968:	4613      	mov	r3, r2
 800096a:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800096c:	2300      	movs	r3, #0
 800096e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8000974:	797b      	ldrb	r3, [r7, #5]
 8000976:	b29a      	uxth	r2, r3
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <I2Cx_ReadData+0x50>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	88f9      	ldrh	r1, [r7, #6]
 800097e:	9302      	str	r3, [sp, #8]
 8000980:	2301      	movs	r3, #1
 8000982:	9301      	str	r3, [sp, #4]
 8000984:	f107 030e 	add.w	r3, r7, #14
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	2301      	movs	r3, #1
 800098c:	4808      	ldr	r0, [pc, #32]	; (80009b0 <I2Cx_ReadData+0x54>)
 800098e:	f004 f945 	bl	8004c1c <HAL_I2C_Mem_Read>
 8000992:	4603      	mov	r3, r0
 8000994:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000996:	7bfb      	ldrb	r3, [r7, #15]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 800099c:	f000 f80a 	bl	80009b4 <I2Cx_Error>
  }
  return value;
 80009a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000000 	.word	0x20000000
 80009b0:	20000190 	.word	0x20000190

080009b4 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80009b8:	4803      	ldr	r0, [pc, #12]	; (80009c8 <I2Cx_Error+0x14>)
 80009ba:	f004 f805 	bl	80049c8 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 80009be:	f7ff ff73 	bl	80008a8 <I2Cx_Init>
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000190 	.word	0x20000190

080009cc <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	; 0x28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the I2C peripheral */
  AUDIO_I2Cx_CLOCK_ENABLE();
 80009d4:	2300      	movs	r3, #0
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	4b25      	ldr	r3, [pc, #148]	; (8000a70 <I2Cx_MspInit+0xa4>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	4a24      	ldr	r2, [pc, #144]	; (8000a70 <I2Cx_MspInit+0xa4>)
 80009de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009e2:	6413      	str	r3, [r2, #64]	; 0x40
 80009e4:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <I2Cx_MspInit+0xa4>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <I2Cx_MspInit+0xa4>)
 80009f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f8:	4a1d      	ldr	r2, [pc, #116]	; (8000a70 <I2Cx_MspInit+0xa4>)
 80009fa:	f043 0302 	orr.w	r3, r3, #2
 80009fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <I2Cx_MspInit+0xa4>)
 8000a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a04:	f003 0302 	and.w	r3, r3, #2
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 8000a0c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8000a12:	2312      	movs	r3, #18
 8000a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 8000a1e:	2304      	movs	r3, #4
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	4619      	mov	r1, r3
 8000a28:	4812      	ldr	r0, [pc, #72]	; (8000a74 <I2Cx_MspInit+0xa8>)
 8000a2a:	f001 ffcd 	bl	80029c8 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  AUDIO_I2Cx_FORCE_RESET();
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <I2Cx_MspInit+0xa4>)
 8000a30:	6a1b      	ldr	r3, [r3, #32]
 8000a32:	4a0f      	ldr	r2, [pc, #60]	; (8000a70 <I2Cx_MspInit+0xa4>)
 8000a34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a38:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  AUDIO_I2Cx_RELEASE_RESET();
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <I2Cx_MspInit+0xa4>)
 8000a3c:	6a1b      	ldr	r3, [r3, #32]
 8000a3e:	4a0c      	ldr	r2, [pc, #48]	; (8000a70 <I2Cx_MspInit+0xa4>)
 8000a40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000a44:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	210f      	movs	r1, #15
 8000a4a:	201f      	movs	r0, #31
 8000a4c:	f001 fbb7 	bl	80021be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 8000a50:	201f      	movs	r0, #31
 8000a52:	f001 fbd0 	bl	80021f6 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	210f      	movs	r1, #15
 8000a5a:	2020      	movs	r0, #32
 8000a5c:	f001 fbaf 	bl	80021be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 8000a60:	2020      	movs	r0, #32
 8000a62:	f001 fbc8 	bl	80021f6 <HAL_NVIC_EnableIRQ>
}
 8000a66:	bf00      	nop
 8000a68:	3728      	adds	r7, #40	; 0x28
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020400 	.word	0x40020400

08000a78 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <AUDIO_IO_Init+0x70>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a18      	ldr	r2, [pc, #96]	; (8000ae8 <AUDIO_IO_Init+0x70>)
 8000a88:	f043 0308 	orr.w	r3, r3, #8
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <AUDIO_IO_Init+0x70>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0308 	and.w	r3, r3, #8
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8000a9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a9e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	4619      	mov	r1, r3
 8000ab0:	480e      	ldr	r0, [pc, #56]	; (8000aec <AUDIO_IO_Init+0x74>)
 8000ab2:	f001 ff89 	bl	80029c8 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8000ab6:	f7ff fef7 	bl	80008a8 <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac0:	480a      	ldr	r0, [pc, #40]	; (8000aec <AUDIO_IO_Init+0x74>)
 8000ac2:	f002 fa19 	bl	8002ef8 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000ac6:	2005      	movs	r0, #5
 8000ac8:	f001 fa7a 	bl	8001fc0 <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8000acc:	2201      	movs	r2, #1
 8000ace:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ad2:	4806      	ldr	r0, [pc, #24]	; (8000aec <AUDIO_IO_Init+0x74>)
 8000ad4:	f002 fa10 	bl	8002ef8 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000ad8:	2005      	movs	r0, #5
 8000ada:	f001 fa71 	bl	8001fc0 <HAL_Delay>
}
 8000ade:	bf00      	nop
 8000ae0:	3718      	adds	r7, #24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020800 	.word	0x40020800

08000af0 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b082      	sub	sp, #8
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4603      	mov	r3, r0
 8000b06:	71fb      	strb	r3, [r7, #7]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	71bb      	strb	r3, [r7, #6]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	797a      	ldrb	r2, [r7, #5]
 8000b16:	79b9      	ldrb	r1, [r7, #6]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fef7 	bl	800090c <I2Cx_WriteData>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	460a      	mov	r2, r1
 8000b30:	71fb      	strb	r3, [r7, #7]
 8000b32:	4613      	mov	r3, r2
 8000b34:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	79ba      	ldrb	r2, [r7, #6]
 8000b3c:	4611      	mov	r1, r2
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ff0c 	bl	800095c <I2Cx_ReadData>
 8000b44:	4603      	mov	r3, r0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	4603      	mov	r3, r0
 8000b5a:	81fb      	strh	r3, [r7, #14]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	81bb      	strh	r3, [r7, #12]
 8000b60:	4613      	mov	r3, r2
 8000b62:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 8000b68:	f7ff ff86 	bl	8000a78 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000b6c:	89fb      	ldrh	r3, [r7, #14]
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	2201      	movs	r2, #1
 8000b72:	2102      	movs	r1, #2
 8000b74:	4618      	mov	r0, r3
 8000b76:	f000 fb6b 	bl	8001250 <CODEC_IO_Write>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	4413      	add	r3, r2
 8000b82:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8000b84:	89bb      	ldrh	r3, [r7, #12]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	2b03      	cmp	r3, #3
 8000b8a:	d81b      	bhi.n	8000bc4 <cs43l22_Init+0x74>
 8000b8c:	a201      	add	r2, pc, #4	; (adr r2, 8000b94 <cs43l22_Init+0x44>)
 8000b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b92:	bf00      	nop
 8000b94:	08000ba5 	.word	0x08000ba5
 8000b98:	08000bad 	.word	0x08000bad
 8000b9c:	08000bb5 	.word	0x08000bb5
 8000ba0:	08000bbd 	.word	0x08000bbd
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8000ba4:	4b67      	ldr	r3, [pc, #412]	; (8000d44 <cs43l22_Init+0x1f4>)
 8000ba6:	22fa      	movs	r2, #250	; 0xfa
 8000ba8:	701a      	strb	r2, [r3, #0]
    break;
 8000baa:	e00f      	b.n	8000bcc <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8000bac:	4b65      	ldr	r3, [pc, #404]	; (8000d44 <cs43l22_Init+0x1f4>)
 8000bae:	22af      	movs	r2, #175	; 0xaf
 8000bb0:	701a      	strb	r2, [r3, #0]
    break;
 8000bb2:	e00b      	b.n	8000bcc <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8000bb4:	4b63      	ldr	r3, [pc, #396]	; (8000d44 <cs43l22_Init+0x1f4>)
 8000bb6:	22aa      	movs	r2, #170	; 0xaa
 8000bb8:	701a      	strb	r2, [r3, #0]
    break;
 8000bba:	e007      	b.n	8000bcc <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8000bbc:	4b61      	ldr	r3, [pc, #388]	; (8000d44 <cs43l22_Init+0x1f4>)
 8000bbe:	2205      	movs	r2, #5
 8000bc0:	701a      	strb	r2, [r3, #0]
    break;    
 8000bc2:	e003      	b.n	8000bcc <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8000bc4:	4b5f      	ldr	r3, [pc, #380]	; (8000d44 <cs43l22_Init+0x1f4>)
 8000bc6:	2205      	movs	r2, #5
 8000bc8:	701a      	strb	r2, [r3, #0]
    break;    
 8000bca:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000bcc:	89fb      	ldrh	r3, [r7, #14]
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	4a5c      	ldr	r2, [pc, #368]	; (8000d44 <cs43l22_Init+0x1f4>)
 8000bd2:	7812      	ldrb	r2, [r2, #0]
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	2104      	movs	r1, #4
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f000 fb39 	bl	8001250 <CODEC_IO_Write>
 8000bde:	4603      	mov	r3, r0
 8000be0:	461a      	mov	r2, r3
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	4413      	add	r3, r2
 8000be6:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8000be8:	89fb      	ldrh	r3, [r7, #14]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	2281      	movs	r2, #129	; 0x81
 8000bee:	2105      	movs	r1, #5
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f000 fb2d 	bl	8001250 <CODEC_IO_Write>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8000c00:	89fb      	ldrh	r3, [r7, #14]
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	2204      	movs	r2, #4
 8000c06:	2106      	movs	r1, #6
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 fb21 	bl	8001250 <CODEC_IO_Write>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	461a      	mov	r2, r3
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	4413      	add	r3, r2
 8000c16:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000c18:	7afa      	ldrb	r2, [r7, #11]
 8000c1a:	89fb      	ldrh	r3, [r7, #14]
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 f97c 	bl	8000f1c <cs43l22_SetVolume>
 8000c24:	4602      	mov	r2, r0
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	4413      	add	r3, r2
 8000c2a:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000c2c:	89bb      	ldrh	r3, [r7, #12]
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d023      	beq.n	8000c7a <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8000c32:	89fb      	ldrh	r3, [r7, #14]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	2206      	movs	r2, #6
 8000c38:	210f      	movs	r1, #15
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 fb08 	bl	8001250 <CODEC_IO_Write>
 8000c40:	4603      	mov	r3, r0
 8000c42:	461a      	mov	r2, r3
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	4413      	add	r3, r2
 8000c48:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8000c4a:	89fb      	ldrh	r3, [r7, #14]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2124      	movs	r1, #36	; 0x24
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 fafc 	bl	8001250 <CODEC_IO_Write>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	4413      	add	r3, r2
 8000c60:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8000c62:	89fb      	ldrh	r3, [r7, #14]
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	2200      	movs	r2, #0
 8000c68:	2125      	movs	r1, #37	; 0x25
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 faf0 	bl	8001250 <CODEC_IO_Write>
 8000c70:	4603      	mov	r3, r0
 8000c72:	461a      	mov	r2, r3
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	4413      	add	r3, r2
 8000c78:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8000c7a:	89fb      	ldrh	r3, [r7, #14]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	2200      	movs	r2, #0
 8000c80:	210a      	movs	r1, #10
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 fae4 	bl	8001250 <CODEC_IO_Write>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	4413      	add	r3, r2
 8000c90:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000c92:	89fb      	ldrh	r3, [r7, #14]
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	2204      	movs	r2, #4
 8000c98:	210e      	movs	r1, #14
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 fad8 	bl	8001250 <CODEC_IO_Write>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8000caa:	89fb      	ldrh	r3, [r7, #14]
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2127      	movs	r1, #39	; 0x27
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 facc 	bl	8001250 <CODEC_IO_Write>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	461a      	mov	r2, r3
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8000cc2:	89fb      	ldrh	r3, [r7, #14]
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	220f      	movs	r2, #15
 8000cc8:	211f      	movs	r1, #31
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 fac0 	bl	8001250 <CODEC_IO_Write>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8000cda:	89fb      	ldrh	r3, [r7, #14]
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	220a      	movs	r2, #10
 8000ce0:	211a      	movs	r1, #26
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 fab4 	bl	8001250 <CODEC_IO_Write>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	461a      	mov	r2, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	4413      	add	r3, r2
 8000cf0:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8000cf2:	89fb      	ldrh	r3, [r7, #14]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	220a      	movs	r2, #10
 8000cf8:	211b      	movs	r1, #27
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 faa8 	bl	8001250 <CODEC_IO_Write>
 8000d00:	4603      	mov	r3, r0
 8000d02:	461a      	mov	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	4413      	add	r3, r2
 8000d08:	617b      	str	r3, [r7, #20]
  
  /* Disable pass-through channels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PASSTHR_A_SELECT, 0x00);
 8000d0a:	89fb      	ldrh	r3, [r7, #14]
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2108      	movs	r1, #8
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 fa9c 	bl	8001250 <CODEC_IO_Write>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	4413      	add	r3, r2
 8000d20:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PASSTHR_A_SELECT, 0x00);
 8000d22:	89fb      	ldrh	r3, [r7, #14]
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	2200      	movs	r2, #0
 8000d28:	2108      	movs	r1, #8
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 fa90 	bl	8001250 <CODEC_IO_Write>
 8000d30:	4603      	mov	r3, r0
 8000d32:	461a      	mov	r2, r3
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	4413      	add	r3, r2
 8000d38:	617b      	str	r3, [r7, #20]

  /* Return communication control value */
  return counter;  
 8000d3a:	697b      	ldr	r3, [r7, #20]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	200001e4 	.word	0x200001e4

08000d48 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8000d4c:	f7ff fed0 	bl	8000af0 <AUDIO_IO_DeInit>
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 8000d5e:	f7ff fe8b 	bl	8000a78 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8000d62:	88fb      	ldrh	r3, [r7, #6]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2101      	movs	r1, #1
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fedc 	bl	8000b26 <AUDIO_IO_Read>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	f023 0307 	bic.w	r3, r3, #7
 8000d78:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	6039      	str	r1, [r7, #0]
 8000d8e:	80fb      	strh	r3, [r7, #6]
 8000d90:	4613      	mov	r3, r2
 8000d92:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 8000d98:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <cs43l22_Play+0x70>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d123      	bne.n	8000de8 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0b00000110);
 8000da0:	88fb      	ldrh	r3, [r7, #6]
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	2206      	movs	r2, #6
 8000da6:	210e      	movs	r1, #14
 8000da8:	4618      	mov	r0, r3
 8000daa:	f000 fa51 	bl	8001250 <CODEC_IO_Write>
 8000dae:	4603      	mov	r3, r0
 8000db0:	461a      	mov	r2, r3
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	4413      	add	r3, r2
 8000db6:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000db8:	88fb      	ldrh	r3, [r7, #6]
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 f907 	bl	8000fd0 <cs43l22_SetMute>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 8000dca:	88fb      	ldrh	r3, [r7, #6]
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	229e      	movs	r2, #158	; 0x9e
 8000dd0:	2102      	movs	r1, #2
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 fa3c 	bl	8001250 <CODEC_IO_Write>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	461a      	mov	r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4413      	add	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 8000de2:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <cs43l22_Play+0x70>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8000de8:	68fb      	ldr	r3, [r7, #12]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000034 	.word	0x20000034

08000df8 <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	2101      	movs	r1, #1
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f8e0 	bl	8000fd0 <cs43l22_SetMute>
 8000e10:	4602      	mov	r2, r0
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	4413      	add	r3, r2
 8000e16:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8000e18:	88fb      	ldrh	r3, [r7, #6]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	2102      	movs	r1, #2
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 fa15 	bl	8001250 <CODEC_IO_Write>
 8000e26:	4603      	mov	r3, r0
 8000e28:	461a      	mov	r2, r3
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8000e30:	68fb      	ldr	r3, [r7, #12]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 f8bc 	bl	8000fd0 <cs43l22_SetMute>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 8000e60:	2300      	movs	r3, #0
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	e002      	b.n	8000e6c <cs43l22_Resume+0x30>
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	2bfe      	cmp	r3, #254	; 0xfe
 8000e70:	d9f9      	bls.n	8000e66 <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	4a0e      	ldr	r2, [pc, #56]	; (8000eb0 <cs43l22_Resume+0x74>)
 8000e78:	7812      	ldrb	r2, [r2, #0]
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	2104      	movs	r1, #4
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f9e6 	bl	8001250 <CODEC_IO_Write>
 8000e84:	4603      	mov	r3, r0
 8000e86:	461a      	mov	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 8000e8e:	88fb      	ldrh	r3, [r7, #6]
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	229e      	movs	r2, #158	; 0x9e
 8000e94:	2102      	movs	r1, #2
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f9da 	bl	8001250 <CODEC_IO_Write>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	200001e4 	.word	0x200001e4

08000eb4 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	6039      	str	r1, [r7, #0]
 8000ebe:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f000 f881 	bl	8000fd0 <cs43l22_SetMute>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000ed6:	88fb      	ldrh	r3, [r7, #6]
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2204      	movs	r2, #4
 8000edc:	210e      	movs	r1, #14
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 f9b6 	bl	8001250 <CODEC_IO_Write>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4413      	add	r3, r2
 8000eec:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 8000eee:	88fb      	ldrh	r3, [r7, #6]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	229f      	movs	r2, #159	; 0x9f
 8000ef4:	2102      	movs	r1, #2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f9aa 	bl	8001250 <CODEC_IO_Write>
 8000efc:	4603      	mov	r3, r0
 8000efe:	461a      	mov	r2, r3
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4413      	add	r3, r2
 8000f04:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 8000f06:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <cs43l22_Stop+0x64>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]
  return counter;    
 8000f0c:	68fb      	ldr	r3, [r7, #12]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000034 	.word	0x20000034

08000f1c <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	460a      	mov	r2, r1
 8000f26:	80fb      	strh	r3, [r7, #6]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = Volume;//VOLUME_CONVERT(Volume);
 8000f30:	797b      	ldrb	r3, [r7, #5]
 8000f32:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 8000f34:	7afb      	ldrb	r3, [r7, #11]
 8000f36:	2be6      	cmp	r3, #230	; 0xe6
 8000f38:	d91c      	bls.n	8000f74 <cs43l22_SetVolume+0x58>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	b2d8      	uxtb	r0, r3
 8000f3e:	7afb      	ldrb	r3, [r7, #11]
 8000f40:	3319      	adds	r3, #25
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	461a      	mov	r2, r3
 8000f46:	2120      	movs	r1, #32
 8000f48:	f000 f982 	bl	8001250 <CODEC_IO_Write>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4413      	add	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 8000f56:	88fb      	ldrh	r3, [r7, #6]
 8000f58:	b2d8      	uxtb	r0, r3
 8000f5a:	7afb      	ldrb	r3, [r7, #11]
 8000f5c:	3319      	adds	r3, #25
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	461a      	mov	r2, r3
 8000f62:	2121      	movs	r1, #33	; 0x21
 8000f64:	f000 f974 	bl	8001250 <CODEC_IO_Write>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4413      	add	r3, r2
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	e01b      	b.n	8000fac <cs43l22_SetVolume+0x90>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 8000f74:	88fb      	ldrh	r3, [r7, #6]
 8000f76:	b2d8      	uxtb	r0, r3
 8000f78:	7afb      	ldrb	r3, [r7, #11]
 8000f7a:	3319      	adds	r3, #25
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	461a      	mov	r2, r3
 8000f80:	2120      	movs	r1, #32
 8000f82:	f000 f965 	bl	8001250 <CODEC_IO_Write>
 8000f86:	4603      	mov	r3, r0
 8000f88:	461a      	mov	r2, r3
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 8000f90:	88fb      	ldrh	r3, [r7, #6]
 8000f92:	b2d8      	uxtb	r0, r3
 8000f94:	7afb      	ldrb	r3, [r7, #11]
 8000f96:	3319      	adds	r3, #25
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	2121      	movs	r1, #33	; 0x21
 8000f9e:	f000 f957 	bl	8001250 <CODEC_IO_Write>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8000fac:	68fb      	ldr	r3, [r7, #12]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	6039      	str	r1, [r7, #0]
 8000fc0:	80fb      	strh	r3, [r7, #6]
  return 0;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d124      	bne.n	8001030 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8000fe6:	88fb      	ldrh	r3, [r7, #6]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	22ff      	movs	r2, #255	; 0xff
 8000fec:	2104      	movs	r1, #4
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f92e 	bl	8001250 <CODEC_IO_Write>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2201      	movs	r2, #1
 8001004:	2122      	movs	r1, #34	; 0x22
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f922 	bl	8001250 <CODEC_IO_Write>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4413      	add	r3, r2
 8001014:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2201      	movs	r2, #1
 800101c:	2123      	movs	r1, #35	; 0x23
 800101e:	4618      	mov	r0, r3
 8001020:	f000 f916 	bl	8001250 <CODEC_IO_Write>
 8001024:	4603      	mov	r3, r0
 8001026:	461a      	mov	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	e025      	b.n	800107c <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 8001030:	88fb      	ldrh	r3, [r7, #6]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2200      	movs	r2, #0
 8001036:	2122      	movs	r1, #34	; 0x22
 8001038:	4618      	mov	r0, r3
 800103a:	f000 f909 	bl	8001250 <CODEC_IO_Write>
 800103e:	4603      	mov	r3, r0
 8001040:	461a      	mov	r2, r3
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4413      	add	r3, r2
 8001046:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 8001048:	88fb      	ldrh	r3, [r7, #6]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2200      	movs	r2, #0
 800104e:	2123      	movs	r1, #35	; 0x23
 8001050:	4618      	mov	r0, r3
 8001052:	f000 f8fd 	bl	8001250 <CODEC_IO_Write>
 8001056:	4603      	mov	r3, r0
 8001058:	461a      	mov	r2, r3
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4413      	add	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001060:	88fb      	ldrh	r3, [r7, #6]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	4a08      	ldr	r2, [pc, #32]	; (8001088 <cs43l22_SetMute+0xb8>)
 8001066:	7812      	ldrb	r2, [r2, #0]
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	2104      	movs	r1, #4
 800106c:	4618      	mov	r0, r3
 800106e:	f000 f8ef 	bl	8001250 <CODEC_IO_Write>
 8001072:	4603      	mov	r3, r0
 8001074:	461a      	mov	r2, r3
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4413      	add	r3, r2
 800107a:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 800107c:	68fb      	ldr	r3, [r7, #12]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200001e4 	.word	0x200001e4

0800108c <cs43l22_SetPassThrough>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetPassThrough(uint16_t DeviceAddr, uint8_t CH, uint8_t vol)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	80fb      	strh	r3, [r7, #6]
 8001096:	460b      	mov	r3, r1
 8001098:	717b      	strb	r3, [r7, #5]
 800109a:	4613      	mov	r3, r2
 800109c:	713b      	strb	r3, [r7, #4]
  uint32_t counter = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]


	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, 0x00);
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2200      	movs	r2, #0
 80010a8:	2120      	movs	r1, #32
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 f8d0 	bl	8001250 <CODEC_IO_Write>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, 0x00);
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2200      	movs	r2, #0
 80010c0:	2121      	movs	r1, #33	; 0x21
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 f8c4 	bl	8001250 <CODEC_IO_Write>
 80010c8:	4603      	mov	r3, r0
 80010ca:	461a      	mov	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4413      	add	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]
//	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
//	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
//	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
//	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);

	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PASSTHR_A_SELECT, 0b11100);
 80010d2:	88fb      	ldrh	r3, [r7, #6]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	221c      	movs	r2, #28
 80010d8:	2108      	movs	r1, #8
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 f8b8 	bl	8001250 <CODEC_IO_Write>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PASSTHR_B_SELECT, 0b11100);
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	221c      	movs	r2, #28
 80010f0:	2109      	movs	r1, #9
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f8ac 	bl	8001250 <CODEC_IO_Write>
 80010f8:	4603      	mov	r3, r0
 80010fa:	461a      	mov	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4413      	add	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PASSTHR_A_VOL, 0x00);
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2200      	movs	r2, #0
 8001108:	2114      	movs	r1, #20
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f8a0 	bl	8001250 <CODEC_IO_Write>
 8001110:	4603      	mov	r3, r0
 8001112:	461a      	mov	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4413      	add	r3, r2
 8001118:	60fb      	str	r3, [r7, #12]
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PASSTHR_B_VOL, 0x00);
 800111a:	88fb      	ldrh	r3, [r7, #6]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2200      	movs	r2, #0
 8001120:	2115      	movs	r1, #21
 8001122:	4618      	mov	r0, r3
 8001124:	f000 f894 	bl	8001250 <CODEC_IO_Write>
 8001128:	4603      	mov	r3, r0
 800112a:	461a      	mov	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4413      	add	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]

//	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL1, 0x70);
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0xC6);
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	22c6      	movs	r2, #198	; 0xc6
 8001138:	210e      	movs	r1, #14
 800113a:	4618      	mov	r0, r3
 800113c:	f000 f888 	bl	8001250 <CODEC_IO_Write>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
//	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x05);
//
//
//	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0xC0);

  return counter;
 800114a:	68fb      	ldr	r3, [r7, #12]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	460a      	mov	r2, r1
 800115e:	80fb      	strh	r3, [r7, #6]
 8001160:	4613      	mov	r3, r2
 8001162:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8001168:	797b      	ldrb	r3, [r7, #5]
 800116a:	3b01      	subs	r3, #1
 800116c:	2b03      	cmp	r3, #3
 800116e:	d84b      	bhi.n	8001208 <cs43l22_SetOutputMode+0xb4>
 8001170:	a201      	add	r2, pc, #4	; (adr r2, 8001178 <cs43l22_SetOutputMode+0x24>)
 8001172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001176:	bf00      	nop
 8001178:	08001189 	.word	0x08001189
 800117c:	080011a9 	.word	0x080011a9
 8001180:	080011c9 	.word	0x080011c9
 8001184:	080011e9 	.word	0x080011e9
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	22fa      	movs	r2, #250	; 0xfa
 800118e:	2104      	movs	r1, #4
 8001190:	4618      	mov	r0, r3
 8001192:	f000 f85d 	bl	8001250 <CODEC_IO_Write>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	4413      	add	r3, r2
 800119e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 80011a0:	4b24      	ldr	r3, [pc, #144]	; (8001234 <cs43l22_SetOutputMode+0xe0>)
 80011a2:	22fa      	movs	r2, #250	; 0xfa
 80011a4:	701a      	strb	r2, [r3, #0]
      break;
 80011a6:	e03f      	b.n	8001228 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	22af      	movs	r2, #175	; 0xaf
 80011ae:	2104      	movs	r1, #4
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 f84d 	bl	8001250 <CODEC_IO_Write>
 80011b6:	4603      	mov	r3, r0
 80011b8:	461a      	mov	r2, r3
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4413      	add	r3, r2
 80011be:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 80011c0:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <cs43l22_SetOutputMode+0xe0>)
 80011c2:	22af      	movs	r2, #175	; 0xaf
 80011c4:	701a      	strb	r2, [r3, #0]
      break;
 80011c6:	e02f      	b.n	8001228 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	22aa      	movs	r2, #170	; 0xaa
 80011ce:	2104      	movs	r1, #4
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 f83d 	bl	8001250 <CODEC_IO_Write>
 80011d6:	4603      	mov	r3, r0
 80011d8:	461a      	mov	r2, r3
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	4413      	add	r3, r2
 80011de:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <cs43l22_SetOutputMode+0xe0>)
 80011e2:	22aa      	movs	r2, #170	; 0xaa
 80011e4:	701a      	strb	r2, [r3, #0]
      break;
 80011e6:	e01f      	b.n	8001228 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80011e8:	88fb      	ldrh	r3, [r7, #6]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2205      	movs	r2, #5
 80011ee:	2104      	movs	r1, #4
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 f82d 	bl	8001250 <CODEC_IO_Write>
 80011f6:	4603      	mov	r3, r0
 80011f8:	461a      	mov	r2, r3
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	4413      	add	r3, r2
 80011fe:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <cs43l22_SetOutputMode+0xe0>)
 8001202:	2205      	movs	r2, #5
 8001204:	701a      	strb	r2, [r3, #0]
      break;    
 8001206:	e00f      	b.n	8001228 <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8001208:	88fb      	ldrh	r3, [r7, #6]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2205      	movs	r2, #5
 800120e:	2104      	movs	r1, #4
 8001210:	4618      	mov	r0, r3
 8001212:	f000 f81d 	bl	8001250 <CODEC_IO_Write>
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	4413      	add	r3, r2
 800121e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <cs43l22_SetOutputMode+0xe0>)
 8001222:	2205      	movs	r2, #5
 8001224:	701a      	strb	r2, [r3, #0]
      break;
 8001226:	bf00      	nop
  }  
  return counter;
 8001228:	68fb      	ldr	r3, [r7, #12]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200001e4 	.word	0x200001e4

08001238 <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
 800125a:	460b      	mov	r3, r1
 800125c:	71bb      	strb	r3, [r7, #6]
 800125e:	4613      	mov	r3, r2
 8001260:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8001266:	797a      	ldrb	r2, [r7, #5]
 8001268:	79b9      	ldrb	r1, [r7, #6]
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fc46 	bl	8000afe <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	b2db      	uxtb	r3, r3
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <HAL_UART_RxHalfCpltCallback>:
extern AUDIO_DrvTypeDef cs43l22_drv;

int16_t AUDIO_OUT[2180];

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b0a4      	sub	sp, #144	; 0x90
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	Command command;
	memcpy(&command, hcommander.uart_rx_buffer, COMMAND_BYTESIZE);
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	2282      	movs	r2, #130	; 0x82
 800128e:	4907      	ldr	r1, [pc, #28]	; (80012ac <HAL_UART_RxHalfCpltCallback+0x2c>)
 8001290:	4618      	mov	r0, r3
 8001292:	f00b fcb3 	bl	800cbfc <memcpy>
	Commander_Enqueue(&hcommander, &command);
 8001296:	f107 030c 	add.w	r3, r7, #12
 800129a:	4619      	mov	r1, r3
 800129c:	4804      	ldr	r0, [pc, #16]	; (80012b0 <HAL_UART_RxHalfCpltCallback+0x30>)
 800129e:	f000 fdec 	bl	8001e7a <Commander_Enqueue>
}
 80012a2:	bf00      	nop
 80012a4:	3790      	adds	r7, #144	; 0x90
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200013c4 	.word	0x200013c4
 80012b0:	200013bc 	.word	0x200013bc

080012b4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b0a4      	sub	sp, #144	; 0x90
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	Command command;
	memcpy(&command, hcommander.uart_rx_buffer + COMMAND_BYTESIZE, COMMAND_BYTESIZE);
 80012bc:	4908      	ldr	r1, [pc, #32]	; (80012e0 <HAL_UART_RxCpltCallback+0x2c>)
 80012be:	f107 030c 	add.w	r3, r7, #12
 80012c2:	2282      	movs	r2, #130	; 0x82
 80012c4:	4618      	mov	r0, r3
 80012c6:	f00b fc99 	bl	800cbfc <memcpy>
	Commander_Enqueue(&hcommander, &command);
 80012ca:	f107 030c 	add.w	r3, r7, #12
 80012ce:	4619      	mov	r1, r3
 80012d0:	4804      	ldr	r0, [pc, #16]	; (80012e4 <HAL_UART_RxCpltCallback+0x30>)
 80012d2:	f000 fdd2 	bl	8001e7a <Commander_Enqueue>
}
 80012d6:	bf00      	nop
 80012d8:	3790      	adds	r7, #144	; 0x90
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20001446 	.word	0x20001446
 80012e4:	200013bc 	.word	0x200013bc

080012e8 <command_callback>:

void command_callback(Command command) {
 80012e8:	b084      	sub	sp, #16
 80012ea:	b490      	push	{r4, r7}
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	f107 0408 	add.w	r4, r7, #8
 80012f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//states[0] = states[0] == GPIO_PIN_RESET ? GPIO_PIN_SET : GPIO_PIN_RESET;
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc90      	pop	{r4, r7}
 80012fc:	b004      	add	sp, #16
 80012fe:	4770      	bx	lr

08001300 <wave_gen>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


float wave_gen(char t, u_int32_t i, float tone) {
 8001300:	b580      	push	{r7, lr}
 8001302:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8001306:	af00      	add	r7, sp, #0
 8001308:	4602      	mov	r2, r0
 800130a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800130e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8001312:	6019      	str	r1, [r3, #0]
 8001314:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001318:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800131c:	ed83 0a00 	vstr	s0, [r3]
 8001320:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001324:	f2a3 2311 	subw	r3, r3, #529	; 0x211
 8001328:	701a      	strb	r2, [r3, #0]

    float sin_table[128] = { 0.000000F, 0.024541F, 0.049068F, 0.073565F, 0.098017F, 0.122411F, 0.146730F, 0.170962F, 0.195090F, 0.219101F, 0.242980F, 0.266713F, 0.290284F, 0.313681F, 0.336890F, 0.359895F, 0.382683F, 0.405241F, 0.427555F, 0.449611F, 0.471396F, 0.492898F, 0.514102F, 0.534997F, 0.555570F, 0.575808F, 0.595699F, 0.615231F, 0.634393F, 0.653172F, 0.671559F, 0.689540F, 0.707106F, 0.724247F, 0.740951F, 0.757208F, 0.773010F, 0.788346F, 0.803207F, 0.817584F, 0.831469F, 0.844853F, 0.857728F, 0.870087F, 0.881921F, 0.893224F, 0.903989F, 0.914209F, 0.923879F, 0.932992F, 0.941544F, 0.949528F, 0.956940F, 0.963776F, 0.970031F, 0.975702F, 0.980785F, 0.985277F, 0.989176F, 0.992479F, 0.995185F, 0.997290F, 0.998795F, 0.999699F, 1.000000F, 0.999699F, 0.998796F, 0.997291F, 0.995185F, 0.992480F, 0.989177F, 0.985278F, 0.980786F, 0.975702F, 0.970032F, 0.963776F, 0.956941F, 0.949529F, 0.941545F, 0.932993F, 0.923880F, 0.914210F, 0.903990F, 0.893225F, 0.881922F, 0.870088F, 0.857729F, 0.844855F, 0.831471F, 0.817586F, 0.803209F, 0.788348F, 0.773012F, 0.757210F, 0.740952F, 0.724248F, 0.707108F, 0.689542F, 0.671560F, 0.653174F, 0.634395F, 0.615233F, 0.595701F, 0.575810F, 0.555572F, 0.534999F, 0.514105F, 0.492900F, 0.471399F, 0.449613F, 0.427557F, 0.405243F, 0.382685F, 0.359897F, 0.336892F, 0.313684F, 0.290287F, 0.266715F, 0.242982F, 0.219104F, 0.195093F, 0.170964F, 0.146733F, 0.122413F, 0.098019F, 0.073567F, 0.049070F, 0.024544F };
 800132a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800132e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001332:	4a33      	ldr	r2, [pc, #204]	; (8001400 <wave_gen+0x100>)
 8001334:	4618      	mov	r0, r3
 8001336:	4611      	mov	r1, r2
 8001338:	f44f 7300 	mov.w	r3, #512	; 0x200
 800133c:	461a      	mov	r2, r3
 800133e:	f00b fc5d 	bl	800cbfc <memcpy>
    float period_f = 48000.F / tone;
 8001342:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001346:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800134a:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001404 <wave_gen+0x104>
 800134e:	ed93 7a00 	vldr	s14, [r3]
 8001352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001356:	edc7 7a87 	vstr	s15, [r7, #540]	; 0x21c
    u_int32_t period_i = period_f;
 800135a:	edd7 7a87 	vldr	s15, [r7, #540]	; 0x21c
 800135e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001362:	ee17 3a90 	vmov	r3, s15
 8001366:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    u_int32_t table_index = (i * 256 / period_i) % 256;
 800136a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800136e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	021a      	lsls	r2, r3, #8
 8001376:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800137a:	fbb2 f3f3 	udiv	r3, r2, r3
 800137e:	b2db      	uxtb	r3, r3
 8001380:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

    if (t == 's') {
 8001384:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001388:	f2a3 2311 	subw	r3, r3, #529	; 0x211
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b73      	cmp	r3, #115	; 0x73
 8001390:	d11c      	bne.n	80013cc <wave_gen+0xcc>
        if (table_index <= 127) {
 8001392:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001396:	2b7f      	cmp	r3, #127	; 0x7f
 8001398:	d80a      	bhi.n	80013b0 <wave_gen+0xb0>
            return sin_table[table_index];
 800139a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800139e:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 80013a2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	edd3 7a00 	vldr	s15, [r3]
 80013ae:	e020      	b.n	80013f2 <wave_gen+0xf2>
        } else {
            return -sin_table[table_index - 128];
 80013b0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80013b4:	3b80      	subs	r3, #128	; 0x80
 80013b6:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80013ba:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	edd3 7a00 	vldr	s15, [r3]
 80013c6:	eef1 7a67 	vneg.f32	s15, s15
 80013ca:	e012      	b.n	80013f2 <wave_gen+0xf2>
        }
    } else if (t == 'q') {
 80013cc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80013d0:	f2a3 2311 	subw	r3, r3, #529	; 0x211
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b71      	cmp	r3, #113	; 0x71
 80013d8:	d109      	bne.n	80013ee <wave_gen+0xee>
        if (table_index <= 127) {
 80013da:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80013de:	2b7f      	cmp	r3, #127	; 0x7f
 80013e0:	d802      	bhi.n	80013e8 <wave_gen+0xe8>
            return -1.F;
 80013e2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80013e6:	e004      	b.n	80013f2 <wave_gen+0xf2>
        } else {
            return 1.F;
 80013e8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80013ec:	e001      	b.n	80013f2 <wave_gen+0xf2>
        }
    } else {
        return 0;
 80013ee:	eddf 7a06 	vldr	s15, [pc, #24]	; 8001408 <wave_gen+0x108>
    }
}
 80013f2:	eeb0 0a67 	vmov.f32	s0, s15
 80013f6:	f507 7708 	add.w	r7, r7, #544	; 0x220
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	0800ce3c 	.word	0x0800ce3c
 8001404:	473b8000 	.word	0x473b8000
 8001408:	00000000 	.word	0x00000000

0800140c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001412:	f000 fd63 	bl	8001edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001416:	f000 f8b7 	bl	8001588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800141a:	f000 f9dd 	bl	80017d8 <MX_GPIO_Init>
  MX_DMA_Init();
 800141e:	f000 f9a5 	bl	800176c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001422:	f000 f979 	bl	8001718 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001426:	f007 fa33 	bl	8008890 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 800142a:	f00b f875 	bl	800c518 <MX_USB_HOST_Init>
  MX_I2S3_Init();
 800142e:	f000 f945 	bl	80016bc <MX_I2S3_Init>
  MX_I2C1_Init();
 8001432:	f000 f915 	bl	8001660 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	// COMMANDER
	Commander_Init(&hcommander, &huart1, &hdma_usart1_rx, command_callback);
 8001436:	4b45      	ldr	r3, [pc, #276]	; (800154c <main+0x140>)
 8001438:	4a45      	ldr	r2, [pc, #276]	; (8001550 <main+0x144>)
 800143a:	4946      	ldr	r1, [pc, #280]	; (8001554 <main+0x148>)
 800143c:	4846      	ldr	r0, [pc, #280]	; (8001558 <main+0x14c>)
 800143e:	f000 fce8 	bl	8001e12 <Commander_Init>
	Commander_Start(&hcommander);
 8001442:	4845      	ldr	r0, [pc, #276]	; (8001558 <main+0x14c>)
 8001444:	f000 fd08 	bl	8001e58 <Commander_Start>

	// DAC
	HAL_GPIO_WritePin(SPKRPower_GPIO_Port, SPKRPower_Pin, RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800144e:	4843      	ldr	r0, [pc, #268]	; (800155c <main+0x150>)
 8001450:	f001 fd52 	bl	8002ef8 <HAL_GPIO_WritePin>

	AUDIO_OUT_Init(3, 50,  AUDIO_FREQUENCY_48K);
 8001454:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001458:	2132      	movs	r1, #50	; 0x32
 800145a:	2003      	movs	r0, #3
 800145c:	f7ff f836 	bl	80004cc <AUDIO_OUT_Init>
	cs43l22_SetVolume(AUDIO_I2C_ADDRESS, 10);
 8001460:	210a      	movs	r1, #10
 8001462:	2094      	movs	r0, #148	; 0x94
 8001464:	f7ff fd5a 	bl	8000f1c <cs43l22_SetVolume>
	cs43l22_SetOutputMode(AUDIO_I2C_ADDRESS,OUTPUT_DEVICE_HEADPHONE ); //OUTPUT_DEVICE_BOTH
 8001468:	2102      	movs	r1, #2
 800146a:	2094      	movs	r0, #148	; 0x94
 800146c:	f7ff fe72 	bl	8001154 <cs43l22_SetOutputMode>
	cs43l22_SetPassThrough(AUDIO_I2C_ADDRESS,0,0);
 8001470:	2200      	movs	r2, #0
 8001472:	2100      	movs	r1, #0
 8001474:	2094      	movs	r0, #148	; 0x94
 8001476:	f7ff fe09 	bl	800108c <cs43l22_SetPassThrough>
	cs43l22_drv.Play(AUDIO_I2C_ADDRESS, (uint16_t *)AUDIO_OUT,2180);
 800147a:	4b39      	ldr	r3, [pc, #228]	; (8001560 <main+0x154>)
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	f640 0284 	movw	r2, #2180	; 0x884
 8001482:	4938      	ldr	r1, [pc, #224]	; (8001564 <main+0x158>)
 8001484:	2094      	movs	r0, #148	; 0x94
 8001486:	4798      	blx	r3
	//cs43l22_SetPassThrough(AUDIO_I2C_ADDRESS,0,0);
	// start sound

	for(int i = 0;i < 2180; i++) {
 8001488:	2300      	movs	r3, #0
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	e01c      	b.n	80014c8 <main+0xbc>
		float temp = wave_gen('s', i, 220.) * 16000;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8001568 <main+0x15c>
 8001494:	4619      	mov	r1, r3
 8001496:	2073      	movs	r0, #115	; 0x73
 8001498:	f7ff ff32 	bl	8001300 <wave_gen>
 800149c:	eef0 7a40 	vmov.f32	s15, s0
 80014a0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800156c <main+0x160>
 80014a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a8:	edc7 7a00 	vstr	s15, [r7]
		AUDIO_OUT[i] = temp;
 80014ac:	edd7 7a00 	vldr	s15, [r7]
 80014b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014b4:	ee17 3a90 	vmov	r3, s15
 80014b8:	b219      	sxth	r1, r3
 80014ba:	4a2a      	ldr	r2, [pc, #168]	; (8001564 <main+0x158>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0;i < 2180; i++) {
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3301      	adds	r3, #1
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f640 0283 	movw	r2, #2179	; 0x883
 80014ce:	4293      	cmp	r3, r2
 80014d0:	dddd      	ble.n	800148e <main+0x82>
	}

	HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)AUDIO_OUT, 2180);
 80014d2:	f640 0284 	movw	r2, #2180	; 0x884
 80014d6:	4923      	ldr	r1, [pc, #140]	; (8001564 <main+0x158>)
 80014d8:	4825      	ldr	r0, [pc, #148]	; (8001570 <main+0x164>)
 80014da:	f004 fa6f 	bl	80059bc <HAL_I2S_Transmit_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80014de:	f00b f841 	bl	800c564 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014e8:	4822      	ldr	r0, [pc, #136]	; (8001574 <main+0x168>)
 80014ea:	f001 fd05 	bl	8002ef8 <HAL_GPIO_WritePin>

		if (Appli_state == APPLICATION_START) {
 80014ee:	4b22      	ldr	r3, [pc, #136]	; (8001578 <main+0x16c>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d10d      	bne.n	8001512 <main+0x106>
			if(f_mount(&usbFatFS, (TCHAR const*)USBHPath, 0) == FR_OK)
 80014f6:	2200      	movs	r2, #0
 80014f8:	4920      	ldr	r1, [pc, #128]	; (800157c <main+0x170>)
 80014fa:	4821      	ldr	r0, [pc, #132]	; (8001580 <main+0x174>)
 80014fc:	f00a ff6a 	bl	800c3d4 <f_mount>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1eb      	bne.n	80014de <main+0xd2>
			{
				HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8001506:	2201      	movs	r2, #1
 8001508:	2108      	movs	r1, #8
 800150a:	481e      	ldr	r0, [pc, #120]	; (8001584 <main+0x178>)
 800150c:	f001 fcf4 	bl	8002ef8 <HAL_GPIO_WritePin>
 8001510:	e7e5      	b.n	80014de <main+0xd2>
			}
		} else if (Appli_state == APPLICATION_DISCONNECT || Appli_state == APPLICATION_IDLE) {
 8001512:	4b19      	ldr	r3, [pc, #100]	; (8001578 <main+0x16c>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b03      	cmp	r3, #3
 8001518:	d003      	beq.n	8001522 <main+0x116>
 800151a:	4b17      	ldr	r3, [pc, #92]	; (8001578 <main+0x16c>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10a      	bne.n	8001538 <main+0x12c>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	2108      	movs	r1, #8
 8001526:	4817      	ldr	r0, [pc, #92]	; (8001584 <main+0x178>)
 8001528:	f001 fce6 	bl	8002ef8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	2110      	movs	r1, #16
 8001530:	4814      	ldr	r0, [pc, #80]	; (8001584 <main+0x178>)
 8001532:	f001 fce1 	bl	8002ef8 <HAL_GPIO_WritePin>
 8001536:	e008      	b.n	800154a <main+0x13e>
		} else if (Appli_state == APPLICATION_READY) {
 8001538:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <main+0x16c>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d1ce      	bne.n	80014de <main+0xd2>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001540:	2201      	movs	r2, #1
 8001542:	2110      	movs	r1, #16
 8001544:	480f      	ldr	r0, [pc, #60]	; (8001584 <main+0x178>)
 8001546:	f001 fcd7 	bl	8002ef8 <HAL_GPIO_WritePin>
    MX_USB_HOST_Process();
 800154a:	e7c8      	b.n	80014de <main+0xd2>
 800154c:	080012e9 	.word	0x080012e9
 8001550:	20000328 	.word	0x20000328
 8001554:	200002e4 	.word	0x200002e4
 8001558:	200013bc 	.word	0x200013bc
 800155c:	40020400 	.word	0x40020400
 8001560:	20000004 	.word	0x20000004
 8001564:	20001d14 	.word	0x20001d14
 8001568:	435c0000 	.word	0x435c0000
 800156c:	467a0000 	.word	0x467a0000
 8001570:	2000023c 	.word	0x2000023c
 8001574:	40020800 	.word	0x40020800
 8001578:	20003238 	.word	0x20003238
 800157c:	20002e28 	.word	0x20002e28
 8001580:	20000388 	.word	0x20000388
 8001584:	40020c00 	.word	0x40020c00

08001588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b094      	sub	sp, #80	; 0x50
 800158c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158e:	f107 0320 	add.w	r3, r7, #32
 8001592:	2230      	movs	r2, #48	; 0x30
 8001594:	2100      	movs	r1, #0
 8001596:	4618      	mov	r0, r3
 8001598:	f00b fb3e 	bl	800cc18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ac:	2300      	movs	r3, #0
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	4b29      	ldr	r3, [pc, #164]	; (8001658 <SystemClock_Config+0xd0>)
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	4a28      	ldr	r2, [pc, #160]	; (8001658 <SystemClock_Config+0xd0>)
 80015b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ba:	6413      	str	r3, [r2, #64]	; 0x40
 80015bc:	4b26      	ldr	r3, [pc, #152]	; (8001658 <SystemClock_Config+0xd0>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015c8:	2300      	movs	r3, #0
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	4b23      	ldr	r3, [pc, #140]	; (800165c <SystemClock_Config+0xd4>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a22      	ldr	r2, [pc, #136]	; (800165c <SystemClock_Config+0xd4>)
 80015d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	4b20      	ldr	r3, [pc, #128]	; (800165c <SystemClock_Config+0xd4>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80015e4:	2303      	movs	r3, #3
 80015e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015ee:	2301      	movs	r3, #1
 80015f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015f2:	2310      	movs	r3, #16
 80015f4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015f6:	2302      	movs	r3, #2
 80015f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001600:	2304      	movs	r3, #4
 8001602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001604:	23a8      	movs	r3, #168	; 0xa8
 8001606:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001608:	2302      	movs	r3, #2
 800160a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800160c:	2307      	movs	r3, #7
 800160e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001610:	f107 0320 	add.w	r3, r7, #32
 8001614:	4618      	mov	r0, r3
 8001616:	f004 fe27 	bl	8006268 <HAL_RCC_OscConfig>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001620:	f000 f974 	bl	800190c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001624:	230f      	movs	r3, #15
 8001626:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001628:	2300      	movs	r3, #0
 800162a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001630:	2300      	movs	r3, #0
 8001632:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001634:	2300      	movs	r3, #0
 8001636:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f005 f88a 	bl	8006758 <HAL_RCC_ClockConfig>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800164a:	f000 f95f 	bl	800190c <Error_Handler>
  }
}
 800164e:	bf00      	nop
 8001650:	3750      	adds	r7, #80	; 0x50
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40023800 	.word	0x40023800
 800165c:	40007000 	.word	0x40007000

08001660 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <MX_I2C1_Init+0x50>)
 8001666:	4a13      	ldr	r2, [pc, #76]	; (80016b4 <MX_I2C1_Init+0x54>)
 8001668:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <MX_I2C1_Init+0x50>)
 800166c:	4a12      	ldr	r2, [pc, #72]	; (80016b8 <MX_I2C1_Init+0x58>)
 800166e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <MX_I2C1_Init+0x50>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <MX_I2C1_Init+0x50>)
 8001678:	2200      	movs	r2, #0
 800167a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <MX_I2C1_Init+0x50>)
 800167e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001682:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001684:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <MX_I2C1_Init+0x50>)
 8001686:	2200      	movs	r2, #0
 8001688:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <MX_I2C1_Init+0x50>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <MX_I2C1_Init+0x50>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <MX_I2C1_Init+0x50>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800169c:	4804      	ldr	r0, [pc, #16]	; (80016b0 <MX_I2C1_Init+0x50>)
 800169e:	f003 f84f 	bl	8004740 <HAL_I2C_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016a8:	f000 f930 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	200001e8 	.word	0x200001e8
 80016b4:	40005400 	.word	0x40005400
 80016b8:	000186a0 	.word	0x000186a0

080016bc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80016c0:	4b13      	ldr	r3, [pc, #76]	; (8001710 <MX_I2S3_Init+0x54>)
 80016c2:	4a14      	ldr	r2, [pc, #80]	; (8001714 <MX_I2S3_Init+0x58>)
 80016c4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <MX_I2S3_Init+0x54>)
 80016c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016cc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <MX_I2S3_Init+0x54>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80016d4:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <MX_I2S3_Init+0x54>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80016da:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <MX_I2S3_Init+0x54>)
 80016dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016e0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <MX_I2S3_Init+0x54>)
 80016e4:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80016e8:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_I2S3_Init+0x54>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80016f0:	4b07      	ldr	r3, [pc, #28]	; (8001710 <MX_I2S3_Init+0x54>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <MX_I2S3_Init+0x54>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80016fc:	4804      	ldr	r0, [pc, #16]	; (8001710 <MX_I2S3_Init+0x54>)
 80016fe:	f004 f81d 	bl	800573c <HAL_I2S_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001708:	f000 f900 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	2000023c 	.word	0x2000023c
 8001714:	40003c00 	.word	0x40003c00

08001718 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <MX_USART1_UART_Init+0x4c>)
 800171e:	4a12      	ldr	r2, [pc, #72]	; (8001768 <MX_USART1_UART_Init+0x50>)
 8001720:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001722:	4b10      	ldr	r3, [pc, #64]	; (8001764 <MX_USART1_UART_Init+0x4c>)
 8001724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001728:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <MX_USART1_UART_Init+0x4c>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <MX_USART1_UART_Init+0x4c>)
 8001732:	2200      	movs	r2, #0
 8001734:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <MX_USART1_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <MX_USART1_UART_Init+0x4c>)
 800173e:	220c      	movs	r2, #12
 8001740:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001742:	4b08      	ldr	r3, [pc, #32]	; (8001764 <MX_USART1_UART_Init+0x4c>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <MX_USART1_UART_Init+0x4c>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800174e:	4805      	ldr	r0, [pc, #20]	; (8001764 <MX_USART1_UART_Init+0x4c>)
 8001750:	f005 fb8e 	bl	8006e70 <HAL_UART_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800175a:	f000 f8d7 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200002e4 	.word	0x200002e4
 8001768:	40011000 	.word	0x40011000

0800176c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <MX_DMA_Init+0x68>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a16      	ldr	r2, [pc, #88]	; (80017d4 <MX_DMA_Init+0x68>)
 800177c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <MX_DMA_Init+0x68>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	603b      	str	r3, [r7, #0]
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <MX_DMA_Init+0x68>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a0f      	ldr	r2, [pc, #60]	; (80017d4 <MX_DMA_Init+0x68>)
 8001798:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <MX_DMA_Init+0x68>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2100      	movs	r1, #0
 80017ae:	2010      	movs	r0, #16
 80017b0:	f000 fd05 	bl	80021be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80017b4:	2010      	movs	r0, #16
 80017b6:	f000 fd1e 	bl	80021f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2100      	movs	r1, #0
 80017be:	203a      	movs	r0, #58	; 0x3a
 80017c0:	f000 fcfd 	bl	80021be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80017c4:	203a      	movs	r0, #58	; 0x3a
 80017c6:	f000 fd16 	bl	80021f6 <HAL_NVIC_EnableIRQ>

}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800

080017d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	; 0x28
 80017dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017de:	f107 0314 	add.w	r3, r7, #20
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
 80017ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	4b42      	ldr	r3, [pc, #264]	; (80018fc <MX_GPIO_Init+0x124>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a41      	ldr	r2, [pc, #260]	; (80018fc <MX_GPIO_Init+0x124>)
 80017f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b3f      	ldr	r3, [pc, #252]	; (80018fc <MX_GPIO_Init+0x124>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	4b3b      	ldr	r3, [pc, #236]	; (80018fc <MX_GPIO_Init+0x124>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a3a      	ldr	r2, [pc, #232]	; (80018fc <MX_GPIO_Init+0x124>)
 8001814:	f043 0302 	orr.w	r3, r3, #2
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b38      	ldr	r3, [pc, #224]	; (80018fc <MX_GPIO_Init+0x124>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	4b34      	ldr	r3, [pc, #208]	; (80018fc <MX_GPIO_Init+0x124>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a33      	ldr	r2, [pc, #204]	; (80018fc <MX_GPIO_Init+0x124>)
 8001830:	f043 0304 	orr.w	r3, r3, #4
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b31      	ldr	r3, [pc, #196]	; (80018fc <MX_GPIO_Init+0x124>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0304 	and.w	r3, r3, #4
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	4b2d      	ldr	r3, [pc, #180]	; (80018fc <MX_GPIO_Init+0x124>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a2c      	ldr	r2, [pc, #176]	; (80018fc <MX_GPIO_Init+0x124>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <MX_GPIO_Init+0x124>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	603b      	str	r3, [r7, #0]
 8001862:	4b26      	ldr	r3, [pc, #152]	; (80018fc <MX_GPIO_Init+0x124>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a25      	ldr	r2, [pc, #148]	; (80018fc <MX_GPIO_Init+0x124>)
 8001868:	f043 0308 	orr.w	r3, r3, #8
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b23      	ldr	r3, [pc, #140]	; (80018fc <MX_GPIO_Init+0x124>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0308 	and.w	r3, r3, #8
 8001876:	603b      	str	r3, [r7, #0]
 8001878:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPKRPower_GPIO_Port, SPKRPower_Pin, GPIO_PIN_RESET);
 800187a:	2200      	movs	r2, #0
 800187c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001880:	481f      	ldr	r0, [pc, #124]	; (8001900 <MX_GPIO_Init+0x128>)
 8001882:	f001 fb39 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8001886:	2200      	movs	r2, #0
 8001888:	f44f 7100 	mov.w	r1, #512	; 0x200
 800188c:	481d      	ldr	r0, [pc, #116]	; (8001904 <MX_GPIO_Init+0x12c>)
 800188e:	f001 fb33 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001892:	2200      	movs	r2, #0
 8001894:	2118      	movs	r1, #24
 8001896:	481c      	ldr	r0, [pc, #112]	; (8001908 <MX_GPIO_Init+0x130>)
 8001898:	f001 fb2e 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPKRPower_Pin */
  GPIO_InitStruct.Pin = SPKRPower_Pin;
 800189c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPKRPower_GPIO_Port, &GPIO_InitStruct);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	4812      	ldr	r0, [pc, #72]	; (8001900 <MX_GPIO_Init+0x128>)
 80018b6:	f001 f887 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OtgPower_Pin */
  GPIO_InitStruct.Pin = OtgPower_Pin;
 80018ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c0:	2301      	movs	r3, #1
 80018c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OtgPower_GPIO_Port, &GPIO_InitStruct);
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	4619      	mov	r1, r3
 80018d2:	480c      	ldr	r0, [pc, #48]	; (8001904 <MX_GPIO_Init+0x12c>)
 80018d4:	f001 f878 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 80018d8:	2318      	movs	r3, #24
 80018da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018dc:	2301      	movs	r3, #1
 80018de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e4:	2300      	movs	r3, #0
 80018e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	4619      	mov	r1, r3
 80018ee:	4806      	ldr	r0, [pc, #24]	; (8001908 <MX_GPIO_Init+0x130>)
 80018f0:	f001 f86a 	bl	80029c8 <HAL_GPIO_Init>

}
 80018f4:	bf00      	nop
 80018f6:	3728      	adds	r7, #40	; 0x28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40023800 	.word	0x40023800
 8001900:	40020400 	.word	0x40020400
 8001904:	40020800 	.word	0x40020800
 8001908:	40020c00 	.word	0x40020c00

0800190c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001910:	b672      	cpsid	i
}
 8001912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001914:	e7fe      	b.n	8001914 <Error_Handler+0x8>
	...

08001918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <HAL_MspInit+0x4c>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001926:	4a0f      	ldr	r2, [pc, #60]	; (8001964 <HAL_MspInit+0x4c>)
 8001928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800192c:	6453      	str	r3, [r2, #68]	; 0x44
 800192e:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <HAL_MspInit+0x4c>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	603b      	str	r3, [r7, #0]
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <HAL_MspInit+0x4c>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	4a08      	ldr	r2, [pc, #32]	; (8001964 <HAL_MspInit+0x4c>)
 8001944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001948:	6413      	str	r3, [r2, #64]	; 0x40
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_MspInit+0x4c>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40023800 	.word	0x40023800

08001968 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a19      	ldr	r2, [pc, #100]	; (80019ec <HAL_I2C_MspInit+0x84>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d12c      	bne.n	80019e4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	4b18      	ldr	r3, [pc, #96]	; (80019f0 <HAL_I2C_MspInit+0x88>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a17      	ldr	r2, [pc, #92]	; (80019f0 <HAL_I2C_MspInit+0x88>)
 8001994:	f043 0302 	orr.w	r3, r3, #2
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <HAL_I2C_MspInit+0x88>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ac:	2312      	movs	r3, #18
 80019ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b4:	2303      	movs	r3, #3
 80019b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019b8:	2304      	movs	r3, #4
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	4619      	mov	r1, r3
 80019c2:	480c      	ldr	r0, [pc, #48]	; (80019f4 <HAL_I2C_MspInit+0x8c>)
 80019c4:	f001 f800 	bl	80029c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <HAL_I2C_MspInit+0x88>)
 80019ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d0:	4a07      	ldr	r2, [pc, #28]	; (80019f0 <HAL_I2C_MspInit+0x88>)
 80019d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019d6:	6413      	str	r3, [r2, #64]	; 0x40
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <HAL_I2C_MspInit+0x88>)
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019e4:	bf00      	nop
 80019e6:	3728      	adds	r7, #40	; 0x28
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40005400 	.word	0x40005400
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40020400 	.word	0x40020400

080019f8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a0b      	ldr	r2, [pc, #44]	; (8001a34 <HAL_I2C_MspDeInit+0x3c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d10f      	bne.n	8001a2a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <HAL_I2C_MspDeInit+0x40>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <HAL_I2C_MspDeInit+0x40>)
 8001a10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a14:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001a16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a1a:	4808      	ldr	r0, [pc, #32]	; (8001a3c <HAL_I2C_MspDeInit+0x44>)
 8001a1c:	f001 f970 	bl	8002d00 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001a20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a24:	4805      	ldr	r0, [pc, #20]	; (8001a3c <HAL_I2C_MspDeInit+0x44>)
 8001a26:	f001 f96b 	bl	8002d00 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40005400 	.word	0x40005400
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40020400 	.word	0x40020400

08001a40 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08e      	sub	sp, #56	; 0x38
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a4a      	ldr	r2, [pc, #296]	; (8001b94 <HAL_I2S_MspInit+0x154>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	f040 808c 	bne.w	8001b8a <HAL_I2S_MspInit+0x14a>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001a72:	2301      	movs	r3, #1
 8001a74:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001a76:	23c0      	movs	r3, #192	; 0xc0
 8001a78:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	4618      	mov	r0, r3
 8001a84:	f005 f888 	bl	8006b98 <HAL_RCCEx_PeriphCLKConfig>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001a8e:	f7ff ff3d 	bl	800190c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	4b40      	ldr	r3, [pc, #256]	; (8001b98 <HAL_I2S_MspInit+0x158>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	4a3f      	ldr	r2, [pc, #252]	; (8001b98 <HAL_I2S_MspInit+0x158>)
 8001a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa2:	4b3d      	ldr	r3, [pc, #244]	; (8001b98 <HAL_I2S_MspInit+0x158>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	4b39      	ldr	r3, [pc, #228]	; (8001b98 <HAL_I2S_MspInit+0x158>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	4a38      	ldr	r2, [pc, #224]	; (8001b98 <HAL_I2S_MspInit+0x158>)
 8001ab8:	f043 0304 	orr.w	r3, r3, #4
 8001abc:	6313      	str	r3, [r2, #48]	; 0x30
 8001abe:	4b36      	ldr	r3, [pc, #216]	; (8001b98 <HAL_I2S_MspInit+0x158>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	4b32      	ldr	r3, [pc, #200]	; (8001b98 <HAL_I2S_MspInit+0x158>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a31      	ldr	r2, [pc, #196]	; (8001b98 <HAL_I2S_MspInit+0x158>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b2f      	ldr	r3, [pc, #188]	; (8001b98 <HAL_I2S_MspInit+0x158>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
    PC7     ------> I2S3_MCK
    PA15     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001ae6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aec:	2302      	movs	r3, #2
 8001aee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af4:	2300      	movs	r3, #0
 8001af6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001af8:	2306      	movs	r3, #6
 8001afa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b00:	4619      	mov	r1, r3
 8001b02:	4826      	ldr	r0, [pc, #152]	; (8001b9c <HAL_I2S_MspInit+0x15c>)
 8001b04:	f000 ff60 	bl	80029c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b1a:	2306      	movs	r3, #6
 8001b1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b22:	4619      	mov	r1, r3
 8001b24:	481e      	ldr	r0, [pc, #120]	; (8001ba0 <HAL_I2S_MspInit+0x160>)
 8001b26:	f000 ff4f 	bl	80029c8 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001b2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ba4 <HAL_I2S_MspInit+0x164>)
 8001b2c:	4a1e      	ldr	r2, [pc, #120]	; (8001ba8 <HAL_I2S_MspInit+0x168>)
 8001b2e:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001b30:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <HAL_I2S_MspInit+0x164>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b36:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <HAL_I2S_MspInit+0x164>)
 8001b38:	2240      	movs	r2, #64	; 0x40
 8001b3a:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b3c:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <HAL_I2S_MspInit+0x164>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b42:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <HAL_I2S_MspInit+0x164>)
 8001b44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b48:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b4a:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <HAL_I2S_MspInit+0x164>)
 8001b4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b50:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b52:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <HAL_I2S_MspInit+0x164>)
 8001b54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b58:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_I2S_MspInit+0x164>)
 8001b5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b60:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b62:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <HAL_I2S_MspInit+0x164>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b68:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <HAL_I2S_MspInit+0x164>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001b6e:	480d      	ldr	r0, [pc, #52]	; (8001ba4 <HAL_I2S_MspInit+0x164>)
 8001b70:	f000 fb5c 	bl	800222c <HAL_DMA_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <HAL_I2S_MspInit+0x13e>
    {
      Error_Handler();
 8001b7a:	f7ff fec7 	bl	800190c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a08      	ldr	r2, [pc, #32]	; (8001ba4 <HAL_I2S_MspInit+0x164>)
 8001b82:	639a      	str	r2, [r3, #56]	; 0x38
 8001b84:	4a07      	ldr	r2, [pc, #28]	; (8001ba4 <HAL_I2S_MspInit+0x164>)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001b8a:	bf00      	nop
 8001b8c:	3738      	adds	r7, #56	; 0x38
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40003c00 	.word	0x40003c00
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40020800 	.word	0x40020800
 8001ba0:	40020000 	.word	0x40020000
 8001ba4:	20000284 	.word	0x20000284
 8001ba8:	40026088 	.word	0x40026088

08001bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08a      	sub	sp, #40	; 0x28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a30      	ldr	r2, [pc, #192]	; (8001c8c <HAL_UART_MspInit+0xe0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d15a      	bne.n	8001c84 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	4b2f      	ldr	r3, [pc, #188]	; (8001c90 <HAL_UART_MspInit+0xe4>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	4a2e      	ldr	r2, [pc, #184]	; (8001c90 <HAL_UART_MspInit+0xe4>)
 8001bd8:	f043 0310 	orr.w	r3, r3, #16
 8001bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bde:	4b2c      	ldr	r3, [pc, #176]	; (8001c90 <HAL_UART_MspInit+0xe4>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	f003 0310 	and.w	r3, r3, #16
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	4b28      	ldr	r3, [pc, #160]	; (8001c90 <HAL_UART_MspInit+0xe4>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	4a27      	ldr	r2, [pc, #156]	; (8001c90 <HAL_UART_MspInit+0xe4>)
 8001bf4:	f043 0302 	orr.w	r3, r3, #2
 8001bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfa:	4b25      	ldr	r3, [pc, #148]	; (8001c90 <HAL_UART_MspInit+0xe4>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c06:	23c0      	movs	r3, #192	; 0xc0
 8001c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c12:	2303      	movs	r3, #3
 8001c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c16:	2307      	movs	r3, #7
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	4619      	mov	r1, r3
 8001c20:	481c      	ldr	r0, [pc, #112]	; (8001c94 <HAL_UART_MspInit+0xe8>)
 8001c22:	f000 fed1 	bl	80029c8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001c26:	4b1c      	ldr	r3, [pc, #112]	; (8001c98 <HAL_UART_MspInit+0xec>)
 8001c28:	4a1c      	ldr	r2, [pc, #112]	; (8001c9c <HAL_UART_MspInit+0xf0>)
 8001c2a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001c2c:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <HAL_UART_MspInit+0xec>)
 8001c2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c32:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c34:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <HAL_UART_MspInit+0xec>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c3a:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <HAL_UART_MspInit+0xec>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c40:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <HAL_UART_MspInit+0xec>)
 8001c42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c46:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <HAL_UART_MspInit+0xec>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c4e:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_UART_MspInit+0xec>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001c54:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <HAL_UART_MspInit+0xec>)
 8001c56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c5a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c5c:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <HAL_UART_MspInit+0xec>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c62:	4b0d      	ldr	r3, [pc, #52]	; (8001c98 <HAL_UART_MspInit+0xec>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001c68:	480b      	ldr	r0, [pc, #44]	; (8001c98 <HAL_UART_MspInit+0xec>)
 8001c6a:	f000 fadf 	bl	800222c <HAL_DMA_Init>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001c74:	f7ff fe4a 	bl	800190c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a07      	ldr	r2, [pc, #28]	; (8001c98 <HAL_UART_MspInit+0xec>)
 8001c7c:	639a      	str	r2, [r3, #56]	; 0x38
 8001c7e:	4a06      	ldr	r2, [pc, #24]	; (8001c98 <HAL_UART_MspInit+0xec>)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c84:	bf00      	nop
 8001c86:	3728      	adds	r7, #40	; 0x28
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40011000 	.word	0x40011000
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40020400 	.word	0x40020400
 8001c98:	20000328 	.word	0x20000328
 8001c9c:	40026440 	.word	0x40026440

08001ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <NMI_Handler+0x4>

08001ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001caa:	e7fe      	b.n	8001caa <HardFault_Handler+0x4>

08001cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <MemManage_Handler+0x4>

08001cb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb6:	e7fe      	b.n	8001cb6 <BusFault_Handler+0x4>

08001cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cbc:	e7fe      	b.n	8001cbc <UsageFault_Handler+0x4>

08001cbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cec:	f000 f948 	bl	8001f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001cf8:	4802      	ldr	r0, [pc, #8]	; (8001d04 <DMA1_Stream5_IRQHandler+0x10>)
 8001cfa:	f000 fbfb 	bl	80024f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000284 	.word	0x20000284

08001d08 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001d0c:	4802      	ldr	r0, [pc, #8]	; (8001d18 <DMA2_Stream2_IRQHandler+0x10>)
 8001d0e:	f000 fbf1 	bl	80024f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000328 	.word	0x20000328

08001d1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001d20:	4802      	ldr	r0, [pc, #8]	; (8001d2c <OTG_FS_IRQHandler+0x10>)
 8001d22:	f001 fb6d 	bl	8003400 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	2000323c 	.word	0x2000323c

08001d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d38:	4a14      	ldr	r2, [pc, #80]	; (8001d8c <_sbrk+0x5c>)
 8001d3a:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <_sbrk+0x60>)
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d44:	4b13      	ldr	r3, [pc, #76]	; (8001d94 <_sbrk+0x64>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d102      	bne.n	8001d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d4c:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <_sbrk+0x64>)
 8001d4e:	4a12      	ldr	r2, [pc, #72]	; (8001d98 <_sbrk+0x68>)
 8001d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d52:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <_sbrk+0x64>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d207      	bcs.n	8001d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d60:	f00a ff12 	bl	800cb88 <__errno>
 8001d64:	4603      	mov	r3, r0
 8001d66:	220c      	movs	r2, #12
 8001d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d6e:	e009      	b.n	8001d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d70:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <_sbrk+0x64>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d76:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <_sbrk+0x64>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	4a05      	ldr	r2, [pc, #20]	; (8001d94 <_sbrk+0x64>)
 8001d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d82:	68fb      	ldr	r3, [r7, #12]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20020000 	.word	0x20020000
 8001d90:	00000400 	.word	0x00000400
 8001d94:	20002e1c 	.word	0x20002e1c
 8001d98:	20003550 	.word	0x20003550

08001d9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001da0:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <SystemInit+0x20>)
 8001da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001da6:	4a05      	ldr	r2, [pc, #20]	; (8001dbc <SystemInit+0x20>)
 8001da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001dc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001df8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dc4:	480d      	ldr	r0, [pc, #52]	; (8001dfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dc6:	490e      	ldr	r1, [pc, #56]	; (8001e00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001dc8:	4a0e      	ldr	r2, [pc, #56]	; (8001e04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dcc:	e002      	b.n	8001dd4 <LoopCopyDataInit>

08001dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dd2:	3304      	adds	r3, #4

08001dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd8:	d3f9      	bcc.n	8001dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dda:	4a0b      	ldr	r2, [pc, #44]	; (8001e08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ddc:	4c0b      	ldr	r4, [pc, #44]	; (8001e0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001de0:	e001      	b.n	8001de6 <LoopFillZerobss>

08001de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001de4:	3204      	adds	r2, #4

08001de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de8:	d3fb      	bcc.n	8001de2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dea:	f7ff ffd7 	bl	8001d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dee:	f00a fed1 	bl	800cb94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001df2:	f7ff fb0b 	bl	800140c <main>
  bx  lr    
 8001df6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001df8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e00:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8001e04:	0800d0e4 	.word	0x0800d0e4
  ldr r2, =_sbss
 8001e08:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8001e0c:	20003550 	.word	0x20003550

08001e10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e10:	e7fe      	b.n	8001e10 <ADC_IRQHandler>

08001e12 <Commander_Init>:

#include "stm32f4xx_hal.h"
#include "commander.h"
#include <string.h>

void Commander_Init(Commander_HandleTypeDef *hcommander, UART_HandleTypeDef *huart, DMA_HandleTypeDef *hdma_uart_rx, void (*command_callback)(Command command)) {
 8001e12:	b480      	push	{r7}
 8001e14:	b085      	sub	sp, #20
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
 8001e1e:	603b      	str	r3, [r7, #0]
	hcommander->huart = huart;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	601a      	str	r2, [r3, #0]
	hcommander->hdma_uart_rx = hdma_uart_rx;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	605a      	str	r2, [r3, #4]
	hcommander->command_index = 0;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
	hcommander->commands_to_handle = 0;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
	hcommander->counter = 0;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f8c3 2950 	str.w	r2, [r3, #2384]	; 0x950
	hcommander->command_callback = command_callback;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	f8c3 2954 	str.w	r2, [r3, #2388]	; 0x954
}
 8001e4c:	bf00      	nop
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <Commander_Start>:

void Commander_Start(Commander_HandleTypeDef *hcommander) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(hcommander->huart, hcommander->uart_rx_buffer, COMMAND_BYTESIZE * 2);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6818      	ldr	r0, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3308      	adds	r3, #8
 8001e68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f005 f84c 	bl	8006f0a <HAL_UART_Receive_DMA>
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <Commander_Enqueue>:
		hcommander->commands_to_handle--;
		hcommander->command_callback(hcommander->command_buffer[index]);
	}
}

void Commander_Enqueue(Commander_HandleTypeDef *hcommander, Command *command) {
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b084      	sub	sp, #16
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
 8001e82:	6039      	str	r1, [r7, #0]
	uint8_t index = (hcommander->command_index + hcommander->commands_to_handle) % COMMANDS_COUNT;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 294c 	ldrb.w	r2, [r3, #2380]	; 0x94c
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 394d 	ldrb.w	r3, [r3, #2381]	; 0x94d
 8001e90:	4413      	add	r3, r2
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	f003 030f 	and.w	r3, r3, #15
 8001e98:	73fb      	strb	r3, [r7, #15]
	memcpy(hcommander->command_buffer + index, command, COMMAND_BYTESIZE);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f503 7186 	add.w	r1, r3, #268	; 0x10c
 8001ea0:	7bfa      	ldrb	r2, [r7, #15]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	015b      	lsls	r3, r3, #5
 8001ea6:	4413      	add	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	440b      	add	r3, r1
 8001eac:	2282      	movs	r2, #130	; 0x82
 8001eae:	6839      	ldr	r1, [r7, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f00a fea3 	bl	800cbfc <memcpy>
	hcommander->commands_to_handle++;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 394d 	ldrb.w	r3, [r3, #2381]	; 0x94d
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
	hcommander->counter++;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f8d3 3950 	ldr.w	r3, [r3, #2384]	; 0x950
 8001ecc:	1c5a      	adds	r2, r3, #1
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f8c3 2950 	str.w	r2, [r3, #2384]	; 0x950
}
 8001ed4:	bf00      	nop
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ee0:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <HAL_Init+0x40>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a0d      	ldr	r2, [pc, #52]	; (8001f1c <HAL_Init+0x40>)
 8001ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <HAL_Init+0x40>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <HAL_Init+0x40>)
 8001ef2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ef6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ef8:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <HAL_Init+0x40>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a07      	ldr	r2, [pc, #28]	; (8001f1c <HAL_Init+0x40>)
 8001efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f04:	2003      	movs	r0, #3
 8001f06:	f000 f94f 	bl	80021a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f0a:	200f      	movs	r0, #15
 8001f0c:	f000 f808 	bl	8001f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f10:	f7ff fd02 	bl	8001918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40023c00 	.word	0x40023c00

08001f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f28:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <HAL_InitTick+0x54>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_InitTick+0x58>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	4619      	mov	r1, r3
 8001f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 f967 	bl	8002212 <HAL_SYSTICK_Config>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00e      	b.n	8001f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b0f      	cmp	r3, #15
 8001f52:	d80a      	bhi.n	8001f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f54:	2200      	movs	r2, #0
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f5c:	f000 f92f 	bl	80021be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f60:	4a06      	ldr	r2, [pc, #24]	; (8001f7c <HAL_InitTick+0x5c>)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	e000      	b.n	8001f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000038 	.word	0x20000038
 8001f78:	20000040 	.word	0x20000040
 8001f7c:	2000003c 	.word	0x2000003c

08001f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_IncTick+0x20>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <HAL_IncTick+0x24>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	4a04      	ldr	r2, [pc, #16]	; (8001fa4 <HAL_IncTick+0x24>)
 8001f92:	6013      	str	r3, [r2, #0]
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	20000040 	.word	0x20000040
 8001fa4:	20002e20 	.word	0x20002e20

08001fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return uwTick;
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <HAL_GetTick+0x14>)
 8001fae:	681b      	ldr	r3, [r3, #0]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	20002e20 	.word	0x20002e20

08001fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fc8:	f7ff ffee 	bl	8001fa8 <HAL_GetTick>
 8001fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fd8:	d005      	beq.n	8001fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <HAL_Delay+0x44>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fe6:	bf00      	nop
 8001fe8:	f7ff ffde 	bl	8001fa8 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d8f7      	bhi.n	8001fe8 <HAL_Delay+0x28>
  {
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000040 	.word	0x20000040

08002008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002018:	4b0c      	ldr	r3, [pc, #48]	; (800204c <__NVIC_SetPriorityGrouping+0x44>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002024:	4013      	ands	r3, r2
 8002026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002030:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800203a:	4a04      	ldr	r2, [pc, #16]	; (800204c <__NVIC_SetPriorityGrouping+0x44>)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	60d3      	str	r3, [r2, #12]
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002054:	4b04      	ldr	r3, [pc, #16]	; (8002068 <__NVIC_GetPriorityGrouping+0x18>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	f003 0307 	and.w	r3, r3, #7
}
 800205e:	4618      	mov	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	2b00      	cmp	r3, #0
 800207c:	db0b      	blt.n	8002096 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	f003 021f 	and.w	r2, r3, #31
 8002084:	4907      	ldr	r1, [pc, #28]	; (80020a4 <__NVIC_EnableIRQ+0x38>)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	095b      	lsrs	r3, r3, #5
 800208c:	2001      	movs	r0, #1
 800208e:	fa00 f202 	lsl.w	r2, r0, r2
 8002092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	e000e100 	.word	0xe000e100

080020a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	6039      	str	r1, [r7, #0]
 80020b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	db0a      	blt.n	80020d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	490c      	ldr	r1, [pc, #48]	; (80020f4 <__NVIC_SetPriority+0x4c>)
 80020c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c6:	0112      	lsls	r2, r2, #4
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	440b      	add	r3, r1
 80020cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d0:	e00a      	b.n	80020e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	4908      	ldr	r1, [pc, #32]	; (80020f8 <__NVIC_SetPriority+0x50>)
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	3b04      	subs	r3, #4
 80020e0:	0112      	lsls	r2, r2, #4
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	440b      	add	r3, r1
 80020e6:	761a      	strb	r2, [r3, #24]
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	e000e100 	.word	0xe000e100
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f1c3 0307 	rsb	r3, r3, #7
 8002116:	2b04      	cmp	r3, #4
 8002118:	bf28      	it	cs
 800211a:	2304      	movcs	r3, #4
 800211c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3304      	adds	r3, #4
 8002122:	2b06      	cmp	r3, #6
 8002124:	d902      	bls.n	800212c <NVIC_EncodePriority+0x30>
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3b03      	subs	r3, #3
 800212a:	e000      	b.n	800212e <NVIC_EncodePriority+0x32>
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43da      	mvns	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	401a      	ands	r2, r3
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002144:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	43d9      	mvns	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	4313      	orrs	r3, r2
         );
}
 8002156:	4618      	mov	r0, r3
 8002158:	3724      	adds	r7, #36	; 0x24
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3b01      	subs	r3, #1
 8002170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002174:	d301      	bcc.n	800217a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002176:	2301      	movs	r3, #1
 8002178:	e00f      	b.n	800219a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <SysTick_Config+0x40>)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3b01      	subs	r3, #1
 8002180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002182:	210f      	movs	r1, #15
 8002184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002188:	f7ff ff8e 	bl	80020a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800218c:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <SysTick_Config+0x40>)
 800218e:	2200      	movs	r2, #0
 8002190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002192:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <SysTick_Config+0x40>)
 8002194:	2207      	movs	r2, #7
 8002196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	e000e010 	.word	0xe000e010

080021a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff ff29 	bl	8002008 <__NVIC_SetPriorityGrouping>
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021be:	b580      	push	{r7, lr}
 80021c0:	b086      	sub	sp, #24
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	4603      	mov	r3, r0
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
 80021ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021d0:	f7ff ff3e 	bl	8002050 <__NVIC_GetPriorityGrouping>
 80021d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68b9      	ldr	r1, [r7, #8]
 80021da:	6978      	ldr	r0, [r7, #20]
 80021dc:	f7ff ff8e 	bl	80020fc <NVIC_EncodePriority>
 80021e0:	4602      	mov	r2, r0
 80021e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff5d 	bl	80020a8 <__NVIC_SetPriority>
}
 80021ee:	bf00      	nop
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	4603      	mov	r3, r0
 80021fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff31 	bl	800206c <__NVIC_EnableIRQ>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff ffa2 	bl	8002164 <SysTick_Config>
 8002220:	4603      	mov	r3, r0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002238:	f7ff feb6 	bl	8001fa8 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e099      	b.n	800237c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2202      	movs	r2, #2
 800224c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 0201 	bic.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002268:	e00f      	b.n	800228a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800226a:	f7ff fe9d 	bl	8001fa8 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b05      	cmp	r3, #5
 8002276:	d908      	bls.n	800228a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2220      	movs	r2, #32
 800227c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2203      	movs	r2, #3
 8002282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e078      	b.n	800237c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1e8      	bne.n	800226a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	4b38      	ldr	r3, [pc, #224]	; (8002384 <HAL_DMA_Init+0x158>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	4313      	orrs	r3, r2
 80022da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d107      	bne.n	80022f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ec:	4313      	orrs	r3, r2
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	f023 0307 	bic.w	r3, r3, #7
 800230a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	4313      	orrs	r3, r2
 8002314:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	2b04      	cmp	r3, #4
 800231c:	d117      	bne.n	800234e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	4313      	orrs	r3, r2
 8002326:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00e      	beq.n	800234e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 facd 	bl	80028d0 <DMA_CheckFifoParam>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d008      	beq.n	800234e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2240      	movs	r2, #64	; 0x40
 8002340:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800234a:	2301      	movs	r3, #1
 800234c:	e016      	b.n	800237c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 fa84 	bl	8002864 <DMA_CalcBaseAndBitshift>
 800235c:	4603      	mov	r3, r0
 800235e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002364:	223f      	movs	r2, #63	; 0x3f
 8002366:	409a      	lsls	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	f010803f 	.word	0xf010803f

08002388 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e050      	b.n	800243c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d101      	bne.n	80023aa <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80023a6:	2302      	movs	r3, #2
 80023a8:	e048      	b.n	800243c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0201 	bic.w	r2, r2, #1
 80023b8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2200      	movs	r2, #0
 80023c8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2200      	movs	r2, #0
 80023d0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2200      	movs	r2, #0
 80023d8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2200      	movs	r2, #0
 80023e0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2221      	movs	r2, #33	; 0x21
 80023e8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 fa3a 	bl	8002864 <DMA_CalcBaseAndBitshift>
 80023f0:	4603      	mov	r3, r0
 80023f2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241c:	223f      	movs	r2, #63	; 0x3f
 800241e:	409a      	lsls	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
 8002450:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002462:	2b01      	cmp	r3, #1
 8002464:	d101      	bne.n	800246a <HAL_DMA_Start_IT+0x26>
 8002466:	2302      	movs	r3, #2
 8002468:	e040      	b.n	80024ec <HAL_DMA_Start_IT+0xa8>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b01      	cmp	r3, #1
 800247c:	d12f      	bne.n	80024de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2202      	movs	r2, #2
 8002482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	68b9      	ldr	r1, [r7, #8]
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 f9b8 	bl	8002808 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249c:	223f      	movs	r2, #63	; 0x3f
 800249e:	409a      	lsls	r2, r3
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0216 	orr.w	r2, r2, #22
 80024b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d007      	beq.n	80024cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0208 	orr.w	r2, r2, #8
 80024ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0201 	orr.w	r2, r2, #1
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	e005      	b.n	80024ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024e6:	2302      	movs	r3, #2
 80024e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002500:	4b8e      	ldr	r3, [pc, #568]	; (800273c <HAL_DMA_IRQHandler+0x248>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a8e      	ldr	r2, [pc, #568]	; (8002740 <HAL_DMA_IRQHandler+0x24c>)
 8002506:	fba2 2303 	umull	r2, r3, r2, r3
 800250a:	0a9b      	lsrs	r3, r3, #10
 800250c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002512:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251e:	2208      	movs	r2, #8
 8002520:	409a      	lsls	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4013      	ands	r3, r2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d01a      	beq.n	8002560 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d013      	beq.n	8002560 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 0204 	bic.w	r2, r2, #4
 8002546:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254c:	2208      	movs	r2, #8
 800254e:	409a      	lsls	r2, r3
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002558:	f043 0201 	orr.w	r2, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002564:	2201      	movs	r2, #1
 8002566:	409a      	lsls	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4013      	ands	r3, r2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d012      	beq.n	8002596 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00b      	beq.n	8002596 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002582:	2201      	movs	r2, #1
 8002584:	409a      	lsls	r2, r3
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258e:	f043 0202 	orr.w	r2, r3, #2
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259a:	2204      	movs	r2, #4
 800259c:	409a      	lsls	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	4013      	ands	r3, r2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d012      	beq.n	80025cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00b      	beq.n	80025cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b8:	2204      	movs	r2, #4
 80025ba:	409a      	lsls	r2, r3
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c4:	f043 0204 	orr.w	r2, r3, #4
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d0:	2210      	movs	r2, #16
 80025d2:	409a      	lsls	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d043      	beq.n	8002664 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d03c      	beq.n	8002664 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ee:	2210      	movs	r2, #16
 80025f0:	409a      	lsls	r2, r3
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d018      	beq.n	8002636 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d108      	bne.n	8002624 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	2b00      	cmp	r3, #0
 8002618:	d024      	beq.n	8002664 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	4798      	blx	r3
 8002622:	e01f      	b.n	8002664 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002628:	2b00      	cmp	r3, #0
 800262a:	d01b      	beq.n	8002664 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	4798      	blx	r3
 8002634:	e016      	b.n	8002664 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002640:	2b00      	cmp	r3, #0
 8002642:	d107      	bne.n	8002654 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0208 	bic.w	r2, r2, #8
 8002652:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002668:	2220      	movs	r2, #32
 800266a:	409a      	lsls	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4013      	ands	r3, r2
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 808f 	beq.w	8002794 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0310 	and.w	r3, r3, #16
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 8087 	beq.w	8002794 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268a:	2220      	movs	r2, #32
 800268c:	409a      	lsls	r2, r3
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b05      	cmp	r3, #5
 800269c:	d136      	bne.n	800270c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0216 	bic.w	r2, r2, #22
 80026ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	695a      	ldr	r2, [r3, #20]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d103      	bne.n	80026ce <HAL_DMA_IRQHandler+0x1da>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d007      	beq.n	80026de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0208 	bic.w	r2, r2, #8
 80026dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e2:	223f      	movs	r2, #63	; 0x3f
 80026e4:	409a      	lsls	r2, r3
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d07e      	beq.n	8002800 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	4798      	blx	r3
        }
        return;
 800270a:	e079      	b.n	8002800 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d01d      	beq.n	8002756 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10d      	bne.n	8002744 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272c:	2b00      	cmp	r3, #0
 800272e:	d031      	beq.n	8002794 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	4798      	blx	r3
 8002738:	e02c      	b.n	8002794 <HAL_DMA_IRQHandler+0x2a0>
 800273a:	bf00      	nop
 800273c:	20000038 	.word	0x20000038
 8002740:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002748:	2b00      	cmp	r3, #0
 800274a:	d023      	beq.n	8002794 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	4798      	blx	r3
 8002754:	e01e      	b.n	8002794 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10f      	bne.n	8002784 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0210 	bic.w	r2, r2, #16
 8002772:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002798:	2b00      	cmp	r3, #0
 800279a:	d032      	beq.n	8002802 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d022      	beq.n	80027ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2205      	movs	r2, #5
 80027ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0201 	bic.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	3301      	adds	r3, #1
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d307      	bcc.n	80027dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f2      	bne.n	80027c0 <HAL_DMA_IRQHandler+0x2cc>
 80027da:	e000      	b.n	80027de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80027dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d005      	beq.n	8002802 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	4798      	blx	r3
 80027fe:	e000      	b.n	8002802 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002800:	bf00      	nop
    }
  }
}
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
 8002814:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002824:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	2b40      	cmp	r3, #64	; 0x40
 8002834:	d108      	bne.n	8002848 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68ba      	ldr	r2, [r7, #8]
 8002844:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002846:	e007      	b.n	8002858 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	60da      	str	r2, [r3, #12]
}
 8002858:	bf00      	nop
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	3b10      	subs	r3, #16
 8002874:	4a14      	ldr	r2, [pc, #80]	; (80028c8 <DMA_CalcBaseAndBitshift+0x64>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	091b      	lsrs	r3, r3, #4
 800287c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800287e:	4a13      	ldr	r2, [pc, #76]	; (80028cc <DMA_CalcBaseAndBitshift+0x68>)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4413      	add	r3, r2
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2b03      	cmp	r3, #3
 8002890:	d909      	bls.n	80028a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800289a:	f023 0303 	bic.w	r3, r3, #3
 800289e:	1d1a      	adds	r2, r3, #4
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	659a      	str	r2, [r3, #88]	; 0x58
 80028a4:	e007      	b.n	80028b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028ae:	f023 0303 	bic.w	r3, r3, #3
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	aaaaaaab 	.word	0xaaaaaaab
 80028cc:	0800d0b8 	.word	0x0800d0b8

080028d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d11f      	bne.n	800292a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	2b03      	cmp	r3, #3
 80028ee:	d856      	bhi.n	800299e <DMA_CheckFifoParam+0xce>
 80028f0:	a201      	add	r2, pc, #4	; (adr r2, 80028f8 <DMA_CheckFifoParam+0x28>)
 80028f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f6:	bf00      	nop
 80028f8:	08002909 	.word	0x08002909
 80028fc:	0800291b 	.word	0x0800291b
 8002900:	08002909 	.word	0x08002909
 8002904:	0800299f 	.word	0x0800299f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d046      	beq.n	80029a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002918:	e043      	b.n	80029a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002922:	d140      	bne.n	80029a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002928:	e03d      	b.n	80029a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002932:	d121      	bne.n	8002978 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b03      	cmp	r3, #3
 8002938:	d837      	bhi.n	80029aa <DMA_CheckFifoParam+0xda>
 800293a:	a201      	add	r2, pc, #4	; (adr r2, 8002940 <DMA_CheckFifoParam+0x70>)
 800293c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002940:	08002951 	.word	0x08002951
 8002944:	08002957 	.word	0x08002957
 8002948:	08002951 	.word	0x08002951
 800294c:	08002969 	.word	0x08002969
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	73fb      	strb	r3, [r7, #15]
      break;
 8002954:	e030      	b.n	80029b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d025      	beq.n	80029ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002966:	e022      	b.n	80029ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002970:	d11f      	bne.n	80029b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002976:	e01c      	b.n	80029b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2b02      	cmp	r3, #2
 800297c:	d903      	bls.n	8002986 <DMA_CheckFifoParam+0xb6>
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b03      	cmp	r3, #3
 8002982:	d003      	beq.n	800298c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002984:	e018      	b.n	80029b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	73fb      	strb	r3, [r7, #15]
      break;
 800298a:	e015      	b.n	80029b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00e      	beq.n	80029b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	73fb      	strb	r3, [r7, #15]
      break;
 800299c:	e00b      	b.n	80029b6 <DMA_CheckFifoParam+0xe6>
      break;
 800299e:	bf00      	nop
 80029a0:	e00a      	b.n	80029b8 <DMA_CheckFifoParam+0xe8>
      break;
 80029a2:	bf00      	nop
 80029a4:	e008      	b.n	80029b8 <DMA_CheckFifoParam+0xe8>
      break;
 80029a6:	bf00      	nop
 80029a8:	e006      	b.n	80029b8 <DMA_CheckFifoParam+0xe8>
      break;
 80029aa:	bf00      	nop
 80029ac:	e004      	b.n	80029b8 <DMA_CheckFifoParam+0xe8>
      break;
 80029ae:	bf00      	nop
 80029b0:	e002      	b.n	80029b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80029b2:	bf00      	nop
 80029b4:	e000      	b.n	80029b8 <DMA_CheckFifoParam+0xe8>
      break;
 80029b6:	bf00      	nop
    }
  } 
  
  return status; 
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop

080029c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b089      	sub	sp, #36	; 0x24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029da:	2300      	movs	r3, #0
 80029dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029de:	2300      	movs	r3, #0
 80029e0:	61fb      	str	r3, [r7, #28]
 80029e2:	e16b      	b.n	8002cbc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029e4:	2201      	movs	r2, #1
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	4013      	ands	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	f040 815a 	bne.w	8002cb6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d005      	beq.n	8002a1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d130      	bne.n	8002a7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	2203      	movs	r2, #3
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a50:	2201      	movs	r2, #1
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	091b      	lsrs	r3, r3, #4
 8002a66:	f003 0201 	and.w	r2, r3, #1
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 0303 	and.w	r3, r3, #3
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d017      	beq.n	8002ab8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	2203      	movs	r2, #3
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d123      	bne.n	8002b0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	08da      	lsrs	r2, r3, #3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3208      	adds	r2, #8
 8002acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	220f      	movs	r2, #15
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	691a      	ldr	r2, [r3, #16]
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	08da      	lsrs	r2, r3, #3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	3208      	adds	r2, #8
 8002b06:	69b9      	ldr	r1, [r7, #24]
 8002b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	2203      	movs	r2, #3
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4013      	ands	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 0203 	and.w	r2, r3, #3
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 80b4 	beq.w	8002cb6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	4b60      	ldr	r3, [pc, #384]	; (8002cd4 <HAL_GPIO_Init+0x30c>)
 8002b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b56:	4a5f      	ldr	r2, [pc, #380]	; (8002cd4 <HAL_GPIO_Init+0x30c>)
 8002b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b5e:	4b5d      	ldr	r3, [pc, #372]	; (8002cd4 <HAL_GPIO_Init+0x30c>)
 8002b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b6a:	4a5b      	ldr	r2, [pc, #364]	; (8002cd8 <HAL_GPIO_Init+0x310>)
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	089b      	lsrs	r3, r3, #2
 8002b70:	3302      	adds	r3, #2
 8002b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	220f      	movs	r2, #15
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43db      	mvns	r3, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a52      	ldr	r2, [pc, #328]	; (8002cdc <HAL_GPIO_Init+0x314>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d02b      	beq.n	8002bee <HAL_GPIO_Init+0x226>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a51      	ldr	r2, [pc, #324]	; (8002ce0 <HAL_GPIO_Init+0x318>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d025      	beq.n	8002bea <HAL_GPIO_Init+0x222>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a50      	ldr	r2, [pc, #320]	; (8002ce4 <HAL_GPIO_Init+0x31c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d01f      	beq.n	8002be6 <HAL_GPIO_Init+0x21e>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a4f      	ldr	r2, [pc, #316]	; (8002ce8 <HAL_GPIO_Init+0x320>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d019      	beq.n	8002be2 <HAL_GPIO_Init+0x21a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a4e      	ldr	r2, [pc, #312]	; (8002cec <HAL_GPIO_Init+0x324>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d013      	beq.n	8002bde <HAL_GPIO_Init+0x216>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a4d      	ldr	r2, [pc, #308]	; (8002cf0 <HAL_GPIO_Init+0x328>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00d      	beq.n	8002bda <HAL_GPIO_Init+0x212>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a4c      	ldr	r2, [pc, #304]	; (8002cf4 <HAL_GPIO_Init+0x32c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d007      	beq.n	8002bd6 <HAL_GPIO_Init+0x20e>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a4b      	ldr	r2, [pc, #300]	; (8002cf8 <HAL_GPIO_Init+0x330>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d101      	bne.n	8002bd2 <HAL_GPIO_Init+0x20a>
 8002bce:	2307      	movs	r3, #7
 8002bd0:	e00e      	b.n	8002bf0 <HAL_GPIO_Init+0x228>
 8002bd2:	2308      	movs	r3, #8
 8002bd4:	e00c      	b.n	8002bf0 <HAL_GPIO_Init+0x228>
 8002bd6:	2306      	movs	r3, #6
 8002bd8:	e00a      	b.n	8002bf0 <HAL_GPIO_Init+0x228>
 8002bda:	2305      	movs	r3, #5
 8002bdc:	e008      	b.n	8002bf0 <HAL_GPIO_Init+0x228>
 8002bde:	2304      	movs	r3, #4
 8002be0:	e006      	b.n	8002bf0 <HAL_GPIO_Init+0x228>
 8002be2:	2303      	movs	r3, #3
 8002be4:	e004      	b.n	8002bf0 <HAL_GPIO_Init+0x228>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e002      	b.n	8002bf0 <HAL_GPIO_Init+0x228>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <HAL_GPIO_Init+0x228>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	69fa      	ldr	r2, [r7, #28]
 8002bf2:	f002 0203 	and.w	r2, r2, #3
 8002bf6:	0092      	lsls	r2, r2, #2
 8002bf8:	4093      	lsls	r3, r2
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c00:	4935      	ldr	r1, [pc, #212]	; (8002cd8 <HAL_GPIO_Init+0x310>)
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	089b      	lsrs	r3, r3, #2
 8002c06:	3302      	adds	r3, #2
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c0e:	4b3b      	ldr	r3, [pc, #236]	; (8002cfc <HAL_GPIO_Init+0x334>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	43db      	mvns	r3, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c32:	4a32      	ldr	r2, [pc, #200]	; (8002cfc <HAL_GPIO_Init+0x334>)
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c38:	4b30      	ldr	r3, [pc, #192]	; (8002cfc <HAL_GPIO_Init+0x334>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	43db      	mvns	r3, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c5c:	4a27      	ldr	r2, [pc, #156]	; (8002cfc <HAL_GPIO_Init+0x334>)
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c62:	4b26      	ldr	r3, [pc, #152]	; (8002cfc <HAL_GPIO_Init+0x334>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c86:	4a1d      	ldr	r2, [pc, #116]	; (8002cfc <HAL_GPIO_Init+0x334>)
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c8c:	4b1b      	ldr	r3, [pc, #108]	; (8002cfc <HAL_GPIO_Init+0x334>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	43db      	mvns	r3, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cb0:	4a12      	ldr	r2, [pc, #72]	; (8002cfc <HAL_GPIO_Init+0x334>)
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	61fb      	str	r3, [r7, #28]
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	2b0f      	cmp	r3, #15
 8002cc0:	f67f ae90 	bls.w	80029e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cc4:	bf00      	nop
 8002cc6:	bf00      	nop
 8002cc8:	3724      	adds	r7, #36	; 0x24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	40013800 	.word	0x40013800
 8002cdc:	40020000 	.word	0x40020000
 8002ce0:	40020400 	.word	0x40020400
 8002ce4:	40020800 	.word	0x40020800
 8002ce8:	40020c00 	.word	0x40020c00
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	40021400 	.word	0x40021400
 8002cf4:	40021800 	.word	0x40021800
 8002cf8:	40021c00 	.word	0x40021c00
 8002cfc:	40013c00 	.word	0x40013c00

08002d00 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b087      	sub	sp, #28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d16:	2300      	movs	r3, #0
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	e0cd      	b.n	8002eb8 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	f040 80bd 	bne.w	8002eb2 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002d38:	4a65      	ldr	r2, [pc, #404]	; (8002ed0 <HAL_GPIO_DeInit+0x1d0>)
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	089b      	lsrs	r3, r3, #2
 8002d3e:	3302      	adds	r3, #2
 8002d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d44:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f003 0303 	and.w	r3, r3, #3
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	220f      	movs	r2, #15
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	4013      	ands	r3, r2
 8002d58:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a5d      	ldr	r2, [pc, #372]	; (8002ed4 <HAL_GPIO_DeInit+0x1d4>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d02b      	beq.n	8002dba <HAL_GPIO_DeInit+0xba>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a5c      	ldr	r2, [pc, #368]	; (8002ed8 <HAL_GPIO_DeInit+0x1d8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d025      	beq.n	8002db6 <HAL_GPIO_DeInit+0xb6>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a5b      	ldr	r2, [pc, #364]	; (8002edc <HAL_GPIO_DeInit+0x1dc>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d01f      	beq.n	8002db2 <HAL_GPIO_DeInit+0xb2>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a5a      	ldr	r2, [pc, #360]	; (8002ee0 <HAL_GPIO_DeInit+0x1e0>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d019      	beq.n	8002dae <HAL_GPIO_DeInit+0xae>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a59      	ldr	r2, [pc, #356]	; (8002ee4 <HAL_GPIO_DeInit+0x1e4>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d013      	beq.n	8002daa <HAL_GPIO_DeInit+0xaa>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a58      	ldr	r2, [pc, #352]	; (8002ee8 <HAL_GPIO_DeInit+0x1e8>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d00d      	beq.n	8002da6 <HAL_GPIO_DeInit+0xa6>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a57      	ldr	r2, [pc, #348]	; (8002eec <HAL_GPIO_DeInit+0x1ec>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d007      	beq.n	8002da2 <HAL_GPIO_DeInit+0xa2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a56      	ldr	r2, [pc, #344]	; (8002ef0 <HAL_GPIO_DeInit+0x1f0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d101      	bne.n	8002d9e <HAL_GPIO_DeInit+0x9e>
 8002d9a:	2307      	movs	r3, #7
 8002d9c:	e00e      	b.n	8002dbc <HAL_GPIO_DeInit+0xbc>
 8002d9e:	2308      	movs	r3, #8
 8002da0:	e00c      	b.n	8002dbc <HAL_GPIO_DeInit+0xbc>
 8002da2:	2306      	movs	r3, #6
 8002da4:	e00a      	b.n	8002dbc <HAL_GPIO_DeInit+0xbc>
 8002da6:	2305      	movs	r3, #5
 8002da8:	e008      	b.n	8002dbc <HAL_GPIO_DeInit+0xbc>
 8002daa:	2304      	movs	r3, #4
 8002dac:	e006      	b.n	8002dbc <HAL_GPIO_DeInit+0xbc>
 8002dae:	2303      	movs	r3, #3
 8002db0:	e004      	b.n	8002dbc <HAL_GPIO_DeInit+0xbc>
 8002db2:	2302      	movs	r3, #2
 8002db4:	e002      	b.n	8002dbc <HAL_GPIO_DeInit+0xbc>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <HAL_GPIO_DeInit+0xbc>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	f002 0203 	and.w	r2, r2, #3
 8002dc2:	0092      	lsls	r2, r2, #2
 8002dc4:	4093      	lsls	r3, r2
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d132      	bne.n	8002e32 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002dcc:	4b49      	ldr	r3, [pc, #292]	; (8002ef4 <HAL_GPIO_DeInit+0x1f4>)
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	4947      	ldr	r1, [pc, #284]	; (8002ef4 <HAL_GPIO_DeInit+0x1f4>)
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002dda:	4b46      	ldr	r3, [pc, #280]	; (8002ef4 <HAL_GPIO_DeInit+0x1f4>)
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	4944      	ldr	r1, [pc, #272]	; (8002ef4 <HAL_GPIO_DeInit+0x1f4>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002de8:	4b42      	ldr	r3, [pc, #264]	; (8002ef4 <HAL_GPIO_DeInit+0x1f4>)
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	43db      	mvns	r3, r3
 8002df0:	4940      	ldr	r1, [pc, #256]	; (8002ef4 <HAL_GPIO_DeInit+0x1f4>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002df6:	4b3f      	ldr	r3, [pc, #252]	; (8002ef4 <HAL_GPIO_DeInit+0x1f4>)
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	493d      	ldr	r1, [pc, #244]	; (8002ef4 <HAL_GPIO_DeInit+0x1f4>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	220f      	movs	r2, #15
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002e14:	4a2e      	ldr	r2, [pc, #184]	; (8002ed0 <HAL_GPIO_DeInit+0x1d0>)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	089b      	lsrs	r3, r3, #2
 8002e1a:	3302      	adds	r3, #2
 8002e1c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	43da      	mvns	r2, r3
 8002e24:	482a      	ldr	r0, [pc, #168]	; (8002ed0 <HAL_GPIO_DeInit+0x1d0>)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	089b      	lsrs	r3, r3, #2
 8002e2a:	400a      	ands	r2, r1
 8002e2c:	3302      	adds	r3, #2
 8002e2e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	2103      	movs	r1, #3
 8002e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	401a      	ands	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	08da      	lsrs	r2, r3, #3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3208      	adds	r2, #8
 8002e50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	220f      	movs	r2, #15
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43db      	mvns	r3, r3
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	08d2      	lsrs	r2, r2, #3
 8002e68:	4019      	ands	r1, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3208      	adds	r2, #8
 8002e6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	2103      	movs	r1, #3
 8002e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e80:	43db      	mvns	r3, r3
 8002e82:	401a      	ands	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	fa01 f303 	lsl.w	r3, r1, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	401a      	ands	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	2103      	movs	r1, #3
 8002ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	401a      	ands	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2b0f      	cmp	r3, #15
 8002ebc:	f67f af2e 	bls.w	8002d1c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002ec0:	bf00      	nop
 8002ec2:	bf00      	nop
 8002ec4:	371c      	adds	r7, #28
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	40013800 	.word	0x40013800
 8002ed4:	40020000 	.word	0x40020000
 8002ed8:	40020400 	.word	0x40020400
 8002edc:	40020800 	.word	0x40020800
 8002ee0:	40020c00 	.word	0x40020c00
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	40021400 	.word	0x40021400
 8002eec:	40021800 	.word	0x40021800
 8002ef0:	40021c00 	.word	0x40021c00
 8002ef4:	40013c00 	.word	0x40013c00

08002ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	807b      	strh	r3, [r7, #2]
 8002f04:	4613      	mov	r3, r2
 8002f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f08:	787b      	ldrb	r3, [r7, #1]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f0e:	887a      	ldrh	r2, [r7, #2]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f14:	e003      	b.n	8002f1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f16:	887b      	ldrh	r3, [r7, #2]
 8002f18:	041a      	lsls	r2, r3, #16
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	619a      	str	r2, [r3, #24]
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002f2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f2c:	b08f      	sub	sp, #60	; 0x3c
 8002f2e:	af0a      	add	r7, sp, #40	; 0x28
 8002f30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e054      	b.n	8002fe6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d106      	bne.n	8002f5c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f009 fb3c 	bl	800c5d4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2203      	movs	r2, #3
 8002f60:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d102      	bne.n	8002f76 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f004 fd14 	bl	80079a8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	603b      	str	r3, [r7, #0]
 8002f86:	687e      	ldr	r6, [r7, #4]
 8002f88:	466d      	mov	r5, sp
 8002f8a:	f106 0410 	add.w	r4, r6, #16
 8002f8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f9e:	1d33      	adds	r3, r6, #4
 8002fa0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fa2:	6838      	ldr	r0, [r7, #0]
 8002fa4:	f004 fc8e 	bl	80078c4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2101      	movs	r1, #1
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f004 fd0b 	bl	80079ca <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	603b      	str	r3, [r7, #0]
 8002fba:	687e      	ldr	r6, [r7, #4]
 8002fbc:	466d      	mov	r5, sp
 8002fbe:	f106 0410 	add.w	r4, r6, #16
 8002fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fce:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fd2:	1d33      	adds	r3, r6, #4
 8002fd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fd6:	6838      	ldr	r0, [r7, #0]
 8002fd8:	f004 fe94 	bl	8007d04 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fee <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002fee:	b590      	push	{r4, r7, lr}
 8002ff0:	b089      	sub	sp, #36	; 0x24
 8002ff2:	af04      	add	r7, sp, #16
 8002ff4:	6078      	str	r0, [r7, #4]
 8002ff6:	4608      	mov	r0, r1
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	70fb      	strb	r3, [r7, #3]
 8003000:	460b      	mov	r3, r1
 8003002:	70bb      	strb	r3, [r7, #2]
 8003004:	4613      	mov	r3, r2
 8003006:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_HCD_HC_Init+0x28>
 8003012:	2302      	movs	r3, #2
 8003014:	e076      	b.n	8003104 <HAL_HCD_HC_Init+0x116>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800301e:	78fb      	ldrb	r3, [r7, #3]
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	212c      	movs	r1, #44	; 0x2c
 8003024:	fb01 f303 	mul.w	r3, r1, r3
 8003028:	4413      	add	r3, r2
 800302a:	333d      	adds	r3, #61	; 0x3d
 800302c:	2200      	movs	r2, #0
 800302e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	212c      	movs	r1, #44	; 0x2c
 8003036:	fb01 f303 	mul.w	r3, r1, r3
 800303a:	4413      	add	r3, r2
 800303c:	3338      	adds	r3, #56	; 0x38
 800303e:	787a      	ldrb	r2, [r7, #1]
 8003040:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003042:	78fb      	ldrb	r3, [r7, #3]
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	212c      	movs	r1, #44	; 0x2c
 8003048:	fb01 f303 	mul.w	r3, r1, r3
 800304c:	4413      	add	r3, r2
 800304e:	3340      	adds	r3, #64	; 0x40
 8003050:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003052:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003054:	78fb      	ldrb	r3, [r7, #3]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	212c      	movs	r1, #44	; 0x2c
 800305a:	fb01 f303 	mul.w	r3, r1, r3
 800305e:	4413      	add	r3, r2
 8003060:	3339      	adds	r3, #57	; 0x39
 8003062:	78fa      	ldrb	r2, [r7, #3]
 8003064:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003066:	78fb      	ldrb	r3, [r7, #3]
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	212c      	movs	r1, #44	; 0x2c
 800306c:	fb01 f303 	mul.w	r3, r1, r3
 8003070:	4413      	add	r3, r2
 8003072:	333f      	adds	r3, #63	; 0x3f
 8003074:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003078:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800307a:	78fb      	ldrb	r3, [r7, #3]
 800307c:	78ba      	ldrb	r2, [r7, #2]
 800307e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003082:	b2d0      	uxtb	r0, r2
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	212c      	movs	r1, #44	; 0x2c
 8003088:	fb01 f303 	mul.w	r3, r1, r3
 800308c:	4413      	add	r3, r2
 800308e:	333a      	adds	r3, #58	; 0x3a
 8003090:	4602      	mov	r2, r0
 8003092:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003094:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003098:	2b00      	cmp	r3, #0
 800309a:	da09      	bge.n	80030b0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800309c:	78fb      	ldrb	r3, [r7, #3]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	212c      	movs	r1, #44	; 0x2c
 80030a2:	fb01 f303 	mul.w	r3, r1, r3
 80030a6:	4413      	add	r3, r2
 80030a8:	333b      	adds	r3, #59	; 0x3b
 80030aa:	2201      	movs	r2, #1
 80030ac:	701a      	strb	r2, [r3, #0]
 80030ae:	e008      	b.n	80030c2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	212c      	movs	r1, #44	; 0x2c
 80030b6:	fb01 f303 	mul.w	r3, r1, r3
 80030ba:	4413      	add	r3, r2
 80030bc:	333b      	adds	r3, #59	; 0x3b
 80030be:	2200      	movs	r2, #0
 80030c0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80030c2:	78fb      	ldrb	r3, [r7, #3]
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	212c      	movs	r1, #44	; 0x2c
 80030c8:	fb01 f303 	mul.w	r3, r1, r3
 80030cc:	4413      	add	r3, r2
 80030ce:	333c      	adds	r3, #60	; 0x3c
 80030d0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80030d4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	787c      	ldrb	r4, [r7, #1]
 80030dc:	78ba      	ldrb	r2, [r7, #2]
 80030de:	78f9      	ldrb	r1, [r7, #3]
 80030e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80030e2:	9302      	str	r3, [sp, #8]
 80030e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80030e8:	9301      	str	r3, [sp, #4]
 80030ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	4623      	mov	r3, r4
 80030f2:	f004 ff8d 	bl	8008010 <USB_HC_Init>
 80030f6:	4603      	mov	r3, r0
 80030f8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003102:	7bfb      	ldrb	r3, [r7, #15]
}
 8003104:	4618      	mov	r0, r3
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	bd90      	pop	{r4, r7, pc}

0800310c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	460b      	mov	r3, r1
 8003116:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003118:	2300      	movs	r3, #0
 800311a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003122:	2b01      	cmp	r3, #1
 8003124:	d101      	bne.n	800312a <HAL_HCD_HC_Halt+0x1e>
 8003126:	2302      	movs	r3, #2
 8003128:	e00f      	b.n	800314a <HAL_HCD_HC_Halt+0x3e>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	78fa      	ldrb	r2, [r7, #3]
 8003138:	4611      	mov	r1, r2
 800313a:	4618      	mov	r0, r3
 800313c:	f005 f9dd 	bl	80084fa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003148:	7bfb      	ldrb	r3, [r7, #15]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
	...

08003154 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	4608      	mov	r0, r1
 800315e:	4611      	mov	r1, r2
 8003160:	461a      	mov	r2, r3
 8003162:	4603      	mov	r3, r0
 8003164:	70fb      	strb	r3, [r7, #3]
 8003166:	460b      	mov	r3, r1
 8003168:	70bb      	strb	r3, [r7, #2]
 800316a:	4613      	mov	r3, r2
 800316c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800316e:	78fb      	ldrb	r3, [r7, #3]
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	212c      	movs	r1, #44	; 0x2c
 8003174:	fb01 f303 	mul.w	r3, r1, r3
 8003178:	4413      	add	r3, r2
 800317a:	333b      	adds	r3, #59	; 0x3b
 800317c:	78ba      	ldrb	r2, [r7, #2]
 800317e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	212c      	movs	r1, #44	; 0x2c
 8003186:	fb01 f303 	mul.w	r3, r1, r3
 800318a:	4413      	add	r3, r2
 800318c:	333f      	adds	r3, #63	; 0x3f
 800318e:	787a      	ldrb	r2, [r7, #1]
 8003190:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003192:	7c3b      	ldrb	r3, [r7, #16]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d112      	bne.n	80031be <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	212c      	movs	r1, #44	; 0x2c
 800319e:	fb01 f303 	mul.w	r3, r1, r3
 80031a2:	4413      	add	r3, r2
 80031a4:	3342      	adds	r3, #66	; 0x42
 80031a6:	2203      	movs	r2, #3
 80031a8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80031aa:	78fb      	ldrb	r3, [r7, #3]
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	212c      	movs	r1, #44	; 0x2c
 80031b0:	fb01 f303 	mul.w	r3, r1, r3
 80031b4:	4413      	add	r3, r2
 80031b6:	333d      	adds	r3, #61	; 0x3d
 80031b8:	7f3a      	ldrb	r2, [r7, #28]
 80031ba:	701a      	strb	r2, [r3, #0]
 80031bc:	e008      	b.n	80031d0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031be:	78fb      	ldrb	r3, [r7, #3]
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	212c      	movs	r1, #44	; 0x2c
 80031c4:	fb01 f303 	mul.w	r3, r1, r3
 80031c8:	4413      	add	r3, r2
 80031ca:	3342      	adds	r3, #66	; 0x42
 80031cc:	2202      	movs	r2, #2
 80031ce:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80031d0:	787b      	ldrb	r3, [r7, #1]
 80031d2:	2b03      	cmp	r3, #3
 80031d4:	f200 80c6 	bhi.w	8003364 <HAL_HCD_HC_SubmitRequest+0x210>
 80031d8:	a201      	add	r2, pc, #4	; (adr r2, 80031e0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80031da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031de:	bf00      	nop
 80031e0:	080031f1 	.word	0x080031f1
 80031e4:	08003351 	.word	0x08003351
 80031e8:	08003255 	.word	0x08003255
 80031ec:	080032d3 	.word	0x080032d3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80031f0:	7c3b      	ldrb	r3, [r7, #16]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	f040 80b8 	bne.w	8003368 <HAL_HCD_HC_SubmitRequest+0x214>
 80031f8:	78bb      	ldrb	r3, [r7, #2]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f040 80b4 	bne.w	8003368 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003200:	8b3b      	ldrh	r3, [r7, #24]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d108      	bne.n	8003218 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003206:	78fb      	ldrb	r3, [r7, #3]
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	212c      	movs	r1, #44	; 0x2c
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	4413      	add	r3, r2
 8003212:	3355      	adds	r3, #85	; 0x55
 8003214:	2201      	movs	r2, #1
 8003216:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003218:	78fb      	ldrb	r3, [r7, #3]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	212c      	movs	r1, #44	; 0x2c
 800321e:	fb01 f303 	mul.w	r3, r1, r3
 8003222:	4413      	add	r3, r2
 8003224:	3355      	adds	r3, #85	; 0x55
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d109      	bne.n	8003240 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800322c:	78fb      	ldrb	r3, [r7, #3]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	212c      	movs	r1, #44	; 0x2c
 8003232:	fb01 f303 	mul.w	r3, r1, r3
 8003236:	4413      	add	r3, r2
 8003238:	3342      	adds	r3, #66	; 0x42
 800323a:	2200      	movs	r2, #0
 800323c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800323e:	e093      	b.n	8003368 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003240:	78fb      	ldrb	r3, [r7, #3]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	212c      	movs	r1, #44	; 0x2c
 8003246:	fb01 f303 	mul.w	r3, r1, r3
 800324a:	4413      	add	r3, r2
 800324c:	3342      	adds	r3, #66	; 0x42
 800324e:	2202      	movs	r2, #2
 8003250:	701a      	strb	r2, [r3, #0]
      break;
 8003252:	e089      	b.n	8003368 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003254:	78bb      	ldrb	r3, [r7, #2]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d11d      	bne.n	8003296 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800325a:	78fb      	ldrb	r3, [r7, #3]
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	212c      	movs	r1, #44	; 0x2c
 8003260:	fb01 f303 	mul.w	r3, r1, r3
 8003264:	4413      	add	r3, r2
 8003266:	3355      	adds	r3, #85	; 0x55
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d109      	bne.n	8003282 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800326e:	78fb      	ldrb	r3, [r7, #3]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	212c      	movs	r1, #44	; 0x2c
 8003274:	fb01 f303 	mul.w	r3, r1, r3
 8003278:	4413      	add	r3, r2
 800327a:	3342      	adds	r3, #66	; 0x42
 800327c:	2200      	movs	r2, #0
 800327e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003280:	e073      	b.n	800336a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003282:	78fb      	ldrb	r3, [r7, #3]
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	212c      	movs	r1, #44	; 0x2c
 8003288:	fb01 f303 	mul.w	r3, r1, r3
 800328c:	4413      	add	r3, r2
 800328e:	3342      	adds	r3, #66	; 0x42
 8003290:	2202      	movs	r2, #2
 8003292:	701a      	strb	r2, [r3, #0]
      break;
 8003294:	e069      	b.n	800336a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003296:	78fb      	ldrb	r3, [r7, #3]
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	212c      	movs	r1, #44	; 0x2c
 800329c:	fb01 f303 	mul.w	r3, r1, r3
 80032a0:	4413      	add	r3, r2
 80032a2:	3354      	adds	r3, #84	; 0x54
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d109      	bne.n	80032be <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032aa:	78fb      	ldrb	r3, [r7, #3]
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	212c      	movs	r1, #44	; 0x2c
 80032b0:	fb01 f303 	mul.w	r3, r1, r3
 80032b4:	4413      	add	r3, r2
 80032b6:	3342      	adds	r3, #66	; 0x42
 80032b8:	2200      	movs	r2, #0
 80032ba:	701a      	strb	r2, [r3, #0]
      break;
 80032bc:	e055      	b.n	800336a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032be:	78fb      	ldrb	r3, [r7, #3]
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	212c      	movs	r1, #44	; 0x2c
 80032c4:	fb01 f303 	mul.w	r3, r1, r3
 80032c8:	4413      	add	r3, r2
 80032ca:	3342      	adds	r3, #66	; 0x42
 80032cc:	2202      	movs	r2, #2
 80032ce:	701a      	strb	r2, [r3, #0]
      break;
 80032d0:	e04b      	b.n	800336a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80032d2:	78bb      	ldrb	r3, [r7, #2]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d11d      	bne.n	8003314 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80032d8:	78fb      	ldrb	r3, [r7, #3]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	212c      	movs	r1, #44	; 0x2c
 80032de:	fb01 f303 	mul.w	r3, r1, r3
 80032e2:	4413      	add	r3, r2
 80032e4:	3355      	adds	r3, #85	; 0x55
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d109      	bne.n	8003300 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	212c      	movs	r1, #44	; 0x2c
 80032f2:	fb01 f303 	mul.w	r3, r1, r3
 80032f6:	4413      	add	r3, r2
 80032f8:	3342      	adds	r3, #66	; 0x42
 80032fa:	2200      	movs	r2, #0
 80032fc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80032fe:	e034      	b.n	800336a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003300:	78fb      	ldrb	r3, [r7, #3]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	212c      	movs	r1, #44	; 0x2c
 8003306:	fb01 f303 	mul.w	r3, r1, r3
 800330a:	4413      	add	r3, r2
 800330c:	3342      	adds	r3, #66	; 0x42
 800330e:	2202      	movs	r2, #2
 8003310:	701a      	strb	r2, [r3, #0]
      break;
 8003312:	e02a      	b.n	800336a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003314:	78fb      	ldrb	r3, [r7, #3]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	212c      	movs	r1, #44	; 0x2c
 800331a:	fb01 f303 	mul.w	r3, r1, r3
 800331e:	4413      	add	r3, r2
 8003320:	3354      	adds	r3, #84	; 0x54
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d109      	bne.n	800333c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003328:	78fb      	ldrb	r3, [r7, #3]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	212c      	movs	r1, #44	; 0x2c
 800332e:	fb01 f303 	mul.w	r3, r1, r3
 8003332:	4413      	add	r3, r2
 8003334:	3342      	adds	r3, #66	; 0x42
 8003336:	2200      	movs	r2, #0
 8003338:	701a      	strb	r2, [r3, #0]
      break;
 800333a:	e016      	b.n	800336a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800333c:	78fb      	ldrb	r3, [r7, #3]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	212c      	movs	r1, #44	; 0x2c
 8003342:	fb01 f303 	mul.w	r3, r1, r3
 8003346:	4413      	add	r3, r2
 8003348:	3342      	adds	r3, #66	; 0x42
 800334a:	2202      	movs	r2, #2
 800334c:	701a      	strb	r2, [r3, #0]
      break;
 800334e:	e00c      	b.n	800336a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	212c      	movs	r1, #44	; 0x2c
 8003356:	fb01 f303 	mul.w	r3, r1, r3
 800335a:	4413      	add	r3, r2
 800335c:	3342      	adds	r3, #66	; 0x42
 800335e:	2200      	movs	r2, #0
 8003360:	701a      	strb	r2, [r3, #0]
      break;
 8003362:	e002      	b.n	800336a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003364:	bf00      	nop
 8003366:	e000      	b.n	800336a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003368:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800336a:	78fb      	ldrb	r3, [r7, #3]
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	212c      	movs	r1, #44	; 0x2c
 8003370:	fb01 f303 	mul.w	r3, r1, r3
 8003374:	4413      	add	r3, r2
 8003376:	3344      	adds	r3, #68	; 0x44
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800337c:	78fb      	ldrb	r3, [r7, #3]
 800337e:	8b3a      	ldrh	r2, [r7, #24]
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	202c      	movs	r0, #44	; 0x2c
 8003384:	fb00 f303 	mul.w	r3, r0, r3
 8003388:	440b      	add	r3, r1
 800338a:	334c      	adds	r3, #76	; 0x4c
 800338c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800338e:	78fb      	ldrb	r3, [r7, #3]
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	212c      	movs	r1, #44	; 0x2c
 8003394:	fb01 f303 	mul.w	r3, r1, r3
 8003398:	4413      	add	r3, r2
 800339a:	3360      	adds	r3, #96	; 0x60
 800339c:	2200      	movs	r2, #0
 800339e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80033a0:	78fb      	ldrb	r3, [r7, #3]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	212c      	movs	r1, #44	; 0x2c
 80033a6:	fb01 f303 	mul.w	r3, r1, r3
 80033aa:	4413      	add	r3, r2
 80033ac:	3350      	adds	r3, #80	; 0x50
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80033b2:	78fb      	ldrb	r3, [r7, #3]
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	212c      	movs	r1, #44	; 0x2c
 80033b8:	fb01 f303 	mul.w	r3, r1, r3
 80033bc:	4413      	add	r3, r2
 80033be:	3339      	adds	r3, #57	; 0x39
 80033c0:	78fa      	ldrb	r2, [r7, #3]
 80033c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80033c4:	78fb      	ldrb	r3, [r7, #3]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	212c      	movs	r1, #44	; 0x2c
 80033ca:	fb01 f303 	mul.w	r3, r1, r3
 80033ce:	4413      	add	r3, r2
 80033d0:	3361      	adds	r3, #97	; 0x61
 80033d2:	2200      	movs	r2, #0
 80033d4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6818      	ldr	r0, [r3, #0]
 80033da:	78fb      	ldrb	r3, [r7, #3]
 80033dc:	222c      	movs	r2, #44	; 0x2c
 80033de:	fb02 f303 	mul.w	r3, r2, r3
 80033e2:	3338      	adds	r3, #56	; 0x38
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	18d1      	adds	r1, r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	461a      	mov	r2, r3
 80033f0:	f004 ff30 	bl	8008254 <USB_HC_StartXfer>
 80033f4:	4603      	mov	r3, r0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop

08003400 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f004 fc31 	bl	8007c7e <USB_GetMode>
 800341c:	4603      	mov	r3, r0
 800341e:	2b01      	cmp	r3, #1
 8003420:	f040 80f6 	bne.w	8003610 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f004 fc15 	bl	8007c58 <USB_ReadInterrupts>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 80ec 	beq.w	800360e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f004 fc0c 	bl	8007c58 <USB_ReadInterrupts>
 8003440:	4603      	mov	r3, r0
 8003442:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003446:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800344a:	d104      	bne.n	8003456 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003454:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f004 fbfc 	bl	8007c58 <USB_ReadInterrupts>
 8003460:	4603      	mov	r3, r0
 8003462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003466:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800346a:	d104      	bne.n	8003476 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003474:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f004 fbec 	bl	8007c58 <USB_ReadInterrupts>
 8003480:	4603      	mov	r3, r0
 8003482:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003486:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800348a:	d104      	bne.n	8003496 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003494:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f004 fbdc 	bl	8007c58 <USB_ReadInterrupts>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d103      	bne.n	80034b2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2202      	movs	r2, #2
 80034b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f004 fbce 	bl	8007c58 <USB_ReadInterrupts>
 80034bc:	4603      	mov	r3, r0
 80034be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034c6:	d11c      	bne.n	8003502 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80034d0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10f      	bne.n	8003502 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80034e2:	2110      	movs	r1, #16
 80034e4:	6938      	ldr	r0, [r7, #16]
 80034e6:	f004 fabd 	bl	8007a64 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80034ea:	6938      	ldr	r0, [r7, #16]
 80034ec:	f004 faee 	bl	8007acc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2101      	movs	r1, #1
 80034f6:	4618      	mov	r0, r3
 80034f8:	f004 fcc4 	bl	8007e84 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f009 f8e7 	bl	800c6d0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f004 fba6 	bl	8007c58 <USB_ReadInterrupts>
 800350c:	4603      	mov	r3, r0
 800350e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003512:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003516:	d102      	bne.n	800351e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f001 f89e 	bl	800465a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f004 fb98 	bl	8007c58 <USB_ReadInterrupts>
 8003528:	4603      	mov	r3, r0
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b08      	cmp	r3, #8
 8003530:	d106      	bne.n	8003540 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f009 f8b0 	bl	800c698 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2208      	movs	r2, #8
 800353e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f004 fb87 	bl	8007c58 <USB_ReadInterrupts>
 800354a:	4603      	mov	r3, r0
 800354c:	f003 0310 	and.w	r3, r3, #16
 8003550:	2b10      	cmp	r3, #16
 8003552:	d101      	bne.n	8003558 <HAL_HCD_IRQHandler+0x158>
 8003554:	2301      	movs	r3, #1
 8003556:	e000      	b.n	800355a <HAL_HCD_IRQHandler+0x15a>
 8003558:	2300      	movs	r3, #0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d012      	beq.n	8003584 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	699a      	ldr	r2, [r3, #24]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0210 	bic.w	r2, r2, #16
 800356c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 ffa1 	bl	80044b6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699a      	ldr	r2, [r3, #24]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0210 	orr.w	r2, r2, #16
 8003582:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4618      	mov	r0, r3
 800358a:	f004 fb65 	bl	8007c58 <USB_ReadInterrupts>
 800358e:	4603      	mov	r3, r0
 8003590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003594:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003598:	d13a      	bne.n	8003610 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f004 ff9a 	bl	80084d8 <USB_HC_ReadInterrupt>
 80035a4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]
 80035aa:	e025      	b.n	80035f8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	fa22 f303 	lsr.w	r3, r2, r3
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d018      	beq.n	80035f2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035d6:	d106      	bne.n	80035e6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	4619      	mov	r1, r3
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f8ab 	bl	800373a <HCD_HC_IN_IRQHandler>
 80035e4:	e005      	b.n	80035f2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	4619      	mov	r1, r3
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 fbf9 	bl	8003de4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	3301      	adds	r3, #1
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d3d4      	bcc.n	80035ac <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800360a:	615a      	str	r2, [r3, #20]
 800360c:	e000      	b.n	8003610 <HAL_HCD_IRQHandler+0x210>
      return;
 800360e:	bf00      	nop
    }
  }
}
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b082      	sub	sp, #8
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_HCD_Start+0x16>
 8003628:	2302      	movs	r3, #2
 800362a:	e013      	b.n	8003654 <HAL_HCD_Start+0x3e>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2101      	movs	r1, #1
 800363a:	4618      	mov	r0, r3
 800363c:	f004 fc86 	bl	8007f4c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4618      	mov	r0, r3
 8003646:	f004 f99e 	bl	8007986 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800366a:	2b01      	cmp	r3, #1
 800366c:	d101      	bne.n	8003672 <HAL_HCD_Stop+0x16>
 800366e:	2302      	movs	r3, #2
 8003670:	e00d      	b.n	800368e <HAL_HCD_Stop+0x32>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f005 f874 	bl	800876c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b082      	sub	sp, #8
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f004 fc28 	bl	8007ef8 <USB_ResetPort>
 80036a8:	4603      	mov	r3, r0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	460b      	mov	r3, r1
 80036bc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80036be:	78fb      	ldrb	r3, [r7, #3]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	212c      	movs	r1, #44	; 0x2c
 80036c4:	fb01 f303 	mul.w	r3, r1, r3
 80036c8:	4413      	add	r3, r2
 80036ca:	3360      	adds	r3, #96	; 0x60
 80036cc:	781b      	ldrb	r3, [r3, #0]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
 80036e2:	460b      	mov	r3, r1
 80036e4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80036e6:	78fb      	ldrb	r3, [r7, #3]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	212c      	movs	r1, #44	; 0x2c
 80036ec:	fb01 f303 	mul.w	r3, r1, r3
 80036f0:	4413      	add	r3, r2
 80036f2:	3350      	adds	r3, #80	; 0x50
 80036f4:	681b      	ldr	r3, [r3, #0]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b082      	sub	sp, #8
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f004 fc6c 	bl	8007fec <USB_GetCurrentFrame>
 8003714:	4603      	mov	r3, r0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b082      	sub	sp, #8
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f004 fc47 	bl	8007fbe <USB_GetHostSpeed>
 8003730:	4603      	mov	r3, r0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b086      	sub	sp, #24
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	460b      	mov	r3, r1
 8003744:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003750:	78fb      	ldrb	r3, [r7, #3]
 8003752:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	015a      	lsls	r2, r3, #5
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	4413      	add	r3, r2
 800375c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	2b04      	cmp	r3, #4
 8003768:	d11a      	bne.n	80037a0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	015a      	lsls	r2, r3, #5
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	4413      	add	r3, r2
 8003772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003776:	461a      	mov	r2, r3
 8003778:	2304      	movs	r3, #4
 800377a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	212c      	movs	r1, #44	; 0x2c
 8003782:	fb01 f303 	mul.w	r3, r1, r3
 8003786:	4413      	add	r3, r2
 8003788:	3361      	adds	r3, #97	; 0x61
 800378a:	2206      	movs	r2, #6
 800378c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	4611      	mov	r1, r2
 8003798:	4618      	mov	r0, r3
 800379a:	f004 feae 	bl	80084fa <USB_HC_Halt>
 800379e:	e0af      	b.n	8003900 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037b6:	d11b      	bne.n	80037f0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c4:	461a      	mov	r2, r3
 80037c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	212c      	movs	r1, #44	; 0x2c
 80037d2:	fb01 f303 	mul.w	r3, r1, r3
 80037d6:	4413      	add	r3, r2
 80037d8:	3361      	adds	r3, #97	; 0x61
 80037da:	2207      	movs	r2, #7
 80037dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	b2d2      	uxtb	r2, r2
 80037e6:	4611      	mov	r1, r2
 80037e8:	4618      	mov	r0, r3
 80037ea:	f004 fe86 	bl	80084fa <USB_HC_Halt>
 80037ee:	e087      	b.n	8003900 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 0320 	and.w	r3, r3, #32
 8003802:	2b20      	cmp	r3, #32
 8003804:	d109      	bne.n	800381a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	015a      	lsls	r2, r3, #5
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	4413      	add	r3, r2
 800380e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003812:	461a      	mov	r2, r3
 8003814:	2320      	movs	r3, #32
 8003816:	6093      	str	r3, [r2, #8]
 8003818:	e072      	b.n	8003900 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	015a      	lsls	r2, r3, #5
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	4413      	add	r3, r2
 8003822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f003 0308 	and.w	r3, r3, #8
 800382c:	2b08      	cmp	r3, #8
 800382e:	d11a      	bne.n	8003866 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	4413      	add	r3, r2
 8003838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383c:	461a      	mov	r2, r3
 800383e:	2308      	movs	r3, #8
 8003840:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	212c      	movs	r1, #44	; 0x2c
 8003848:	fb01 f303 	mul.w	r3, r1, r3
 800384c:	4413      	add	r3, r2
 800384e:	3361      	adds	r3, #97	; 0x61
 8003850:	2205      	movs	r2, #5
 8003852:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	4611      	mov	r1, r2
 800385e:	4618      	mov	r0, r3
 8003860:	f004 fe4b 	bl	80084fa <USB_HC_Halt>
 8003864:	e04c      	b.n	8003900 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4413      	add	r3, r2
 800386e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800387c:	d11b      	bne.n	80038b6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	015a      	lsls	r2, r3, #5
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	4413      	add	r3, r2
 8003886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388a:	461a      	mov	r2, r3
 800388c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003890:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	212c      	movs	r1, #44	; 0x2c
 8003898:	fb01 f303 	mul.w	r3, r1, r3
 800389c:	4413      	add	r3, r2
 800389e:	3361      	adds	r3, #97	; 0x61
 80038a0:	2208      	movs	r2, #8
 80038a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	4611      	mov	r1, r2
 80038ae:	4618      	mov	r0, r3
 80038b0:	f004 fe23 	bl	80084fa <USB_HC_Halt>
 80038b4:	e024      	b.n	8003900 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c8:	2b80      	cmp	r3, #128	; 0x80
 80038ca:	d119      	bne.n	8003900 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	015a      	lsls	r2, r3, #5
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d8:	461a      	mov	r2, r3
 80038da:	2380      	movs	r3, #128	; 0x80
 80038dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	212c      	movs	r1, #44	; 0x2c
 80038e4:	fb01 f303 	mul.w	r3, r1, r3
 80038e8:	4413      	add	r3, r2
 80038ea:	3361      	adds	r3, #97	; 0x61
 80038ec:	2206      	movs	r2, #6
 80038ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	4611      	mov	r1, r2
 80038fa:	4618      	mov	r0, r3
 80038fc:	f004 fdfd 	bl	80084fa <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	4413      	add	r3, r2
 8003908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003916:	d112      	bne.n	800393e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	4611      	mov	r1, r2
 8003922:	4618      	mov	r0, r3
 8003924:	f004 fde9 	bl	80084fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	015a      	lsls	r2, r3, #5
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	4413      	add	r3, r2
 8003930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003934:	461a      	mov	r2, r3
 8003936:	f44f 7300 	mov.w	r3, #512	; 0x200
 800393a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800393c:	e24e      	b.n	8003ddc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	015a      	lsls	r2, r3, #5
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	4413      	add	r3, r2
 8003946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b01      	cmp	r3, #1
 8003952:	f040 80df 	bne.w	8003b14 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d019      	beq.n	8003992 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	212c      	movs	r1, #44	; 0x2c
 8003964:	fb01 f303 	mul.w	r3, r1, r3
 8003968:	4413      	add	r3, r2
 800396a:	3348      	adds	r3, #72	; 0x48
 800396c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	0159      	lsls	r1, r3, #5
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	440b      	add	r3, r1
 8003976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003980:	1ad2      	subs	r2, r2, r3
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	202c      	movs	r0, #44	; 0x2c
 8003988:	fb00 f303 	mul.w	r3, r0, r3
 800398c:	440b      	add	r3, r1
 800398e:	3350      	adds	r3, #80	; 0x50
 8003990:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	212c      	movs	r1, #44	; 0x2c
 8003998:	fb01 f303 	mul.w	r3, r1, r3
 800399c:	4413      	add	r3, r2
 800399e:	3361      	adds	r3, #97	; 0x61
 80039a0:	2201      	movs	r2, #1
 80039a2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	212c      	movs	r1, #44	; 0x2c
 80039aa:	fb01 f303 	mul.w	r3, r1, r3
 80039ae:	4413      	add	r3, r2
 80039b0:	335c      	adds	r3, #92	; 0x5c
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c2:	461a      	mov	r2, r3
 80039c4:	2301      	movs	r3, #1
 80039c6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	212c      	movs	r1, #44	; 0x2c
 80039ce:	fb01 f303 	mul.w	r3, r1, r3
 80039d2:	4413      	add	r3, r2
 80039d4:	333f      	adds	r3, #63	; 0x3f
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d009      	beq.n	80039f0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	212c      	movs	r1, #44	; 0x2c
 80039e2:	fb01 f303 	mul.w	r3, r1, r3
 80039e6:	4413      	add	r3, r2
 80039e8:	333f      	adds	r3, #63	; 0x3f
 80039ea:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d111      	bne.n	8003a14 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	4611      	mov	r1, r2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f004 fd7d 	bl	80084fa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	015a      	lsls	r2, r3, #5
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	4413      	add	r3, r2
 8003a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	2310      	movs	r3, #16
 8003a10:	6093      	str	r3, [r2, #8]
 8003a12:	e03a      	b.n	8003a8a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	212c      	movs	r1, #44	; 0x2c
 8003a1a:	fb01 f303 	mul.w	r3, r1, r3
 8003a1e:	4413      	add	r3, r2
 8003a20:	333f      	adds	r3, #63	; 0x3f
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d009      	beq.n	8003a3c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	212c      	movs	r1, #44	; 0x2c
 8003a2e:	fb01 f303 	mul.w	r3, r1, r3
 8003a32:	4413      	add	r3, r2
 8003a34:	333f      	adds	r3, #63	; 0x3f
 8003a36:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d126      	bne.n	8003a8a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	0151      	lsls	r1, r2, #5
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	440a      	add	r2, r1
 8003a52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a5a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	212c      	movs	r1, #44	; 0x2c
 8003a62:	fb01 f303 	mul.w	r3, r1, r3
 8003a66:	4413      	add	r3, r2
 8003a68:	3360      	adds	r3, #96	; 0x60
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	b2d9      	uxtb	r1, r3
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	202c      	movs	r0, #44	; 0x2c
 8003a78:	fb00 f303 	mul.w	r3, r0, r3
 8003a7c:	4413      	add	r3, r2
 8003a7e:	3360      	adds	r3, #96	; 0x60
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	461a      	mov	r2, r3
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f008 fe31 	bl	800c6ec <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d12b      	bne.n	8003aea <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	212c      	movs	r1, #44	; 0x2c
 8003a98:	fb01 f303 	mul.w	r3, r1, r3
 8003a9c:	4413      	add	r3, r2
 8003a9e:	3348      	adds	r3, #72	; 0x48
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	202c      	movs	r0, #44	; 0x2c
 8003aa8:	fb00 f202 	mul.w	r2, r0, r2
 8003aac:	440a      	add	r2, r1
 8003aae:	3240      	adds	r2, #64	; 0x40
 8003ab0:	8812      	ldrh	r2, [r2, #0]
 8003ab2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 818e 	beq.w	8003ddc <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	212c      	movs	r1, #44	; 0x2c
 8003ac6:	fb01 f303 	mul.w	r3, r1, r3
 8003aca:	4413      	add	r3, r2
 8003acc:	3354      	adds	r3, #84	; 0x54
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	f083 0301 	eor.w	r3, r3, #1
 8003ad4:	b2d8      	uxtb	r0, r3
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	212c      	movs	r1, #44	; 0x2c
 8003adc:	fb01 f303 	mul.w	r3, r1, r3
 8003ae0:	4413      	add	r3, r2
 8003ae2:	3354      	adds	r3, #84	; 0x54
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	701a      	strb	r2, [r3, #0]
}
 8003ae8:	e178      	b.n	8003ddc <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	212c      	movs	r1, #44	; 0x2c
 8003af0:	fb01 f303 	mul.w	r3, r1, r3
 8003af4:	4413      	add	r3, r2
 8003af6:	3354      	adds	r3, #84	; 0x54
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	f083 0301 	eor.w	r3, r3, #1
 8003afe:	b2d8      	uxtb	r0, r3
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	212c      	movs	r1, #44	; 0x2c
 8003b06:	fb01 f303 	mul.w	r3, r1, r3
 8003b0a:	4413      	add	r3, r2
 8003b0c:	3354      	adds	r3, #84	; 0x54
 8003b0e:	4602      	mov	r2, r0
 8003b10:	701a      	strb	r2, [r3, #0]
}
 8003b12:	e163      	b.n	8003ddc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	015a      	lsls	r2, r3, #5
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	f040 80f6 	bne.w	8003d18 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	212c      	movs	r1, #44	; 0x2c
 8003b32:	fb01 f303 	mul.w	r3, r1, r3
 8003b36:	4413      	add	r3, r2
 8003b38:	3361      	adds	r3, #97	; 0x61
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d109      	bne.n	8003b54 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	212c      	movs	r1, #44	; 0x2c
 8003b46:	fb01 f303 	mul.w	r3, r1, r3
 8003b4a:	4413      	add	r3, r2
 8003b4c:	3360      	adds	r3, #96	; 0x60
 8003b4e:	2201      	movs	r2, #1
 8003b50:	701a      	strb	r2, [r3, #0]
 8003b52:	e0c9      	b.n	8003ce8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	212c      	movs	r1, #44	; 0x2c
 8003b5a:	fb01 f303 	mul.w	r3, r1, r3
 8003b5e:	4413      	add	r3, r2
 8003b60:	3361      	adds	r3, #97	; 0x61
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b05      	cmp	r3, #5
 8003b66:	d109      	bne.n	8003b7c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	212c      	movs	r1, #44	; 0x2c
 8003b6e:	fb01 f303 	mul.w	r3, r1, r3
 8003b72:	4413      	add	r3, r2
 8003b74:	3360      	adds	r3, #96	; 0x60
 8003b76:	2205      	movs	r2, #5
 8003b78:	701a      	strb	r2, [r3, #0]
 8003b7a:	e0b5      	b.n	8003ce8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	212c      	movs	r1, #44	; 0x2c
 8003b82:	fb01 f303 	mul.w	r3, r1, r3
 8003b86:	4413      	add	r3, r2
 8003b88:	3361      	adds	r3, #97	; 0x61
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	2b06      	cmp	r3, #6
 8003b8e:	d009      	beq.n	8003ba4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	212c      	movs	r1, #44	; 0x2c
 8003b96:	fb01 f303 	mul.w	r3, r1, r3
 8003b9a:	4413      	add	r3, r2
 8003b9c:	3361      	adds	r3, #97	; 0x61
 8003b9e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d150      	bne.n	8003c46 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	212c      	movs	r1, #44	; 0x2c
 8003baa:	fb01 f303 	mul.w	r3, r1, r3
 8003bae:	4413      	add	r3, r2
 8003bb0:	335c      	adds	r3, #92	; 0x5c
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	1c5a      	adds	r2, r3, #1
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	202c      	movs	r0, #44	; 0x2c
 8003bbc:	fb00 f303 	mul.w	r3, r0, r3
 8003bc0:	440b      	add	r3, r1
 8003bc2:	335c      	adds	r3, #92	; 0x5c
 8003bc4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	212c      	movs	r1, #44	; 0x2c
 8003bcc:	fb01 f303 	mul.w	r3, r1, r3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	335c      	adds	r3, #92	; 0x5c
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d912      	bls.n	8003c00 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	212c      	movs	r1, #44	; 0x2c
 8003be0:	fb01 f303 	mul.w	r3, r1, r3
 8003be4:	4413      	add	r3, r2
 8003be6:	335c      	adds	r3, #92	; 0x5c
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	212c      	movs	r1, #44	; 0x2c
 8003bf2:	fb01 f303 	mul.w	r3, r1, r3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3360      	adds	r3, #96	; 0x60
 8003bfa:	2204      	movs	r2, #4
 8003bfc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003bfe:	e073      	b.n	8003ce8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	212c      	movs	r1, #44	; 0x2c
 8003c06:	fb01 f303 	mul.w	r3, r1, r3
 8003c0a:	4413      	add	r3, r2
 8003c0c:	3360      	adds	r3, #96	; 0x60
 8003c0e:	2202      	movs	r2, #2
 8003c10:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	015a      	lsls	r2, r3, #5
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	4413      	add	r3, r2
 8003c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c28:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c30:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	015a      	lsls	r2, r3, #5
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	4413      	add	r3, r2
 8003c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c3e:	461a      	mov	r2, r3
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003c44:	e050      	b.n	8003ce8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	212c      	movs	r1, #44	; 0x2c
 8003c4c:	fb01 f303 	mul.w	r3, r1, r3
 8003c50:	4413      	add	r3, r2
 8003c52:	3361      	adds	r3, #97	; 0x61
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	2b03      	cmp	r3, #3
 8003c58:	d122      	bne.n	8003ca0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	212c      	movs	r1, #44	; 0x2c
 8003c60:	fb01 f303 	mul.w	r3, r1, r3
 8003c64:	4413      	add	r3, r2
 8003c66:	3360      	adds	r3, #96	; 0x60
 8003c68:	2202      	movs	r2, #2
 8003c6a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	015a      	lsls	r2, r3, #5
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c82:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c8a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c98:	461a      	mov	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	e023      	b.n	8003ce8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	212c      	movs	r1, #44	; 0x2c
 8003ca6:	fb01 f303 	mul.w	r3, r1, r3
 8003caa:	4413      	add	r3, r2
 8003cac:	3361      	adds	r3, #97	; 0x61
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2b07      	cmp	r3, #7
 8003cb2:	d119      	bne.n	8003ce8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	212c      	movs	r1, #44	; 0x2c
 8003cba:	fb01 f303 	mul.w	r3, r1, r3
 8003cbe:	4413      	add	r3, r2
 8003cc0:	335c      	adds	r3, #92	; 0x5c
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	1c5a      	adds	r2, r3, #1
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	202c      	movs	r0, #44	; 0x2c
 8003ccc:	fb00 f303 	mul.w	r3, r0, r3
 8003cd0:	440b      	add	r3, r1
 8003cd2:	335c      	adds	r3, #92	; 0x5c
 8003cd4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	212c      	movs	r1, #44	; 0x2c
 8003cdc:	fb01 f303 	mul.w	r3, r1, r3
 8003ce0:	4413      	add	r3, r2
 8003ce2:	3360      	adds	r3, #96	; 0x60
 8003ce4:	2204      	movs	r2, #4
 8003ce6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	b2d9      	uxtb	r1, r3
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	202c      	movs	r0, #44	; 0x2c
 8003d04:	fb00 f303 	mul.w	r3, r0, r3
 8003d08:	4413      	add	r3, r2
 8003d0a:	3360      	adds	r3, #96	; 0x60
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f008 fceb 	bl	800c6ec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003d16:	e061      	b.n	8003ddc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 0310 	and.w	r3, r3, #16
 8003d2a:	2b10      	cmp	r3, #16
 8003d2c:	d156      	bne.n	8003ddc <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	212c      	movs	r1, #44	; 0x2c
 8003d34:	fb01 f303 	mul.w	r3, r1, r3
 8003d38:	4413      	add	r3, r2
 8003d3a:	333f      	adds	r3, #63	; 0x3f
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	d111      	bne.n	8003d66 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	212c      	movs	r1, #44	; 0x2c
 8003d48:	fb01 f303 	mul.w	r3, r1, r3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	335c      	adds	r3, #92	; 0x5c
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	b2d2      	uxtb	r2, r2
 8003d5c:	4611      	mov	r1, r2
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f004 fbcb 	bl	80084fa <USB_HC_Halt>
 8003d64:	e031      	b.n	8003dca <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	212c      	movs	r1, #44	; 0x2c
 8003d6c:	fb01 f303 	mul.w	r3, r1, r3
 8003d70:	4413      	add	r3, r2
 8003d72:	333f      	adds	r3, #63	; 0x3f
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d009      	beq.n	8003d8e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	212c      	movs	r1, #44	; 0x2c
 8003d80:	fb01 f303 	mul.w	r3, r1, r3
 8003d84:	4413      	add	r3, r2
 8003d86:	333f      	adds	r3, #63	; 0x3f
 8003d88:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d11d      	bne.n	8003dca <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	212c      	movs	r1, #44	; 0x2c
 8003d94:	fb01 f303 	mul.w	r3, r1, r3
 8003d98:	4413      	add	r3, r2
 8003d9a:	335c      	adds	r3, #92	; 0x5c
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d110      	bne.n	8003dca <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	212c      	movs	r1, #44	; 0x2c
 8003dae:	fb01 f303 	mul.w	r3, r1, r3
 8003db2:	4413      	add	r3, r2
 8003db4:	3361      	adds	r3, #97	; 0x61
 8003db6:	2203      	movs	r2, #3
 8003db8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	b2d2      	uxtb	r2, r2
 8003dc2:	4611      	mov	r1, r2
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f004 fb98 	bl	80084fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	015a      	lsls	r2, r3, #5
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	2310      	movs	r3, #16
 8003dda:	6093      	str	r3, [r2, #8]
}
 8003ddc:	bf00      	nop
 8003dde:	3718      	adds	r7, #24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b088      	sub	sp, #32
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	460b      	mov	r3, r1
 8003dee:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003dfa:	78fb      	ldrb	r3, [r7, #3]
 8003dfc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	015a      	lsls	r2, r3, #5
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	4413      	add	r3, r2
 8003e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	d11a      	bne.n	8003e4a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e20:	461a      	mov	r2, r3
 8003e22:	2304      	movs	r3, #4
 8003e24:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	212c      	movs	r1, #44	; 0x2c
 8003e2c:	fb01 f303 	mul.w	r3, r1, r3
 8003e30:	4413      	add	r3, r2
 8003e32:	3361      	adds	r3, #97	; 0x61
 8003e34:	2206      	movs	r2, #6
 8003e36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	4611      	mov	r1, r2
 8003e42:	4618      	mov	r0, r3
 8003e44:	f004 fb59 	bl	80084fa <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003e48:	e331      	b.n	80044ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	015a      	lsls	r2, r3, #5
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 0320 	and.w	r3, r3, #32
 8003e5c:	2b20      	cmp	r3, #32
 8003e5e:	d12e      	bne.n	8003ebe <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	2320      	movs	r3, #32
 8003e70:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	212c      	movs	r1, #44	; 0x2c
 8003e78:	fb01 f303 	mul.w	r3, r1, r3
 8003e7c:	4413      	add	r3, r2
 8003e7e:	333d      	adds	r3, #61	; 0x3d
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	f040 8313 	bne.w	80044ae <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	212c      	movs	r1, #44	; 0x2c
 8003e8e:	fb01 f303 	mul.w	r3, r1, r3
 8003e92:	4413      	add	r3, r2
 8003e94:	333d      	adds	r3, #61	; 0x3d
 8003e96:	2200      	movs	r2, #0
 8003e98:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	212c      	movs	r1, #44	; 0x2c
 8003ea0:	fb01 f303 	mul.w	r3, r1, r3
 8003ea4:	4413      	add	r3, r2
 8003ea6:	3360      	adds	r3, #96	; 0x60
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	4611      	mov	r1, r2
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f004 fb1f 	bl	80084fa <USB_HC_Halt>
}
 8003ebc:	e2f7      	b.n	80044ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ed4:	d112      	bne.n	8003efc <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	015a      	lsls	r2, r3, #5
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	4413      	add	r3, r2
 8003ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ee8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	b2d2      	uxtb	r2, r2
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f004 fb00 	bl	80084fa <USB_HC_Halt>
}
 8003efa:	e2d8      	b.n	80044ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d140      	bne.n	8003f94 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	212c      	movs	r1, #44	; 0x2c
 8003f18:	fb01 f303 	mul.w	r3, r1, r3
 8003f1c:	4413      	add	r3, r2
 8003f1e:	335c      	adds	r3, #92	; 0x5c
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f36:	2b40      	cmp	r3, #64	; 0x40
 8003f38:	d111      	bne.n	8003f5e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	212c      	movs	r1, #44	; 0x2c
 8003f40:	fb01 f303 	mul.w	r3, r1, r3
 8003f44:	4413      	add	r3, r2
 8003f46:	333d      	adds	r3, #61	; 0x3d
 8003f48:	2201      	movs	r2, #1
 8003f4a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f58:	461a      	mov	r2, r3
 8003f5a:	2340      	movs	r3, #64	; 0x40
 8003f5c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	015a      	lsls	r2, r3, #5
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	4413      	add	r3, r2
 8003f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	212c      	movs	r1, #44	; 0x2c
 8003f76:	fb01 f303 	mul.w	r3, r1, r3
 8003f7a:	4413      	add	r3, r2
 8003f7c:	3361      	adds	r3, #97	; 0x61
 8003f7e:	2201      	movs	r2, #1
 8003f80:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f004 fab4 	bl	80084fa <USB_HC_Halt>
}
 8003f92:	e28c      	b.n	80044ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa6:	2b40      	cmp	r3, #64	; 0x40
 8003fa8:	d12c      	bne.n	8004004 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	212c      	movs	r1, #44	; 0x2c
 8003fb0:	fb01 f303 	mul.w	r3, r1, r3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	3361      	adds	r3, #97	; 0x61
 8003fb8:	2204      	movs	r2, #4
 8003fba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	212c      	movs	r1, #44	; 0x2c
 8003fc2:	fb01 f303 	mul.w	r3, r1, r3
 8003fc6:	4413      	add	r3, r2
 8003fc8:	333d      	adds	r3, #61	; 0x3d
 8003fca:	2201      	movs	r2, #1
 8003fcc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	212c      	movs	r1, #44	; 0x2c
 8003fd4:	fb01 f303 	mul.w	r3, r1, r3
 8003fd8:	4413      	add	r3, r2
 8003fda:	335c      	adds	r3, #92	; 0x5c
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	b2d2      	uxtb	r2, r2
 8003fe8:	4611      	mov	r1, r2
 8003fea:	4618      	mov	r0, r3
 8003fec:	f004 fa85 	bl	80084fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	015a      	lsls	r2, r3, #5
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	2340      	movs	r3, #64	; 0x40
 8004000:	6093      	str	r3, [r2, #8]
}
 8004002:	e254      	b.n	80044ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	4413      	add	r3, r2
 800400c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b08      	cmp	r3, #8
 8004018:	d11a      	bne.n	8004050 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	015a      	lsls	r2, r3, #5
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	4413      	add	r3, r2
 8004022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004026:	461a      	mov	r2, r3
 8004028:	2308      	movs	r3, #8
 800402a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	212c      	movs	r1, #44	; 0x2c
 8004032:	fb01 f303 	mul.w	r3, r1, r3
 8004036:	4413      	add	r3, r2
 8004038:	3361      	adds	r3, #97	; 0x61
 800403a:	2205      	movs	r2, #5
 800403c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	4611      	mov	r1, r2
 8004048:	4618      	mov	r0, r3
 800404a:	f004 fa56 	bl	80084fa <USB_HC_Halt>
}
 800404e:	e22e      	b.n	80044ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	4413      	add	r3, r2
 8004058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 0310 	and.w	r3, r3, #16
 8004062:	2b10      	cmp	r3, #16
 8004064:	d140      	bne.n	80040e8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	212c      	movs	r1, #44	; 0x2c
 800406c:	fb01 f303 	mul.w	r3, r1, r3
 8004070:	4413      	add	r3, r2
 8004072:	335c      	adds	r3, #92	; 0x5c
 8004074:	2200      	movs	r2, #0
 8004076:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	212c      	movs	r1, #44	; 0x2c
 800407e:	fb01 f303 	mul.w	r3, r1, r3
 8004082:	4413      	add	r3, r2
 8004084:	3361      	adds	r3, #97	; 0x61
 8004086:	2203      	movs	r2, #3
 8004088:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	212c      	movs	r1, #44	; 0x2c
 8004090:	fb01 f303 	mul.w	r3, r1, r3
 8004094:	4413      	add	r3, r2
 8004096:	333d      	adds	r3, #61	; 0x3d
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d112      	bne.n	80040c4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	212c      	movs	r1, #44	; 0x2c
 80040a4:	fb01 f303 	mul.w	r3, r1, r3
 80040a8:	4413      	add	r3, r2
 80040aa:	333c      	adds	r3, #60	; 0x3c
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d108      	bne.n	80040c4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	212c      	movs	r1, #44	; 0x2c
 80040b8:	fb01 f303 	mul.w	r3, r1, r3
 80040bc:	4413      	add	r3, r2
 80040be:	333d      	adds	r3, #61	; 0x3d
 80040c0:	2201      	movs	r2, #1
 80040c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	b2d2      	uxtb	r2, r2
 80040cc:	4611      	mov	r1, r2
 80040ce:	4618      	mov	r0, r3
 80040d0:	f004 fa13 	bl	80084fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	015a      	lsls	r2, r3, #5
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	4413      	add	r3, r2
 80040dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e0:	461a      	mov	r2, r3
 80040e2:	2310      	movs	r3, #16
 80040e4:	6093      	str	r3, [r2, #8]
}
 80040e6:	e1e2      	b.n	80044ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fa:	2b80      	cmp	r3, #128	; 0x80
 80040fc:	d164      	bne.n	80041c8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d111      	bne.n	800412a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	212c      	movs	r1, #44	; 0x2c
 800410c:	fb01 f303 	mul.w	r3, r1, r3
 8004110:	4413      	add	r3, r2
 8004112:	3361      	adds	r3, #97	; 0x61
 8004114:	2206      	movs	r2, #6
 8004116:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	b2d2      	uxtb	r2, r2
 8004120:	4611      	mov	r1, r2
 8004122:	4618      	mov	r0, r3
 8004124:	f004 f9e9 	bl	80084fa <USB_HC_Halt>
 8004128:	e044      	b.n	80041b4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	212c      	movs	r1, #44	; 0x2c
 8004130:	fb01 f303 	mul.w	r3, r1, r3
 8004134:	4413      	add	r3, r2
 8004136:	335c      	adds	r3, #92	; 0x5c
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	1c5a      	adds	r2, r3, #1
 800413c:	6879      	ldr	r1, [r7, #4]
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	202c      	movs	r0, #44	; 0x2c
 8004142:	fb00 f303 	mul.w	r3, r0, r3
 8004146:	440b      	add	r3, r1
 8004148:	335c      	adds	r3, #92	; 0x5c
 800414a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	212c      	movs	r1, #44	; 0x2c
 8004152:	fb01 f303 	mul.w	r3, r1, r3
 8004156:	4413      	add	r3, r2
 8004158:	335c      	adds	r3, #92	; 0x5c
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b02      	cmp	r3, #2
 800415e:	d920      	bls.n	80041a2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	212c      	movs	r1, #44	; 0x2c
 8004166:	fb01 f303 	mul.w	r3, r1, r3
 800416a:	4413      	add	r3, r2
 800416c:	335c      	adds	r3, #92	; 0x5c
 800416e:	2200      	movs	r2, #0
 8004170:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	212c      	movs	r1, #44	; 0x2c
 8004178:	fb01 f303 	mul.w	r3, r1, r3
 800417c:	4413      	add	r3, r2
 800417e:	3360      	adds	r3, #96	; 0x60
 8004180:	2204      	movs	r2, #4
 8004182:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	b2d9      	uxtb	r1, r3
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	202c      	movs	r0, #44	; 0x2c
 800418e:	fb00 f303 	mul.w	r3, r0, r3
 8004192:	4413      	add	r3, r2
 8004194:	3360      	adds	r3, #96	; 0x60
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	461a      	mov	r2, r3
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f008 faa6 	bl	800c6ec <HAL_HCD_HC_NotifyURBChange_Callback>
 80041a0:	e008      	b.n	80041b4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	212c      	movs	r1, #44	; 0x2c
 80041a8:	fb01 f303 	mul.w	r3, r1, r3
 80041ac:	4413      	add	r3, r2
 80041ae:	3360      	adds	r3, #96	; 0x60
 80041b0:	2202      	movs	r2, #2
 80041b2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c0:	461a      	mov	r2, r3
 80041c2:	2380      	movs	r3, #128	; 0x80
 80041c4:	6093      	str	r3, [r2, #8]
}
 80041c6:	e172      	b.n	80044ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041de:	d11b      	bne.n	8004218 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	212c      	movs	r1, #44	; 0x2c
 80041e6:	fb01 f303 	mul.w	r3, r1, r3
 80041ea:	4413      	add	r3, r2
 80041ec:	3361      	adds	r3, #97	; 0x61
 80041ee:	2208      	movs	r2, #8
 80041f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	4611      	mov	r1, r2
 80041fc:	4618      	mov	r0, r3
 80041fe:	f004 f97c 	bl	80084fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	4413      	add	r3, r2
 800420a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420e:	461a      	mov	r2, r3
 8004210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004214:	6093      	str	r3, [r2, #8]
}
 8004216:	e14a      	b.n	80044ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	4413      	add	r3, r2
 8004220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b02      	cmp	r3, #2
 800422c:	f040 813f 	bne.w	80044ae <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	212c      	movs	r1, #44	; 0x2c
 8004236:	fb01 f303 	mul.w	r3, r1, r3
 800423a:	4413      	add	r3, r2
 800423c:	3361      	adds	r3, #97	; 0x61
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d17d      	bne.n	8004340 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	212c      	movs	r1, #44	; 0x2c
 800424a:	fb01 f303 	mul.w	r3, r1, r3
 800424e:	4413      	add	r3, r2
 8004250:	3360      	adds	r3, #96	; 0x60
 8004252:	2201      	movs	r2, #1
 8004254:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	212c      	movs	r1, #44	; 0x2c
 800425c:	fb01 f303 	mul.w	r3, r1, r3
 8004260:	4413      	add	r3, r2
 8004262:	333f      	adds	r3, #63	; 0x3f
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b02      	cmp	r3, #2
 8004268:	d00a      	beq.n	8004280 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	212c      	movs	r1, #44	; 0x2c
 8004270:	fb01 f303 	mul.w	r3, r1, r3
 8004274:	4413      	add	r3, r2
 8004276:	333f      	adds	r3, #63	; 0x3f
 8004278:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800427a:	2b03      	cmp	r3, #3
 800427c:	f040 8100 	bne.w	8004480 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d113      	bne.n	80042b0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	212c      	movs	r1, #44	; 0x2c
 800428e:	fb01 f303 	mul.w	r3, r1, r3
 8004292:	4413      	add	r3, r2
 8004294:	3355      	adds	r3, #85	; 0x55
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	f083 0301 	eor.w	r3, r3, #1
 800429c:	b2d8      	uxtb	r0, r3
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	212c      	movs	r1, #44	; 0x2c
 80042a4:	fb01 f303 	mul.w	r3, r1, r3
 80042a8:	4413      	add	r3, r2
 80042aa:	3355      	adds	r3, #85	; 0x55
 80042ac:	4602      	mov	r2, r0
 80042ae:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	f040 80e3 	bne.w	8004480 <HCD_HC_OUT_IRQHandler+0x69c>
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	212c      	movs	r1, #44	; 0x2c
 80042c0:	fb01 f303 	mul.w	r3, r1, r3
 80042c4:	4413      	add	r3, r2
 80042c6:	334c      	adds	r3, #76	; 0x4c
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 80d8 	beq.w	8004480 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	212c      	movs	r1, #44	; 0x2c
 80042d6:	fb01 f303 	mul.w	r3, r1, r3
 80042da:	4413      	add	r3, r2
 80042dc:	334c      	adds	r3, #76	; 0x4c
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	202c      	movs	r0, #44	; 0x2c
 80042e6:	fb00 f202 	mul.w	r2, r0, r2
 80042ea:	440a      	add	r2, r1
 80042ec:	3240      	adds	r2, #64	; 0x40
 80042ee:	8812      	ldrh	r2, [r2, #0]
 80042f0:	4413      	add	r3, r2
 80042f2:	3b01      	subs	r3, #1
 80042f4:	6879      	ldr	r1, [r7, #4]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	202c      	movs	r0, #44	; 0x2c
 80042fa:	fb00 f202 	mul.w	r2, r0, r2
 80042fe:	440a      	add	r2, r1
 8004300:	3240      	adds	r2, #64	; 0x40
 8004302:	8812      	ldrh	r2, [r2, #0]
 8004304:	fbb3 f3f2 	udiv	r3, r3, r2
 8004308:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 80b5 	beq.w	8004480 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	212c      	movs	r1, #44	; 0x2c
 800431c:	fb01 f303 	mul.w	r3, r1, r3
 8004320:	4413      	add	r3, r2
 8004322:	3355      	adds	r3, #85	; 0x55
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	f083 0301 	eor.w	r3, r3, #1
 800432a:	b2d8      	uxtb	r0, r3
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	212c      	movs	r1, #44	; 0x2c
 8004332:	fb01 f303 	mul.w	r3, r1, r3
 8004336:	4413      	add	r3, r2
 8004338:	3355      	adds	r3, #85	; 0x55
 800433a:	4602      	mov	r2, r0
 800433c:	701a      	strb	r2, [r3, #0]
 800433e:	e09f      	b.n	8004480 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	212c      	movs	r1, #44	; 0x2c
 8004346:	fb01 f303 	mul.w	r3, r1, r3
 800434a:	4413      	add	r3, r2
 800434c:	3361      	adds	r3, #97	; 0x61
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b03      	cmp	r3, #3
 8004352:	d109      	bne.n	8004368 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	212c      	movs	r1, #44	; 0x2c
 800435a:	fb01 f303 	mul.w	r3, r1, r3
 800435e:	4413      	add	r3, r2
 8004360:	3360      	adds	r3, #96	; 0x60
 8004362:	2202      	movs	r2, #2
 8004364:	701a      	strb	r2, [r3, #0]
 8004366:	e08b      	b.n	8004480 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	212c      	movs	r1, #44	; 0x2c
 800436e:	fb01 f303 	mul.w	r3, r1, r3
 8004372:	4413      	add	r3, r2
 8004374:	3361      	adds	r3, #97	; 0x61
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b04      	cmp	r3, #4
 800437a:	d109      	bne.n	8004390 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	212c      	movs	r1, #44	; 0x2c
 8004382:	fb01 f303 	mul.w	r3, r1, r3
 8004386:	4413      	add	r3, r2
 8004388:	3360      	adds	r3, #96	; 0x60
 800438a:	2202      	movs	r2, #2
 800438c:	701a      	strb	r2, [r3, #0]
 800438e:	e077      	b.n	8004480 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	212c      	movs	r1, #44	; 0x2c
 8004396:	fb01 f303 	mul.w	r3, r1, r3
 800439a:	4413      	add	r3, r2
 800439c:	3361      	adds	r3, #97	; 0x61
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	2b05      	cmp	r3, #5
 80043a2:	d109      	bne.n	80043b8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	212c      	movs	r1, #44	; 0x2c
 80043aa:	fb01 f303 	mul.w	r3, r1, r3
 80043ae:	4413      	add	r3, r2
 80043b0:	3360      	adds	r3, #96	; 0x60
 80043b2:	2205      	movs	r2, #5
 80043b4:	701a      	strb	r2, [r3, #0]
 80043b6:	e063      	b.n	8004480 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	212c      	movs	r1, #44	; 0x2c
 80043be:	fb01 f303 	mul.w	r3, r1, r3
 80043c2:	4413      	add	r3, r2
 80043c4:	3361      	adds	r3, #97	; 0x61
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	2b06      	cmp	r3, #6
 80043ca:	d009      	beq.n	80043e0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	212c      	movs	r1, #44	; 0x2c
 80043d2:	fb01 f303 	mul.w	r3, r1, r3
 80043d6:	4413      	add	r3, r2
 80043d8:	3361      	adds	r3, #97	; 0x61
 80043da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d14f      	bne.n	8004480 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	212c      	movs	r1, #44	; 0x2c
 80043e6:	fb01 f303 	mul.w	r3, r1, r3
 80043ea:	4413      	add	r3, r2
 80043ec:	335c      	adds	r3, #92	; 0x5c
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	202c      	movs	r0, #44	; 0x2c
 80043f8:	fb00 f303 	mul.w	r3, r0, r3
 80043fc:	440b      	add	r3, r1
 80043fe:	335c      	adds	r3, #92	; 0x5c
 8004400:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	212c      	movs	r1, #44	; 0x2c
 8004408:	fb01 f303 	mul.w	r3, r1, r3
 800440c:	4413      	add	r3, r2
 800440e:	335c      	adds	r3, #92	; 0x5c
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b02      	cmp	r3, #2
 8004414:	d912      	bls.n	800443c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	212c      	movs	r1, #44	; 0x2c
 800441c:	fb01 f303 	mul.w	r3, r1, r3
 8004420:	4413      	add	r3, r2
 8004422:	335c      	adds	r3, #92	; 0x5c
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	212c      	movs	r1, #44	; 0x2c
 800442e:	fb01 f303 	mul.w	r3, r1, r3
 8004432:	4413      	add	r3, r2
 8004434:	3360      	adds	r3, #96	; 0x60
 8004436:	2204      	movs	r2, #4
 8004438:	701a      	strb	r2, [r3, #0]
 800443a:	e021      	b.n	8004480 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	212c      	movs	r1, #44	; 0x2c
 8004442:	fb01 f303 	mul.w	r3, r1, r3
 8004446:	4413      	add	r3, r2
 8004448:	3360      	adds	r3, #96	; 0x60
 800444a:	2202      	movs	r2, #2
 800444c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	4413      	add	r3, r2
 8004456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004464:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800446c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	015a      	lsls	r2, r3, #5
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	4413      	add	r3, r2
 8004476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800447a:	461a      	mov	r2, r3
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	4413      	add	r3, r2
 8004488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800448c:	461a      	mov	r2, r3
 800448e:	2302      	movs	r3, #2
 8004490:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	b2d9      	uxtb	r1, r3
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	202c      	movs	r0, #44	; 0x2c
 800449c:	fb00 f303 	mul.w	r3, r0, r3
 80044a0:	4413      	add	r3, r2
 80044a2:	3360      	adds	r3, #96	; 0x60
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	461a      	mov	r2, r3
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f008 f91f 	bl	800c6ec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80044ae:	bf00      	nop
 80044b0:	3720      	adds	r7, #32
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b08a      	sub	sp, #40	; 0x28
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	0c5b      	lsrs	r3, r3, #17
 80044dc:	f003 030f 	and.w	r3, r3, #15
 80044e0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	091b      	lsrs	r3, r3, #4
 80044e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044ea:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d004      	beq.n	80044fc <HCD_RXQLVL_IRQHandler+0x46>
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2b05      	cmp	r3, #5
 80044f6:	f000 80a9 	beq.w	800464c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80044fa:	e0aa      	b.n	8004652 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 80a6 	beq.w	8004650 <HCD_RXQLVL_IRQHandler+0x19a>
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	212c      	movs	r1, #44	; 0x2c
 800450a:	fb01 f303 	mul.w	r3, r1, r3
 800450e:	4413      	add	r3, r2
 8004510:	3344      	adds	r3, #68	; 0x44
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 809b 	beq.w	8004650 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	212c      	movs	r1, #44	; 0x2c
 8004520:	fb01 f303 	mul.w	r3, r1, r3
 8004524:	4413      	add	r3, r2
 8004526:	3350      	adds	r3, #80	; 0x50
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	441a      	add	r2, r3
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	202c      	movs	r0, #44	; 0x2c
 8004534:	fb00 f303 	mul.w	r3, r0, r3
 8004538:	440b      	add	r3, r1
 800453a:	334c      	adds	r3, #76	; 0x4c
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	429a      	cmp	r2, r3
 8004540:	d87a      	bhi.n	8004638 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6818      	ldr	r0, [r3, #0]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	212c      	movs	r1, #44	; 0x2c
 800454c:	fb01 f303 	mul.w	r3, r1, r3
 8004550:	4413      	add	r3, r2
 8004552:	3344      	adds	r3, #68	; 0x44
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	b292      	uxth	r2, r2
 800455a:	4619      	mov	r1, r3
 800455c:	f003 fb24 	bl	8007ba8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	212c      	movs	r1, #44	; 0x2c
 8004566:	fb01 f303 	mul.w	r3, r1, r3
 800456a:	4413      	add	r3, r2
 800456c:	3344      	adds	r3, #68	; 0x44
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	441a      	add	r2, r3
 8004574:	6879      	ldr	r1, [r7, #4]
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	202c      	movs	r0, #44	; 0x2c
 800457a:	fb00 f303 	mul.w	r3, r0, r3
 800457e:	440b      	add	r3, r1
 8004580:	3344      	adds	r3, #68	; 0x44
 8004582:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	212c      	movs	r1, #44	; 0x2c
 800458a:	fb01 f303 	mul.w	r3, r1, r3
 800458e:	4413      	add	r3, r2
 8004590:	3350      	adds	r3, #80	; 0x50
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	441a      	add	r2, r3
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	202c      	movs	r0, #44	; 0x2c
 800459e:	fb00 f303 	mul.w	r3, r0, r3
 80045a2:	440b      	add	r3, r1
 80045a4:	3350      	adds	r3, #80	; 0x50
 80045a6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	6a3b      	ldr	r3, [r7, #32]
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	0cdb      	lsrs	r3, r3, #19
 80045b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045bc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	212c      	movs	r1, #44	; 0x2c
 80045c4:	fb01 f303 	mul.w	r3, r1, r3
 80045c8:	4413      	add	r3, r2
 80045ca:	3340      	adds	r3, #64	; 0x40
 80045cc:	881b      	ldrh	r3, [r3, #0]
 80045ce:	461a      	mov	r2, r3
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d13c      	bne.n	8004650 <HCD_RXQLVL_IRQHandler+0x19a>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d039      	beq.n	8004650 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	015a      	lsls	r2, r3, #5
 80045e0:	6a3b      	ldr	r3, [r7, #32]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045f2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045fa:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	4413      	add	r3, r2
 8004604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004608:	461a      	mov	r2, r3
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	212c      	movs	r1, #44	; 0x2c
 8004614:	fb01 f303 	mul.w	r3, r1, r3
 8004618:	4413      	add	r3, r2
 800461a:	3354      	adds	r3, #84	; 0x54
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	f083 0301 	eor.w	r3, r3, #1
 8004622:	b2d8      	uxtb	r0, r3
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	212c      	movs	r1, #44	; 0x2c
 800462a:	fb01 f303 	mul.w	r3, r1, r3
 800462e:	4413      	add	r3, r2
 8004630:	3354      	adds	r3, #84	; 0x54
 8004632:	4602      	mov	r2, r0
 8004634:	701a      	strb	r2, [r3, #0]
      break;
 8004636:	e00b      	b.n	8004650 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	212c      	movs	r1, #44	; 0x2c
 800463e:	fb01 f303 	mul.w	r3, r1, r3
 8004642:	4413      	add	r3, r2
 8004644:	3360      	adds	r3, #96	; 0x60
 8004646:	2204      	movs	r2, #4
 8004648:	701a      	strb	r2, [r3, #0]
      break;
 800464a:	e001      	b.n	8004650 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800464c:	bf00      	nop
 800464e:	e000      	b.n	8004652 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004650:	bf00      	nop
  }
}
 8004652:	bf00      	nop
 8004654:	3728      	adds	r7, #40	; 0x28
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b086      	sub	sp, #24
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004686:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b02      	cmp	r3, #2
 8004690:	d10b      	bne.n	80046aa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	2b01      	cmp	r3, #1
 800469a:	d102      	bne.n	80046a2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f008 f809 	bl	800c6b4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	f043 0302 	orr.w	r3, r3, #2
 80046a8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f003 0308 	and.w	r3, r3, #8
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d132      	bne.n	800471a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	f043 0308 	orr.w	r3, r3, #8
 80046ba:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f003 0304 	and.w	r3, r3, #4
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	d126      	bne.n	8004714 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d113      	bne.n	80046f6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80046d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046d8:	d106      	bne.n	80046e8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2102      	movs	r1, #2
 80046e0:	4618      	mov	r0, r3
 80046e2:	f003 fbcf 	bl	8007e84 <USB_InitFSLSPClkSel>
 80046e6:	e011      	b.n	800470c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2101      	movs	r1, #1
 80046ee:	4618      	mov	r0, r3
 80046f0:	f003 fbc8 	bl	8007e84 <USB_InitFSLSPClkSel>
 80046f4:	e00a      	b.n	800470c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d106      	bne.n	800470c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004704:	461a      	mov	r2, r3
 8004706:	f64e 2360 	movw	r3, #60000	; 0xea60
 800470a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f007 fffb 	bl	800c708 <HAL_HCD_PortEnabled_Callback>
 8004712:	e002      	b.n	800471a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f008 f805 	bl	800c724 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f003 0320 	and.w	r3, r3, #32
 8004720:	2b20      	cmp	r3, #32
 8004722:	d103      	bne.n	800472c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	f043 0320 	orr.w	r3, r3, #32
 800472a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004732:	461a      	mov	r2, r3
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	6013      	str	r3, [r2, #0]
}
 8004738:	bf00      	nop
 800473a:	3718      	adds	r7, #24
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e12b      	b.n	80049aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d106      	bne.n	800476c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7fd f8fe 	bl	8001968 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2224      	movs	r2, #36	; 0x24
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0201 	bic.w	r2, r2, #1
 8004782:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004792:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047a4:	f002 f9d0 	bl	8006b48 <HAL_RCC_GetPCLK1Freq>
 80047a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	4a81      	ldr	r2, [pc, #516]	; (80049b4 <HAL_I2C_Init+0x274>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d807      	bhi.n	80047c4 <HAL_I2C_Init+0x84>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4a80      	ldr	r2, [pc, #512]	; (80049b8 <HAL_I2C_Init+0x278>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	bf94      	ite	ls
 80047bc:	2301      	movls	r3, #1
 80047be:	2300      	movhi	r3, #0
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	e006      	b.n	80047d2 <HAL_I2C_Init+0x92>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4a7d      	ldr	r2, [pc, #500]	; (80049bc <HAL_I2C_Init+0x27c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	bf94      	ite	ls
 80047cc:	2301      	movls	r3, #1
 80047ce:	2300      	movhi	r3, #0
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e0e7      	b.n	80049aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	4a78      	ldr	r2, [pc, #480]	; (80049c0 <HAL_I2C_Init+0x280>)
 80047de:	fba2 2303 	umull	r2, r3, r2, r3
 80047e2:	0c9b      	lsrs	r3, r3, #18
 80047e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	4a6a      	ldr	r2, [pc, #424]	; (80049b4 <HAL_I2C_Init+0x274>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d802      	bhi.n	8004814 <HAL_I2C_Init+0xd4>
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	3301      	adds	r3, #1
 8004812:	e009      	b.n	8004828 <HAL_I2C_Init+0xe8>
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800481a:	fb02 f303 	mul.w	r3, r2, r3
 800481e:	4a69      	ldr	r2, [pc, #420]	; (80049c4 <HAL_I2C_Init+0x284>)
 8004820:	fba2 2303 	umull	r2, r3, r2, r3
 8004824:	099b      	lsrs	r3, r3, #6
 8004826:	3301      	adds	r3, #1
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	6812      	ldr	r2, [r2, #0]
 800482c:	430b      	orrs	r3, r1
 800482e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800483a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	495c      	ldr	r1, [pc, #368]	; (80049b4 <HAL_I2C_Init+0x274>)
 8004844:	428b      	cmp	r3, r1
 8004846:	d819      	bhi.n	800487c <HAL_I2C_Init+0x13c>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	1e59      	subs	r1, r3, #1
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	fbb1 f3f3 	udiv	r3, r1, r3
 8004856:	1c59      	adds	r1, r3, #1
 8004858:	f640 73fc 	movw	r3, #4092	; 0xffc
 800485c:	400b      	ands	r3, r1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00a      	beq.n	8004878 <HAL_I2C_Init+0x138>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	1e59      	subs	r1, r3, #1
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004870:	3301      	adds	r3, #1
 8004872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004876:	e051      	b.n	800491c <HAL_I2C_Init+0x1dc>
 8004878:	2304      	movs	r3, #4
 800487a:	e04f      	b.n	800491c <HAL_I2C_Init+0x1dc>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d111      	bne.n	80048a8 <HAL_I2C_Init+0x168>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	1e58      	subs	r0, r3, #1
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6859      	ldr	r1, [r3, #4]
 800488c:	460b      	mov	r3, r1
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	440b      	add	r3, r1
 8004892:	fbb0 f3f3 	udiv	r3, r0, r3
 8004896:	3301      	adds	r3, #1
 8004898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800489c:	2b00      	cmp	r3, #0
 800489e:	bf0c      	ite	eq
 80048a0:	2301      	moveq	r3, #1
 80048a2:	2300      	movne	r3, #0
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	e012      	b.n	80048ce <HAL_I2C_Init+0x18e>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	1e58      	subs	r0, r3, #1
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6859      	ldr	r1, [r3, #4]
 80048b0:	460b      	mov	r3, r1
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	440b      	add	r3, r1
 80048b6:	0099      	lsls	r1, r3, #2
 80048b8:	440b      	add	r3, r1
 80048ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80048be:	3301      	adds	r3, #1
 80048c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	bf0c      	ite	eq
 80048c8:	2301      	moveq	r3, #1
 80048ca:	2300      	movne	r3, #0
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <HAL_I2C_Init+0x196>
 80048d2:	2301      	movs	r3, #1
 80048d4:	e022      	b.n	800491c <HAL_I2C_Init+0x1dc>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10e      	bne.n	80048fc <HAL_I2C_Init+0x1bc>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	1e58      	subs	r0, r3, #1
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6859      	ldr	r1, [r3, #4]
 80048e6:	460b      	mov	r3, r1
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	440b      	add	r3, r1
 80048ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80048f0:	3301      	adds	r3, #1
 80048f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048fa:	e00f      	b.n	800491c <HAL_I2C_Init+0x1dc>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	1e58      	subs	r0, r3, #1
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6859      	ldr	r1, [r3, #4]
 8004904:	460b      	mov	r3, r1
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	440b      	add	r3, r1
 800490a:	0099      	lsls	r1, r3, #2
 800490c:	440b      	add	r3, r1
 800490e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004912:	3301      	adds	r3, #1
 8004914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004918:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800491c:	6879      	ldr	r1, [r7, #4]
 800491e:	6809      	ldr	r1, [r1, #0]
 8004920:	4313      	orrs	r3, r2
 8004922:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	69da      	ldr	r2, [r3, #28]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	430a      	orrs	r2, r1
 800493e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800494a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6911      	ldr	r1, [r2, #16]
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	68d2      	ldr	r2, [r2, #12]
 8004956:	4311      	orrs	r1, r2
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6812      	ldr	r2, [r2, #0]
 800495c:	430b      	orrs	r3, r1
 800495e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	695a      	ldr	r2, [r3, #20]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	431a      	orrs	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	430a      	orrs	r2, r1
 800497a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0201 	orr.w	r2, r2, #1
 800498a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2220      	movs	r2, #32
 8004996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	000186a0 	.word	0x000186a0
 80049b8:	001e847f 	.word	0x001e847f
 80049bc:	003d08ff 	.word	0x003d08ff
 80049c0:	431bde83 	.word	0x431bde83
 80049c4:	10624dd3 	.word	0x10624dd3

080049c8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e021      	b.n	8004a1e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2224      	movs	r2, #36	; 0x24
 80049de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 0201 	bic.w	r2, r2, #1
 80049f0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f7fd f800 	bl	80019f8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
	...

08004a28 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b088      	sub	sp, #32
 8004a2c:	af02      	add	r7, sp, #8
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	4608      	mov	r0, r1
 8004a32:	4611      	mov	r1, r2
 8004a34:	461a      	mov	r2, r3
 8004a36:	4603      	mov	r3, r0
 8004a38:	817b      	strh	r3, [r7, #10]
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	813b      	strh	r3, [r7, #8]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a42:	f7fd fab1 	bl	8001fa8 <HAL_GetTick>
 8004a46:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b20      	cmp	r3, #32
 8004a52:	f040 80d9 	bne.w	8004c08 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	2319      	movs	r3, #25
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	496d      	ldr	r1, [pc, #436]	; (8004c14 <HAL_I2C_Mem_Write+0x1ec>)
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 fc8d 	bl	8005380 <I2C_WaitOnFlagUntilTimeout>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	e0cc      	b.n	8004c0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d101      	bne.n	8004a7e <HAL_I2C_Mem_Write+0x56>
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	e0c5      	b.n	8004c0a <HAL_I2C_Mem_Write+0x1e2>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d007      	beq.n	8004aa4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0201 	orr.w	r2, r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ab2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2221      	movs	r2, #33	; 0x21
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2240      	movs	r2, #64	; 0x40
 8004ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6a3a      	ldr	r2, [r7, #32]
 8004ace:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4a4d      	ldr	r2, [pc, #308]	; (8004c18 <HAL_I2C_Mem_Write+0x1f0>)
 8004ae4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ae6:	88f8      	ldrh	r0, [r7, #6]
 8004ae8:	893a      	ldrh	r2, [r7, #8]
 8004aea:	8979      	ldrh	r1, [r7, #10]
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	9301      	str	r3, [sp, #4]
 8004af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	4603      	mov	r3, r0
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f000 fac4 	bl	8005084 <I2C_RequestMemoryWrite>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d052      	beq.n	8004ba8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e081      	b.n	8004c0a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f000 fd0e 	bl	800552c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00d      	beq.n	8004b32 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	d107      	bne.n	8004b2e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e06b      	b.n	8004c0a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	781a      	ldrb	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b04      	cmp	r3, #4
 8004b6e:	d11b      	bne.n	8004ba8 <HAL_I2C_Mem_Write+0x180>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d017      	beq.n	8004ba8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	781a      	ldrb	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	1c5a      	adds	r2, r3, #1
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b92:	3b01      	subs	r3, #1
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1aa      	bne.n	8004b06 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 fcfa 	bl	80055ae <I2C_WaitOnBTFFlagUntilTimeout>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00d      	beq.n	8004bdc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d107      	bne.n	8004bd8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bd6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e016      	b.n	8004c0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c04:	2300      	movs	r3, #0
 8004c06:	e000      	b.n	8004c0a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004c08:	2302      	movs	r3, #2
  }
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	00100002 	.word	0x00100002
 8004c18:	ffff0000 	.word	0xffff0000

08004c1c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b08c      	sub	sp, #48	; 0x30
 8004c20:	af02      	add	r7, sp, #8
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	4608      	mov	r0, r1
 8004c26:	4611      	mov	r1, r2
 8004c28:	461a      	mov	r2, r3
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	817b      	strh	r3, [r7, #10]
 8004c2e:	460b      	mov	r3, r1
 8004c30:	813b      	strh	r3, [r7, #8]
 8004c32:	4613      	mov	r3, r2
 8004c34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c36:	f7fd f9b7 	bl	8001fa8 <HAL_GetTick>
 8004c3a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b20      	cmp	r3, #32
 8004c46:	f040 8208 	bne.w	800505a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	2319      	movs	r3, #25
 8004c50:	2201      	movs	r2, #1
 8004c52:	497b      	ldr	r1, [pc, #492]	; (8004e40 <HAL_I2C_Mem_Read+0x224>)
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f000 fb93 	bl	8005380 <I2C_WaitOnFlagUntilTimeout>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d001      	beq.n	8004c64 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004c60:	2302      	movs	r3, #2
 8004c62:	e1fb      	b.n	800505c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d101      	bne.n	8004c72 <HAL_I2C_Mem_Read+0x56>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	e1f4      	b.n	800505c <HAL_I2C_Mem_Read+0x440>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d007      	beq.n	8004c98 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0201 	orr.w	r2, r2, #1
 8004c96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ca6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2222      	movs	r2, #34	; 0x22
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2240      	movs	r2, #64	; 0x40
 8004cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004cc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	4a5b      	ldr	r2, [pc, #364]	; (8004e44 <HAL_I2C_Mem_Read+0x228>)
 8004cd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cda:	88f8      	ldrh	r0, [r7, #6]
 8004cdc:	893a      	ldrh	r2, [r7, #8]
 8004cde:	8979      	ldrh	r1, [r7, #10]
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	9301      	str	r3, [sp, #4]
 8004ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	4603      	mov	r3, r0
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f000 fa60 	bl	80051b0 <I2C_RequestMemoryRead>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e1b0      	b.n	800505c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d113      	bne.n	8004d2a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d02:	2300      	movs	r3, #0
 8004d04:	623b      	str	r3, [r7, #32]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	623b      	str	r3, [r7, #32]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	623b      	str	r3, [r7, #32]
 8004d16:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	e184      	b.n	8005034 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d11b      	bne.n	8004d6a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d42:	2300      	movs	r3, #0
 8004d44:	61fb      	str	r3, [r7, #28]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	61fb      	str	r3, [r7, #28]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	61fb      	str	r3, [r7, #28]
 8004d56:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	e164      	b.n	8005034 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d11b      	bne.n	8004daa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d80:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d92:	2300      	movs	r3, #0
 8004d94:	61bb      	str	r3, [r7, #24]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	61bb      	str	r3, [r7, #24]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	61bb      	str	r3, [r7, #24]
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	e144      	b.n	8005034 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004daa:	2300      	movs	r3, #0
 8004dac:	617b      	str	r3, [r7, #20]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	617b      	str	r3, [r7, #20]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	617b      	str	r3, [r7, #20]
 8004dbe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004dc0:	e138      	b.n	8005034 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc6:	2b03      	cmp	r3, #3
 8004dc8:	f200 80f1 	bhi.w	8004fae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d123      	bne.n	8004e1c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f000 fc29 	bl	8005630 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e139      	b.n	800505c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	691a      	ldr	r2, [r3, #16]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	1c5a      	adds	r2, r3, #1
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3b01      	subs	r3, #1
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e1a:	e10b      	b.n	8005034 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d14e      	bne.n	8004ec2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	4906      	ldr	r1, [pc, #24]	; (8004e48 <HAL_I2C_Mem_Read+0x22c>)
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f000 faa6 	bl	8005380 <I2C_WaitOnFlagUntilTimeout>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d008      	beq.n	8004e4c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e10e      	b.n	800505c <HAL_I2C_Mem_Read+0x440>
 8004e3e:	bf00      	nop
 8004e40:	00100002 	.word	0x00100002
 8004e44:	ffff0000 	.word	0xffff0000
 8004e48:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	691a      	ldr	r2, [r3, #16]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	b2d2      	uxtb	r2, r2
 8004e68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6e:	1c5a      	adds	r2, r3, #1
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	3b01      	subs	r3, #1
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	691a      	ldr	r2, [r3, #16]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e98:	b2d2      	uxtb	r2, r2
 8004e9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	1c5a      	adds	r2, r3, #1
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ec0:	e0b8      	b.n	8005034 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec8:	2200      	movs	r2, #0
 8004eca:	4966      	ldr	r1, [pc, #408]	; (8005064 <HAL_I2C_Mem_Read+0x448>)
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 fa57 	bl	8005380 <I2C_WaitOnFlagUntilTimeout>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e0bf      	b.n	800505c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	691a      	ldr	r2, [r3, #16]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	b2d2      	uxtb	r2, r2
 8004ef8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efe:	1c5a      	adds	r2, r3, #1
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	3b01      	subs	r3, #1
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f24:	2200      	movs	r2, #0
 8004f26:	494f      	ldr	r1, [pc, #316]	; (8005064 <HAL_I2C_Mem_Read+0x448>)
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f000 fa29 	bl	8005380 <I2C_WaitOnFlagUntilTimeout>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e091      	b.n	800505c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	691a      	ldr	r2, [r3, #16]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	b2d2      	uxtb	r2, r2
 8004f54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	1c5a      	adds	r2, r3, #1
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	691a      	ldr	r2, [r3, #16]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	b2d2      	uxtb	r2, r2
 8004f86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	1c5a      	adds	r2, r3, #1
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f96:	3b01      	subs	r3, #1
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fac:	e042      	b.n	8005034 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 fb3c 	bl	8005630 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e04c      	b.n	800505c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	691a      	ldr	r2, [r3, #16]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	b2d2      	uxtb	r2, r2
 8004fce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	1c5a      	adds	r2, r3, #1
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	3b01      	subs	r3, #1
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	f003 0304 	and.w	r3, r3, #4
 8004ffe:	2b04      	cmp	r3, #4
 8005000:	d118      	bne.n	8005034 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	691a      	ldr	r2, [r3, #16]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	b2d2      	uxtb	r2, r2
 800500e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	1c5a      	adds	r2, r3, #1
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800501e:	3b01      	subs	r3, #1
 8005020:	b29a      	uxth	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800502a:	b29b      	uxth	r3, r3
 800502c:	3b01      	subs	r3, #1
 800502e:	b29a      	uxth	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005038:	2b00      	cmp	r3, #0
 800503a:	f47f aec2 	bne.w	8004dc2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2220      	movs	r2, #32
 8005042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005056:	2300      	movs	r3, #0
 8005058:	e000      	b.n	800505c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800505a:	2302      	movs	r3, #2
  }
}
 800505c:	4618      	mov	r0, r3
 800505e:	3728      	adds	r7, #40	; 0x28
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	00010004 	.word	0x00010004

08005068 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005076:	b2db      	uxtb	r3, r3
}
 8005078:	4618      	mov	r0, r3
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b088      	sub	sp, #32
 8005088:	af02      	add	r7, sp, #8
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	4608      	mov	r0, r1
 800508e:	4611      	mov	r1, r2
 8005090:	461a      	mov	r2, r3
 8005092:	4603      	mov	r3, r0
 8005094:	817b      	strh	r3, [r7, #10]
 8005096:	460b      	mov	r3, r1
 8005098:	813b      	strh	r3, [r7, #8]
 800509a:	4613      	mov	r3, r2
 800509c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	6a3b      	ldr	r3, [r7, #32]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f000 f960 	bl	8005380 <I2C_WaitOnFlagUntilTimeout>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00d      	beq.n	80050e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d4:	d103      	bne.n	80050de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e05f      	b.n	80051a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050e2:	897b      	ldrh	r3, [r7, #10]
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	461a      	mov	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	6a3a      	ldr	r2, [r7, #32]
 80050f6:	492d      	ldr	r1, [pc, #180]	; (80051ac <I2C_RequestMemoryWrite+0x128>)
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f000 f998 	bl	800542e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e04c      	b.n	80051a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005108:	2300      	movs	r3, #0
 800510a:	617b      	str	r3, [r7, #20]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	617b      	str	r3, [r7, #20]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	617b      	str	r3, [r7, #20]
 800511c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800511e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005120:	6a39      	ldr	r1, [r7, #32]
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f000 fa02 	bl	800552c <I2C_WaitOnTXEFlagUntilTimeout>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00d      	beq.n	800514a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	2b04      	cmp	r3, #4
 8005134:	d107      	bne.n	8005146 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005144:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e02b      	b.n	80051a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800514a:	88fb      	ldrh	r3, [r7, #6]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d105      	bne.n	800515c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005150:	893b      	ldrh	r3, [r7, #8]
 8005152:	b2da      	uxtb	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	611a      	str	r2, [r3, #16]
 800515a:	e021      	b.n	80051a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800515c:	893b      	ldrh	r3, [r7, #8]
 800515e:	0a1b      	lsrs	r3, r3, #8
 8005160:	b29b      	uxth	r3, r3
 8005162:	b2da      	uxtb	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800516a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800516c:	6a39      	ldr	r1, [r7, #32]
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f000 f9dc 	bl	800552c <I2C_WaitOnTXEFlagUntilTimeout>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00d      	beq.n	8005196 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	2b04      	cmp	r3, #4
 8005180:	d107      	bne.n	8005192 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005190:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e005      	b.n	80051a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005196:	893b      	ldrh	r3, [r7, #8]
 8005198:	b2da      	uxtb	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3718      	adds	r7, #24
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	00010002 	.word	0x00010002

080051b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b088      	sub	sp, #32
 80051b4:	af02      	add	r7, sp, #8
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	4608      	mov	r0, r1
 80051ba:	4611      	mov	r1, r2
 80051bc:	461a      	mov	r2, r3
 80051be:	4603      	mov	r3, r0
 80051c0:	817b      	strh	r3, [r7, #10]
 80051c2:	460b      	mov	r3, r1
 80051c4:	813b      	strh	r3, [r7, #8]
 80051c6:	4613      	mov	r3, r2
 80051c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 f8c2 	bl	8005380 <I2C_WaitOnFlagUntilTimeout>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00d      	beq.n	800521e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005210:	d103      	bne.n	800521a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005218:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e0aa      	b.n	8005374 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800521e:	897b      	ldrh	r3, [r7, #10]
 8005220:	b2db      	uxtb	r3, r3
 8005222:	461a      	mov	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800522c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005230:	6a3a      	ldr	r2, [r7, #32]
 8005232:	4952      	ldr	r1, [pc, #328]	; (800537c <I2C_RequestMemoryRead+0x1cc>)
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f000 f8fa 	bl	800542e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d001      	beq.n	8005244 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e097      	b.n	8005374 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005244:	2300      	movs	r3, #0
 8005246:	617b      	str	r3, [r7, #20]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800525a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800525c:	6a39      	ldr	r1, [r7, #32]
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 f964 	bl	800552c <I2C_WaitOnTXEFlagUntilTimeout>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00d      	beq.n	8005286 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	2b04      	cmp	r3, #4
 8005270:	d107      	bne.n	8005282 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005280:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e076      	b.n	8005374 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005286:	88fb      	ldrh	r3, [r7, #6]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d105      	bne.n	8005298 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800528c:	893b      	ldrh	r3, [r7, #8]
 800528e:	b2da      	uxtb	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	611a      	str	r2, [r3, #16]
 8005296:	e021      	b.n	80052dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005298:	893b      	ldrh	r3, [r7, #8]
 800529a:	0a1b      	lsrs	r3, r3, #8
 800529c:	b29b      	uxth	r3, r3
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a8:	6a39      	ldr	r1, [r7, #32]
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 f93e 	bl	800552c <I2C_WaitOnTXEFlagUntilTimeout>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00d      	beq.n	80052d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ba:	2b04      	cmp	r3, #4
 80052bc:	d107      	bne.n	80052ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e050      	b.n	8005374 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052d2:	893b      	ldrh	r3, [r7, #8]
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052de:	6a39      	ldr	r1, [r7, #32]
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 f923 	bl	800552c <I2C_WaitOnTXEFlagUntilTimeout>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00d      	beq.n	8005308 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f0:	2b04      	cmp	r3, #4
 80052f2:	d107      	bne.n	8005304 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005302:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e035      	b.n	8005374 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005316:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	6a3b      	ldr	r3, [r7, #32]
 800531e:	2200      	movs	r2, #0
 8005320:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f000 f82b 	bl	8005380 <I2C_WaitOnFlagUntilTimeout>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00d      	beq.n	800534c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800533e:	d103      	bne.n	8005348 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005346:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e013      	b.n	8005374 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800534c:	897b      	ldrh	r3, [r7, #10]
 800534e:	b2db      	uxtb	r3, r3
 8005350:	f043 0301 	orr.w	r3, r3, #1
 8005354:	b2da      	uxtb	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	6a3a      	ldr	r2, [r7, #32]
 8005360:	4906      	ldr	r1, [pc, #24]	; (800537c <I2C_RequestMemoryRead+0x1cc>)
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 f863 	bl	800542e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e000      	b.n	8005374 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3718      	adds	r7, #24
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	00010002 	.word	0x00010002

08005380 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	603b      	str	r3, [r7, #0]
 800538c:	4613      	mov	r3, r2
 800538e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005390:	e025      	b.n	80053de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005398:	d021      	beq.n	80053de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800539a:	f7fc fe05 	bl	8001fa8 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d302      	bcc.n	80053b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d116      	bne.n	80053de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ca:	f043 0220 	orr.w	r2, r3, #32
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e023      	b.n	8005426 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	0c1b      	lsrs	r3, r3, #16
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d10d      	bne.n	8005404 <I2C_WaitOnFlagUntilTimeout+0x84>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	43da      	mvns	r2, r3
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4013      	ands	r3, r2
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	bf0c      	ite	eq
 80053fa:	2301      	moveq	r3, #1
 80053fc:	2300      	movne	r3, #0
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	461a      	mov	r2, r3
 8005402:	e00c      	b.n	800541e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	43da      	mvns	r2, r3
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	4013      	ands	r3, r2
 8005410:	b29b      	uxth	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	bf0c      	ite	eq
 8005416:	2301      	moveq	r3, #1
 8005418:	2300      	movne	r3, #0
 800541a:	b2db      	uxtb	r3, r3
 800541c:	461a      	mov	r2, r3
 800541e:	79fb      	ldrb	r3, [r7, #7]
 8005420:	429a      	cmp	r2, r3
 8005422:	d0b6      	beq.n	8005392 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b084      	sub	sp, #16
 8005432:	af00      	add	r7, sp, #0
 8005434:	60f8      	str	r0, [r7, #12]
 8005436:	60b9      	str	r1, [r7, #8]
 8005438:	607a      	str	r2, [r7, #4]
 800543a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800543c:	e051      	b.n	80054e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800544c:	d123      	bne.n	8005496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800545c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005466:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2220      	movs	r2, #32
 8005472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	f043 0204 	orr.w	r2, r3, #4
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e046      	b.n	8005524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800549c:	d021      	beq.n	80054e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800549e:	f7fc fd83 	bl	8001fa8 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d302      	bcc.n	80054b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d116      	bne.n	80054e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2220      	movs	r2, #32
 80054be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	f043 0220 	orr.w	r2, r3, #32
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e020      	b.n	8005524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	0c1b      	lsrs	r3, r3, #16
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d10c      	bne.n	8005506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	43da      	mvns	r2, r3
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4013      	ands	r3, r2
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	bf14      	ite	ne
 80054fe:	2301      	movne	r3, #1
 8005500:	2300      	moveq	r3, #0
 8005502:	b2db      	uxtb	r3, r3
 8005504:	e00b      	b.n	800551e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	43da      	mvns	r2, r3
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	4013      	ands	r3, r2
 8005512:	b29b      	uxth	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	bf14      	ite	ne
 8005518:	2301      	movne	r3, #1
 800551a:	2300      	moveq	r3, #0
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d18d      	bne.n	800543e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005538:	e02d      	b.n	8005596 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 f8ce 	bl	80056dc <I2C_IsAcknowledgeFailed>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e02d      	b.n	80055a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005550:	d021      	beq.n	8005596 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005552:	f7fc fd29 	bl	8001fa8 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	429a      	cmp	r2, r3
 8005560:	d302      	bcc.n	8005568 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d116      	bne.n	8005596 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2220      	movs	r2, #32
 8005572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005582:	f043 0220 	orr.w	r2, r3, #32
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e007      	b.n	80055a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a0:	2b80      	cmp	r3, #128	; 0x80
 80055a2:	d1ca      	bne.n	800553a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b084      	sub	sp, #16
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	60f8      	str	r0, [r7, #12]
 80055b6:	60b9      	str	r1, [r7, #8]
 80055b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055ba:	e02d      	b.n	8005618 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 f88d 	bl	80056dc <I2C_IsAcknowledgeFailed>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e02d      	b.n	8005628 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055d2:	d021      	beq.n	8005618 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055d4:	f7fc fce8 	bl	8001fa8 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d302      	bcc.n	80055ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d116      	bne.n	8005618 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2220      	movs	r2, #32
 80055f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005604:	f043 0220 	orr.w	r2, r3, #32
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e007      	b.n	8005628 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	f003 0304 	and.w	r3, r3, #4
 8005622:	2b04      	cmp	r3, #4
 8005624:	d1ca      	bne.n	80055bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800563c:	e042      	b.n	80056c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	f003 0310 	and.w	r3, r3, #16
 8005648:	2b10      	cmp	r3, #16
 800564a:	d119      	bne.n	8005680 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f06f 0210 	mvn.w	r2, #16
 8005654:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2220      	movs	r2, #32
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e029      	b.n	80056d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005680:	f7fc fc92 	bl	8001fa8 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	429a      	cmp	r2, r3
 800568e:	d302      	bcc.n	8005696 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d116      	bne.n	80056c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2220      	movs	r2, #32
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b0:	f043 0220 	orr.w	r2, r3, #32
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e007      	b.n	80056d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ce:	2b40      	cmp	r3, #64	; 0x40
 80056d0:	d1b5      	bne.n	800563e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056f2:	d11b      	bne.n	800572c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2220      	movs	r2, #32
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005718:	f043 0204 	orr.w	r2, r3, #4
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e000      	b.n	800572e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
	...

0800573c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b088      	sub	sp, #32
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e128      	b.n	80059a0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d109      	bne.n	800576e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a90      	ldr	r2, [pc, #576]	; (80059a8 <HAL_I2S_Init+0x26c>)
 8005766:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f7fc f969 	bl	8001a40 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2202      	movs	r2, #2
 8005772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	6812      	ldr	r2, [r2, #0]
 8005780:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005784:	f023 030f 	bic.w	r3, r3, #15
 8005788:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2202      	movs	r2, #2
 8005790:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	2b02      	cmp	r3, #2
 8005798:	d060      	beq.n	800585c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d102      	bne.n	80057a8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80057a2:	2310      	movs	r3, #16
 80057a4:	617b      	str	r3, [r7, #20]
 80057a6:	e001      	b.n	80057ac <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80057a8:	2320      	movs	r3, #32
 80057aa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	2b20      	cmp	r3, #32
 80057b2:	d802      	bhi.n	80057ba <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	005b      	lsls	r3, r3, #1
 80057b8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80057ba:	2001      	movs	r0, #1
 80057bc:	f001 fafa 	bl	8006db4 <HAL_RCCEx_GetPeriphCLKFreq>
 80057c0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057ca:	d125      	bne.n	8005818 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d010      	beq.n	80057f6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	fbb2 f2f3 	udiv	r2, r2, r3
 80057de:	4613      	mov	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	005b      	lsls	r3, r3, #1
 80057e6:	461a      	mov	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f0:	3305      	adds	r3, #5
 80057f2:	613b      	str	r3, [r7, #16]
 80057f4:	e01f      	b.n	8005836 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	00db      	lsls	r3, r3, #3
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005800:	4613      	mov	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4413      	add	r3, r2
 8005806:	005b      	lsls	r3, r3, #1
 8005808:	461a      	mov	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005812:	3305      	adds	r3, #5
 8005814:	613b      	str	r3, [r7, #16]
 8005816:	e00e      	b.n	8005836 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005820:	4613      	mov	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	005b      	lsls	r3, r3, #1
 8005828:	461a      	mov	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005832:	3305      	adds	r3, #5
 8005834:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	4a5c      	ldr	r2, [pc, #368]	; (80059ac <HAL_I2S_Init+0x270>)
 800583a:	fba2 2303 	umull	r2, r3, r2, r3
 800583e:	08db      	lsrs	r3, r3, #3
 8005840:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	085b      	lsrs	r3, r3, #1
 8005852:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	021b      	lsls	r3, r3, #8
 8005858:	61bb      	str	r3, [r7, #24]
 800585a:	e003      	b.n	8005864 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800585c:	2302      	movs	r3, #2
 800585e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005860:	2300      	movs	r3, #0
 8005862:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d902      	bls.n	8005870 <HAL_I2S_Init+0x134>
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	2bff      	cmp	r3, #255	; 0xff
 800586e:	d907      	bls.n	8005880 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005874:	f043 0210 	orr.w	r2, r3, #16
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e08f      	b.n	80059a0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	691a      	ldr	r2, [r3, #16]
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	ea42 0103 	orr.w	r1, r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69fa      	ldr	r2, [r7, #28]
 8005890:	430a      	orrs	r2, r1
 8005892:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800589e:	f023 030f 	bic.w	r3, r3, #15
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	6851      	ldr	r1, [r2, #4]
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	6892      	ldr	r2, [r2, #8]
 80058aa:	4311      	orrs	r1, r2
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	68d2      	ldr	r2, [r2, #12]
 80058b0:	4311      	orrs	r1, r2
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	6992      	ldr	r2, [r2, #24]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	431a      	orrs	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058c2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d161      	bne.n	8005990 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a38      	ldr	r2, [pc, #224]	; (80059b0 <HAL_I2S_Init+0x274>)
 80058d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a37      	ldr	r2, [pc, #220]	; (80059b4 <HAL_I2S_Init+0x278>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d101      	bne.n	80058e0 <HAL_I2S_Init+0x1a4>
 80058dc:	4b36      	ldr	r3, [pc, #216]	; (80059b8 <HAL_I2S_Init+0x27c>)
 80058de:	e001      	b.n	80058e4 <HAL_I2S_Init+0x1a8>
 80058e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	6812      	ldr	r2, [r2, #0]
 80058ea:	4932      	ldr	r1, [pc, #200]	; (80059b4 <HAL_I2S_Init+0x278>)
 80058ec:	428a      	cmp	r2, r1
 80058ee:	d101      	bne.n	80058f4 <HAL_I2S_Init+0x1b8>
 80058f0:	4a31      	ldr	r2, [pc, #196]	; (80059b8 <HAL_I2S_Init+0x27c>)
 80058f2:	e001      	b.n	80058f8 <HAL_I2S_Init+0x1bc>
 80058f4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80058f8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80058fc:	f023 030f 	bic.w	r3, r3, #15
 8005900:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a2b      	ldr	r2, [pc, #172]	; (80059b4 <HAL_I2S_Init+0x278>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d101      	bne.n	8005910 <HAL_I2S_Init+0x1d4>
 800590c:	4b2a      	ldr	r3, [pc, #168]	; (80059b8 <HAL_I2S_Init+0x27c>)
 800590e:	e001      	b.n	8005914 <HAL_I2S_Init+0x1d8>
 8005910:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005914:	2202      	movs	r2, #2
 8005916:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a25      	ldr	r2, [pc, #148]	; (80059b4 <HAL_I2S_Init+0x278>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d101      	bne.n	8005926 <HAL_I2S_Init+0x1ea>
 8005922:	4b25      	ldr	r3, [pc, #148]	; (80059b8 <HAL_I2S_Init+0x27c>)
 8005924:	e001      	b.n	800592a <HAL_I2S_Init+0x1ee>
 8005926:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005936:	d003      	beq.n	8005940 <HAL_I2S_Init+0x204>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d103      	bne.n	8005948 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005940:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005944:	613b      	str	r3, [r7, #16]
 8005946:	e001      	b.n	800594c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005948:	2300      	movs	r3, #0
 800594a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005956:	4313      	orrs	r3, r2
 8005958:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005960:	4313      	orrs	r3, r2
 8005962:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800596a:	4313      	orrs	r3, r2
 800596c:	b29a      	uxth	r2, r3
 800596e:	897b      	ldrh	r3, [r7, #10]
 8005970:	4313      	orrs	r3, r2
 8005972:	b29b      	uxth	r3, r3
 8005974:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005978:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a0d      	ldr	r2, [pc, #52]	; (80059b4 <HAL_I2S_Init+0x278>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d101      	bne.n	8005988 <HAL_I2S_Init+0x24c>
 8005984:	4b0c      	ldr	r3, [pc, #48]	; (80059b8 <HAL_I2S_Init+0x27c>)
 8005986:	e001      	b.n	800598c <HAL_I2S_Init+0x250>
 8005988:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800598c:	897a      	ldrh	r2, [r7, #10]
 800598e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3720      	adds	r7, #32
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	08005ca1 	.word	0x08005ca1
 80059ac:	cccccccd 	.word	0xcccccccd
 80059b0:	08005db5 	.word	0x08005db5
 80059b4:	40003800 	.word	0x40003800
 80059b8:	40003400 	.word	0x40003400

080059bc <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	4613      	mov	r3, r2
 80059c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d002      	beq.n	80059d6 <HAL_I2S_Transmit_DMA+0x1a>
 80059d0:	88fb      	ldrh	r3, [r7, #6]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e08e      	b.n	8005af8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d101      	bne.n	80059ea <HAL_I2S_Transmit_DMA+0x2e>
 80059e6:	2302      	movs	r3, #2
 80059e8:	e086      	b.n	8005af8 <HAL_I2S_Transmit_DMA+0x13c>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d005      	beq.n	8005a0a <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8005a06:	2302      	movs	r3, #2
 8005a08:	e076      	b.n	8005af8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2203      	movs	r2, #3
 8005a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	69db      	ldr	r3, [r3, #28]
 8005a24:	f003 0307 	and.w	r3, r3, #7
 8005a28:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	2b03      	cmp	r3, #3
 8005a2e:	d002      	beq.n	8005a36 <HAL_I2S_Transmit_DMA+0x7a>
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	2b05      	cmp	r3, #5
 8005a34:	d10a      	bne.n	8005a4c <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005a36:	88fb      	ldrh	r3, [r7, #6]
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005a40:	88fb      	ldrh	r3, [r7, #6]
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a4a:	e005      	b.n	8005a58 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	88fa      	ldrh	r2, [r7, #6]
 8005a50:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	88fa      	ldrh	r2, [r7, #6]
 8005a56:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5c:	4a28      	ldr	r2, [pc, #160]	; (8005b00 <HAL_I2S_Transmit_DMA+0x144>)
 8005a5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a64:	4a27      	ldr	r2, [pc, #156]	; (8005b04 <HAL_I2S_Transmit_DMA+0x148>)
 8005a66:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6c:	4a26      	ldr	r2, [pc, #152]	; (8005b08 <HAL_I2S_Transmit_DMA+0x14c>)
 8005a6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005a78:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005a80:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a86:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005a88:	f7fc fcdc 	bl	8002444 <HAL_DMA_Start_IT>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00f      	beq.n	8005ab2 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a96:	f043 0208 	orr.w	r2, r3, #8
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e022      	b.n	8005af8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	69db      	ldr	r3, [r3, #28]
 8005ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d107      	bne.n	8005ad0 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	69da      	ldr	r2, [r3, #28]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ace:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d107      	bne.n	8005aee <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f042 0202 	orr.w	r2, r2, #2
 8005aec:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3718      	adds	r7, #24
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	08005b7f 	.word	0x08005b7f
 8005b04:	08005b3d 	.word	0x08005b3d
 8005b08:	08005b9b 	.word	0x08005b9b

08005b0c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b2e:	b2db      	uxtb	r3, r3
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b48:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10e      	bne.n	8005b70 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f022 0202 	bic.w	r2, r2, #2
 8005b60:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f7fa fcf9 	bl	8000568 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005b76:	bf00      	nop
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b084      	sub	sp, #16
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f7fa fcfd 	bl	800058c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005b92:	bf00      	nop
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b084      	sub	sp, #16
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 0203 	bic.w	r2, r2, #3
 8005bb6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd0:	f043 0208 	orr.w	r2, r3, #8
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f7fa fe53 	bl	8000884 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005bde:	bf00      	nop
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b082      	sub	sp, #8
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf2:	881a      	ldrh	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfe:	1c9a      	adds	r2, r3, #2
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10e      	bne.n	8005c3a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685a      	ldr	r2, [r3, #4]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c2a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f7fa fc97 	bl	8000568 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005c3a:	bf00      	nop
 8005c3c:	3708      	adds	r7, #8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b082      	sub	sp, #8
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68da      	ldr	r2, [r3, #12]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c54:	b292      	uxth	r2, r2
 8005c56:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5c:	1c9a      	adds	r2, r3, #2
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10e      	bne.n	8005c98 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	685a      	ldr	r2, [r3, #4]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c88:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7ff ff3a 	bl	8005b0c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005c98:	bf00      	nop
 8005c9a:	3708      	adds	r7, #8
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b04      	cmp	r3, #4
 8005cba:	d13a      	bne.n	8005d32 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d109      	bne.n	8005cda <I2S_IRQHandler+0x3a>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd0:	2b40      	cmp	r3, #64	; 0x40
 8005cd2:	d102      	bne.n	8005cda <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f7ff ffb4 	bl	8005c42 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce0:	2b40      	cmp	r3, #64	; 0x40
 8005ce2:	d126      	bne.n	8005d32 <I2S_IRQHandler+0x92>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f003 0320 	and.w	r3, r3, #32
 8005cee:	2b20      	cmp	r3, #32
 8005cf0:	d11f      	bne.n	8005d32 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d00:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005d02:	2300      	movs	r3, #0
 8005d04:	613b      	str	r3, [r7, #16]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	613b      	str	r3, [r7, #16]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	613b      	str	r3, [r7, #16]
 8005d16:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d24:	f043 0202 	orr.w	r2, r3, #2
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f7fa fda9 	bl	8000884 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b03      	cmp	r3, #3
 8005d3c:	d136      	bne.n	8005dac <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f003 0302 	and.w	r3, r3, #2
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d109      	bne.n	8005d5c <I2S_IRQHandler+0xbc>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d52:	2b80      	cmp	r3, #128	; 0x80
 8005d54:	d102      	bne.n	8005d5c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7ff ff45 	bl	8005be6 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f003 0308 	and.w	r3, r3, #8
 8005d62:	2b08      	cmp	r3, #8
 8005d64:	d122      	bne.n	8005dac <I2S_IRQHandler+0x10c>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f003 0320 	and.w	r3, r3, #32
 8005d70:	2b20      	cmp	r3, #32
 8005d72:	d11b      	bne.n	8005dac <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d82:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005d84:	2300      	movs	r3, #0
 8005d86:	60fb      	str	r3, [r7, #12]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	60fb      	str	r3, [r7, #12]
 8005d90:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9e:	f043 0204 	orr.w	r2, r3, #4
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7fa fd6c 	bl	8000884 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005dac:	bf00      	nop
 8005dae:	3718      	adds	r7, #24
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b088      	sub	sp, #32
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a92      	ldr	r2, [pc, #584]	; (8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d101      	bne.n	8005dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005dce:	4b92      	ldr	r3, [pc, #584]	; (8006018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005dd0:	e001      	b.n	8005dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005dd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a8b      	ldr	r2, [pc, #556]	; (8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d101      	bne.n	8005df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005dec:	4b8a      	ldr	r3, [pc, #552]	; (8006018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005dee:	e001      	b.n	8005df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005df0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e00:	d004      	beq.n	8005e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f040 8099 	bne.w	8005f3e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d107      	bne.n	8005e26 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 f925 	bl	8006070 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d107      	bne.n	8005e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d002      	beq.n	8005e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f9c8 	bl	80061d0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e46:	2b40      	cmp	r3, #64	; 0x40
 8005e48:	d13a      	bne.n	8005ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	f003 0320 	and.w	r3, r3, #32
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d035      	beq.n	8005ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a6e      	ldr	r2, [pc, #440]	; (8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d101      	bne.n	8005e62 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005e5e:	4b6e      	ldr	r3, [pc, #440]	; (8006018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e60:	e001      	b.n	8005e66 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005e62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e66:	685a      	ldr	r2, [r3, #4]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4969      	ldr	r1, [pc, #420]	; (8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e6e:	428b      	cmp	r3, r1
 8005e70:	d101      	bne.n	8005e76 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005e72:	4b69      	ldr	r3, [pc, #420]	; (8006018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e74:	e001      	b.n	8005e7a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005e76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e7e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e8e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005e90:	2300      	movs	r3, #0
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	60fb      	str	r3, [r7, #12]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	60fb      	str	r3, [r7, #12]
 8005ea4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb2:	f043 0202 	orr.w	r2, r3, #2
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7fa fce2 	bl	8000884 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	f003 0308 	and.w	r3, r3, #8
 8005ec6:	2b08      	cmp	r3, #8
 8005ec8:	f040 80c3 	bne.w	8006052 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f003 0320 	and.w	r3, r3, #32
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f000 80bd 	beq.w	8006052 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ee6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a49      	ldr	r2, [pc, #292]	; (8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d101      	bne.n	8005ef6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005ef2:	4b49      	ldr	r3, [pc, #292]	; (8006018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ef4:	e001      	b.n	8005efa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005ef6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4944      	ldr	r1, [pc, #272]	; (8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f02:	428b      	cmp	r3, r1
 8005f04:	d101      	bne.n	8005f0a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005f06:	4b44      	ldr	r3, [pc, #272]	; (8006018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f08:	e001      	b.n	8005f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005f0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f12:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005f14:	2300      	movs	r3, #0
 8005f16:	60bb      	str	r3, [r7, #8]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	60bb      	str	r3, [r7, #8]
 8005f20:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2e:	f043 0204 	orr.w	r2, r3, #4
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7fa fca4 	bl	8000884 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005f3c:	e089      	b.n	8006052 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d107      	bne.n	8005f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d002      	beq.n	8005f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f8be 	bl	80060d4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d107      	bne.n	8005f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d002      	beq.n	8005f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f8fd 	bl	800616c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f78:	2b40      	cmp	r3, #64	; 0x40
 8005f7a:	d12f      	bne.n	8005fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f003 0320 	and.w	r3, r3, #32
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d02a      	beq.n	8005fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f94:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a1e      	ldr	r2, [pc, #120]	; (8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d101      	bne.n	8005fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005fa0:	4b1d      	ldr	r3, [pc, #116]	; (8006018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005fa2:	e001      	b.n	8005fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005fa4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fa8:	685a      	ldr	r2, [r3, #4]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4919      	ldr	r1, [pc, #100]	; (8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005fb0:	428b      	cmp	r3, r1
 8005fb2:	d101      	bne.n	8005fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005fb4:	4b18      	ldr	r3, [pc, #96]	; (8006018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005fb6:	e001      	b.n	8005fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005fb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fbc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005fc0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fce:	f043 0202 	orr.w	r2, r3, #2
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7fa fc54 	bl	8000884 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	f003 0308 	and.w	r3, r3, #8
 8005fe2:	2b08      	cmp	r3, #8
 8005fe4:	d136      	bne.n	8006054 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	f003 0320 	and.w	r3, r3, #32
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d031      	beq.n	8006054 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a07      	ldr	r2, [pc, #28]	; (8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d101      	bne.n	8005ffe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005ffa:	4b07      	ldr	r3, [pc, #28]	; (8006018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ffc:	e001      	b.n	8006002 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005ffe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006002:	685a      	ldr	r2, [r3, #4]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4902      	ldr	r1, [pc, #8]	; (8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800600a:	428b      	cmp	r3, r1
 800600c:	d106      	bne.n	800601c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800600e:	4b02      	ldr	r3, [pc, #8]	; (8006018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006010:	e006      	b.n	8006020 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006012:	bf00      	nop
 8006014:	40003800 	.word	0x40003800
 8006018:	40003400 	.word	0x40003400
 800601c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006020:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006024:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006034:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006042:	f043 0204 	orr.w	r2, r3, #4
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7fa fc1a 	bl	8000884 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006050:	e000      	b.n	8006054 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006052:	bf00      	nop
}
 8006054:	bf00      	nop
 8006056:	3720      	adds	r7, #32
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607c:	1c99      	adds	r1, r3, #2
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	6251      	str	r1, [r2, #36]	; 0x24
 8006082:	881a      	ldrh	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800608e:	b29b      	uxth	r3, r3
 8006090:	3b01      	subs	r3, #1
 8006092:	b29a      	uxth	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800609c:	b29b      	uxth	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d113      	bne.n	80060ca <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80060b0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d106      	bne.n	80060ca <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f7ff ffc9 	bl	800605c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80060ca:	bf00      	nop
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
	...

080060d4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e0:	1c99      	adds	r1, r3, #2
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	6251      	str	r1, [r2, #36]	; 0x24
 80060e6:	8819      	ldrh	r1, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a1d      	ldr	r2, [pc, #116]	; (8006164 <I2SEx_TxISR_I2SExt+0x90>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d101      	bne.n	80060f6 <I2SEx_TxISR_I2SExt+0x22>
 80060f2:	4b1d      	ldr	r3, [pc, #116]	; (8006168 <I2SEx_TxISR_I2SExt+0x94>)
 80060f4:	e001      	b.n	80060fa <I2SEx_TxISR_I2SExt+0x26>
 80060f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060fa:	460a      	mov	r2, r1
 80060fc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006102:	b29b      	uxth	r3, r3
 8006104:	3b01      	subs	r3, #1
 8006106:	b29a      	uxth	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006110:	b29b      	uxth	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d121      	bne.n	800615a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a12      	ldr	r2, [pc, #72]	; (8006164 <I2SEx_TxISR_I2SExt+0x90>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d101      	bne.n	8006124 <I2SEx_TxISR_I2SExt+0x50>
 8006120:	4b11      	ldr	r3, [pc, #68]	; (8006168 <I2SEx_TxISR_I2SExt+0x94>)
 8006122:	e001      	b.n	8006128 <I2SEx_TxISR_I2SExt+0x54>
 8006124:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006128:	685a      	ldr	r2, [r3, #4]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	490d      	ldr	r1, [pc, #52]	; (8006164 <I2SEx_TxISR_I2SExt+0x90>)
 8006130:	428b      	cmp	r3, r1
 8006132:	d101      	bne.n	8006138 <I2SEx_TxISR_I2SExt+0x64>
 8006134:	4b0c      	ldr	r3, [pc, #48]	; (8006168 <I2SEx_TxISR_I2SExt+0x94>)
 8006136:	e001      	b.n	800613c <I2SEx_TxISR_I2SExt+0x68>
 8006138:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800613c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006140:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006146:	b29b      	uxth	r3, r3
 8006148:	2b00      	cmp	r3, #0
 800614a:	d106      	bne.n	800615a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f7ff ff81 	bl	800605c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800615a:	bf00      	nop
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	40003800 	.word	0x40003800
 8006168:	40003400 	.word	0x40003400

0800616c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68d8      	ldr	r0, [r3, #12]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617e:	1c99      	adds	r1, r3, #2
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006184:	b282      	uxth	r2, r0
 8006186:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800618c:	b29b      	uxth	r3, r3
 800618e:	3b01      	subs	r3, #1
 8006190:	b29a      	uxth	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800619a:	b29b      	uxth	r3, r3
 800619c:	2b00      	cmp	r3, #0
 800619e:	d113      	bne.n	80061c8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685a      	ldr	r2, [r3, #4]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80061ae:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d106      	bne.n	80061c8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7ff ff4a 	bl	800605c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80061c8:	bf00      	nop
 80061ca:	3708      	adds	r7, #8
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a20      	ldr	r2, [pc, #128]	; (8006260 <I2SEx_RxISR_I2SExt+0x90>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d101      	bne.n	80061e6 <I2SEx_RxISR_I2SExt+0x16>
 80061e2:	4b20      	ldr	r3, [pc, #128]	; (8006264 <I2SEx_RxISR_I2SExt+0x94>)
 80061e4:	e001      	b.n	80061ea <I2SEx_RxISR_I2SExt+0x1a>
 80061e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061ea:	68d8      	ldr	r0, [r3, #12]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f0:	1c99      	adds	r1, r3, #2
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80061f6:	b282      	uxth	r2, r0
 80061f8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80061fe:	b29b      	uxth	r3, r3
 8006200:	3b01      	subs	r3, #1
 8006202:	b29a      	uxth	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800620c:	b29b      	uxth	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d121      	bne.n	8006256 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a12      	ldr	r2, [pc, #72]	; (8006260 <I2SEx_RxISR_I2SExt+0x90>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d101      	bne.n	8006220 <I2SEx_RxISR_I2SExt+0x50>
 800621c:	4b11      	ldr	r3, [pc, #68]	; (8006264 <I2SEx_RxISR_I2SExt+0x94>)
 800621e:	e001      	b.n	8006224 <I2SEx_RxISR_I2SExt+0x54>
 8006220:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	490d      	ldr	r1, [pc, #52]	; (8006260 <I2SEx_RxISR_I2SExt+0x90>)
 800622c:	428b      	cmp	r3, r1
 800622e:	d101      	bne.n	8006234 <I2SEx_RxISR_I2SExt+0x64>
 8006230:	4b0c      	ldr	r3, [pc, #48]	; (8006264 <I2SEx_RxISR_I2SExt+0x94>)
 8006232:	e001      	b.n	8006238 <I2SEx_RxISR_I2SExt+0x68>
 8006234:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006238:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800623c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006242:	b29b      	uxth	r3, r3
 8006244:	2b00      	cmp	r3, #0
 8006246:	d106      	bne.n	8006256 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f7ff ff03 	bl	800605c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006256:	bf00      	nop
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	40003800 	.word	0x40003800
 8006264:	40003400 	.word	0x40003400

08006268 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b086      	sub	sp, #24
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e267      	b.n	800674a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	2b00      	cmp	r3, #0
 8006284:	d075      	beq.n	8006372 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006286:	4b88      	ldr	r3, [pc, #544]	; (80064a8 <HAL_RCC_OscConfig+0x240>)
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f003 030c 	and.w	r3, r3, #12
 800628e:	2b04      	cmp	r3, #4
 8006290:	d00c      	beq.n	80062ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006292:	4b85      	ldr	r3, [pc, #532]	; (80064a8 <HAL_RCC_OscConfig+0x240>)
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800629a:	2b08      	cmp	r3, #8
 800629c:	d112      	bne.n	80062c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800629e:	4b82      	ldr	r3, [pc, #520]	; (80064a8 <HAL_RCC_OscConfig+0x240>)
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062aa:	d10b      	bne.n	80062c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062ac:	4b7e      	ldr	r3, [pc, #504]	; (80064a8 <HAL_RCC_OscConfig+0x240>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d05b      	beq.n	8006370 <HAL_RCC_OscConfig+0x108>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d157      	bne.n	8006370 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e242      	b.n	800674a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062cc:	d106      	bne.n	80062dc <HAL_RCC_OscConfig+0x74>
 80062ce:	4b76      	ldr	r3, [pc, #472]	; (80064a8 <HAL_RCC_OscConfig+0x240>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a75      	ldr	r2, [pc, #468]	; (80064a8 <HAL_RCC_OscConfig+0x240>)
 80062d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062d8:	6013      	str	r3, [r2, #0]
 80062da:	e01d      	b.n	8006318 <HAL_RCC_OscConfig+0xb0>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062e4:	d10c      	bne.n	8006300 <HAL_RCC_OscConfig+0x98>
 80062e6:	4b70      	ldr	r3, [pc, #448]	; (80064a8 <HAL_RCC_OscConfig+0x240>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a6f      	ldr	r2, [pc, #444]	; (80064a8 <HAL_RCC_OscConfig+0x240>)
 80062ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062f0:	6013      	str	r3, [r2, #0]
 80062f2:	4b6d      	ldr	r3, [pc, #436]	; (80064a8 <HAL_RCC_OscConfig+0x240>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a6c      	ldr	r2, [pc, #432]	; (80064a8 <HAL_RCC_OscConfig+0x240>)
 80062f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062fc:	6013      	str	r3, [r2, #0]
 80062fe:	e00b      	b.n	8006318 <HAL_RCC_OscConfig+0xb0>
 8006300:	4b69      	ldr	r3, [pc, #420]	; (80064a8 <HAL_RCC_OscConfig+0x240>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a68      	ldr	r2, [pc, #416]	; (80064a8 <HAL_RCC_OscConfig+0x240>)
 8006306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800630a:	6013      	str	r3, [r2, #0]
 800630c:	4b66      	ldr	r3, [pc, #408]	; (80064a8 <HAL_RCC_OscConfig+0x240>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a65      	ldr	r2, [pc, #404]	; (80064a8 <HAL_RCC_OscConfig+0x240>)
 8006312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d013      	beq.n	8006348 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006320:	f7fb fe42 	bl	8001fa8 <HAL_GetTick>
 8006324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006326:	e008      	b.n	800633a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006328:	f7fb fe3e 	bl	8001fa8 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	2b64      	cmp	r3, #100	; 0x64
 8006334:	d901      	bls.n	800633a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e207      	b.n	800674a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800633a:	4b5b      	ldr	r3, [pc, #364]	; (80064a8 <HAL_RCC_OscConfig+0x240>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0f0      	beq.n	8006328 <HAL_RCC_OscConfig+0xc0>
 8006346:	e014      	b.n	8006372 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006348:	f7fb fe2e 	bl	8001fa8 <HAL_GetTick>
 800634c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800634e:	e008      	b.n	8006362 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006350:	f7fb fe2a 	bl	8001fa8 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	2b64      	cmp	r3, #100	; 0x64
 800635c:	d901      	bls.n	8006362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e1f3      	b.n	800674a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006362:	4b51      	ldr	r3, [pc, #324]	; (80064a8 <HAL_RCC_OscConfig+0x240>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1f0      	bne.n	8006350 <HAL_RCC_OscConfig+0xe8>
 800636e:	e000      	b.n	8006372 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	2b00      	cmp	r3, #0
 800637c:	d063      	beq.n	8006446 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800637e:	4b4a      	ldr	r3, [pc, #296]	; (80064a8 <HAL_RCC_OscConfig+0x240>)
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f003 030c 	and.w	r3, r3, #12
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00b      	beq.n	80063a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800638a:	4b47      	ldr	r3, [pc, #284]	; (80064a8 <HAL_RCC_OscConfig+0x240>)
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006392:	2b08      	cmp	r3, #8
 8006394:	d11c      	bne.n	80063d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006396:	4b44      	ldr	r3, [pc, #272]	; (80064a8 <HAL_RCC_OscConfig+0x240>)
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d116      	bne.n	80063d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063a2:	4b41      	ldr	r3, [pc, #260]	; (80064a8 <HAL_RCC_OscConfig+0x240>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d005      	beq.n	80063ba <HAL_RCC_OscConfig+0x152>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d001      	beq.n	80063ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e1c7      	b.n	800674a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063ba:	4b3b      	ldr	r3, [pc, #236]	; (80064a8 <HAL_RCC_OscConfig+0x240>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	00db      	lsls	r3, r3, #3
 80063c8:	4937      	ldr	r1, [pc, #220]	; (80064a8 <HAL_RCC_OscConfig+0x240>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063ce:	e03a      	b.n	8006446 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d020      	beq.n	800641a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063d8:	4b34      	ldr	r3, [pc, #208]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 80063da:	2201      	movs	r2, #1
 80063dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063de:	f7fb fde3 	bl	8001fa8 <HAL_GetTick>
 80063e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063e4:	e008      	b.n	80063f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063e6:	f7fb fddf 	bl	8001fa8 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d901      	bls.n	80063f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e1a8      	b.n	800674a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063f8:	4b2b      	ldr	r3, [pc, #172]	; (80064a8 <HAL_RCC_OscConfig+0x240>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0302 	and.w	r3, r3, #2
 8006400:	2b00      	cmp	r3, #0
 8006402:	d0f0      	beq.n	80063e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006404:	4b28      	ldr	r3, [pc, #160]	; (80064a8 <HAL_RCC_OscConfig+0x240>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	00db      	lsls	r3, r3, #3
 8006412:	4925      	ldr	r1, [pc, #148]	; (80064a8 <HAL_RCC_OscConfig+0x240>)
 8006414:	4313      	orrs	r3, r2
 8006416:	600b      	str	r3, [r1, #0]
 8006418:	e015      	b.n	8006446 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800641a:	4b24      	ldr	r3, [pc, #144]	; (80064ac <HAL_RCC_OscConfig+0x244>)
 800641c:	2200      	movs	r2, #0
 800641e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006420:	f7fb fdc2 	bl	8001fa8 <HAL_GetTick>
 8006424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006426:	e008      	b.n	800643a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006428:	f7fb fdbe 	bl	8001fa8 <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	2b02      	cmp	r3, #2
 8006434:	d901      	bls.n	800643a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e187      	b.n	800674a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800643a:	4b1b      	ldr	r3, [pc, #108]	; (80064a8 <HAL_RCC_OscConfig+0x240>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1f0      	bne.n	8006428 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0308 	and.w	r3, r3, #8
 800644e:	2b00      	cmp	r3, #0
 8006450:	d036      	beq.n	80064c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d016      	beq.n	8006488 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800645a:	4b15      	ldr	r3, [pc, #84]	; (80064b0 <HAL_RCC_OscConfig+0x248>)
 800645c:	2201      	movs	r2, #1
 800645e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006460:	f7fb fda2 	bl	8001fa8 <HAL_GetTick>
 8006464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006466:	e008      	b.n	800647a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006468:	f7fb fd9e 	bl	8001fa8 <HAL_GetTick>
 800646c:	4602      	mov	r2, r0
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	2b02      	cmp	r3, #2
 8006474:	d901      	bls.n	800647a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006476:	2303      	movs	r3, #3
 8006478:	e167      	b.n	800674a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800647a:	4b0b      	ldr	r3, [pc, #44]	; (80064a8 <HAL_RCC_OscConfig+0x240>)
 800647c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b00      	cmp	r3, #0
 8006484:	d0f0      	beq.n	8006468 <HAL_RCC_OscConfig+0x200>
 8006486:	e01b      	b.n	80064c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006488:	4b09      	ldr	r3, [pc, #36]	; (80064b0 <HAL_RCC_OscConfig+0x248>)
 800648a:	2200      	movs	r2, #0
 800648c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800648e:	f7fb fd8b 	bl	8001fa8 <HAL_GetTick>
 8006492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006494:	e00e      	b.n	80064b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006496:	f7fb fd87 	bl	8001fa8 <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d907      	bls.n	80064b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e150      	b.n	800674a <HAL_RCC_OscConfig+0x4e2>
 80064a8:	40023800 	.word	0x40023800
 80064ac:	42470000 	.word	0x42470000
 80064b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064b4:	4b88      	ldr	r3, [pc, #544]	; (80066d8 <HAL_RCC_OscConfig+0x470>)
 80064b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064b8:	f003 0302 	and.w	r3, r3, #2
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1ea      	bne.n	8006496 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0304 	and.w	r3, r3, #4
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f000 8097 	beq.w	80065fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064ce:	2300      	movs	r3, #0
 80064d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064d2:	4b81      	ldr	r3, [pc, #516]	; (80066d8 <HAL_RCC_OscConfig+0x470>)
 80064d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10f      	bne.n	80064fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064de:	2300      	movs	r3, #0
 80064e0:	60bb      	str	r3, [r7, #8]
 80064e2:	4b7d      	ldr	r3, [pc, #500]	; (80066d8 <HAL_RCC_OscConfig+0x470>)
 80064e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e6:	4a7c      	ldr	r2, [pc, #496]	; (80066d8 <HAL_RCC_OscConfig+0x470>)
 80064e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064ec:	6413      	str	r3, [r2, #64]	; 0x40
 80064ee:	4b7a      	ldr	r3, [pc, #488]	; (80066d8 <HAL_RCC_OscConfig+0x470>)
 80064f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064f6:	60bb      	str	r3, [r7, #8]
 80064f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064fa:	2301      	movs	r3, #1
 80064fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064fe:	4b77      	ldr	r3, [pc, #476]	; (80066dc <HAL_RCC_OscConfig+0x474>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006506:	2b00      	cmp	r3, #0
 8006508:	d118      	bne.n	800653c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800650a:	4b74      	ldr	r3, [pc, #464]	; (80066dc <HAL_RCC_OscConfig+0x474>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a73      	ldr	r2, [pc, #460]	; (80066dc <HAL_RCC_OscConfig+0x474>)
 8006510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006514:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006516:	f7fb fd47 	bl	8001fa8 <HAL_GetTick>
 800651a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800651c:	e008      	b.n	8006530 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800651e:	f7fb fd43 	bl	8001fa8 <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	2b02      	cmp	r3, #2
 800652a:	d901      	bls.n	8006530 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e10c      	b.n	800674a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006530:	4b6a      	ldr	r3, [pc, #424]	; (80066dc <HAL_RCC_OscConfig+0x474>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006538:	2b00      	cmp	r3, #0
 800653a:	d0f0      	beq.n	800651e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d106      	bne.n	8006552 <HAL_RCC_OscConfig+0x2ea>
 8006544:	4b64      	ldr	r3, [pc, #400]	; (80066d8 <HAL_RCC_OscConfig+0x470>)
 8006546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006548:	4a63      	ldr	r2, [pc, #396]	; (80066d8 <HAL_RCC_OscConfig+0x470>)
 800654a:	f043 0301 	orr.w	r3, r3, #1
 800654e:	6713      	str	r3, [r2, #112]	; 0x70
 8006550:	e01c      	b.n	800658c <HAL_RCC_OscConfig+0x324>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	2b05      	cmp	r3, #5
 8006558:	d10c      	bne.n	8006574 <HAL_RCC_OscConfig+0x30c>
 800655a:	4b5f      	ldr	r3, [pc, #380]	; (80066d8 <HAL_RCC_OscConfig+0x470>)
 800655c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800655e:	4a5e      	ldr	r2, [pc, #376]	; (80066d8 <HAL_RCC_OscConfig+0x470>)
 8006560:	f043 0304 	orr.w	r3, r3, #4
 8006564:	6713      	str	r3, [r2, #112]	; 0x70
 8006566:	4b5c      	ldr	r3, [pc, #368]	; (80066d8 <HAL_RCC_OscConfig+0x470>)
 8006568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800656a:	4a5b      	ldr	r2, [pc, #364]	; (80066d8 <HAL_RCC_OscConfig+0x470>)
 800656c:	f043 0301 	orr.w	r3, r3, #1
 8006570:	6713      	str	r3, [r2, #112]	; 0x70
 8006572:	e00b      	b.n	800658c <HAL_RCC_OscConfig+0x324>
 8006574:	4b58      	ldr	r3, [pc, #352]	; (80066d8 <HAL_RCC_OscConfig+0x470>)
 8006576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006578:	4a57      	ldr	r2, [pc, #348]	; (80066d8 <HAL_RCC_OscConfig+0x470>)
 800657a:	f023 0301 	bic.w	r3, r3, #1
 800657e:	6713      	str	r3, [r2, #112]	; 0x70
 8006580:	4b55      	ldr	r3, [pc, #340]	; (80066d8 <HAL_RCC_OscConfig+0x470>)
 8006582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006584:	4a54      	ldr	r2, [pc, #336]	; (80066d8 <HAL_RCC_OscConfig+0x470>)
 8006586:	f023 0304 	bic.w	r3, r3, #4
 800658a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d015      	beq.n	80065c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006594:	f7fb fd08 	bl	8001fa8 <HAL_GetTick>
 8006598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800659a:	e00a      	b.n	80065b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800659c:	f7fb fd04 	bl	8001fa8 <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d901      	bls.n	80065b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e0cb      	b.n	800674a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065b2:	4b49      	ldr	r3, [pc, #292]	; (80066d8 <HAL_RCC_OscConfig+0x470>)
 80065b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d0ee      	beq.n	800659c <HAL_RCC_OscConfig+0x334>
 80065be:	e014      	b.n	80065ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065c0:	f7fb fcf2 	bl	8001fa8 <HAL_GetTick>
 80065c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065c6:	e00a      	b.n	80065de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065c8:	f7fb fcee 	bl	8001fa8 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d901      	bls.n	80065de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e0b5      	b.n	800674a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065de:	4b3e      	ldr	r3, [pc, #248]	; (80066d8 <HAL_RCC_OscConfig+0x470>)
 80065e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e2:	f003 0302 	and.w	r3, r3, #2
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1ee      	bne.n	80065c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065ea:	7dfb      	ldrb	r3, [r7, #23]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d105      	bne.n	80065fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065f0:	4b39      	ldr	r3, [pc, #228]	; (80066d8 <HAL_RCC_OscConfig+0x470>)
 80065f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f4:	4a38      	ldr	r2, [pc, #224]	; (80066d8 <HAL_RCC_OscConfig+0x470>)
 80065f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 80a1 	beq.w	8006748 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006606:	4b34      	ldr	r3, [pc, #208]	; (80066d8 <HAL_RCC_OscConfig+0x470>)
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f003 030c 	and.w	r3, r3, #12
 800660e:	2b08      	cmp	r3, #8
 8006610:	d05c      	beq.n	80066cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	2b02      	cmp	r3, #2
 8006618:	d141      	bne.n	800669e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800661a:	4b31      	ldr	r3, [pc, #196]	; (80066e0 <HAL_RCC_OscConfig+0x478>)
 800661c:	2200      	movs	r2, #0
 800661e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006620:	f7fb fcc2 	bl	8001fa8 <HAL_GetTick>
 8006624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006626:	e008      	b.n	800663a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006628:	f7fb fcbe 	bl	8001fa8 <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	2b02      	cmp	r3, #2
 8006634:	d901      	bls.n	800663a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e087      	b.n	800674a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800663a:	4b27      	ldr	r3, [pc, #156]	; (80066d8 <HAL_RCC_OscConfig+0x470>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1f0      	bne.n	8006628 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	69da      	ldr	r2, [r3, #28]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	431a      	orrs	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006654:	019b      	lsls	r3, r3, #6
 8006656:	431a      	orrs	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665c:	085b      	lsrs	r3, r3, #1
 800665e:	3b01      	subs	r3, #1
 8006660:	041b      	lsls	r3, r3, #16
 8006662:	431a      	orrs	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006668:	061b      	lsls	r3, r3, #24
 800666a:	491b      	ldr	r1, [pc, #108]	; (80066d8 <HAL_RCC_OscConfig+0x470>)
 800666c:	4313      	orrs	r3, r2
 800666e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006670:	4b1b      	ldr	r3, [pc, #108]	; (80066e0 <HAL_RCC_OscConfig+0x478>)
 8006672:	2201      	movs	r2, #1
 8006674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006676:	f7fb fc97 	bl	8001fa8 <HAL_GetTick>
 800667a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800667c:	e008      	b.n	8006690 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800667e:	f7fb fc93 	bl	8001fa8 <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	2b02      	cmp	r3, #2
 800668a:	d901      	bls.n	8006690 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e05c      	b.n	800674a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006690:	4b11      	ldr	r3, [pc, #68]	; (80066d8 <HAL_RCC_OscConfig+0x470>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d0f0      	beq.n	800667e <HAL_RCC_OscConfig+0x416>
 800669c:	e054      	b.n	8006748 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800669e:	4b10      	ldr	r3, [pc, #64]	; (80066e0 <HAL_RCC_OscConfig+0x478>)
 80066a0:	2200      	movs	r2, #0
 80066a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066a4:	f7fb fc80 	bl	8001fa8 <HAL_GetTick>
 80066a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066aa:	e008      	b.n	80066be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066ac:	f7fb fc7c 	bl	8001fa8 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d901      	bls.n	80066be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e045      	b.n	800674a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066be:	4b06      	ldr	r3, [pc, #24]	; (80066d8 <HAL_RCC_OscConfig+0x470>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1f0      	bne.n	80066ac <HAL_RCC_OscConfig+0x444>
 80066ca:	e03d      	b.n	8006748 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d107      	bne.n	80066e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e038      	b.n	800674a <HAL_RCC_OscConfig+0x4e2>
 80066d8:	40023800 	.word	0x40023800
 80066dc:	40007000 	.word	0x40007000
 80066e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80066e4:	4b1b      	ldr	r3, [pc, #108]	; (8006754 <HAL_RCC_OscConfig+0x4ec>)
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d028      	beq.n	8006744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d121      	bne.n	8006744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800670a:	429a      	cmp	r2, r3
 800670c:	d11a      	bne.n	8006744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006714:	4013      	ands	r3, r2
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800671a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800671c:	4293      	cmp	r3, r2
 800671e:	d111      	bne.n	8006744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672a:	085b      	lsrs	r3, r3, #1
 800672c:	3b01      	subs	r3, #1
 800672e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006730:	429a      	cmp	r2, r3
 8006732:	d107      	bne.n	8006744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006740:	429a      	cmp	r2, r3
 8006742:	d001      	beq.n	8006748 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e000      	b.n	800674a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3718      	adds	r7, #24
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	40023800 	.word	0x40023800

08006758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d101      	bne.n	800676c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e0cc      	b.n	8006906 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800676c:	4b68      	ldr	r3, [pc, #416]	; (8006910 <HAL_RCC_ClockConfig+0x1b8>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0307 	and.w	r3, r3, #7
 8006774:	683a      	ldr	r2, [r7, #0]
 8006776:	429a      	cmp	r2, r3
 8006778:	d90c      	bls.n	8006794 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800677a:	4b65      	ldr	r3, [pc, #404]	; (8006910 <HAL_RCC_ClockConfig+0x1b8>)
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	b2d2      	uxtb	r2, r2
 8006780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006782:	4b63      	ldr	r3, [pc, #396]	; (8006910 <HAL_RCC_ClockConfig+0x1b8>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0307 	and.w	r3, r3, #7
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	429a      	cmp	r2, r3
 800678e:	d001      	beq.n	8006794 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e0b8      	b.n	8006906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0302 	and.w	r3, r3, #2
 800679c:	2b00      	cmp	r3, #0
 800679e:	d020      	beq.n	80067e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0304 	and.w	r3, r3, #4
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d005      	beq.n	80067b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067ac:	4b59      	ldr	r3, [pc, #356]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	4a58      	ldr	r2, [pc, #352]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80067b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80067b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0308 	and.w	r3, r3, #8
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d005      	beq.n	80067d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067c4:	4b53      	ldr	r3, [pc, #332]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	4a52      	ldr	r2, [pc, #328]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80067ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80067ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067d0:	4b50      	ldr	r3, [pc, #320]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	494d      	ldr	r1, [pc, #308]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80067de:	4313      	orrs	r3, r2
 80067e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d044      	beq.n	8006878 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d107      	bne.n	8006806 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067f6:	4b47      	ldr	r3, [pc, #284]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d119      	bne.n	8006836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e07f      	b.n	8006906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	2b02      	cmp	r3, #2
 800680c:	d003      	beq.n	8006816 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006812:	2b03      	cmp	r3, #3
 8006814:	d107      	bne.n	8006826 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006816:	4b3f      	ldr	r3, [pc, #252]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d109      	bne.n	8006836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e06f      	b.n	8006906 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006826:	4b3b      	ldr	r3, [pc, #236]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e067      	b.n	8006906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006836:	4b37      	ldr	r3, [pc, #220]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f023 0203 	bic.w	r2, r3, #3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	4934      	ldr	r1, [pc, #208]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 8006844:	4313      	orrs	r3, r2
 8006846:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006848:	f7fb fbae 	bl	8001fa8 <HAL_GetTick>
 800684c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800684e:	e00a      	b.n	8006866 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006850:	f7fb fbaa 	bl	8001fa8 <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	f241 3288 	movw	r2, #5000	; 0x1388
 800685e:	4293      	cmp	r3, r2
 8006860:	d901      	bls.n	8006866 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e04f      	b.n	8006906 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006866:	4b2b      	ldr	r3, [pc, #172]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f003 020c 	and.w	r2, r3, #12
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	429a      	cmp	r2, r3
 8006876:	d1eb      	bne.n	8006850 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006878:	4b25      	ldr	r3, [pc, #148]	; (8006910 <HAL_RCC_ClockConfig+0x1b8>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0307 	and.w	r3, r3, #7
 8006880:	683a      	ldr	r2, [r7, #0]
 8006882:	429a      	cmp	r2, r3
 8006884:	d20c      	bcs.n	80068a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006886:	4b22      	ldr	r3, [pc, #136]	; (8006910 <HAL_RCC_ClockConfig+0x1b8>)
 8006888:	683a      	ldr	r2, [r7, #0]
 800688a:	b2d2      	uxtb	r2, r2
 800688c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800688e:	4b20      	ldr	r3, [pc, #128]	; (8006910 <HAL_RCC_ClockConfig+0x1b8>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0307 	and.w	r3, r3, #7
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	429a      	cmp	r2, r3
 800689a:	d001      	beq.n	80068a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e032      	b.n	8006906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0304 	and.w	r3, r3, #4
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d008      	beq.n	80068be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068ac:	4b19      	ldr	r3, [pc, #100]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	4916      	ldr	r1, [pc, #88]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0308 	and.w	r3, r3, #8
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d009      	beq.n	80068de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068ca:	4b12      	ldr	r3, [pc, #72]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	00db      	lsls	r3, r3, #3
 80068d8:	490e      	ldr	r1, [pc, #56]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80068de:	f000 f821 	bl	8006924 <HAL_RCC_GetSysClockFreq>
 80068e2:	4602      	mov	r2, r0
 80068e4:	4b0b      	ldr	r3, [pc, #44]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	091b      	lsrs	r3, r3, #4
 80068ea:	f003 030f 	and.w	r3, r3, #15
 80068ee:	490a      	ldr	r1, [pc, #40]	; (8006918 <HAL_RCC_ClockConfig+0x1c0>)
 80068f0:	5ccb      	ldrb	r3, [r1, r3]
 80068f2:	fa22 f303 	lsr.w	r3, r2, r3
 80068f6:	4a09      	ldr	r2, [pc, #36]	; (800691c <HAL_RCC_ClockConfig+0x1c4>)
 80068f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80068fa:	4b09      	ldr	r3, [pc, #36]	; (8006920 <HAL_RCC_ClockConfig+0x1c8>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4618      	mov	r0, r3
 8006900:	f7fb fb0e 	bl	8001f20 <HAL_InitTick>

  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	40023c00 	.word	0x40023c00
 8006914:	40023800 	.word	0x40023800
 8006918:	0800d0a0 	.word	0x0800d0a0
 800691c:	20000038 	.word	0x20000038
 8006920:	2000003c 	.word	0x2000003c

08006924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006928:	b094      	sub	sp, #80	; 0x50
 800692a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	647b      	str	r3, [r7, #68]	; 0x44
 8006930:	2300      	movs	r3, #0
 8006932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006934:	2300      	movs	r3, #0
 8006936:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006938:	2300      	movs	r3, #0
 800693a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800693c:	4b79      	ldr	r3, [pc, #484]	; (8006b24 <HAL_RCC_GetSysClockFreq+0x200>)
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	f003 030c 	and.w	r3, r3, #12
 8006944:	2b08      	cmp	r3, #8
 8006946:	d00d      	beq.n	8006964 <HAL_RCC_GetSysClockFreq+0x40>
 8006948:	2b08      	cmp	r3, #8
 800694a:	f200 80e1 	bhi.w	8006b10 <HAL_RCC_GetSysClockFreq+0x1ec>
 800694e:	2b00      	cmp	r3, #0
 8006950:	d002      	beq.n	8006958 <HAL_RCC_GetSysClockFreq+0x34>
 8006952:	2b04      	cmp	r3, #4
 8006954:	d003      	beq.n	800695e <HAL_RCC_GetSysClockFreq+0x3a>
 8006956:	e0db      	b.n	8006b10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006958:	4b73      	ldr	r3, [pc, #460]	; (8006b28 <HAL_RCC_GetSysClockFreq+0x204>)
 800695a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800695c:	e0db      	b.n	8006b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800695e:	4b73      	ldr	r3, [pc, #460]	; (8006b2c <HAL_RCC_GetSysClockFreq+0x208>)
 8006960:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006962:	e0d8      	b.n	8006b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006964:	4b6f      	ldr	r3, [pc, #444]	; (8006b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800696c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800696e:	4b6d      	ldr	r3, [pc, #436]	; (8006b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d063      	beq.n	8006a42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800697a:	4b6a      	ldr	r3, [pc, #424]	; (8006b24 <HAL_RCC_GetSysClockFreq+0x200>)
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	099b      	lsrs	r3, r3, #6
 8006980:	2200      	movs	r2, #0
 8006982:	63bb      	str	r3, [r7, #56]	; 0x38
 8006984:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800698c:	633b      	str	r3, [r7, #48]	; 0x30
 800698e:	2300      	movs	r3, #0
 8006990:	637b      	str	r3, [r7, #52]	; 0x34
 8006992:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006996:	4622      	mov	r2, r4
 8006998:	462b      	mov	r3, r5
 800699a:	f04f 0000 	mov.w	r0, #0
 800699e:	f04f 0100 	mov.w	r1, #0
 80069a2:	0159      	lsls	r1, r3, #5
 80069a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069a8:	0150      	lsls	r0, r2, #5
 80069aa:	4602      	mov	r2, r0
 80069ac:	460b      	mov	r3, r1
 80069ae:	4621      	mov	r1, r4
 80069b0:	1a51      	subs	r1, r2, r1
 80069b2:	6139      	str	r1, [r7, #16]
 80069b4:	4629      	mov	r1, r5
 80069b6:	eb63 0301 	sbc.w	r3, r3, r1
 80069ba:	617b      	str	r3, [r7, #20]
 80069bc:	f04f 0200 	mov.w	r2, #0
 80069c0:	f04f 0300 	mov.w	r3, #0
 80069c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069c8:	4659      	mov	r1, fp
 80069ca:	018b      	lsls	r3, r1, #6
 80069cc:	4651      	mov	r1, sl
 80069ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80069d2:	4651      	mov	r1, sl
 80069d4:	018a      	lsls	r2, r1, #6
 80069d6:	4651      	mov	r1, sl
 80069d8:	ebb2 0801 	subs.w	r8, r2, r1
 80069dc:	4659      	mov	r1, fp
 80069de:	eb63 0901 	sbc.w	r9, r3, r1
 80069e2:	f04f 0200 	mov.w	r2, #0
 80069e6:	f04f 0300 	mov.w	r3, #0
 80069ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069f6:	4690      	mov	r8, r2
 80069f8:	4699      	mov	r9, r3
 80069fa:	4623      	mov	r3, r4
 80069fc:	eb18 0303 	adds.w	r3, r8, r3
 8006a00:	60bb      	str	r3, [r7, #8]
 8006a02:	462b      	mov	r3, r5
 8006a04:	eb49 0303 	adc.w	r3, r9, r3
 8006a08:	60fb      	str	r3, [r7, #12]
 8006a0a:	f04f 0200 	mov.w	r2, #0
 8006a0e:	f04f 0300 	mov.w	r3, #0
 8006a12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006a16:	4629      	mov	r1, r5
 8006a18:	024b      	lsls	r3, r1, #9
 8006a1a:	4621      	mov	r1, r4
 8006a1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006a20:	4621      	mov	r1, r4
 8006a22:	024a      	lsls	r2, r1, #9
 8006a24:	4610      	mov	r0, r2
 8006a26:	4619      	mov	r1, r3
 8006a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a34:	f7f9 fbc8 	bl	80001c8 <__aeabi_uldivmod>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a40:	e058      	b.n	8006af4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a42:	4b38      	ldr	r3, [pc, #224]	; (8006b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	099b      	lsrs	r3, r3, #6
 8006a48:	2200      	movs	r2, #0
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	4611      	mov	r1, r2
 8006a4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006a52:	623b      	str	r3, [r7, #32]
 8006a54:	2300      	movs	r3, #0
 8006a56:	627b      	str	r3, [r7, #36]	; 0x24
 8006a58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006a5c:	4642      	mov	r2, r8
 8006a5e:	464b      	mov	r3, r9
 8006a60:	f04f 0000 	mov.w	r0, #0
 8006a64:	f04f 0100 	mov.w	r1, #0
 8006a68:	0159      	lsls	r1, r3, #5
 8006a6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a6e:	0150      	lsls	r0, r2, #5
 8006a70:	4602      	mov	r2, r0
 8006a72:	460b      	mov	r3, r1
 8006a74:	4641      	mov	r1, r8
 8006a76:	ebb2 0a01 	subs.w	sl, r2, r1
 8006a7a:	4649      	mov	r1, r9
 8006a7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006a80:	f04f 0200 	mov.w	r2, #0
 8006a84:	f04f 0300 	mov.w	r3, #0
 8006a88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006a8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006a90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006a94:	ebb2 040a 	subs.w	r4, r2, sl
 8006a98:	eb63 050b 	sbc.w	r5, r3, fp
 8006a9c:	f04f 0200 	mov.w	r2, #0
 8006aa0:	f04f 0300 	mov.w	r3, #0
 8006aa4:	00eb      	lsls	r3, r5, #3
 8006aa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006aaa:	00e2      	lsls	r2, r4, #3
 8006aac:	4614      	mov	r4, r2
 8006aae:	461d      	mov	r5, r3
 8006ab0:	4643      	mov	r3, r8
 8006ab2:	18e3      	adds	r3, r4, r3
 8006ab4:	603b      	str	r3, [r7, #0]
 8006ab6:	464b      	mov	r3, r9
 8006ab8:	eb45 0303 	adc.w	r3, r5, r3
 8006abc:	607b      	str	r3, [r7, #4]
 8006abe:	f04f 0200 	mov.w	r2, #0
 8006ac2:	f04f 0300 	mov.w	r3, #0
 8006ac6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006aca:	4629      	mov	r1, r5
 8006acc:	028b      	lsls	r3, r1, #10
 8006ace:	4621      	mov	r1, r4
 8006ad0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ad4:	4621      	mov	r1, r4
 8006ad6:	028a      	lsls	r2, r1, #10
 8006ad8:	4610      	mov	r0, r2
 8006ada:	4619      	mov	r1, r3
 8006adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ade:	2200      	movs	r2, #0
 8006ae0:	61bb      	str	r3, [r7, #24]
 8006ae2:	61fa      	str	r2, [r7, #28]
 8006ae4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ae8:	f7f9 fb6e 	bl	80001c8 <__aeabi_uldivmod>
 8006aec:	4602      	mov	r2, r0
 8006aee:	460b      	mov	r3, r1
 8006af0:	4613      	mov	r3, r2
 8006af2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006af4:	4b0b      	ldr	r3, [pc, #44]	; (8006b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	0c1b      	lsrs	r3, r3, #16
 8006afa:	f003 0303 	and.w	r3, r3, #3
 8006afe:	3301      	adds	r3, #1
 8006b00:	005b      	lsls	r3, r3, #1
 8006b02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006b04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b0e:	e002      	b.n	8006b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b10:	4b05      	ldr	r3, [pc, #20]	; (8006b28 <HAL_RCC_GetSysClockFreq+0x204>)
 8006b12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3750      	adds	r7, #80	; 0x50
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b22:	bf00      	nop
 8006b24:	40023800 	.word	0x40023800
 8006b28:	00f42400 	.word	0x00f42400
 8006b2c:	007a1200 	.word	0x007a1200

08006b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b30:	b480      	push	{r7}
 8006b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b34:	4b03      	ldr	r3, [pc, #12]	; (8006b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b36:	681b      	ldr	r3, [r3, #0]
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	20000038 	.word	0x20000038

08006b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006b4c:	f7ff fff0 	bl	8006b30 <HAL_RCC_GetHCLKFreq>
 8006b50:	4602      	mov	r2, r0
 8006b52:	4b05      	ldr	r3, [pc, #20]	; (8006b68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	0a9b      	lsrs	r3, r3, #10
 8006b58:	f003 0307 	and.w	r3, r3, #7
 8006b5c:	4903      	ldr	r1, [pc, #12]	; (8006b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b5e:	5ccb      	ldrb	r3, [r1, r3]
 8006b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	40023800 	.word	0x40023800
 8006b6c:	0800d0b0 	.word	0x0800d0b0

08006b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b74:	f7ff ffdc 	bl	8006b30 <HAL_RCC_GetHCLKFreq>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	4b05      	ldr	r3, [pc, #20]	; (8006b90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	0b5b      	lsrs	r3, r3, #13
 8006b80:	f003 0307 	and.w	r3, r3, #7
 8006b84:	4903      	ldr	r1, [pc, #12]	; (8006b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b86:	5ccb      	ldrb	r3, [r1, r3]
 8006b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	40023800 	.word	0x40023800
 8006b94:	0800d0b0 	.word	0x0800d0b0

08006b98 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d105      	bne.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d035      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006bc0:	4b62      	ldr	r3, [pc, #392]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bc6:	f7fb f9ef 	bl	8001fa8 <HAL_GetTick>
 8006bca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006bcc:	e008      	b.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006bce:	f7fb f9eb 	bl	8001fa8 <HAL_GetTick>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d901      	bls.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e0b0      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006be0:	4b5b      	ldr	r3, [pc, #364]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1f0      	bne.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	019a      	lsls	r2, r3, #6
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	071b      	lsls	r3, r3, #28
 8006bf8:	4955      	ldr	r1, [pc, #340]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006c00:	4b52      	ldr	r3, [pc, #328]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006c02:	2201      	movs	r2, #1
 8006c04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c06:	f7fb f9cf 	bl	8001fa8 <HAL_GetTick>
 8006c0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c0c:	e008      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006c0e:	f7fb f9cb 	bl	8001fa8 <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d901      	bls.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e090      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c20:	4b4b      	ldr	r3, [pc, #300]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d0f0      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0302 	and.w	r3, r3, #2
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f000 8083 	beq.w	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	60fb      	str	r3, [r7, #12]
 8006c3e:	4b44      	ldr	r3, [pc, #272]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c42:	4a43      	ldr	r2, [pc, #268]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c48:	6413      	str	r3, [r2, #64]	; 0x40
 8006c4a:	4b41      	ldr	r3, [pc, #260]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c52:	60fb      	str	r3, [r7, #12]
 8006c54:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006c56:	4b3f      	ldr	r3, [pc, #252]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a3e      	ldr	r2, [pc, #248]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c60:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c62:	f7fb f9a1 	bl	8001fa8 <HAL_GetTick>
 8006c66:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c68:	e008      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006c6a:	f7fb f99d 	bl	8001fa8 <HAL_GetTick>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d901      	bls.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e062      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c7c:	4b35      	ldr	r3, [pc, #212]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d0f0      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c88:	4b31      	ldr	r3, [pc, #196]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c90:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d02f      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d028      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ca6:	4b2a      	ldr	r3, [pc, #168]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006cb0:	4b29      	ldr	r3, [pc, #164]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006cb6:	4b28      	ldr	r3, [pc, #160]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006cb8:	2200      	movs	r2, #0
 8006cba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006cbc:	4a24      	ldr	r2, [pc, #144]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006cc2:	4b23      	ldr	r3, [pc, #140]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d114      	bne.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006cce:	f7fb f96b 	bl	8001fa8 <HAL_GetTick>
 8006cd2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cd4:	e00a      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cd6:	f7fb f967 	bl	8001fa8 <HAL_GetTick>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d901      	bls.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e02a      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cec:	4b18      	ldr	r3, [pc, #96]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf0:	f003 0302 	and.w	r3, r3, #2
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d0ee      	beq.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d04:	d10d      	bne.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006d06:	4b12      	ldr	r3, [pc, #72]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006d16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d1a:	490d      	ldr	r1, [pc, #52]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	608b      	str	r3, [r1, #8]
 8006d20:	e005      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006d22:	4b0b      	ldr	r3, [pc, #44]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	4a0a      	ldr	r2, [pc, #40]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d28:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006d2c:	6093      	str	r3, [r2, #8]
 8006d2e:	4b08      	ldr	r3, [pc, #32]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d3a:	4905      	ldr	r1, [pc, #20]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3718      	adds	r7, #24
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	42470068 	.word	0x42470068
 8006d50:	40023800 	.word	0x40023800
 8006d54:	40007000 	.word	0x40007000
 8006d58:	42470e40 	.word	0x42470e40

08006d5c <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2203      	movs	r2, #3
 8006d68:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8006d6a:	4b11      	ldr	r3, [pc, #68]	; (8006db0 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d70:	099b      	lsrs	r3, r3, #6
 8006d72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006d7a:	4b0d      	ldr	r3, [pc, #52]	; (8006db0 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d80:	0f1b      	lsrs	r3, r3, #28
 8006d82:	f003 0207 	and.w	r2, r3, #7
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8006d8a:	4b09      	ldr	r3, [pc, #36]	; (8006db0 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006d92:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8006d94:	4b06      	ldr	r3, [pc, #24]	; (8006db0 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d98:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8006da4:	bf00      	nop
 8006da6:	3714      	adds	r7, #20
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	40023800 	.word	0x40023800

08006db4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b087      	sub	sp, #28
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d13e      	bne.n	8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006dd2:	4b23      	ldr	r3, [pc, #140]	; (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dda:	60fb      	str	r3, [r7, #12]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d005      	beq.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d12f      	bne.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006de8:	4b1e      	ldr	r3, [pc, #120]	; (8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006dea:	617b      	str	r3, [r7, #20]
          break;
 8006dec:	e02f      	b.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006dee:	4b1c      	ldr	r3, [pc, #112]	; (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006df6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dfa:	d108      	bne.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006dfc:	4b18      	ldr	r3, [pc, #96]	; (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e04:	4a18      	ldr	r2, [pc, #96]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e0a:	613b      	str	r3, [r7, #16]
 8006e0c:	e007      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006e0e:	4b14      	ldr	r3, [pc, #80]	; (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e16:	4a15      	ldr	r2, [pc, #84]	; (8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e1c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006e1e:	4b10      	ldr	r3, [pc, #64]	; (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006e20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e24:	099b      	lsrs	r3, r3, #6
 8006e26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	fb02 f303 	mul.w	r3, r2, r3
 8006e30:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006e32:	4b0b      	ldr	r3, [pc, #44]	; (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e38:	0f1b      	lsrs	r3, r3, #28
 8006e3a:	f003 0307 	and.w	r3, r3, #7
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e44:	617b      	str	r3, [r7, #20]
          break;
 8006e46:	e002      	b.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	617b      	str	r3, [r7, #20]
          break;
 8006e4c:	bf00      	nop
        }
      }
      break;
 8006e4e:	bf00      	nop
    }
  }
  return frequency;
 8006e50:	697b      	ldr	r3, [r7, #20]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	371c      	adds	r7, #28
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	40023800 	.word	0x40023800
 8006e64:	00bb8000 	.word	0x00bb8000
 8006e68:	007a1200 	.word	0x007a1200
 8006e6c:	00f42400 	.word	0x00f42400

08006e70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e03f      	b.n	8006f02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d106      	bne.n	8006e9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f7fa fe88 	bl	8001bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2224      	movs	r2, #36	; 0x24
 8006ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68da      	ldr	r2, [r3, #12]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006eb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 fa91 	bl	80073dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	691a      	ldr	r2, [r3, #16]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ec8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	695a      	ldr	r2, [r3, #20]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ed8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68da      	ldr	r2, [r3, #12]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ee8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2220      	movs	r2, #32
 8006ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2220      	movs	r2, #32
 8006efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b084      	sub	sp, #16
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	60f8      	str	r0, [r7, #12]
 8006f12:	60b9      	str	r1, [r7, #8]
 8006f14:	4613      	mov	r3, r2
 8006f16:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	2b20      	cmp	r3, #32
 8006f22:	d11d      	bne.n	8006f60 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d002      	beq.n	8006f30 <HAL_UART_Receive_DMA+0x26>
 8006f2a:	88fb      	ldrh	r3, [r7, #6]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d101      	bne.n	8006f34 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e016      	b.n	8006f62 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d101      	bne.n	8006f42 <HAL_UART_Receive_DMA+0x38>
 8006f3e:	2302      	movs	r3, #2
 8006f40:	e00f      	b.n	8006f62 <HAL_UART_Receive_DMA+0x58>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006f50:	88fb      	ldrh	r3, [r7, #6]
 8006f52:	461a      	mov	r2, r3
 8006f54:	68b9      	ldr	r1, [r7, #8]
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f000 f916 	bl	8007188 <UART_Start_Receive_DMA>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	e000      	b.n	8006f62 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006f60:	2302      	movs	r3, #2
  }
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b083      	sub	sp, #12
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f72:	bf00      	nop
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f7e:	b480      	push	{r7}
 8006f80:	b083      	sub	sp, #12
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	460b      	mov	r3, r1
 8006f88:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f8a:	bf00      	nop
 8006f8c:	370c      	adds	r7, #12
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr

08006f96 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b09c      	sub	sp, #112	; 0x70
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d172      	bne.n	8007098 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	330c      	adds	r3, #12
 8006fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fc2:	e853 3f00 	ldrex	r3, [r3]
 8006fc6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006fc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fce:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	330c      	adds	r3, #12
 8006fd6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006fd8:	65ba      	str	r2, [r7, #88]	; 0x58
 8006fda:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fdc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006fde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fe0:	e841 2300 	strex	r3, r2, [r1]
 8006fe4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1e5      	bne.n	8006fb8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	3314      	adds	r3, #20
 8006ff2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff6:	e853 3f00 	ldrex	r3, [r3]
 8006ffa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ffe:	f023 0301 	bic.w	r3, r3, #1
 8007002:	667b      	str	r3, [r7, #100]	; 0x64
 8007004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	3314      	adds	r3, #20
 800700a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800700c:	647a      	str	r2, [r7, #68]	; 0x44
 800700e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007010:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007012:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007014:	e841 2300 	strex	r3, r2, [r1]
 8007018:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800701a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1e5      	bne.n	8006fec <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	3314      	adds	r3, #20
 8007026:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702a:	e853 3f00 	ldrex	r3, [r3]
 800702e:	623b      	str	r3, [r7, #32]
   return(result);
 8007030:	6a3b      	ldr	r3, [r7, #32]
 8007032:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007036:	663b      	str	r3, [r7, #96]	; 0x60
 8007038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	3314      	adds	r3, #20
 800703e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007040:	633a      	str	r2, [r7, #48]	; 0x30
 8007042:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007044:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007046:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007048:	e841 2300 	strex	r3, r2, [r1]
 800704c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800704e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1e5      	bne.n	8007020 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007056:	2220      	movs	r2, #32
 8007058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800705c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800705e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007060:	2b01      	cmp	r3, #1
 8007062:	d119      	bne.n	8007098 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	330c      	adds	r3, #12
 800706a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	e853 3f00 	ldrex	r3, [r3]
 8007072:	60fb      	str	r3, [r7, #12]
   return(result);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f023 0310 	bic.w	r3, r3, #16
 800707a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800707c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	330c      	adds	r3, #12
 8007082:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007084:	61fa      	str	r2, [r7, #28]
 8007086:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007088:	69b9      	ldr	r1, [r7, #24]
 800708a:	69fa      	ldr	r2, [r7, #28]
 800708c:	e841 2300 	strex	r3, r2, [r1]
 8007090:	617b      	str	r3, [r7, #20]
   return(result);
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d1e5      	bne.n	8007064 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800709a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709c:	2b01      	cmp	r3, #1
 800709e:	d106      	bne.n	80070ae <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070a4:	4619      	mov	r1, r3
 80070a6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80070a8:	f7ff ff69 	bl	8006f7e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070ac:	e002      	b.n	80070b4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80070ae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80070b0:	f7fa f900 	bl	80012b4 <HAL_UART_RxCpltCallback>
}
 80070b4:	bf00      	nop
 80070b6:	3770      	adds	r7, #112	; 0x70
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d108      	bne.n	80070e4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070d6:	085b      	lsrs	r3, r3, #1
 80070d8:	b29b      	uxth	r3, r3
 80070da:	4619      	mov	r1, r3
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	f7ff ff4e 	bl	8006f7e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070e2:	e002      	b.n	80070ea <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f7fa f8cb 	bl	8001280 <HAL_UART_RxHalfCpltCallback>
}
 80070ea:	bf00      	nop
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b084      	sub	sp, #16
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80070fa:	2300      	movs	r3, #0
 80070fc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007102:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800710e:	2b80      	cmp	r3, #128	; 0x80
 8007110:	bf0c      	ite	eq
 8007112:	2301      	moveq	r3, #1
 8007114:	2300      	movne	r3, #0
 8007116:	b2db      	uxtb	r3, r3
 8007118:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007120:	b2db      	uxtb	r3, r3
 8007122:	2b21      	cmp	r3, #33	; 0x21
 8007124:	d108      	bne.n	8007138 <UART_DMAError+0x46>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d005      	beq.n	8007138 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	2200      	movs	r2, #0
 8007130:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007132:	68b8      	ldr	r0, [r7, #8]
 8007134:	f000 f8c6 	bl	80072c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	695b      	ldr	r3, [r3, #20]
 800713e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007142:	2b40      	cmp	r3, #64	; 0x40
 8007144:	bf0c      	ite	eq
 8007146:	2301      	moveq	r3, #1
 8007148:	2300      	movne	r3, #0
 800714a:	b2db      	uxtb	r3, r3
 800714c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b22      	cmp	r3, #34	; 0x22
 8007158:	d108      	bne.n	800716c <UART_DMAError+0x7a>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d005      	beq.n	800716c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	2200      	movs	r2, #0
 8007164:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007166:	68b8      	ldr	r0, [r7, #8]
 8007168:	f000 f8d4 	bl	8007314 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007170:	f043 0210 	orr.w	r2, r3, #16
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007178:	68b8      	ldr	r0, [r7, #8]
 800717a:	f7ff fef6 	bl	8006f6a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800717e:	bf00      	nop
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
	...

08007188 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b098      	sub	sp, #96	; 0x60
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	4613      	mov	r3, r2
 8007194:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	88fa      	ldrh	r2, [r7, #6]
 80071a0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2222      	movs	r2, #34	; 0x22
 80071ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b4:	4a40      	ldr	r2, [pc, #256]	; (80072b8 <UART_Start_Receive_DMA+0x130>)
 80071b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071bc:	4a3f      	ldr	r2, [pc, #252]	; (80072bc <UART_Start_Receive_DMA+0x134>)
 80071be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c4:	4a3e      	ldr	r2, [pc, #248]	; (80072c0 <UART_Start_Receive_DMA+0x138>)
 80071c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071cc:	2200      	movs	r2, #0
 80071ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80071d0:	f107 0308 	add.w	r3, r7, #8
 80071d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	3304      	adds	r3, #4
 80071e0:	4619      	mov	r1, r3
 80071e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	88fb      	ldrh	r3, [r7, #6]
 80071e8:	f7fb f92c 	bl	8002444 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80071ec:	2300      	movs	r3, #0
 80071ee:	613b      	str	r3, [r7, #16]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	613b      	str	r3, [r7, #16]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	613b      	str	r3, [r7, #16]
 8007200:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d019      	beq.n	8007246 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	330c      	adds	r3, #12
 8007218:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800721c:	e853 3f00 	ldrex	r3, [r3]
 8007220:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007228:	65bb      	str	r3, [r7, #88]	; 0x58
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	330c      	adds	r3, #12
 8007230:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007232:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007234:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007236:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007238:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800723a:	e841 2300 	strex	r3, r2, [r1]
 800723e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1e5      	bne.n	8007212 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	3314      	adds	r3, #20
 800724c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007250:	e853 3f00 	ldrex	r3, [r3]
 8007254:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007258:	f043 0301 	orr.w	r3, r3, #1
 800725c:	657b      	str	r3, [r7, #84]	; 0x54
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	3314      	adds	r3, #20
 8007264:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007266:	63ba      	str	r2, [r7, #56]	; 0x38
 8007268:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800726c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800726e:	e841 2300 	strex	r3, r2, [r1]
 8007272:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1e5      	bne.n	8007246 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	3314      	adds	r3, #20
 8007280:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	e853 3f00 	ldrex	r3, [r3]
 8007288:	617b      	str	r3, [r7, #20]
   return(result);
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007290:	653b      	str	r3, [r7, #80]	; 0x50
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	3314      	adds	r3, #20
 8007298:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800729a:	627a      	str	r2, [r7, #36]	; 0x24
 800729c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729e:	6a39      	ldr	r1, [r7, #32]
 80072a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072a2:	e841 2300 	strex	r3, r2, [r1]
 80072a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1e5      	bne.n	800727a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3760      	adds	r7, #96	; 0x60
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	08006f97 	.word	0x08006f97
 80072bc:	080070bd 	.word	0x080070bd
 80072c0:	080070f3 	.word	0x080070f3

080072c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b089      	sub	sp, #36	; 0x24
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	330c      	adds	r3, #12
 80072d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	e853 3f00 	ldrex	r3, [r3]
 80072da:	60bb      	str	r3, [r7, #8]
   return(result);
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80072e2:	61fb      	str	r3, [r7, #28]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	330c      	adds	r3, #12
 80072ea:	69fa      	ldr	r2, [r7, #28]
 80072ec:	61ba      	str	r2, [r7, #24]
 80072ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f0:	6979      	ldr	r1, [r7, #20]
 80072f2:	69ba      	ldr	r2, [r7, #24]
 80072f4:	e841 2300 	strex	r3, r2, [r1]
 80072f8:	613b      	str	r3, [r7, #16]
   return(result);
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1e5      	bne.n	80072cc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2220      	movs	r2, #32
 8007304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007308:	bf00      	nop
 800730a:	3724      	adds	r7, #36	; 0x24
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007314:	b480      	push	{r7}
 8007316:	b095      	sub	sp, #84	; 0x54
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	330c      	adds	r3, #12
 8007322:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007326:	e853 3f00 	ldrex	r3, [r3]
 800732a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800732c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	330c      	adds	r3, #12
 800733a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800733c:	643a      	str	r2, [r7, #64]	; 0x40
 800733e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007340:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007342:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007344:	e841 2300 	strex	r3, r2, [r1]
 8007348:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800734a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1e5      	bne.n	800731c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	3314      	adds	r3, #20
 8007356:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007358:	6a3b      	ldr	r3, [r7, #32]
 800735a:	e853 3f00 	ldrex	r3, [r3]
 800735e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	f023 0301 	bic.w	r3, r3, #1
 8007366:	64bb      	str	r3, [r7, #72]	; 0x48
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	3314      	adds	r3, #20
 800736e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007370:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007372:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007374:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007378:	e841 2300 	strex	r3, r2, [r1]
 800737c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1e5      	bne.n	8007350 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007388:	2b01      	cmp	r3, #1
 800738a:	d119      	bne.n	80073c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	330c      	adds	r3, #12
 8007392:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	e853 3f00 	ldrex	r3, [r3]
 800739a:	60bb      	str	r3, [r7, #8]
   return(result);
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	f023 0310 	bic.w	r3, r3, #16
 80073a2:	647b      	str	r3, [r7, #68]	; 0x44
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	330c      	adds	r3, #12
 80073aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073ac:	61ba      	str	r2, [r7, #24]
 80073ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b0:	6979      	ldr	r1, [r7, #20]
 80073b2:	69ba      	ldr	r2, [r7, #24]
 80073b4:	e841 2300 	strex	r3, r2, [r1]
 80073b8:	613b      	str	r3, [r7, #16]
   return(result);
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1e5      	bne.n	800738c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2220      	movs	r2, #32
 80073c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80073ce:	bf00      	nop
 80073d0:	3754      	adds	r7, #84	; 0x54
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
	...

080073dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073e0:	b0c0      	sub	sp, #256	; 0x100
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80073f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073f8:	68d9      	ldr	r1, [r3, #12]
 80073fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	ea40 0301 	orr.w	r3, r0, r1
 8007404:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800740a:	689a      	ldr	r2, [r3, #8]
 800740c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	431a      	orrs	r2, r3
 8007414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	431a      	orrs	r2, r3
 800741c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007420:	69db      	ldr	r3, [r3, #28]
 8007422:	4313      	orrs	r3, r2
 8007424:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007434:	f021 010c 	bic.w	r1, r1, #12
 8007438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007442:	430b      	orrs	r3, r1
 8007444:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007456:	6999      	ldr	r1, [r3, #24]
 8007458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	ea40 0301 	orr.w	r3, r0, r1
 8007462:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	4b8f      	ldr	r3, [pc, #572]	; (80076a8 <UART_SetConfig+0x2cc>)
 800746c:	429a      	cmp	r2, r3
 800746e:	d005      	beq.n	800747c <UART_SetConfig+0xa0>
 8007470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	4b8d      	ldr	r3, [pc, #564]	; (80076ac <UART_SetConfig+0x2d0>)
 8007478:	429a      	cmp	r2, r3
 800747a:	d104      	bne.n	8007486 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800747c:	f7ff fb78 	bl	8006b70 <HAL_RCC_GetPCLK2Freq>
 8007480:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007484:	e003      	b.n	800748e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007486:	f7ff fb5f 	bl	8006b48 <HAL_RCC_GetPCLK1Freq>
 800748a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800748e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007492:	69db      	ldr	r3, [r3, #28]
 8007494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007498:	f040 810c 	bne.w	80076b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800749c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074a0:	2200      	movs	r2, #0
 80074a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80074a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80074aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80074ae:	4622      	mov	r2, r4
 80074b0:	462b      	mov	r3, r5
 80074b2:	1891      	adds	r1, r2, r2
 80074b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80074b6:	415b      	adcs	r3, r3
 80074b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80074be:	4621      	mov	r1, r4
 80074c0:	eb12 0801 	adds.w	r8, r2, r1
 80074c4:	4629      	mov	r1, r5
 80074c6:	eb43 0901 	adc.w	r9, r3, r1
 80074ca:	f04f 0200 	mov.w	r2, #0
 80074ce:	f04f 0300 	mov.w	r3, #0
 80074d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80074da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80074de:	4690      	mov	r8, r2
 80074e0:	4699      	mov	r9, r3
 80074e2:	4623      	mov	r3, r4
 80074e4:	eb18 0303 	adds.w	r3, r8, r3
 80074e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80074ec:	462b      	mov	r3, r5
 80074ee:	eb49 0303 	adc.w	r3, r9, r3
 80074f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80074f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007502:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007506:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800750a:	460b      	mov	r3, r1
 800750c:	18db      	adds	r3, r3, r3
 800750e:	653b      	str	r3, [r7, #80]	; 0x50
 8007510:	4613      	mov	r3, r2
 8007512:	eb42 0303 	adc.w	r3, r2, r3
 8007516:	657b      	str	r3, [r7, #84]	; 0x54
 8007518:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800751c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007520:	f7f8 fe52 	bl	80001c8 <__aeabi_uldivmod>
 8007524:	4602      	mov	r2, r0
 8007526:	460b      	mov	r3, r1
 8007528:	4b61      	ldr	r3, [pc, #388]	; (80076b0 <UART_SetConfig+0x2d4>)
 800752a:	fba3 2302 	umull	r2, r3, r3, r2
 800752e:	095b      	lsrs	r3, r3, #5
 8007530:	011c      	lsls	r4, r3, #4
 8007532:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007536:	2200      	movs	r2, #0
 8007538:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800753c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007540:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007544:	4642      	mov	r2, r8
 8007546:	464b      	mov	r3, r9
 8007548:	1891      	adds	r1, r2, r2
 800754a:	64b9      	str	r1, [r7, #72]	; 0x48
 800754c:	415b      	adcs	r3, r3
 800754e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007550:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007554:	4641      	mov	r1, r8
 8007556:	eb12 0a01 	adds.w	sl, r2, r1
 800755a:	4649      	mov	r1, r9
 800755c:	eb43 0b01 	adc.w	fp, r3, r1
 8007560:	f04f 0200 	mov.w	r2, #0
 8007564:	f04f 0300 	mov.w	r3, #0
 8007568:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800756c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007570:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007574:	4692      	mov	sl, r2
 8007576:	469b      	mov	fp, r3
 8007578:	4643      	mov	r3, r8
 800757a:	eb1a 0303 	adds.w	r3, sl, r3
 800757e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007582:	464b      	mov	r3, r9
 8007584:	eb4b 0303 	adc.w	r3, fp, r3
 8007588:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800758c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007598:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800759c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80075a0:	460b      	mov	r3, r1
 80075a2:	18db      	adds	r3, r3, r3
 80075a4:	643b      	str	r3, [r7, #64]	; 0x40
 80075a6:	4613      	mov	r3, r2
 80075a8:	eb42 0303 	adc.w	r3, r2, r3
 80075ac:	647b      	str	r3, [r7, #68]	; 0x44
 80075ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80075b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80075b6:	f7f8 fe07 	bl	80001c8 <__aeabi_uldivmod>
 80075ba:	4602      	mov	r2, r0
 80075bc:	460b      	mov	r3, r1
 80075be:	4611      	mov	r1, r2
 80075c0:	4b3b      	ldr	r3, [pc, #236]	; (80076b0 <UART_SetConfig+0x2d4>)
 80075c2:	fba3 2301 	umull	r2, r3, r3, r1
 80075c6:	095b      	lsrs	r3, r3, #5
 80075c8:	2264      	movs	r2, #100	; 0x64
 80075ca:	fb02 f303 	mul.w	r3, r2, r3
 80075ce:	1acb      	subs	r3, r1, r3
 80075d0:	00db      	lsls	r3, r3, #3
 80075d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80075d6:	4b36      	ldr	r3, [pc, #216]	; (80076b0 <UART_SetConfig+0x2d4>)
 80075d8:	fba3 2302 	umull	r2, r3, r3, r2
 80075dc:	095b      	lsrs	r3, r3, #5
 80075de:	005b      	lsls	r3, r3, #1
 80075e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80075e4:	441c      	add	r4, r3
 80075e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075ea:	2200      	movs	r2, #0
 80075ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80075f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80075f8:	4642      	mov	r2, r8
 80075fa:	464b      	mov	r3, r9
 80075fc:	1891      	adds	r1, r2, r2
 80075fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8007600:	415b      	adcs	r3, r3
 8007602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007604:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007608:	4641      	mov	r1, r8
 800760a:	1851      	adds	r1, r2, r1
 800760c:	6339      	str	r1, [r7, #48]	; 0x30
 800760e:	4649      	mov	r1, r9
 8007610:	414b      	adcs	r3, r1
 8007612:	637b      	str	r3, [r7, #52]	; 0x34
 8007614:	f04f 0200 	mov.w	r2, #0
 8007618:	f04f 0300 	mov.w	r3, #0
 800761c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007620:	4659      	mov	r1, fp
 8007622:	00cb      	lsls	r3, r1, #3
 8007624:	4651      	mov	r1, sl
 8007626:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800762a:	4651      	mov	r1, sl
 800762c:	00ca      	lsls	r2, r1, #3
 800762e:	4610      	mov	r0, r2
 8007630:	4619      	mov	r1, r3
 8007632:	4603      	mov	r3, r0
 8007634:	4642      	mov	r2, r8
 8007636:	189b      	adds	r3, r3, r2
 8007638:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800763c:	464b      	mov	r3, r9
 800763e:	460a      	mov	r2, r1
 8007640:	eb42 0303 	adc.w	r3, r2, r3
 8007644:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007654:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007658:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800765c:	460b      	mov	r3, r1
 800765e:	18db      	adds	r3, r3, r3
 8007660:	62bb      	str	r3, [r7, #40]	; 0x28
 8007662:	4613      	mov	r3, r2
 8007664:	eb42 0303 	adc.w	r3, r2, r3
 8007668:	62fb      	str	r3, [r7, #44]	; 0x2c
 800766a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800766e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007672:	f7f8 fda9 	bl	80001c8 <__aeabi_uldivmod>
 8007676:	4602      	mov	r2, r0
 8007678:	460b      	mov	r3, r1
 800767a:	4b0d      	ldr	r3, [pc, #52]	; (80076b0 <UART_SetConfig+0x2d4>)
 800767c:	fba3 1302 	umull	r1, r3, r3, r2
 8007680:	095b      	lsrs	r3, r3, #5
 8007682:	2164      	movs	r1, #100	; 0x64
 8007684:	fb01 f303 	mul.w	r3, r1, r3
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	00db      	lsls	r3, r3, #3
 800768c:	3332      	adds	r3, #50	; 0x32
 800768e:	4a08      	ldr	r2, [pc, #32]	; (80076b0 <UART_SetConfig+0x2d4>)
 8007690:	fba2 2303 	umull	r2, r3, r2, r3
 8007694:	095b      	lsrs	r3, r3, #5
 8007696:	f003 0207 	and.w	r2, r3, #7
 800769a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4422      	add	r2, r4
 80076a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80076a4:	e105      	b.n	80078b2 <UART_SetConfig+0x4d6>
 80076a6:	bf00      	nop
 80076a8:	40011000 	.word	0x40011000
 80076ac:	40011400 	.word	0x40011400
 80076b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80076b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076b8:	2200      	movs	r2, #0
 80076ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80076be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80076c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80076c6:	4642      	mov	r2, r8
 80076c8:	464b      	mov	r3, r9
 80076ca:	1891      	adds	r1, r2, r2
 80076cc:	6239      	str	r1, [r7, #32]
 80076ce:	415b      	adcs	r3, r3
 80076d0:	627b      	str	r3, [r7, #36]	; 0x24
 80076d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80076d6:	4641      	mov	r1, r8
 80076d8:	1854      	adds	r4, r2, r1
 80076da:	4649      	mov	r1, r9
 80076dc:	eb43 0501 	adc.w	r5, r3, r1
 80076e0:	f04f 0200 	mov.w	r2, #0
 80076e4:	f04f 0300 	mov.w	r3, #0
 80076e8:	00eb      	lsls	r3, r5, #3
 80076ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80076ee:	00e2      	lsls	r2, r4, #3
 80076f0:	4614      	mov	r4, r2
 80076f2:	461d      	mov	r5, r3
 80076f4:	4643      	mov	r3, r8
 80076f6:	18e3      	adds	r3, r4, r3
 80076f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80076fc:	464b      	mov	r3, r9
 80076fe:	eb45 0303 	adc.w	r3, r5, r3
 8007702:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007712:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007716:	f04f 0200 	mov.w	r2, #0
 800771a:	f04f 0300 	mov.w	r3, #0
 800771e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007722:	4629      	mov	r1, r5
 8007724:	008b      	lsls	r3, r1, #2
 8007726:	4621      	mov	r1, r4
 8007728:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800772c:	4621      	mov	r1, r4
 800772e:	008a      	lsls	r2, r1, #2
 8007730:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007734:	f7f8 fd48 	bl	80001c8 <__aeabi_uldivmod>
 8007738:	4602      	mov	r2, r0
 800773a:	460b      	mov	r3, r1
 800773c:	4b60      	ldr	r3, [pc, #384]	; (80078c0 <UART_SetConfig+0x4e4>)
 800773e:	fba3 2302 	umull	r2, r3, r3, r2
 8007742:	095b      	lsrs	r3, r3, #5
 8007744:	011c      	lsls	r4, r3, #4
 8007746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800774a:	2200      	movs	r2, #0
 800774c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007750:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007754:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007758:	4642      	mov	r2, r8
 800775a:	464b      	mov	r3, r9
 800775c:	1891      	adds	r1, r2, r2
 800775e:	61b9      	str	r1, [r7, #24]
 8007760:	415b      	adcs	r3, r3
 8007762:	61fb      	str	r3, [r7, #28]
 8007764:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007768:	4641      	mov	r1, r8
 800776a:	1851      	adds	r1, r2, r1
 800776c:	6139      	str	r1, [r7, #16]
 800776e:	4649      	mov	r1, r9
 8007770:	414b      	adcs	r3, r1
 8007772:	617b      	str	r3, [r7, #20]
 8007774:	f04f 0200 	mov.w	r2, #0
 8007778:	f04f 0300 	mov.w	r3, #0
 800777c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007780:	4659      	mov	r1, fp
 8007782:	00cb      	lsls	r3, r1, #3
 8007784:	4651      	mov	r1, sl
 8007786:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800778a:	4651      	mov	r1, sl
 800778c:	00ca      	lsls	r2, r1, #3
 800778e:	4610      	mov	r0, r2
 8007790:	4619      	mov	r1, r3
 8007792:	4603      	mov	r3, r0
 8007794:	4642      	mov	r2, r8
 8007796:	189b      	adds	r3, r3, r2
 8007798:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800779c:	464b      	mov	r3, r9
 800779e:	460a      	mov	r2, r1
 80077a0:	eb42 0303 	adc.w	r3, r2, r3
 80077a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80077a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80077b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80077b4:	f04f 0200 	mov.w	r2, #0
 80077b8:	f04f 0300 	mov.w	r3, #0
 80077bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80077c0:	4649      	mov	r1, r9
 80077c2:	008b      	lsls	r3, r1, #2
 80077c4:	4641      	mov	r1, r8
 80077c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077ca:	4641      	mov	r1, r8
 80077cc:	008a      	lsls	r2, r1, #2
 80077ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80077d2:	f7f8 fcf9 	bl	80001c8 <__aeabi_uldivmod>
 80077d6:	4602      	mov	r2, r0
 80077d8:	460b      	mov	r3, r1
 80077da:	4b39      	ldr	r3, [pc, #228]	; (80078c0 <UART_SetConfig+0x4e4>)
 80077dc:	fba3 1302 	umull	r1, r3, r3, r2
 80077e0:	095b      	lsrs	r3, r3, #5
 80077e2:	2164      	movs	r1, #100	; 0x64
 80077e4:	fb01 f303 	mul.w	r3, r1, r3
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	011b      	lsls	r3, r3, #4
 80077ec:	3332      	adds	r3, #50	; 0x32
 80077ee:	4a34      	ldr	r2, [pc, #208]	; (80078c0 <UART_SetConfig+0x4e4>)
 80077f0:	fba2 2303 	umull	r2, r3, r2, r3
 80077f4:	095b      	lsrs	r3, r3, #5
 80077f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077fa:	441c      	add	r4, r3
 80077fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007800:	2200      	movs	r2, #0
 8007802:	673b      	str	r3, [r7, #112]	; 0x70
 8007804:	677a      	str	r2, [r7, #116]	; 0x74
 8007806:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800780a:	4642      	mov	r2, r8
 800780c:	464b      	mov	r3, r9
 800780e:	1891      	adds	r1, r2, r2
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	415b      	adcs	r3, r3
 8007814:	60fb      	str	r3, [r7, #12]
 8007816:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800781a:	4641      	mov	r1, r8
 800781c:	1851      	adds	r1, r2, r1
 800781e:	6039      	str	r1, [r7, #0]
 8007820:	4649      	mov	r1, r9
 8007822:	414b      	adcs	r3, r1
 8007824:	607b      	str	r3, [r7, #4]
 8007826:	f04f 0200 	mov.w	r2, #0
 800782a:	f04f 0300 	mov.w	r3, #0
 800782e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007832:	4659      	mov	r1, fp
 8007834:	00cb      	lsls	r3, r1, #3
 8007836:	4651      	mov	r1, sl
 8007838:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800783c:	4651      	mov	r1, sl
 800783e:	00ca      	lsls	r2, r1, #3
 8007840:	4610      	mov	r0, r2
 8007842:	4619      	mov	r1, r3
 8007844:	4603      	mov	r3, r0
 8007846:	4642      	mov	r2, r8
 8007848:	189b      	adds	r3, r3, r2
 800784a:	66bb      	str	r3, [r7, #104]	; 0x68
 800784c:	464b      	mov	r3, r9
 800784e:	460a      	mov	r2, r1
 8007850:	eb42 0303 	adc.w	r3, r2, r3
 8007854:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	663b      	str	r3, [r7, #96]	; 0x60
 8007860:	667a      	str	r2, [r7, #100]	; 0x64
 8007862:	f04f 0200 	mov.w	r2, #0
 8007866:	f04f 0300 	mov.w	r3, #0
 800786a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800786e:	4649      	mov	r1, r9
 8007870:	008b      	lsls	r3, r1, #2
 8007872:	4641      	mov	r1, r8
 8007874:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007878:	4641      	mov	r1, r8
 800787a:	008a      	lsls	r2, r1, #2
 800787c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007880:	f7f8 fca2 	bl	80001c8 <__aeabi_uldivmod>
 8007884:	4602      	mov	r2, r0
 8007886:	460b      	mov	r3, r1
 8007888:	4b0d      	ldr	r3, [pc, #52]	; (80078c0 <UART_SetConfig+0x4e4>)
 800788a:	fba3 1302 	umull	r1, r3, r3, r2
 800788e:	095b      	lsrs	r3, r3, #5
 8007890:	2164      	movs	r1, #100	; 0x64
 8007892:	fb01 f303 	mul.w	r3, r1, r3
 8007896:	1ad3      	subs	r3, r2, r3
 8007898:	011b      	lsls	r3, r3, #4
 800789a:	3332      	adds	r3, #50	; 0x32
 800789c:	4a08      	ldr	r2, [pc, #32]	; (80078c0 <UART_SetConfig+0x4e4>)
 800789e:	fba2 2303 	umull	r2, r3, r2, r3
 80078a2:	095b      	lsrs	r3, r3, #5
 80078a4:	f003 020f 	and.w	r2, r3, #15
 80078a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4422      	add	r2, r4
 80078b0:	609a      	str	r2, [r3, #8]
}
 80078b2:	bf00      	nop
 80078b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80078b8:	46bd      	mov	sp, r7
 80078ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078be:	bf00      	nop
 80078c0:	51eb851f 	.word	0x51eb851f

080078c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078c4:	b084      	sub	sp, #16
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b084      	sub	sp, #16
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
 80078ce:	f107 001c 	add.w	r0, r7, #28
 80078d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80078d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d122      	bne.n	8007922 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80078f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007906:	2b01      	cmp	r3, #1
 8007908:	d105      	bne.n	8007916 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 f9c0 	bl	8007c9c <USB_CoreReset>
 800791c:	4603      	mov	r3, r0
 800791e:	73fb      	strb	r3, [r7, #15]
 8007920:	e01a      	b.n	8007958 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f9b4 	bl	8007c9c <USB_CoreReset>
 8007934:	4603      	mov	r3, r0
 8007936:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800793a:	2b00      	cmp	r3, #0
 800793c:	d106      	bne.n	800794c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007942:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	639a      	str	r2, [r3, #56]	; 0x38
 800794a:	e005      	b.n	8007958 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007950:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795a:	2b01      	cmp	r3, #1
 800795c:	d10b      	bne.n	8007976 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f043 0206 	orr.w	r2, r3, #6
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	f043 0220 	orr.w	r2, r3, #32
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007976:	7bfb      	ldrb	r3, [r7, #15]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007982:	b004      	add	sp, #16
 8007984:	4770      	bx	lr

08007986 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007986:	b480      	push	{r7}
 8007988:	b083      	sub	sp, #12
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f043 0201 	orr.w	r2, r3, #1
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f023 0201 	bic.w	r2, r3, #1
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	370c      	adds	r7, #12
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b084      	sub	sp, #16
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	460b      	mov	r3, r1
 80079d4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80079d6:	2300      	movs	r3, #0
 80079d8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80079e6:	78fb      	ldrb	r3, [r7, #3]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d115      	bne.n	8007a18 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80079f8:	2001      	movs	r0, #1
 80079fa:	f7fa fae1 	bl	8001fc0 <HAL_Delay>
      ms++;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	3301      	adds	r3, #1
 8007a02:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 f93a 	bl	8007c7e <USB_GetMode>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d01e      	beq.n	8007a4e <USB_SetCurrentMode+0x84>
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2b31      	cmp	r3, #49	; 0x31
 8007a14:	d9f0      	bls.n	80079f8 <USB_SetCurrentMode+0x2e>
 8007a16:	e01a      	b.n	8007a4e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007a18:	78fb      	ldrb	r3, [r7, #3]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d115      	bne.n	8007a4a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007a2a:	2001      	movs	r0, #1
 8007a2c:	f7fa fac8 	bl	8001fc0 <HAL_Delay>
      ms++;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	3301      	adds	r3, #1
 8007a34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f921 	bl	8007c7e <USB_GetMode>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d005      	beq.n	8007a4e <USB_SetCurrentMode+0x84>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2b31      	cmp	r3, #49	; 0x31
 8007a46:	d9f0      	bls.n	8007a2a <USB_SetCurrentMode+0x60>
 8007a48:	e001      	b.n	8007a4e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e005      	b.n	8007a5a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2b32      	cmp	r3, #50	; 0x32
 8007a52:	d101      	bne.n	8007a58 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	e000      	b.n	8007a5a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
	...

08007a64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	3301      	adds	r3, #1
 8007a76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	4a13      	ldr	r2, [pc, #76]	; (8007ac8 <USB_FlushTxFifo+0x64>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d901      	bls.n	8007a84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	e01b      	b.n	8007abc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	daf2      	bge.n	8007a72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	019b      	lsls	r3, r3, #6
 8007a94:	f043 0220 	orr.w	r2, r3, #32
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	4a08      	ldr	r2, [pc, #32]	; (8007ac8 <USB_FlushTxFifo+0x64>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d901      	bls.n	8007aae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e006      	b.n	8007abc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	f003 0320 	and.w	r3, r3, #32
 8007ab6:	2b20      	cmp	r3, #32
 8007ab8:	d0f0      	beq.n	8007a9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3714      	adds	r7, #20
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr
 8007ac8:	00030d40 	.word	0x00030d40

08007acc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	3301      	adds	r3, #1
 8007adc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	4a11      	ldr	r2, [pc, #68]	; (8007b28 <USB_FlushRxFifo+0x5c>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d901      	bls.n	8007aea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e018      	b.n	8007b1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	daf2      	bge.n	8007ad8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007af2:	2300      	movs	r3, #0
 8007af4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2210      	movs	r2, #16
 8007afa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	3301      	adds	r3, #1
 8007b00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	4a08      	ldr	r2, [pc, #32]	; (8007b28 <USB_FlushRxFifo+0x5c>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d901      	bls.n	8007b0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e006      	b.n	8007b1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	f003 0310 	and.w	r3, r3, #16
 8007b16:	2b10      	cmp	r3, #16
 8007b18:	d0f0      	beq.n	8007afc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3714      	adds	r7, #20
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr
 8007b28:	00030d40 	.word	0x00030d40

08007b2c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b089      	sub	sp, #36	; 0x24
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	4611      	mov	r1, r2
 8007b38:	461a      	mov	r2, r3
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	71fb      	strb	r3, [r7, #7]
 8007b3e:	4613      	mov	r3, r2
 8007b40:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007b4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d123      	bne.n	8007b9a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007b52:	88bb      	ldrh	r3, [r7, #4]
 8007b54:	3303      	adds	r3, #3
 8007b56:	089b      	lsrs	r3, r3, #2
 8007b58:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	61bb      	str	r3, [r7, #24]
 8007b5e:	e018      	b.n	8007b92 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007b60:	79fb      	ldrb	r3, [r7, #7]
 8007b62:	031a      	lsls	r2, r3, #12
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	4413      	add	r3, r2
 8007b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	3301      	adds	r3, #1
 8007b78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	3301      	adds	r3, #1
 8007b84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	61bb      	str	r3, [r7, #24]
 8007b92:	69ba      	ldr	r2, [r7, #24]
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d3e2      	bcc.n	8007b60 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3724      	adds	r7, #36	; 0x24
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b08b      	sub	sp, #44	; 0x2c
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	4613      	mov	r3, r2
 8007bb4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007bbe:	88fb      	ldrh	r3, [r7, #6]
 8007bc0:	089b      	lsrs	r3, r3, #2
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007bc6:	88fb      	ldrh	r3, [r7, #6]
 8007bc8:	f003 0303 	and.w	r3, r3, #3
 8007bcc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007bce:	2300      	movs	r3, #0
 8007bd0:	623b      	str	r3, [r7, #32]
 8007bd2:	e014      	b.n	8007bfe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bde:	601a      	str	r2, [r3, #0]
    pDest++;
 8007be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be2:	3301      	adds	r3, #1
 8007be4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be8:	3301      	adds	r3, #1
 8007bea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bee:	3301      	adds	r3, #1
 8007bf0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007bf8:	6a3b      	ldr	r3, [r7, #32]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	623b      	str	r3, [r7, #32]
 8007bfe:	6a3a      	ldr	r2, [r7, #32]
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d3e6      	bcc.n	8007bd4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007c06:	8bfb      	ldrh	r3, [r7, #30]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d01e      	beq.n	8007c4a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c16:	461a      	mov	r2, r3
 8007c18:	f107 0310 	add.w	r3, r7, #16
 8007c1c:	6812      	ldr	r2, [r2, #0]
 8007c1e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	6a3b      	ldr	r3, [r7, #32]
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	00db      	lsls	r3, r3, #3
 8007c28:	fa22 f303 	lsr.w	r3, r2, r3
 8007c2c:	b2da      	uxtb	r2, r3
 8007c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c30:	701a      	strb	r2, [r3, #0]
      i++;
 8007c32:	6a3b      	ldr	r3, [r7, #32]
 8007c34:	3301      	adds	r3, #1
 8007c36:	623b      	str	r3, [r7, #32]
      pDest++;
 8007c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007c3e:	8bfb      	ldrh	r3, [r7, #30]
 8007c40:	3b01      	subs	r3, #1
 8007c42:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007c44:	8bfb      	ldrh	r3, [r7, #30]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1ea      	bne.n	8007c20 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	372c      	adds	r7, #44	; 0x2c
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	695b      	ldr	r3, [r3, #20]
 8007c64:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	4013      	ands	r3, r2
 8007c6e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007c70:	68fb      	ldr	r3, [r7, #12]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3714      	adds	r7, #20
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr

08007c7e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007c7e:	b480      	push	{r7}
 8007c80:	b083      	sub	sp, #12
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	f003 0301 	and.w	r3, r3, #1
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	370c      	adds	r7, #12
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr
	...

08007c9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b085      	sub	sp, #20
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	3301      	adds	r3, #1
 8007cac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	4a13      	ldr	r2, [pc, #76]	; (8007d00 <USB_CoreReset+0x64>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d901      	bls.n	8007cba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	e01b      	b.n	8007cf2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	daf2      	bge.n	8007ca8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	f043 0201 	orr.w	r2, r3, #1
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	4a09      	ldr	r2, [pc, #36]	; (8007d00 <USB_CoreReset+0x64>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d901      	bls.n	8007ce4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	e006      	b.n	8007cf2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	f003 0301 	and.w	r3, r3, #1
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d0f0      	beq.n	8007cd2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3714      	adds	r7, #20
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop
 8007d00:	00030d40 	.word	0x00030d40

08007d04 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d04:	b084      	sub	sp, #16
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b086      	sub	sp, #24
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
 8007d0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007d12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007d16:	2300      	movs	r3, #0
 8007d18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d24:	461a      	mov	r2, r3
 8007d26:	2300      	movs	r3, #0
 8007d28:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d2e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d46:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d018      	beq.n	8007d8c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d10a      	bne.n	8007d76 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d6e:	f043 0304 	orr.w	r3, r3, #4
 8007d72:	6013      	str	r3, [r2, #0]
 8007d74:	e014      	b.n	8007da0 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d84:	f023 0304 	bic.w	r3, r3, #4
 8007d88:	6013      	str	r3, [r2, #0]
 8007d8a:	e009      	b.n	8007da0 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68fa      	ldr	r2, [r7, #12]
 8007d96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d9a:	f023 0304 	bic.w	r3, r3, #4
 8007d9e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007da0:	2110      	movs	r1, #16
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f7ff fe5e 	bl	8007a64 <USB_FlushTxFifo>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d001      	beq.n	8007db2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f7ff fe8a 	bl	8007acc <USB_FlushRxFifo>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d001      	beq.n	8007dc2 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	613b      	str	r3, [r7, #16]
 8007dc6:	e015      	b.n	8007df4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	015a      	lsls	r2, r3, #5
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	4413      	add	r3, r2
 8007dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007dda:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	015a      	lsls	r2, r3, #5
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	4413      	add	r3, r2
 8007de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007de8:	461a      	mov	r2, r3
 8007dea:	2300      	movs	r3, #0
 8007dec:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	3301      	adds	r3, #1
 8007df2:	613b      	str	r3, [r7, #16]
 8007df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df6:	693a      	ldr	r2, [r7, #16]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d3e5      	bcc.n	8007dc8 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e08:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00b      	beq.n	8007e2e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e1c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a13      	ldr	r2, [pc, #76]	; (8007e70 <USB_HostInit+0x16c>)
 8007e22:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4a13      	ldr	r2, [pc, #76]	; (8007e74 <USB_HostInit+0x170>)
 8007e28:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007e2c:	e009      	b.n	8007e42 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2280      	movs	r2, #128	; 0x80
 8007e32:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a10      	ldr	r2, [pc, #64]	; (8007e78 <USB_HostInit+0x174>)
 8007e38:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a0f      	ldr	r2, [pc, #60]	; (8007e7c <USB_HostInit+0x178>)
 8007e3e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d105      	bne.n	8007e54 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	699b      	ldr	r3, [r3, #24]
 8007e4c:	f043 0210 	orr.w	r2, r3, #16
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	699a      	ldr	r2, [r3, #24]
 8007e58:	4b09      	ldr	r3, [pc, #36]	; (8007e80 <USB_HostInit+0x17c>)
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3718      	adds	r7, #24
 8007e66:	46bd      	mov	sp, r7
 8007e68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e6c:	b004      	add	sp, #16
 8007e6e:	4770      	bx	lr
 8007e70:	01000200 	.word	0x01000200
 8007e74:	00e00300 	.word	0x00e00300
 8007e78:	00600080 	.word	0x00600080
 8007e7c:	004000e0 	.word	0x004000e0
 8007e80:	a3200008 	.word	0xa3200008

08007e84 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ea2:	f023 0303 	bic.w	r3, r3, #3
 8007ea6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	78fb      	ldrb	r3, [r7, #3]
 8007eb2:	f003 0303 	and.w	r3, r3, #3
 8007eb6:	68f9      	ldr	r1, [r7, #12]
 8007eb8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007ec0:	78fb      	ldrb	r3, [r7, #3]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d107      	bne.n	8007ed6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ecc:	461a      	mov	r2, r3
 8007ece:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007ed2:	6053      	str	r3, [r2, #4]
 8007ed4:	e009      	b.n	8007eea <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007ed6:	78fb      	ldrb	r3, [r7, #3]
 8007ed8:	2b02      	cmp	r3, #2
 8007eda:	d106      	bne.n	8007eea <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	f241 7370 	movw	r3, #6000	; 0x1770
 8007ee8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007eea:	2300      	movs	r3, #0
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3714      	adds	r7, #20
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007f04:	2300      	movs	r3, #0
 8007f06:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007f18:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f26:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007f28:	2064      	movs	r0, #100	; 0x64
 8007f2a:	f7fa f849 	bl	8001fc0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007f36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f3a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007f3c:	200a      	movs	r0, #10
 8007f3e:	f7fa f83f 	bl	8001fc0 <HAL_Delay>

  return HAL_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	460b      	mov	r3, r1
 8007f56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007f70:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d109      	bne.n	8007f90 <USB_DriveVbus+0x44>
 8007f7c:	78fb      	ldrb	r3, [r7, #3]
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d106      	bne.n	8007f90 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007f8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007f8e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f9a:	d109      	bne.n	8007fb0 <USB_DriveVbus+0x64>
 8007f9c:	78fb      	ldrb	r3, [r7, #3]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d106      	bne.n	8007fb0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007faa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fae:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3714      	adds	r7, #20
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr

08007fbe <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007fbe:	b480      	push	{r7}
 8007fc0:	b085      	sub	sp, #20
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	0c5b      	lsrs	r3, r3, #17
 8007fdc:	f003 0303 	and.w	r3, r3, #3
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3714      	adds	r7, #20
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b085      	sub	sp, #20
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	b29b      	uxth	r3, r3
}
 8008002:	4618      	mov	r0, r3
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
	...

08008010 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b088      	sub	sp, #32
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	4608      	mov	r0, r1
 800801a:	4611      	mov	r1, r2
 800801c:	461a      	mov	r2, r3
 800801e:	4603      	mov	r3, r0
 8008020:	70fb      	strb	r3, [r7, #3]
 8008022:	460b      	mov	r3, r1
 8008024:	70bb      	strb	r3, [r7, #2]
 8008026:	4613      	mov	r3, r2
 8008028:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800802a:	2300      	movs	r3, #0
 800802c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008032:	78fb      	ldrb	r3, [r7, #3]
 8008034:	015a      	lsls	r2, r3, #5
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	4413      	add	r3, r2
 800803a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800803e:	461a      	mov	r2, r3
 8008040:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008044:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008046:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800804a:	2b03      	cmp	r3, #3
 800804c:	d87e      	bhi.n	800814c <USB_HC_Init+0x13c>
 800804e:	a201      	add	r2, pc, #4	; (adr r2, 8008054 <USB_HC_Init+0x44>)
 8008050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008054:	08008065 	.word	0x08008065
 8008058:	0800810f 	.word	0x0800810f
 800805c:	08008065 	.word	0x08008065
 8008060:	080080d1 	.word	0x080080d1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008064:	78fb      	ldrb	r3, [r7, #3]
 8008066:	015a      	lsls	r2, r3, #5
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	4413      	add	r3, r2
 800806c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008070:	461a      	mov	r2, r3
 8008072:	f240 439d 	movw	r3, #1181	; 0x49d
 8008076:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008078:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800807c:	2b00      	cmp	r3, #0
 800807e:	da10      	bge.n	80080a2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008080:	78fb      	ldrb	r3, [r7, #3]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	4413      	add	r3, r2
 8008088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	78fa      	ldrb	r2, [r7, #3]
 8008090:	0151      	lsls	r1, r2, #5
 8008092:	693a      	ldr	r2, [r7, #16]
 8008094:	440a      	add	r2, r1
 8008096:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800809a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800809e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80080a0:	e057      	b.n	8008152 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d051      	beq.n	8008152 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80080ae:	78fb      	ldrb	r3, [r7, #3]
 80080b0:	015a      	lsls	r2, r3, #5
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	4413      	add	r3, r2
 80080b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	78fa      	ldrb	r2, [r7, #3]
 80080be:	0151      	lsls	r1, r2, #5
 80080c0:	693a      	ldr	r2, [r7, #16]
 80080c2:	440a      	add	r2, r1
 80080c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080c8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80080cc:	60d3      	str	r3, [r2, #12]
      break;
 80080ce:	e040      	b.n	8008152 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80080d0:	78fb      	ldrb	r3, [r7, #3]
 80080d2:	015a      	lsls	r2, r3, #5
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	4413      	add	r3, r2
 80080d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080dc:	461a      	mov	r2, r3
 80080de:	f240 639d 	movw	r3, #1693	; 0x69d
 80080e2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80080e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	da34      	bge.n	8008156 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80080ec:	78fb      	ldrb	r3, [r7, #3]
 80080ee:	015a      	lsls	r2, r3, #5
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	4413      	add	r3, r2
 80080f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	78fa      	ldrb	r2, [r7, #3]
 80080fc:	0151      	lsls	r1, r2, #5
 80080fe:	693a      	ldr	r2, [r7, #16]
 8008100:	440a      	add	r2, r1
 8008102:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800810a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800810c:	e023      	b.n	8008156 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800810e:	78fb      	ldrb	r3, [r7, #3]
 8008110:	015a      	lsls	r2, r3, #5
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	4413      	add	r3, r2
 8008116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800811a:	461a      	mov	r2, r3
 800811c:	f240 2325 	movw	r3, #549	; 0x225
 8008120:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008122:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008126:	2b00      	cmp	r3, #0
 8008128:	da17      	bge.n	800815a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800812a:	78fb      	ldrb	r3, [r7, #3]
 800812c:	015a      	lsls	r2, r3, #5
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	4413      	add	r3, r2
 8008132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	78fa      	ldrb	r2, [r7, #3]
 800813a:	0151      	lsls	r1, r2, #5
 800813c:	693a      	ldr	r2, [r7, #16]
 800813e:	440a      	add	r2, r1
 8008140:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008144:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008148:	60d3      	str	r3, [r2, #12]
      }
      break;
 800814a:	e006      	b.n	800815a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	77fb      	strb	r3, [r7, #31]
      break;
 8008150:	e004      	b.n	800815c <USB_HC_Init+0x14c>
      break;
 8008152:	bf00      	nop
 8008154:	e002      	b.n	800815c <USB_HC_Init+0x14c>
      break;
 8008156:	bf00      	nop
 8008158:	e000      	b.n	800815c <USB_HC_Init+0x14c>
      break;
 800815a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800815c:	78fb      	ldrb	r3, [r7, #3]
 800815e:	015a      	lsls	r2, r3, #5
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	4413      	add	r3, r2
 8008164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	78fa      	ldrb	r2, [r7, #3]
 800816c:	0151      	lsls	r1, r2, #5
 800816e:	693a      	ldr	r2, [r7, #16]
 8008170:	440a      	add	r2, r1
 8008172:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008176:	f043 0302 	orr.w	r3, r3, #2
 800817a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008182:	699a      	ldr	r2, [r3, #24]
 8008184:	78fb      	ldrb	r3, [r7, #3]
 8008186:	f003 030f 	and.w	r3, r3, #15
 800818a:	2101      	movs	r1, #1
 800818c:	fa01 f303 	lsl.w	r3, r1, r3
 8008190:	6939      	ldr	r1, [r7, #16]
 8008192:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008196:	4313      	orrs	r3, r2
 8008198:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	699b      	ldr	r3, [r3, #24]
 800819e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80081a6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	da03      	bge.n	80081b6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80081ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081b2:	61bb      	str	r3, [r7, #24]
 80081b4:	e001      	b.n	80081ba <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80081b6:	2300      	movs	r3, #0
 80081b8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f7ff feff 	bl	8007fbe <USB_GetHostSpeed>
 80081c0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80081c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	d106      	bne.n	80081d8 <USB_HC_Init+0x1c8>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d003      	beq.n	80081d8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80081d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80081d4:	617b      	str	r3, [r7, #20]
 80081d6:	e001      	b.n	80081dc <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80081d8:	2300      	movs	r3, #0
 80081da:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80081dc:	787b      	ldrb	r3, [r7, #1]
 80081de:	059b      	lsls	r3, r3, #22
 80081e0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80081e4:	78bb      	ldrb	r3, [r7, #2]
 80081e6:	02db      	lsls	r3, r3, #11
 80081e8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80081ec:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80081ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80081f2:	049b      	lsls	r3, r3, #18
 80081f4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80081f8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80081fa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80081fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008200:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008206:	78fb      	ldrb	r3, [r7, #3]
 8008208:	0159      	lsls	r1, r3, #5
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	440b      	add	r3, r1
 800820e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008212:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008218:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800821a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800821e:	2b03      	cmp	r3, #3
 8008220:	d003      	beq.n	800822a <USB_HC_Init+0x21a>
 8008222:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008226:	2b01      	cmp	r3, #1
 8008228:	d10f      	bne.n	800824a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800822a:	78fb      	ldrb	r3, [r7, #3]
 800822c:	015a      	lsls	r2, r3, #5
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	4413      	add	r3, r2
 8008232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	78fa      	ldrb	r2, [r7, #3]
 800823a:	0151      	lsls	r1, r2, #5
 800823c:	693a      	ldr	r2, [r7, #16]
 800823e:	440a      	add	r2, r1
 8008240:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008244:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008248:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800824a:	7ffb      	ldrb	r3, [r7, #31]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3720      	adds	r7, #32
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b08c      	sub	sp, #48	; 0x30
 8008258:	af02      	add	r7, sp, #8
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	4613      	mov	r3, r2
 8008260:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	785b      	ldrb	r3, [r3, #1]
 800826a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800826c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008270:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800827a:	2b00      	cmp	r3, #0
 800827c:	d02d      	beq.n	80082da <USB_HC_StartXfer+0x86>
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	791b      	ldrb	r3, [r3, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d129      	bne.n	80082da <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008286:	79fb      	ldrb	r3, [r7, #7]
 8008288:	2b01      	cmp	r3, #1
 800828a:	d117      	bne.n	80082bc <USB_HC_StartXfer+0x68>
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	79db      	ldrb	r3, [r3, #7]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d003      	beq.n	800829c <USB_HC_StartXfer+0x48>
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	79db      	ldrb	r3, [r3, #7]
 8008298:	2b02      	cmp	r3, #2
 800829a:	d10f      	bne.n	80082bc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	015a      	lsls	r2, r3, #5
 80082a0:	6a3b      	ldr	r3, [r7, #32]
 80082a2:	4413      	add	r3, r2
 80082a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	69fa      	ldr	r2, [r7, #28]
 80082ac:	0151      	lsls	r1, r2, #5
 80082ae:	6a3a      	ldr	r2, [r7, #32]
 80082b0:	440a      	add	r2, r1
 80082b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ba:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80082bc:	79fb      	ldrb	r3, [r7, #7]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d10b      	bne.n	80082da <USB_HC_StartXfer+0x86>
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	795b      	ldrb	r3, [r3, #5]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d107      	bne.n	80082da <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	785b      	ldrb	r3, [r3, #1]
 80082ce:	4619      	mov	r1, r3
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f000 fa0f 	bl	80086f4 <USB_DoPing>
      return HAL_OK;
 80082d6:	2300      	movs	r3, #0
 80082d8:	e0f8      	b.n	80084cc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	695b      	ldr	r3, [r3, #20]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d018      	beq.n	8008314 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	695b      	ldr	r3, [r3, #20]
 80082e6:	68ba      	ldr	r2, [r7, #8]
 80082e8:	8912      	ldrh	r2, [r2, #8]
 80082ea:	4413      	add	r3, r2
 80082ec:	3b01      	subs	r3, #1
 80082ee:	68ba      	ldr	r2, [r7, #8]
 80082f0:	8912      	ldrh	r2, [r2, #8]
 80082f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80082f6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80082f8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80082fa:	8b7b      	ldrh	r3, [r7, #26]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d90b      	bls.n	8008318 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008300:	8b7b      	ldrh	r3, [r7, #26]
 8008302:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008304:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008306:	68ba      	ldr	r2, [r7, #8]
 8008308:	8912      	ldrh	r2, [r2, #8]
 800830a:	fb03 f202 	mul.w	r2, r3, r2
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	611a      	str	r2, [r3, #16]
 8008312:	e001      	b.n	8008318 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008314:	2301      	movs	r3, #1
 8008316:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	78db      	ldrb	r3, [r3, #3]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d007      	beq.n	8008330 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008320:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008322:	68ba      	ldr	r2, [r7, #8]
 8008324:	8912      	ldrh	r2, [r2, #8]
 8008326:	fb03 f202 	mul.w	r2, r3, r2
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	611a      	str	r2, [r3, #16]
 800832e:	e003      	b.n	8008338 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	695a      	ldr	r2, [r3, #20]
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008340:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008342:	04d9      	lsls	r1, r3, #19
 8008344:	4b63      	ldr	r3, [pc, #396]	; (80084d4 <USB_HC_StartXfer+0x280>)
 8008346:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008348:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	7a9b      	ldrb	r3, [r3, #10]
 800834e:	075b      	lsls	r3, r3, #29
 8008350:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008354:	69f9      	ldr	r1, [r7, #28]
 8008356:	0148      	lsls	r0, r1, #5
 8008358:	6a39      	ldr	r1, [r7, #32]
 800835a:	4401      	add	r1, r0
 800835c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008360:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008362:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008364:	79fb      	ldrb	r3, [r7, #7]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d009      	beq.n	800837e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	68d9      	ldr	r1, [r3, #12]
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	015a      	lsls	r2, r3, #5
 8008372:	6a3b      	ldr	r3, [r7, #32]
 8008374:	4413      	add	r3, r2
 8008376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800837a:	460a      	mov	r2, r1
 800837c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800837e:	6a3b      	ldr	r3, [r7, #32]
 8008380:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f003 0301 	and.w	r3, r3, #1
 800838a:	2b00      	cmp	r3, #0
 800838c:	bf0c      	ite	eq
 800838e:	2301      	moveq	r3, #1
 8008390:	2300      	movne	r3, #0
 8008392:	b2db      	uxtb	r3, r3
 8008394:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	015a      	lsls	r2, r3, #5
 800839a:	6a3b      	ldr	r3, [r7, #32]
 800839c:	4413      	add	r3, r2
 800839e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	69fa      	ldr	r2, [r7, #28]
 80083a6:	0151      	lsls	r1, r2, #5
 80083a8:	6a3a      	ldr	r2, [r7, #32]
 80083aa:	440a      	add	r2, r1
 80083ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083b0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80083b4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	015a      	lsls	r2, r3, #5
 80083ba:	6a3b      	ldr	r3, [r7, #32]
 80083bc:	4413      	add	r3, r2
 80083be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	7e7b      	ldrb	r3, [r7, #25]
 80083c6:	075b      	lsls	r3, r3, #29
 80083c8:	69f9      	ldr	r1, [r7, #28]
 80083ca:	0148      	lsls	r0, r1, #5
 80083cc:	6a39      	ldr	r1, [r7, #32]
 80083ce:	4401      	add	r1, r0
 80083d0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80083d4:	4313      	orrs	r3, r2
 80083d6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	015a      	lsls	r2, r3, #5
 80083dc:	6a3b      	ldr	r3, [r7, #32]
 80083de:	4413      	add	r3, r2
 80083e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80083ee:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	78db      	ldrb	r3, [r3, #3]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d004      	beq.n	8008402 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083fe:	613b      	str	r3, [r7, #16]
 8008400:	e003      	b.n	800840a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008408:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008410:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	015a      	lsls	r2, r3, #5
 8008416:	6a3b      	ldr	r3, [r7, #32]
 8008418:	4413      	add	r3, r2
 800841a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800841e:	461a      	mov	r2, r3
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008424:	79fb      	ldrb	r3, [r7, #7]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d001      	beq.n	800842e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800842a:	2300      	movs	r3, #0
 800842c:	e04e      	b.n	80084cc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	78db      	ldrb	r3, [r3, #3]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d149      	bne.n	80084ca <USB_HC_StartXfer+0x276>
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	695b      	ldr	r3, [r3, #20]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d045      	beq.n	80084ca <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	79db      	ldrb	r3, [r3, #7]
 8008442:	2b03      	cmp	r3, #3
 8008444:	d830      	bhi.n	80084a8 <USB_HC_StartXfer+0x254>
 8008446:	a201      	add	r2, pc, #4	; (adr r2, 800844c <USB_HC_StartXfer+0x1f8>)
 8008448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800844c:	0800845d 	.word	0x0800845d
 8008450:	08008481 	.word	0x08008481
 8008454:	0800845d 	.word	0x0800845d
 8008458:	08008481 	.word	0x08008481
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	695b      	ldr	r3, [r3, #20]
 8008460:	3303      	adds	r3, #3
 8008462:	089b      	lsrs	r3, r3, #2
 8008464:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008466:	8afa      	ldrh	r2, [r7, #22]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800846c:	b29b      	uxth	r3, r3
 800846e:	429a      	cmp	r2, r3
 8008470:	d91c      	bls.n	80084ac <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	699b      	ldr	r3, [r3, #24]
 8008476:	f043 0220 	orr.w	r2, r3, #32
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	619a      	str	r2, [r3, #24]
        }
        break;
 800847e:	e015      	b.n	80084ac <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	695b      	ldr	r3, [r3, #20]
 8008484:	3303      	adds	r3, #3
 8008486:	089b      	lsrs	r3, r3, #2
 8008488:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800848a:	8afa      	ldrh	r2, [r7, #22]
 800848c:	6a3b      	ldr	r3, [r7, #32]
 800848e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	b29b      	uxth	r3, r3
 8008496:	429a      	cmp	r2, r3
 8008498:	d90a      	bls.n	80084b0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	699b      	ldr	r3, [r3, #24]
 800849e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	619a      	str	r2, [r3, #24]
        }
        break;
 80084a6:	e003      	b.n	80084b0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80084a8:	bf00      	nop
 80084aa:	e002      	b.n	80084b2 <USB_HC_StartXfer+0x25e>
        break;
 80084ac:	bf00      	nop
 80084ae:	e000      	b.n	80084b2 <USB_HC_StartXfer+0x25e>
        break;
 80084b0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	68d9      	ldr	r1, [r3, #12]
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	785a      	ldrb	r2, [r3, #1]
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	695b      	ldr	r3, [r3, #20]
 80084be:	b29b      	uxth	r3, r3
 80084c0:	2000      	movs	r0, #0
 80084c2:	9000      	str	r0, [sp, #0]
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f7ff fb31 	bl	8007b2c <USB_WritePacket>
  }

  return HAL_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3728      	adds	r7, #40	; 0x28
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	1ff80000 	.word	0x1ff80000

080084d8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80084d8:	b480      	push	{r7}
 80084da:	b085      	sub	sp, #20
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084ea:	695b      	ldr	r3, [r3, #20]
 80084ec:	b29b      	uxth	r3, r3
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3714      	adds	r7, #20
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr

080084fa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80084fa:	b480      	push	{r7}
 80084fc:	b089      	sub	sp, #36	; 0x24
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
 8008502:	460b      	mov	r3, r1
 8008504:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800850a:	78fb      	ldrb	r3, [r7, #3]
 800850c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800850e:	2300      	movs	r3, #0
 8008510:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	015a      	lsls	r2, r3, #5
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	4413      	add	r3, r2
 800851a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	0c9b      	lsrs	r3, r3, #18
 8008522:	f003 0303 	and.w	r3, r3, #3
 8008526:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	015a      	lsls	r2, r3, #5
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	4413      	add	r3, r2
 8008530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	0fdb      	lsrs	r3, r3, #31
 8008538:	f003 0301 	and.w	r3, r3, #1
 800853c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	f003 0320 	and.w	r3, r3, #32
 8008546:	2b20      	cmp	r3, #32
 8008548:	d104      	bne.n	8008554 <USB_HC_Halt+0x5a>
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d101      	bne.n	8008554 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008550:	2300      	movs	r3, #0
 8008552:	e0c8      	b.n	80086e6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d002      	beq.n	8008560 <USB_HC_Halt+0x66>
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	2b02      	cmp	r3, #2
 800855e:	d163      	bne.n	8008628 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008560:	69bb      	ldr	r3, [r7, #24]
 8008562:	015a      	lsls	r2, r3, #5
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	4413      	add	r3, r2
 8008568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	69ba      	ldr	r2, [r7, #24]
 8008570:	0151      	lsls	r1, r2, #5
 8008572:	69fa      	ldr	r2, [r7, #28]
 8008574:	440a      	add	r2, r1
 8008576:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800857a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800857e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	f003 0320 	and.w	r3, r3, #32
 8008588:	2b00      	cmp	r3, #0
 800858a:	f040 80ab 	bne.w	80086e4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008592:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008596:	2b00      	cmp	r3, #0
 8008598:	d133      	bne.n	8008602 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	015a      	lsls	r2, r3, #5
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	4413      	add	r3, r2
 80085a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	69ba      	ldr	r2, [r7, #24]
 80085aa:	0151      	lsls	r1, r2, #5
 80085ac:	69fa      	ldr	r2, [r7, #28]
 80085ae:	440a      	add	r2, r1
 80085b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085b8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	015a      	lsls	r2, r3, #5
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	4413      	add	r3, r2
 80085c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	69ba      	ldr	r2, [r7, #24]
 80085ca:	0151      	lsls	r1, r2, #5
 80085cc:	69fa      	ldr	r2, [r7, #28]
 80085ce:	440a      	add	r2, r1
 80085d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085d8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	3301      	adds	r3, #1
 80085de:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085e6:	d81d      	bhi.n	8008624 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	015a      	lsls	r2, r3, #5
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	4413      	add	r3, r2
 80085f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085fe:	d0ec      	beq.n	80085da <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008600:	e070      	b.n	80086e4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	015a      	lsls	r2, r3, #5
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	4413      	add	r3, r2
 800860a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	69ba      	ldr	r2, [r7, #24]
 8008612:	0151      	lsls	r1, r2, #5
 8008614:	69fa      	ldr	r2, [r7, #28]
 8008616:	440a      	add	r2, r1
 8008618:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800861c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008620:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008622:	e05f      	b.n	80086e4 <USB_HC_Halt+0x1ea>
            break;
 8008624:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008626:	e05d      	b.n	80086e4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	015a      	lsls	r2, r3, #5
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	4413      	add	r3, r2
 8008630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	69ba      	ldr	r2, [r7, #24]
 8008638:	0151      	lsls	r1, r2, #5
 800863a:	69fa      	ldr	r2, [r7, #28]
 800863c:	440a      	add	r2, r1
 800863e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008642:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008646:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008654:	2b00      	cmp	r3, #0
 8008656:	d133      	bne.n	80086c0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008658:	69bb      	ldr	r3, [r7, #24]
 800865a:	015a      	lsls	r2, r3, #5
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	4413      	add	r3, r2
 8008660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	69ba      	ldr	r2, [r7, #24]
 8008668:	0151      	lsls	r1, r2, #5
 800866a:	69fa      	ldr	r2, [r7, #28]
 800866c:	440a      	add	r2, r1
 800866e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008672:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008676:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	015a      	lsls	r2, r3, #5
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	4413      	add	r3, r2
 8008680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	69ba      	ldr	r2, [r7, #24]
 8008688:	0151      	lsls	r1, r2, #5
 800868a:	69fa      	ldr	r2, [r7, #28]
 800868c:	440a      	add	r2, r1
 800868e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008692:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008696:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	3301      	adds	r3, #1
 800869c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086a4:	d81d      	bhi.n	80086e2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	015a      	lsls	r2, r3, #5
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	4413      	add	r3, r2
 80086ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086bc:	d0ec      	beq.n	8008698 <USB_HC_Halt+0x19e>
 80086be:	e011      	b.n	80086e4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	015a      	lsls	r2, r3, #5
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	4413      	add	r3, r2
 80086c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	69ba      	ldr	r2, [r7, #24]
 80086d0:	0151      	lsls	r1, r2, #5
 80086d2:	69fa      	ldr	r2, [r7, #28]
 80086d4:	440a      	add	r2, r1
 80086d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086de:	6013      	str	r3, [r2, #0]
 80086e0:	e000      	b.n	80086e4 <USB_HC_Halt+0x1ea>
          break;
 80086e2:	bf00      	nop
    }
  }

  return HAL_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3724      	adds	r7, #36	; 0x24
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr
	...

080086f4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b087      	sub	sp, #28
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	460b      	mov	r3, r1
 80086fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008704:	78fb      	ldrb	r3, [r7, #3]
 8008706:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008708:	2301      	movs	r3, #1
 800870a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	04da      	lsls	r2, r3, #19
 8008710:	4b15      	ldr	r3, [pc, #84]	; (8008768 <USB_DoPing+0x74>)
 8008712:	4013      	ands	r3, r2
 8008714:	693a      	ldr	r2, [r7, #16]
 8008716:	0151      	lsls	r1, r2, #5
 8008718:	697a      	ldr	r2, [r7, #20]
 800871a:	440a      	add	r2, r1
 800871c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008720:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008724:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	015a      	lsls	r2, r3, #5
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	4413      	add	r3, r2
 800872e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800873c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008744:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	015a      	lsls	r2, r3, #5
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	4413      	add	r3, r2
 800874e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008752:	461a      	mov	r2, r3
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	371c      	adds	r7, #28
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	1ff80000 	.word	0x1ff80000

0800876c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b088      	sub	sp, #32
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008774:	2300      	movs	r3, #0
 8008776:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800877c:	2300      	movs	r3, #0
 800877e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f7ff f911 	bl	80079a8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008786:	2110      	movs	r1, #16
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f7ff f96b 	bl	8007a64 <USB_FlushTxFifo>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d001      	beq.n	8008798 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f7ff f997 	bl	8007acc <USB_FlushRxFifo>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d001      	beq.n	80087a8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80087a4:	2301      	movs	r3, #1
 80087a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80087a8:	2300      	movs	r3, #0
 80087aa:	61bb      	str	r3, [r7, #24]
 80087ac:	e01f      	b.n	80087ee <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	015a      	lsls	r2, r3, #5
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	4413      	add	r3, r2
 80087b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087c4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087cc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80087d4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	015a      	lsls	r2, r3, #5
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	4413      	add	r3, r2
 80087de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087e2:	461a      	mov	r2, r3
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	3301      	adds	r3, #1
 80087ec:	61bb      	str	r3, [r7, #24]
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	2b0f      	cmp	r3, #15
 80087f2:	d9dc      	bls.n	80087ae <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80087f4:	2300      	movs	r3, #0
 80087f6:	61bb      	str	r3, [r7, #24]
 80087f8:	e034      	b.n	8008864 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	015a      	lsls	r2, r3, #5
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	4413      	add	r3, r2
 8008802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008810:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008818:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008820:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	015a      	lsls	r2, r3, #5
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	4413      	add	r3, r2
 800882a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800882e:	461a      	mov	r2, r3
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	3301      	adds	r3, #1
 8008838:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008840:	d80c      	bhi.n	800885c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	015a      	lsls	r2, r3, #5
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	4413      	add	r3, r2
 800884a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008854:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008858:	d0ec      	beq.n	8008834 <USB_StopHost+0xc8>
 800885a:	e000      	b.n	800885e <USB_StopHost+0xf2>
        break;
 800885c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	3301      	adds	r3, #1
 8008862:	61bb      	str	r3, [r7, #24]
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	2b0f      	cmp	r3, #15
 8008868:	d9c7      	bls.n	80087fa <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008870:	461a      	mov	r2, r3
 8008872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008876:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800887e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f7ff f880 	bl	8007986 <USB_EnableGlobalInt>

  return ret;
 8008886:	7ffb      	ldrb	r3, [r7, #31]
}
 8008888:	4618      	mov	r0, r3
 800888a:	3720      	adds	r7, #32
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8008894:	4904      	ldr	r1, [pc, #16]	; (80088a8 <MX_FATFS_Init+0x18>)
 8008896:	4805      	ldr	r0, [pc, #20]	; (80088ac <MX_FATFS_Init+0x1c>)
 8008898:	f003 fe2e 	bl	800c4f8 <FATFS_LinkDriver>
 800889c:	4603      	mov	r3, r0
 800889e:	461a      	mov	r2, r3
 80088a0:	4b03      	ldr	r3, [pc, #12]	; (80088b0 <MX_FATFS_Init+0x20>)
 80088a2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80088a4:	bf00      	nop
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	20002e28 	.word	0x20002e28
 80088ac:	0800d0c0 	.word	0x0800d0c0
 80088b0:	20002e24 	.word	0x20002e24

080088b4 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	4603      	mov	r3, r0
 80088bc:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	4603      	mov	r3, r0
 80088d4:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80088da:	79fb      	ldrb	r3, [r7, #7]
 80088dc:	4619      	mov	r1, r3
 80088de:	4808      	ldr	r0, [pc, #32]	; (8008900 <USBH_status+0x34>)
 80088e0:	f000 fe32 	bl	8009548 <USBH_MSC_UnitIsReady>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d002      	beq.n	80088f0 <USBH_status+0x24>
  {
    res = RES_OK;
 80088ea:	2300      	movs	r3, #0
 80088ec:	73fb      	strb	r3, [r7, #15]
 80088ee:	e001      	b.n	80088f4 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80088f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3710      	adds	r7, #16
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	20002e60 	.word	0x20002e60

08008904 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b094      	sub	sp, #80	; 0x50
 8008908:	af02      	add	r7, sp, #8
 800890a:	60b9      	str	r1, [r7, #8]
 800890c:	607a      	str	r2, [r7, #4]
 800890e:	603b      	str	r3, [r7, #0]
 8008910:	4603      	mov	r3, r0
 8008912:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800891a:	7bf9      	ldrb	r1, [r7, #15]
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	9300      	str	r3, [sp, #0]
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	4813      	ldr	r0, [pc, #76]	; (8008974 <USBH_read+0x70>)
 8008926:	f000 fe59 	bl	80095dc <USBH_MSC_Read>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d103      	bne.n	8008938 <USBH_read+0x34>
  {
    res = RES_OK;
 8008930:	2300      	movs	r3, #0
 8008932:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008936:	e017      	b.n	8008968 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008938:	f107 0210 	add.w	r2, r7, #16
 800893c:	7bfb      	ldrb	r3, [r7, #15]
 800893e:	4619      	mov	r1, r3
 8008940:	480c      	ldr	r0, [pc, #48]	; (8008974 <USBH_read+0x70>)
 8008942:	f000 fe27 	bl	8009594 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008946:	7f7b      	ldrb	r3, [r7, #29]
 8008948:	2b3a      	cmp	r3, #58	; 0x3a
 800894a:	d005      	beq.n	8008958 <USBH_read+0x54>
 800894c:	2b3a      	cmp	r3, #58	; 0x3a
 800894e:	dc07      	bgt.n	8008960 <USBH_read+0x5c>
 8008950:	2b04      	cmp	r3, #4
 8008952:	d001      	beq.n	8008958 <USBH_read+0x54>
 8008954:	2b28      	cmp	r3, #40	; 0x28
 8008956:	d103      	bne.n	8008960 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008958:	2303      	movs	r3, #3
 800895a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800895e:	e003      	b.n	8008968 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008966:	bf00      	nop
    }
  }

  return res;
 8008968:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800896c:	4618      	mov	r0, r3
 800896e:	3748      	adds	r7, #72	; 0x48
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}
 8008974:	20002e60 	.word	0x20002e60

08008978 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b094      	sub	sp, #80	; 0x50
 800897c:	af02      	add	r7, sp, #8
 800897e:	60b9      	str	r1, [r7, #8]
 8008980:	607a      	str	r2, [r7, #4]
 8008982:	603b      	str	r3, [r7, #0]
 8008984:	4603      	mov	r3, r0
 8008986:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800898e:	7bf9      	ldrb	r1, [r7, #15]
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	9300      	str	r3, [sp, #0]
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	4817      	ldr	r0, [pc, #92]	; (80089f8 <USBH_write+0x80>)
 800899a:	f000 fe88 	bl	80096ae <USBH_MSC_Write>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d103      	bne.n	80089ac <USBH_write+0x34>
  {
    res = RES_OK;
 80089a4:	2300      	movs	r3, #0
 80089a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80089aa:	e01f      	b.n	80089ec <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80089ac:	f107 0210 	add.w	r2, r7, #16
 80089b0:	7bfb      	ldrb	r3, [r7, #15]
 80089b2:	4619      	mov	r1, r3
 80089b4:	4810      	ldr	r0, [pc, #64]	; (80089f8 <USBH_write+0x80>)
 80089b6:	f000 fded 	bl	8009594 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80089ba:	7f7b      	ldrb	r3, [r7, #29]
 80089bc:	2b3a      	cmp	r3, #58	; 0x3a
 80089be:	d00d      	beq.n	80089dc <USBH_write+0x64>
 80089c0:	2b3a      	cmp	r3, #58	; 0x3a
 80089c2:	dc0f      	bgt.n	80089e4 <USBH_write+0x6c>
 80089c4:	2b28      	cmp	r3, #40	; 0x28
 80089c6:	d009      	beq.n	80089dc <USBH_write+0x64>
 80089c8:	2b28      	cmp	r3, #40	; 0x28
 80089ca:	dc0b      	bgt.n	80089e4 <USBH_write+0x6c>
 80089cc:	2b04      	cmp	r3, #4
 80089ce:	d005      	beq.n	80089dc <USBH_write+0x64>
 80089d0:	2b27      	cmp	r3, #39	; 0x27
 80089d2:	d107      	bne.n	80089e4 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80089d4:	2302      	movs	r3, #2
 80089d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80089da:	e007      	b.n	80089ec <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80089dc:	2303      	movs	r3, #3
 80089de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80089e2:	e003      	b.n	80089ec <USBH_write+0x74>

    default:
      res = RES_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80089ea:	bf00      	nop
    }
  }

  return res;
 80089ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3748      	adds	r7, #72	; 0x48
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	20002e60 	.word	0x20002e60

080089fc <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b090      	sub	sp, #64	; 0x40
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	4603      	mov	r3, r0
 8008a04:	603a      	str	r2, [r7, #0]
 8008a06:	71fb      	strb	r3, [r7, #7]
 8008a08:	460b      	mov	r3, r1
 8008a0a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8008a12:	79bb      	ldrb	r3, [r7, #6]
 8008a14:	2b03      	cmp	r3, #3
 8008a16:	d852      	bhi.n	8008abe <USBH_ioctl+0xc2>
 8008a18:	a201      	add	r2, pc, #4	; (adr r2, 8008a20 <USBH_ioctl+0x24>)
 8008a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a1e:	bf00      	nop
 8008a20:	08008a31 	.word	0x08008a31
 8008a24:	08008a39 	.word	0x08008a39
 8008a28:	08008a63 	.word	0x08008a63
 8008a2c:	08008a8f 	.word	0x08008a8f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8008a30:	2300      	movs	r3, #0
 8008a32:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008a36:	e045      	b.n	8008ac4 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008a38:	f107 0208 	add.w	r2, r7, #8
 8008a3c:	79fb      	ldrb	r3, [r7, #7]
 8008a3e:	4619      	mov	r1, r3
 8008a40:	4823      	ldr	r0, [pc, #140]	; (8008ad0 <USBH_ioctl+0xd4>)
 8008a42:	f000 fda7 	bl	8009594 <USBH_MSC_GetLUNInfo>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d106      	bne.n	8008a5a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008a58:	e034      	b.n	8008ac4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008a60:	e030      	b.n	8008ac4 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008a62:	f107 0208 	add.w	r2, r7, #8
 8008a66:	79fb      	ldrb	r3, [r7, #7]
 8008a68:	4619      	mov	r1, r3
 8008a6a:	4819      	ldr	r0, [pc, #100]	; (8008ad0 <USBH_ioctl+0xd4>)
 8008a6c:	f000 fd92 	bl	8009594 <USBH_MSC_GetLUNInfo>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d107      	bne.n	8008a86 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8008a76:	8a3b      	ldrh	r3, [r7, #16]
 8008a78:	461a      	mov	r2, r3
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008a84:	e01e      	b.n	8008ac4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008a8c:	e01a      	b.n	8008ac4 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008a8e:	f107 0208 	add.w	r2, r7, #8
 8008a92:	79fb      	ldrb	r3, [r7, #7]
 8008a94:	4619      	mov	r1, r3
 8008a96:	480e      	ldr	r0, [pc, #56]	; (8008ad0 <USBH_ioctl+0xd4>)
 8008a98:	f000 fd7c 	bl	8009594 <USBH_MSC_GetLUNInfo>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d109      	bne.n	8008ab6 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8008aa2:	8a3b      	ldrh	r3, [r7, #16]
 8008aa4:	0a5b      	lsrs	r3, r3, #9
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008ab4:	e006      	b.n	8008ac4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008abc:	e002      	b.n	8008ac4 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8008abe:	2304      	movs	r3, #4
 8008ac0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8008ac4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3740      	adds	r7, #64	; 0x40
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	20002e60 	.word	0x20002e60

08008ad4 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008ad4:	b590      	push	{r4, r7, lr}
 8008ad6:	b089      	sub	sp, #36	; 0x24
 8008ad8:	af04      	add	r7, sp, #16
 8008ada:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ae2:	7919      	ldrb	r1, [r3, #4]
 8008ae4:	2350      	movs	r3, #80	; 0x50
 8008ae6:	2206      	movs	r2, #6
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f001 fc6b 	bl	800a3c4 <USBH_FindInterface>
 8008aee:	4603      	mov	r3, r0
 8008af0:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8008af2:	7bfb      	ldrb	r3, [r7, #15]
 8008af4:	2bff      	cmp	r3, #255	; 0xff
 8008af6:	d002      	beq.n	8008afe <USBH_MSC_InterfaceInit+0x2a>
 8008af8:	7bfb      	ldrb	r3, [r7, #15]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d901      	bls.n	8008b02 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008afe:	2302      	movs	r3, #2
 8008b00:	e106      	b.n	8008d10 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8008b02:	7bfb      	ldrb	r3, [r7, #15]
 8008b04:	4619      	mov	r1, r3
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f001 fc40 	bl	800a38c <USBH_SelectInterface>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008b10:	7bbb      	ldrb	r3, [r7, #14]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d001      	beq.n	8008b1a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8008b16:	2302      	movs	r3, #2
 8008b18:	e0fa      	b.n	8008d10 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008b20:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008b24:	f004 f85a 	bl	800cbdc <malloc>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b32:	69db      	ldr	r3, [r3, #28]
 8008b34:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d101      	bne.n	8008b40 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8008b3c:	2302      	movs	r3, #2
 8008b3e:	e0e7      	b.n	8008d10 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008b40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b44:	2100      	movs	r1, #0
 8008b46:	68b8      	ldr	r0, [r7, #8]
 8008b48:	f004 f866 	bl	800cc18 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008b4c:	7bfb      	ldrb	r3, [r7, #15]
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	211a      	movs	r1, #26
 8008b52:	fb01 f303 	mul.w	r3, r1, r3
 8008b56:	4413      	add	r3, r2
 8008b58:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	b25b      	sxtb	r3, r3
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	da16      	bge.n	8008b92 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008b64:	7bfb      	ldrb	r3, [r7, #15]
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	211a      	movs	r1, #26
 8008b6a:	fb01 f303 	mul.w	r3, r1, r3
 8008b6e:	4413      	add	r3, r2
 8008b70:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008b74:	781a      	ldrb	r2, [r3, #0]
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008b7a:	7bfb      	ldrb	r3, [r7, #15]
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	211a      	movs	r1, #26
 8008b80:	fb01 f303 	mul.w	r3, r1, r3
 8008b84:	4413      	add	r3, r2
 8008b86:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008b8a:	881a      	ldrh	r2, [r3, #0]
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	815a      	strh	r2, [r3, #10]
 8008b90:	e015      	b.n	8008bbe <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008b92:	7bfb      	ldrb	r3, [r7, #15]
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	211a      	movs	r1, #26
 8008b98:	fb01 f303 	mul.w	r3, r1, r3
 8008b9c:	4413      	add	r3, r2
 8008b9e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008ba2:	781a      	ldrb	r2, [r3, #0]
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008ba8:	7bfb      	ldrb	r3, [r7, #15]
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	211a      	movs	r1, #26
 8008bae:	fb01 f303 	mul.w	r3, r1, r3
 8008bb2:	4413      	add	r3, r2
 8008bb4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008bb8:	881a      	ldrh	r2, [r3, #0]
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008bbe:	7bfb      	ldrb	r3, [r7, #15]
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	211a      	movs	r1, #26
 8008bc4:	fb01 f303 	mul.w	r3, r1, r3
 8008bc8:	4413      	add	r3, r2
 8008bca:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	b25b      	sxtb	r3, r3
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	da16      	bge.n	8008c04 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008bd6:	7bfb      	ldrb	r3, [r7, #15]
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	211a      	movs	r1, #26
 8008bdc:	fb01 f303 	mul.w	r3, r1, r3
 8008be0:	4413      	add	r3, r2
 8008be2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008be6:	781a      	ldrb	r2, [r3, #0]
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008bec:	7bfb      	ldrb	r3, [r7, #15]
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	211a      	movs	r1, #26
 8008bf2:	fb01 f303 	mul.w	r3, r1, r3
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008bfc:	881a      	ldrh	r2, [r3, #0]
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	815a      	strh	r2, [r3, #10]
 8008c02:	e015      	b.n	8008c30 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008c04:	7bfb      	ldrb	r3, [r7, #15]
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	211a      	movs	r1, #26
 8008c0a:	fb01 f303 	mul.w	r3, r1, r3
 8008c0e:	4413      	add	r3, r2
 8008c10:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008c14:	781a      	ldrb	r2, [r3, #0]
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008c1a:	7bfb      	ldrb	r3, [r7, #15]
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	211a      	movs	r1, #26
 8008c20:	fb01 f303 	mul.w	r3, r1, r3
 8008c24:	4413      	add	r3, r2
 8008c26:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008c2a:	881a      	ldrh	r2, [r3, #0]
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	2200      	movs	r2, #0
 8008c34:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	799b      	ldrb	r3, [r3, #6]
 8008c46:	4619      	mov	r1, r3
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f002 fed6 	bl	800b9fa <USBH_AllocPipe>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	461a      	mov	r2, r3
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	79db      	ldrb	r3, [r3, #7]
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f002 fecc 	bl	800b9fa <USBH_AllocPipe>
 8008c62:	4603      	mov	r3, r0
 8008c64:	461a      	mov	r2, r3
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 fdc4 	bl	80097f8 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	799b      	ldrb	r3, [r3, #6]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d01e      	beq.n	8008cb6 <USBH_MSC_InterfaceInit+0x1e2>
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	891b      	ldrh	r3, [r3, #8]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d01a      	beq.n	8008cb6 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	7959      	ldrb	r1, [r3, #5]
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	7998      	ldrb	r0, [r3, #6]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c94:	68ba      	ldr	r2, [r7, #8]
 8008c96:	8912      	ldrh	r2, [r2, #8]
 8008c98:	9202      	str	r2, [sp, #8]
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	9201      	str	r2, [sp, #4]
 8008c9e:	9300      	str	r3, [sp, #0]
 8008ca0:	4623      	mov	r3, r4
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f002 fe79 	bl	800b99c <USBH_OpenPipe>
 8008caa:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	79db      	ldrb	r3, [r3, #7]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d02c      	beq.n	8008d0e <USBH_MSC_InterfaceInit+0x23a>
 8008cb4:	e001      	b.n	8008cba <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8008cb6:	2303      	movs	r3, #3
 8008cb8:	e02a      	b.n	8008d10 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	895b      	ldrh	r3, [r3, #10]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d025      	beq.n	8008d0e <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	7919      	ldrb	r1, [r3, #4]
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	79d8      	ldrb	r0, [r3, #7]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008cd6:	68ba      	ldr	r2, [r7, #8]
 8008cd8:	8952      	ldrh	r2, [r2, #10]
 8008cda:	9202      	str	r2, [sp, #8]
 8008cdc:	2202      	movs	r2, #2
 8008cde:	9201      	str	r2, [sp, #4]
 8008ce0:	9300      	str	r3, [sp, #0]
 8008ce2:	4623      	mov	r3, r4
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f002 fe58 	bl	800b99c <USBH_OpenPipe>
 8008cec:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	791b      	ldrb	r3, [r3, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f003 fe92 	bl	800ca20 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	795b      	ldrb	r3, [r3, #5]
 8008d00:	2200      	movs	r2, #0
 8008d02:	4619      	mov	r1, r3
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f003 fe8b 	bl	800ca20 <USBH_LL_SetToggle>

  return USBH_OK;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	e000      	b.n	8008d10 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 8008d0e:	2303      	movs	r3, #3
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3714      	adds	r7, #20
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd90      	pop	{r4, r7, pc}

08008d18 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d26:	69db      	ldr	r3, [r3, #28]
 8008d28:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	795b      	ldrb	r3, [r3, #5]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d00e      	beq.n	8008d50 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	795b      	ldrb	r3, [r3, #5]
 8008d36:	4619      	mov	r1, r3
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f002 fe4e 	bl	800b9da <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	795b      	ldrb	r3, [r3, #5]
 8008d42:	4619      	mov	r1, r3
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f002 fe79 	bl	800ba3c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	791b      	ldrb	r3, [r3, #4]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00e      	beq.n	8008d76 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	791b      	ldrb	r3, [r3, #4]
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f002 fe3b 	bl	800b9da <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	791b      	ldrb	r3, [r3, #4]
 8008d68:	4619      	mov	r1, r3
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f002 fe66 	bl	800ba3c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2200      	movs	r2, #0
 8008d74:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d7c:	69db      	ldr	r3, [r3, #28]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d00b      	beq.n	8008d9a <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d88:	69db      	ldr	r3, [r3, #28]
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f003 ff2e 	bl	800cbec <free>
    phost->pActiveClass->pData = 0U;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d96:	2200      	movs	r2, #0
 8008d98:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008d9a:	2300      	movs	r3, #0
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3710      	adds	r7, #16
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008db2:	69db      	ldr	r3, [r3, #28]
 8008db4:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008db6:	2301      	movs	r3, #1
 8008db8:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	7b9b      	ldrb	r3, [r3, #14]
 8008dbe:	2b03      	cmp	r3, #3
 8008dc0:	d041      	beq.n	8008e46 <USBH_MSC_ClassRequest+0xa2>
 8008dc2:	2b03      	cmp	r3, #3
 8008dc4:	dc4b      	bgt.n	8008e5e <USBH_MSC_ClassRequest+0xba>
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d001      	beq.n	8008dce <USBH_MSC_ClassRequest+0x2a>
 8008dca:	2b02      	cmp	r3, #2
 8008dcc:	d147      	bne.n	8008e5e <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 fcf1 	bl	80097ba <USBH_MSC_BOT_REQ_GetMaxLUN>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8008ddc:	7bfb      	ldrb	r3, [r7, #15]
 8008dde:	2b03      	cmp	r3, #3
 8008de0:	d104      	bne.n	8008dec <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	2200      	movs	r2, #0
 8008de6:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8008de8:	2300      	movs	r3, #0
 8008dea:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8008dec:	7bfb      	ldrb	r3, [r7, #15]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d137      	bne.n	8008e62 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	2b02      	cmp	r3, #2
 8008df8:	d804      	bhi.n	8008e04 <USBH_MSC_ClassRequest+0x60>
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	b2da      	uxtb	r2, r3
 8008e02:	e000      	b.n	8008e06 <USBH_MSC_ClassRequest+0x62>
 8008e04:	2202      	movs	r2, #2
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	73bb      	strb	r3, [r7, #14]
 8008e0e:	e014      	b.n	8008e3a <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008e10:	7bbb      	ldrb	r3, [r7, #14]
 8008e12:	68ba      	ldr	r2, [r7, #8]
 8008e14:	2134      	movs	r1, #52	; 0x34
 8008e16:	fb01 f303 	mul.w	r3, r1, r3
 8008e1a:	4413      	add	r3, r2
 8008e1c:	3392      	adds	r3, #146	; 0x92
 8008e1e:	2202      	movs	r2, #2
 8008e20:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8008e22:	7bbb      	ldrb	r3, [r7, #14]
 8008e24:	68ba      	ldr	r2, [r7, #8]
 8008e26:	2134      	movs	r1, #52	; 0x34
 8008e28:	fb01 f303 	mul.w	r3, r1, r3
 8008e2c:	4413      	add	r3, r2
 8008e2e:	33c1      	adds	r3, #193	; 0xc1
 8008e30:	2200      	movs	r2, #0
 8008e32:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008e34:	7bbb      	ldrb	r3, [r7, #14]
 8008e36:	3301      	adds	r3, #1
 8008e38:	73bb      	strb	r3, [r7, #14]
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	7bba      	ldrb	r2, [r7, #14]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d3e5      	bcc.n	8008e10 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8008e44:	e00d      	b.n	8008e62 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8008e46:	2100      	movs	r1, #0
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f002 f888 	bl	800af5e <USBH_ClrFeature>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d108      	bne.n	8008e66 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	7bda      	ldrb	r2, [r3, #15]
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	739a      	strb	r2, [r3, #14]
      }
      break;
 8008e5c:	e003      	b.n	8008e66 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8008e5e:	bf00      	nop
 8008e60:	e002      	b.n	8008e68 <USBH_MSC_ClassRequest+0xc4>
      break;
 8008e62:	bf00      	nop
 8008e64:	e000      	b.n	8008e68 <USBH_MSC_ClassRequest+0xc4>
      break;
 8008e66:	bf00      	nop
  }

  return status;
 8008e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
	...

08008e74 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b086      	sub	sp, #24
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e82:	69db      	ldr	r3, [r3, #28]
 8008e84:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8008e86:	2301      	movs	r3, #1
 8008e88:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	7b1b      	ldrb	r3, [r3, #12]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d003      	beq.n	8008ea2 <USBH_MSC_Process+0x2e>
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	f000 8271 	beq.w	8009382 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8008ea0:	e272      	b.n	8009388 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	f080 824f 	bcs.w	8009352 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008eba:	4619      	mov	r1, r3
 8008ebc:	693a      	ldr	r2, [r7, #16]
 8008ebe:	2334      	movs	r3, #52	; 0x34
 8008ec0:	fb01 f303 	mul.w	r3, r1, r3
 8008ec4:	4413      	add	r3, r2
 8008ec6:	3391      	adds	r3, #145	; 0x91
 8008ec8:	2201      	movs	r2, #1
 8008eca:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	693a      	ldr	r2, [r7, #16]
 8008ed6:	2334      	movs	r3, #52	; 0x34
 8008ed8:	fb01 f303 	mul.w	r3, r1, r3
 8008edc:	4413      	add	r3, r2
 8008ede:	3390      	adds	r3, #144	; 0x90
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	2b08      	cmp	r3, #8
 8008ee4:	f200 8243 	bhi.w	800936e <USBH_MSC_Process+0x4fa>
 8008ee8:	a201      	add	r2, pc, #4	; (adr r2, 8008ef0 <USBH_MSC_Process+0x7c>)
 8008eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eee:	bf00      	nop
 8008ef0:	08008f15 	.word	0x08008f15
 8008ef4:	0800936f 	.word	0x0800936f
 8008ef8:	08008fdd 	.word	0x08008fdd
 8008efc:	08009161 	.word	0x08009161
 8008f00:	08008f3b 	.word	0x08008f3b
 8008f04:	0800922d 	.word	0x0800922d
 8008f08:	0800936f 	.word	0x0800936f
 8008f0c:	0800936f 	.word	0x0800936f
 8008f10:	08009341 	.word	0x08009341
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	693a      	ldr	r2, [r7, #16]
 8008f1e:	2334      	movs	r3, #52	; 0x34
 8008f20:	fb01 f303 	mul.w	r3, r1, r3
 8008f24:	4413      	add	r3, r2
 8008f26:	3390      	adds	r3, #144	; 0x90
 8008f28:	2204      	movs	r2, #4
 8008f2a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8008f38:	e222      	b.n	8009380 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f40:	b2d9      	uxtb	r1, r3
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f48:	461a      	mov	r2, r3
 8008f4a:	2334      	movs	r3, #52	; 0x34
 8008f4c:	fb02 f303 	mul.w	r3, r2, r3
 8008f50:	3398      	adds	r3, #152	; 0x98
 8008f52:	693a      	ldr	r2, [r7, #16]
 8008f54:	4413      	add	r3, r2
 8008f56:	3307      	adds	r3, #7
 8008f58:	461a      	mov	r2, r3
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 ff6a 	bl	8009e34 <USBH_MSC_SCSI_Inquiry>
 8008f60:	4603      	mov	r3, r0
 8008f62:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008f64:	7bfb      	ldrb	r3, [r7, #15]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d10b      	bne.n	8008f82 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f70:	4619      	mov	r1, r3
 8008f72:	693a      	ldr	r2, [r7, #16]
 8008f74:	2334      	movs	r3, #52	; 0x34
 8008f76:	fb01 f303 	mul.w	r3, r1, r3
 8008f7a:	4413      	add	r3, r2
 8008f7c:	3390      	adds	r3, #144	; 0x90
 8008f7e:	2202      	movs	r2, #2
 8008f80:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8008f82:	7bfb      	ldrb	r3, [r7, #15]
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	d10c      	bne.n	8008fa2 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f8e:	4619      	mov	r1, r3
 8008f90:	693a      	ldr	r2, [r7, #16]
 8008f92:	2334      	movs	r3, #52	; 0x34
 8008f94:	fb01 f303 	mul.w	r3, r1, r3
 8008f98:	4413      	add	r3, r2
 8008f9a:	3390      	adds	r3, #144	; 0x90
 8008f9c:	2205      	movs	r2, #5
 8008f9e:	701a      	strb	r2, [r3, #0]
            break;
 8008fa0:	e1e7      	b.n	8009372 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008fa2:	7bfb      	ldrb	r3, [r7, #15]
 8008fa4:	2b04      	cmp	r3, #4
 8008fa6:	f040 81e4 	bne.w	8009372 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	693a      	ldr	r2, [r7, #16]
 8008fb4:	2334      	movs	r3, #52	; 0x34
 8008fb6:	fb01 f303 	mul.w	r3, r1, r3
 8008fba:	4413      	add	r3, r2
 8008fbc:	3390      	adds	r3, #144	; 0x90
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fc8:	4619      	mov	r1, r3
 8008fca:	693a      	ldr	r2, [r7, #16]
 8008fcc:	2334      	movs	r3, #52	; 0x34
 8008fce:	fb01 f303 	mul.w	r3, r1, r3
 8008fd2:	4413      	add	r3, r2
 8008fd4:	3391      	adds	r3, #145	; 0x91
 8008fd6:	2202      	movs	r2, #2
 8008fd8:	701a      	strb	r2, [r3, #0]
            break;
 8008fda:	e1ca      	b.n	8009372 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 fe66 	bl	8009cb8 <USBH_MSC_SCSI_TestUnitReady>
 8008fec:	4603      	mov	r3, r0
 8008fee:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8008ff0:	7bbb      	ldrb	r3, [r7, #14]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d149      	bne.n	800908a <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	693a      	ldr	r2, [r7, #16]
 8009000:	2334      	movs	r3, #52	; 0x34
 8009002:	fb01 f303 	mul.w	r3, r1, r3
 8009006:	4413      	add	r3, r2
 8009008:	3392      	adds	r3, #146	; 0x92
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d00c      	beq.n	800902a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009016:	4619      	mov	r1, r3
 8009018:	693a      	ldr	r2, [r7, #16]
 800901a:	2334      	movs	r3, #52	; 0x34
 800901c:	fb01 f303 	mul.w	r3, r1, r3
 8009020:	4413      	add	r3, r2
 8009022:	33c1      	adds	r3, #193	; 0xc1
 8009024:	2201      	movs	r2, #1
 8009026:	701a      	strb	r2, [r3, #0]
 8009028:	e00b      	b.n	8009042 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009030:	4619      	mov	r1, r3
 8009032:	693a      	ldr	r2, [r7, #16]
 8009034:	2334      	movs	r3, #52	; 0x34
 8009036:	fb01 f303 	mul.w	r3, r1, r3
 800903a:	4413      	add	r3, r2
 800903c:	33c1      	adds	r3, #193	; 0xc1
 800903e:	2200      	movs	r2, #0
 8009040:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009048:	4619      	mov	r1, r3
 800904a:	693a      	ldr	r2, [r7, #16]
 800904c:	2334      	movs	r3, #52	; 0x34
 800904e:	fb01 f303 	mul.w	r3, r1, r3
 8009052:	4413      	add	r3, r2
 8009054:	3390      	adds	r3, #144	; 0x90
 8009056:	2203      	movs	r2, #3
 8009058:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009060:	4619      	mov	r1, r3
 8009062:	693a      	ldr	r2, [r7, #16]
 8009064:	2334      	movs	r3, #52	; 0x34
 8009066:	fb01 f303 	mul.w	r3, r1, r3
 800906a:	4413      	add	r3, r2
 800906c:	3391      	adds	r3, #145	; 0x91
 800906e:	2200      	movs	r2, #0
 8009070:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009078:	4619      	mov	r1, r3
 800907a:	693a      	ldr	r2, [r7, #16]
 800907c:	2334      	movs	r3, #52	; 0x34
 800907e:	fb01 f303 	mul.w	r3, r1, r3
 8009082:	4413      	add	r3, r2
 8009084:	3392      	adds	r3, #146	; 0x92
 8009086:	2200      	movs	r2, #0
 8009088:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800908a:	7bbb      	ldrb	r3, [r7, #14]
 800908c:	2b02      	cmp	r3, #2
 800908e:	d14a      	bne.n	8009126 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009096:	4619      	mov	r1, r3
 8009098:	693a      	ldr	r2, [r7, #16]
 800909a:	2334      	movs	r3, #52	; 0x34
 800909c:	fb01 f303 	mul.w	r3, r1, r3
 80090a0:	4413      	add	r3, r2
 80090a2:	3392      	adds	r3, #146	; 0x92
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	2b02      	cmp	r3, #2
 80090a8:	d00c      	beq.n	80090c4 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090b0:	4619      	mov	r1, r3
 80090b2:	693a      	ldr	r2, [r7, #16]
 80090b4:	2334      	movs	r3, #52	; 0x34
 80090b6:	fb01 f303 	mul.w	r3, r1, r3
 80090ba:	4413      	add	r3, r2
 80090bc:	33c1      	adds	r3, #193	; 0xc1
 80090be:	2201      	movs	r2, #1
 80090c0:	701a      	strb	r2, [r3, #0]
 80090c2:	e00b      	b.n	80090dc <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090ca:	4619      	mov	r1, r3
 80090cc:	693a      	ldr	r2, [r7, #16]
 80090ce:	2334      	movs	r3, #52	; 0x34
 80090d0:	fb01 f303 	mul.w	r3, r1, r3
 80090d4:	4413      	add	r3, r2
 80090d6:	33c1      	adds	r3, #193	; 0xc1
 80090d8:	2200      	movs	r2, #0
 80090da:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090e2:	4619      	mov	r1, r3
 80090e4:	693a      	ldr	r2, [r7, #16]
 80090e6:	2334      	movs	r3, #52	; 0x34
 80090e8:	fb01 f303 	mul.w	r3, r1, r3
 80090ec:	4413      	add	r3, r2
 80090ee:	3390      	adds	r3, #144	; 0x90
 80090f0:	2205      	movs	r2, #5
 80090f2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090fa:	4619      	mov	r1, r3
 80090fc:	693a      	ldr	r2, [r7, #16]
 80090fe:	2334      	movs	r3, #52	; 0x34
 8009100:	fb01 f303 	mul.w	r3, r1, r3
 8009104:	4413      	add	r3, r2
 8009106:	3391      	adds	r3, #145	; 0x91
 8009108:	2201      	movs	r2, #1
 800910a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009112:	4619      	mov	r1, r3
 8009114:	693a      	ldr	r2, [r7, #16]
 8009116:	2334      	movs	r3, #52	; 0x34
 8009118:	fb01 f303 	mul.w	r3, r1, r3
 800911c:	4413      	add	r3, r2
 800911e:	3392      	adds	r3, #146	; 0x92
 8009120:	2202      	movs	r2, #2
 8009122:	701a      	strb	r2, [r3, #0]
            break;
 8009124:	e127      	b.n	8009376 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8009126:	7bbb      	ldrb	r3, [r7, #14]
 8009128:	2b04      	cmp	r3, #4
 800912a:	f040 8124 	bne.w	8009376 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009134:	4619      	mov	r1, r3
 8009136:	693a      	ldr	r2, [r7, #16]
 8009138:	2334      	movs	r3, #52	; 0x34
 800913a:	fb01 f303 	mul.w	r3, r1, r3
 800913e:	4413      	add	r3, r2
 8009140:	3390      	adds	r3, #144	; 0x90
 8009142:	2201      	movs	r2, #1
 8009144:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800914c:	4619      	mov	r1, r3
 800914e:	693a      	ldr	r2, [r7, #16]
 8009150:	2334      	movs	r3, #52	; 0x34
 8009152:	fb01 f303 	mul.w	r3, r1, r3
 8009156:	4413      	add	r3, r2
 8009158:	3391      	adds	r3, #145	; 0x91
 800915a:	2202      	movs	r2, #2
 800915c:	701a      	strb	r2, [r3, #0]
            break;
 800915e:	e10a      	b.n	8009376 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009166:	b2d9      	uxtb	r1, r3
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800916e:	461a      	mov	r2, r3
 8009170:	2334      	movs	r3, #52	; 0x34
 8009172:	fb02 f303 	mul.w	r3, r2, r3
 8009176:	3390      	adds	r3, #144	; 0x90
 8009178:	693a      	ldr	r2, [r7, #16]
 800917a:	4413      	add	r3, r2
 800917c:	3304      	adds	r3, #4
 800917e:	461a      	mov	r2, r3
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 fddc 	bl	8009d3e <USBH_MSC_SCSI_ReadCapacity>
 8009186:	4603      	mov	r3, r0
 8009188:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800918a:	7bfb      	ldrb	r3, [r7, #15]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d120      	bne.n	80091d2 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009196:	4619      	mov	r1, r3
 8009198:	693a      	ldr	r2, [r7, #16]
 800919a:	2334      	movs	r3, #52	; 0x34
 800919c:	fb01 f303 	mul.w	r3, r1, r3
 80091a0:	4413      	add	r3, r2
 80091a2:	3390      	adds	r3, #144	; 0x90
 80091a4:	2201      	movs	r2, #1
 80091a6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091ae:	4619      	mov	r1, r3
 80091b0:	693a      	ldr	r2, [r7, #16]
 80091b2:	2334      	movs	r3, #52	; 0x34
 80091b4:	fb01 f303 	mul.w	r3, r1, r3
 80091b8:	4413      	add	r3, r2
 80091ba:	3391      	adds	r3, #145	; 0x91
 80091bc:	2200      	movs	r2, #0
 80091be:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091c6:	3301      	adds	r3, #1
 80091c8:	b29a      	uxth	r2, r3
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80091d0:	e0d3      	b.n	800937a <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 80091d2:	7bfb      	ldrb	r3, [r7, #15]
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	d10c      	bne.n	80091f2 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091de:	4619      	mov	r1, r3
 80091e0:	693a      	ldr	r2, [r7, #16]
 80091e2:	2334      	movs	r3, #52	; 0x34
 80091e4:	fb01 f303 	mul.w	r3, r1, r3
 80091e8:	4413      	add	r3, r2
 80091ea:	3390      	adds	r3, #144	; 0x90
 80091ec:	2205      	movs	r2, #5
 80091ee:	701a      	strb	r2, [r3, #0]
            break;
 80091f0:	e0c3      	b.n	800937a <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80091f2:	7bfb      	ldrb	r3, [r7, #15]
 80091f4:	2b04      	cmp	r3, #4
 80091f6:	f040 80c0 	bne.w	800937a <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009200:	4619      	mov	r1, r3
 8009202:	693a      	ldr	r2, [r7, #16]
 8009204:	2334      	movs	r3, #52	; 0x34
 8009206:	fb01 f303 	mul.w	r3, r1, r3
 800920a:	4413      	add	r3, r2
 800920c:	3390      	adds	r3, #144	; 0x90
 800920e:	2201      	movs	r2, #1
 8009210:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009218:	4619      	mov	r1, r3
 800921a:	693a      	ldr	r2, [r7, #16]
 800921c:	2334      	movs	r3, #52	; 0x34
 800921e:	fb01 f303 	mul.w	r3, r1, r3
 8009222:	4413      	add	r3, r2
 8009224:	3391      	adds	r3, #145	; 0x91
 8009226:	2202      	movs	r2, #2
 8009228:	701a      	strb	r2, [r3, #0]
            break;
 800922a:	e0a6      	b.n	800937a <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009232:	b2d9      	uxtb	r1, r3
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800923a:	461a      	mov	r2, r3
 800923c:	2334      	movs	r3, #52	; 0x34
 800923e:	fb02 f303 	mul.w	r3, r2, r3
 8009242:	3398      	adds	r3, #152	; 0x98
 8009244:	693a      	ldr	r2, [r7, #16]
 8009246:	4413      	add	r3, r2
 8009248:	3304      	adds	r3, #4
 800924a:	461a      	mov	r2, r3
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 fe96 	bl	8009f7e <USBH_MSC_SCSI_RequestSense>
 8009252:	4603      	mov	r3, r0
 8009254:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009256:	7bfb      	ldrb	r3, [r7, #15]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d145      	bne.n	80092e8 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009262:	4619      	mov	r1, r3
 8009264:	693a      	ldr	r2, [r7, #16]
 8009266:	2334      	movs	r3, #52	; 0x34
 8009268:	fb01 f303 	mul.w	r3, r1, r3
 800926c:	4413      	add	r3, r2
 800926e:	339c      	adds	r3, #156	; 0x9c
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	2b06      	cmp	r3, #6
 8009274:	d00c      	beq.n	8009290 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800927c:	4619      	mov	r1, r3
 800927e:	693a      	ldr	r2, [r7, #16]
 8009280:	2334      	movs	r3, #52	; 0x34
 8009282:	fb01 f303 	mul.w	r3, r1, r3
 8009286:	4413      	add	r3, r2
 8009288:	339c      	adds	r3, #156	; 0x9c
 800928a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800928c:	2b02      	cmp	r3, #2
 800928e:	d117      	bne.n	80092c0 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800929c:	1ad3      	subs	r3, r2, r3
 800929e:	f242 720f 	movw	r2, #9999	; 0x270f
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d80c      	bhi.n	80092c0 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092ac:	4619      	mov	r1, r3
 80092ae:	693a      	ldr	r2, [r7, #16]
 80092b0:	2334      	movs	r3, #52	; 0x34
 80092b2:	fb01 f303 	mul.w	r3, r1, r3
 80092b6:	4413      	add	r3, r2
 80092b8:	3390      	adds	r3, #144	; 0x90
 80092ba:	2202      	movs	r2, #2
 80092bc:	701a      	strb	r2, [r3, #0]
                  break;
 80092be:	e05f      	b.n	8009380 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092c6:	4619      	mov	r1, r3
 80092c8:	693a      	ldr	r2, [r7, #16]
 80092ca:	2334      	movs	r3, #52	; 0x34
 80092cc:	fb01 f303 	mul.w	r3, r1, r3
 80092d0:	4413      	add	r3, r2
 80092d2:	3390      	adds	r3, #144	; 0x90
 80092d4:	2201      	movs	r2, #1
 80092d6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092de:	3301      	adds	r3, #1
 80092e0:	b29a      	uxth	r2, r3
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 80092e8:	7bfb      	ldrb	r3, [r7, #15]
 80092ea:	2b02      	cmp	r3, #2
 80092ec:	d10c      	bne.n	8009308 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092f4:	4619      	mov	r1, r3
 80092f6:	693a      	ldr	r2, [r7, #16]
 80092f8:	2334      	movs	r3, #52	; 0x34
 80092fa:	fb01 f303 	mul.w	r3, r1, r3
 80092fe:	4413      	add	r3, r2
 8009300:	3390      	adds	r3, #144	; 0x90
 8009302:	2208      	movs	r2, #8
 8009304:	701a      	strb	r2, [r3, #0]
            break;
 8009306:	e03a      	b.n	800937e <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009308:	7bfb      	ldrb	r3, [r7, #15]
 800930a:	2b04      	cmp	r3, #4
 800930c:	d137      	bne.n	800937e <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009314:	4619      	mov	r1, r3
 8009316:	693a      	ldr	r2, [r7, #16]
 8009318:	2334      	movs	r3, #52	; 0x34
 800931a:	fb01 f303 	mul.w	r3, r1, r3
 800931e:	4413      	add	r3, r2
 8009320:	3390      	adds	r3, #144	; 0x90
 8009322:	2201      	movs	r2, #1
 8009324:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800932c:	4619      	mov	r1, r3
 800932e:	693a      	ldr	r2, [r7, #16]
 8009330:	2334      	movs	r3, #52	; 0x34
 8009332:	fb01 f303 	mul.w	r3, r1, r3
 8009336:	4413      	add	r3, r2
 8009338:	3391      	adds	r3, #145	; 0x91
 800933a:	2202      	movs	r2, #2
 800933c:	701a      	strb	r2, [r3, #0]
            break;
 800933e:	e01e      	b.n	800937e <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009346:	3301      	adds	r3, #1
 8009348:	b29a      	uxth	r2, r3
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009350:	e016      	b.n	8009380 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	2200      	movs	r2, #0
 8009356:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	2201      	movs	r2, #1
 800935e:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009366:	2102      	movs	r1, #2
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	4798      	blx	r3
      break;
 800936c:	e00c      	b.n	8009388 <USBH_MSC_Process+0x514>
            break;
 800936e:	bf00      	nop
 8009370:	e00a      	b.n	8009388 <USBH_MSC_Process+0x514>
            break;
 8009372:	bf00      	nop
 8009374:	e008      	b.n	8009388 <USBH_MSC_Process+0x514>
            break;
 8009376:	bf00      	nop
 8009378:	e006      	b.n	8009388 <USBH_MSC_Process+0x514>
            break;
 800937a:	bf00      	nop
 800937c:	e004      	b.n	8009388 <USBH_MSC_Process+0x514>
            break;
 800937e:	bf00      	nop
      break;
 8009380:	e002      	b.n	8009388 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8009382:	2300      	movs	r3, #0
 8009384:	75fb      	strb	r3, [r7, #23]
      break;
 8009386:	bf00      	nop
  }
  return error;
 8009388:	7dfb      	ldrb	r3, [r7, #23]
}
 800938a:	4618      	mov	r0, r3
 800938c:	3718      	adds	r7, #24
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop

08009394 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800939c:	2300      	movs	r3, #0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	370c      	adds	r7, #12
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b088      	sub	sp, #32
 80093ae:	af02      	add	r7, sp, #8
 80093b0:	6078      	str	r0, [r7, #4]
 80093b2:	460b      	mov	r3, r1
 80093b4:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093bc:	69db      	ldr	r3, [r3, #28]
 80093be:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80093c0:	2301      	movs	r3, #1
 80093c2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80093c4:	2301      	movs	r3, #1
 80093c6:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80093c8:	78fb      	ldrb	r3, [r7, #3]
 80093ca:	693a      	ldr	r2, [r7, #16]
 80093cc:	2134      	movs	r1, #52	; 0x34
 80093ce:	fb01 f303 	mul.w	r3, r1, r3
 80093d2:	4413      	add	r3, r2
 80093d4:	3390      	adds	r3, #144	; 0x90
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	2b07      	cmp	r3, #7
 80093da:	d03c      	beq.n	8009456 <USBH_MSC_RdWrProcess+0xac>
 80093dc:	2b07      	cmp	r3, #7
 80093de:	f300 80a7 	bgt.w	8009530 <USBH_MSC_RdWrProcess+0x186>
 80093e2:	2b05      	cmp	r3, #5
 80093e4:	d06c      	beq.n	80094c0 <USBH_MSC_RdWrProcess+0x116>
 80093e6:	2b06      	cmp	r3, #6
 80093e8:	f040 80a2 	bne.w	8009530 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80093ec:	78f9      	ldrb	r1, [r7, #3]
 80093ee:	2300      	movs	r3, #0
 80093f0:	9300      	str	r3, [sp, #0]
 80093f2:	2300      	movs	r3, #0
 80093f4:	2200      	movs	r2, #0
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 fea5 	bl	800a146 <USBH_MSC_SCSI_Read>
 80093fc:	4603      	mov	r3, r0
 80093fe:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009400:	7bfb      	ldrb	r3, [r7, #15]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d10b      	bne.n	800941e <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009406:	78fb      	ldrb	r3, [r7, #3]
 8009408:	693a      	ldr	r2, [r7, #16]
 800940a:	2134      	movs	r1, #52	; 0x34
 800940c:	fb01 f303 	mul.w	r3, r1, r3
 8009410:	4413      	add	r3, r2
 8009412:	3390      	adds	r3, #144	; 0x90
 8009414:	2201      	movs	r2, #1
 8009416:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009418:	2300      	movs	r3, #0
 800941a:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800941c:	e08a      	b.n	8009534 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800941e:	7bfb      	ldrb	r3, [r7, #15]
 8009420:	2b02      	cmp	r3, #2
 8009422:	d109      	bne.n	8009438 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009424:	78fb      	ldrb	r3, [r7, #3]
 8009426:	693a      	ldr	r2, [r7, #16]
 8009428:	2134      	movs	r1, #52	; 0x34
 800942a:	fb01 f303 	mul.w	r3, r1, r3
 800942e:	4413      	add	r3, r2
 8009430:	3390      	adds	r3, #144	; 0x90
 8009432:	2205      	movs	r2, #5
 8009434:	701a      	strb	r2, [r3, #0]
      break;
 8009436:	e07d      	b.n	8009534 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009438:	7bfb      	ldrb	r3, [r7, #15]
 800943a:	2b04      	cmp	r3, #4
 800943c:	d17a      	bne.n	8009534 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800943e:	78fb      	ldrb	r3, [r7, #3]
 8009440:	693a      	ldr	r2, [r7, #16]
 8009442:	2134      	movs	r1, #52	; 0x34
 8009444:	fb01 f303 	mul.w	r3, r1, r3
 8009448:	4413      	add	r3, r2
 800944a:	3390      	adds	r3, #144	; 0x90
 800944c:	2208      	movs	r2, #8
 800944e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009450:	2302      	movs	r3, #2
 8009452:	75fb      	strb	r3, [r7, #23]
      break;
 8009454:	e06e      	b.n	8009534 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8009456:	78f9      	ldrb	r1, [r7, #3]
 8009458:	2300      	movs	r3, #0
 800945a:	9300      	str	r3, [sp, #0]
 800945c:	2300      	movs	r3, #0
 800945e:	2200      	movs	r2, #0
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 fe05 	bl	800a070 <USBH_MSC_SCSI_Write>
 8009466:	4603      	mov	r3, r0
 8009468:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800946a:	7bfb      	ldrb	r3, [r7, #15]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d10b      	bne.n	8009488 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009470:	78fb      	ldrb	r3, [r7, #3]
 8009472:	693a      	ldr	r2, [r7, #16]
 8009474:	2134      	movs	r1, #52	; 0x34
 8009476:	fb01 f303 	mul.w	r3, r1, r3
 800947a:	4413      	add	r3, r2
 800947c:	3390      	adds	r3, #144	; 0x90
 800947e:	2201      	movs	r2, #1
 8009480:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009482:	2300      	movs	r3, #0
 8009484:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009486:	e057      	b.n	8009538 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8009488:	7bfb      	ldrb	r3, [r7, #15]
 800948a:	2b02      	cmp	r3, #2
 800948c:	d109      	bne.n	80094a2 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800948e:	78fb      	ldrb	r3, [r7, #3]
 8009490:	693a      	ldr	r2, [r7, #16]
 8009492:	2134      	movs	r1, #52	; 0x34
 8009494:	fb01 f303 	mul.w	r3, r1, r3
 8009498:	4413      	add	r3, r2
 800949a:	3390      	adds	r3, #144	; 0x90
 800949c:	2205      	movs	r2, #5
 800949e:	701a      	strb	r2, [r3, #0]
      break;
 80094a0:	e04a      	b.n	8009538 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80094a2:	7bfb      	ldrb	r3, [r7, #15]
 80094a4:	2b04      	cmp	r3, #4
 80094a6:	d147      	bne.n	8009538 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80094a8:	78fb      	ldrb	r3, [r7, #3]
 80094aa:	693a      	ldr	r2, [r7, #16]
 80094ac:	2134      	movs	r1, #52	; 0x34
 80094ae:	fb01 f303 	mul.w	r3, r1, r3
 80094b2:	4413      	add	r3, r2
 80094b4:	3390      	adds	r3, #144	; 0x90
 80094b6:	2208      	movs	r2, #8
 80094b8:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80094ba:	2302      	movs	r3, #2
 80094bc:	75fb      	strb	r3, [r7, #23]
      break;
 80094be:	e03b      	b.n	8009538 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80094c0:	78fb      	ldrb	r3, [r7, #3]
 80094c2:	2234      	movs	r2, #52	; 0x34
 80094c4:	fb02 f303 	mul.w	r3, r2, r3
 80094c8:	3398      	adds	r3, #152	; 0x98
 80094ca:	693a      	ldr	r2, [r7, #16]
 80094cc:	4413      	add	r3, r2
 80094ce:	1d1a      	adds	r2, r3, #4
 80094d0:	78fb      	ldrb	r3, [r7, #3]
 80094d2:	4619      	mov	r1, r3
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 fd52 	bl	8009f7e <USBH_MSC_SCSI_RequestSense>
 80094da:	4603      	mov	r3, r0
 80094dc:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80094de:	7bfb      	ldrb	r3, [r7, #15]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d113      	bne.n	800950c <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80094e4:	78fb      	ldrb	r3, [r7, #3]
 80094e6:	693a      	ldr	r2, [r7, #16]
 80094e8:	2134      	movs	r1, #52	; 0x34
 80094ea:	fb01 f303 	mul.w	r3, r1, r3
 80094ee:	4413      	add	r3, r2
 80094f0:	3390      	adds	r3, #144	; 0x90
 80094f2:	2201      	movs	r2, #1
 80094f4:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80094f6:	78fb      	ldrb	r3, [r7, #3]
 80094f8:	693a      	ldr	r2, [r7, #16]
 80094fa:	2134      	movs	r1, #52	; 0x34
 80094fc:	fb01 f303 	mul.w	r3, r1, r3
 8009500:	4413      	add	r3, r2
 8009502:	3391      	adds	r3, #145	; 0x91
 8009504:	2202      	movs	r2, #2
 8009506:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8009508:	2302      	movs	r3, #2
 800950a:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800950c:	7bfb      	ldrb	r3, [r7, #15]
 800950e:	2b02      	cmp	r3, #2
 8009510:	d014      	beq.n	800953c <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009512:	7bfb      	ldrb	r3, [r7, #15]
 8009514:	2b04      	cmp	r3, #4
 8009516:	d111      	bne.n	800953c <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009518:	78fb      	ldrb	r3, [r7, #3]
 800951a:	693a      	ldr	r2, [r7, #16]
 800951c:	2134      	movs	r1, #52	; 0x34
 800951e:	fb01 f303 	mul.w	r3, r1, r3
 8009522:	4413      	add	r3, r2
 8009524:	3390      	adds	r3, #144	; 0x90
 8009526:	2208      	movs	r2, #8
 8009528:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800952a:	2302      	movs	r3, #2
 800952c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800952e:	e005      	b.n	800953c <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8009530:	bf00      	nop
 8009532:	e004      	b.n	800953e <USBH_MSC_RdWrProcess+0x194>
      break;
 8009534:	bf00      	nop
 8009536:	e002      	b.n	800953e <USBH_MSC_RdWrProcess+0x194>
      break;
 8009538:	bf00      	nop
 800953a:	e000      	b.n	800953e <USBH_MSC_RdWrProcess+0x194>
      break;
 800953c:	bf00      	nop

  }
  return error;
 800953e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009540:	4618      	mov	r0, r3
 8009542:	3718      	adds	r7, #24
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009548:	b480      	push	{r7}
 800954a:	b085      	sub	sp, #20
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	460b      	mov	r3, r1
 8009552:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800955a:	69db      	ldr	r3, [r3, #28]
 800955c:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	b2db      	uxtb	r3, r3
 8009564:	2b0b      	cmp	r3, #11
 8009566:	d10c      	bne.n	8009582 <USBH_MSC_UnitIsReady+0x3a>
 8009568:	78fb      	ldrb	r3, [r7, #3]
 800956a:	68ba      	ldr	r2, [r7, #8]
 800956c:	2134      	movs	r1, #52	; 0x34
 800956e:	fb01 f303 	mul.w	r3, r1, r3
 8009572:	4413      	add	r3, r2
 8009574:	3391      	adds	r3, #145	; 0x91
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d102      	bne.n	8009582 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800957c:	2301      	movs	r3, #1
 800957e:	73fb      	strb	r3, [r7, #15]
 8009580:	e001      	b.n	8009586 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8009582:	2300      	movs	r3, #0
 8009584:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009586:	7bfb      	ldrb	r3, [r7, #15]
}
 8009588:	4618      	mov	r0, r3
 800958a:	3714      	adds	r7, #20
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b086      	sub	sp, #24
 8009598:	af00      	add	r7, sp, #0
 800959a:	60f8      	str	r0, [r7, #12]
 800959c:	460b      	mov	r3, r1
 800959e:	607a      	str	r2, [r7, #4]
 80095a0:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095a8:	69db      	ldr	r3, [r3, #28]
 80095aa:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	2b0b      	cmp	r3, #11
 80095b4:	d10d      	bne.n	80095d2 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80095b6:	7afb      	ldrb	r3, [r7, #11]
 80095b8:	2234      	movs	r2, #52	; 0x34
 80095ba:	fb02 f303 	mul.w	r3, r2, r3
 80095be:	3390      	adds	r3, #144	; 0x90
 80095c0:	697a      	ldr	r2, [r7, #20]
 80095c2:	4413      	add	r3, r2
 80095c4:	2234      	movs	r2, #52	; 0x34
 80095c6:	4619      	mov	r1, r3
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f003 fb17 	bl	800cbfc <memcpy>
    return USBH_OK;
 80095ce:	2300      	movs	r3, #0
 80095d0:	e000      	b.n	80095d4 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 80095d2:	2302      	movs	r3, #2
  }
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3718      	adds	r7, #24
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b088      	sub	sp, #32
 80095e0:	af02      	add	r7, sp, #8
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	607a      	str	r2, [r7, #4]
 80095e6:	603b      	str	r3, [r7, #0]
 80095e8:	460b      	mov	r3, r1
 80095ea:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095f2:	69db      	ldr	r3, [r3, #28]
 80095f4:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d00e      	beq.n	8009620 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009608:	2b0b      	cmp	r3, #11
 800960a:	d109      	bne.n	8009620 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800960c:	7afb      	ldrb	r3, [r7, #11]
 800960e:	697a      	ldr	r2, [r7, #20]
 8009610:	2134      	movs	r1, #52	; 0x34
 8009612:	fb01 f303 	mul.w	r3, r1, r3
 8009616:	4413      	add	r3, r2
 8009618:	3390      	adds	r3, #144	; 0x90
 800961a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800961c:	2b01      	cmp	r3, #1
 800961e:	d001      	beq.n	8009624 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8009620:	2302      	movs	r3, #2
 8009622:	e040      	b.n	80096a6 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	2206      	movs	r2, #6
 8009628:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800962a:	7afb      	ldrb	r3, [r7, #11]
 800962c:	697a      	ldr	r2, [r7, #20]
 800962e:	2134      	movs	r1, #52	; 0x34
 8009630:	fb01 f303 	mul.w	r3, r1, r3
 8009634:	4413      	add	r3, r2
 8009636:	3390      	adds	r3, #144	; 0x90
 8009638:	2206      	movs	r2, #6
 800963a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800963c:	7afb      	ldrb	r3, [r7, #11]
 800963e:	b29a      	uxth	r2, r3
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009646:	7af9      	ldrb	r1, [r7, #11]
 8009648:	6a3b      	ldr	r3, [r7, #32]
 800964a:	9300      	str	r3, [sp, #0]
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f000 fd78 	bl	800a146 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800965c:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800965e:	e016      	b.n	800968e <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	1ad2      	subs	r2, r2, r3
 800966a:	6a3b      	ldr	r3, [r7, #32]
 800966c:	f242 7110 	movw	r1, #10000	; 0x2710
 8009670:	fb01 f303 	mul.w	r3, r1, r3
 8009674:	429a      	cmp	r2, r3
 8009676:	d805      	bhi.n	8009684 <USBH_MSC_Read+0xa8>
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800967e:	b2db      	uxtb	r3, r3
 8009680:	2b00      	cmp	r3, #0
 8009682:	d104      	bne.n	800968e <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	2201      	movs	r2, #1
 8009688:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800968a:	2302      	movs	r3, #2
 800968c:	e00b      	b.n	80096a6 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800968e:	7afb      	ldrb	r3, [r7, #11]
 8009690:	4619      	mov	r1, r3
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	f7ff fe89 	bl	80093aa <USBH_MSC_RdWrProcess>
 8009698:	4603      	mov	r3, r0
 800969a:	2b01      	cmp	r3, #1
 800969c:	d0e0      	beq.n	8009660 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	2201      	movs	r2, #1
 80096a2:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3718      	adds	r7, #24
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}

080096ae <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b088      	sub	sp, #32
 80096b2:	af02      	add	r7, sp, #8
 80096b4:	60f8      	str	r0, [r7, #12]
 80096b6:	607a      	str	r2, [r7, #4]
 80096b8:	603b      	str	r3, [r7, #0]
 80096ba:	460b      	mov	r3, r1
 80096bc:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096c4:	69db      	ldr	r3, [r3, #28]
 80096c6:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d00e      	beq.n	80096f2 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80096da:	2b0b      	cmp	r3, #11
 80096dc:	d109      	bne.n	80096f2 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80096de:	7afb      	ldrb	r3, [r7, #11]
 80096e0:	697a      	ldr	r2, [r7, #20]
 80096e2:	2134      	movs	r1, #52	; 0x34
 80096e4:	fb01 f303 	mul.w	r3, r1, r3
 80096e8:	4413      	add	r3, r2
 80096ea:	3390      	adds	r3, #144	; 0x90
 80096ec:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d001      	beq.n	80096f6 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 80096f2:	2302      	movs	r3, #2
 80096f4:	e040      	b.n	8009778 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	2207      	movs	r2, #7
 80096fa:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80096fc:	7afb      	ldrb	r3, [r7, #11]
 80096fe:	697a      	ldr	r2, [r7, #20]
 8009700:	2134      	movs	r1, #52	; 0x34
 8009702:	fb01 f303 	mul.w	r3, r1, r3
 8009706:	4413      	add	r3, r2
 8009708:	3390      	adds	r3, #144	; 0x90
 800970a:	2207      	movs	r2, #7
 800970c:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800970e:	7afb      	ldrb	r3, [r7, #11]
 8009710:	b29a      	uxth	r2, r3
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009718:	7af9      	ldrb	r1, [r7, #11]
 800971a:	6a3b      	ldr	r3, [r7, #32]
 800971c:	9300      	str	r3, [sp, #0]
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	f000 fca4 	bl	800a070 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800972e:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009730:	e016      	b.n	8009760 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	1ad2      	subs	r2, r2, r3
 800973c:	6a3b      	ldr	r3, [r7, #32]
 800973e:	f242 7110 	movw	r1, #10000	; 0x2710
 8009742:	fb01 f303 	mul.w	r3, r1, r3
 8009746:	429a      	cmp	r2, r3
 8009748:	d805      	bhi.n	8009756 <USBH_MSC_Write+0xa8>
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009750:	b2db      	uxtb	r3, r3
 8009752:	2b00      	cmp	r3, #0
 8009754:	d104      	bne.n	8009760 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	2201      	movs	r2, #1
 800975a:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800975c:	2302      	movs	r3, #2
 800975e:	e00b      	b.n	8009778 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009760:	7afb      	ldrb	r3, [r7, #11]
 8009762:	4619      	mov	r1, r3
 8009764:	68f8      	ldr	r0, [r7, #12]
 8009766:	f7ff fe20 	bl	80093aa <USBH_MSC_RdWrProcess>
 800976a:	4603      	mov	r3, r0
 800976c:	2b01      	cmp	r3, #1
 800976e:	d0e0      	beq.n	8009732 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	2201      	movs	r2, #1
 8009774:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8009776:	2300      	movs	r3, #0
}
 8009778:	4618      	mov	r0, r3
 800977a:	3718      	adds	r7, #24
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2221      	movs	r2, #33	; 0x21
 800978c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	22ff      	movs	r2, #255	; 0xff
 8009792:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2200      	movs	r2, #0
 800979e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 80097a6:	2200      	movs	r2, #0
 80097a8:	2100      	movs	r1, #0
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f001 fea4 	bl	800b4f8 <USBH_CtlReq>
 80097b0:	4603      	mov	r3, r0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3708      	adds	r7, #8
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b082      	sub	sp, #8
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
 80097c2:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	22a1      	movs	r2, #161	; 0xa1
 80097c8:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	22fe      	movs	r2, #254	; 0xfe
 80097ce:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2200      	movs	r2, #0
 80097d4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2200      	movs	r2, #0
 80097da:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2201      	movs	r2, #1
 80097e0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 80097e2:	2201      	movs	r2, #1
 80097e4:	6839      	ldr	r1, [r7, #0]
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f001 fe86 	bl	800b4f8 <USBH_CtlReq>
 80097ec:	4603      	mov	r3, r0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3708      	adds	r7, #8
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
	...

080097f8 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b085      	sub	sp, #20
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009806:	69db      	ldr	r3, [r3, #28]
 8009808:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	4a09      	ldr	r2, [pc, #36]	; (8009834 <USBH_MSC_BOT_Init+0x3c>)
 800980e:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	4a09      	ldr	r2, [pc, #36]	; (8009838 <USBH_MSC_BOT_Init+0x40>)
 8009814:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2201      	movs	r2, #1
 800981a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2201      	movs	r2, #1
 8009822:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8009826:	2300      	movs	r3, #0
}
 8009828:	4618      	mov	r0, r3
 800982a:	3714      	adds	r7, #20
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr
 8009834:	43425355 	.word	0x43425355
 8009838:	20304050 	.word	0x20304050

0800983c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b088      	sub	sp, #32
 8009840:	af02      	add	r7, sp, #8
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	460b      	mov	r3, r1
 8009846:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009848:	2301      	movs	r3, #1
 800984a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800984c:	2301      	movs	r3, #1
 800984e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8009850:	2301      	movs	r3, #1
 8009852:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009854:	2300      	movs	r3, #0
 8009856:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800985e:	69db      	ldr	r3, [r3, #28]
 8009860:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8009862:	2300      	movs	r3, #0
 8009864:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800986c:	3b01      	subs	r3, #1
 800986e:	2b0a      	cmp	r3, #10
 8009870:	f200 819e 	bhi.w	8009bb0 <USBH_MSC_BOT_Process+0x374>
 8009874:	a201      	add	r2, pc, #4	; (adr r2, 800987c <USBH_MSC_BOT_Process+0x40>)
 8009876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800987a:	bf00      	nop
 800987c:	080098a9 	.word	0x080098a9
 8009880:	080098d1 	.word	0x080098d1
 8009884:	0800993b 	.word	0x0800993b
 8009888:	08009959 	.word	0x08009959
 800988c:	080099dd 	.word	0x080099dd
 8009890:	080099ff 	.word	0x080099ff
 8009894:	08009a97 	.word	0x08009a97
 8009898:	08009ab3 	.word	0x08009ab3
 800989c:	08009b05 	.word	0x08009b05
 80098a0:	08009b35 	.word	0x08009b35
 80098a4:	08009b97 	.word	0x08009b97
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	78fa      	ldrb	r2, [r7, #3]
 80098ac:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	2202      	movs	r2, #2
 80098b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	795b      	ldrb	r3, [r3, #5]
 80098c2:	2201      	movs	r2, #1
 80098c4:	9200      	str	r2, [sp, #0]
 80098c6:	221f      	movs	r2, #31
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f002 f824 	bl	800b916 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 80098ce:	e17e      	b.n	8009bce <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	795b      	ldrb	r3, [r3, #5]
 80098d4:	4619      	mov	r1, r3
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f003 f878 	bl	800c9cc <USBH_LL_GetURBState>
 80098dc:	4603      	mov	r3, r0
 80098de:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80098e0:	7d3b      	ldrb	r3, [r7, #20]
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d118      	bne.n	8009918 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d00f      	beq.n	800990e <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80098f4:	b25b      	sxtb	r3, r3
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	da04      	bge.n	8009904 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	2203      	movs	r2, #3
 80098fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009902:	e157      	b.n	8009bb4 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	2205      	movs	r2, #5
 8009908:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800990c:	e152      	b.n	8009bb4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	2207      	movs	r2, #7
 8009912:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009916:	e14d      	b.n	8009bb4 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009918:	7d3b      	ldrb	r3, [r7, #20]
 800991a:	2b02      	cmp	r3, #2
 800991c:	d104      	bne.n	8009928 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	2201      	movs	r2, #1
 8009922:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009926:	e145      	b.n	8009bb4 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8009928:	7d3b      	ldrb	r3, [r7, #20]
 800992a:	2b05      	cmp	r3, #5
 800992c:	f040 8142 	bne.w	8009bb4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	220a      	movs	r2, #10
 8009934:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009938:	e13c      	b.n	8009bb4 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	895a      	ldrh	r2, [r3, #10]
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	791b      	ldrb	r3, [r3, #4]
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f002 f809 	bl	800b960 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	2204      	movs	r2, #4
 8009952:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8009956:	e13a      	b.n	8009bce <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	791b      	ldrb	r3, [r3, #4]
 800995c:	4619      	mov	r1, r3
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f003 f834 	bl	800c9cc <USBH_LL_GetURBState>
 8009964:	4603      	mov	r3, r0
 8009966:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009968:	7d3b      	ldrb	r3, [r7, #20]
 800996a:	2b01      	cmp	r3, #1
 800996c:	d12d      	bne.n	80099ca <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009972:	693a      	ldr	r2, [r7, #16]
 8009974:	8952      	ldrh	r2, [r2, #10]
 8009976:	4293      	cmp	r3, r2
 8009978:	d910      	bls.n	800999c <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009980:	693a      	ldr	r2, [r7, #16]
 8009982:	8952      	ldrh	r2, [r2, #10]
 8009984:	441a      	add	r2, r3
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009990:	693a      	ldr	r2, [r7, #16]
 8009992:	8952      	ldrh	r2, [r2, #10]
 8009994:	1a9a      	subs	r2, r3, r2
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	65da      	str	r2, [r3, #92]	; 0x5c
 800999a:	e002      	b.n	80099a2 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	2200      	movs	r2, #0
 80099a0:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d00a      	beq.n	80099c0 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	895a      	ldrh	r2, [r3, #10]
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	791b      	ldrb	r3, [r3, #4]
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f001 ffd1 	bl	800b960 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80099be:	e0fb      	b.n	8009bb8 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	2207      	movs	r2, #7
 80099c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80099c8:	e0f6      	b.n	8009bb8 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 80099ca:	7d3b      	ldrb	r3, [r7, #20]
 80099cc:	2b05      	cmp	r3, #5
 80099ce:	f040 80f3 	bne.w	8009bb8 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	2209      	movs	r2, #9
 80099d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80099da:	e0ed      	b.n	8009bb8 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	891a      	ldrh	r2, [r3, #8]
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	795b      	ldrb	r3, [r3, #5]
 80099ea:	2001      	movs	r0, #1
 80099ec:	9000      	str	r0, [sp, #0]
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f001 ff91 	bl	800b916 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	2206      	movs	r2, #6
 80099f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80099fc:	e0e7      	b.n	8009bce <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	795b      	ldrb	r3, [r3, #5]
 8009a02:	4619      	mov	r1, r3
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f002 ffe1 	bl	800c9cc <USBH_LL_GetURBState>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009a0e:	7d3b      	ldrb	r3, [r7, #20]
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d12f      	bne.n	8009a74 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a18:	693a      	ldr	r2, [r7, #16]
 8009a1a:	8912      	ldrh	r2, [r2, #8]
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d910      	bls.n	8009a42 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a26:	693a      	ldr	r2, [r7, #16]
 8009a28:	8912      	ldrh	r2, [r2, #8]
 8009a2a:	441a      	add	r2, r3
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a36:	693a      	ldr	r2, [r7, #16]
 8009a38:	8912      	ldrh	r2, [r2, #8]
 8009a3a:	1a9a      	subs	r2, r3, r2
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	65da      	str	r2, [r3, #92]	; 0x5c
 8009a40:	e002      	b.n	8009a48 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	2200      	movs	r2, #0
 8009a46:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d00c      	beq.n	8009a6a <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	891a      	ldrh	r2, [r3, #8]
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	795b      	ldrb	r3, [r3, #5]
 8009a5e:	2001      	movs	r0, #1
 8009a60:	9000      	str	r0, [sp, #0]
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f001 ff57 	bl	800b916 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8009a68:	e0a8      	b.n	8009bbc <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	2207      	movs	r2, #7
 8009a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009a72:	e0a3      	b.n	8009bbc <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009a74:	7d3b      	ldrb	r3, [r7, #20]
 8009a76:	2b02      	cmp	r3, #2
 8009a78:	d104      	bne.n	8009a84 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	2205      	movs	r2, #5
 8009a7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009a82:	e09b      	b.n	8009bbc <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8009a84:	7d3b      	ldrb	r3, [r7, #20]
 8009a86:	2b05      	cmp	r3, #5
 8009a88:	f040 8098 	bne.w	8009bbc <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	220a      	movs	r2, #10
 8009a90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009a94:	e092      	b.n	8009bbc <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	791b      	ldrb	r3, [r3, #4]
 8009aa0:	220d      	movs	r2, #13
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f001 ff5c 	bl	800b960 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	2208      	movs	r2, #8
 8009aac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009ab0:	e08d      	b.n	8009bce <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	791b      	ldrb	r3, [r3, #4]
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f002 ff87 	bl	800c9cc <USBH_LL_GetURBState>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8009ac2:	7d3b      	ldrb	r3, [r7, #20]
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d115      	bne.n	8009af4 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	2201      	movs	r2, #1
 8009acc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 f8a9 	bl	8009c30 <USBH_MSC_DecodeCSW>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8009ae2:	7d7b      	ldrb	r3, [r7, #21]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d102      	bne.n	8009aee <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8009aec:	e068      	b.n	8009bc0 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8009aee:	2302      	movs	r3, #2
 8009af0:	75fb      	strb	r3, [r7, #23]
      break;
 8009af2:	e065      	b.n	8009bc0 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8009af4:	7d3b      	ldrb	r3, [r7, #20]
 8009af6:	2b05      	cmp	r3, #5
 8009af8:	d162      	bne.n	8009bc0 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	2209      	movs	r2, #9
 8009afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b02:	e05d      	b.n	8009bc0 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009b04:	78fb      	ldrb	r3, [r7, #3]
 8009b06:	2200      	movs	r2, #0
 8009b08:	4619      	mov	r1, r3
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 f864 	bl	8009bd8 <USBH_MSC_BOT_Abort>
 8009b10:	4603      	mov	r3, r0
 8009b12:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009b14:	7dbb      	ldrb	r3, [r7, #22]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d104      	bne.n	8009b24 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	2207      	movs	r2, #7
 8009b1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009b22:	e04f      	b.n	8009bc4 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009b24:	7dbb      	ldrb	r3, [r7, #22]
 8009b26:	2b04      	cmp	r3, #4
 8009b28:	d14c      	bne.n	8009bc4 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	220b      	movs	r2, #11
 8009b2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b32:	e047      	b.n	8009bc4 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009b34:	78fb      	ldrb	r3, [r7, #3]
 8009b36:	2201      	movs	r2, #1
 8009b38:	4619      	mov	r1, r3
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 f84c 	bl	8009bd8 <USBH_MSC_BOT_Abort>
 8009b40:	4603      	mov	r3, r0
 8009b42:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009b44:	7dbb      	ldrb	r3, [r7, #22]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d11d      	bne.n	8009b86 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	795b      	ldrb	r3, [r3, #5]
 8009b4e:	4619      	mov	r1, r3
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f002 ff95 	bl	800ca80 <USBH_LL_GetToggle>
 8009b56:	4603      	mov	r3, r0
 8009b58:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	7959      	ldrb	r1, [r3, #5]
 8009b5e:	7bfb      	ldrb	r3, [r7, #15]
 8009b60:	f1c3 0301 	rsb	r3, r3, #1
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	461a      	mov	r2, r3
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f002 ff59 	bl	800ca20 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	791b      	ldrb	r3, [r3, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	4619      	mov	r1, r3
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f002 ff52 	bl	800ca20 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	2209      	movs	r2, #9
 8009b80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009b84:	e020      	b.n	8009bc8 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8009b86:	7dbb      	ldrb	r3, [r7, #22]
 8009b88:	2b04      	cmp	r3, #4
 8009b8a:	d11d      	bne.n	8009bc8 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	220b      	movs	r2, #11
 8009b90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b94:	e018      	b.n	8009bc8 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f7ff fdf2 	bl	8009780 <USBH_MSC_BOT_REQ_Reset>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009ba0:	7dfb      	ldrb	r3, [r7, #23]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d112      	bne.n	8009bcc <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	2201      	movs	r2, #1
 8009baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8009bae:	e00d      	b.n	8009bcc <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8009bb0:	bf00      	nop
 8009bb2:	e00c      	b.n	8009bce <USBH_MSC_BOT_Process+0x392>
      break;
 8009bb4:	bf00      	nop
 8009bb6:	e00a      	b.n	8009bce <USBH_MSC_BOT_Process+0x392>
      break;
 8009bb8:	bf00      	nop
 8009bba:	e008      	b.n	8009bce <USBH_MSC_BOT_Process+0x392>
      break;
 8009bbc:	bf00      	nop
 8009bbe:	e006      	b.n	8009bce <USBH_MSC_BOT_Process+0x392>
      break;
 8009bc0:	bf00      	nop
 8009bc2:	e004      	b.n	8009bce <USBH_MSC_BOT_Process+0x392>
      break;
 8009bc4:	bf00      	nop
 8009bc6:	e002      	b.n	8009bce <USBH_MSC_BOT_Process+0x392>
      break;
 8009bc8:	bf00      	nop
 8009bca:	e000      	b.n	8009bce <USBH_MSC_BOT_Process+0x392>
      break;
 8009bcc:	bf00      	nop
  }
  return status;
 8009bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3718      	adds	r7, #24
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	460b      	mov	r3, r1
 8009be2:	70fb      	strb	r3, [r7, #3]
 8009be4:	4613      	mov	r3, r2
 8009be6:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8009be8:	2302      	movs	r3, #2
 8009bea:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bf2:	69db      	ldr	r3, [r3, #28]
 8009bf4:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8009bf6:	78bb      	ldrb	r3, [r7, #2]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d002      	beq.n	8009c02 <USBH_MSC_BOT_Abort+0x2a>
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d009      	beq.n	8009c14 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009c00:	e011      	b.n	8009c26 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	79db      	ldrb	r3, [r3, #7]
 8009c06:	4619      	mov	r1, r3
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f001 f9a8 	bl	800af5e <USBH_ClrFeature>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	73fb      	strb	r3, [r7, #15]
      break;
 8009c12:	e008      	b.n	8009c26 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	799b      	ldrb	r3, [r3, #6]
 8009c18:	4619      	mov	r1, r3
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f001 f99f 	bl	800af5e <USBH_ClrFeature>
 8009c20:	4603      	mov	r3, r0
 8009c22:	73fb      	strb	r3, [r7, #15]
      break;
 8009c24:	bf00      	nop
  }
  return status;
 8009c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3710      	adds	r7, #16
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c3e:	69db      	ldr	r3, [r3, #28]
 8009c40:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8009c42:	2301      	movs	r3, #1
 8009c44:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	791b      	ldrb	r3, [r3, #4]
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f002 fe2b 	bl	800c8a8 <USBH_LL_GetLastXferSize>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b0d      	cmp	r3, #13
 8009c56:	d002      	beq.n	8009c5e <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8009c58:	2302      	movs	r3, #2
 8009c5a:	73fb      	strb	r3, [r7, #15]
 8009c5c:	e024      	b.n	8009ca8 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c62:	4a14      	ldr	r2, [pc, #80]	; (8009cb4 <USBH_MSC_DecodeCSW+0x84>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d11d      	bne.n	8009ca4 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d119      	bne.n	8009ca8 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d102      	bne.n	8009c84 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	73fb      	strb	r3, [r7, #15]
 8009c82:	e011      	b.n	8009ca8 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d102      	bne.n	8009c94 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	73fb      	strb	r3, [r7, #15]
 8009c92:	e009      	b.n	8009ca8 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009c9a:	2b02      	cmp	r3, #2
 8009c9c:	d104      	bne.n	8009ca8 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8009c9e:	2302      	movs	r3, #2
 8009ca0:	73fb      	strb	r3, [r7, #15]
 8009ca2:	e001      	b.n	8009ca8 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8009ca4:	2302      	movs	r3, #2
 8009ca6:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8009ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3710      	adds	r7, #16
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	53425355 	.word	0x53425355

08009cb8 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009cc4:	2302      	movs	r3, #2
 8009cc6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cce:	69db      	ldr	r3, [r3, #28]
 8009cd0:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d002      	beq.n	8009ce2 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8009cdc:	2b02      	cmp	r3, #2
 8009cde:	d021      	beq.n	8009d24 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009ce0:	e028      	b.n	8009d34 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	2200      	movs	r2, #0
 8009cec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	220a      	movs	r2, #10
 8009cf4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	3363      	adds	r3, #99	; 0x63
 8009cfc:	2210      	movs	r2, #16
 8009cfe:	2100      	movs	r1, #0
 8009d00:	4618      	mov	r0, r3
 8009d02:	f002 ff89 	bl	800cc18 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	2201      	movs	r2, #1
 8009d12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	2202      	movs	r2, #2
 8009d1a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	73fb      	strb	r3, [r7, #15]
      break;
 8009d22:	e007      	b.n	8009d34 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009d24:	78fb      	ldrb	r3, [r7, #3]
 8009d26:	4619      	mov	r1, r3
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f7ff fd87 	bl	800983c <USBH_MSC_BOT_Process>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	73fb      	strb	r3, [r7, #15]
      break;
 8009d32:	bf00      	nop
  }

  return error;
 8009d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b086      	sub	sp, #24
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	60f8      	str	r0, [r7, #12]
 8009d46:	460b      	mov	r3, r1
 8009d48:	607a      	str	r2, [r7, #4]
 8009d4a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d56:	69db      	ldr	r3, [r3, #28]
 8009d58:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d002      	beq.n	8009d6a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8009d64:	2b02      	cmp	r3, #2
 8009d66:	d027      	beq.n	8009db8 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8009d68:	e05f      	b.n	8009e2a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	2208      	movs	r2, #8
 8009d6e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	2280      	movs	r2, #128	; 0x80
 8009d74:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	220a      	movs	r2, #10
 8009d7c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	3363      	adds	r3, #99	; 0x63
 8009d84:	2210      	movs	r2, #16
 8009d86:	2100      	movs	r1, #0
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f002 ff45 	bl	800cc18 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	2225      	movs	r2, #37	; 0x25
 8009d92:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	2201      	movs	r2, #1
 8009d9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	2202      	movs	r2, #2
 8009da2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	f103 0210 	add.w	r2, r3, #16
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009db2:	2301      	movs	r3, #1
 8009db4:	75fb      	strb	r3, [r7, #23]
      break;
 8009db6:	e038      	b.n	8009e2a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009db8:	7afb      	ldrb	r3, [r7, #11]
 8009dba:	4619      	mov	r1, r3
 8009dbc:	68f8      	ldr	r0, [r7, #12]
 8009dbe:	f7ff fd3d 	bl	800983c <USBH_MSC_BOT_Process>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009dc6:	7dfb      	ldrb	r3, [r7, #23]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d12d      	bne.n	8009e28 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dd2:	3303      	adds	r3, #3
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dde:	3302      	adds	r3, #2
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	021b      	lsls	r3, r3, #8
 8009de4:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dec:	3301      	adds	r3, #1
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009df2:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	061b      	lsls	r3, r3, #24
 8009dfe:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e0a:	3307      	adds	r3, #7
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e16:	3306      	adds	r3, #6
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	021b      	lsls	r3, r3, #8
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	4313      	orrs	r3, r2
 8009e22:	b29a      	uxth	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	809a      	strh	r2, [r3, #4]
      break;
 8009e28:	bf00      	nop
  }

  return error;
 8009e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3718      	adds	r7, #24
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b086      	sub	sp, #24
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	607a      	str	r2, [r7, #4]
 8009e40:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8009e42:	2302      	movs	r3, #2
 8009e44:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e4c:	69db      	ldr	r3, [r3, #28]
 8009e4e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d002      	beq.n	8009e60 <USBH_MSC_SCSI_Inquiry+0x2c>
 8009e5a:	2b02      	cmp	r3, #2
 8009e5c:	d03d      	beq.n	8009eda <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8009e5e:	e089      	b.n	8009f74 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	2224      	movs	r2, #36	; 0x24
 8009e64:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	2280      	movs	r2, #128	; 0x80
 8009e6a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	220a      	movs	r2, #10
 8009e72:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	3363      	adds	r3, #99	; 0x63
 8009e7a:	220a      	movs	r2, #10
 8009e7c:	2100      	movs	r1, #0
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f002 feca 	bl	800cc18 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	2212      	movs	r2, #18
 8009e88:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009e8c:	7afb      	ldrb	r3, [r7, #11]
 8009e8e:	015b      	lsls	r3, r3, #5
 8009e90:	b2da      	uxtb	r2, r3
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	2224      	movs	r2, #36	; 0x24
 8009eac:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	2202      	movs	r2, #2
 8009ec4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	f103 0210 	add.w	r2, r3, #16
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ed8:	e04c      	b.n	8009f74 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009eda:	7afb      	ldrb	r3, [r7, #11]
 8009edc:	4619      	mov	r1, r3
 8009ede:	68f8      	ldr	r0, [r7, #12]
 8009ee0:	f7ff fcac 	bl	800983c <USBH_MSC_BOT_Process>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009ee8:	7dfb      	ldrb	r3, [r7, #23]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d141      	bne.n	8009f72 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8009eee:	2222      	movs	r2, #34	; 0x22
 8009ef0:	2100      	movs	r1, #0
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f002 fe90 	bl	800cc18 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	f003 031f 	and.w	r3, r3, #31
 8009f04:	b2da      	uxtb	r2, r3
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	095b      	lsrs	r3, r3, #5
 8009f14:	b2da      	uxtb	r2, r3
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f20:	3301      	adds	r3, #1
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	b25b      	sxtb	r3, r3
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	da03      	bge.n	8009f32 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	709a      	strb	r2, [r3, #2]
 8009f30:	e002      	b.n	8009f38 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	1cd8      	adds	r0, r3, #3
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f42:	3308      	adds	r3, #8
 8009f44:	2208      	movs	r2, #8
 8009f46:	4619      	mov	r1, r3
 8009f48:	f002 fe58 	bl	800cbfc <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f103 000c 	add.w	r0, r3, #12
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f58:	3310      	adds	r3, #16
 8009f5a:	2210      	movs	r2, #16
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	f002 fe4d 	bl	800cbfc <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	331d      	adds	r3, #29
 8009f66:	693a      	ldr	r2, [r7, #16]
 8009f68:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8009f6c:	3220      	adds	r2, #32
 8009f6e:	6812      	ldr	r2, [r2, #0]
 8009f70:	601a      	str	r2, [r3, #0]
      break;
 8009f72:	bf00      	nop
  }

  return error;
 8009f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3718      	adds	r7, #24
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}

08009f7e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8009f7e:	b580      	push	{r7, lr}
 8009f80:	b086      	sub	sp, #24
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	60f8      	str	r0, [r7, #12]
 8009f86:	460b      	mov	r3, r1
 8009f88:	607a      	str	r2, [r7, #4]
 8009f8a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009f8c:	2302      	movs	r3, #2
 8009f8e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f96:	69db      	ldr	r3, [r3, #28]
 8009f98:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d002      	beq.n	8009faa <USBH_MSC_SCSI_RequestSense+0x2c>
 8009fa4:	2b02      	cmp	r3, #2
 8009fa6:	d03d      	beq.n	800a024 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8009fa8:	e05d      	b.n	800a066 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	220e      	movs	r2, #14
 8009fae:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	2280      	movs	r2, #128	; 0x80
 8009fb4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	220a      	movs	r2, #10
 8009fbc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	3363      	adds	r3, #99	; 0x63
 8009fc4:	2210      	movs	r2, #16
 8009fc6:	2100      	movs	r1, #0
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f002 fe25 	bl	800cc18 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	2203      	movs	r2, #3
 8009fd2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009fd6:	7afb      	ldrb	r3, [r7, #11]
 8009fd8:	015b      	lsls	r3, r3, #5
 8009fda:	b2da      	uxtb	r2, r3
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	2200      	movs	r2, #0
 8009fee:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	220e      	movs	r2, #14
 8009ff6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	2201      	movs	r2, #1
 800a006:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	2202      	movs	r2, #2
 800a00e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	f103 0210 	add.w	r2, r3, #16
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a01e:	2301      	movs	r3, #1
 800a020:	75fb      	strb	r3, [r7, #23]
      break;
 800a022:	e020      	b.n	800a066 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a024:	7afb      	ldrb	r3, [r7, #11]
 800a026:	4619      	mov	r1, r3
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f7ff fc07 	bl	800983c <USBH_MSC_BOT_Process>
 800a02e:	4603      	mov	r3, r0
 800a030:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a032:	7dfb      	ldrb	r3, [r7, #23]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d115      	bne.n	800a064 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a03e:	3302      	adds	r3, #2
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	f003 030f 	and.w	r3, r3, #15
 800a046:	b2da      	uxtb	r2, r3
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a052:	7b1a      	ldrb	r2, [r3, #12]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a05e:	7b5a      	ldrb	r2, [r3, #13]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	709a      	strb	r2, [r3, #2]
      break;
 800a064:	bf00      	nop
  }

  return error;
 800a066:	7dfb      	ldrb	r3, [r7, #23]
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3718      	adds	r7, #24
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af00      	add	r7, sp, #0
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	607a      	str	r2, [r7, #4]
 800a07a:	603b      	str	r3, [r7, #0]
 800a07c:	460b      	mov	r3, r1
 800a07e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a080:	2302      	movs	r3, #2
 800a082:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a08a:	69db      	ldr	r3, [r3, #28]
 800a08c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a094:	2b01      	cmp	r3, #1
 800a096:	d002      	beq.n	800a09e <USBH_MSC_SCSI_Write+0x2e>
 800a098:	2b02      	cmp	r3, #2
 800a09a:	d047      	beq.n	800a12c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a09c:	e04e      	b.n	800a13c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	6a3b      	ldr	r3, [r7, #32]
 800a0a8:	fb03 f202 	mul.w	r2, r3, r2
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	220a      	movs	r2, #10
 800a0bc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	3363      	adds	r3, #99	; 0x63
 800a0c4:	2210      	movs	r2, #16
 800a0c6:	2100      	movs	r1, #0
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f002 fda5 	bl	800cc18 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	222a      	movs	r2, #42	; 0x2a
 800a0d2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a0d6:	79fa      	ldrb	r2, [r7, #7]
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a0de:	79ba      	ldrb	r2, [r7, #6]
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a0e6:	797a      	ldrb	r2, [r7, #5]
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a0ee:	1d3b      	adds	r3, r7, #4
 800a0f0:	781a      	ldrb	r2, [r3, #0]
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a0f8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a102:	f107 0320 	add.w	r3, r7, #32
 800a106:	781a      	ldrb	r2, [r3, #0]
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	2201      	movs	r2, #1
 800a112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	2202      	movs	r2, #2
 800a11a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	683a      	ldr	r2, [r7, #0]
 800a122:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a126:	2301      	movs	r3, #1
 800a128:	75fb      	strb	r3, [r7, #23]
      break;
 800a12a:	e007      	b.n	800a13c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a12c:	7afb      	ldrb	r3, [r7, #11]
 800a12e:	4619      	mov	r1, r3
 800a130:	68f8      	ldr	r0, [r7, #12]
 800a132:	f7ff fb83 	bl	800983c <USBH_MSC_BOT_Process>
 800a136:	4603      	mov	r3, r0
 800a138:	75fb      	strb	r3, [r7, #23]
      break;
 800a13a:	bf00      	nop
  }

  return error;
 800a13c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3718      	adds	r7, #24
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}

0800a146 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800a146:	b580      	push	{r7, lr}
 800a148:	b086      	sub	sp, #24
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	60f8      	str	r0, [r7, #12]
 800a14e:	607a      	str	r2, [r7, #4]
 800a150:	603b      	str	r3, [r7, #0]
 800a152:	460b      	mov	r3, r1
 800a154:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a156:	2302      	movs	r3, #2
 800a158:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a160:	69db      	ldr	r3, [r3, #28]
 800a162:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	d002      	beq.n	800a174 <USBH_MSC_SCSI_Read+0x2e>
 800a16e:	2b02      	cmp	r3, #2
 800a170:	d047      	beq.n	800a202 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a172:	e04e      	b.n	800a212 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a17a:	461a      	mov	r2, r3
 800a17c:	6a3b      	ldr	r3, [r7, #32]
 800a17e:	fb03 f202 	mul.w	r2, r3, r2
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	2280      	movs	r2, #128	; 0x80
 800a18a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	220a      	movs	r2, #10
 800a192:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	3363      	adds	r3, #99	; 0x63
 800a19a:	2210      	movs	r2, #16
 800a19c:	2100      	movs	r1, #0
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f002 fd3a 	bl	800cc18 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	2228      	movs	r2, #40	; 0x28
 800a1a8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a1ac:	79fa      	ldrb	r2, [r7, #7]
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a1b4:	79ba      	ldrb	r2, [r7, #6]
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a1bc:	797a      	ldrb	r2, [r7, #5]
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a1c4:	1d3b      	adds	r3, r7, #4
 800a1c6:	781a      	ldrb	r2, [r3, #0]
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a1ce:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a1d8:	f107 0320 	add.w	r3, r7, #32
 800a1dc:	781a      	ldrb	r2, [r3, #0]
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	2202      	movs	r2, #2
 800a1f0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	683a      	ldr	r2, [r7, #0]
 800a1f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	75fb      	strb	r3, [r7, #23]
      break;
 800a200:	e007      	b.n	800a212 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a202:	7afb      	ldrb	r3, [r7, #11]
 800a204:	4619      	mov	r1, r3
 800a206:	68f8      	ldr	r0, [r7, #12]
 800a208:	f7ff fb18 	bl	800983c <USBH_MSC_BOT_Process>
 800a20c:	4603      	mov	r3, r0
 800a20e:	75fb      	strb	r3, [r7, #23]
      break;
 800a210:	bf00      	nop
  }

  return error;
 800a212:	7dfb      	ldrb	r3, [r7, #23]
}
 800a214:	4618      	mov	r0, r3
 800a216:	3718      	adds	r7, #24
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	4613      	mov	r3, r2
 800a228:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d101      	bne.n	800a234 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a230:	2302      	movs	r3, #2
 800a232:	e029      	b.n	800a288 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	79fa      	ldrb	r2, [r7, #7]
 800a238:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2200      	movs	r2, #0
 800a240:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2200      	movs	r2, #0
 800a248:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a24c:	68f8      	ldr	r0, [r7, #12]
 800a24e:	f000 f81f 	bl	800a290 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2200      	movs	r2, #0
 800a256:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2200      	movs	r2, #0
 800a25e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2200      	movs	r2, #0
 800a266:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2200      	movs	r2, #0
 800a26e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d003      	beq.n	800a280 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	68ba      	ldr	r2, [r7, #8]
 800a27c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a280:	68f8      	ldr	r0, [r7, #12]
 800a282:	f002 fa5d 	bl	800c740 <USBH_LL_Init>

  return USBH_OK;
 800a286:	2300      	movs	r3, #0
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3710      	adds	r7, #16
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a290:	b480      	push	{r7}
 800a292:	b085      	sub	sp, #20
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a298:	2300      	movs	r3, #0
 800a29a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a29c:	2300      	movs	r3, #0
 800a29e:	60fb      	str	r3, [r7, #12]
 800a2a0:	e009      	b.n	800a2b6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	33e0      	adds	r3, #224	; 0xe0
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	4413      	add	r3, r2
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	60fb      	str	r3, [r7, #12]
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2b0f      	cmp	r3, #15
 800a2ba:	d9f2      	bls.n	800a2a2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a2bc:	2300      	movs	r3, #0
 800a2be:	60fb      	str	r3, [r7, #12]
 800a2c0:	e009      	b.n	800a2d6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	60fb      	str	r3, [r7, #12]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2dc:	d3f1      	bcc.n	800a2c2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2240      	movs	r2, #64	; 0x40
 800a302:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2200      	movs	r2, #0
 800a308:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2200      	movs	r2, #0
 800a30e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2201      	movs	r2, #1
 800a316:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2200      	movs	r2, #0
 800a31e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3714      	adds	r7, #20
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a342:	2300      	movs	r3, #0
 800a344:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d016      	beq.n	800a37a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a352:	2b00      	cmp	r3, #0
 800a354:	d10e      	bne.n	800a374 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a35c:	1c59      	adds	r1, r3, #1
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	33de      	adds	r3, #222	; 0xde
 800a368:	6839      	ldr	r1, [r7, #0]
 800a36a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a36e:	2300      	movs	r3, #0
 800a370:	73fb      	strb	r3, [r7, #15]
 800a372:	e004      	b.n	800a37e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a374:	2302      	movs	r3, #2
 800a376:	73fb      	strb	r3, [r7, #15]
 800a378:	e001      	b.n	800a37e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a37a:	2302      	movs	r3, #2
 800a37c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a37e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a380:	4618      	mov	r0, r3
 800a382:	3714      	adds	r7, #20
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b085      	sub	sp, #20
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	460b      	mov	r3, r1
 800a396:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a398:	2300      	movs	r3, #0
 800a39a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a3a2:	78fa      	ldrb	r2, [r7, #3]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d204      	bcs.n	800a3b2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	78fa      	ldrb	r2, [r7, #3]
 800a3ac:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a3b0:	e001      	b.n	800a3b6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a3b2:	2302      	movs	r3, #2
 800a3b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a3b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3714      	adds	r7, #20
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b087      	sub	sp, #28
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	4608      	mov	r0, r1
 800a3ce:	4611      	mov	r1, r2
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	70fb      	strb	r3, [r7, #3]
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	70bb      	strb	r3, [r7, #2]
 800a3da:	4613      	mov	r3, r2
 800a3dc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a3ec:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a3ee:	e025      	b.n	800a43c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a3f0:	7dfb      	ldrb	r3, [r7, #23]
 800a3f2:	221a      	movs	r2, #26
 800a3f4:	fb02 f303 	mul.w	r3, r2, r3
 800a3f8:	3308      	adds	r3, #8
 800a3fa:	68fa      	ldr	r2, [r7, #12]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	3302      	adds	r3, #2
 800a400:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	795b      	ldrb	r3, [r3, #5]
 800a406:	78fa      	ldrb	r2, [r7, #3]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d002      	beq.n	800a412 <USBH_FindInterface+0x4e>
 800a40c:	78fb      	ldrb	r3, [r7, #3]
 800a40e:	2bff      	cmp	r3, #255	; 0xff
 800a410:	d111      	bne.n	800a436 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a416:	78ba      	ldrb	r2, [r7, #2]
 800a418:	429a      	cmp	r2, r3
 800a41a:	d002      	beq.n	800a422 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a41c:	78bb      	ldrb	r3, [r7, #2]
 800a41e:	2bff      	cmp	r3, #255	; 0xff
 800a420:	d109      	bne.n	800a436 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a426:	787a      	ldrb	r2, [r7, #1]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d002      	beq.n	800a432 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a42c:	787b      	ldrb	r3, [r7, #1]
 800a42e:	2bff      	cmp	r3, #255	; 0xff
 800a430:	d101      	bne.n	800a436 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a432:	7dfb      	ldrb	r3, [r7, #23]
 800a434:	e006      	b.n	800a444 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a436:	7dfb      	ldrb	r3, [r7, #23]
 800a438:	3301      	adds	r3, #1
 800a43a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a43c:	7dfb      	ldrb	r3, [r7, #23]
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d9d6      	bls.n	800a3f0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a442:	23ff      	movs	r3, #255	; 0xff
}
 800a444:	4618      	mov	r0, r3
 800a446:	371c      	adds	r7, #28
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f002 f9ad 	bl	800c7b8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a45e:	2101      	movs	r1, #1
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f002 fac6 	bl	800c9f2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a466:	2300      	movs	r3, #0
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3708      	adds	r7, #8
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b088      	sub	sp, #32
 800a474:	af04      	add	r7, sp, #16
 800a476:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a478:	2302      	movs	r3, #2
 800a47a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a47c:	2300      	movs	r3, #0
 800a47e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a486:	b2db      	uxtb	r3, r3
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d102      	bne.n	800a492 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2203      	movs	r2, #3
 800a490:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	b2db      	uxtb	r3, r3
 800a498:	2b0b      	cmp	r3, #11
 800a49a:	f200 81be 	bhi.w	800a81a <USBH_Process+0x3aa>
 800a49e:	a201      	add	r2, pc, #4	; (adr r2, 800a4a4 <USBH_Process+0x34>)
 800a4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a4:	0800a4d5 	.word	0x0800a4d5
 800a4a8:	0800a507 	.word	0x0800a507
 800a4ac:	0800a56f 	.word	0x0800a56f
 800a4b0:	0800a7b5 	.word	0x0800a7b5
 800a4b4:	0800a81b 	.word	0x0800a81b
 800a4b8:	0800a613 	.word	0x0800a613
 800a4bc:	0800a75b 	.word	0x0800a75b
 800a4c0:	0800a649 	.word	0x0800a649
 800a4c4:	0800a669 	.word	0x0800a669
 800a4c8:	0800a689 	.word	0x0800a689
 800a4cc:	0800a6cd 	.word	0x0800a6cd
 800a4d0:	0800a79d 	.word	0x0800a79d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a4da:	b2db      	uxtb	r3, r3
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f000 819e 	beq.w	800a81e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a4e8:	20c8      	movs	r0, #200	; 0xc8
 800a4ea:	f002 faf9 	bl	800cae0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f002 f9bf 	bl	800c872 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2200      	movs	r2, #0
 800a500:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a504:	e18b      	b.n	800a81e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	d107      	bne.n	800a520 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2202      	movs	r2, #2
 800a51c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a51e:	e18d      	b.n	800a83c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a526:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a52a:	d914      	bls.n	800a556 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a532:	3301      	adds	r3, #1
 800a534:	b2da      	uxtb	r2, r3
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a542:	2b03      	cmp	r3, #3
 800a544:	d903      	bls.n	800a54e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	220d      	movs	r2, #13
 800a54a:	701a      	strb	r2, [r3, #0]
      break;
 800a54c:	e176      	b.n	800a83c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2200      	movs	r2, #0
 800a552:	701a      	strb	r2, [r3, #0]
      break;
 800a554:	e172      	b.n	800a83c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a55c:	f103 020a 	add.w	r2, r3, #10
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a566:	200a      	movs	r0, #10
 800a568:	f002 faba 	bl	800cae0 <USBH_Delay>
      break;
 800a56c:	e166      	b.n	800a83c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a574:	2b00      	cmp	r3, #0
 800a576:	d005      	beq.n	800a584 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a57e:	2104      	movs	r1, #4
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a584:	2064      	movs	r0, #100	; 0x64
 800a586:	f002 faab 	bl	800cae0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f002 f94a 	bl	800c824 <USBH_LL_GetSpeed>
 800a590:	4603      	mov	r3, r0
 800a592:	461a      	mov	r2, r3
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2205      	movs	r2, #5
 800a59e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a5a0:	2100      	movs	r1, #0
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f001 fa29 	bl	800b9fa <USBH_AllocPipe>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a5b0:	2180      	movs	r1, #128	; 0x80
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f001 fa21 	bl	800b9fa <USBH_AllocPipe>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	7919      	ldrb	r1, [r3, #4]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a5d0:	687a      	ldr	r2, [r7, #4]
 800a5d2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a5d4:	b292      	uxth	r2, r2
 800a5d6:	9202      	str	r2, [sp, #8]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	9201      	str	r2, [sp, #4]
 800a5dc:	9300      	str	r3, [sp, #0]
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2280      	movs	r2, #128	; 0x80
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f001 f9da 	bl	800b99c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	7959      	ldrb	r1, [r3, #5]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a5f8:	687a      	ldr	r2, [r7, #4]
 800a5fa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a5fc:	b292      	uxth	r2, r2
 800a5fe:	9202      	str	r2, [sp, #8]
 800a600:	2200      	movs	r2, #0
 800a602:	9201      	str	r2, [sp, #4]
 800a604:	9300      	str	r3, [sp, #0]
 800a606:	4603      	mov	r3, r0
 800a608:	2200      	movs	r2, #0
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f001 f9c6 	bl	800b99c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a610:	e114      	b.n	800a83c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 f918 	bl	800a848 <USBH_HandleEnum>
 800a618:	4603      	mov	r3, r0
 800a61a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a61c:	7bbb      	ldrb	r3, [r7, #14]
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	2b00      	cmp	r3, #0
 800a622:	f040 80fe 	bne.w	800a822 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2200      	movs	r2, #0
 800a62a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a634:	2b01      	cmp	r3, #1
 800a636:	d103      	bne.n	800a640 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2208      	movs	r2, #8
 800a63c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a63e:	e0f0      	b.n	800a822 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2207      	movs	r2, #7
 800a644:	701a      	strb	r2, [r3, #0]
      break;
 800a646:	e0ec      	b.n	800a822 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a64e:	2b00      	cmp	r3, #0
 800a650:	f000 80e9 	beq.w	800a826 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a65a:	2101      	movs	r1, #1
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2208      	movs	r2, #8
 800a664:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800a666:	e0de      	b.n	800a826 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a66e:	b29b      	uxth	r3, r3
 800a670:	4619      	mov	r1, r3
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f000 fc2c 	bl	800aed0 <USBH_SetCfg>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	f040 80d5 	bne.w	800a82a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2209      	movs	r2, #9
 800a684:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a686:	e0d0      	b.n	800a82a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a68e:	f003 0320 	and.w	r3, r3, #32
 800a692:	2b00      	cmp	r3, #0
 800a694:	d016      	beq.n	800a6c4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a696:	2101      	movs	r1, #1
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 fc3c 	bl	800af16 <USBH_SetFeature>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a6a2:	7bbb      	ldrb	r3, [r7, #14]
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d103      	bne.n	800a6b2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	220a      	movs	r2, #10
 800a6ae:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a6b0:	e0bd      	b.n	800a82e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800a6b2:	7bbb      	ldrb	r3, [r7, #14]
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	2b03      	cmp	r3, #3
 800a6b8:	f040 80b9 	bne.w	800a82e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	220a      	movs	r2, #10
 800a6c0:	701a      	strb	r2, [r3, #0]
      break;
 800a6c2:	e0b4      	b.n	800a82e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	220a      	movs	r2, #10
 800a6c8:	701a      	strb	r2, [r3, #0]
      break;
 800a6ca:	e0b0      	b.n	800a82e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	f000 80ad 	beq.w	800a832 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	73fb      	strb	r3, [r7, #15]
 800a6e4:	e016      	b.n	800a714 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a6e6:	7bfa      	ldrb	r2, [r7, #15]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	32de      	adds	r2, #222	; 0xde
 800a6ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6f0:	791a      	ldrb	r2, [r3, #4]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d108      	bne.n	800a70e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a6fc:	7bfa      	ldrb	r2, [r7, #15]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	32de      	adds	r2, #222	; 0xde
 800a702:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a70c:	e005      	b.n	800a71a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a70e:	7bfb      	ldrb	r3, [r7, #15]
 800a710:	3301      	adds	r3, #1
 800a712:	73fb      	strb	r3, [r7, #15]
 800a714:	7bfb      	ldrb	r3, [r7, #15]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d0e5      	beq.n	800a6e6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a720:	2b00      	cmp	r3, #0
 800a722:	d016      	beq.n	800a752 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a72a:	689b      	ldr	r3, [r3, #8]
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	4798      	blx	r3
 800a730:	4603      	mov	r3, r0
 800a732:	2b00      	cmp	r3, #0
 800a734:	d109      	bne.n	800a74a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2206      	movs	r2, #6
 800a73a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a742:	2103      	movs	r1, #3
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a748:	e073      	b.n	800a832 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	220d      	movs	r2, #13
 800a74e:	701a      	strb	r2, [r3, #0]
      break;
 800a750:	e06f      	b.n	800a832 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	220d      	movs	r2, #13
 800a756:	701a      	strb	r2, [r3, #0]
      break;
 800a758:	e06b      	b.n	800a832 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a760:	2b00      	cmp	r3, #0
 800a762:	d017      	beq.n	800a794 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a76a:	691b      	ldr	r3, [r3, #16]
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	4798      	blx	r3
 800a770:	4603      	mov	r3, r0
 800a772:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a774:	7bbb      	ldrb	r3, [r7, #14]
 800a776:	b2db      	uxtb	r3, r3
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d103      	bne.n	800a784 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	220b      	movs	r2, #11
 800a780:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a782:	e058      	b.n	800a836 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800a784:	7bbb      	ldrb	r3, [r7, #14]
 800a786:	b2db      	uxtb	r3, r3
 800a788:	2b02      	cmp	r3, #2
 800a78a:	d154      	bne.n	800a836 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	220d      	movs	r2, #13
 800a790:	701a      	strb	r2, [r3, #0]
      break;
 800a792:	e050      	b.n	800a836 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	220d      	movs	r2, #13
 800a798:	701a      	strb	r2, [r3, #0]
      break;
 800a79a:	e04c      	b.n	800a836 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d049      	beq.n	800a83a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7ac:	695b      	ldr	r3, [r3, #20]
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	4798      	blx	r3
      }
      break;
 800a7b2:	e042      	b.n	800a83a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f7ff fd67 	bl	800a290 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d009      	beq.n	800a7e0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d005      	beq.n	800a7f6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a7f0:	2105      	movs	r1, #5
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d107      	bne.n	800a812 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2200      	movs	r2, #0
 800a806:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f7ff fe20 	bl	800a450 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a810:	e014      	b.n	800a83c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f001 ffd0 	bl	800c7b8 <USBH_LL_Start>
      break;
 800a818:	e010      	b.n	800a83c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800a81a:	bf00      	nop
 800a81c:	e00e      	b.n	800a83c <USBH_Process+0x3cc>
      break;
 800a81e:	bf00      	nop
 800a820:	e00c      	b.n	800a83c <USBH_Process+0x3cc>
      break;
 800a822:	bf00      	nop
 800a824:	e00a      	b.n	800a83c <USBH_Process+0x3cc>
    break;
 800a826:	bf00      	nop
 800a828:	e008      	b.n	800a83c <USBH_Process+0x3cc>
      break;
 800a82a:	bf00      	nop
 800a82c:	e006      	b.n	800a83c <USBH_Process+0x3cc>
      break;
 800a82e:	bf00      	nop
 800a830:	e004      	b.n	800a83c <USBH_Process+0x3cc>
      break;
 800a832:	bf00      	nop
 800a834:	e002      	b.n	800a83c <USBH_Process+0x3cc>
      break;
 800a836:	bf00      	nop
 800a838:	e000      	b.n	800a83c <USBH_Process+0x3cc>
      break;
 800a83a:	bf00      	nop
  }
  return USBH_OK;
 800a83c:	2300      	movs	r3, #0
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3710      	adds	r7, #16
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop

0800a848 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b088      	sub	sp, #32
 800a84c:	af04      	add	r7, sp, #16
 800a84e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a850:	2301      	movs	r3, #1
 800a852:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a854:	2301      	movs	r3, #1
 800a856:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	785b      	ldrb	r3, [r3, #1]
 800a85c:	2b07      	cmp	r3, #7
 800a85e:	f200 81c1 	bhi.w	800abe4 <USBH_HandleEnum+0x39c>
 800a862:	a201      	add	r2, pc, #4	; (adr r2, 800a868 <USBH_HandleEnum+0x20>)
 800a864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a868:	0800a889 	.word	0x0800a889
 800a86c:	0800a947 	.word	0x0800a947
 800a870:	0800a9b1 	.word	0x0800a9b1
 800a874:	0800aa3f 	.word	0x0800aa3f
 800a878:	0800aaa9 	.word	0x0800aaa9
 800a87c:	0800ab19 	.word	0x0800ab19
 800a880:	0800ab5f 	.word	0x0800ab5f
 800a884:	0800aba5 	.word	0x0800aba5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a888:	2108      	movs	r1, #8
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 fa50 	bl	800ad30 <USBH_Get_DevDesc>
 800a890:	4603      	mov	r3, r0
 800a892:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a894:	7bbb      	ldrb	r3, [r7, #14]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d130      	bne.n	800a8fc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	7919      	ldrb	r1, [r3, #4]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a8ba:	687a      	ldr	r2, [r7, #4]
 800a8bc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a8be:	b292      	uxth	r2, r2
 800a8c0:	9202      	str	r2, [sp, #8]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	9201      	str	r2, [sp, #4]
 800a8c6:	9300      	str	r3, [sp, #0]
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	2280      	movs	r2, #128	; 0x80
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f001 f865 	bl	800b99c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	7959      	ldrb	r1, [r3, #5]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a8e6:	b292      	uxth	r2, r2
 800a8e8:	9202      	str	r2, [sp, #8]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	9201      	str	r2, [sp, #4]
 800a8ee:	9300      	str	r3, [sp, #0]
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f001 f851 	bl	800b99c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a8fa:	e175      	b.n	800abe8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a8fc:	7bbb      	ldrb	r3, [r7, #14]
 800a8fe:	2b03      	cmp	r3, #3
 800a900:	f040 8172 	bne.w	800abe8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a90a:	3301      	adds	r3, #1
 800a90c:	b2da      	uxtb	r2, r3
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a91a:	2b03      	cmp	r3, #3
 800a91c:	d903      	bls.n	800a926 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	220d      	movs	r2, #13
 800a922:	701a      	strb	r2, [r3, #0]
      break;
 800a924:	e160      	b.n	800abe8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	795b      	ldrb	r3, [r3, #5]
 800a92a:	4619      	mov	r1, r3
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f001 f885 	bl	800ba3c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	791b      	ldrb	r3, [r3, #4]
 800a936:	4619      	mov	r1, r3
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f001 f87f 	bl	800ba3c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2200      	movs	r2, #0
 800a942:	701a      	strb	r2, [r3, #0]
      break;
 800a944:	e150      	b.n	800abe8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a946:	2112      	movs	r1, #18
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f000 f9f1 	bl	800ad30 <USBH_Get_DevDesc>
 800a94e:	4603      	mov	r3, r0
 800a950:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a952:	7bbb      	ldrb	r3, [r7, #14]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d103      	bne.n	800a960 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2202      	movs	r2, #2
 800a95c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a95e:	e145      	b.n	800abec <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a960:	7bbb      	ldrb	r3, [r7, #14]
 800a962:	2b03      	cmp	r3, #3
 800a964:	f040 8142 	bne.w	800abec <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a96e:	3301      	adds	r3, #1
 800a970:	b2da      	uxtb	r2, r3
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a97e:	2b03      	cmp	r3, #3
 800a980:	d903      	bls.n	800a98a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	220d      	movs	r2, #13
 800a986:	701a      	strb	r2, [r3, #0]
      break;
 800a988:	e130      	b.n	800abec <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	795b      	ldrb	r3, [r3, #5]
 800a98e:	4619      	mov	r1, r3
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f001 f853 	bl	800ba3c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	791b      	ldrb	r3, [r3, #4]
 800a99a:	4619      	mov	r1, r3
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f001 f84d 	bl	800ba3c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	701a      	strb	r2, [r3, #0]
      break;
 800a9ae:	e11d      	b.n	800abec <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a9b0:	2101      	movs	r1, #1
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 fa68 	bl	800ae88 <USBH_SetAddress>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a9bc:	7bbb      	ldrb	r3, [r7, #14]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d132      	bne.n	800aa28 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a9c2:	2002      	movs	r0, #2
 800a9c4:	f002 f88c 	bl	800cae0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2203      	movs	r2, #3
 800a9d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	7919      	ldrb	r1, [r3, #4]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a9ea:	b292      	uxth	r2, r2
 800a9ec:	9202      	str	r2, [sp, #8]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	9201      	str	r2, [sp, #4]
 800a9f2:	9300      	str	r3, [sp, #0]
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2280      	movs	r2, #128	; 0x80
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 ffcf 	bl	800b99c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	7959      	ldrb	r1, [r3, #5]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aa12:	b292      	uxth	r2, r2
 800aa14:	9202      	str	r2, [sp, #8]
 800aa16:	2200      	movs	r2, #0
 800aa18:	9201      	str	r2, [sp, #4]
 800aa1a:	9300      	str	r3, [sp, #0]
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2200      	movs	r2, #0
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 ffbb 	bl	800b99c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800aa26:	e0e3      	b.n	800abf0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa28:	7bbb      	ldrb	r3, [r7, #14]
 800aa2a:	2b03      	cmp	r3, #3
 800aa2c:	f040 80e0 	bne.w	800abf0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	220d      	movs	r2, #13
 800aa34:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	705a      	strb	r2, [r3, #1]
      break;
 800aa3c:	e0d8      	b.n	800abf0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800aa3e:	2109      	movs	r1, #9
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f000 f99d 	bl	800ad80 <USBH_Get_CfgDesc>
 800aa46:	4603      	mov	r3, r0
 800aa48:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aa4a:	7bbb      	ldrb	r3, [r7, #14]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d103      	bne.n	800aa58 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2204      	movs	r2, #4
 800aa54:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aa56:	e0cd      	b.n	800abf4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa58:	7bbb      	ldrb	r3, [r7, #14]
 800aa5a:	2b03      	cmp	r3, #3
 800aa5c:	f040 80ca 	bne.w	800abf4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aa66:	3301      	adds	r3, #1
 800aa68:	b2da      	uxtb	r2, r3
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aa76:	2b03      	cmp	r3, #3
 800aa78:	d903      	bls.n	800aa82 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	220d      	movs	r2, #13
 800aa7e:	701a      	strb	r2, [r3, #0]
      break;
 800aa80:	e0b8      	b.n	800abf4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	795b      	ldrb	r3, [r3, #5]
 800aa86:	4619      	mov	r1, r3
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f000 ffd7 	bl	800ba3c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	791b      	ldrb	r3, [r3, #4]
 800aa92:	4619      	mov	r1, r3
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 ffd1 	bl	800ba3c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	701a      	strb	r2, [r3, #0]
      break;
 800aaa6:	e0a5      	b.n	800abf4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800aaae:	4619      	mov	r1, r3
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f000 f965 	bl	800ad80 <USBH_Get_CfgDesc>
 800aab6:	4603      	mov	r3, r0
 800aab8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aaba:	7bbb      	ldrb	r3, [r7, #14]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d103      	bne.n	800aac8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2205      	movs	r2, #5
 800aac4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aac6:	e097      	b.n	800abf8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aac8:	7bbb      	ldrb	r3, [r7, #14]
 800aaca:	2b03      	cmp	r3, #3
 800aacc:	f040 8094 	bne.w	800abf8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aad6:	3301      	adds	r3, #1
 800aad8:	b2da      	uxtb	r2, r3
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aae6:	2b03      	cmp	r3, #3
 800aae8:	d903      	bls.n	800aaf2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	220d      	movs	r2, #13
 800aaee:	701a      	strb	r2, [r3, #0]
      break;
 800aaf0:	e082      	b.n	800abf8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	795b      	ldrb	r3, [r3, #5]
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 ff9f 	bl	800ba3c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	791b      	ldrb	r3, [r3, #4]
 800ab02:	4619      	mov	r1, r3
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 ff99 	bl	800ba3c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2200      	movs	r2, #0
 800ab14:	701a      	strb	r2, [r3, #0]
      break;
 800ab16:	e06f      	b.n	800abf8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d019      	beq.n	800ab56 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ab2e:	23ff      	movs	r3, #255	; 0xff
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 f949 	bl	800adc8 <USBH_Get_StringDesc>
 800ab36:	4603      	mov	r3, r0
 800ab38:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ab3a:	7bbb      	ldrb	r3, [r7, #14]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d103      	bne.n	800ab48 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2206      	movs	r2, #6
 800ab44:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ab46:	e059      	b.n	800abfc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab48:	7bbb      	ldrb	r3, [r7, #14]
 800ab4a:	2b03      	cmp	r3, #3
 800ab4c:	d156      	bne.n	800abfc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2206      	movs	r2, #6
 800ab52:	705a      	strb	r2, [r3, #1]
      break;
 800ab54:	e052      	b.n	800abfc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2206      	movs	r2, #6
 800ab5a:	705a      	strb	r2, [r3, #1]
      break;
 800ab5c:	e04e      	b.n	800abfc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d019      	beq.n	800ab9c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ab74:	23ff      	movs	r3, #255	; 0xff
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 f926 	bl	800adc8 <USBH_Get_StringDesc>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ab80:	7bbb      	ldrb	r3, [r7, #14]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d103      	bne.n	800ab8e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2207      	movs	r2, #7
 800ab8a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ab8c:	e038      	b.n	800ac00 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab8e:	7bbb      	ldrb	r3, [r7, #14]
 800ab90:	2b03      	cmp	r3, #3
 800ab92:	d135      	bne.n	800ac00 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2207      	movs	r2, #7
 800ab98:	705a      	strb	r2, [r3, #1]
      break;
 800ab9a:	e031      	b.n	800ac00 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2207      	movs	r2, #7
 800aba0:	705a      	strb	r2, [r3, #1]
      break;
 800aba2:	e02d      	b.n	800ac00 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d017      	beq.n	800abde <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800abba:	23ff      	movs	r3, #255	; 0xff
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f000 f903 	bl	800adc8 <USBH_Get_StringDesc>
 800abc2:	4603      	mov	r3, r0
 800abc4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800abc6:	7bbb      	ldrb	r3, [r7, #14]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d102      	bne.n	800abd2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800abcc:	2300      	movs	r3, #0
 800abce:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800abd0:	e018      	b.n	800ac04 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800abd2:	7bbb      	ldrb	r3, [r7, #14]
 800abd4:	2b03      	cmp	r3, #3
 800abd6:	d115      	bne.n	800ac04 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800abd8:	2300      	movs	r3, #0
 800abda:	73fb      	strb	r3, [r7, #15]
      break;
 800abdc:	e012      	b.n	800ac04 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800abde:	2300      	movs	r3, #0
 800abe0:	73fb      	strb	r3, [r7, #15]
      break;
 800abe2:	e00f      	b.n	800ac04 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800abe4:	bf00      	nop
 800abe6:	e00e      	b.n	800ac06 <USBH_HandleEnum+0x3be>
      break;
 800abe8:	bf00      	nop
 800abea:	e00c      	b.n	800ac06 <USBH_HandleEnum+0x3be>
      break;
 800abec:	bf00      	nop
 800abee:	e00a      	b.n	800ac06 <USBH_HandleEnum+0x3be>
      break;
 800abf0:	bf00      	nop
 800abf2:	e008      	b.n	800ac06 <USBH_HandleEnum+0x3be>
      break;
 800abf4:	bf00      	nop
 800abf6:	e006      	b.n	800ac06 <USBH_HandleEnum+0x3be>
      break;
 800abf8:	bf00      	nop
 800abfa:	e004      	b.n	800ac06 <USBH_HandleEnum+0x3be>
      break;
 800abfc:	bf00      	nop
 800abfe:	e002      	b.n	800ac06 <USBH_HandleEnum+0x3be>
      break;
 800ac00:	bf00      	nop
 800ac02:	e000      	b.n	800ac06 <USBH_HandleEnum+0x3be>
      break;
 800ac04:	bf00      	nop
  }
  return Status;
 800ac06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3710      	adds	r7, #16
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b083      	sub	sp, #12
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	683a      	ldr	r2, [r7, #0]
 800ac1e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800ac22:	bf00      	nop
 800ac24:	370c      	adds	r7, #12
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr

0800ac2e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b082      	sub	sp, #8
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ac3c:	1c5a      	adds	r2, r3, #1
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f000 f804 	bl	800ac52 <USBH_HandleSof>
}
 800ac4a:	bf00      	nop
 800ac4c:	3708      	adds	r7, #8
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b082      	sub	sp, #8
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	b2db      	uxtb	r3, r3
 800ac60:	2b0b      	cmp	r3, #11
 800ac62:	d10a      	bne.n	800ac7a <USBH_HandleSof+0x28>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d005      	beq.n	800ac7a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac74:	699b      	ldr	r3, [r3, #24]
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	4798      	blx	r3
  }
}
 800ac7a:	bf00      	nop
 800ac7c:	3708      	adds	r7, #8
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}

0800ac82 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ac82:	b480      	push	{r7}
 800ac84:	b083      	sub	sp, #12
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800ac92:	bf00      	nop
}
 800ac94:	370c      	adds	r7, #12
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr

0800ac9e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ac9e:	b480      	push	{r7}
 800aca0:	b083      	sub	sp, #12
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2200      	movs	r2, #0
 800acaa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800acae:	bf00      	nop
}
 800acb0:	370c      	adds	r7, #12
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr

0800acba <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800acba:	b480      	push	{r7}
 800acbc:	b083      	sub	sp, #12
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2201      	movs	r2, #1
 800acc6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2200      	movs	r2, #0
 800acce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2200      	movs	r2, #0
 800acd6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800acda:	2300      	movs	r3, #0
}
 800acdc:	4618      	mov	r0, r3
 800acde:	370c      	adds	r7, #12
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2201      	movs	r2, #1
 800acf4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2200      	movs	r2, #0
 800acfc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f001 fd70 	bl	800c7ee <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	791b      	ldrb	r3, [r3, #4]
 800ad12:	4619      	mov	r1, r3
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f000 fe91 	bl	800ba3c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	795b      	ldrb	r3, [r3, #5]
 800ad1e:	4619      	mov	r1, r3
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 fe8b 	bl	800ba3c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800ad26:	2300      	movs	r3, #0
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3708      	adds	r7, #8
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b086      	sub	sp, #24
 800ad34:	af02      	add	r7, sp, #8
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	460b      	mov	r3, r1
 800ad3a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800ad42:	78fb      	ldrb	r3, [r7, #3]
 800ad44:	b29b      	uxth	r3, r3
 800ad46:	9300      	str	r3, [sp, #0]
 800ad48:	4613      	mov	r3, r2
 800ad4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ad4e:	2100      	movs	r1, #0
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f000 f864 	bl	800ae1e <USBH_GetDescriptor>
 800ad56:	4603      	mov	r3, r0
 800ad58:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800ad5a:	7bfb      	ldrb	r3, [r7, #15]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d10a      	bne.n	800ad76 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f203 3026 	addw	r0, r3, #806	; 0x326
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ad6c:	78fa      	ldrb	r2, [r7, #3]
 800ad6e:	b292      	uxth	r2, r2
 800ad70:	4619      	mov	r1, r3
 800ad72:	f000 f918 	bl	800afa6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ad76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3710      	adds	r7, #16
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b086      	sub	sp, #24
 800ad84:	af02      	add	r7, sp, #8
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	460b      	mov	r3, r1
 800ad8a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	331c      	adds	r3, #28
 800ad90:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ad92:	887b      	ldrh	r3, [r7, #2]
 800ad94:	9300      	str	r3, [sp, #0]
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad9c:	2100      	movs	r1, #0
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 f83d 	bl	800ae1e <USBH_GetDescriptor>
 800ada4:	4603      	mov	r3, r0
 800ada6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800ada8:	7bfb      	ldrb	r3, [r7, #15]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d107      	bne.n	800adbe <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800adae:	887b      	ldrh	r3, [r7, #2]
 800adb0:	461a      	mov	r2, r3
 800adb2:	68b9      	ldr	r1, [r7, #8]
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 f987 	bl	800b0c8 <USBH_ParseCfgDesc>
 800adba:	4603      	mov	r3, r0
 800adbc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800adbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3710      	adds	r7, #16
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b088      	sub	sp, #32
 800adcc:	af02      	add	r7, sp, #8
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	607a      	str	r2, [r7, #4]
 800add2:	461a      	mov	r2, r3
 800add4:	460b      	mov	r3, r1
 800add6:	72fb      	strb	r3, [r7, #11]
 800add8:	4613      	mov	r3, r2
 800adda:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800addc:	7afb      	ldrb	r3, [r7, #11]
 800adde:	b29b      	uxth	r3, r3
 800ade0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ade4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800adec:	893b      	ldrh	r3, [r7, #8]
 800adee:	9300      	str	r3, [sp, #0]
 800adf0:	460b      	mov	r3, r1
 800adf2:	2100      	movs	r1, #0
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	f000 f812 	bl	800ae1e <USBH_GetDescriptor>
 800adfa:	4603      	mov	r3, r0
 800adfc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800adfe:	7dfb      	ldrb	r3, [r7, #23]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d107      	bne.n	800ae14 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ae0a:	893a      	ldrh	r2, [r7, #8]
 800ae0c:	6879      	ldr	r1, [r7, #4]
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f000 fb24 	bl	800b45c <USBH_ParseStringDesc>
  }

  return status;
 800ae14:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3718      	adds	r7, #24
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ae1e:	b580      	push	{r7, lr}
 800ae20:	b084      	sub	sp, #16
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	60f8      	str	r0, [r7, #12]
 800ae26:	607b      	str	r3, [r7, #4]
 800ae28:	460b      	mov	r3, r1
 800ae2a:	72fb      	strb	r3, [r7, #11]
 800ae2c:	4613      	mov	r3, r2
 800ae2e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	789b      	ldrb	r3, [r3, #2]
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d11c      	bne.n	800ae72 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ae38:	7afb      	ldrb	r3, [r7, #11]
 800ae3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ae3e:	b2da      	uxtb	r2, r3
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2206      	movs	r2, #6
 800ae48:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	893a      	ldrh	r2, [r7, #8]
 800ae4e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ae50:	893b      	ldrh	r3, [r7, #8]
 800ae52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ae56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae5a:	d104      	bne.n	800ae66 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f240 4209 	movw	r2, #1033	; 0x409
 800ae62:	829a      	strh	r2, [r3, #20]
 800ae64:	e002      	b.n	800ae6c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	8b3a      	ldrh	r2, [r7, #24]
 800ae70:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ae72:	8b3b      	ldrh	r3, [r7, #24]
 800ae74:	461a      	mov	r2, r3
 800ae76:	6879      	ldr	r1, [r7, #4]
 800ae78:	68f8      	ldr	r0, [r7, #12]
 800ae7a:	f000 fb3d 	bl	800b4f8 <USBH_CtlReq>
 800ae7e:	4603      	mov	r3, r0
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3710      	adds	r7, #16
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	460b      	mov	r3, r1
 800ae92:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	789b      	ldrb	r3, [r3, #2]
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d10f      	bne.n	800aebc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2205      	movs	r2, #5
 800aea6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800aea8:	78fb      	ldrb	r3, [r7, #3]
 800aeaa:	b29a      	uxth	r2, r3
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800aebc:	2200      	movs	r2, #0
 800aebe:	2100      	movs	r1, #0
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 fb19 	bl	800b4f8 <USBH_CtlReq>
 800aec6:	4603      	mov	r3, r0
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3708      	adds	r7, #8
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	460b      	mov	r3, r1
 800aeda:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	789b      	ldrb	r3, [r3, #2]
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d10e      	bne.n	800af02 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2200      	movs	r2, #0
 800aee8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2209      	movs	r2, #9
 800aeee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	887a      	ldrh	r2, [r7, #2]
 800aef4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2200      	movs	r2, #0
 800aefa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800af02:	2200      	movs	r2, #0
 800af04:	2100      	movs	r1, #0
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 faf6 	bl	800b4f8 <USBH_CtlReq>
 800af0c:	4603      	mov	r3, r0
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3708      	adds	r7, #8
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}

0800af16 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800af16:	b580      	push	{r7, lr}
 800af18:	b082      	sub	sp, #8
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
 800af1e:	460b      	mov	r3, r1
 800af20:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	789b      	ldrb	r3, [r3, #2]
 800af26:	2b01      	cmp	r3, #1
 800af28:	d10f      	bne.n	800af4a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2200      	movs	r2, #0
 800af2e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2203      	movs	r2, #3
 800af34:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800af36:	78fb      	ldrb	r3, [r7, #3]
 800af38:	b29a      	uxth	r2, r3
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2200      	movs	r2, #0
 800af42:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800af4a:	2200      	movs	r2, #0
 800af4c:	2100      	movs	r1, #0
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 fad2 	bl	800b4f8 <USBH_CtlReq>
 800af54:	4603      	mov	r3, r0
}
 800af56:	4618      	mov	r0, r3
 800af58:	3708      	adds	r7, #8
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}

0800af5e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800af5e:	b580      	push	{r7, lr}
 800af60:	b082      	sub	sp, #8
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
 800af66:	460b      	mov	r3, r1
 800af68:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	789b      	ldrb	r3, [r3, #2]
 800af6e:	2b01      	cmp	r3, #1
 800af70:	d10f      	bne.n	800af92 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2202      	movs	r2, #2
 800af76:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2201      	movs	r2, #1
 800af7c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2200      	movs	r2, #0
 800af82:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800af84:	78fb      	ldrb	r3, [r7, #3]
 800af86:	b29a      	uxth	r2, r3
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2200      	movs	r2, #0
 800af90:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800af92:	2200      	movs	r2, #0
 800af94:	2100      	movs	r1, #0
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f000 faae 	bl	800b4f8 <USBH_CtlReq>
 800af9c:	4603      	mov	r3, r0
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3708      	adds	r7, #8
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}

0800afa6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800afa6:	b480      	push	{r7}
 800afa8:	b085      	sub	sp, #20
 800afaa:	af00      	add	r7, sp, #0
 800afac:	60f8      	str	r0, [r7, #12]
 800afae:	60b9      	str	r1, [r7, #8]
 800afb0:	4613      	mov	r3, r2
 800afb2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	781a      	ldrb	r2, [r3, #0]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	785a      	ldrb	r2, [r3, #1]
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	3302      	adds	r3, #2
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	b29a      	uxth	r2, r3
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	3303      	adds	r3, #3
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	b29b      	uxth	r3, r3
 800afd4:	021b      	lsls	r3, r3, #8
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	4313      	orrs	r3, r2
 800afda:	b29a      	uxth	r2, r3
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	791a      	ldrb	r2, [r3, #4]
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	795a      	ldrb	r2, [r3, #5]
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	799a      	ldrb	r2, [r3, #6]
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	79da      	ldrb	r2, [r3, #7]
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	79db      	ldrb	r3, [r3, #7]
 800b004:	2b20      	cmp	r3, #32
 800b006:	dc11      	bgt.n	800b02c <USBH_ParseDevDesc+0x86>
 800b008:	2b08      	cmp	r3, #8
 800b00a:	db16      	blt.n	800b03a <USBH_ParseDevDesc+0x94>
 800b00c:	3b08      	subs	r3, #8
 800b00e:	2201      	movs	r2, #1
 800b010:	fa02 f303 	lsl.w	r3, r2, r3
 800b014:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800b018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	bf14      	ite	ne
 800b020:	2301      	movne	r3, #1
 800b022:	2300      	moveq	r3, #0
 800b024:	b2db      	uxtb	r3, r3
 800b026:	2b00      	cmp	r3, #0
 800b028:	d102      	bne.n	800b030 <USBH_ParseDevDesc+0x8a>
 800b02a:	e006      	b.n	800b03a <USBH_ParseDevDesc+0x94>
 800b02c:	2b40      	cmp	r3, #64	; 0x40
 800b02e:	d104      	bne.n	800b03a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	79da      	ldrb	r2, [r3, #7]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	71da      	strb	r2, [r3, #7]
      break;
 800b038:	e003      	b.n	800b042 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	2240      	movs	r2, #64	; 0x40
 800b03e:	71da      	strb	r2, [r3, #7]
      break;
 800b040:	bf00      	nop
  }

  if (length > 8U)
 800b042:	88fb      	ldrh	r3, [r7, #6]
 800b044:	2b08      	cmp	r3, #8
 800b046:	d939      	bls.n	800b0bc <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	3308      	adds	r3, #8
 800b04c:	781b      	ldrb	r3, [r3, #0]
 800b04e:	b29a      	uxth	r2, r3
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	3309      	adds	r3, #9
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	b29b      	uxth	r3, r3
 800b058:	021b      	lsls	r3, r3, #8
 800b05a:	b29b      	uxth	r3, r3
 800b05c:	4313      	orrs	r3, r2
 800b05e:	b29a      	uxth	r2, r3
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	330a      	adds	r3, #10
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	b29a      	uxth	r2, r3
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	330b      	adds	r3, #11
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	b29b      	uxth	r3, r3
 800b074:	021b      	lsls	r3, r3, #8
 800b076:	b29b      	uxth	r3, r3
 800b078:	4313      	orrs	r3, r2
 800b07a:	b29a      	uxth	r2, r3
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	330c      	adds	r3, #12
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	b29a      	uxth	r2, r3
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	330d      	adds	r3, #13
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	b29b      	uxth	r3, r3
 800b090:	021b      	lsls	r3, r3, #8
 800b092:	b29b      	uxth	r3, r3
 800b094:	4313      	orrs	r3, r2
 800b096:	b29a      	uxth	r2, r3
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	7b9a      	ldrb	r2, [r3, #14]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	7bda      	ldrb	r2, [r3, #15]
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	7c1a      	ldrb	r2, [r3, #16]
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	7c5a      	ldrb	r2, [r3, #17]
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	745a      	strb	r2, [r3, #17]
  }
}
 800b0bc:	bf00      	nop
 800b0be:	3714      	adds	r7, #20
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr

0800b0c8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b08c      	sub	sp, #48	; 0x30
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	60f8      	str	r0, [r7, #12]
 800b0d0:	60b9      	str	r1, [r7, #8]
 800b0d2:	4613      	mov	r3, r2
 800b0d4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b0dc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	781a      	ldrb	r2, [r3, #0]
 800b0fc:	6a3b      	ldr	r3, [r7, #32]
 800b0fe:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	785a      	ldrb	r2, [r3, #1]
 800b104:	6a3b      	ldr	r3, [r7, #32]
 800b106:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	3302      	adds	r3, #2
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	b29a      	uxth	r2, r3
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	3303      	adds	r3, #3
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	b29b      	uxth	r3, r3
 800b118:	021b      	lsls	r3, r3, #8
 800b11a:	b29b      	uxth	r3, r3
 800b11c:	4313      	orrs	r3, r2
 800b11e:	b29b      	uxth	r3, r3
 800b120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b124:	bf28      	it	cs
 800b126:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800b12a:	b29a      	uxth	r2, r3
 800b12c:	6a3b      	ldr	r3, [r7, #32]
 800b12e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	791a      	ldrb	r2, [r3, #4]
 800b134:	6a3b      	ldr	r3, [r7, #32]
 800b136:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	795a      	ldrb	r2, [r3, #5]
 800b13c:	6a3b      	ldr	r3, [r7, #32]
 800b13e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	799a      	ldrb	r2, [r3, #6]
 800b144:	6a3b      	ldr	r3, [r7, #32]
 800b146:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	79da      	ldrb	r2, [r3, #7]
 800b14c:	6a3b      	ldr	r3, [r7, #32]
 800b14e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	7a1a      	ldrb	r2, [r3, #8]
 800b154:	6a3b      	ldr	r3, [r7, #32]
 800b156:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800b158:	6a3b      	ldr	r3, [r7, #32]
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	2b09      	cmp	r3, #9
 800b15e:	d002      	beq.n	800b166 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b160:	6a3b      	ldr	r3, [r7, #32]
 800b162:	2209      	movs	r2, #9
 800b164:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b166:	88fb      	ldrh	r3, [r7, #6]
 800b168:	2b09      	cmp	r3, #9
 800b16a:	f240 809d 	bls.w	800b2a8 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800b16e:	2309      	movs	r3, #9
 800b170:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b172:	2300      	movs	r3, #0
 800b174:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b176:	e081      	b.n	800b27c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b178:	f107 0316 	add.w	r3, r7, #22
 800b17c:	4619      	mov	r1, r3
 800b17e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b180:	f000 f99f 	bl	800b4c2 <USBH_GetNextDesc>
 800b184:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b188:	785b      	ldrb	r3, [r3, #1]
 800b18a:	2b04      	cmp	r3, #4
 800b18c:	d176      	bne.n	800b27c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	2b09      	cmp	r3, #9
 800b194:	d002      	beq.n	800b19c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b198:	2209      	movs	r2, #9
 800b19a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b19c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1a0:	221a      	movs	r2, #26
 800b1a2:	fb02 f303 	mul.w	r3, r2, r3
 800b1a6:	3308      	adds	r3, #8
 800b1a8:	6a3a      	ldr	r2, [r7, #32]
 800b1aa:	4413      	add	r3, r2
 800b1ac:	3302      	adds	r3, #2
 800b1ae:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b1b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b1b2:	69f8      	ldr	r0, [r7, #28]
 800b1b4:	f000 f87e 	bl	800b2b4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b1c2:	e043      	b.n	800b24c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b1c4:	f107 0316 	add.w	r3, r7, #22
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1cc:	f000 f979 	bl	800b4c2 <USBH_GetNextDesc>
 800b1d0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d4:	785b      	ldrb	r3, [r3, #1]
 800b1d6:	2b05      	cmp	r3, #5
 800b1d8:	d138      	bne.n	800b24c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800b1da:	69fb      	ldr	r3, [r7, #28]
 800b1dc:	795b      	ldrb	r3, [r3, #5]
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d10f      	bne.n	800b202 <USBH_ParseCfgDesc+0x13a>
 800b1e2:	69fb      	ldr	r3, [r7, #28]
 800b1e4:	799b      	ldrb	r3, [r3, #6]
 800b1e6:	2b02      	cmp	r3, #2
 800b1e8:	d10b      	bne.n	800b202 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b1ea:	69fb      	ldr	r3, [r7, #28]
 800b1ec:	79db      	ldrb	r3, [r3, #7]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d10f      	bne.n	800b212 <USBH_ParseCfgDesc+0x14a>
 800b1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	2b09      	cmp	r3, #9
 800b1f8:	d00b      	beq.n	800b212 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800b1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1fc:	2209      	movs	r2, #9
 800b1fe:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b200:	e007      	b.n	800b212 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800b202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	2b07      	cmp	r3, #7
 800b208:	d004      	beq.n	800b214 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20c:	2207      	movs	r2, #7
 800b20e:	701a      	strb	r2, [r3, #0]
 800b210:	e000      	b.n	800b214 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b212:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b214:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b218:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b21c:	3201      	adds	r2, #1
 800b21e:	00d2      	lsls	r2, r2, #3
 800b220:	211a      	movs	r1, #26
 800b222:	fb01 f303 	mul.w	r3, r1, r3
 800b226:	4413      	add	r3, r2
 800b228:	3308      	adds	r3, #8
 800b22a:	6a3a      	ldr	r2, [r7, #32]
 800b22c:	4413      	add	r3, r2
 800b22e:	3304      	adds	r3, #4
 800b230:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b232:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b234:	69b9      	ldr	r1, [r7, #24]
 800b236:	68f8      	ldr	r0, [r7, #12]
 800b238:	f000 f86b 	bl	800b312 <USBH_ParseEPDesc>
 800b23c:	4603      	mov	r3, r0
 800b23e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800b242:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b246:	3301      	adds	r3, #1
 800b248:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	791b      	ldrb	r3, [r3, #4]
 800b250:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b254:	429a      	cmp	r2, r3
 800b256:	d204      	bcs.n	800b262 <USBH_ParseCfgDesc+0x19a>
 800b258:	6a3b      	ldr	r3, [r7, #32]
 800b25a:	885a      	ldrh	r2, [r3, #2]
 800b25c:	8afb      	ldrh	r3, [r7, #22]
 800b25e:	429a      	cmp	r2, r3
 800b260:	d8b0      	bhi.n	800b1c4 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b262:	69fb      	ldr	r3, [r7, #28]
 800b264:	791b      	ldrb	r3, [r3, #4]
 800b266:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d201      	bcs.n	800b272 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800b26e:	2303      	movs	r3, #3
 800b270:	e01c      	b.n	800b2ac <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800b272:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b276:	3301      	adds	r3, #1
 800b278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b27c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b280:	2b01      	cmp	r3, #1
 800b282:	d805      	bhi.n	800b290 <USBH_ParseCfgDesc+0x1c8>
 800b284:	6a3b      	ldr	r3, [r7, #32]
 800b286:	885a      	ldrh	r2, [r3, #2]
 800b288:	8afb      	ldrh	r3, [r7, #22]
 800b28a:	429a      	cmp	r2, r3
 800b28c:	f63f af74 	bhi.w	800b178 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b290:	6a3b      	ldr	r3, [r7, #32]
 800b292:	791b      	ldrb	r3, [r3, #4]
 800b294:	2b02      	cmp	r3, #2
 800b296:	bf28      	it	cs
 800b298:	2302      	movcs	r3, #2
 800b29a:	b2db      	uxtb	r3, r3
 800b29c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d201      	bcs.n	800b2a8 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800b2a4:	2303      	movs	r3, #3
 800b2a6:	e001      	b.n	800b2ac <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800b2a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3730      	adds	r7, #48	; 0x30
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	781a      	ldrb	r2, [r3, #0]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	785a      	ldrb	r2, [r3, #1]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	789a      	ldrb	r2, [r3, #2]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	78da      	ldrb	r2, [r3, #3]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	791a      	ldrb	r2, [r3, #4]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	795a      	ldrb	r2, [r3, #5]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	799a      	ldrb	r2, [r3, #6]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	79da      	ldrb	r2, [r3, #7]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	7a1a      	ldrb	r2, [r3, #8]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	721a      	strb	r2, [r3, #8]
}
 800b306:	bf00      	nop
 800b308:	370c      	adds	r7, #12
 800b30a:	46bd      	mov	sp, r7
 800b30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b310:	4770      	bx	lr

0800b312 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800b312:	b480      	push	{r7}
 800b314:	b087      	sub	sp, #28
 800b316:	af00      	add	r7, sp, #0
 800b318:	60f8      	str	r0, [r7, #12]
 800b31a:	60b9      	str	r1, [r7, #8]
 800b31c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b31e:	2300      	movs	r3, #0
 800b320:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	781a      	ldrb	r2, [r3, #0]
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	785a      	ldrb	r2, [r3, #1]
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	789a      	ldrb	r2, [r3, #2]
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	78da      	ldrb	r2, [r3, #3]
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	3304      	adds	r3, #4
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	b29a      	uxth	r2, r3
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	3305      	adds	r3, #5
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	b29b      	uxth	r3, r3
 800b352:	021b      	lsls	r3, r3, #8
 800b354:	b29b      	uxth	r3, r3
 800b356:	4313      	orrs	r3, r2
 800b358:	b29a      	uxth	r2, r3
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	799a      	ldrb	r2, [r3, #6]
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	889b      	ldrh	r3, [r3, #4]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d102      	bne.n	800b374 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800b36e:	2303      	movs	r3, #3
 800b370:	75fb      	strb	r3, [r7, #23]
 800b372:	e033      	b.n	800b3dc <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	889b      	ldrh	r3, [r3, #4]
 800b378:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b37c:	f023 0307 	bic.w	r3, r3, #7
 800b380:	b29a      	uxth	r2, r3
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	889b      	ldrh	r3, [r3, #4]
 800b38a:	b21a      	sxth	r2, r3
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	3304      	adds	r3, #4
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	b299      	uxth	r1, r3
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	3305      	adds	r3, #5
 800b398:	781b      	ldrb	r3, [r3, #0]
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	021b      	lsls	r3, r3, #8
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	430b      	orrs	r3, r1
 800b3a2:	b29b      	uxth	r3, r3
 800b3a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d110      	bne.n	800b3ce <USBH_ParseEPDesc+0xbc>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	3304      	adds	r3, #4
 800b3b0:	781b      	ldrb	r3, [r3, #0]
 800b3b2:	b299      	uxth	r1, r3
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	3305      	adds	r3, #5
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	b29b      	uxth	r3, r3
 800b3bc:	021b      	lsls	r3, r3, #8
 800b3be:	b29b      	uxth	r3, r3
 800b3c0:	430b      	orrs	r3, r1
 800b3c2:	b29b      	uxth	r3, r3
 800b3c4:	b21b      	sxth	r3, r3
 800b3c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b3ca:	b21b      	sxth	r3, r3
 800b3cc:	e001      	b.n	800b3d2 <USBH_ParseEPDesc+0xc0>
 800b3ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	b21b      	sxth	r3, r3
 800b3d6:	b29a      	uxth	r2, r3
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d116      	bne.n	800b414 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	78db      	ldrb	r3, [r3, #3]
 800b3ea:	f003 0303 	and.w	r3, r3, #3
 800b3ee:	2b01      	cmp	r3, #1
 800b3f0:	d005      	beq.n	800b3fe <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	78db      	ldrb	r3, [r3, #3]
 800b3f6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b3fa:	2b03      	cmp	r3, #3
 800b3fc:	d127      	bne.n	800b44e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	799b      	ldrb	r3, [r3, #6]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d003      	beq.n	800b40e <USBH_ParseEPDesc+0xfc>
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	799b      	ldrb	r3, [r3, #6]
 800b40a:	2b10      	cmp	r3, #16
 800b40c:	d91f      	bls.n	800b44e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b40e:	2303      	movs	r3, #3
 800b410:	75fb      	strb	r3, [r7, #23]
 800b412:	e01c      	b.n	800b44e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	78db      	ldrb	r3, [r3, #3]
 800b418:	f003 0303 	and.w	r3, r3, #3
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	d10a      	bne.n	800b436 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	799b      	ldrb	r3, [r3, #6]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d003      	beq.n	800b430 <USBH_ParseEPDesc+0x11e>
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	799b      	ldrb	r3, [r3, #6]
 800b42c:	2b10      	cmp	r3, #16
 800b42e:	d90e      	bls.n	800b44e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b430:	2303      	movs	r3, #3
 800b432:	75fb      	strb	r3, [r7, #23]
 800b434:	e00b      	b.n	800b44e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	78db      	ldrb	r3, [r3, #3]
 800b43a:	f003 0303 	and.w	r3, r3, #3
 800b43e:	2b03      	cmp	r3, #3
 800b440:	d105      	bne.n	800b44e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	799b      	ldrb	r3, [r3, #6]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d101      	bne.n	800b44e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b44a:	2303      	movs	r3, #3
 800b44c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800b44e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b450:	4618      	mov	r0, r3
 800b452:	371c      	adds	r7, #28
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr

0800b45c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b087      	sub	sp, #28
 800b460:	af00      	add	r7, sp, #0
 800b462:	60f8      	str	r0, [r7, #12]
 800b464:	60b9      	str	r1, [r7, #8]
 800b466:	4613      	mov	r3, r2
 800b468:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	3301      	adds	r3, #1
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	2b03      	cmp	r3, #3
 800b472:	d120      	bne.n	800b4b6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	1e9a      	subs	r2, r3, #2
 800b47a:	88fb      	ldrh	r3, [r7, #6]
 800b47c:	4293      	cmp	r3, r2
 800b47e:	bf28      	it	cs
 800b480:	4613      	movcs	r3, r2
 800b482:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	3302      	adds	r3, #2
 800b488:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b48a:	2300      	movs	r3, #0
 800b48c:	82fb      	strh	r3, [r7, #22]
 800b48e:	e00b      	b.n	800b4a8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b490:	8afb      	ldrh	r3, [r7, #22]
 800b492:	68fa      	ldr	r2, [r7, #12]
 800b494:	4413      	add	r3, r2
 800b496:	781a      	ldrb	r2, [r3, #0]
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	3301      	adds	r3, #1
 800b4a0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b4a2:	8afb      	ldrh	r3, [r7, #22]
 800b4a4:	3302      	adds	r3, #2
 800b4a6:	82fb      	strh	r3, [r7, #22]
 800b4a8:	8afa      	ldrh	r2, [r7, #22]
 800b4aa:	8abb      	ldrh	r3, [r7, #20]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d3ef      	bcc.n	800b490 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	701a      	strb	r2, [r3, #0]
  }
}
 800b4b6:	bf00      	nop
 800b4b8:	371c      	adds	r7, #28
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr

0800b4c2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b4c2:	b480      	push	{r7}
 800b4c4:	b085      	sub	sp, #20
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	6078      	str	r0, [r7, #4]
 800b4ca:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	881a      	ldrh	r2, [r3, #0]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	781b      	ldrb	r3, [r3, #0]
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	4413      	add	r3, r2
 800b4d8:	b29a      	uxth	r2, r3
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	4413      	add	r3, r2
 800b4e8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b4ea:	68fb      	ldr	r3, [r7, #12]
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3714      	adds	r7, #20
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr

0800b4f8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b086      	sub	sp, #24
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	60b9      	str	r1, [r7, #8]
 800b502:	4613      	mov	r3, r2
 800b504:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b506:	2301      	movs	r3, #1
 800b508:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	789b      	ldrb	r3, [r3, #2]
 800b50e:	2b01      	cmp	r3, #1
 800b510:	d002      	beq.n	800b518 <USBH_CtlReq+0x20>
 800b512:	2b02      	cmp	r3, #2
 800b514:	d00f      	beq.n	800b536 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b516:	e027      	b.n	800b568 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	68ba      	ldr	r2, [r7, #8]
 800b51c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	88fa      	ldrh	r2, [r7, #6]
 800b522:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2201      	movs	r2, #1
 800b528:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	2202      	movs	r2, #2
 800b52e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b530:	2301      	movs	r3, #1
 800b532:	75fb      	strb	r3, [r7, #23]
      break;
 800b534:	e018      	b.n	800b568 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b536:	68f8      	ldr	r0, [r7, #12]
 800b538:	f000 f81c 	bl	800b574 <USBH_HandleControl>
 800b53c:	4603      	mov	r3, r0
 800b53e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b540:	7dfb      	ldrb	r3, [r7, #23]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d002      	beq.n	800b54c <USBH_CtlReq+0x54>
 800b546:	7dfb      	ldrb	r3, [r7, #23]
 800b548:	2b03      	cmp	r3, #3
 800b54a:	d106      	bne.n	800b55a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2201      	movs	r2, #1
 800b550:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2200      	movs	r2, #0
 800b556:	761a      	strb	r2, [r3, #24]
      break;
 800b558:	e005      	b.n	800b566 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b55a:	7dfb      	ldrb	r3, [r7, #23]
 800b55c:	2b02      	cmp	r3, #2
 800b55e:	d102      	bne.n	800b566 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2201      	movs	r2, #1
 800b564:	709a      	strb	r2, [r3, #2]
      break;
 800b566:	bf00      	nop
  }
  return status;
 800b568:	7dfb      	ldrb	r3, [r7, #23]
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3718      	adds	r7, #24
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
	...

0800b574 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b086      	sub	sp, #24
 800b578:	af02      	add	r7, sp, #8
 800b57a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b57c:	2301      	movs	r3, #1
 800b57e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b580:	2300      	movs	r3, #0
 800b582:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	7e1b      	ldrb	r3, [r3, #24]
 800b588:	3b01      	subs	r3, #1
 800b58a:	2b0a      	cmp	r3, #10
 800b58c:	f200 8156 	bhi.w	800b83c <USBH_HandleControl+0x2c8>
 800b590:	a201      	add	r2, pc, #4	; (adr r2, 800b598 <USBH_HandleControl+0x24>)
 800b592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b596:	bf00      	nop
 800b598:	0800b5c5 	.word	0x0800b5c5
 800b59c:	0800b5df 	.word	0x0800b5df
 800b5a0:	0800b649 	.word	0x0800b649
 800b5a4:	0800b66f 	.word	0x0800b66f
 800b5a8:	0800b6a7 	.word	0x0800b6a7
 800b5ac:	0800b6d1 	.word	0x0800b6d1
 800b5b0:	0800b723 	.word	0x0800b723
 800b5b4:	0800b745 	.word	0x0800b745
 800b5b8:	0800b781 	.word	0x0800b781
 800b5bc:	0800b7a7 	.word	0x0800b7a7
 800b5c0:	0800b7e5 	.word	0x0800b7e5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f103 0110 	add.w	r1, r3, #16
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	795b      	ldrb	r3, [r3, #5]
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 f943 	bl	800b85c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2202      	movs	r2, #2
 800b5da:	761a      	strb	r2, [r3, #24]
      break;
 800b5dc:	e139      	b.n	800b852 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	795b      	ldrb	r3, [r3, #5]
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f001 f9f1 	bl	800c9cc <USBH_LL_GetURBState>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b5ee:	7bbb      	ldrb	r3, [r7, #14]
 800b5f0:	2b01      	cmp	r3, #1
 800b5f2:	d11e      	bne.n	800b632 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	7c1b      	ldrb	r3, [r3, #16]
 800b5f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b5fc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	8adb      	ldrh	r3, [r3, #22]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d00a      	beq.n	800b61c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b606:	7b7b      	ldrb	r3, [r7, #13]
 800b608:	2b80      	cmp	r3, #128	; 0x80
 800b60a:	d103      	bne.n	800b614 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2203      	movs	r2, #3
 800b610:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b612:	e115      	b.n	800b840 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2205      	movs	r2, #5
 800b618:	761a      	strb	r2, [r3, #24]
      break;
 800b61a:	e111      	b.n	800b840 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b61c:	7b7b      	ldrb	r3, [r7, #13]
 800b61e:	2b80      	cmp	r3, #128	; 0x80
 800b620:	d103      	bne.n	800b62a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2209      	movs	r2, #9
 800b626:	761a      	strb	r2, [r3, #24]
      break;
 800b628:	e10a      	b.n	800b840 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2207      	movs	r2, #7
 800b62e:	761a      	strb	r2, [r3, #24]
      break;
 800b630:	e106      	b.n	800b840 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b632:	7bbb      	ldrb	r3, [r7, #14]
 800b634:	2b04      	cmp	r3, #4
 800b636:	d003      	beq.n	800b640 <USBH_HandleControl+0xcc>
 800b638:	7bbb      	ldrb	r3, [r7, #14]
 800b63a:	2b02      	cmp	r3, #2
 800b63c:	f040 8100 	bne.w	800b840 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	220b      	movs	r2, #11
 800b644:	761a      	strb	r2, [r3, #24]
      break;
 800b646:	e0fb      	b.n	800b840 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b64e:	b29a      	uxth	r2, r3
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6899      	ldr	r1, [r3, #8]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	899a      	ldrh	r2, [r3, #12]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	791b      	ldrb	r3, [r3, #4]
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f000 f93a 	bl	800b8da <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2204      	movs	r2, #4
 800b66a:	761a      	strb	r2, [r3, #24]
      break;
 800b66c:	e0f1      	b.n	800b852 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	791b      	ldrb	r3, [r3, #4]
 800b672:	4619      	mov	r1, r3
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f001 f9a9 	bl	800c9cc <USBH_LL_GetURBState>
 800b67a:	4603      	mov	r3, r0
 800b67c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b67e:	7bbb      	ldrb	r3, [r7, #14]
 800b680:	2b01      	cmp	r3, #1
 800b682:	d102      	bne.n	800b68a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2209      	movs	r2, #9
 800b688:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b68a:	7bbb      	ldrb	r3, [r7, #14]
 800b68c:	2b05      	cmp	r3, #5
 800b68e:	d102      	bne.n	800b696 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b690:	2303      	movs	r3, #3
 800b692:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b694:	e0d6      	b.n	800b844 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b696:	7bbb      	ldrb	r3, [r7, #14]
 800b698:	2b04      	cmp	r3, #4
 800b69a:	f040 80d3 	bne.w	800b844 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	220b      	movs	r2, #11
 800b6a2:	761a      	strb	r2, [r3, #24]
      break;
 800b6a4:	e0ce      	b.n	800b844 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6899      	ldr	r1, [r3, #8]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	899a      	ldrh	r2, [r3, #12]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	795b      	ldrb	r3, [r3, #5]
 800b6b2:	2001      	movs	r0, #1
 800b6b4:	9000      	str	r0, [sp, #0]
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 f8ea 	bl	800b890 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b6c2:	b29a      	uxth	r2, r3
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2206      	movs	r2, #6
 800b6cc:	761a      	strb	r2, [r3, #24]
      break;
 800b6ce:	e0c0      	b.n	800b852 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	795b      	ldrb	r3, [r3, #5]
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f001 f978 	bl	800c9cc <USBH_LL_GetURBState>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b6e0:	7bbb      	ldrb	r3, [r7, #14]
 800b6e2:	2b01      	cmp	r3, #1
 800b6e4:	d103      	bne.n	800b6ee <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2207      	movs	r2, #7
 800b6ea:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b6ec:	e0ac      	b.n	800b848 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b6ee:	7bbb      	ldrb	r3, [r7, #14]
 800b6f0:	2b05      	cmp	r3, #5
 800b6f2:	d105      	bne.n	800b700 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	220c      	movs	r2, #12
 800b6f8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b6fa:	2303      	movs	r3, #3
 800b6fc:	73fb      	strb	r3, [r7, #15]
      break;
 800b6fe:	e0a3      	b.n	800b848 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b700:	7bbb      	ldrb	r3, [r7, #14]
 800b702:	2b02      	cmp	r3, #2
 800b704:	d103      	bne.n	800b70e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2205      	movs	r2, #5
 800b70a:	761a      	strb	r2, [r3, #24]
      break;
 800b70c:	e09c      	b.n	800b848 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b70e:	7bbb      	ldrb	r3, [r7, #14]
 800b710:	2b04      	cmp	r3, #4
 800b712:	f040 8099 	bne.w	800b848 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	220b      	movs	r2, #11
 800b71a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b71c:	2302      	movs	r3, #2
 800b71e:	73fb      	strb	r3, [r7, #15]
      break;
 800b720:	e092      	b.n	800b848 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	791b      	ldrb	r3, [r3, #4]
 800b726:	2200      	movs	r2, #0
 800b728:	2100      	movs	r1, #0
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 f8d5 	bl	800b8da <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b736:	b29a      	uxth	r2, r3
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2208      	movs	r2, #8
 800b740:	761a      	strb	r2, [r3, #24]

      break;
 800b742:	e086      	b.n	800b852 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	791b      	ldrb	r3, [r3, #4]
 800b748:	4619      	mov	r1, r3
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f001 f93e 	bl	800c9cc <USBH_LL_GetURBState>
 800b750:	4603      	mov	r3, r0
 800b752:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b754:	7bbb      	ldrb	r3, [r7, #14]
 800b756:	2b01      	cmp	r3, #1
 800b758:	d105      	bne.n	800b766 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	220d      	movs	r2, #13
 800b75e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b760:	2300      	movs	r3, #0
 800b762:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b764:	e072      	b.n	800b84c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b766:	7bbb      	ldrb	r3, [r7, #14]
 800b768:	2b04      	cmp	r3, #4
 800b76a:	d103      	bne.n	800b774 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	220b      	movs	r2, #11
 800b770:	761a      	strb	r2, [r3, #24]
      break;
 800b772:	e06b      	b.n	800b84c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b774:	7bbb      	ldrb	r3, [r7, #14]
 800b776:	2b05      	cmp	r3, #5
 800b778:	d168      	bne.n	800b84c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b77a:	2303      	movs	r3, #3
 800b77c:	73fb      	strb	r3, [r7, #15]
      break;
 800b77e:	e065      	b.n	800b84c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	795b      	ldrb	r3, [r3, #5]
 800b784:	2201      	movs	r2, #1
 800b786:	9200      	str	r2, [sp, #0]
 800b788:	2200      	movs	r2, #0
 800b78a:	2100      	movs	r1, #0
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 f87f 	bl	800b890 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b798:	b29a      	uxth	r2, r3
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	220a      	movs	r2, #10
 800b7a2:	761a      	strb	r2, [r3, #24]
      break;
 800b7a4:	e055      	b.n	800b852 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	795b      	ldrb	r3, [r3, #5]
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f001 f90d 	bl	800c9cc <USBH_LL_GetURBState>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b7b6:	7bbb      	ldrb	r3, [r7, #14]
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	d105      	bne.n	800b7c8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	220d      	movs	r2, #13
 800b7c4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b7c6:	e043      	b.n	800b850 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b7c8:	7bbb      	ldrb	r3, [r7, #14]
 800b7ca:	2b02      	cmp	r3, #2
 800b7cc:	d103      	bne.n	800b7d6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2209      	movs	r2, #9
 800b7d2:	761a      	strb	r2, [r3, #24]
      break;
 800b7d4:	e03c      	b.n	800b850 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b7d6:	7bbb      	ldrb	r3, [r7, #14]
 800b7d8:	2b04      	cmp	r3, #4
 800b7da:	d139      	bne.n	800b850 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	220b      	movs	r2, #11
 800b7e0:	761a      	strb	r2, [r3, #24]
      break;
 800b7e2:	e035      	b.n	800b850 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	7e5b      	ldrb	r3, [r3, #25]
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	b2da      	uxtb	r2, r3
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	765a      	strb	r2, [r3, #25]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	7e5b      	ldrb	r3, [r3, #25]
 800b7f4:	2b02      	cmp	r3, #2
 800b7f6:	d806      	bhi.n	800b806 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2201      	movs	r2, #1
 800b802:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b804:	e025      	b.n	800b852 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b80c:	2106      	movs	r1, #6
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2200      	movs	r2, #0
 800b816:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	795b      	ldrb	r3, [r3, #5]
 800b81c:	4619      	mov	r1, r3
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f000 f90c 	bl	800ba3c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	791b      	ldrb	r3, [r3, #4]
 800b828:	4619      	mov	r1, r3
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f000 f906 	bl	800ba3c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2200      	movs	r2, #0
 800b834:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b836:	2302      	movs	r3, #2
 800b838:	73fb      	strb	r3, [r7, #15]
      break;
 800b83a:	e00a      	b.n	800b852 <USBH_HandleControl+0x2de>

    default:
      break;
 800b83c:	bf00      	nop
 800b83e:	e008      	b.n	800b852 <USBH_HandleControl+0x2de>
      break;
 800b840:	bf00      	nop
 800b842:	e006      	b.n	800b852 <USBH_HandleControl+0x2de>
      break;
 800b844:	bf00      	nop
 800b846:	e004      	b.n	800b852 <USBH_HandleControl+0x2de>
      break;
 800b848:	bf00      	nop
 800b84a:	e002      	b.n	800b852 <USBH_HandleControl+0x2de>
      break;
 800b84c:	bf00      	nop
 800b84e:	e000      	b.n	800b852 <USBH_HandleControl+0x2de>
      break;
 800b850:	bf00      	nop
  }

  return status;
 800b852:	7bfb      	ldrb	r3, [r7, #15]
}
 800b854:	4618      	mov	r0, r3
 800b856:	3710      	adds	r7, #16
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b088      	sub	sp, #32
 800b860:	af04      	add	r7, sp, #16
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	60b9      	str	r1, [r7, #8]
 800b866:	4613      	mov	r3, r2
 800b868:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b86a:	79f9      	ldrb	r1, [r7, #7]
 800b86c:	2300      	movs	r3, #0
 800b86e:	9303      	str	r3, [sp, #12]
 800b870:	2308      	movs	r3, #8
 800b872:	9302      	str	r3, [sp, #8]
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	9301      	str	r3, [sp, #4]
 800b878:	2300      	movs	r3, #0
 800b87a:	9300      	str	r3, [sp, #0]
 800b87c:	2300      	movs	r3, #0
 800b87e:	2200      	movs	r2, #0
 800b880:	68f8      	ldr	r0, [r7, #12]
 800b882:	f001 f872 	bl	800c96a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b886:	2300      	movs	r3, #0
}
 800b888:	4618      	mov	r0, r3
 800b88a:	3710      	adds	r7, #16
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}

0800b890 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b088      	sub	sp, #32
 800b894:	af04      	add	r7, sp, #16
 800b896:	60f8      	str	r0, [r7, #12]
 800b898:	60b9      	str	r1, [r7, #8]
 800b89a:	4611      	mov	r1, r2
 800b89c:	461a      	mov	r2, r3
 800b89e:	460b      	mov	r3, r1
 800b8a0:	80fb      	strh	r3, [r7, #6]
 800b8a2:	4613      	mov	r3, r2
 800b8a4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d001      	beq.n	800b8b4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b8b4:	7979      	ldrb	r1, [r7, #5]
 800b8b6:	7e3b      	ldrb	r3, [r7, #24]
 800b8b8:	9303      	str	r3, [sp, #12]
 800b8ba:	88fb      	ldrh	r3, [r7, #6]
 800b8bc:	9302      	str	r3, [sp, #8]
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	9301      	str	r3, [sp, #4]
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	9300      	str	r3, [sp, #0]
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	68f8      	ldr	r0, [r7, #12]
 800b8cc:	f001 f84d 	bl	800c96a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b8d0:	2300      	movs	r3, #0
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3710      	adds	r7, #16
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}

0800b8da <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b8da:	b580      	push	{r7, lr}
 800b8dc:	b088      	sub	sp, #32
 800b8de:	af04      	add	r7, sp, #16
 800b8e0:	60f8      	str	r0, [r7, #12]
 800b8e2:	60b9      	str	r1, [r7, #8]
 800b8e4:	4611      	mov	r1, r2
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	80fb      	strh	r3, [r7, #6]
 800b8ec:	4613      	mov	r3, r2
 800b8ee:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b8f0:	7979      	ldrb	r1, [r7, #5]
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	9303      	str	r3, [sp, #12]
 800b8f6:	88fb      	ldrh	r3, [r7, #6]
 800b8f8:	9302      	str	r3, [sp, #8]
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	9301      	str	r3, [sp, #4]
 800b8fe:	2301      	movs	r3, #1
 800b900:	9300      	str	r3, [sp, #0]
 800b902:	2300      	movs	r3, #0
 800b904:	2201      	movs	r2, #1
 800b906:	68f8      	ldr	r0, [r7, #12]
 800b908:	f001 f82f 	bl	800c96a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b90c:	2300      	movs	r3, #0

}
 800b90e:	4618      	mov	r0, r3
 800b910:	3710      	adds	r7, #16
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}

0800b916 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b916:	b580      	push	{r7, lr}
 800b918:	b088      	sub	sp, #32
 800b91a:	af04      	add	r7, sp, #16
 800b91c:	60f8      	str	r0, [r7, #12]
 800b91e:	60b9      	str	r1, [r7, #8]
 800b920:	4611      	mov	r1, r2
 800b922:	461a      	mov	r2, r3
 800b924:	460b      	mov	r3, r1
 800b926:	80fb      	strh	r3, [r7, #6]
 800b928:	4613      	mov	r3, r2
 800b92a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b932:	2b00      	cmp	r3, #0
 800b934:	d001      	beq.n	800b93a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b936:	2300      	movs	r3, #0
 800b938:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b93a:	7979      	ldrb	r1, [r7, #5]
 800b93c:	7e3b      	ldrb	r3, [r7, #24]
 800b93e:	9303      	str	r3, [sp, #12]
 800b940:	88fb      	ldrh	r3, [r7, #6]
 800b942:	9302      	str	r3, [sp, #8]
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	9301      	str	r3, [sp, #4]
 800b948:	2301      	movs	r3, #1
 800b94a:	9300      	str	r3, [sp, #0]
 800b94c:	2302      	movs	r3, #2
 800b94e:	2200      	movs	r2, #0
 800b950:	68f8      	ldr	r0, [r7, #12]
 800b952:	f001 f80a 	bl	800c96a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b956:	2300      	movs	r3, #0
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3710      	adds	r7, #16
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b088      	sub	sp, #32
 800b964:	af04      	add	r7, sp, #16
 800b966:	60f8      	str	r0, [r7, #12]
 800b968:	60b9      	str	r1, [r7, #8]
 800b96a:	4611      	mov	r1, r2
 800b96c:	461a      	mov	r2, r3
 800b96e:	460b      	mov	r3, r1
 800b970:	80fb      	strh	r3, [r7, #6]
 800b972:	4613      	mov	r3, r2
 800b974:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b976:	7979      	ldrb	r1, [r7, #5]
 800b978:	2300      	movs	r3, #0
 800b97a:	9303      	str	r3, [sp, #12]
 800b97c:	88fb      	ldrh	r3, [r7, #6]
 800b97e:	9302      	str	r3, [sp, #8]
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	9301      	str	r3, [sp, #4]
 800b984:	2301      	movs	r3, #1
 800b986:	9300      	str	r3, [sp, #0]
 800b988:	2302      	movs	r3, #2
 800b98a:	2201      	movs	r2, #1
 800b98c:	68f8      	ldr	r0, [r7, #12]
 800b98e:	f000 ffec 	bl	800c96a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b992:	2300      	movs	r3, #0
}
 800b994:	4618      	mov	r0, r3
 800b996:	3710      	adds	r7, #16
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b086      	sub	sp, #24
 800b9a0:	af04      	add	r7, sp, #16
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	4608      	mov	r0, r1
 800b9a6:	4611      	mov	r1, r2
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	70fb      	strb	r3, [r7, #3]
 800b9ae:	460b      	mov	r3, r1
 800b9b0:	70bb      	strb	r3, [r7, #2]
 800b9b2:	4613      	mov	r3, r2
 800b9b4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b9b6:	7878      	ldrb	r0, [r7, #1]
 800b9b8:	78ba      	ldrb	r2, [r7, #2]
 800b9ba:	78f9      	ldrb	r1, [r7, #3]
 800b9bc:	8b3b      	ldrh	r3, [r7, #24]
 800b9be:	9302      	str	r3, [sp, #8]
 800b9c0:	7d3b      	ldrb	r3, [r7, #20]
 800b9c2:	9301      	str	r3, [sp, #4]
 800b9c4:	7c3b      	ldrb	r3, [r7, #16]
 800b9c6:	9300      	str	r3, [sp, #0]
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f000 ff7f 	bl	800c8ce <USBH_LL_OpenPipe>

  return USBH_OK;
 800b9d0:	2300      	movs	r3, #0
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3708      	adds	r7, #8
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}

0800b9da <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b9da:	b580      	push	{r7, lr}
 800b9dc:	b082      	sub	sp, #8
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b9e6:	78fb      	ldrb	r3, [r7, #3]
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 ff9e 	bl	800c92c <USBH_LL_ClosePipe>

  return USBH_OK;
 800b9f0:	2300      	movs	r3, #0
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3708      	adds	r7, #8
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}

0800b9fa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b9fa:	b580      	push	{r7, lr}
 800b9fc:	b084      	sub	sp, #16
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	6078      	str	r0, [r7, #4]
 800ba02:	460b      	mov	r3, r1
 800ba04:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f000 f836 	bl	800ba78 <USBH_GetFreePipe>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ba10:	89fb      	ldrh	r3, [r7, #14]
 800ba12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d00a      	beq.n	800ba30 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ba1a:	78fa      	ldrb	r2, [r7, #3]
 800ba1c:	89fb      	ldrh	r3, [r7, #14]
 800ba1e:	f003 030f 	and.w	r3, r3, #15
 800ba22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ba26:	6879      	ldr	r1, [r7, #4]
 800ba28:	33e0      	adds	r3, #224	; 0xe0
 800ba2a:	009b      	lsls	r3, r3, #2
 800ba2c:	440b      	add	r3, r1
 800ba2e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ba30:	89fb      	ldrh	r3, [r7, #14]
 800ba32:	b2db      	uxtb	r3, r3
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3710      	adds	r7, #16
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b083      	sub	sp, #12
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	460b      	mov	r3, r1
 800ba46:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ba48:	78fb      	ldrb	r3, [r7, #3]
 800ba4a:	2b0f      	cmp	r3, #15
 800ba4c:	d80d      	bhi.n	800ba6a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ba4e:	78fb      	ldrb	r3, [r7, #3]
 800ba50:	687a      	ldr	r2, [r7, #4]
 800ba52:	33e0      	adds	r3, #224	; 0xe0
 800ba54:	009b      	lsls	r3, r3, #2
 800ba56:	4413      	add	r3, r2
 800ba58:	685a      	ldr	r2, [r3, #4]
 800ba5a:	78fb      	ldrb	r3, [r7, #3]
 800ba5c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ba60:	6879      	ldr	r1, [r7, #4]
 800ba62:	33e0      	adds	r3, #224	; 0xe0
 800ba64:	009b      	lsls	r3, r3, #2
 800ba66:	440b      	add	r3, r1
 800ba68:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ba6a:	2300      	movs	r3, #0
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	370c      	adds	r7, #12
 800ba70:	46bd      	mov	sp, r7
 800ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba76:	4770      	bx	lr

0800ba78 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b085      	sub	sp, #20
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ba80:	2300      	movs	r3, #0
 800ba82:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800ba84:	2300      	movs	r3, #0
 800ba86:	73fb      	strb	r3, [r7, #15]
 800ba88:	e00f      	b.n	800baaa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ba8a:	7bfb      	ldrb	r3, [r7, #15]
 800ba8c:	687a      	ldr	r2, [r7, #4]
 800ba8e:	33e0      	adds	r3, #224	; 0xe0
 800ba90:	009b      	lsls	r3, r3, #2
 800ba92:	4413      	add	r3, r2
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d102      	bne.n	800baa4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ba9e:	7bfb      	ldrb	r3, [r7, #15]
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	e007      	b.n	800bab4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800baa4:	7bfb      	ldrb	r3, [r7, #15]
 800baa6:	3301      	adds	r3, #1
 800baa8:	73fb      	strb	r3, [r7, #15]
 800baaa:	7bfb      	ldrb	r3, [r7, #15]
 800baac:	2b0f      	cmp	r3, #15
 800baae:	d9ec      	bls.n	800ba8a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bab0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	3714      	adds	r7, #20
 800bab8:	46bd      	mov	sp, r7
 800baba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babe:	4770      	bx	lr

0800bac0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b084      	sub	sp, #16
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	4603      	mov	r3, r0
 800bac8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800baca:	79fb      	ldrb	r3, [r7, #7]
 800bacc:	4a08      	ldr	r2, [pc, #32]	; (800baf0 <disk_status+0x30>)
 800bace:	009b      	lsls	r3, r3, #2
 800bad0:	4413      	add	r3, r2
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	685b      	ldr	r3, [r3, #4]
 800bad6:	79fa      	ldrb	r2, [r7, #7]
 800bad8:	4905      	ldr	r1, [pc, #20]	; (800baf0 <disk_status+0x30>)
 800bada:	440a      	add	r2, r1
 800badc:	7a12      	ldrb	r2, [r2, #8]
 800bade:	4610      	mov	r0, r2
 800bae0:	4798      	blx	r3
 800bae2:	4603      	mov	r3, r0
 800bae4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bae6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3710      	adds	r7, #16
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}
 800baf0:	20002e54 	.word	0x20002e54

0800baf4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	4603      	mov	r3, r0
 800bafc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bafe:	2300      	movs	r3, #0
 800bb00:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bb02:	79fb      	ldrb	r3, [r7, #7]
 800bb04:	4a0d      	ldr	r2, [pc, #52]	; (800bb3c <disk_initialize+0x48>)
 800bb06:	5cd3      	ldrb	r3, [r2, r3]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d111      	bne.n	800bb30 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800bb0c:	79fb      	ldrb	r3, [r7, #7]
 800bb0e:	4a0b      	ldr	r2, [pc, #44]	; (800bb3c <disk_initialize+0x48>)
 800bb10:	2101      	movs	r1, #1
 800bb12:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bb14:	79fb      	ldrb	r3, [r7, #7]
 800bb16:	4a09      	ldr	r2, [pc, #36]	; (800bb3c <disk_initialize+0x48>)
 800bb18:	009b      	lsls	r3, r3, #2
 800bb1a:	4413      	add	r3, r2
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	79fa      	ldrb	r2, [r7, #7]
 800bb22:	4906      	ldr	r1, [pc, #24]	; (800bb3c <disk_initialize+0x48>)
 800bb24:	440a      	add	r2, r1
 800bb26:	7a12      	ldrb	r2, [r2, #8]
 800bb28:	4610      	mov	r0, r2
 800bb2a:	4798      	blx	r3
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bb30:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3710      	adds	r7, #16
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	20002e54 	.word	0x20002e54

0800bb40 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bb40:	b590      	push	{r4, r7, lr}
 800bb42:	b087      	sub	sp, #28
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	60b9      	str	r1, [r7, #8]
 800bb48:	607a      	str	r2, [r7, #4]
 800bb4a:	603b      	str	r3, [r7, #0]
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bb50:	7bfb      	ldrb	r3, [r7, #15]
 800bb52:	4a0a      	ldr	r2, [pc, #40]	; (800bb7c <disk_read+0x3c>)
 800bb54:	009b      	lsls	r3, r3, #2
 800bb56:	4413      	add	r3, r2
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	689c      	ldr	r4, [r3, #8]
 800bb5c:	7bfb      	ldrb	r3, [r7, #15]
 800bb5e:	4a07      	ldr	r2, [pc, #28]	; (800bb7c <disk_read+0x3c>)
 800bb60:	4413      	add	r3, r2
 800bb62:	7a18      	ldrb	r0, [r3, #8]
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	68b9      	ldr	r1, [r7, #8]
 800bb6a:	47a0      	blx	r4
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	75fb      	strb	r3, [r7, #23]
  return res;
 800bb70:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	371c      	adds	r7, #28
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd90      	pop	{r4, r7, pc}
 800bb7a:	bf00      	nop
 800bb7c:	20002e54 	.word	0x20002e54

0800bb80 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bb80:	b590      	push	{r4, r7, lr}
 800bb82:	b087      	sub	sp, #28
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	60b9      	str	r1, [r7, #8]
 800bb88:	607a      	str	r2, [r7, #4]
 800bb8a:	603b      	str	r3, [r7, #0]
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bb90:	7bfb      	ldrb	r3, [r7, #15]
 800bb92:	4a0a      	ldr	r2, [pc, #40]	; (800bbbc <disk_write+0x3c>)
 800bb94:	009b      	lsls	r3, r3, #2
 800bb96:	4413      	add	r3, r2
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	68dc      	ldr	r4, [r3, #12]
 800bb9c:	7bfb      	ldrb	r3, [r7, #15]
 800bb9e:	4a07      	ldr	r2, [pc, #28]	; (800bbbc <disk_write+0x3c>)
 800bba0:	4413      	add	r3, r2
 800bba2:	7a18      	ldrb	r0, [r3, #8]
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	687a      	ldr	r2, [r7, #4]
 800bba8:	68b9      	ldr	r1, [r7, #8]
 800bbaa:	47a0      	blx	r4
 800bbac:	4603      	mov	r3, r0
 800bbae:	75fb      	strb	r3, [r7, #23]
  return res;
 800bbb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	371c      	adds	r7, #28
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd90      	pop	{r4, r7, pc}
 800bbba:	bf00      	nop
 800bbbc:	20002e54 	.word	0x20002e54

0800bbc0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	603a      	str	r2, [r7, #0]
 800bbca:	71fb      	strb	r3, [r7, #7]
 800bbcc:	460b      	mov	r3, r1
 800bbce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bbd0:	79fb      	ldrb	r3, [r7, #7]
 800bbd2:	4a09      	ldr	r2, [pc, #36]	; (800bbf8 <disk_ioctl+0x38>)
 800bbd4:	009b      	lsls	r3, r3, #2
 800bbd6:	4413      	add	r3, r2
 800bbd8:	685b      	ldr	r3, [r3, #4]
 800bbda:	691b      	ldr	r3, [r3, #16]
 800bbdc:	79fa      	ldrb	r2, [r7, #7]
 800bbde:	4906      	ldr	r1, [pc, #24]	; (800bbf8 <disk_ioctl+0x38>)
 800bbe0:	440a      	add	r2, r1
 800bbe2:	7a10      	ldrb	r0, [r2, #8]
 800bbe4:	79b9      	ldrb	r1, [r7, #6]
 800bbe6:	683a      	ldr	r2, [r7, #0]
 800bbe8:	4798      	blx	r3
 800bbea:	4603      	mov	r3, r0
 800bbec:	73fb      	strb	r3, [r7, #15]
  return res;
 800bbee:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3710      	adds	r7, #16
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	20002e54 	.word	0x20002e54

0800bbfc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b085      	sub	sp, #20
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	3301      	adds	r3, #1
 800bc08:	781b      	ldrb	r3, [r3, #0]
 800bc0a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bc0c:	89fb      	ldrh	r3, [r7, #14]
 800bc0e:	021b      	lsls	r3, r3, #8
 800bc10:	b21a      	sxth	r2, r3
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	781b      	ldrb	r3, [r3, #0]
 800bc16:	b21b      	sxth	r3, r3
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	b21b      	sxth	r3, r3
 800bc1c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bc1e:	89fb      	ldrh	r3, [r7, #14]
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3714      	adds	r7, #20
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr

0800bc2c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b085      	sub	sp, #20
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	3303      	adds	r3, #3
 800bc38:	781b      	ldrb	r3, [r3, #0]
 800bc3a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	021b      	lsls	r3, r3, #8
 800bc40:	687a      	ldr	r2, [r7, #4]
 800bc42:	3202      	adds	r2, #2
 800bc44:	7812      	ldrb	r2, [r2, #0]
 800bc46:	4313      	orrs	r3, r2
 800bc48:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	021b      	lsls	r3, r3, #8
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	3201      	adds	r2, #1
 800bc52:	7812      	ldrb	r2, [r2, #0]
 800bc54:	4313      	orrs	r3, r2
 800bc56:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	021b      	lsls	r3, r3, #8
 800bc5c:	687a      	ldr	r2, [r7, #4]
 800bc5e:	7812      	ldrb	r2, [r2, #0]
 800bc60:	4313      	orrs	r3, r2
 800bc62:	60fb      	str	r3, [r7, #12]
	return rv;
 800bc64:	68fb      	ldr	r3, [r7, #12]
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3714      	adds	r7, #20
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr
	...

0800bc74 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b085      	sub	sp, #20
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	60fb      	str	r3, [r7, #12]
 800bc80:	e010      	b.n	800bca4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bc82:	4a0d      	ldr	r2, [pc, #52]	; (800bcb8 <clear_lock+0x44>)
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	011b      	lsls	r3, r3, #4
 800bc88:	4413      	add	r3, r2
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	687a      	ldr	r2, [r7, #4]
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d105      	bne.n	800bc9e <clear_lock+0x2a>
 800bc92:	4a09      	ldr	r2, [pc, #36]	; (800bcb8 <clear_lock+0x44>)
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	011b      	lsls	r3, r3, #4
 800bc98:	4413      	add	r3, r2
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	3301      	adds	r3, #1
 800bca2:	60fb      	str	r3, [r7, #12]
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	2b01      	cmp	r3, #1
 800bca8:	d9eb      	bls.n	800bc82 <clear_lock+0xe>
	}
}
 800bcaa:	bf00      	nop
 800bcac:	bf00      	nop
 800bcae:	3714      	adds	r7, #20
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr
 800bcb8:	20002e34 	.word	0x20002e34

0800bcbc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b086      	sub	sp, #24
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	78db      	ldrb	r3, [r3, #3]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d034      	beq.n	800bd3a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcd4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	7858      	ldrb	r0, [r3, #1]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bce0:	2301      	movs	r3, #1
 800bce2:	697a      	ldr	r2, [r7, #20]
 800bce4:	f7ff ff4c 	bl	800bb80 <disk_write>
 800bce8:	4603      	mov	r3, r0
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d002      	beq.n	800bcf4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800bcee:	2301      	movs	r3, #1
 800bcf0:	73fb      	strb	r3, [r7, #15]
 800bcf2:	e022      	b.n	800bd3a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcfe:	697a      	ldr	r2, [r7, #20]
 800bd00:	1ad2      	subs	r2, r2, r3
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	69db      	ldr	r3, [r3, #28]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d217      	bcs.n	800bd3a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	789b      	ldrb	r3, [r3, #2]
 800bd0e:	613b      	str	r3, [r7, #16]
 800bd10:	e010      	b.n	800bd34 <sync_window+0x78>
					wsect += fs->fsize;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	69db      	ldr	r3, [r3, #28]
 800bd16:	697a      	ldr	r2, [r7, #20]
 800bd18:	4413      	add	r3, r2
 800bd1a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	7858      	ldrb	r0, [r3, #1]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bd26:	2301      	movs	r3, #1
 800bd28:	697a      	ldr	r2, [r7, #20]
 800bd2a:	f7ff ff29 	bl	800bb80 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	3b01      	subs	r3, #1
 800bd32:	613b      	str	r3, [r7, #16]
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	2b01      	cmp	r3, #1
 800bd38:	d8eb      	bhi.n	800bd12 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bd3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3718      	adds	r7, #24
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}

0800bd44 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b084      	sub	sp, #16
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd56:	683a      	ldr	r2, [r7, #0]
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d01b      	beq.n	800bd94 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f7ff ffad 	bl	800bcbc <sync_window>
 800bd62:	4603      	mov	r3, r0
 800bd64:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bd66:	7bfb      	ldrb	r3, [r7, #15]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d113      	bne.n	800bd94 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	7858      	ldrb	r0, [r3, #1]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bd76:	2301      	movs	r3, #1
 800bd78:	683a      	ldr	r2, [r7, #0]
 800bd7a:	f7ff fee1 	bl	800bb40 <disk_read>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d004      	beq.n	800bd8e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bd84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd88:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	683a      	ldr	r2, [r7, #0]
 800bd92:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800bd94:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3710      	adds	r7, #16
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}

0800bd9e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bd9e:	b480      	push	{r7}
 800bda0:	b087      	sub	sp, #28
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bda6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bdaa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d031      	beq.n	800be18 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	617b      	str	r3, [r7, #20]
 800bdba:	e002      	b.n	800bdc2 <get_ldnumber+0x24>
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	617b      	str	r3, [r7, #20]
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	2b20      	cmp	r3, #32
 800bdc8:	d903      	bls.n	800bdd2 <get_ldnumber+0x34>
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	2b3a      	cmp	r3, #58	; 0x3a
 800bdd0:	d1f4      	bne.n	800bdbc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	781b      	ldrb	r3, [r3, #0]
 800bdd6:	2b3a      	cmp	r3, #58	; 0x3a
 800bdd8:	d11c      	bne.n	800be14 <get_ldnumber+0x76>
			tp = *path;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	1c5a      	adds	r2, r3, #1
 800bde4:	60fa      	str	r2, [r7, #12]
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	3b30      	subs	r3, #48	; 0x30
 800bdea:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	2b09      	cmp	r3, #9
 800bdf0:	d80e      	bhi.n	800be10 <get_ldnumber+0x72>
 800bdf2:	68fa      	ldr	r2, [r7, #12]
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d10a      	bne.n	800be10 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d107      	bne.n	800be10 <get_ldnumber+0x72>
					vol = (int)i;
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	3301      	adds	r3, #1
 800be08:	617b      	str	r3, [r7, #20]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	697a      	ldr	r2, [r7, #20]
 800be0e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	e002      	b.n	800be1a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800be14:	2300      	movs	r3, #0
 800be16:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800be18:	693b      	ldr	r3, [r7, #16]
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	371c      	adds	r7, #28
 800be1e:	46bd      	mov	sp, r7
 800be20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be24:	4770      	bx	lr
	...

0800be28 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2200      	movs	r2, #0
 800be36:	70da      	strb	r2, [r3, #3]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be3e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800be40:	6839      	ldr	r1, [r7, #0]
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f7ff ff7e 	bl	800bd44 <move_window>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d001      	beq.n	800be52 <check_fs+0x2a>
 800be4e:	2304      	movs	r3, #4
 800be50:	e038      	b.n	800bec4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	3334      	adds	r3, #52	; 0x34
 800be56:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800be5a:	4618      	mov	r0, r3
 800be5c:	f7ff fece 	bl	800bbfc <ld_word>
 800be60:	4603      	mov	r3, r0
 800be62:	461a      	mov	r2, r3
 800be64:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800be68:	429a      	cmp	r2, r3
 800be6a:	d001      	beq.n	800be70 <check_fs+0x48>
 800be6c:	2303      	movs	r3, #3
 800be6e:	e029      	b.n	800bec4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800be76:	2be9      	cmp	r3, #233	; 0xe9
 800be78:	d009      	beq.n	800be8e <check_fs+0x66>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800be80:	2beb      	cmp	r3, #235	; 0xeb
 800be82:	d11e      	bne.n	800bec2 <check_fs+0x9a>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800be8a:	2b90      	cmp	r3, #144	; 0x90
 800be8c:	d119      	bne.n	800bec2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	3334      	adds	r3, #52	; 0x34
 800be92:	3336      	adds	r3, #54	; 0x36
 800be94:	4618      	mov	r0, r3
 800be96:	f7ff fec9 	bl	800bc2c <ld_dword>
 800be9a:	4603      	mov	r3, r0
 800be9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bea0:	4a0a      	ldr	r2, [pc, #40]	; (800becc <check_fs+0xa4>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d101      	bne.n	800beaa <check_fs+0x82>
 800bea6:	2300      	movs	r3, #0
 800bea8:	e00c      	b.n	800bec4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	3334      	adds	r3, #52	; 0x34
 800beae:	3352      	adds	r3, #82	; 0x52
 800beb0:	4618      	mov	r0, r3
 800beb2:	f7ff febb 	bl	800bc2c <ld_dword>
 800beb6:	4603      	mov	r3, r0
 800beb8:	4a05      	ldr	r2, [pc, #20]	; (800bed0 <check_fs+0xa8>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d101      	bne.n	800bec2 <check_fs+0x9a>
 800bebe:	2300      	movs	r3, #0
 800bec0:	e000      	b.n	800bec4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800bec2:	2302      	movs	r3, #2
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3708      	adds	r7, #8
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}
 800becc:	00544146 	.word	0x00544146
 800bed0:	33544146 	.word	0x33544146

0800bed4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b096      	sub	sp, #88	; 0x58
 800bed8:	af00      	add	r7, sp, #0
 800beda:	60f8      	str	r0, [r7, #12]
 800bedc:	60b9      	str	r1, [r7, #8]
 800bede:	4613      	mov	r3, r2
 800bee0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	2200      	movs	r2, #0
 800bee6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bee8:	68f8      	ldr	r0, [r7, #12]
 800beea:	f7ff ff58 	bl	800bd9e <get_ldnumber>
 800beee:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	da01      	bge.n	800befa <find_volume+0x26>
 800bef6:	230b      	movs	r3, #11
 800bef8:	e262      	b.n	800c3c0 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800befa:	4a9f      	ldr	r2, [pc, #636]	; (800c178 <find_volume+0x2a4>)
 800befc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800befe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf02:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bf04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d101      	bne.n	800bf0e <find_volume+0x3a>
 800bf0a:	230c      	movs	r3, #12
 800bf0c:	e258      	b.n	800c3c0 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf12:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bf14:	79fb      	ldrb	r3, [r7, #7]
 800bf16:	f023 0301 	bic.w	r3, r3, #1
 800bf1a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bf1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf1e:	781b      	ldrb	r3, [r3, #0]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d01a      	beq.n	800bf5a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800bf24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf26:	785b      	ldrb	r3, [r3, #1]
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f7ff fdc9 	bl	800bac0 <disk_status>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bf34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf38:	f003 0301 	and.w	r3, r3, #1
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d10c      	bne.n	800bf5a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bf40:	79fb      	ldrb	r3, [r7, #7]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d007      	beq.n	800bf56 <find_volume+0x82>
 800bf46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf4a:	f003 0304 	and.w	r3, r3, #4
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d001      	beq.n	800bf56 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800bf52:	230a      	movs	r3, #10
 800bf54:	e234      	b.n	800c3c0 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800bf56:	2300      	movs	r3, #0
 800bf58:	e232      	b.n	800c3c0 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bf5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bf60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf62:	b2da      	uxtb	r2, r3
 800bf64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf66:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bf68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf6a:	785b      	ldrb	r3, [r3, #1]
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7ff fdc1 	bl	800baf4 <disk_initialize>
 800bf72:	4603      	mov	r3, r0
 800bf74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bf78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf7c:	f003 0301 	and.w	r3, r3, #1
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d001      	beq.n	800bf88 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bf84:	2303      	movs	r3, #3
 800bf86:	e21b      	b.n	800c3c0 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bf88:	79fb      	ldrb	r3, [r7, #7]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d007      	beq.n	800bf9e <find_volume+0xca>
 800bf8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf92:	f003 0304 	and.w	r3, r3, #4
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d001      	beq.n	800bf9e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800bf9a:	230a      	movs	r3, #10
 800bf9c:	e210      	b.n	800c3c0 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800bf9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa0:	7858      	ldrb	r0, [r3, #1]
 800bfa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa4:	330c      	adds	r3, #12
 800bfa6:	461a      	mov	r2, r3
 800bfa8:	2102      	movs	r1, #2
 800bfaa:	f7ff fe09 	bl	800bbc0 <disk_ioctl>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d001      	beq.n	800bfb8 <find_volume+0xe4>
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	e203      	b.n	800c3c0 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800bfb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfba:	899b      	ldrh	r3, [r3, #12]
 800bfbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfc0:	d80d      	bhi.n	800bfde <find_volume+0x10a>
 800bfc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc4:	899b      	ldrh	r3, [r3, #12]
 800bfc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfca:	d308      	bcc.n	800bfde <find_volume+0x10a>
 800bfcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfce:	899b      	ldrh	r3, [r3, #12]
 800bfd0:	461a      	mov	r2, r3
 800bfd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd4:	899b      	ldrh	r3, [r3, #12]
 800bfd6:	3b01      	subs	r3, #1
 800bfd8:	4013      	ands	r3, r2
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d001      	beq.n	800bfe2 <find_volume+0x10e>
 800bfde:	2301      	movs	r3, #1
 800bfe0:	e1ee      	b.n	800c3c0 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bfe6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bfe8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bfea:	f7ff ff1d 	bl	800be28 <check_fs>
 800bfee:	4603      	mov	r3, r0
 800bff0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bff4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bff8:	2b02      	cmp	r3, #2
 800bffa:	d149      	bne.n	800c090 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bffc:	2300      	movs	r3, #0
 800bffe:	643b      	str	r3, [r7, #64]	; 0x40
 800c000:	e01e      	b.n	800c040 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c004:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c00a:	011b      	lsls	r3, r3, #4
 800c00c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c010:	4413      	add	r3, r2
 800c012:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c016:	3304      	adds	r3, #4
 800c018:	781b      	ldrb	r3, [r3, #0]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d006      	beq.n	800c02c <find_volume+0x158>
 800c01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c020:	3308      	adds	r3, #8
 800c022:	4618      	mov	r0, r3
 800c024:	f7ff fe02 	bl	800bc2c <ld_dword>
 800c028:	4602      	mov	r2, r0
 800c02a:	e000      	b.n	800c02e <find_volume+0x15a>
 800c02c:	2200      	movs	r2, #0
 800c02e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	3358      	adds	r3, #88	; 0x58
 800c034:	443b      	add	r3, r7
 800c036:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c03a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c03c:	3301      	adds	r3, #1
 800c03e:	643b      	str	r3, [r7, #64]	; 0x40
 800c040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c042:	2b03      	cmp	r3, #3
 800c044:	d9dd      	bls.n	800c002 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c046:	2300      	movs	r3, #0
 800c048:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c04a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d002      	beq.n	800c056 <find_volume+0x182>
 800c050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c052:	3b01      	subs	r3, #1
 800c054:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c058:	009b      	lsls	r3, r3, #2
 800c05a:	3358      	adds	r3, #88	; 0x58
 800c05c:	443b      	add	r3, r7
 800c05e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c062:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c066:	2b00      	cmp	r3, #0
 800c068:	d005      	beq.n	800c076 <find_volume+0x1a2>
 800c06a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c06c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c06e:	f7ff fedb 	bl	800be28 <check_fs>
 800c072:	4603      	mov	r3, r0
 800c074:	e000      	b.n	800c078 <find_volume+0x1a4>
 800c076:	2303      	movs	r3, #3
 800c078:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c07c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c080:	2b01      	cmp	r3, #1
 800c082:	d905      	bls.n	800c090 <find_volume+0x1bc>
 800c084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c086:	3301      	adds	r3, #1
 800c088:	643b      	str	r3, [r7, #64]	; 0x40
 800c08a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c08c:	2b03      	cmp	r3, #3
 800c08e:	d9e2      	bls.n	800c056 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c090:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c094:	2b04      	cmp	r3, #4
 800c096:	d101      	bne.n	800c09c <find_volume+0x1c8>
 800c098:	2301      	movs	r3, #1
 800c09a:	e191      	b.n	800c3c0 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c09c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c0a0:	2b01      	cmp	r3, #1
 800c0a2:	d901      	bls.n	800c0a8 <find_volume+0x1d4>
 800c0a4:	230d      	movs	r3, #13
 800c0a6:	e18b      	b.n	800c3c0 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0aa:	3334      	adds	r3, #52	; 0x34
 800c0ac:	330b      	adds	r3, #11
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7ff fda4 	bl	800bbfc <ld_word>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ba:	899b      	ldrh	r3, [r3, #12]
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d001      	beq.n	800c0c4 <find_volume+0x1f0>
 800c0c0:	230d      	movs	r3, #13
 800c0c2:	e17d      	b.n	800c3c0 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c6:	3334      	adds	r3, #52	; 0x34
 800c0c8:	3316      	adds	r3, #22
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f7ff fd96 	bl	800bbfc <ld_word>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c0d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d106      	bne.n	800c0e8 <find_volume+0x214>
 800c0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0dc:	3334      	adds	r3, #52	; 0x34
 800c0de:	3324      	adds	r3, #36	; 0x24
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f7ff fda3 	bl	800bc2c <ld_dword>
 800c0e6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c0ec:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fa:	789b      	ldrb	r3, [r3, #2]
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	d005      	beq.n	800c10c <find_volume+0x238>
 800c100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c102:	789b      	ldrb	r3, [r3, #2]
 800c104:	2b02      	cmp	r3, #2
 800c106:	d001      	beq.n	800c10c <find_volume+0x238>
 800c108:	230d      	movs	r3, #13
 800c10a:	e159      	b.n	800c3c0 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c10e:	789b      	ldrb	r3, [r3, #2]
 800c110:	461a      	mov	r2, r3
 800c112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c114:	fb02 f303 	mul.w	r3, r2, r3
 800c118:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c11c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c120:	b29a      	uxth	r2, r3
 800c122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c124:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c128:	895b      	ldrh	r3, [r3, #10]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d008      	beq.n	800c140 <find_volume+0x26c>
 800c12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c130:	895b      	ldrh	r3, [r3, #10]
 800c132:	461a      	mov	r2, r3
 800c134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c136:	895b      	ldrh	r3, [r3, #10]
 800c138:	3b01      	subs	r3, #1
 800c13a:	4013      	ands	r3, r2
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d001      	beq.n	800c144 <find_volume+0x270>
 800c140:	230d      	movs	r3, #13
 800c142:	e13d      	b.n	800c3c0 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c146:	3334      	adds	r3, #52	; 0x34
 800c148:	3311      	adds	r3, #17
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7ff fd56 	bl	800bbfc <ld_word>
 800c150:	4603      	mov	r3, r0
 800c152:	461a      	mov	r2, r3
 800c154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c156:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c15a:	891b      	ldrh	r3, [r3, #8]
 800c15c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c15e:	8992      	ldrh	r2, [r2, #12]
 800c160:	0952      	lsrs	r2, r2, #5
 800c162:	b292      	uxth	r2, r2
 800c164:	fbb3 f1f2 	udiv	r1, r3, r2
 800c168:	fb01 f202 	mul.w	r2, r1, r2
 800c16c:	1a9b      	subs	r3, r3, r2
 800c16e:	b29b      	uxth	r3, r3
 800c170:	2b00      	cmp	r3, #0
 800c172:	d003      	beq.n	800c17c <find_volume+0x2a8>
 800c174:	230d      	movs	r3, #13
 800c176:	e123      	b.n	800c3c0 <find_volume+0x4ec>
 800c178:	20002e2c 	.word	0x20002e2c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c17e:	3334      	adds	r3, #52	; 0x34
 800c180:	3313      	adds	r3, #19
 800c182:	4618      	mov	r0, r3
 800c184:	f7ff fd3a 	bl	800bbfc <ld_word>
 800c188:	4603      	mov	r3, r0
 800c18a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c18c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d106      	bne.n	800c1a0 <find_volume+0x2cc>
 800c192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c194:	3334      	adds	r3, #52	; 0x34
 800c196:	3320      	adds	r3, #32
 800c198:	4618      	mov	r0, r3
 800c19a:	f7ff fd47 	bl	800bc2c <ld_dword>
 800c19e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1a2:	3334      	adds	r3, #52	; 0x34
 800c1a4:	330e      	adds	r3, #14
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f7ff fd28 	bl	800bbfc <ld_word>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c1b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d101      	bne.n	800c1ba <find_volume+0x2e6>
 800c1b6:	230d      	movs	r3, #13
 800c1b8:	e102      	b.n	800c3c0 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c1ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c1bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1be:	4413      	add	r3, r2
 800c1c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1c2:	8911      	ldrh	r1, [r2, #8]
 800c1c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1c6:	8992      	ldrh	r2, [r2, #12]
 800c1c8:	0952      	lsrs	r2, r2, #5
 800c1ca:	b292      	uxth	r2, r2
 800c1cc:	fbb1 f2f2 	udiv	r2, r1, r2
 800c1d0:	b292      	uxth	r2, r2
 800c1d2:	4413      	add	r3, r2
 800c1d4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c1d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	d201      	bcs.n	800c1e2 <find_volume+0x30e>
 800c1de:	230d      	movs	r3, #13
 800c1e0:	e0ee      	b.n	800c3c0 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c1e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e6:	1ad3      	subs	r3, r2, r3
 800c1e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1ea:	8952      	ldrh	r2, [r2, #10]
 800c1ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1f0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d101      	bne.n	800c1fc <find_volume+0x328>
 800c1f8:	230d      	movs	r3, #13
 800c1fa:	e0e1      	b.n	800c3c0 <find_volume+0x4ec>
		fmt = FS_FAT32;
 800c1fc:	2303      	movs	r3, #3
 800c1fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c204:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c208:	4293      	cmp	r3, r2
 800c20a:	d802      	bhi.n	800c212 <find_volume+0x33e>
 800c20c:	2302      	movs	r3, #2
 800c20e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c214:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c218:	4293      	cmp	r3, r2
 800c21a:	d802      	bhi.n	800c222 <find_volume+0x34e>
 800c21c:	2301      	movs	r3, #1
 800c21e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c224:	1c9a      	adds	r2, r3, #2
 800c226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c228:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800c22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c22c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c22e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c230:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c234:	441a      	add	r2, r3
 800c236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c238:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800c23a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23e:	441a      	add	r2, r3
 800c240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c242:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800c244:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c248:	2b03      	cmp	r3, #3
 800c24a:	d11e      	bne.n	800c28a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c24e:	3334      	adds	r3, #52	; 0x34
 800c250:	332a      	adds	r3, #42	; 0x2a
 800c252:	4618      	mov	r0, r3
 800c254:	f7ff fcd2 	bl	800bbfc <ld_word>
 800c258:	4603      	mov	r3, r0
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d001      	beq.n	800c262 <find_volume+0x38e>
 800c25e:	230d      	movs	r3, #13
 800c260:	e0ae      	b.n	800c3c0 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c264:	891b      	ldrh	r3, [r3, #8]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d001      	beq.n	800c26e <find_volume+0x39a>
 800c26a:	230d      	movs	r3, #13
 800c26c:	e0a8      	b.n	800c3c0 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c270:	3334      	adds	r3, #52	; 0x34
 800c272:	332c      	adds	r3, #44	; 0x2c
 800c274:	4618      	mov	r0, r3
 800c276:	f7ff fcd9 	bl	800bc2c <ld_dword>
 800c27a:	4602      	mov	r2, r0
 800c27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c27e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c282:	699b      	ldr	r3, [r3, #24]
 800c284:	009b      	lsls	r3, r3, #2
 800c286:	647b      	str	r3, [r7, #68]	; 0x44
 800c288:	e01f      	b.n	800c2ca <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c28c:	891b      	ldrh	r3, [r3, #8]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d101      	bne.n	800c296 <find_volume+0x3c2>
 800c292:	230d      	movs	r3, #13
 800c294:	e094      	b.n	800c3c0 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c298:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c29a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c29c:	441a      	add	r2, r3
 800c29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c2a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c2a6:	2b02      	cmp	r3, #2
 800c2a8:	d103      	bne.n	800c2b2 <find_volume+0x3de>
 800c2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ac:	699b      	ldr	r3, [r3, #24]
 800c2ae:	005b      	lsls	r3, r3, #1
 800c2b0:	e00a      	b.n	800c2c8 <find_volume+0x3f4>
 800c2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b4:	699a      	ldr	r2, [r3, #24]
 800c2b6:	4613      	mov	r3, r2
 800c2b8:	005b      	lsls	r3, r3, #1
 800c2ba:	4413      	add	r3, r2
 800c2bc:	085a      	lsrs	r2, r3, #1
 800c2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c0:	699b      	ldr	r3, [r3, #24]
 800c2c2:	f003 0301 	and.w	r3, r3, #1
 800c2c6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c2c8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2cc:	69da      	ldr	r2, [r3, #28]
 800c2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d0:	899b      	ldrh	r3, [r3, #12]
 800c2d2:	4619      	mov	r1, r3
 800c2d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2d6:	440b      	add	r3, r1
 800c2d8:	3b01      	subs	r3, #1
 800c2da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c2dc:	8989      	ldrh	r1, [r1, #12]
 800c2de:	fbb3 f3f1 	udiv	r3, r3, r1
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d201      	bcs.n	800c2ea <find_volume+0x416>
 800c2e6:	230d      	movs	r3, #13
 800c2e8:	e06a      	b.n	800c3c0 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c2f0:	615a      	str	r2, [r3, #20]
 800c2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f4:	695a      	ldr	r2, [r3, #20]
 800c2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800c2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2fc:	2280      	movs	r2, #128	; 0x80
 800c2fe:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c300:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c304:	2b03      	cmp	r3, #3
 800c306:	d149      	bne.n	800c39c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c30a:	3334      	adds	r3, #52	; 0x34
 800c30c:	3330      	adds	r3, #48	; 0x30
 800c30e:	4618      	mov	r0, r3
 800c310:	f7ff fc74 	bl	800bbfc <ld_word>
 800c314:	4603      	mov	r3, r0
 800c316:	2b01      	cmp	r3, #1
 800c318:	d140      	bne.n	800c39c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c31a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c31c:	3301      	adds	r3, #1
 800c31e:	4619      	mov	r1, r3
 800c320:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c322:	f7ff fd0f 	bl	800bd44 <move_window>
 800c326:	4603      	mov	r3, r0
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d137      	bne.n	800c39c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800c32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c32e:	2200      	movs	r2, #0
 800c330:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c334:	3334      	adds	r3, #52	; 0x34
 800c336:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7ff fc5e 	bl	800bbfc <ld_word>
 800c340:	4603      	mov	r3, r0
 800c342:	461a      	mov	r2, r3
 800c344:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c348:	429a      	cmp	r2, r3
 800c34a:	d127      	bne.n	800c39c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c34e:	3334      	adds	r3, #52	; 0x34
 800c350:	4618      	mov	r0, r3
 800c352:	f7ff fc6b 	bl	800bc2c <ld_dword>
 800c356:	4603      	mov	r3, r0
 800c358:	4a1b      	ldr	r2, [pc, #108]	; (800c3c8 <find_volume+0x4f4>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d11e      	bne.n	800c39c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c360:	3334      	adds	r3, #52	; 0x34
 800c362:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c366:	4618      	mov	r0, r3
 800c368:	f7ff fc60 	bl	800bc2c <ld_dword>
 800c36c:	4603      	mov	r3, r0
 800c36e:	4a17      	ldr	r2, [pc, #92]	; (800c3cc <find_volume+0x4f8>)
 800c370:	4293      	cmp	r3, r2
 800c372:	d113      	bne.n	800c39c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c376:	3334      	adds	r3, #52	; 0x34
 800c378:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c37c:	4618      	mov	r0, r3
 800c37e:	f7ff fc55 	bl	800bc2c <ld_dword>
 800c382:	4602      	mov	r2, r0
 800c384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c386:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c38a:	3334      	adds	r3, #52	; 0x34
 800c38c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c390:	4618      	mov	r0, r3
 800c392:	f7ff fc4b 	bl	800bc2c <ld_dword>
 800c396:	4602      	mov	r2, r0
 800c398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c39a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c39e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c3a2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c3a4:	4b0a      	ldr	r3, [pc, #40]	; (800c3d0 <find_volume+0x4fc>)
 800c3a6:	881b      	ldrh	r3, [r3, #0]
 800c3a8:	3301      	adds	r3, #1
 800c3aa:	b29a      	uxth	r2, r3
 800c3ac:	4b08      	ldr	r3, [pc, #32]	; (800c3d0 <find_volume+0x4fc>)
 800c3ae:	801a      	strh	r2, [r3, #0]
 800c3b0:	4b07      	ldr	r3, [pc, #28]	; (800c3d0 <find_volume+0x4fc>)
 800c3b2:	881a      	ldrh	r2, [r3, #0]
 800c3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c3b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c3ba:	f7ff fc5b 	bl	800bc74 <clear_lock>
#endif
	return FR_OK;
 800c3be:	2300      	movs	r3, #0
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3758      	adds	r7, #88	; 0x58
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}
 800c3c8:	41615252 	.word	0x41615252
 800c3cc:	61417272 	.word	0x61417272
 800c3d0:	20002e30 	.word	0x20002e30

0800c3d4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b088      	sub	sp, #32
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	60f8      	str	r0, [r7, #12]
 800c3dc:	60b9      	str	r1, [r7, #8]
 800c3de:	4613      	mov	r3, r2
 800c3e0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c3e6:	f107 0310 	add.w	r3, r7, #16
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f7ff fcd7 	bl	800bd9e <get_ldnumber>
 800c3f0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c3f2:	69fb      	ldr	r3, [r7, #28]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	da01      	bge.n	800c3fc <f_mount+0x28>
 800c3f8:	230b      	movs	r3, #11
 800c3fa:	e02b      	b.n	800c454 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c3fc:	4a17      	ldr	r2, [pc, #92]	; (800c45c <f_mount+0x88>)
 800c3fe:	69fb      	ldr	r3, [r7, #28]
 800c400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c404:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c406:	69bb      	ldr	r3, [r7, #24]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d005      	beq.n	800c418 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c40c:	69b8      	ldr	r0, [r7, #24]
 800c40e:	f7ff fc31 	bl	800bc74 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c412:	69bb      	ldr	r3, [r7, #24]
 800c414:	2200      	movs	r2, #0
 800c416:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d002      	beq.n	800c424 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2200      	movs	r2, #0
 800c422:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c424:	68fa      	ldr	r2, [r7, #12]
 800c426:	490d      	ldr	r1, [pc, #52]	; (800c45c <f_mount+0x88>)
 800c428:	69fb      	ldr	r3, [r7, #28]
 800c42a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d002      	beq.n	800c43a <f_mount+0x66>
 800c434:	79fb      	ldrb	r3, [r7, #7]
 800c436:	2b01      	cmp	r3, #1
 800c438:	d001      	beq.n	800c43e <f_mount+0x6a>
 800c43a:	2300      	movs	r3, #0
 800c43c:	e00a      	b.n	800c454 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c43e:	f107 010c 	add.w	r1, r7, #12
 800c442:	f107 0308 	add.w	r3, r7, #8
 800c446:	2200      	movs	r2, #0
 800c448:	4618      	mov	r0, r3
 800c44a:	f7ff fd43 	bl	800bed4 <find_volume>
 800c44e:	4603      	mov	r3, r0
 800c450:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c452:	7dfb      	ldrb	r3, [r7, #23]
}
 800c454:	4618      	mov	r0, r3
 800c456:	3720      	adds	r7, #32
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}
 800c45c:	20002e2c 	.word	0x20002e2c

0800c460 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c460:	b480      	push	{r7}
 800c462:	b087      	sub	sp, #28
 800c464:	af00      	add	r7, sp, #0
 800c466:	60f8      	str	r0, [r7, #12]
 800c468:	60b9      	str	r1, [r7, #8]
 800c46a:	4613      	mov	r3, r2
 800c46c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c46e:	2301      	movs	r3, #1
 800c470:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c472:	2300      	movs	r3, #0
 800c474:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c476:	4b1f      	ldr	r3, [pc, #124]	; (800c4f4 <FATFS_LinkDriverEx+0x94>)
 800c478:	7a5b      	ldrb	r3, [r3, #9]
 800c47a:	b2db      	uxtb	r3, r3
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d131      	bne.n	800c4e4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c480:	4b1c      	ldr	r3, [pc, #112]	; (800c4f4 <FATFS_LinkDriverEx+0x94>)
 800c482:	7a5b      	ldrb	r3, [r3, #9]
 800c484:	b2db      	uxtb	r3, r3
 800c486:	461a      	mov	r2, r3
 800c488:	4b1a      	ldr	r3, [pc, #104]	; (800c4f4 <FATFS_LinkDriverEx+0x94>)
 800c48a:	2100      	movs	r1, #0
 800c48c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c48e:	4b19      	ldr	r3, [pc, #100]	; (800c4f4 <FATFS_LinkDriverEx+0x94>)
 800c490:	7a5b      	ldrb	r3, [r3, #9]
 800c492:	b2db      	uxtb	r3, r3
 800c494:	4a17      	ldr	r2, [pc, #92]	; (800c4f4 <FATFS_LinkDriverEx+0x94>)
 800c496:	009b      	lsls	r3, r3, #2
 800c498:	4413      	add	r3, r2
 800c49a:	68fa      	ldr	r2, [r7, #12]
 800c49c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c49e:	4b15      	ldr	r3, [pc, #84]	; (800c4f4 <FATFS_LinkDriverEx+0x94>)
 800c4a0:	7a5b      	ldrb	r3, [r3, #9]
 800c4a2:	b2db      	uxtb	r3, r3
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	4b13      	ldr	r3, [pc, #76]	; (800c4f4 <FATFS_LinkDriverEx+0x94>)
 800c4a8:	4413      	add	r3, r2
 800c4aa:	79fa      	ldrb	r2, [r7, #7]
 800c4ac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c4ae:	4b11      	ldr	r3, [pc, #68]	; (800c4f4 <FATFS_LinkDriverEx+0x94>)
 800c4b0:	7a5b      	ldrb	r3, [r3, #9]
 800c4b2:	b2db      	uxtb	r3, r3
 800c4b4:	1c5a      	adds	r2, r3, #1
 800c4b6:	b2d1      	uxtb	r1, r2
 800c4b8:	4a0e      	ldr	r2, [pc, #56]	; (800c4f4 <FATFS_LinkDriverEx+0x94>)
 800c4ba:	7251      	strb	r1, [r2, #9]
 800c4bc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c4be:	7dbb      	ldrb	r3, [r7, #22]
 800c4c0:	3330      	adds	r3, #48	; 0x30
 800c4c2:	b2da      	uxtb	r2, r3
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	223a      	movs	r2, #58	; 0x3a
 800c4ce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	3302      	adds	r3, #2
 800c4d4:	222f      	movs	r2, #47	; 0x2f
 800c4d6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	3303      	adds	r3, #3
 800c4dc:	2200      	movs	r2, #0
 800c4de:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c4e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	371c      	adds	r7, #28
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f0:	4770      	bx	lr
 800c4f2:	bf00      	nop
 800c4f4:	20002e54 	.word	0x20002e54

0800c4f8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b082      	sub	sp, #8
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c502:	2200      	movs	r2, #0
 800c504:	6839      	ldr	r1, [r7, #0]
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f7ff ffaa 	bl	800c460 <FATFS_LinkDriverEx>
 800c50c:	4603      	mov	r3, r0
}
 800c50e:	4618      	mov	r0, r3
 800c510:	3708      	adds	r7, #8
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
	...

0800c518 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c51c:	2201      	movs	r2, #1
 800c51e:	490e      	ldr	r1, [pc, #56]	; (800c558 <MX_USB_HOST_Init+0x40>)
 800c520:	480e      	ldr	r0, [pc, #56]	; (800c55c <MX_USB_HOST_Init+0x44>)
 800c522:	f7fd fe7b 	bl	800a21c <USBH_Init>
 800c526:	4603      	mov	r3, r0
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d001      	beq.n	800c530 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c52c:	f7f5 f9ee 	bl	800190c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800c530:	490b      	ldr	r1, [pc, #44]	; (800c560 <MX_USB_HOST_Init+0x48>)
 800c532:	480a      	ldr	r0, [pc, #40]	; (800c55c <MX_USB_HOST_Init+0x44>)
 800c534:	f7fd ff00 	bl	800a338 <USBH_RegisterClass>
 800c538:	4603      	mov	r3, r0
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d001      	beq.n	800c542 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c53e:	f7f5 f9e5 	bl	800190c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c542:	4806      	ldr	r0, [pc, #24]	; (800c55c <MX_USB_HOST_Init+0x44>)
 800c544:	f7fd ff84 	bl	800a450 <USBH_Start>
 800c548:	4603      	mov	r3, r0
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d001      	beq.n	800c552 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c54e:	f7f5 f9dd 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c552:	bf00      	nop
 800c554:	bd80      	pop	{r7, pc}
 800c556:	bf00      	nop
 800c558:	0800c579 	.word	0x0800c579
 800c55c:	20002e60 	.word	0x20002e60
 800c560:	20000044 	.word	0x20000044

0800c564 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c568:	4802      	ldr	r0, [pc, #8]	; (800c574 <MX_USB_HOST_Process+0x10>)
 800c56a:	f7fd ff81 	bl	800a470 <USBH_Process>
}
 800c56e:	bf00      	nop
 800c570:	bd80      	pop	{r7, pc}
 800c572:	bf00      	nop
 800c574:	20002e60 	.word	0x20002e60

0800c578 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c578:	b480      	push	{r7}
 800c57a:	b083      	sub	sp, #12
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
 800c580:	460b      	mov	r3, r1
 800c582:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c584:	78fb      	ldrb	r3, [r7, #3]
 800c586:	3b01      	subs	r3, #1
 800c588:	2b04      	cmp	r3, #4
 800c58a:	d819      	bhi.n	800c5c0 <USBH_UserProcess+0x48>
 800c58c:	a201      	add	r2, pc, #4	; (adr r2, 800c594 <USBH_UserProcess+0x1c>)
 800c58e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c592:	bf00      	nop
 800c594:	0800c5c1 	.word	0x0800c5c1
 800c598:	0800c5b1 	.word	0x0800c5b1
 800c59c:	0800c5c1 	.word	0x0800c5c1
 800c5a0:	0800c5b9 	.word	0x0800c5b9
 800c5a4:	0800c5a9 	.word	0x0800c5a9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c5a8:	4b09      	ldr	r3, [pc, #36]	; (800c5d0 <USBH_UserProcess+0x58>)
 800c5aa:	2203      	movs	r2, #3
 800c5ac:	701a      	strb	r2, [r3, #0]
  break;
 800c5ae:	e008      	b.n	800c5c2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c5b0:	4b07      	ldr	r3, [pc, #28]	; (800c5d0 <USBH_UserProcess+0x58>)
 800c5b2:	2202      	movs	r2, #2
 800c5b4:	701a      	strb	r2, [r3, #0]
  break;
 800c5b6:	e004      	b.n	800c5c2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c5b8:	4b05      	ldr	r3, [pc, #20]	; (800c5d0 <USBH_UserProcess+0x58>)
 800c5ba:	2201      	movs	r2, #1
 800c5bc:	701a      	strb	r2, [r3, #0]
  break;
 800c5be:	e000      	b.n	800c5c2 <USBH_UserProcess+0x4a>

  default:
  break;
 800c5c0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c5c2:	bf00      	nop
 800c5c4:	370c      	adds	r7, #12
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5cc:	4770      	bx	lr
 800c5ce:	bf00      	nop
 800c5d0:	20003238 	.word	0x20003238

0800c5d4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b08a      	sub	sp, #40	; 0x28
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c5dc:	f107 0314 	add.w	r3, r7, #20
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	601a      	str	r2, [r3, #0]
 800c5e4:	605a      	str	r2, [r3, #4]
 800c5e6:	609a      	str	r2, [r3, #8]
 800c5e8:	60da      	str	r2, [r3, #12]
 800c5ea:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c5f4:	d147      	bne.n	800c686 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	613b      	str	r3, [r7, #16]
 800c5fa:	4b25      	ldr	r3, [pc, #148]	; (800c690 <HAL_HCD_MspInit+0xbc>)
 800c5fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5fe:	4a24      	ldr	r2, [pc, #144]	; (800c690 <HAL_HCD_MspInit+0xbc>)
 800c600:	f043 0301 	orr.w	r3, r3, #1
 800c604:	6313      	str	r3, [r2, #48]	; 0x30
 800c606:	4b22      	ldr	r3, [pc, #136]	; (800c690 <HAL_HCD_MspInit+0xbc>)
 800c608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c60a:	f003 0301 	and.w	r3, r3, #1
 800c60e:	613b      	str	r3, [r7, #16]
 800c610:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c612:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c618:	2300      	movs	r3, #0
 800c61a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c61c:	2300      	movs	r3, #0
 800c61e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c620:	f107 0314 	add.w	r3, r7, #20
 800c624:	4619      	mov	r1, r3
 800c626:	481b      	ldr	r0, [pc, #108]	; (800c694 <HAL_HCD_MspInit+0xc0>)
 800c628:	f7f6 f9ce 	bl	80029c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c62c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c632:	2302      	movs	r3, #2
 800c634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c636:	2300      	movs	r3, #0
 800c638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c63a:	2303      	movs	r3, #3
 800c63c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c63e:	230a      	movs	r3, #10
 800c640:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c642:	f107 0314 	add.w	r3, r7, #20
 800c646:	4619      	mov	r1, r3
 800c648:	4812      	ldr	r0, [pc, #72]	; (800c694 <HAL_HCD_MspInit+0xc0>)
 800c64a:	f7f6 f9bd 	bl	80029c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c64e:	4b10      	ldr	r3, [pc, #64]	; (800c690 <HAL_HCD_MspInit+0xbc>)
 800c650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c652:	4a0f      	ldr	r2, [pc, #60]	; (800c690 <HAL_HCD_MspInit+0xbc>)
 800c654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c658:	6353      	str	r3, [r2, #52]	; 0x34
 800c65a:	2300      	movs	r3, #0
 800c65c:	60fb      	str	r3, [r7, #12]
 800c65e:	4b0c      	ldr	r3, [pc, #48]	; (800c690 <HAL_HCD_MspInit+0xbc>)
 800c660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c662:	4a0b      	ldr	r2, [pc, #44]	; (800c690 <HAL_HCD_MspInit+0xbc>)
 800c664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c668:	6453      	str	r3, [r2, #68]	; 0x44
 800c66a:	4b09      	ldr	r3, [pc, #36]	; (800c690 <HAL_HCD_MspInit+0xbc>)
 800c66c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c66e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c672:	60fb      	str	r3, [r7, #12]
 800c674:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c676:	2200      	movs	r2, #0
 800c678:	2100      	movs	r1, #0
 800c67a:	2043      	movs	r0, #67	; 0x43
 800c67c:	f7f5 fd9f 	bl	80021be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c680:	2043      	movs	r0, #67	; 0x43
 800c682:	f7f5 fdb8 	bl	80021f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c686:	bf00      	nop
 800c688:	3728      	adds	r7, #40	; 0x28
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}
 800c68e:	bf00      	nop
 800c690:	40023800 	.word	0x40023800
 800c694:	40020000 	.word	0x40020000

0800c698 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b082      	sub	sp, #8
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7fe fac1 	bl	800ac2e <USBH_LL_IncTimer>
}
 800c6ac:	bf00      	nop
 800c6ae:	3708      	adds	r7, #8
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}

0800c6b4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b082      	sub	sp, #8
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f7fe faf9 	bl	800acba <USBH_LL_Connect>
}
 800c6c8:	bf00      	nop
 800c6ca:	3708      	adds	r7, #8
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}

0800c6d0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b082      	sub	sp, #8
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f7fe fb02 	bl	800ace8 <USBH_LL_Disconnect>
}
 800c6e4:	bf00      	nop
 800c6e6:	3708      	adds	r7, #8
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}

0800c6ec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b083      	sub	sp, #12
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	460b      	mov	r3, r1
 800c6f6:	70fb      	strb	r3, [r7, #3]
 800c6f8:	4613      	mov	r3, r2
 800c6fa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c6fc:	bf00      	nop
 800c6fe:	370c      	adds	r7, #12
 800c700:	46bd      	mov	sp, r7
 800c702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c706:	4770      	bx	lr

0800c708 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b082      	sub	sp, #8
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c716:	4618      	mov	r0, r3
 800c718:	f7fe fab3 	bl	800ac82 <USBH_LL_PortEnabled>
}
 800c71c:	bf00      	nop
 800c71e:	3708      	adds	r7, #8
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}

0800c724 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b082      	sub	sp, #8
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c732:	4618      	mov	r0, r3
 800c734:	f7fe fab3 	bl	800ac9e <USBH_LL_PortDisabled>
}
 800c738:	bf00      	nop
 800c73a:	3708      	adds	r7, #8
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}

0800c740 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b082      	sub	sp, #8
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c74e:	2b01      	cmp	r3, #1
 800c750:	d12a      	bne.n	800c7a8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c752:	4a18      	ldr	r2, [pc, #96]	; (800c7b4 <USBH_LL_Init+0x74>)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	4a15      	ldr	r2, [pc, #84]	; (800c7b4 <USBH_LL_Init+0x74>)
 800c75e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c762:	4b14      	ldr	r3, [pc, #80]	; (800c7b4 <USBH_LL_Init+0x74>)
 800c764:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c768:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c76a:	4b12      	ldr	r3, [pc, #72]	; (800c7b4 <USBH_LL_Init+0x74>)
 800c76c:	2208      	movs	r2, #8
 800c76e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c770:	4b10      	ldr	r3, [pc, #64]	; (800c7b4 <USBH_LL_Init+0x74>)
 800c772:	2201      	movs	r2, #1
 800c774:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c776:	4b0f      	ldr	r3, [pc, #60]	; (800c7b4 <USBH_LL_Init+0x74>)
 800c778:	2200      	movs	r2, #0
 800c77a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c77c:	4b0d      	ldr	r3, [pc, #52]	; (800c7b4 <USBH_LL_Init+0x74>)
 800c77e:	2202      	movs	r2, #2
 800c780:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c782:	4b0c      	ldr	r3, [pc, #48]	; (800c7b4 <USBH_LL_Init+0x74>)
 800c784:	2200      	movs	r2, #0
 800c786:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c788:	480a      	ldr	r0, [pc, #40]	; (800c7b4 <USBH_LL_Init+0x74>)
 800c78a:	f7f6 fbce 	bl	8002f2a <HAL_HCD_Init>
 800c78e:	4603      	mov	r3, r0
 800c790:	2b00      	cmp	r3, #0
 800c792:	d001      	beq.n	800c798 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c794:	f7f5 f8ba 	bl	800190c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c798:	4806      	ldr	r0, [pc, #24]	; (800c7b4 <USBH_LL_Init+0x74>)
 800c79a:	f7f6 ffb2 	bl	8003702 <HAL_HCD_GetCurrentFrame>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	4619      	mov	r1, r3
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f7fe fa34 	bl	800ac10 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c7a8:	2300      	movs	r3, #0
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	3708      	adds	r7, #8
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}
 800c7b2:	bf00      	nop
 800c7b4:	2000323c 	.word	0x2000323c

0800c7b8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b084      	sub	sp, #16
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7f6 ff21 	bl	8003616 <HAL_HCD_Start>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c7d8:	7bfb      	ldrb	r3, [r7, #15]
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f000 f98c 	bl	800caf8 <USBH_Get_USB_Status>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3710      	adds	r7, #16
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}

0800c7ee <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c7ee:	b580      	push	{r7, lr}
 800c7f0:	b084      	sub	sp, #16
 800c7f2:	af00      	add	r7, sp, #0
 800c7f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c804:	4618      	mov	r0, r3
 800c806:	f7f6 ff29 	bl	800365c <HAL_HCD_Stop>
 800c80a:	4603      	mov	r3, r0
 800c80c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c80e:	7bfb      	ldrb	r3, [r7, #15]
 800c810:	4618      	mov	r0, r3
 800c812:	f000 f971 	bl	800caf8 <USBH_Get_USB_Status>
 800c816:	4603      	mov	r3, r0
 800c818:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c81a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3710      	adds	r7, #16
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}

0800c824 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b084      	sub	sp, #16
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c82c:	2301      	movs	r3, #1
 800c82e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c836:	4618      	mov	r0, r3
 800c838:	f7f6 ff71 	bl	800371e <HAL_HCD_GetCurrentSpeed>
 800c83c:	4603      	mov	r3, r0
 800c83e:	2b02      	cmp	r3, #2
 800c840:	d00c      	beq.n	800c85c <USBH_LL_GetSpeed+0x38>
 800c842:	2b02      	cmp	r3, #2
 800c844:	d80d      	bhi.n	800c862 <USBH_LL_GetSpeed+0x3e>
 800c846:	2b00      	cmp	r3, #0
 800c848:	d002      	beq.n	800c850 <USBH_LL_GetSpeed+0x2c>
 800c84a:	2b01      	cmp	r3, #1
 800c84c:	d003      	beq.n	800c856 <USBH_LL_GetSpeed+0x32>
 800c84e:	e008      	b.n	800c862 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c850:	2300      	movs	r3, #0
 800c852:	73fb      	strb	r3, [r7, #15]
    break;
 800c854:	e008      	b.n	800c868 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c856:	2301      	movs	r3, #1
 800c858:	73fb      	strb	r3, [r7, #15]
    break;
 800c85a:	e005      	b.n	800c868 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c85c:	2302      	movs	r3, #2
 800c85e:	73fb      	strb	r3, [r7, #15]
    break;
 800c860:	e002      	b.n	800c868 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c862:	2301      	movs	r3, #1
 800c864:	73fb      	strb	r3, [r7, #15]
    break;
 800c866:	bf00      	nop
  }
  return  speed;
 800c868:	7bfb      	ldrb	r3, [r7, #15]
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	3710      	adds	r7, #16
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}

0800c872 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c872:	b580      	push	{r7, lr}
 800c874:	b084      	sub	sp, #16
 800c876:	af00      	add	r7, sp, #0
 800c878:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c87a:	2300      	movs	r3, #0
 800c87c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c87e:	2300      	movs	r3, #0
 800c880:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c888:	4618      	mov	r0, r3
 800c88a:	f7f6 ff04 	bl	8003696 <HAL_HCD_ResetPort>
 800c88e:	4603      	mov	r3, r0
 800c890:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c892:	7bfb      	ldrb	r3, [r7, #15]
 800c894:	4618      	mov	r0, r3
 800c896:	f000 f92f 	bl	800caf8 <USBH_Get_USB_Status>
 800c89a:	4603      	mov	r3, r0
 800c89c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c89e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3710      	adds	r7, #16
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}

0800c8a8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b082      	sub	sp, #8
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	460b      	mov	r3, r1
 800c8b2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c8ba:	78fa      	ldrb	r2, [r7, #3]
 800c8bc:	4611      	mov	r1, r2
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7f6 ff0b 	bl	80036da <HAL_HCD_HC_GetXferCount>
 800c8c4:	4603      	mov	r3, r0
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3708      	adds	r7, #8
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}

0800c8ce <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c8ce:	b590      	push	{r4, r7, lr}
 800c8d0:	b089      	sub	sp, #36	; 0x24
 800c8d2:	af04      	add	r7, sp, #16
 800c8d4:	6078      	str	r0, [r7, #4]
 800c8d6:	4608      	mov	r0, r1
 800c8d8:	4611      	mov	r1, r2
 800c8da:	461a      	mov	r2, r3
 800c8dc:	4603      	mov	r3, r0
 800c8de:	70fb      	strb	r3, [r7, #3]
 800c8e0:	460b      	mov	r3, r1
 800c8e2:	70bb      	strb	r3, [r7, #2]
 800c8e4:	4613      	mov	r3, r2
 800c8e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c8f6:	787c      	ldrb	r4, [r7, #1]
 800c8f8:	78ba      	ldrb	r2, [r7, #2]
 800c8fa:	78f9      	ldrb	r1, [r7, #3]
 800c8fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c8fe:	9302      	str	r3, [sp, #8]
 800c900:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c904:	9301      	str	r3, [sp, #4]
 800c906:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c90a:	9300      	str	r3, [sp, #0]
 800c90c:	4623      	mov	r3, r4
 800c90e:	f7f6 fb6e 	bl	8002fee <HAL_HCD_HC_Init>
 800c912:	4603      	mov	r3, r0
 800c914:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c916:	7bfb      	ldrb	r3, [r7, #15]
 800c918:	4618      	mov	r0, r3
 800c91a:	f000 f8ed 	bl	800caf8 <USBH_Get_USB_Status>
 800c91e:	4603      	mov	r3, r0
 800c920:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c922:	7bbb      	ldrb	r3, [r7, #14]
}
 800c924:	4618      	mov	r0, r3
 800c926:	3714      	adds	r7, #20
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd90      	pop	{r4, r7, pc}

0800c92c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b084      	sub	sp, #16
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
 800c934:	460b      	mov	r3, r1
 800c936:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c938:	2300      	movs	r3, #0
 800c93a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c93c:	2300      	movs	r3, #0
 800c93e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c946:	78fa      	ldrb	r2, [r7, #3]
 800c948:	4611      	mov	r1, r2
 800c94a:	4618      	mov	r0, r3
 800c94c:	f7f6 fbde 	bl	800310c <HAL_HCD_HC_Halt>
 800c950:	4603      	mov	r3, r0
 800c952:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c954:	7bfb      	ldrb	r3, [r7, #15]
 800c956:	4618      	mov	r0, r3
 800c958:	f000 f8ce 	bl	800caf8 <USBH_Get_USB_Status>
 800c95c:	4603      	mov	r3, r0
 800c95e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c960:	7bbb      	ldrb	r3, [r7, #14]
}
 800c962:	4618      	mov	r0, r3
 800c964:	3710      	adds	r7, #16
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}

0800c96a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c96a:	b590      	push	{r4, r7, lr}
 800c96c:	b089      	sub	sp, #36	; 0x24
 800c96e:	af04      	add	r7, sp, #16
 800c970:	6078      	str	r0, [r7, #4]
 800c972:	4608      	mov	r0, r1
 800c974:	4611      	mov	r1, r2
 800c976:	461a      	mov	r2, r3
 800c978:	4603      	mov	r3, r0
 800c97a:	70fb      	strb	r3, [r7, #3]
 800c97c:	460b      	mov	r3, r1
 800c97e:	70bb      	strb	r3, [r7, #2]
 800c980:	4613      	mov	r3, r2
 800c982:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c984:	2300      	movs	r3, #0
 800c986:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c988:	2300      	movs	r3, #0
 800c98a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c992:	787c      	ldrb	r4, [r7, #1]
 800c994:	78ba      	ldrb	r2, [r7, #2]
 800c996:	78f9      	ldrb	r1, [r7, #3]
 800c998:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c99c:	9303      	str	r3, [sp, #12]
 800c99e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c9a0:	9302      	str	r3, [sp, #8]
 800c9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a4:	9301      	str	r3, [sp, #4]
 800c9a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c9aa:	9300      	str	r3, [sp, #0]
 800c9ac:	4623      	mov	r3, r4
 800c9ae:	f7f6 fbd1 	bl	8003154 <HAL_HCD_HC_SubmitRequest>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c9b6:	7bfb      	ldrb	r3, [r7, #15]
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f000 f89d 	bl	800caf8 <USBH_Get_USB_Status>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3714      	adds	r7, #20
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd90      	pop	{r4, r7, pc}

0800c9cc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b082      	sub	sp, #8
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	460b      	mov	r3, r1
 800c9d6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c9de:	78fa      	ldrb	r2, [r7, #3]
 800c9e0:	4611      	mov	r1, r2
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f7f6 fe65 	bl	80036b2 <HAL_HCD_HC_GetURBState>
 800c9e8:	4603      	mov	r3, r0
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3708      	adds	r7, #8
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}

0800c9f2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c9f2:	b580      	push	{r7, lr}
 800c9f4:	b082      	sub	sp, #8
 800c9f6:	af00      	add	r7, sp, #0
 800c9f8:	6078      	str	r0, [r7, #4]
 800c9fa:	460b      	mov	r3, r1
 800c9fc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ca04:	2b01      	cmp	r3, #1
 800ca06:	d103      	bne.n	800ca10 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ca08:	78fb      	ldrb	r3, [r7, #3]
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f000 f8a0 	bl	800cb50 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ca10:	20c8      	movs	r0, #200	; 0xc8
 800ca12:	f7f5 fad5 	bl	8001fc0 <HAL_Delay>
  return USBH_OK;
 800ca16:	2300      	movs	r3, #0
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3708      	adds	r7, #8
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b085      	sub	sp, #20
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
 800ca28:	460b      	mov	r3, r1
 800ca2a:	70fb      	strb	r3, [r7, #3]
 800ca2c:	4613      	mov	r3, r2
 800ca2e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ca36:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ca38:	78fb      	ldrb	r3, [r7, #3]
 800ca3a:	68fa      	ldr	r2, [r7, #12]
 800ca3c:	212c      	movs	r1, #44	; 0x2c
 800ca3e:	fb01 f303 	mul.w	r3, r1, r3
 800ca42:	4413      	add	r3, r2
 800ca44:	333b      	adds	r3, #59	; 0x3b
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d009      	beq.n	800ca60 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ca4c:	78fb      	ldrb	r3, [r7, #3]
 800ca4e:	68fa      	ldr	r2, [r7, #12]
 800ca50:	212c      	movs	r1, #44	; 0x2c
 800ca52:	fb01 f303 	mul.w	r3, r1, r3
 800ca56:	4413      	add	r3, r2
 800ca58:	3354      	adds	r3, #84	; 0x54
 800ca5a:	78ba      	ldrb	r2, [r7, #2]
 800ca5c:	701a      	strb	r2, [r3, #0]
 800ca5e:	e008      	b.n	800ca72 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ca60:	78fb      	ldrb	r3, [r7, #3]
 800ca62:	68fa      	ldr	r2, [r7, #12]
 800ca64:	212c      	movs	r1, #44	; 0x2c
 800ca66:	fb01 f303 	mul.w	r3, r1, r3
 800ca6a:	4413      	add	r3, r2
 800ca6c:	3355      	adds	r3, #85	; 0x55
 800ca6e:	78ba      	ldrb	r2, [r7, #2]
 800ca70:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ca72:	2300      	movs	r3, #0
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3714      	adds	r7, #20
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr

0800ca80 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b085      	sub	sp, #20
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	460b      	mov	r3, r1
 800ca8a:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ca96:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800ca98:	78fb      	ldrb	r3, [r7, #3]
 800ca9a:	68ba      	ldr	r2, [r7, #8]
 800ca9c:	212c      	movs	r1, #44	; 0x2c
 800ca9e:	fb01 f303 	mul.w	r3, r1, r3
 800caa2:	4413      	add	r3, r2
 800caa4:	333b      	adds	r3, #59	; 0x3b
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d009      	beq.n	800cac0 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800caac:	78fb      	ldrb	r3, [r7, #3]
 800caae:	68ba      	ldr	r2, [r7, #8]
 800cab0:	212c      	movs	r1, #44	; 0x2c
 800cab2:	fb01 f303 	mul.w	r3, r1, r3
 800cab6:	4413      	add	r3, r2
 800cab8:	3354      	adds	r3, #84	; 0x54
 800caba:	781b      	ldrb	r3, [r3, #0]
 800cabc:	73fb      	strb	r3, [r7, #15]
 800cabe:	e008      	b.n	800cad2 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800cac0:	78fb      	ldrb	r3, [r7, #3]
 800cac2:	68ba      	ldr	r2, [r7, #8]
 800cac4:	212c      	movs	r1, #44	; 0x2c
 800cac6:	fb01 f303 	mul.w	r3, r1, r3
 800caca:	4413      	add	r3, r2
 800cacc:	3355      	adds	r3, #85	; 0x55
 800cace:	781b      	ldrb	r3, [r3, #0]
 800cad0:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800cad2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3714      	adds	r7, #20
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr

0800cae0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b082      	sub	sp, #8
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f7f5 fa69 	bl	8001fc0 <HAL_Delay>
}
 800caee:	bf00      	nop
 800caf0:	3708      	adds	r7, #8
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
	...

0800caf8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800caf8:	b480      	push	{r7}
 800cafa:	b085      	sub	sp, #20
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	4603      	mov	r3, r0
 800cb00:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cb02:	2300      	movs	r3, #0
 800cb04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cb06:	79fb      	ldrb	r3, [r7, #7]
 800cb08:	2b03      	cmp	r3, #3
 800cb0a:	d817      	bhi.n	800cb3c <USBH_Get_USB_Status+0x44>
 800cb0c:	a201      	add	r2, pc, #4	; (adr r2, 800cb14 <USBH_Get_USB_Status+0x1c>)
 800cb0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb12:	bf00      	nop
 800cb14:	0800cb25 	.word	0x0800cb25
 800cb18:	0800cb2b 	.word	0x0800cb2b
 800cb1c:	0800cb31 	.word	0x0800cb31
 800cb20:	0800cb37 	.word	0x0800cb37
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800cb24:	2300      	movs	r3, #0
 800cb26:	73fb      	strb	r3, [r7, #15]
    break;
 800cb28:	e00b      	b.n	800cb42 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800cb2a:	2302      	movs	r3, #2
 800cb2c:	73fb      	strb	r3, [r7, #15]
    break;
 800cb2e:	e008      	b.n	800cb42 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800cb30:	2301      	movs	r3, #1
 800cb32:	73fb      	strb	r3, [r7, #15]
    break;
 800cb34:	e005      	b.n	800cb42 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800cb36:	2302      	movs	r3, #2
 800cb38:	73fb      	strb	r3, [r7, #15]
    break;
 800cb3a:	e002      	b.n	800cb42 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800cb3c:	2302      	movs	r3, #2
 800cb3e:	73fb      	strb	r3, [r7, #15]
    break;
 800cb40:	bf00      	nop
  }
  return usb_status;
 800cb42:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3714      	adds	r7, #20
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4e:	4770      	bx	lr

0800cb50 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b084      	sub	sp, #16
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	4603      	mov	r3, r0
 800cb58:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800cb5a:	79fb      	ldrb	r3, [r7, #7]
 800cb5c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800cb5e:	79fb      	ldrb	r3, [r7, #7]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d102      	bne.n	800cb6a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800cb64:	2300      	movs	r3, #0
 800cb66:	73fb      	strb	r3, [r7, #15]
 800cb68:	e001      	b.n	800cb6e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 800cb6e:	7bfb      	ldrb	r3, [r7, #15]
 800cb70:	461a      	mov	r2, r3
 800cb72:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cb76:	4803      	ldr	r0, [pc, #12]	; (800cb84 <MX_DriverVbusFS+0x34>)
 800cb78:	f7f6 f9be 	bl	8002ef8 <HAL_GPIO_WritePin>
}
 800cb7c:	bf00      	nop
 800cb7e:	3710      	adds	r7, #16
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}
 800cb84:	40020800 	.word	0x40020800

0800cb88 <__errno>:
 800cb88:	4b01      	ldr	r3, [pc, #4]	; (800cb90 <__errno+0x8>)
 800cb8a:	6818      	ldr	r0, [r3, #0]
 800cb8c:	4770      	bx	lr
 800cb8e:	bf00      	nop
 800cb90:	20000064 	.word	0x20000064

0800cb94 <__libc_init_array>:
 800cb94:	b570      	push	{r4, r5, r6, lr}
 800cb96:	4d0d      	ldr	r5, [pc, #52]	; (800cbcc <__libc_init_array+0x38>)
 800cb98:	4c0d      	ldr	r4, [pc, #52]	; (800cbd0 <__libc_init_array+0x3c>)
 800cb9a:	1b64      	subs	r4, r4, r5
 800cb9c:	10a4      	asrs	r4, r4, #2
 800cb9e:	2600      	movs	r6, #0
 800cba0:	42a6      	cmp	r6, r4
 800cba2:	d109      	bne.n	800cbb8 <__libc_init_array+0x24>
 800cba4:	4d0b      	ldr	r5, [pc, #44]	; (800cbd4 <__libc_init_array+0x40>)
 800cba6:	4c0c      	ldr	r4, [pc, #48]	; (800cbd8 <__libc_init_array+0x44>)
 800cba8:	f000 f93c 	bl	800ce24 <_init>
 800cbac:	1b64      	subs	r4, r4, r5
 800cbae:	10a4      	asrs	r4, r4, #2
 800cbb0:	2600      	movs	r6, #0
 800cbb2:	42a6      	cmp	r6, r4
 800cbb4:	d105      	bne.n	800cbc2 <__libc_init_array+0x2e>
 800cbb6:	bd70      	pop	{r4, r5, r6, pc}
 800cbb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbbc:	4798      	blx	r3
 800cbbe:	3601      	adds	r6, #1
 800cbc0:	e7ee      	b.n	800cba0 <__libc_init_array+0xc>
 800cbc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbc6:	4798      	blx	r3
 800cbc8:	3601      	adds	r6, #1
 800cbca:	e7f2      	b.n	800cbb2 <__libc_init_array+0x1e>
 800cbcc:	0800d0dc 	.word	0x0800d0dc
 800cbd0:	0800d0dc 	.word	0x0800d0dc
 800cbd4:	0800d0dc 	.word	0x0800d0dc
 800cbd8:	0800d0e0 	.word	0x0800d0e0

0800cbdc <malloc>:
 800cbdc:	4b02      	ldr	r3, [pc, #8]	; (800cbe8 <malloc+0xc>)
 800cbde:	4601      	mov	r1, r0
 800cbe0:	6818      	ldr	r0, [r3, #0]
 800cbe2:	f000 b88d 	b.w	800cd00 <_malloc_r>
 800cbe6:	bf00      	nop
 800cbe8:	20000064 	.word	0x20000064

0800cbec <free>:
 800cbec:	4b02      	ldr	r3, [pc, #8]	; (800cbf8 <free+0xc>)
 800cbee:	4601      	mov	r1, r0
 800cbf0:	6818      	ldr	r0, [r3, #0]
 800cbf2:	f000 b819 	b.w	800cc28 <_free_r>
 800cbf6:	bf00      	nop
 800cbf8:	20000064 	.word	0x20000064

0800cbfc <memcpy>:
 800cbfc:	440a      	add	r2, r1
 800cbfe:	4291      	cmp	r1, r2
 800cc00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cc04:	d100      	bne.n	800cc08 <memcpy+0xc>
 800cc06:	4770      	bx	lr
 800cc08:	b510      	push	{r4, lr}
 800cc0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc12:	4291      	cmp	r1, r2
 800cc14:	d1f9      	bne.n	800cc0a <memcpy+0xe>
 800cc16:	bd10      	pop	{r4, pc}

0800cc18 <memset>:
 800cc18:	4402      	add	r2, r0
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d100      	bne.n	800cc22 <memset+0xa>
 800cc20:	4770      	bx	lr
 800cc22:	f803 1b01 	strb.w	r1, [r3], #1
 800cc26:	e7f9      	b.n	800cc1c <memset+0x4>

0800cc28 <_free_r>:
 800cc28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc2a:	2900      	cmp	r1, #0
 800cc2c:	d044      	beq.n	800ccb8 <_free_r+0x90>
 800cc2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc32:	9001      	str	r0, [sp, #4]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	f1a1 0404 	sub.w	r4, r1, #4
 800cc3a:	bfb8      	it	lt
 800cc3c:	18e4      	addlt	r4, r4, r3
 800cc3e:	f000 f8e3 	bl	800ce08 <__malloc_lock>
 800cc42:	4a1e      	ldr	r2, [pc, #120]	; (800ccbc <_free_r+0x94>)
 800cc44:	9801      	ldr	r0, [sp, #4]
 800cc46:	6813      	ldr	r3, [r2, #0]
 800cc48:	b933      	cbnz	r3, 800cc58 <_free_r+0x30>
 800cc4a:	6063      	str	r3, [r4, #4]
 800cc4c:	6014      	str	r4, [r2, #0]
 800cc4e:	b003      	add	sp, #12
 800cc50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc54:	f000 b8de 	b.w	800ce14 <__malloc_unlock>
 800cc58:	42a3      	cmp	r3, r4
 800cc5a:	d908      	bls.n	800cc6e <_free_r+0x46>
 800cc5c:	6825      	ldr	r5, [r4, #0]
 800cc5e:	1961      	adds	r1, r4, r5
 800cc60:	428b      	cmp	r3, r1
 800cc62:	bf01      	itttt	eq
 800cc64:	6819      	ldreq	r1, [r3, #0]
 800cc66:	685b      	ldreq	r3, [r3, #4]
 800cc68:	1949      	addeq	r1, r1, r5
 800cc6a:	6021      	streq	r1, [r4, #0]
 800cc6c:	e7ed      	b.n	800cc4a <_free_r+0x22>
 800cc6e:	461a      	mov	r2, r3
 800cc70:	685b      	ldr	r3, [r3, #4]
 800cc72:	b10b      	cbz	r3, 800cc78 <_free_r+0x50>
 800cc74:	42a3      	cmp	r3, r4
 800cc76:	d9fa      	bls.n	800cc6e <_free_r+0x46>
 800cc78:	6811      	ldr	r1, [r2, #0]
 800cc7a:	1855      	adds	r5, r2, r1
 800cc7c:	42a5      	cmp	r5, r4
 800cc7e:	d10b      	bne.n	800cc98 <_free_r+0x70>
 800cc80:	6824      	ldr	r4, [r4, #0]
 800cc82:	4421      	add	r1, r4
 800cc84:	1854      	adds	r4, r2, r1
 800cc86:	42a3      	cmp	r3, r4
 800cc88:	6011      	str	r1, [r2, #0]
 800cc8a:	d1e0      	bne.n	800cc4e <_free_r+0x26>
 800cc8c:	681c      	ldr	r4, [r3, #0]
 800cc8e:	685b      	ldr	r3, [r3, #4]
 800cc90:	6053      	str	r3, [r2, #4]
 800cc92:	4421      	add	r1, r4
 800cc94:	6011      	str	r1, [r2, #0]
 800cc96:	e7da      	b.n	800cc4e <_free_r+0x26>
 800cc98:	d902      	bls.n	800cca0 <_free_r+0x78>
 800cc9a:	230c      	movs	r3, #12
 800cc9c:	6003      	str	r3, [r0, #0]
 800cc9e:	e7d6      	b.n	800cc4e <_free_r+0x26>
 800cca0:	6825      	ldr	r5, [r4, #0]
 800cca2:	1961      	adds	r1, r4, r5
 800cca4:	428b      	cmp	r3, r1
 800cca6:	bf04      	itt	eq
 800cca8:	6819      	ldreq	r1, [r3, #0]
 800ccaa:	685b      	ldreq	r3, [r3, #4]
 800ccac:	6063      	str	r3, [r4, #4]
 800ccae:	bf04      	itt	eq
 800ccb0:	1949      	addeq	r1, r1, r5
 800ccb2:	6021      	streq	r1, [r4, #0]
 800ccb4:	6054      	str	r4, [r2, #4]
 800ccb6:	e7ca      	b.n	800cc4e <_free_r+0x26>
 800ccb8:	b003      	add	sp, #12
 800ccba:	bd30      	pop	{r4, r5, pc}
 800ccbc:	20003540 	.word	0x20003540

0800ccc0 <sbrk_aligned>:
 800ccc0:	b570      	push	{r4, r5, r6, lr}
 800ccc2:	4e0e      	ldr	r6, [pc, #56]	; (800ccfc <sbrk_aligned+0x3c>)
 800ccc4:	460c      	mov	r4, r1
 800ccc6:	6831      	ldr	r1, [r6, #0]
 800ccc8:	4605      	mov	r5, r0
 800ccca:	b911      	cbnz	r1, 800ccd2 <sbrk_aligned+0x12>
 800cccc:	f000 f88c 	bl	800cde8 <_sbrk_r>
 800ccd0:	6030      	str	r0, [r6, #0]
 800ccd2:	4621      	mov	r1, r4
 800ccd4:	4628      	mov	r0, r5
 800ccd6:	f000 f887 	bl	800cde8 <_sbrk_r>
 800ccda:	1c43      	adds	r3, r0, #1
 800ccdc:	d00a      	beq.n	800ccf4 <sbrk_aligned+0x34>
 800ccde:	1cc4      	adds	r4, r0, #3
 800cce0:	f024 0403 	bic.w	r4, r4, #3
 800cce4:	42a0      	cmp	r0, r4
 800cce6:	d007      	beq.n	800ccf8 <sbrk_aligned+0x38>
 800cce8:	1a21      	subs	r1, r4, r0
 800ccea:	4628      	mov	r0, r5
 800ccec:	f000 f87c 	bl	800cde8 <_sbrk_r>
 800ccf0:	3001      	adds	r0, #1
 800ccf2:	d101      	bne.n	800ccf8 <sbrk_aligned+0x38>
 800ccf4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	bd70      	pop	{r4, r5, r6, pc}
 800ccfc:	20003544 	.word	0x20003544

0800cd00 <_malloc_r>:
 800cd00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd04:	1ccd      	adds	r5, r1, #3
 800cd06:	f025 0503 	bic.w	r5, r5, #3
 800cd0a:	3508      	adds	r5, #8
 800cd0c:	2d0c      	cmp	r5, #12
 800cd0e:	bf38      	it	cc
 800cd10:	250c      	movcc	r5, #12
 800cd12:	2d00      	cmp	r5, #0
 800cd14:	4607      	mov	r7, r0
 800cd16:	db01      	blt.n	800cd1c <_malloc_r+0x1c>
 800cd18:	42a9      	cmp	r1, r5
 800cd1a:	d905      	bls.n	800cd28 <_malloc_r+0x28>
 800cd1c:	230c      	movs	r3, #12
 800cd1e:	603b      	str	r3, [r7, #0]
 800cd20:	2600      	movs	r6, #0
 800cd22:	4630      	mov	r0, r6
 800cd24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd28:	4e2e      	ldr	r6, [pc, #184]	; (800cde4 <_malloc_r+0xe4>)
 800cd2a:	f000 f86d 	bl	800ce08 <__malloc_lock>
 800cd2e:	6833      	ldr	r3, [r6, #0]
 800cd30:	461c      	mov	r4, r3
 800cd32:	bb34      	cbnz	r4, 800cd82 <_malloc_r+0x82>
 800cd34:	4629      	mov	r1, r5
 800cd36:	4638      	mov	r0, r7
 800cd38:	f7ff ffc2 	bl	800ccc0 <sbrk_aligned>
 800cd3c:	1c43      	adds	r3, r0, #1
 800cd3e:	4604      	mov	r4, r0
 800cd40:	d14d      	bne.n	800cdde <_malloc_r+0xde>
 800cd42:	6834      	ldr	r4, [r6, #0]
 800cd44:	4626      	mov	r6, r4
 800cd46:	2e00      	cmp	r6, #0
 800cd48:	d140      	bne.n	800cdcc <_malloc_r+0xcc>
 800cd4a:	6823      	ldr	r3, [r4, #0]
 800cd4c:	4631      	mov	r1, r6
 800cd4e:	4638      	mov	r0, r7
 800cd50:	eb04 0803 	add.w	r8, r4, r3
 800cd54:	f000 f848 	bl	800cde8 <_sbrk_r>
 800cd58:	4580      	cmp	r8, r0
 800cd5a:	d13a      	bne.n	800cdd2 <_malloc_r+0xd2>
 800cd5c:	6821      	ldr	r1, [r4, #0]
 800cd5e:	3503      	adds	r5, #3
 800cd60:	1a6d      	subs	r5, r5, r1
 800cd62:	f025 0503 	bic.w	r5, r5, #3
 800cd66:	3508      	adds	r5, #8
 800cd68:	2d0c      	cmp	r5, #12
 800cd6a:	bf38      	it	cc
 800cd6c:	250c      	movcc	r5, #12
 800cd6e:	4629      	mov	r1, r5
 800cd70:	4638      	mov	r0, r7
 800cd72:	f7ff ffa5 	bl	800ccc0 <sbrk_aligned>
 800cd76:	3001      	adds	r0, #1
 800cd78:	d02b      	beq.n	800cdd2 <_malloc_r+0xd2>
 800cd7a:	6823      	ldr	r3, [r4, #0]
 800cd7c:	442b      	add	r3, r5
 800cd7e:	6023      	str	r3, [r4, #0]
 800cd80:	e00e      	b.n	800cda0 <_malloc_r+0xa0>
 800cd82:	6822      	ldr	r2, [r4, #0]
 800cd84:	1b52      	subs	r2, r2, r5
 800cd86:	d41e      	bmi.n	800cdc6 <_malloc_r+0xc6>
 800cd88:	2a0b      	cmp	r2, #11
 800cd8a:	d916      	bls.n	800cdba <_malloc_r+0xba>
 800cd8c:	1961      	adds	r1, r4, r5
 800cd8e:	42a3      	cmp	r3, r4
 800cd90:	6025      	str	r5, [r4, #0]
 800cd92:	bf18      	it	ne
 800cd94:	6059      	strne	r1, [r3, #4]
 800cd96:	6863      	ldr	r3, [r4, #4]
 800cd98:	bf08      	it	eq
 800cd9a:	6031      	streq	r1, [r6, #0]
 800cd9c:	5162      	str	r2, [r4, r5]
 800cd9e:	604b      	str	r3, [r1, #4]
 800cda0:	4638      	mov	r0, r7
 800cda2:	f104 060b 	add.w	r6, r4, #11
 800cda6:	f000 f835 	bl	800ce14 <__malloc_unlock>
 800cdaa:	f026 0607 	bic.w	r6, r6, #7
 800cdae:	1d23      	adds	r3, r4, #4
 800cdb0:	1af2      	subs	r2, r6, r3
 800cdb2:	d0b6      	beq.n	800cd22 <_malloc_r+0x22>
 800cdb4:	1b9b      	subs	r3, r3, r6
 800cdb6:	50a3      	str	r3, [r4, r2]
 800cdb8:	e7b3      	b.n	800cd22 <_malloc_r+0x22>
 800cdba:	6862      	ldr	r2, [r4, #4]
 800cdbc:	42a3      	cmp	r3, r4
 800cdbe:	bf0c      	ite	eq
 800cdc0:	6032      	streq	r2, [r6, #0]
 800cdc2:	605a      	strne	r2, [r3, #4]
 800cdc4:	e7ec      	b.n	800cda0 <_malloc_r+0xa0>
 800cdc6:	4623      	mov	r3, r4
 800cdc8:	6864      	ldr	r4, [r4, #4]
 800cdca:	e7b2      	b.n	800cd32 <_malloc_r+0x32>
 800cdcc:	4634      	mov	r4, r6
 800cdce:	6876      	ldr	r6, [r6, #4]
 800cdd0:	e7b9      	b.n	800cd46 <_malloc_r+0x46>
 800cdd2:	230c      	movs	r3, #12
 800cdd4:	603b      	str	r3, [r7, #0]
 800cdd6:	4638      	mov	r0, r7
 800cdd8:	f000 f81c 	bl	800ce14 <__malloc_unlock>
 800cddc:	e7a1      	b.n	800cd22 <_malloc_r+0x22>
 800cdde:	6025      	str	r5, [r4, #0]
 800cde0:	e7de      	b.n	800cda0 <_malloc_r+0xa0>
 800cde2:	bf00      	nop
 800cde4:	20003540 	.word	0x20003540

0800cde8 <_sbrk_r>:
 800cde8:	b538      	push	{r3, r4, r5, lr}
 800cdea:	4d06      	ldr	r5, [pc, #24]	; (800ce04 <_sbrk_r+0x1c>)
 800cdec:	2300      	movs	r3, #0
 800cdee:	4604      	mov	r4, r0
 800cdf0:	4608      	mov	r0, r1
 800cdf2:	602b      	str	r3, [r5, #0]
 800cdf4:	f7f4 ff9c 	bl	8001d30 <_sbrk>
 800cdf8:	1c43      	adds	r3, r0, #1
 800cdfa:	d102      	bne.n	800ce02 <_sbrk_r+0x1a>
 800cdfc:	682b      	ldr	r3, [r5, #0]
 800cdfe:	b103      	cbz	r3, 800ce02 <_sbrk_r+0x1a>
 800ce00:	6023      	str	r3, [r4, #0]
 800ce02:	bd38      	pop	{r3, r4, r5, pc}
 800ce04:	20003548 	.word	0x20003548

0800ce08 <__malloc_lock>:
 800ce08:	4801      	ldr	r0, [pc, #4]	; (800ce10 <__malloc_lock+0x8>)
 800ce0a:	f000 b809 	b.w	800ce20 <__retarget_lock_acquire_recursive>
 800ce0e:	bf00      	nop
 800ce10:	2000354c 	.word	0x2000354c

0800ce14 <__malloc_unlock>:
 800ce14:	4801      	ldr	r0, [pc, #4]	; (800ce1c <__malloc_unlock+0x8>)
 800ce16:	f000 b804 	b.w	800ce22 <__retarget_lock_release_recursive>
 800ce1a:	bf00      	nop
 800ce1c:	2000354c 	.word	0x2000354c

0800ce20 <__retarget_lock_acquire_recursive>:
 800ce20:	4770      	bx	lr

0800ce22 <__retarget_lock_release_recursive>:
 800ce22:	4770      	bx	lr

0800ce24 <_init>:
 800ce24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce26:	bf00      	nop
 800ce28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce2a:	bc08      	pop	{r3}
 800ce2c:	469e      	mov	lr, r3
 800ce2e:	4770      	bx	lr

0800ce30 <_fini>:
 800ce30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce32:	bf00      	nop
 800ce34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce36:	bc08      	pop	{r3}
 800ce38:	469e      	mov	lr, r3
 800ce3a:	4770      	bx	lr
