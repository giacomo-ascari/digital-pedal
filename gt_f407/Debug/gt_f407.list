
gt_f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d450  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  0800d5d8  0800d5d8  0001d5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d870  0800d870  000200c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d870  0800d870  0001d870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d878  0800d878  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d878  0800d878  0001d878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d87c  0800d87c  0001d87c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  0800d880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c8  2**0
                  CONTENTS
 10 .bss          00003558  200000c8  200000c8  000200c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003620  20003620  000200c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022473  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000533c  00000000  00000000  0004256b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001770  00000000  00000000  000478a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001570  00000000  00000000  00049018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027683  00000000  00000000  0004a588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023b90  00000000  00000000  00071c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ceda5  00000000  00000000  0009579b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00164540  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000061fc  00000000  00000000  00164590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000c8 	.word	0x200000c8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d5c0 	.word	0x0800d5c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000cc 	.word	0x200000cc
 80001c4:	0800d5c0 	.word	0x0800d5c0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	603a      	str	r2, [r7, #0]
 80004d6:	80fb      	strh	r3, [r7, #6]
 80004d8:	460b      	mov	r3, r1
 80004da:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 80004dc:	2300      	movs	r3, #0
 80004de:	73fb      	strb	r3, [r7, #15]
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 80004e0:	2200      	movs	r2, #0
 80004e2:	6839      	ldr	r1, [r7, #0]
 80004e4:	481c      	ldr	r0, [pc, #112]	; (8000558 <AUDIO_OUT_Init+0x8c>)
 80004e6:	f000 f863 	bl	80005b0 <AUDIO_OUT_ClockConfig>
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  hAudioOutI2s.Instance = I2S3;
 80004ea:	4b1b      	ldr	r3, [pc, #108]	; (8000558 <AUDIO_OUT_Init+0x8c>)
 80004ec:	4a1b      	ldr	r2, [pc, #108]	; (800055c <AUDIO_OUT_Init+0x90>)
 80004ee:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 80004f0:	4819      	ldr	r0, [pc, #100]	; (8000558 <AUDIO_OUT_Init+0x8c>)
 80004f2:	f005 fdb3 	bl	800605c <HAL_I2S_GetState>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d103      	bne.n	8000504 <AUDIO_OUT_Init+0x38>
  {
    /* Init the I2S MSP: this __weak function can be redefined by the application*/
    AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 80004fc:	2100      	movs	r1, #0
 80004fe:	4816      	ldr	r0, [pc, #88]	; (8000558 <AUDIO_OUT_Init+0x8c>)
 8000500:	f000 f8b0 	bl	8000664 <AUDIO_OUT_MspInit>
  }

  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  /* Configure the I2S peripheral */
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 8000504:	6838      	ldr	r0, [r7, #0]
 8000506:	f000 f985 	bl	8000814 <I2S3_Init>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 8000510:	2301      	movs	r3, #1
 8000512:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 8000514:	7bfb      	ldrb	r3, [r7, #15]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d10e      	bne.n	8000538 <AUDIO_OUT_Init+0x6c>
  {
    /* Retieve audio codec identifier */
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 800051a:	4b11      	ldr	r3, [pc, #68]	; (8000560 <AUDIO_OUT_Init+0x94>)
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	2094      	movs	r0, #148	; 0x94
 8000520:	4798      	blx	r3
 8000522:	4603      	mov	r3, r0
 8000524:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8000528:	2be0      	cmp	r3, #224	; 0xe0
 800052a:	d103      	bne.n	8000534 <AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv; 
 800052c:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <AUDIO_OUT_Init+0x98>)
 800052e:	4a0c      	ldr	r2, [pc, #48]	; (8000560 <AUDIO_OUT_Init+0x94>)
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	e001      	b.n	8000538 <AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 8000534:	2301      	movs	r3, #1
 8000536:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 8000538:	7bfb      	ldrb	r3, [r7, #15]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d107      	bne.n	800054e <AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <AUDIO_OUT_Init+0x98>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	681c      	ldr	r4, [r3, #0]
 8000544:	797a      	ldrb	r2, [r7, #5]
 8000546:	88f9      	ldrh	r1, [r7, #6]
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	2094      	movs	r0, #148	; 0x94
 800054c:	47a0      	blx	r4
  }
  
  return ret;
 800054e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000550:	4618      	mov	r0, r3
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	bd90      	pop	{r4, r7, pc}
 8000558:	200000e8 	.word	0x200000e8
 800055c:	40003c00 	.word	0x40003c00
 8000560:	20000004 	.word	0x20000004
 8000564:	200000e4 	.word	0x200000e4

08000568 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a04      	ldr	r2, [pc, #16]	; (8000588 <HAL_I2S_TxCpltCallback+0x20>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d101      	bne.n	800057e <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    AUDIO_OUT_TransferComplete_CallBack();
 800057a:	f000 f935 	bl	80007e8 <AUDIO_OUT_TransferComplete_CallBack>
  }
}
 800057e:	bf00      	nop
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40003c00 	.word	0x40003c00

0800058c <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a04      	ldr	r2, [pc, #16]	; (80005ac <HAL_I2S_TxHalfCpltCallback+0x20>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d101      	bne.n	80005a2 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    AUDIO_OUT_HalfTransfer_CallBack();
 800059e:	f000 f92a 	bl	80007f6 <AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40003c00 	.word	0x40003c00

080005b0 <AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	; 0x28
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 80005bc:	2300      	movs	r3, #0
 80005be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80005c2:	23ff      	movs	r3, #255	; 0xff
 80005c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
  for(index = 0; index < 8; index++)
 80005c8:	2300      	movs	r3, #0
 80005ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80005ce:	e010      	b.n	80005f2 <AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 80005d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005d4:	4a20      	ldr	r2, [pc, #128]	; (8000658 <AUDIO_OUT_ClockConfig+0xa8>)
 80005d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d103      	bne.n	80005e8 <AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 80005e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  for(index = 0; index < 8; index++)
 80005e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005ec:	3301      	adds	r3, #1
 80005ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80005f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005f6:	2b07      	cmp	r3, #7
 80005f8:	d9ea      	bls.n	80005d0 <AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4618      	mov	r0, r3
 8000600:	f006 fe7a 	bl	80072f8 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8000604:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000608:	f003 0307 	and.w	r3, r3, #7
 800060c:	2b00      	cmp	r3, #0
 800060e:	d113      	bne.n	8000638 <AUDIO_OUT_ClockConfig+0x88>
  {
    /* I2S clock config 
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000610:	2301      	movs	r3, #1
 8000612:	617b      	str	r3, [r7, #20]
//    rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8000614:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000618:	4a10      	ldr	r2, [pc, #64]	; (800065c <AUDIO_OUT_ClockConfig+0xac>)
 800061a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800061e:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8000620:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000624:	4a0e      	ldr	r2, [pc, #56]	; (8000660 <AUDIO_OUT_ClockConfig+0xb0>)
 8000626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800062a:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4618      	mov	r0, r3
 8000632:	f006 fd7f 	bl	8007134 <HAL_RCCEx_PeriphCLKConfig>
//    rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 8000636:	e00b      	b.n	8000650 <AUDIO_OUT_ClockConfig+0xa0>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000638:	2301      	movs	r3, #1
 800063a:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 800063c:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000640:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8000642:	2303      	movs	r3, #3
 8000644:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4618      	mov	r0, r3
 800064c:	f006 fd72 	bl	8007134 <HAL_RCCEx_PeriphCLKConfig>
}
 8000650:	bf00      	nop
 8000652:	3728      	adds	r7, #40	; 0x28
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	0800d7dc 	.word	0x0800d7dc
 800065c:	0800d7fc 	.word	0x0800d7fc
 8000660:	0800d81c 	.word	0x0800d81c

08000664 <AUDIO_OUT_MspInit>:
  * @brief  AUDIO OUT I2S MSP Init.
  * @param  hi2s: might be required to set audio peripheral predivider if any.
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08c      	sub	sp, #48	; 0x30
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	61bb      	str	r3, [r7, #24]
 8000672:	4b57      	ldr	r3, [pc, #348]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 8000674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000676:	4a56      	ldr	r2, [pc, #344]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 8000678:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800067c:	6413      	str	r3, [r2, #64]	; 0x40
 800067e:	4b54      	ldr	r3, [pc, #336]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 8000680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000682:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000686:	61bb      	str	r3, [r7, #24]
 8000688:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/  
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
 800068e:	4b50      	ldr	r3, [pc, #320]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a4f      	ldr	r2, [pc, #316]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b4d      	ldr	r3, [pc, #308]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	617b      	str	r3, [r7, #20]
 80006a4:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
 80006aa:	4b49      	ldr	r3, [pc, #292]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a48      	ldr	r2, [pc, #288]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b46      	ldr	r3, [pc, #280]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]

  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 80006c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 80006c8:	2302      	movs	r3, #2
 80006ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 80006d0:	2302      	movs	r3, #2
 80006d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 80006d4:	2306      	movs	r3, #6
 80006d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4619      	mov	r1, r3
 80006de:	483d      	ldr	r0, [pc, #244]	; (80007d4 <AUDIO_OUT_MspInit+0x170>)
 80006e0:	f002 fb5e 	bl	8002da0 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 80006e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	4619      	mov	r1, r3
 80006f0:	4839      	ldr	r0, [pc, #228]	; (80007d8 <AUDIO_OUT_MspInit+0x174>)
 80006f2:	f002 fb55 	bl	8002da0 <HAL_GPIO_Init>

  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	4b35      	ldr	r3, [pc, #212]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a34      	ldr	r2, [pc, #208]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b32      	ldr	r3, [pc, #200]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 8000712:	2380      	movs	r3, #128	; 0x80
 8000714:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	4619      	mov	r1, r3
 800071c:	482d      	ldr	r0, [pc, #180]	; (80007d4 <AUDIO_OUT_MspInit+0x170>)
 800071e:	f002 fb3f 	bl	8002da0 <HAL_GPIO_Init>

  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE(); 
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a29      	ldr	r2, [pc, #164]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 800072c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b27      	ldr	r3, [pc, #156]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a26      	ldr	r2, [pc, #152]	; (80007dc <AUDIO_OUT_MspInit+0x178>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d136      	bne.n	80007b6 <AUDIO_OUT_MspInit+0x152>
  {
    /* Configure the hdma_i2sTx handle parameters */   
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 8000748:	4b25      	ldr	r3, [pc, #148]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 800074a:	2200      	movs	r2, #0
 800074c:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800074e:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 8000750:	2240      	movs	r2, #64	; 0x40
 8000752:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000754:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 800075a:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 800075c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000760:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 8000762:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 8000764:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000768:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 800076a:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 800076c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000770:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 8000772:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 8000774:	2200      	movs	r2, #0
 8000776:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000778:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 800077a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800077e:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8000780:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 8000782:	2204      	movs	r2, #4
 8000784:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 8000788:	2203      	movs	r2, #3
 800078a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 800078e:	2200      	movs	r2, #0
 8000790:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 8000794:	2200      	movs	r2, #0
 8000796:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 800079a:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <AUDIO_OUT_MspInit+0x180>)
 800079c:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 80007a2:	639a      	str	r2, [r3, #56]	; 0x38
 80007a4:	4a0e      	ldr	r2, [pc, #56]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 80007aa:	480d      	ldr	r0, [pc, #52]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 80007ac:	f001 ffd8 	bl	8002760 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 80007b0:	480b      	ldr	r0, [pc, #44]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 80007b2:	f001 ff27 	bl	8002604 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	210e      	movs	r1, #14
 80007ba:	202f      	movs	r0, #47	; 0x2f
 80007bc:	f001 feeb 	bl	8002596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);  
 80007c0:	202f      	movs	r0, #47	; 0x2f
 80007c2:	f001 ff04 	bl	80025ce <HAL_NVIC_EnableIRQ>
}
 80007c6:	bf00      	nop
 80007c8:	3730      	adds	r7, #48	; 0x30
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020800 	.word	0x40020800
 80007d8:	40020000 	.word	0x40020000
 80007dc:	40003c00 	.word	0x40003c00
 80007e0:	20000130 	.word	0x20000130
 80007e4:	400260b8 	.word	0x400260b8

080007e8 <AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void AUDIO_OUT_TransferComplete_CallBack(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <AUDIO_OUT_HalfTransfer_CallBack>:

/**
  * @brief  Manages the DMA Half Transfer complete event.
  */
__weak void AUDIO_OUT_HalfTransfer_CallBack(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void AUDIO_OUT_Error_CallBack(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
	...

08000814 <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <I2S3_Init+0x68>)
 800081e:	4a18      	ldr	r2, [pc, #96]	; (8000880 <I2S3_Init+0x6c>)
 8000820:	601a      	str	r2, [r3, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <I2S3_Init+0x68>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	69da      	ldr	r2, [r3, #28]
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <I2S3_Init+0x68>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000830:	61da      	str	r2, [r3, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 8000832:	4a12      	ldr	r2, [pc, #72]	; (800087c <I2S3_Init+0x68>)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8000838:	4b10      	ldr	r3, [pc, #64]	; (800087c <I2S3_Init+0x68>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <I2S3_Init+0x68>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000844:	4b0d      	ldr	r3, [pc, #52]	; (800087c <I2S3_Init+0x68>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <I2S3_Init+0x68>)
 800084c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000850:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <I2S3_Init+0x68>)
 8000854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000858:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <I2S3_Init+0x68>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 8000860:	4806      	ldr	r0, [pc, #24]	; (800087c <I2S3_Init+0x68>)
 8000862:	f005 f957 	bl	8005b14 <HAL_I2S_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <I2S3_Init+0x5c>
  {
    return AUDIO_ERROR;
 800086c:	2301      	movs	r3, #1
 800086e:	e000      	b.n	8000872 <I2S3_Init+0x5e>
  }
  else
  {
    return AUDIO_OK;
 8000870:	2300      	movs	r3, #0
  }
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200000e8 	.word	0x200000e8
 8000880:	40003c00 	.word	0x40003c00

08000884 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a04      	ldr	r2, [pc, #16]	; (80008a4 <HAL_I2S_ErrorCallback+0x20>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d101      	bne.n	800089a <HAL_I2S_ErrorCallback+0x16>
  {
    AUDIO_OUT_Error_CallBack();
 8000896:	f7ff ffb5 	bl	8000804 <AUDIO_OUT_Error_CallBack>
  }
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40003c00 	.word	0x40003c00

080008a8 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80008ac:	4814      	ldr	r0, [pc, #80]	; (8000900 <I2Cx_Init+0x58>)
 80008ae:	f004 fdc7 	bl	8005440 <HAL_I2C_GetState>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d121      	bne.n	80008fc <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = AUDIO_I2Cx;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <I2Cx_Init+0x58>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	; (8000904 <I2Cx_Init+0x5c>)
 80008bc:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <I2Cx_Init+0x58>)
 80008c0:	2243      	movs	r2, #67	; 0x43
 80008c2:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 80008c4:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <I2Cx_Init+0x58>)
 80008c6:	4a10      	ldr	r2, [pc, #64]	; (8000908 <I2Cx_Init+0x60>)
 80008c8:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <I2Cx_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d0:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <I2Cx_Init+0x58>)
 80008d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008d6:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <I2Cx_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <I2Cx_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <I2Cx_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 80008ea:	4b05      	ldr	r3, [pc, #20]	; (8000900 <I2Cx_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80008f0:	4803      	ldr	r0, [pc, #12]	; (8000900 <I2Cx_Init+0x58>)
 80008f2:	f000 f86b 	bl	80009cc <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80008f6:	4802      	ldr	r0, [pc, #8]	; (8000900 <I2Cx_Init+0x58>)
 80008f8:	f004 f90e 	bl	8004b18 <HAL_I2C_Init>
  }
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000190 	.word	0x20000190
 8000904:	40005400 	.word	0x40005400
 8000908:	000186a0 	.word	0x000186a0

0800090c <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af04      	add	r7, sp, #16
 8000912:	4603      	mov	r3, r0
 8000914:	80fb      	strh	r3, [r7, #6]
 8000916:	460b      	mov	r3, r1
 8000918:	717b      	strb	r3, [r7, #5]
 800091a:	4613      	mov	r3, r2
 800091c:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800091e:	2300      	movs	r3, #0
 8000920:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8000922:	797b      	ldrb	r3, [r7, #5]
 8000924:	b29a      	uxth	r2, r3
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <I2Cx_WriteData+0x48>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	88f9      	ldrh	r1, [r7, #6]
 800092c:	9302      	str	r3, [sp, #8]
 800092e:	2301      	movs	r3, #1
 8000930:	9301      	str	r3, [sp, #4]
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	2301      	movs	r3, #1
 8000938:	4807      	ldr	r0, [pc, #28]	; (8000958 <I2Cx_WriteData+0x4c>)
 800093a:	f004 fa61 	bl	8004e00 <HAL_I2C_Mem_Write>
 800093e:	4603      	mov	r3, r0
 8000940:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000942:	7bfb      	ldrb	r3, [r7, #15]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000948:	f000 f834 	bl	80009b4 <I2Cx_Error>
  }
}
 800094c:	bf00      	nop
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000000 	.word	0x20000000
 8000958:	20000190 	.word	0x20000190

0800095c <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af04      	add	r7, sp, #16
 8000962:	4603      	mov	r3, r0
 8000964:	460a      	mov	r2, r1
 8000966:	80fb      	strh	r3, [r7, #6]
 8000968:	4613      	mov	r3, r2
 800096a:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800096c:	2300      	movs	r3, #0
 800096e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8000974:	797b      	ldrb	r3, [r7, #5]
 8000976:	b29a      	uxth	r2, r3
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <I2Cx_ReadData+0x50>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	88f9      	ldrh	r1, [r7, #6]
 800097e:	9302      	str	r3, [sp, #8]
 8000980:	2301      	movs	r3, #1
 8000982:	9301      	str	r3, [sp, #4]
 8000984:	f107 030e 	add.w	r3, r7, #14
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	2301      	movs	r3, #1
 800098c:	4808      	ldr	r0, [pc, #32]	; (80009b0 <I2Cx_ReadData+0x54>)
 800098e:	f004 fb31 	bl	8004ff4 <HAL_I2C_Mem_Read>
 8000992:	4603      	mov	r3, r0
 8000994:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000996:	7bfb      	ldrb	r3, [r7, #15]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 800099c:	f000 f80a 	bl	80009b4 <I2Cx_Error>
  }
  return value;
 80009a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000000 	.word	0x20000000
 80009b0:	20000190 	.word	0x20000190

080009b4 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80009b8:	4803      	ldr	r0, [pc, #12]	; (80009c8 <I2Cx_Error+0x14>)
 80009ba:	f004 f9f1 	bl	8004da0 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 80009be:	f7ff ff73 	bl	80008a8 <I2Cx_Init>
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000190 	.word	0x20000190

080009cc <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	; 0x28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the I2C peripheral */
  AUDIO_I2Cx_CLOCK_ENABLE();
 80009d4:	2300      	movs	r3, #0
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	4b25      	ldr	r3, [pc, #148]	; (8000a70 <I2Cx_MspInit+0xa4>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	4a24      	ldr	r2, [pc, #144]	; (8000a70 <I2Cx_MspInit+0xa4>)
 80009de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009e2:	6413      	str	r3, [r2, #64]	; 0x40
 80009e4:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <I2Cx_MspInit+0xa4>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <I2Cx_MspInit+0xa4>)
 80009f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f8:	4a1d      	ldr	r2, [pc, #116]	; (8000a70 <I2Cx_MspInit+0xa4>)
 80009fa:	f043 0302 	orr.w	r3, r3, #2
 80009fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <I2Cx_MspInit+0xa4>)
 8000a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a04:	f003 0302 	and.w	r3, r3, #2
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 8000a0c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8000a12:	2312      	movs	r3, #18
 8000a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 8000a1e:	2304      	movs	r3, #4
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	4619      	mov	r1, r3
 8000a28:	4812      	ldr	r0, [pc, #72]	; (8000a74 <I2Cx_MspInit+0xa8>)
 8000a2a:	f002 f9b9 	bl	8002da0 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  AUDIO_I2Cx_FORCE_RESET();
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <I2Cx_MspInit+0xa4>)
 8000a30:	6a1b      	ldr	r3, [r3, #32]
 8000a32:	4a0f      	ldr	r2, [pc, #60]	; (8000a70 <I2Cx_MspInit+0xa4>)
 8000a34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a38:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  AUDIO_I2Cx_RELEASE_RESET();
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <I2Cx_MspInit+0xa4>)
 8000a3c:	6a1b      	ldr	r3, [r3, #32]
 8000a3e:	4a0c      	ldr	r2, [pc, #48]	; (8000a70 <I2Cx_MspInit+0xa4>)
 8000a40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000a44:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	210f      	movs	r1, #15
 8000a4a:	201f      	movs	r0, #31
 8000a4c:	f001 fda3 	bl	8002596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 8000a50:	201f      	movs	r0, #31
 8000a52:	f001 fdbc 	bl	80025ce <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	210f      	movs	r1, #15
 8000a5a:	2020      	movs	r0, #32
 8000a5c:	f001 fd9b 	bl	8002596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 8000a60:	2020      	movs	r0, #32
 8000a62:	f001 fdb4 	bl	80025ce <HAL_NVIC_EnableIRQ>
}
 8000a66:	bf00      	nop
 8000a68:	3728      	adds	r7, #40	; 0x28
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020400 	.word	0x40020400

08000a78 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <AUDIO_IO_Init+0x70>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a18      	ldr	r2, [pc, #96]	; (8000ae8 <AUDIO_IO_Init+0x70>)
 8000a88:	f043 0308 	orr.w	r3, r3, #8
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <AUDIO_IO_Init+0x70>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0308 	and.w	r3, r3, #8
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8000a9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a9e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	4619      	mov	r1, r3
 8000ab0:	480e      	ldr	r0, [pc, #56]	; (8000aec <AUDIO_IO_Init+0x74>)
 8000ab2:	f002 f975 	bl	8002da0 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8000ab6:	f7ff fef7 	bl	80008a8 <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac0:	480a      	ldr	r0, [pc, #40]	; (8000aec <AUDIO_IO_Init+0x74>)
 8000ac2:	f002 fc05 	bl	80032d0 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000ac6:	2005      	movs	r0, #5
 8000ac8:	f001 fc66 	bl	8002398 <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8000acc:	2201      	movs	r2, #1
 8000ace:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ad2:	4806      	ldr	r0, [pc, #24]	; (8000aec <AUDIO_IO_Init+0x74>)
 8000ad4:	f002 fbfc 	bl	80032d0 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000ad8:	2005      	movs	r0, #5
 8000ada:	f001 fc5d 	bl	8002398 <HAL_Delay>
}
 8000ade:	bf00      	nop
 8000ae0:	3718      	adds	r7, #24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020800 	.word	0x40020800

08000af0 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b082      	sub	sp, #8
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4603      	mov	r3, r0
 8000b06:	71fb      	strb	r3, [r7, #7]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	71bb      	strb	r3, [r7, #6]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	797a      	ldrb	r2, [r7, #5]
 8000b16:	79b9      	ldrb	r1, [r7, #6]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fef7 	bl	800090c <I2Cx_WriteData>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	460a      	mov	r2, r1
 8000b30:	71fb      	strb	r3, [r7, #7]
 8000b32:	4613      	mov	r3, r2
 8000b34:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	79ba      	ldrb	r2, [r7, #6]
 8000b3c:	4611      	mov	r1, r2
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ff0c 	bl	800095c <I2Cx_ReadData>
 8000b44:	4603      	mov	r3, r0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	4603      	mov	r3, r0
 8000b5a:	81fb      	strh	r3, [r7, #14]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	81bb      	strh	r3, [r7, #12]
 8000b60:	4613      	mov	r3, r2
 8000b62:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 8000b68:	f7ff ff86 	bl	8000a78 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000b6c:	89fb      	ldrh	r3, [r7, #14]
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	2201      	movs	r2, #1
 8000b72:	2102      	movs	r1, #2
 8000b74:	4618      	mov	r0, r3
 8000b76:	f000 fb6b 	bl	8001250 <CODEC_IO_Write>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	4413      	add	r3, r2
 8000b82:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8000b84:	89bb      	ldrh	r3, [r7, #12]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	2b03      	cmp	r3, #3
 8000b8a:	d81b      	bhi.n	8000bc4 <cs43l22_Init+0x74>
 8000b8c:	a201      	add	r2, pc, #4	; (adr r2, 8000b94 <cs43l22_Init+0x44>)
 8000b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b92:	bf00      	nop
 8000b94:	08000ba5 	.word	0x08000ba5
 8000b98:	08000bad 	.word	0x08000bad
 8000b9c:	08000bb5 	.word	0x08000bb5
 8000ba0:	08000bbd 	.word	0x08000bbd
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8000ba4:	4b67      	ldr	r3, [pc, #412]	; (8000d44 <cs43l22_Init+0x1f4>)
 8000ba6:	22fa      	movs	r2, #250	; 0xfa
 8000ba8:	701a      	strb	r2, [r3, #0]
    break;
 8000baa:	e00f      	b.n	8000bcc <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8000bac:	4b65      	ldr	r3, [pc, #404]	; (8000d44 <cs43l22_Init+0x1f4>)
 8000bae:	22af      	movs	r2, #175	; 0xaf
 8000bb0:	701a      	strb	r2, [r3, #0]
    break;
 8000bb2:	e00b      	b.n	8000bcc <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8000bb4:	4b63      	ldr	r3, [pc, #396]	; (8000d44 <cs43l22_Init+0x1f4>)
 8000bb6:	22aa      	movs	r2, #170	; 0xaa
 8000bb8:	701a      	strb	r2, [r3, #0]
    break;
 8000bba:	e007      	b.n	8000bcc <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8000bbc:	4b61      	ldr	r3, [pc, #388]	; (8000d44 <cs43l22_Init+0x1f4>)
 8000bbe:	2205      	movs	r2, #5
 8000bc0:	701a      	strb	r2, [r3, #0]
    break;    
 8000bc2:	e003      	b.n	8000bcc <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8000bc4:	4b5f      	ldr	r3, [pc, #380]	; (8000d44 <cs43l22_Init+0x1f4>)
 8000bc6:	2205      	movs	r2, #5
 8000bc8:	701a      	strb	r2, [r3, #0]
    break;    
 8000bca:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000bcc:	89fb      	ldrh	r3, [r7, #14]
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	4a5c      	ldr	r2, [pc, #368]	; (8000d44 <cs43l22_Init+0x1f4>)
 8000bd2:	7812      	ldrb	r2, [r2, #0]
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	2104      	movs	r1, #4
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f000 fb39 	bl	8001250 <CODEC_IO_Write>
 8000bde:	4603      	mov	r3, r0
 8000be0:	461a      	mov	r2, r3
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	4413      	add	r3, r2
 8000be6:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8000be8:	89fb      	ldrh	r3, [r7, #14]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	2281      	movs	r2, #129	; 0x81
 8000bee:	2105      	movs	r1, #5
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f000 fb2d 	bl	8001250 <CODEC_IO_Write>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8000c00:	89fb      	ldrh	r3, [r7, #14]
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	2204      	movs	r2, #4
 8000c06:	2106      	movs	r1, #6
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 fb21 	bl	8001250 <CODEC_IO_Write>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	461a      	mov	r2, r3
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	4413      	add	r3, r2
 8000c16:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000c18:	7afa      	ldrb	r2, [r7, #11]
 8000c1a:	89fb      	ldrh	r3, [r7, #14]
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 f97c 	bl	8000f1c <cs43l22_SetVolume>
 8000c24:	4602      	mov	r2, r0
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	4413      	add	r3, r2
 8000c2a:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000c2c:	89bb      	ldrh	r3, [r7, #12]
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d023      	beq.n	8000c7a <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8000c32:	89fb      	ldrh	r3, [r7, #14]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	2206      	movs	r2, #6
 8000c38:	210f      	movs	r1, #15
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 fb08 	bl	8001250 <CODEC_IO_Write>
 8000c40:	4603      	mov	r3, r0
 8000c42:	461a      	mov	r2, r3
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	4413      	add	r3, r2
 8000c48:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8000c4a:	89fb      	ldrh	r3, [r7, #14]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2124      	movs	r1, #36	; 0x24
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 fafc 	bl	8001250 <CODEC_IO_Write>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	4413      	add	r3, r2
 8000c60:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8000c62:	89fb      	ldrh	r3, [r7, #14]
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	2200      	movs	r2, #0
 8000c68:	2125      	movs	r1, #37	; 0x25
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 faf0 	bl	8001250 <CODEC_IO_Write>
 8000c70:	4603      	mov	r3, r0
 8000c72:	461a      	mov	r2, r3
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	4413      	add	r3, r2
 8000c78:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8000c7a:	89fb      	ldrh	r3, [r7, #14]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	2200      	movs	r2, #0
 8000c80:	210a      	movs	r1, #10
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 fae4 	bl	8001250 <CODEC_IO_Write>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	4413      	add	r3, r2
 8000c90:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000c92:	89fb      	ldrh	r3, [r7, #14]
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	2204      	movs	r2, #4
 8000c98:	210e      	movs	r1, #14
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 fad8 	bl	8001250 <CODEC_IO_Write>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8000caa:	89fb      	ldrh	r3, [r7, #14]
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2127      	movs	r1, #39	; 0x27
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 facc 	bl	8001250 <CODEC_IO_Write>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	461a      	mov	r2, r3
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8000cc2:	89fb      	ldrh	r3, [r7, #14]
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	220f      	movs	r2, #15
 8000cc8:	211f      	movs	r1, #31
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 fac0 	bl	8001250 <CODEC_IO_Write>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8000cda:	89fb      	ldrh	r3, [r7, #14]
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	220a      	movs	r2, #10
 8000ce0:	211a      	movs	r1, #26
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 fab4 	bl	8001250 <CODEC_IO_Write>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	461a      	mov	r2, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	4413      	add	r3, r2
 8000cf0:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8000cf2:	89fb      	ldrh	r3, [r7, #14]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	220a      	movs	r2, #10
 8000cf8:	211b      	movs	r1, #27
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 faa8 	bl	8001250 <CODEC_IO_Write>
 8000d00:	4603      	mov	r3, r0
 8000d02:	461a      	mov	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	4413      	add	r3, r2
 8000d08:	617b      	str	r3, [r7, #20]
  
  /* Disable pass-through channels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PASSTHR_A_SELECT, 0x00);
 8000d0a:	89fb      	ldrh	r3, [r7, #14]
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2108      	movs	r1, #8
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 fa9c 	bl	8001250 <CODEC_IO_Write>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	4413      	add	r3, r2
 8000d20:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PASSTHR_A_SELECT, 0x00);
 8000d22:	89fb      	ldrh	r3, [r7, #14]
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	2200      	movs	r2, #0
 8000d28:	2108      	movs	r1, #8
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 fa90 	bl	8001250 <CODEC_IO_Write>
 8000d30:	4603      	mov	r3, r0
 8000d32:	461a      	mov	r2, r3
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	4413      	add	r3, r2
 8000d38:	617b      	str	r3, [r7, #20]

  /* Return communication control value */
  return counter;  
 8000d3a:	697b      	ldr	r3, [r7, #20]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	200001e4 	.word	0x200001e4

08000d48 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8000d4c:	f7ff fed0 	bl	8000af0 <AUDIO_IO_DeInit>
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 8000d5e:	f7ff fe8b 	bl	8000a78 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8000d62:	88fb      	ldrh	r3, [r7, #6]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2101      	movs	r1, #1
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fedc 	bl	8000b26 <AUDIO_IO_Read>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	f023 0307 	bic.w	r3, r3, #7
 8000d78:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	6039      	str	r1, [r7, #0]
 8000d8e:	80fb      	strh	r3, [r7, #6]
 8000d90:	4613      	mov	r3, r2
 8000d92:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 8000d98:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <cs43l22_Play+0x70>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d123      	bne.n	8000de8 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0b00000110);
 8000da0:	88fb      	ldrh	r3, [r7, #6]
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	2206      	movs	r2, #6
 8000da6:	210e      	movs	r1, #14
 8000da8:	4618      	mov	r0, r3
 8000daa:	f000 fa51 	bl	8001250 <CODEC_IO_Write>
 8000dae:	4603      	mov	r3, r0
 8000db0:	461a      	mov	r2, r3
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	4413      	add	r3, r2
 8000db6:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000db8:	88fb      	ldrh	r3, [r7, #6]
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 f907 	bl	8000fd0 <cs43l22_SetMute>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 8000dca:	88fb      	ldrh	r3, [r7, #6]
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	229e      	movs	r2, #158	; 0x9e
 8000dd0:	2102      	movs	r1, #2
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 fa3c 	bl	8001250 <CODEC_IO_Write>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	461a      	mov	r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4413      	add	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 8000de2:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <cs43l22_Play+0x70>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8000de8:	68fb      	ldr	r3, [r7, #12]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000034 	.word	0x20000034

08000df8 <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	2101      	movs	r1, #1
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f8e0 	bl	8000fd0 <cs43l22_SetMute>
 8000e10:	4602      	mov	r2, r0
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	4413      	add	r3, r2
 8000e16:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8000e18:	88fb      	ldrh	r3, [r7, #6]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	2102      	movs	r1, #2
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 fa15 	bl	8001250 <CODEC_IO_Write>
 8000e26:	4603      	mov	r3, r0
 8000e28:	461a      	mov	r2, r3
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8000e30:	68fb      	ldr	r3, [r7, #12]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 f8bc 	bl	8000fd0 <cs43l22_SetMute>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 8000e60:	2300      	movs	r3, #0
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	e002      	b.n	8000e6c <cs43l22_Resume+0x30>
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	2bfe      	cmp	r3, #254	; 0xfe
 8000e70:	d9f9      	bls.n	8000e66 <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	4a0e      	ldr	r2, [pc, #56]	; (8000eb0 <cs43l22_Resume+0x74>)
 8000e78:	7812      	ldrb	r2, [r2, #0]
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	2104      	movs	r1, #4
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f9e6 	bl	8001250 <CODEC_IO_Write>
 8000e84:	4603      	mov	r3, r0
 8000e86:	461a      	mov	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 8000e8e:	88fb      	ldrh	r3, [r7, #6]
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	229e      	movs	r2, #158	; 0x9e
 8000e94:	2102      	movs	r1, #2
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f9da 	bl	8001250 <CODEC_IO_Write>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	200001e4 	.word	0x200001e4

08000eb4 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	6039      	str	r1, [r7, #0]
 8000ebe:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f000 f881 	bl	8000fd0 <cs43l22_SetMute>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000ed6:	88fb      	ldrh	r3, [r7, #6]
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2204      	movs	r2, #4
 8000edc:	210e      	movs	r1, #14
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 f9b6 	bl	8001250 <CODEC_IO_Write>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4413      	add	r3, r2
 8000eec:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 8000eee:	88fb      	ldrh	r3, [r7, #6]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	229f      	movs	r2, #159	; 0x9f
 8000ef4:	2102      	movs	r1, #2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f9aa 	bl	8001250 <CODEC_IO_Write>
 8000efc:	4603      	mov	r3, r0
 8000efe:	461a      	mov	r2, r3
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4413      	add	r3, r2
 8000f04:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 8000f06:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <cs43l22_Stop+0x64>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]
  return counter;    
 8000f0c:	68fb      	ldr	r3, [r7, #12]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000034 	.word	0x20000034

08000f1c <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	460a      	mov	r2, r1
 8000f26:	80fb      	strh	r3, [r7, #6]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = Volume;//VOLUME_CONVERT(Volume);
 8000f30:	797b      	ldrb	r3, [r7, #5]
 8000f32:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 8000f34:	7afb      	ldrb	r3, [r7, #11]
 8000f36:	2be6      	cmp	r3, #230	; 0xe6
 8000f38:	d91c      	bls.n	8000f74 <cs43l22_SetVolume+0x58>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	b2d8      	uxtb	r0, r3
 8000f3e:	7afb      	ldrb	r3, [r7, #11]
 8000f40:	3319      	adds	r3, #25
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	461a      	mov	r2, r3
 8000f46:	2120      	movs	r1, #32
 8000f48:	f000 f982 	bl	8001250 <CODEC_IO_Write>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4413      	add	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 8000f56:	88fb      	ldrh	r3, [r7, #6]
 8000f58:	b2d8      	uxtb	r0, r3
 8000f5a:	7afb      	ldrb	r3, [r7, #11]
 8000f5c:	3319      	adds	r3, #25
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	461a      	mov	r2, r3
 8000f62:	2121      	movs	r1, #33	; 0x21
 8000f64:	f000 f974 	bl	8001250 <CODEC_IO_Write>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4413      	add	r3, r2
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	e01b      	b.n	8000fac <cs43l22_SetVolume+0x90>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 8000f74:	88fb      	ldrh	r3, [r7, #6]
 8000f76:	b2d8      	uxtb	r0, r3
 8000f78:	7afb      	ldrb	r3, [r7, #11]
 8000f7a:	3319      	adds	r3, #25
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	461a      	mov	r2, r3
 8000f80:	2120      	movs	r1, #32
 8000f82:	f000 f965 	bl	8001250 <CODEC_IO_Write>
 8000f86:	4603      	mov	r3, r0
 8000f88:	461a      	mov	r2, r3
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 8000f90:	88fb      	ldrh	r3, [r7, #6]
 8000f92:	b2d8      	uxtb	r0, r3
 8000f94:	7afb      	ldrb	r3, [r7, #11]
 8000f96:	3319      	adds	r3, #25
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	2121      	movs	r1, #33	; 0x21
 8000f9e:	f000 f957 	bl	8001250 <CODEC_IO_Write>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8000fac:	68fb      	ldr	r3, [r7, #12]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	6039      	str	r1, [r7, #0]
 8000fc0:	80fb      	strh	r3, [r7, #6]
  return 0;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d124      	bne.n	8001030 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8000fe6:	88fb      	ldrh	r3, [r7, #6]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	22ff      	movs	r2, #255	; 0xff
 8000fec:	2104      	movs	r1, #4
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f92e 	bl	8001250 <CODEC_IO_Write>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2201      	movs	r2, #1
 8001004:	2122      	movs	r1, #34	; 0x22
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f922 	bl	8001250 <CODEC_IO_Write>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4413      	add	r3, r2
 8001014:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2201      	movs	r2, #1
 800101c:	2123      	movs	r1, #35	; 0x23
 800101e:	4618      	mov	r0, r3
 8001020:	f000 f916 	bl	8001250 <CODEC_IO_Write>
 8001024:	4603      	mov	r3, r0
 8001026:	461a      	mov	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	e025      	b.n	800107c <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 8001030:	88fb      	ldrh	r3, [r7, #6]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2200      	movs	r2, #0
 8001036:	2122      	movs	r1, #34	; 0x22
 8001038:	4618      	mov	r0, r3
 800103a:	f000 f909 	bl	8001250 <CODEC_IO_Write>
 800103e:	4603      	mov	r3, r0
 8001040:	461a      	mov	r2, r3
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4413      	add	r3, r2
 8001046:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 8001048:	88fb      	ldrh	r3, [r7, #6]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2200      	movs	r2, #0
 800104e:	2123      	movs	r1, #35	; 0x23
 8001050:	4618      	mov	r0, r3
 8001052:	f000 f8fd 	bl	8001250 <CODEC_IO_Write>
 8001056:	4603      	mov	r3, r0
 8001058:	461a      	mov	r2, r3
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4413      	add	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001060:	88fb      	ldrh	r3, [r7, #6]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	4a08      	ldr	r2, [pc, #32]	; (8001088 <cs43l22_SetMute+0xb8>)
 8001066:	7812      	ldrb	r2, [r2, #0]
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	2104      	movs	r1, #4
 800106c:	4618      	mov	r0, r3
 800106e:	f000 f8ef 	bl	8001250 <CODEC_IO_Write>
 8001072:	4603      	mov	r3, r0
 8001074:	461a      	mov	r2, r3
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4413      	add	r3, r2
 800107a:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 800107c:	68fb      	ldr	r3, [r7, #12]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200001e4 	.word	0x200001e4

0800108c <cs43l22_SetPassThrough>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetPassThrough(uint16_t DeviceAddr, uint8_t CH, uint8_t vol)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	80fb      	strh	r3, [r7, #6]
 8001096:	460b      	mov	r3, r1
 8001098:	717b      	strb	r3, [r7, #5]
 800109a:	4613      	mov	r3, r2
 800109c:	713b      	strb	r3, [r7, #4]
  uint32_t counter = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]


	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, 0x00);
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2200      	movs	r2, #0
 80010a8:	2120      	movs	r1, #32
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 f8d0 	bl	8001250 <CODEC_IO_Write>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, 0x00);
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2200      	movs	r2, #0
 80010c0:	2121      	movs	r1, #33	; 0x21
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 f8c4 	bl	8001250 <CODEC_IO_Write>
 80010c8:	4603      	mov	r3, r0
 80010ca:	461a      	mov	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4413      	add	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]
//	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
//	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
//	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
//	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);

	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PASSTHR_A_SELECT, 0b11100);
 80010d2:	88fb      	ldrh	r3, [r7, #6]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	221c      	movs	r2, #28
 80010d8:	2108      	movs	r1, #8
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 f8b8 	bl	8001250 <CODEC_IO_Write>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PASSTHR_B_SELECT, 0b11100);
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	221c      	movs	r2, #28
 80010f0:	2109      	movs	r1, #9
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f8ac 	bl	8001250 <CODEC_IO_Write>
 80010f8:	4603      	mov	r3, r0
 80010fa:	461a      	mov	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4413      	add	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PASSTHR_A_VOL, 0x00);
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2200      	movs	r2, #0
 8001108:	2114      	movs	r1, #20
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f8a0 	bl	8001250 <CODEC_IO_Write>
 8001110:	4603      	mov	r3, r0
 8001112:	461a      	mov	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4413      	add	r3, r2
 8001118:	60fb      	str	r3, [r7, #12]
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PASSTHR_B_VOL, 0x00);
 800111a:	88fb      	ldrh	r3, [r7, #6]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2200      	movs	r2, #0
 8001120:	2115      	movs	r1, #21
 8001122:	4618      	mov	r0, r3
 8001124:	f000 f894 	bl	8001250 <CODEC_IO_Write>
 8001128:	4603      	mov	r3, r0
 800112a:	461a      	mov	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4413      	add	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]

//	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL1, 0x70);
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0xC6);
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	22c6      	movs	r2, #198	; 0xc6
 8001138:	210e      	movs	r1, #14
 800113a:	4618      	mov	r0, r3
 800113c:	f000 f888 	bl	8001250 <CODEC_IO_Write>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
//	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x05);
//
//
//	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0xC0);

  return counter;
 800114a:	68fb      	ldr	r3, [r7, #12]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	460a      	mov	r2, r1
 800115e:	80fb      	strh	r3, [r7, #6]
 8001160:	4613      	mov	r3, r2
 8001162:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8001168:	797b      	ldrb	r3, [r7, #5]
 800116a:	3b01      	subs	r3, #1
 800116c:	2b03      	cmp	r3, #3
 800116e:	d84b      	bhi.n	8001208 <cs43l22_SetOutputMode+0xb4>
 8001170:	a201      	add	r2, pc, #4	; (adr r2, 8001178 <cs43l22_SetOutputMode+0x24>)
 8001172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001176:	bf00      	nop
 8001178:	08001189 	.word	0x08001189
 800117c:	080011a9 	.word	0x080011a9
 8001180:	080011c9 	.word	0x080011c9
 8001184:	080011e9 	.word	0x080011e9
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	22fa      	movs	r2, #250	; 0xfa
 800118e:	2104      	movs	r1, #4
 8001190:	4618      	mov	r0, r3
 8001192:	f000 f85d 	bl	8001250 <CODEC_IO_Write>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	4413      	add	r3, r2
 800119e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 80011a0:	4b24      	ldr	r3, [pc, #144]	; (8001234 <cs43l22_SetOutputMode+0xe0>)
 80011a2:	22fa      	movs	r2, #250	; 0xfa
 80011a4:	701a      	strb	r2, [r3, #0]
      break;
 80011a6:	e03f      	b.n	8001228 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	22af      	movs	r2, #175	; 0xaf
 80011ae:	2104      	movs	r1, #4
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 f84d 	bl	8001250 <CODEC_IO_Write>
 80011b6:	4603      	mov	r3, r0
 80011b8:	461a      	mov	r2, r3
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4413      	add	r3, r2
 80011be:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 80011c0:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <cs43l22_SetOutputMode+0xe0>)
 80011c2:	22af      	movs	r2, #175	; 0xaf
 80011c4:	701a      	strb	r2, [r3, #0]
      break;
 80011c6:	e02f      	b.n	8001228 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	22aa      	movs	r2, #170	; 0xaa
 80011ce:	2104      	movs	r1, #4
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 f83d 	bl	8001250 <CODEC_IO_Write>
 80011d6:	4603      	mov	r3, r0
 80011d8:	461a      	mov	r2, r3
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	4413      	add	r3, r2
 80011de:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <cs43l22_SetOutputMode+0xe0>)
 80011e2:	22aa      	movs	r2, #170	; 0xaa
 80011e4:	701a      	strb	r2, [r3, #0]
      break;
 80011e6:	e01f      	b.n	8001228 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80011e8:	88fb      	ldrh	r3, [r7, #6]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2205      	movs	r2, #5
 80011ee:	2104      	movs	r1, #4
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 f82d 	bl	8001250 <CODEC_IO_Write>
 80011f6:	4603      	mov	r3, r0
 80011f8:	461a      	mov	r2, r3
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	4413      	add	r3, r2
 80011fe:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <cs43l22_SetOutputMode+0xe0>)
 8001202:	2205      	movs	r2, #5
 8001204:	701a      	strb	r2, [r3, #0]
      break;    
 8001206:	e00f      	b.n	8001228 <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8001208:	88fb      	ldrh	r3, [r7, #6]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2205      	movs	r2, #5
 800120e:	2104      	movs	r1, #4
 8001210:	4618      	mov	r0, r3
 8001212:	f000 f81d 	bl	8001250 <CODEC_IO_Write>
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	4413      	add	r3, r2
 800121e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <cs43l22_SetOutputMode+0xe0>)
 8001222:	2205      	movs	r2, #5
 8001224:	701a      	strb	r2, [r3, #0]
      break;
 8001226:	bf00      	nop
  }  
  return counter;
 8001228:	68fb      	ldr	r3, [r7, #12]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200001e4 	.word	0x200001e4

08001238 <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
 800125a:	460b      	mov	r3, r1
 800125c:	71bb      	strb	r3, [r7, #6]
 800125e:	4613      	mov	r3, r2
 8001260:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8001266:	797a      	ldrb	r2, [r7, #5]
 8001268:	79b9      	ldrb	r1, [r7, #6]
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fc46 	bl	8000afe <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	b2db      	uxtb	r3, r3
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <HAL_UART_RxHalfCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b0a4      	sub	sp, #144	; 0x90
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	Command command;
	memcpy(&command, hcommander.uart_rx_buffer, COMMAND_BYTESIZE);
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	2282      	movs	r2, #130	; 0x82
 800128e:	4907      	ldr	r1, [pc, #28]	; (80012ac <HAL_UART_RxHalfCpltCallback+0x2c>)
 8001290:	4618      	mov	r0, r3
 8001292:	f00c f881 	bl	800d398 <memcpy>
	Commander_Enqueue(&hcommander, &command);
 8001296:	f107 030c 	add.w	r3, r7, #12
 800129a:	4619      	mov	r1, r3
 800129c:	4804      	ldr	r0, [pc, #16]	; (80012b0 <HAL_UART_RxHalfCpltCallback+0x30>)
 800129e:	f000 ffaf 	bl	8002200 <Commander_Enqueue>
}
 80012a2:	bf00      	nop
 80012a4:	3790      	adds	r7, #144	; 0x90
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2000146c 	.word	0x2000146c
 80012b0:	20001464 	.word	0x20001464

080012b4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b0a4      	sub	sp, #144	; 0x90
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	Command command;
	memcpy(&command, hcommander.uart_rx_buffer + COMMAND_BYTESIZE, COMMAND_BYTESIZE);
 80012bc:	4908      	ldr	r1, [pc, #32]	; (80012e0 <HAL_UART_RxCpltCallback+0x2c>)
 80012be:	f107 030c 	add.w	r3, r7, #12
 80012c2:	2282      	movs	r2, #130	; 0x82
 80012c4:	4618      	mov	r0, r3
 80012c6:	f00c f867 	bl	800d398 <memcpy>
	Commander_Enqueue(&hcommander, &command);
 80012ca:	f107 030c 	add.w	r3, r7, #12
 80012ce:	4619      	mov	r1, r3
 80012d0:	4804      	ldr	r0, [pc, #16]	; (80012e4 <HAL_UART_RxCpltCallback+0x30>)
 80012d2:	f000 ff95 	bl	8002200 <Commander_Enqueue>
}
 80012d6:	bf00      	nop
 80012d8:	3790      	adds	r7, #144	; 0x90
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200014ee 	.word	0x200014ee
 80012e4:	20001464 	.word	0x20001464

080012e8 <command_callback>:

void command_callback(Command command) {
 80012e8:	b084      	sub	sp, #16
 80012ea:	b490      	push	{r4, r7}
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	f107 0408 	add.w	r4, r7, #8
 80012f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//states[0] = states[0] == GPIO_PIN_RESET ? GPIO_PIN_SET : GPIO_PIN_RESET;
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc90      	pop	{r4, r7}
 80012fc:	b004      	add	sp, #16
 80012fe:	4770      	bx	lr

08001300 <wave_gen>:

float wave_gen(char t, u_int32_t i, float tone) {
 8001300:	b580      	push	{r7, lr}
 8001302:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8001306:	af00      	add	r7, sp, #0
 8001308:	4602      	mov	r2, r0
 800130a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800130e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8001312:	6019      	str	r1, [r3, #0]
 8001314:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001318:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800131c:	ed83 0a00 	vstr	s0, [r3]
 8001320:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001324:	f2a3 2311 	subw	r3, r3, #529	; 0x211
 8001328:	701a      	strb	r2, [r3, #0]

	float sin_table[128] = { 0.000000F, 0.024541F, 0.049068F, 0.073565F, 0.098017F, 0.122411F, 0.146730F, 0.170962F, 0.195090F, 0.219101F, 0.242980F, 0.266713F, 0.290284F, 0.313681F, 0.336890F, 0.359895F, 0.382683F, 0.405241F, 0.427555F, 0.449611F, 0.471396F, 0.492898F, 0.514102F, 0.534997F, 0.555570F, 0.575808F, 0.595699F, 0.615231F, 0.634393F, 0.653172F, 0.671559F, 0.689540F, 0.707106F, 0.724247F, 0.740951F, 0.757208F, 0.773010F, 0.788346F, 0.803207F, 0.817584F, 0.831469F, 0.844853F, 0.857728F, 0.870087F, 0.881921F, 0.893224F, 0.903989F, 0.914209F, 0.923879F, 0.932992F, 0.941544F, 0.949528F, 0.956940F, 0.963776F, 0.970031F, 0.975702F, 0.980785F, 0.985277F, 0.989176F, 0.992479F, 0.995185F, 0.997290F, 0.998795F, 0.999699F, 1.000000F, 0.999699F, 0.998796F, 0.997291F, 0.995185F, 0.992480F, 0.989177F, 0.985278F, 0.980786F, 0.975702F, 0.970032F, 0.963776F, 0.956941F, 0.949529F, 0.941545F, 0.932993F, 0.923880F, 0.914210F, 0.903990F, 0.893225F, 0.881922F, 0.870088F, 0.857729F, 0.844855F, 0.831471F, 0.817586F, 0.803209F, 0.788348F, 0.773012F, 0.757210F, 0.740952F, 0.724248F, 0.707108F, 0.689542F, 0.671560F, 0.653174F, 0.634395F, 0.615233F, 0.595701F, 0.575810F, 0.555572F, 0.534999F, 0.514105F, 0.492900F, 0.471399F, 0.449613F, 0.427557F, 0.405243F, 0.382685F, 0.359897F, 0.336892F, 0.313684F, 0.290287F, 0.266715F, 0.242982F, 0.219104F, 0.195093F, 0.170964F, 0.146733F, 0.122413F, 0.098019F, 0.073567F, 0.049070F, 0.024544F };
 800132a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800132e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001332:	4a33      	ldr	r2, [pc, #204]	; (8001400 <wave_gen+0x100>)
 8001334:	4618      	mov	r0, r3
 8001336:	4611      	mov	r1, r2
 8001338:	f44f 7300 	mov.w	r3, #512	; 0x200
 800133c:	461a      	mov	r2, r3
 800133e:	f00c f82b 	bl	800d398 <memcpy>
	float period_f = 48000.F / tone;
 8001342:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001346:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800134a:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001404 <wave_gen+0x104>
 800134e:	ed93 7a00 	vldr	s14, [r3]
 8001352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001356:	edc7 7a87 	vstr	s15, [r7, #540]	; 0x21c
	u_int32_t period_i = period_f;
 800135a:	edd7 7a87 	vldr	s15, [r7, #540]	; 0x21c
 800135e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001362:	ee17 3a90 	vmov	r3, s15
 8001366:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	u_int32_t table_index = (i * 256 / period_i) % 256;
 800136a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800136e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	021a      	lsls	r2, r3, #8
 8001376:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800137a:	fbb2 f3f3 	udiv	r3, r2, r3
 800137e:	b2db      	uxtb	r3, r3
 8001380:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

	if (t == 's') {
 8001384:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001388:	f2a3 2311 	subw	r3, r3, #529	; 0x211
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b73      	cmp	r3, #115	; 0x73
 8001390:	d11c      	bne.n	80013cc <wave_gen+0xcc>
		if (table_index <= 127) {
 8001392:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001396:	2b7f      	cmp	r3, #127	; 0x7f
 8001398:	d80a      	bhi.n	80013b0 <wave_gen+0xb0>
			return sin_table[table_index];
 800139a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800139e:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 80013a2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	edd3 7a00 	vldr	s15, [r3]
 80013ae:	e020      	b.n	80013f2 <wave_gen+0xf2>
		} else {
			return -sin_table[table_index - 128];
 80013b0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80013b4:	3b80      	subs	r3, #128	; 0x80
 80013b6:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80013ba:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	edd3 7a00 	vldr	s15, [r3]
 80013c6:	eef1 7a67 	vneg.f32	s15, s15
 80013ca:	e012      	b.n	80013f2 <wave_gen+0xf2>
		}
	} else if (t == 'q') {
 80013cc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80013d0:	f2a3 2311 	subw	r3, r3, #529	; 0x211
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b71      	cmp	r3, #113	; 0x71
 80013d8:	d109      	bne.n	80013ee <wave_gen+0xee>
		if (table_index <= 127) {
 80013da:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80013de:	2b7f      	cmp	r3, #127	; 0x7f
 80013e0:	d802      	bhi.n	80013e8 <wave_gen+0xe8>
			return -1.F;
 80013e2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80013e6:	e004      	b.n	80013f2 <wave_gen+0xf2>
		} else {
			return 1.F;
 80013e8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80013ec:	e001      	b.n	80013f2 <wave_gen+0xf2>
		}
	} else {
		return 0;
 80013ee:	eddf 7a06 	vldr	s15, [pc, #24]	; 8001408 <wave_gen+0x108>
	}
}
 80013f2:	eeb0 0a67 	vmov.f32	s0, s15
 80013f6:	f507 7708 	add.w	r7, r7, #544	; 0x220
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	0800d5d8 	.word	0x0800d5d8
 8001404:	473b8000 	.word	0x473b8000
 8001408:	00000000 	.word	0x00000000

0800140c <Conv_ADC>:


void Conv_ADC(uint8_t * buf, int32_t *result){
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
	*result = 0xFF000000 * ((buf[1]>>7)&1) + (buf[1]<<16) + (buf[0]<<8) + buf[3];
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3301      	adds	r3, #1
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	09db      	lsrs	r3, r3, #7
 800141e:	b2db      	uxtb	r3, r3
 8001420:	f003 0201 	and.w	r2, r3, #1
 8001424:	4613      	mov	r3, r2
 8001426:	021b      	lsls	r3, r3, #8
 8001428:	1a9b      	subs	r3, r3, r2
 800142a:	061b      	lsls	r3, r3, #24
 800142c:	461a      	mov	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3301      	adds	r3, #1
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	041b      	lsls	r3, r3, #16
 8001436:	4413      	add	r3, r2
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	7812      	ldrb	r2, [r2, #0]
 800143c:	0212      	lsls	r2, r2, #8
 800143e:	4413      	add	r3, r2
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	3203      	adds	r2, #3
 8001444:	7812      	ldrb	r2, [r2, #0]
 8001446:	4413      	add	r3, r2
 8001448:	461a      	mov	r2, r3
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	601a      	str	r2, [r3, #0]
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <HAL_I2S_RxHalfCpltCallback>:


void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]

	Conv_ADC(&ADC_BUFF.ADC8[0], &BUFF_CONV[0]);
 8001464:	490c      	ldr	r1, [pc, #48]	; (8001498 <HAL_I2S_RxHalfCpltCallback+0x3c>)
 8001466:	480d      	ldr	r0, [pc, #52]	; (800149c <HAL_I2S_RxHalfCpltCallback+0x40>)
 8001468:	f7ff ffd0 	bl	800140c <Conv_ADC>
	Conv_ADC(&ADC_BUFF.ADC8[4], &BUFF_CONV[1]);
 800146c:	490c      	ldr	r1, [pc, #48]	; (80014a0 <HAL_I2S_RxHalfCpltCallback+0x44>)
 800146e:	480d      	ldr	r0, [pc, #52]	; (80014a4 <HAL_I2S_RxHalfCpltCallback+0x48>)
 8001470:	f7ff ffcc 	bl	800140c <Conv_ADC>


	if (hi2s->Instance == SPI2) {
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0b      	ldr	r2, [pc, #44]	; (80014a8 <HAL_I2S_RxHalfCpltCallback+0x4c>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d108      	bne.n	8001490 <HAL_I2S_RxHalfCpltCallback+0x34>
		//RIGHT
		int32_t temp = 0 /*ADC_BUFF[__HAL_DMA_GET_COUNTER(hi2s->hdmarx)]*/;
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
		temp >>= 16;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	141b      	asrs	r3, r3, #16
 8001486:	60fb      	str	r3, [r7, #12]
		IN_SAMPLES[1] = temp;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	b21a      	sxth	r2, r3
 800148c:	4b07      	ldr	r3, [pc, #28]	; (80014ac <HAL_I2S_RxHalfCpltCallback+0x50>)
 800148e:	805a      	strh	r2, [r3, #2]
	}
}
 8001490:	bf00      	nop
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20002ed8 	.word	0x20002ed8
 800149c:	20002ec8 	.word	0x20002ec8
 80014a0:	20002edc 	.word	0x20002edc
 80014a4:	20002ecc 	.word	0x20002ecc
 80014a8:	40003800 	.word	0x40003800
 80014ac:	20002ee8 	.word	0x20002ee8

080014b0 <HAL_I2S_RxCpltCallback>:


void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	Conv_ADC(&ADC_BUFF.ADC8[ 8], &BUFF_CONV[2]);
 80014b8:	490c      	ldr	r1, [pc, #48]	; (80014ec <HAL_I2S_RxCpltCallback+0x3c>)
 80014ba:	480d      	ldr	r0, [pc, #52]	; (80014f0 <HAL_I2S_RxCpltCallback+0x40>)
 80014bc:	f7ff ffa6 	bl	800140c <Conv_ADC>
	Conv_ADC(&ADC_BUFF.ADC8[12], &BUFF_CONV[3]);
 80014c0:	490c      	ldr	r1, [pc, #48]	; (80014f4 <HAL_I2S_RxCpltCallback+0x44>)
 80014c2:	480d      	ldr	r0, [pc, #52]	; (80014f8 <HAL_I2S_RxCpltCallback+0x48>)
 80014c4:	f7ff ffa2 	bl	800140c <Conv_ADC>

	if (hi2s->Instance == SPI2) {
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a0b      	ldr	r2, [pc, #44]	; (80014fc <HAL_I2S_RxCpltCallback+0x4c>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d108      	bne.n	80014e4 <HAL_I2S_RxCpltCallback+0x34>
		//RIGHT
		int32_t temp = 0 /*ADC_BUFF[__HAL_DMA_GET_COUNTER(hi2s->hdmarx)]*/;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
		temp >>= 16;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	141b      	asrs	r3, r3, #16
 80014da:	60fb      	str	r3, [r7, #12]
		IN_SAMPLES[1] = temp;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	b21a      	sxth	r2, r3
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <HAL_I2S_RxCpltCallback+0x50>)
 80014e2:	805a      	strh	r2, [r3, #2]
	}
}
 80014e4:	bf00      	nop
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20002ee0 	.word	0x20002ee0
 80014f0:	20002ed0 	.word	0x20002ed0
 80014f4:	20002ee4 	.word	0x20002ee4
 80014f8:	20002ed4 	.word	0x20002ed4
 80014fc:	40003800 	.word	0x40003800
 8001500:	20002ee8 	.word	0x20002ee8

08001504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b0a4      	sub	sp, #144	; 0x90
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800150a:	f000 fed3 	bl	80022b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800150e:	f000 f915 	bl	800173c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001512:	f000 f97d 	bl	8001810 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001516:	f000 fa89 	bl	8001a2c <MX_GPIO_Init>
  MX_DMA_Init();
 800151a:	f000 fa49 	bl	80019b0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800151e:	f000 fa1d 	bl	800195c <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001522:	f007 fd83 	bl	800902c <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001526:	f00b fbc5 	bl	800ccb4 <MX_USB_HOST_Init>
  MX_I2S3_Init();
 800152a:	f000 f9e9 	bl	8001900 <MX_I2S3_Init>
  MX_I2C1_Init();
 800152e:	f000 f98b 	bl	8001848 <MX_I2C1_Init>
  MX_I2S2_Init();
 8001532:	f000 f9b7 	bl	80018a4 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */

	// COMMANDER
	Commander_Init(&hcommander, &huart1, &hdma_usart1_rx, command_callback);
 8001536:	4b6e      	ldr	r3, [pc, #440]	; (80016f0 <main+0x1ec>)
 8001538:	4a6e      	ldr	r2, [pc, #440]	; (80016f4 <main+0x1f0>)
 800153a:	496f      	ldr	r1, [pc, #444]	; (80016f8 <main+0x1f4>)
 800153c:	486f      	ldr	r0, [pc, #444]	; (80016fc <main+0x1f8>)
 800153e:	f000 fe16 	bl	800216e <Commander_Init>
	Commander_Start(&hcommander);
 8001542:	486e      	ldr	r0, [pc, #440]	; (80016fc <main+0x1f8>)
 8001544:	f000 fe3a 	bl	80021bc <Commander_Start>



	// DAC
	HAL_GPIO_WritePin(SPKRPower_GPIO_Port, SPKRPower_Pin, RESET);
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800154e:	486c      	ldr	r0, [pc, #432]	; (8001700 <main+0x1fc>)
 8001550:	f001 febe 	bl	80032d0 <HAL_GPIO_WritePin>

	AUDIO_OUT_Init(3, 50,  AUDIO_FREQUENCY_48K);
 8001554:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001558:	2132      	movs	r1, #50	; 0x32
 800155a:	2003      	movs	r0, #3
 800155c:	f7fe ffb6 	bl	80004cc <AUDIO_OUT_Init>
	cs43l22_SetVolume(AUDIO_I2C_ADDRESS, 10);
 8001560:	210a      	movs	r1, #10
 8001562:	2094      	movs	r0, #148	; 0x94
 8001564:	f7ff fcda 	bl	8000f1c <cs43l22_SetVolume>
	cs43l22_SetOutputMode(AUDIO_I2C_ADDRESS,OUTPUT_DEVICE_HEADPHONE ); //OUTPUT_DEVICE_BOTH
 8001568:	2102      	movs	r1, #2
 800156a:	2094      	movs	r0, #148	; 0x94
 800156c:	f7ff fdf2 	bl	8001154 <cs43l22_SetOutputMode>
	cs43l22_SetPassThrough(AUDIO_I2C_ADDRESS,0,0);
 8001570:	2200      	movs	r2, #0
 8001572:	2100      	movs	r1, #0
 8001574:	2094      	movs	r0, #148	; 0x94
 8001576:	f7ff fd89 	bl	800108c <cs43l22_SetPassThrough>
	cs43l22_drv.Play(AUDIO_I2C_ADDRESS, (uint16_t *)AUDIO_OUT,2180);
 800157a:	4b62      	ldr	r3, [pc, #392]	; (8001704 <main+0x200>)
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	f640 0284 	movw	r2, #2180	; 0x884
 8001582:	4961      	ldr	r1, [pc, #388]	; (8001708 <main+0x204>)
 8001584:	2094      	movs	r0, #148	; 0x94
 8001586:	4798      	blx	r3
	//cs43l22_SetPassThrough(AUDIO_I2C_ADDRESS,0,0);
	// start sound

	for(int i = 0;i < 2180; i++) {
 8001588:	2300      	movs	r3, #0
 800158a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800158e:	e020      	b.n	80015d2 <main+0xce>
		float temp = wave_gen('s', i, 220.) * 16000;
 8001590:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001594:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800170c <main+0x208>
 8001598:	4619      	mov	r1, r3
 800159a:	2073      	movs	r0, #115	; 0x73
 800159c:	f7ff feb0 	bl	8001300 <wave_gen>
 80015a0:	eef0 7a40 	vmov.f32	s15, s0
 80015a4:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001710 <main+0x20c>
 80015a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ac:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		AUDIO_OUT[i] = temp;
 80015b0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80015b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015b8:	ee17 3a90 	vmov	r3, s15
 80015bc:	b219      	sxth	r1, r3
 80015be:	4a52      	ldr	r2, [pc, #328]	; (8001708 <main+0x204>)
 80015c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0;i < 2180; i++) {
 80015c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015cc:	3301      	adds	r3, #1
 80015ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80015d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015d6:	f640 0283 	movw	r2, #2179	; 0x883
 80015da:	4293      	cmp	r3, r2
 80015dc:	ddd8      	ble.n	8001590 <main+0x8c>
	}

	HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)AUDIO_OUT, 2180);
 80015de:	f640 0284 	movw	r2, #2180	; 0x884
 80015e2:	4949      	ldr	r1, [pc, #292]	; (8001708 <main+0x204>)
 80015e4:	484b      	ldr	r0, [pc, #300]	; (8001714 <main+0x210>)
 80015e6:	f004 fbd5 	bl	8005d94 <HAL_I2S_Transmit_DMA>
	// ADC
	HAL_I2S_Receive_DMA(&hi2s2, ADC_BUFF.ADC16, 4);
 80015ea:	2204      	movs	r2, #4
 80015ec:	494a      	ldr	r1, [pc, #296]	; (8001718 <main+0x214>)
 80015ee:	484b      	ldr	r0, [pc, #300]	; (800171c <main+0x218>)
 80015f0:	f004 fc78 	bl	8005ee4 <HAL_I2S_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80015f4:	f00b fb84 	bl	800cd00 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 80015f8:	2200      	movs	r2, #0
 80015fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015fe:	4848      	ldr	r0, [pc, #288]	; (8001720 <main+0x21c>)
 8001600:	f001 fe66 	bl	80032d0 <HAL_GPIO_WritePin>

		if (Appli_state == APPLICATION_START) {
 8001604:	4b47      	ldr	r3, [pc, #284]	; (8001724 <main+0x220>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d10d      	bne.n	8001628 <main+0x124>
			if(f_mount(&usbFatFS, (TCHAR const*)USBHPath, 0) == FR_OK)
 800160c:	2200      	movs	r2, #0
 800160e:	4946      	ldr	r1, [pc, #280]	; (8001728 <main+0x224>)
 8001610:	4846      	ldr	r0, [pc, #280]	; (800172c <main+0x228>)
 8001612:	f00b faad 	bl	800cb70 <f_mount>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d121      	bne.n	8001660 <main+0x15c>
			{
				HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800161c:	2201      	movs	r2, #1
 800161e:	2108      	movs	r1, #8
 8001620:	4843      	ldr	r0, [pc, #268]	; (8001730 <main+0x22c>)
 8001622:	f001 fe55 	bl	80032d0 <HAL_GPIO_WritePin>
 8001626:	e01b      	b.n	8001660 <main+0x15c>
			}
		} else if (Appli_state == APPLICATION_DISCONNECT || Appli_state == APPLICATION_IDLE) {
 8001628:	4b3e      	ldr	r3, [pc, #248]	; (8001724 <main+0x220>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b03      	cmp	r3, #3
 800162e:	d003      	beq.n	8001638 <main+0x134>
 8001630:	4b3c      	ldr	r3, [pc, #240]	; (8001724 <main+0x220>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d10a      	bne.n	800164e <main+0x14a>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001638:	2200      	movs	r2, #0
 800163a:	2108      	movs	r1, #8
 800163c:	483c      	ldr	r0, [pc, #240]	; (8001730 <main+0x22c>)
 800163e:	f001 fe47 	bl	80032d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001642:	2200      	movs	r2, #0
 8001644:	2110      	movs	r1, #16
 8001646:	483a      	ldr	r0, [pc, #232]	; (8001730 <main+0x22c>)
 8001648:	f001 fe42 	bl	80032d0 <HAL_GPIO_WritePin>
 800164c:	e008      	b.n	8001660 <main+0x15c>
		} else if (Appli_state == APPLICATION_READY) {
 800164e:	4b35      	ldr	r3, [pc, #212]	; (8001724 <main+0x220>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d104      	bne.n	8001660 <main+0x15c>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001656:	2201      	movs	r2, #1
 8001658:	2110      	movs	r1, #16
 800165a:	4835      	ldr	r0, [pc, #212]	; (8001730 <main+0x22c>)
 800165c:	f001 fe38 	bl	80032d0 <HAL_GPIO_WritePin>
		} else {
			//aaa
		}

		HAL_Delay(7000);
 8001660:	f641 3058 	movw	r0, #7000	; 0x1b58
 8001664:	f000 fe98 	bl	8002398 <HAL_Delay>

		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8001668:	2201      	movs	r2, #1
 800166a:	2108      	movs	r1, #8
 800166c:	4830      	ldr	r0, [pc, #192]	; (8001730 <main+0x22c>)
 800166e:	f001 fe2f 	bl	80032d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001672:	2201      	movs	r2, #1
 8001674:	2110      	movs	r1, #16
 8001676:	482e      	ldr	r0, [pc, #184]	; (8001730 <main+0x22c>)
 8001678:	f001 fe2a 	bl	80032d0 <HAL_GPIO_WritePin>

		Command command;
		command.header = 0x05;
 800167c:	2305      	movs	r3, #5
 800167e:	703b      	strb	r3, [r7, #0]
		samples_count = (samples_count + 10) % 50;
 8001680:	4b2c      	ldr	r3, [pc, #176]	; (8001734 <main+0x230>)
 8001682:	f993 3000 	ldrsb.w	r3, [r3]
 8001686:	330a      	adds	r3, #10
 8001688:	4a2b      	ldr	r2, [pc, #172]	; (8001738 <main+0x234>)
 800168a:	fb82 1203 	smull	r1, r2, r2, r3
 800168e:	1111      	asrs	r1, r2, #4
 8001690:	17da      	asrs	r2, r3, #31
 8001692:	1a8a      	subs	r2, r1, r2
 8001694:	2132      	movs	r1, #50	; 0x32
 8001696:	fb01 f202 	mul.w	r2, r1, r2
 800169a:	1a9a      	subs	r2, r3, r2
 800169c:	b252      	sxtb	r2, r2
 800169e:	4b25      	ldr	r3, [pc, #148]	; (8001734 <main+0x230>)
 80016a0:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 128; i++) {
 80016a2:	2300      	movs	r3, #0
 80016a4:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 80016a8:	e00e      	b.n	80016c8 <main+0x1c4>
			//debug_samples[i] = 17;
			command.payload.bytes[i] = samples_count;
 80016aa:	4b22      	ldr	r3, [pc, #136]	; (8001734 <main+0x230>)
 80016ac:	f993 2000 	ldrsb.w	r2, [r3]
 80016b0:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	3390      	adds	r3, #144	; 0x90
 80016b8:	443b      	add	r3, r7
 80016ba:	f803 2c8c 	strb.w	r2, [r3, #-140]
		for(uint8_t i = 0; i < 128; i++) {
 80016be:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80016c2:	3301      	adds	r3, #1
 80016c4:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 80016c8:	f997 308b 	ldrsb.w	r3, [r7, #139]	; 0x8b
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	daec      	bge.n	80016aa <main+0x1a6>
		}
		Commander_Send(&hcommander, &command);
 80016d0:	463b      	mov	r3, r7
 80016d2:	4619      	mov	r1, r3
 80016d4:	4809      	ldr	r0, [pc, #36]	; (80016fc <main+0x1f8>)
 80016d6:	f000 fd82 	bl	80021de <Commander_Send>

		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80016da:	2200      	movs	r2, #0
 80016dc:	2108      	movs	r1, #8
 80016de:	4814      	ldr	r0, [pc, #80]	; (8001730 <main+0x22c>)
 80016e0:	f001 fdf6 	bl	80032d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016e4:	2200      	movs	r2, #0
 80016e6:	2110      	movs	r1, #16
 80016e8:	4811      	ldr	r0, [pc, #68]	; (8001730 <main+0x22c>)
 80016ea:	f001 fdf1 	bl	80032d0 <HAL_GPIO_WritePin>
	{
 80016ee:	e781      	b.n	80015f4 <main+0xf0>
 80016f0:	080012e9 	.word	0x080012e9
 80016f4:	200003d0 	.word	0x200003d0
 80016f8:	2000038c 	.word	0x2000038c
 80016fc:	20001464 	.word	0x20001464
 8001700:	40020400 	.word	0x40020400
 8001704:	20000004 	.word	0x20000004
 8001708:	20001dbc 	.word	0x20001dbc
 800170c:	435c0000 	.word	0x435c0000
 8001710:	467a0000 	.word	0x467a0000
 8001714:	20000284 	.word	0x20000284
 8001718:	20002ec8 	.word	0x20002ec8
 800171c:	2000023c 	.word	0x2000023c
 8001720:	40020800 	.word	0x40020800
 8001724:	20003308 	.word	0x20003308
 8001728:	20002ef8 	.word	0x20002ef8
 800172c:	20000430 	.word	0x20000430
 8001730:	40020c00 	.word	0x40020c00
 8001734:	20002ec4 	.word	0x20002ec4
 8001738:	51eb851f 	.word	0x51eb851f

0800173c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b094      	sub	sp, #80	; 0x50
 8001740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001742:	f107 0320 	add.w	r3, r7, #32
 8001746:	2230      	movs	r2, #48	; 0x30
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f00b fe32 	bl	800d3b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001760:	2300      	movs	r3, #0
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	4b28      	ldr	r3, [pc, #160]	; (8001808 <SystemClock_Config+0xcc>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	4a27      	ldr	r2, [pc, #156]	; (8001808 <SystemClock_Config+0xcc>)
 800176a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800176e:	6413      	str	r3, [r2, #64]	; 0x40
 8001770:	4b25      	ldr	r3, [pc, #148]	; (8001808 <SystemClock_Config+0xcc>)
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800177c:	2300      	movs	r3, #0
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	4b22      	ldr	r3, [pc, #136]	; (800180c <SystemClock_Config+0xd0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a21      	ldr	r2, [pc, #132]	; (800180c <SystemClock_Config+0xd0>)
 8001786:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	4b1f      	ldr	r3, [pc, #124]	; (800180c <SystemClock_Config+0xd0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001798:	2301      	movs	r3, #1
 800179a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800179c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a2:	2302      	movs	r3, #2
 80017a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017ac:	2304      	movs	r3, #4
 80017ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80017b0:	23a8      	movs	r3, #168	; 0xa8
 80017b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017b4:	2302      	movs	r3, #2
 80017b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80017b8:	2307      	movs	r3, #7
 80017ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017bc:	f107 0320 	add.w	r3, r7, #32
 80017c0:	4618      	mov	r0, r3
 80017c2:	f005 f81f 	bl	8006804 <HAL_RCC_OscConfig>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017cc:	f000 f9c8 	bl	8001b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d0:	230f      	movs	r3, #15
 80017d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017d4:	2302      	movs	r3, #2
 80017d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	2105      	movs	r1, #5
 80017ee:	4618      	mov	r0, r3
 80017f0:	f005 fa80 	bl	8006cf4 <HAL_RCC_ClockConfig>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017fa:	f000 f9b1 	bl	8001b60 <Error_Handler>
  }
}
 80017fe:	bf00      	nop
 8001800:	3750      	adds	r7, #80	; 0x50
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800
 800180c:	40007000 	.word	0x40007000

08001810 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001816:	463b      	mov	r3, r7
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001822:	2301      	movs	r3, #1
 8001824:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 196;
 8001826:	23c4      	movs	r3, #196	; 0xc4
 8001828:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 4;
 800182a:	2304      	movs	r3, #4
 800182c:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800182e:	463b      	mov	r3, r7
 8001830:	4618      	mov	r0, r3
 8001832:	f005 fc7f 	bl	8007134 <HAL_RCCEx_PeriphCLKConfig>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 800183c:	f000 f990 	bl	8001b60 <Error_Handler>
  }
}
 8001840:	bf00      	nop
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <MX_I2C1_Init+0x50>)
 800184e:	4a13      	ldr	r2, [pc, #76]	; (800189c <MX_I2C1_Init+0x54>)
 8001850:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <MX_I2C1_Init+0x50>)
 8001854:	4a12      	ldr	r2, [pc, #72]	; (80018a0 <MX_I2C1_Init+0x58>)
 8001856:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <MX_I2C1_Init+0x50>)
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800185e:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <MX_I2C1_Init+0x50>)
 8001860:	2200      	movs	r2, #0
 8001862:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <MX_I2C1_Init+0x50>)
 8001866:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800186a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800186c:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <MX_I2C1_Init+0x50>)
 800186e:	2200      	movs	r2, #0
 8001870:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <MX_I2C1_Init+0x50>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001878:	4b07      	ldr	r3, [pc, #28]	; (8001898 <MX_I2C1_Init+0x50>)
 800187a:	2200      	movs	r2, #0
 800187c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <MX_I2C1_Init+0x50>)
 8001880:	2200      	movs	r2, #0
 8001882:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001884:	4804      	ldr	r0, [pc, #16]	; (8001898 <MX_I2C1_Init+0x50>)
 8001886:	f003 f947 	bl	8004b18 <HAL_I2C_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001890:	f000 f966 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	200001e8 	.word	0x200001e8
 800189c:	40005400 	.word	0x40005400
 80018a0:	000186a0 	.word	0x000186a0

080018a4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80018a8:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <MX_I2S2_Init+0x54>)
 80018aa:	4a14      	ldr	r2, [pc, #80]	; (80018fc <MX_I2S2_Init+0x58>)
 80018ac:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80018ae:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <MX_I2S2_Init+0x54>)
 80018b0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80018b4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <MX_I2S2_Init+0x54>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80018bc:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <MX_I2S2_Init+0x54>)
 80018be:	2203      	movs	r2, #3
 80018c0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80018c2:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <MX_I2S2_Init+0x54>)
 80018c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c8:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80018ca:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <MX_I2S2_Init+0x54>)
 80018cc:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80018d0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <MX_I2S2_Init+0x54>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80018d8:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <MX_I2S2_Init+0x54>)
 80018da:	2200      	movs	r2, #0
 80018dc:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <MX_I2S2_Init+0x54>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80018e4:	4804      	ldr	r0, [pc, #16]	; (80018f8 <MX_I2S2_Init+0x54>)
 80018e6:	f004 f915 	bl	8005b14 <HAL_I2S_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 80018f0:	f000 f936 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	2000023c 	.word	0x2000023c
 80018fc:	40003800 	.word	0x40003800

08001900 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001904:	4b13      	ldr	r3, [pc, #76]	; (8001954 <MX_I2S3_Init+0x54>)
 8001906:	4a14      	ldr	r2, [pc, #80]	; (8001958 <MX_I2S3_Init+0x58>)
 8001908:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <MX_I2S3_Init+0x54>)
 800190c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001910:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001912:	4b10      	ldr	r3, [pc, #64]	; (8001954 <MX_I2S3_Init+0x54>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001918:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <MX_I2S3_Init+0x54>)
 800191a:	2200      	movs	r2, #0
 800191c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800191e:	4b0d      	ldr	r3, [pc, #52]	; (8001954 <MX_I2S3_Init+0x54>)
 8001920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001924:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001926:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <MX_I2S3_Init+0x54>)
 8001928:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800192c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <MX_I2S3_Init+0x54>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001934:	4b07      	ldr	r3, [pc, #28]	; (8001954 <MX_I2S3_Init+0x54>)
 8001936:	2200      	movs	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <MX_I2S3_Init+0x54>)
 800193c:	2200      	movs	r2, #0
 800193e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001940:	4804      	ldr	r0, [pc, #16]	; (8001954 <MX_I2S3_Init+0x54>)
 8001942:	f004 f8e7 	bl	8005b14 <HAL_I2S_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 800194c:	f000 f908 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000284 	.word	0x20000284
 8001958:	40003c00 	.word	0x40003c00

0800195c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <MX_USART1_UART_Init+0x4c>)
 8001962:	4a12      	ldr	r2, [pc, #72]	; (80019ac <MX_USART1_UART_Init+0x50>)
 8001964:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <MX_USART1_UART_Init+0x4c>)
 8001968:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800196c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <MX_USART1_UART_Init+0x4c>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <MX_USART1_UART_Init+0x4c>)
 8001976:	2200      	movs	r2, #0
 8001978:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800197a:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <MX_USART1_UART_Init+0x4c>)
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001980:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <MX_USART1_UART_Init+0x4c>)
 8001982:	220c      	movs	r2, #12
 8001984:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001986:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <MX_USART1_UART_Init+0x4c>)
 8001988:	2200      	movs	r2, #0
 800198a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <MX_USART1_UART_Init+0x4c>)
 800198e:	2200      	movs	r2, #0
 8001990:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001992:	4805      	ldr	r0, [pc, #20]	; (80019a8 <MX_USART1_UART_Init+0x4c>)
 8001994:	f005 fd3a 	bl	800740c <HAL_UART_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800199e:	f000 f8df 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	2000038c 	.word	0x2000038c
 80019ac:	40011000 	.word	0x40011000

080019b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <MX_DMA_Init+0x78>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a1a      	ldr	r2, [pc, #104]	; (8001a28 <MX_DMA_Init+0x78>)
 80019c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <MX_DMA_Init+0x78>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	603b      	str	r3, [r7, #0]
 80019d6:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <MX_DMA_Init+0x78>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a13      	ldr	r2, [pc, #76]	; (8001a28 <MX_DMA_Init+0x78>)
 80019dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <MX_DMA_Init+0x78>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2100      	movs	r1, #0
 80019f2:	200e      	movs	r0, #14
 80019f4:	f000 fdcf 	bl	8002596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80019f8:	200e      	movs	r0, #14
 80019fa:	f000 fde8 	bl	80025ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2100      	movs	r1, #0
 8001a02:	2010      	movs	r0, #16
 8001a04:	f000 fdc7 	bl	8002596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001a08:	2010      	movs	r0, #16
 8001a0a:	f000 fde0 	bl	80025ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2100      	movs	r1, #0
 8001a12:	203a      	movs	r0, #58	; 0x3a
 8001a14:	f000 fdbf 	bl	8002596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a18:	203a      	movs	r0, #58	; 0x3a
 8001a1a:	f000 fdd8 	bl	80025ce <HAL_NVIC_EnableIRQ>

}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800

08001a2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
 8001a40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	4b42      	ldr	r3, [pc, #264]	; (8001b50 <MX_GPIO_Init+0x124>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a41      	ldr	r2, [pc, #260]	; (8001b50 <MX_GPIO_Init+0x124>)
 8001a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b3f      	ldr	r3, [pc, #252]	; (8001b50 <MX_GPIO_Init+0x124>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	4b3b      	ldr	r3, [pc, #236]	; (8001b50 <MX_GPIO_Init+0x124>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a3a      	ldr	r2, [pc, #232]	; (8001b50 <MX_GPIO_Init+0x124>)
 8001a68:	f043 0302 	orr.w	r3, r3, #2
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b38      	ldr	r3, [pc, #224]	; (8001b50 <MX_GPIO_Init+0x124>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	4b34      	ldr	r3, [pc, #208]	; (8001b50 <MX_GPIO_Init+0x124>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a33      	ldr	r2, [pc, #204]	; (8001b50 <MX_GPIO_Init+0x124>)
 8001a84:	f043 0304 	orr.w	r3, r3, #4
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b31      	ldr	r3, [pc, #196]	; (8001b50 <MX_GPIO_Init+0x124>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	4b2d      	ldr	r3, [pc, #180]	; (8001b50 <MX_GPIO_Init+0x124>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a2c      	ldr	r2, [pc, #176]	; (8001b50 <MX_GPIO_Init+0x124>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b2a      	ldr	r3, [pc, #168]	; (8001b50 <MX_GPIO_Init+0x124>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	603b      	str	r3, [r7, #0]
 8001ab6:	4b26      	ldr	r3, [pc, #152]	; (8001b50 <MX_GPIO_Init+0x124>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a25      	ldr	r2, [pc, #148]	; (8001b50 <MX_GPIO_Init+0x124>)
 8001abc:	f043 0308 	orr.w	r3, r3, #8
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b23      	ldr	r3, [pc, #140]	; (8001b50 <MX_GPIO_Init+0x124>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	603b      	str	r3, [r7, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPKRPower_GPIO_Port, SPKRPower_Pin, GPIO_PIN_RESET);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ad4:	481f      	ldr	r0, [pc, #124]	; (8001b54 <MX_GPIO_Init+0x128>)
 8001ad6:	f001 fbfb 	bl	80032d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8001ada:	2200      	movs	r2, #0
 8001adc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ae0:	481d      	ldr	r0, [pc, #116]	; (8001b58 <MX_GPIO_Init+0x12c>)
 8001ae2:	f001 fbf5 	bl	80032d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2118      	movs	r1, #24
 8001aea:	481c      	ldr	r0, [pc, #112]	; (8001b5c <MX_GPIO_Init+0x130>)
 8001aec:	f001 fbf0 	bl	80032d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPKRPower_Pin */
  GPIO_InitStruct.Pin = SPKRPower_Pin;
 8001af0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af6:	2301      	movs	r3, #1
 8001af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afe:	2300      	movs	r3, #0
 8001b00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPKRPower_GPIO_Port, &GPIO_InitStruct);
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	4619      	mov	r1, r3
 8001b08:	4812      	ldr	r0, [pc, #72]	; (8001b54 <MX_GPIO_Init+0x128>)
 8001b0a:	f001 f949 	bl	8002da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OtgPower_Pin */
  GPIO_InitStruct.Pin = OtgPower_Pin;
 8001b0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b14:	2301      	movs	r3, #1
 8001b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OtgPower_GPIO_Port, &GPIO_InitStruct);
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	4619      	mov	r1, r3
 8001b26:	480c      	ldr	r0, [pc, #48]	; (8001b58 <MX_GPIO_Init+0x12c>)
 8001b28:	f001 f93a 	bl	8002da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 8001b2c:	2318      	movs	r3, #24
 8001b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b30:	2301      	movs	r3, #1
 8001b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	4619      	mov	r1, r3
 8001b42:	4806      	ldr	r0, [pc, #24]	; (8001b5c <MX_GPIO_Init+0x130>)
 8001b44:	f001 f92c 	bl	8002da0 <HAL_GPIO_Init>

}
 8001b48:	bf00      	nop
 8001b4a:	3728      	adds	r7, #40	; 0x28
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40020400 	.word	0x40020400
 8001b58:	40020800 	.word	0x40020800
 8001b5c:	40020c00 	.word	0x40020c00

08001b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b64:	b672      	cpsid	i
}
 8001b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001b68:	e7fe      	b.n	8001b68 <Error_Handler+0x8>
	...

08001b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <HAL_MspInit+0x4c>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	4a0f      	ldr	r2, [pc, #60]	; (8001bb8 <HAL_MspInit+0x4c>)
 8001b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b80:	6453      	str	r3, [r2, #68]	; 0x44
 8001b82:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <HAL_MspInit+0x4c>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	603b      	str	r3, [r7, #0]
 8001b92:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <HAL_MspInit+0x4c>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	4a08      	ldr	r2, [pc, #32]	; (8001bb8 <HAL_MspInit+0x4c>)
 8001b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_MspInit+0x4c>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	603b      	str	r3, [r7, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800

08001bbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	; 0x28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a19      	ldr	r2, [pc, #100]	; (8001c40 <HAL_I2C_MspInit+0x84>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d12c      	bne.n	8001c38 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	4b18      	ldr	r3, [pc, #96]	; (8001c44 <HAL_I2C_MspInit+0x88>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	4a17      	ldr	r2, [pc, #92]	; (8001c44 <HAL_I2C_MspInit+0x88>)
 8001be8:	f043 0302 	orr.w	r3, r3, #2
 8001bec:	6313      	str	r3, [r2, #48]	; 0x30
 8001bee:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <HAL_I2C_MspInit+0x88>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bfa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c00:	2312      	movs	r3, #18
 8001c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c0c:	2304      	movs	r3, #4
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	4619      	mov	r1, r3
 8001c16:	480c      	ldr	r0, [pc, #48]	; (8001c48 <HAL_I2C_MspInit+0x8c>)
 8001c18:	f001 f8c2 	bl	8002da0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <HAL_I2C_MspInit+0x88>)
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	4a07      	ldr	r2, [pc, #28]	; (8001c44 <HAL_I2C_MspInit+0x88>)
 8001c26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c2a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <HAL_I2C_MspInit+0x88>)
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c38:	bf00      	nop
 8001c3a:	3728      	adds	r7, #40	; 0x28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40005400 	.word	0x40005400
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40020400 	.word	0x40020400

08001c4c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0b      	ldr	r2, [pc, #44]	; (8001c88 <HAL_I2C_MspDeInit+0x3c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d10f      	bne.n	8001c7e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_I2C_MspDeInit+0x40>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <HAL_I2C_MspDeInit+0x40>)
 8001c64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c68:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001c6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c6e:	4808      	ldr	r0, [pc, #32]	; (8001c90 <HAL_I2C_MspDeInit+0x44>)
 8001c70:	f001 fa32 	bl	80030d8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001c74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c78:	4805      	ldr	r0, [pc, #20]	; (8001c90 <HAL_I2C_MspDeInit+0x44>)
 8001c7a:	f001 fa2d 	bl	80030d8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40005400 	.word	0x40005400
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40020400 	.word	0x40020400

08001c94 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08e      	sub	sp, #56	; 0x38
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a86      	ldr	r2, [pc, #536]	; (8001ecc <HAL_I2S_MspInit+0x238>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	f040 8085 	bne.w	8001dc2 <HAL_I2S_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cb8:	2300      	movs	r3, #0
 8001cba:	623b      	str	r3, [r7, #32]
 8001cbc:	4b84      	ldr	r3, [pc, #528]	; (8001ed0 <HAL_I2S_MspInit+0x23c>)
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	4a83      	ldr	r2, [pc, #524]	; (8001ed0 <HAL_I2S_MspInit+0x23c>)
 8001cc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc8:	4b81      	ldr	r3, [pc, #516]	; (8001ed0 <HAL_I2S_MspInit+0x23c>)
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd0:	623b      	str	r3, [r7, #32]
 8001cd2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61fb      	str	r3, [r7, #28]
 8001cd8:	4b7d      	ldr	r3, [pc, #500]	; (8001ed0 <HAL_I2S_MspInit+0x23c>)
 8001cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cdc:	4a7c      	ldr	r2, [pc, #496]	; (8001ed0 <HAL_I2S_MspInit+0x23c>)
 8001cde:	f043 0302 	orr.w	r3, r3, #2
 8001ce2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce4:	4b7a      	ldr	r3, [pc, #488]	; (8001ed0 <HAL_I2S_MspInit+0x23c>)
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	61fb      	str	r3, [r7, #28]
 8001cee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61bb      	str	r3, [r7, #24]
 8001cf4:	4b76      	ldr	r3, [pc, #472]	; (8001ed0 <HAL_I2S_MspInit+0x23c>)
 8001cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf8:	4a75      	ldr	r2, [pc, #468]	; (8001ed0 <HAL_I2S_MspInit+0x23c>)
 8001cfa:	f043 0304 	orr.w	r3, r3, #4
 8001cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8001d00:	4b73      	ldr	r3, [pc, #460]	; (8001ed0 <HAL_I2S_MspInit+0x23c>)
 8001d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	61bb      	str	r3, [r7, #24]
 8001d0a:	69bb      	ldr	r3, [r7, #24]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001d0c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d12:	2302      	movs	r3, #2
 8001d14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d1e:	2305      	movs	r3, #5
 8001d20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d26:	4619      	mov	r1, r3
 8001d28:	486a      	ldr	r0, [pc, #424]	; (8001ed4 <HAL_I2S_MspInit+0x240>)
 8001d2a:	f001 f839 	bl	8002da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d2e:	2340      	movs	r3, #64	; 0x40
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d3e:	2305      	movs	r3, #5
 8001d40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d46:	4619      	mov	r1, r3
 8001d48:	4863      	ldr	r0, [pc, #396]	; (8001ed8 <HAL_I2S_MspInit+0x244>)
 8001d4a:	f001 f829 	bl	8002da0 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001d4e:	4b63      	ldr	r3, [pc, #396]	; (8001edc <HAL_I2S_MspInit+0x248>)
 8001d50:	4a63      	ldr	r2, [pc, #396]	; (8001ee0 <HAL_I2S_MspInit+0x24c>)
 8001d52:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001d54:	4b61      	ldr	r3, [pc, #388]	; (8001edc <HAL_I2S_MspInit+0x248>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d5a:	4b60      	ldr	r3, [pc, #384]	; (8001edc <HAL_I2S_MspInit+0x248>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d60:	4b5e      	ldr	r3, [pc, #376]	; (8001edc <HAL_I2S_MspInit+0x248>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d66:	4b5d      	ldr	r3, [pc, #372]	; (8001edc <HAL_I2S_MspInit+0x248>)
 8001d68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d6c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d6e:	4b5b      	ldr	r3, [pc, #364]	; (8001edc <HAL_I2S_MspInit+0x248>)
 8001d70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d74:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d76:	4b59      	ldr	r3, [pc, #356]	; (8001edc <HAL_I2S_MspInit+0x248>)
 8001d78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d7c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001d7e:	4b57      	ldr	r3, [pc, #348]	; (8001edc <HAL_I2S_MspInit+0x248>)
 8001d80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d84:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d86:	4b55      	ldr	r3, [pc, #340]	; (8001edc <HAL_I2S_MspInit+0x248>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001d8c:	4b53      	ldr	r3, [pc, #332]	; (8001edc <HAL_I2S_MspInit+0x248>)
 8001d8e:	2204      	movs	r2, #4
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001d92:	4b52      	ldr	r3, [pc, #328]	; (8001edc <HAL_I2S_MspInit+0x248>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001d98:	4b50      	ldr	r3, [pc, #320]	; (8001edc <HAL_I2S_MspInit+0x248>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001d9e:	4b4f      	ldr	r3, [pc, #316]	; (8001edc <HAL_I2S_MspInit+0x248>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001da4:	484d      	ldr	r0, [pc, #308]	; (8001edc <HAL_I2S_MspInit+0x248>)
 8001da6:	f000 fc2d 	bl	8002604 <HAL_DMA_Init>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <HAL_I2S_MspInit+0x120>
    {
      Error_Handler();
 8001db0:	f7ff fed6 	bl	8001b60 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a49      	ldr	r2, [pc, #292]	; (8001edc <HAL_I2S_MspInit+0x248>)
 8001db8:	63da      	str	r2, [r3, #60]	; 0x3c
 8001dba:	4a48      	ldr	r2, [pc, #288]	; (8001edc <HAL_I2S_MspInit+0x248>)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001dc0:	e080      	b.n	8001ec4 <HAL_I2S_MspInit+0x230>
  else if(hi2s->Instance==SPI3)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a47      	ldr	r2, [pc, #284]	; (8001ee4 <HAL_I2S_MspInit+0x250>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d17b      	bne.n	8001ec4 <HAL_I2S_MspInit+0x230>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	4b3f      	ldr	r3, [pc, #252]	; (8001ed0 <HAL_I2S_MspInit+0x23c>)
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	4a3e      	ldr	r2, [pc, #248]	; (8001ed0 <HAL_I2S_MspInit+0x23c>)
 8001dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dda:	6413      	str	r3, [r2, #64]	; 0x40
 8001ddc:	4b3c      	ldr	r3, [pc, #240]	; (8001ed0 <HAL_I2S_MspInit+0x23c>)
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de8:	2300      	movs	r3, #0
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	4b38      	ldr	r3, [pc, #224]	; (8001ed0 <HAL_I2S_MspInit+0x23c>)
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	4a37      	ldr	r2, [pc, #220]	; (8001ed0 <HAL_I2S_MspInit+0x23c>)
 8001df2:	f043 0304 	orr.w	r3, r3, #4
 8001df6:	6313      	str	r3, [r2, #48]	; 0x30
 8001df8:	4b35      	ldr	r3, [pc, #212]	; (8001ed0 <HAL_I2S_MspInit+0x23c>)
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e04:	2300      	movs	r3, #0
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	4b31      	ldr	r3, [pc, #196]	; (8001ed0 <HAL_I2S_MspInit+0x23c>)
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	4a30      	ldr	r2, [pc, #192]	; (8001ed0 <HAL_I2S_MspInit+0x23c>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6313      	str	r3, [r2, #48]	; 0x30
 8001e14:	4b2e      	ldr	r3, [pc, #184]	; (8001ed0 <HAL_I2S_MspInit+0x23c>)
 8001e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001e20:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e26:	2302      	movs	r3, #2
 8001e28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e32:	2306      	movs	r3, #6
 8001e34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4826      	ldr	r0, [pc, #152]	; (8001ed8 <HAL_I2S_MspInit+0x244>)
 8001e3e:	f000 ffaf 	bl	8002da0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e50:	2300      	movs	r3, #0
 8001e52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e54:	2306      	movs	r3, #6
 8001e56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4822      	ldr	r0, [pc, #136]	; (8001ee8 <HAL_I2S_MspInit+0x254>)
 8001e60:	f000 ff9e 	bl	8002da0 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001e64:	4b21      	ldr	r3, [pc, #132]	; (8001eec <HAL_I2S_MspInit+0x258>)
 8001e66:	4a22      	ldr	r2, [pc, #136]	; (8001ef0 <HAL_I2S_MspInit+0x25c>)
 8001e68:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001e6a:	4b20      	ldr	r3, [pc, #128]	; (8001eec <HAL_I2S_MspInit+0x258>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e70:	4b1e      	ldr	r3, [pc, #120]	; (8001eec <HAL_I2S_MspInit+0x258>)
 8001e72:	2240      	movs	r2, #64	; 0x40
 8001e74:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e76:	4b1d      	ldr	r3, [pc, #116]	; (8001eec <HAL_I2S_MspInit+0x258>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e7c:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <HAL_I2S_MspInit+0x258>)
 8001e7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e82:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e84:	4b19      	ldr	r3, [pc, #100]	; (8001eec <HAL_I2S_MspInit+0x258>)
 8001e86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e8a:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e8c:	4b17      	ldr	r3, [pc, #92]	; (8001eec <HAL_I2S_MspInit+0x258>)
 8001e8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e92:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001e94:	4b15      	ldr	r3, [pc, #84]	; (8001eec <HAL_I2S_MspInit+0x258>)
 8001e96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e9a:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e9c:	4b13      	ldr	r3, [pc, #76]	; (8001eec <HAL_I2S_MspInit+0x258>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ea2:	4b12      	ldr	r3, [pc, #72]	; (8001eec <HAL_I2S_MspInit+0x258>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001ea8:	4810      	ldr	r0, [pc, #64]	; (8001eec <HAL_I2S_MspInit+0x258>)
 8001eaa:	f000 fbab 	bl	8002604 <HAL_DMA_Init>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <HAL_I2S_MspInit+0x224>
      Error_Handler();
 8001eb4:	f7ff fe54 	bl	8001b60 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a0c      	ldr	r2, [pc, #48]	; (8001eec <HAL_I2S_MspInit+0x258>)
 8001ebc:	639a      	str	r2, [r3, #56]	; 0x38
 8001ebe:	4a0b      	ldr	r2, [pc, #44]	; (8001eec <HAL_I2S_MspInit+0x258>)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001ec4:	bf00      	nop
 8001ec6:	3738      	adds	r7, #56	; 0x38
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40003800 	.word	0x40003800
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40020400 	.word	0x40020400
 8001ed8:	40020800 	.word	0x40020800
 8001edc:	200002cc 	.word	0x200002cc
 8001ee0:	40026058 	.word	0x40026058
 8001ee4:	40003c00 	.word	0x40003c00
 8001ee8:	40020000 	.word	0x40020000
 8001eec:	2000032c 	.word	0x2000032c
 8001ef0:	40026088 	.word	0x40026088

08001ef4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	; 0x28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a30      	ldr	r2, [pc, #192]	; (8001fd4 <HAL_UART_MspInit+0xe0>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d15a      	bne.n	8001fcc <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	4b2f      	ldr	r3, [pc, #188]	; (8001fd8 <HAL_UART_MspInit+0xe4>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1e:	4a2e      	ldr	r2, [pc, #184]	; (8001fd8 <HAL_UART_MspInit+0xe4>)
 8001f20:	f043 0310 	orr.w	r3, r3, #16
 8001f24:	6453      	str	r3, [r2, #68]	; 0x44
 8001f26:	4b2c      	ldr	r3, [pc, #176]	; (8001fd8 <HAL_UART_MspInit+0xe4>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	f003 0310 	and.w	r3, r3, #16
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	4b28      	ldr	r3, [pc, #160]	; (8001fd8 <HAL_UART_MspInit+0xe4>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a27      	ldr	r2, [pc, #156]	; (8001fd8 <HAL_UART_MspInit+0xe4>)
 8001f3c:	f043 0302 	orr.w	r3, r3, #2
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b25      	ldr	r3, [pc, #148]	; (8001fd8 <HAL_UART_MspInit+0xe4>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f4e:	23c0      	movs	r3, #192	; 0xc0
 8001f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f52:	2302      	movs	r3, #2
 8001f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f5e:	2307      	movs	r3, #7
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f62:	f107 0314 	add.w	r3, r7, #20
 8001f66:	4619      	mov	r1, r3
 8001f68:	481c      	ldr	r0, [pc, #112]	; (8001fdc <HAL_UART_MspInit+0xe8>)
 8001f6a:	f000 ff19 	bl	8002da0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001f6e:	4b1c      	ldr	r3, [pc, #112]	; (8001fe0 <HAL_UART_MspInit+0xec>)
 8001f70:	4a1c      	ldr	r2, [pc, #112]	; (8001fe4 <HAL_UART_MspInit+0xf0>)
 8001f72:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001f74:	4b1a      	ldr	r3, [pc, #104]	; (8001fe0 <HAL_UART_MspInit+0xec>)
 8001f76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f7a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f7c:	4b18      	ldr	r3, [pc, #96]	; (8001fe0 <HAL_UART_MspInit+0xec>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f82:	4b17      	ldr	r3, [pc, #92]	; (8001fe0 <HAL_UART_MspInit+0xec>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f88:	4b15      	ldr	r3, [pc, #84]	; (8001fe0 <HAL_UART_MspInit+0xec>)
 8001f8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f8e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f90:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <HAL_UART_MspInit+0xec>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f96:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <HAL_UART_MspInit+0xec>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001f9c:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <HAL_UART_MspInit+0xec>)
 8001f9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fa2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fa4:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <HAL_UART_MspInit+0xec>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001faa:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <HAL_UART_MspInit+0xec>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001fb0:	480b      	ldr	r0, [pc, #44]	; (8001fe0 <HAL_UART_MspInit+0xec>)
 8001fb2:	f000 fb27 	bl	8002604 <HAL_DMA_Init>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001fbc:	f7ff fdd0 	bl	8001b60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a07      	ldr	r2, [pc, #28]	; (8001fe0 <HAL_UART_MspInit+0xec>)
 8001fc4:	639a      	str	r2, [r3, #56]	; 0x38
 8001fc6:	4a06      	ldr	r2, [pc, #24]	; (8001fe0 <HAL_UART_MspInit+0xec>)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001fcc:	bf00      	nop
 8001fce:	3728      	adds	r7, #40	; 0x28
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40011000 	.word	0x40011000
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40020400 	.word	0x40020400
 8001fe0:	200003d0 	.word	0x200003d0
 8001fe4:	40026440 	.word	0x40026440

08001fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fec:	e7fe      	b.n	8001fec <NMI_Handler+0x4>

08001fee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff2:	e7fe      	b.n	8001ff2 <HardFault_Handler+0x4>

08001ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff8:	e7fe      	b.n	8001ff8 <MemManage_Handler+0x4>

08001ffa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ffe:	e7fe      	b.n	8001ffe <BusFault_Handler+0x4>

08002000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002004:	e7fe      	b.n	8002004 <UsageFault_Handler+0x4>

08002006 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002034:	f000 f990 	bl	8002358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002038:	bf00      	nop
 800203a:	bd80      	pop	{r7, pc}

0800203c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002040:	4802      	ldr	r0, [pc, #8]	; (800204c <DMA1_Stream3_IRQHandler+0x10>)
 8002042:	f000 fc43 	bl	80028cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200002cc 	.word	0x200002cc

08002050 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8002054:	4802      	ldr	r0, [pc, #8]	; (8002060 <DMA1_Stream5_IRQHandler+0x10>)
 8002056:	f000 fc39 	bl	80028cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	2000032c 	.word	0x2000032c

08002064 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002068:	4802      	ldr	r0, [pc, #8]	; (8002074 <DMA2_Stream2_IRQHandler+0x10>)
 800206a:	f000 fc2f 	bl	80028cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	200003d0 	.word	0x200003d0

08002078 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800207c:	4802      	ldr	r0, [pc, #8]	; (8002088 <OTG_FS_IRQHandler+0x10>)
 800207e:	f001 fbab 	bl	80037d8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	2000330c 	.word	0x2000330c

0800208c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002094:	4a14      	ldr	r2, [pc, #80]	; (80020e8 <_sbrk+0x5c>)
 8002096:	4b15      	ldr	r3, [pc, #84]	; (80020ec <_sbrk+0x60>)
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020a0:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <_sbrk+0x64>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d102      	bne.n	80020ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <_sbrk+0x64>)
 80020aa:	4a12      	ldr	r2, [pc, #72]	; (80020f4 <_sbrk+0x68>)
 80020ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ae:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <_sbrk+0x64>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4413      	add	r3, r2
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d207      	bcs.n	80020cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020bc:	f00b f932 	bl	800d324 <__errno>
 80020c0:	4603      	mov	r3, r0
 80020c2:	220c      	movs	r2, #12
 80020c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020ca:	e009      	b.n	80020e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020cc:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <_sbrk+0x64>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020d2:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <_sbrk+0x64>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4413      	add	r3, r2
 80020da:	4a05      	ldr	r2, [pc, #20]	; (80020f0 <_sbrk+0x64>)
 80020dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020de:	68fb      	ldr	r3, [r7, #12]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20020000 	.word	0x20020000
 80020ec:	00000400 	.word	0x00000400
 80020f0:	20002eec 	.word	0x20002eec
 80020f4:	20003620 	.word	0x20003620

080020f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020fc:	4b06      	ldr	r3, [pc, #24]	; (8002118 <SystemInit+0x20>)
 80020fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002102:	4a05      	ldr	r2, [pc, #20]	; (8002118 <SystemInit+0x20>)
 8002104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800211c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002154 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002120:	480d      	ldr	r0, [pc, #52]	; (8002158 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002122:	490e      	ldr	r1, [pc, #56]	; (800215c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002124:	4a0e      	ldr	r2, [pc, #56]	; (8002160 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002128:	e002      	b.n	8002130 <LoopCopyDataInit>

0800212a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800212a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800212c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800212e:	3304      	adds	r3, #4

08002130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002134:	d3f9      	bcc.n	800212a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002136:	4a0b      	ldr	r2, [pc, #44]	; (8002164 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002138:	4c0b      	ldr	r4, [pc, #44]	; (8002168 <LoopFillZerobss+0x26>)
  movs r3, #0
 800213a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800213c:	e001      	b.n	8002142 <LoopFillZerobss>

0800213e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800213e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002140:	3204      	adds	r2, #4

08002142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002144:	d3fb      	bcc.n	800213e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002146:	f7ff ffd7 	bl	80020f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800214a:	f00b f8f1 	bl	800d330 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800214e:	f7ff f9d9 	bl	8001504 <main>
  bx  lr    
 8002152:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002154:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002158:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800215c:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8002160:	0800d880 	.word	0x0800d880
  ldr r2, =_sbss
 8002164:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8002168:	20003620 	.word	0x20003620

0800216c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800216c:	e7fe      	b.n	800216c <ADC_IRQHandler>

0800216e <Commander_Init>:

#include "stm32f4xx_hal.h"
#include "commander.h"
#include <string.h>

void Commander_Init(Commander_HandleTypeDef *hcommander, UART_HandleTypeDef *huart, DMA_HandleTypeDef *hdma_uart_rx, void (*command_callback)(Command command)) {
 800216e:	b480      	push	{r7}
 8002170:	b085      	sub	sp, #20
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	603b      	str	r3, [r7, #0]
	hcommander->huart = huart;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	601a      	str	r2, [r3, #0]
	hcommander->hdma_uart_rx = hdma_uart_rx;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	605a      	str	r2, [r3, #4]
	hcommander->rear = -1;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	22ff      	movs	r2, #255	; 0xff
 800218c:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
	hcommander->front = -1;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	22ff      	movs	r2, #255	; 0xff
 8002194:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
	hcommander->commands_to_handle = 0;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
	hcommander->counter = 0;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f8c3 2950 	str.w	r2, [r3, #2384]	; 0x950
	hcommander->command_callback = command_callback;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	f8c3 2954 	str.w	r2, [r3, #2388]	; 0x954
}
 80021b0:	bf00      	nop
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <Commander_Start>:

void Commander_Start(Commander_HandleTypeDef *hcommander) {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(hcommander->huart, hcommander->uart_rx_buffer, COMMAND_BYTESIZE * 2);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6818      	ldr	r0, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3308      	adds	r3, #8
 80021cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021d0:	4619      	mov	r1, r3
 80021d2:	f005 f9fa 	bl	80075ca <HAL_UART_Receive_DMA>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <Commander_Send>:

void Commander_Send(Commander_HandleTypeDef *hcommander, Command *command) {
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
	//HAL_StatusTypeDef status;
	/*status = */HAL_UART_Transmit(hcommander->huart, (uint8_t *)command, COMMAND_BYTESIZE, 1000);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6818      	ldr	r0, [r3, #0]
 80021ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021f0:	2282      	movs	r2, #130	; 0x82
 80021f2:	6839      	ldr	r1, [r7, #0]
 80021f4:	f005 f957 	bl	80074a6 <HAL_UART_Transmit>
}
 80021f8:	bf00      	nop
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <Commander_Enqueue>:
			else hcommander->front++;
		}
	}
}

void Commander_Enqueue(Commander_HandleTypeDef *hcommander, Command *command) {
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]


	if((hcommander->front == 0 && hcommander->rear == COMMANDS_COUNT-1) || (hcommander->front == hcommander->rear+1)) {
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f993 394d 	ldrsb.w	r3, [r3, #2381]	; 0x94d
 8002210:	2b00      	cmp	r3, #0
 8002212:	d104      	bne.n	800221e <Commander_Enqueue+0x1e>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f993 394c 	ldrsb.w	r3, [r3, #2380]	; 0x94c
 800221a:	2b0f      	cmp	r3, #15
 800221c:	d046      	beq.n	80022ac <Commander_Enqueue+0xac>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f993 394d 	ldrsb.w	r3, [r3, #2381]	; 0x94d
 8002224:	461a      	mov	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f993 394c 	ldrsb.w	r3, [r3, #2380]	; 0x94c
 800222c:	3301      	adds	r3, #1
 800222e:	429a      	cmp	r2, r3
 8002230:	d03c      	beq.n	80022ac <Commander_Enqueue+0xac>
		// overflow
	} else {
		if(hcommander->front == -1) {
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f993 394d 	ldrsb.w	r3, [r3, #2381]	; 0x94d
 8002238:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800223c:	d108      	bne.n	8002250 <Commander_Enqueue+0x50>
			hcommander->front = 0;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
			hcommander->rear = 0;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
 800224e:	e013      	b.n	8002278 <Commander_Enqueue+0x78>
		} else {
			if(hcommander->rear == COMMANDS_COUNT-1) hcommander->rear = 0;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f993 394c 	ldrsb.w	r3, [r3, #2380]	; 0x94c
 8002256:	2b0f      	cmp	r3, #15
 8002258:	d104      	bne.n	8002264 <Commander_Enqueue+0x64>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
 8002262:	e009      	b.n	8002278 <Commander_Enqueue+0x78>
			else hcommander->rear++;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f993 394c 	ldrsb.w	r3, [r3, #2380]	; 0x94c
 800226a:	b2db      	uxtb	r3, r3
 800226c:	3301      	adds	r3, #1
 800226e:	b2db      	uxtb	r3, r3
 8002270:	b25a      	sxtb	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
		}
		memcpy(hcommander->command_buffer + hcommander->rear, command, COMMAND_BYTESIZE);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f503 7286 	add.w	r2, r3, #268	; 0x10c
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f993 394c 	ldrsb.w	r3, [r3, #2380]	; 0x94c
 8002284:	4619      	mov	r1, r3
 8002286:	460b      	mov	r3, r1
 8002288:	015b      	lsls	r3, r3, #5
 800228a:	440b      	add	r3, r1
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	2282      	movs	r2, #130	; 0x82
 8002292:	6839      	ldr	r1, [r7, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f00b f87f 	bl	800d398 <memcpy>
		hcommander->commands_to_handle++;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 394e 	ldrb.w	r3, [r3, #2382]	; 0x94e
 80022a0:	3301      	adds	r3, #1
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
	}


}
 80022aa:	e7ff      	b.n	80022ac <Commander_Enqueue+0xac>
 80022ac:	bf00      	nop
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022b8:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <HAL_Init+0x40>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a0d      	ldr	r2, [pc, #52]	; (80022f4 <HAL_Init+0x40>)
 80022be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_Init+0x40>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a0a      	ldr	r2, [pc, #40]	; (80022f4 <HAL_Init+0x40>)
 80022ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022d0:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <HAL_Init+0x40>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a07      	ldr	r2, [pc, #28]	; (80022f4 <HAL_Init+0x40>)
 80022d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022dc:	2003      	movs	r0, #3
 80022de:	f000 f94f 	bl	8002580 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022e2:	200f      	movs	r0, #15
 80022e4:	f000 f808 	bl	80022f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022e8:	f7ff fc40 	bl	8001b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40023c00 	.word	0x40023c00

080022f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002300:	4b12      	ldr	r3, [pc, #72]	; (800234c <HAL_InitTick+0x54>)
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	4b12      	ldr	r3, [pc, #72]	; (8002350 <HAL_InitTick+0x58>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	4619      	mov	r1, r3
 800230a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800230e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002312:	fbb2 f3f3 	udiv	r3, r2, r3
 8002316:	4618      	mov	r0, r3
 8002318:	f000 f967 	bl	80025ea <HAL_SYSTICK_Config>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e00e      	b.n	8002344 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b0f      	cmp	r3, #15
 800232a:	d80a      	bhi.n	8002342 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800232c:	2200      	movs	r2, #0
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002334:	f000 f92f 	bl	8002596 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002338:	4a06      	ldr	r2, [pc, #24]	; (8002354 <HAL_InitTick+0x5c>)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	e000      	b.n	8002344 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
}
 8002344:	4618      	mov	r0, r3
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20000038 	.word	0x20000038
 8002350:	20000040 	.word	0x20000040
 8002354:	2000003c 	.word	0x2000003c

08002358 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <HAL_IncTick+0x20>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	461a      	mov	r2, r3
 8002362:	4b06      	ldr	r3, [pc, #24]	; (800237c <HAL_IncTick+0x24>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4413      	add	r3, r2
 8002368:	4a04      	ldr	r2, [pc, #16]	; (800237c <HAL_IncTick+0x24>)
 800236a:	6013      	str	r3, [r2, #0]
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	20000040 	.word	0x20000040
 800237c:	20002ef0 	.word	0x20002ef0

08002380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return uwTick;
 8002384:	4b03      	ldr	r3, [pc, #12]	; (8002394 <HAL_GetTick+0x14>)
 8002386:	681b      	ldr	r3, [r3, #0]
}
 8002388:	4618      	mov	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	20002ef0 	.word	0x20002ef0

08002398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023a0:	f7ff ffee 	bl	8002380 <HAL_GetTick>
 80023a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023b0:	d005      	beq.n	80023be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023b2:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <HAL_Delay+0x44>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4413      	add	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023be:	bf00      	nop
 80023c0:	f7ff ffde 	bl	8002380 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d8f7      	bhi.n	80023c0 <HAL_Delay+0x28>
  {
  }
}
 80023d0:	bf00      	nop
 80023d2:	bf00      	nop
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000040 	.word	0x20000040

080023e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023f0:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <__NVIC_SetPriorityGrouping+0x44>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023fc:	4013      	ands	r3, r2
 80023fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002408:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800240c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002412:	4a04      	ldr	r2, [pc, #16]	; (8002424 <__NVIC_SetPriorityGrouping+0x44>)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	60d3      	str	r3, [r2, #12]
}
 8002418:	bf00      	nop
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800242c:	4b04      	ldr	r3, [pc, #16]	; (8002440 <__NVIC_GetPriorityGrouping+0x18>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	0a1b      	lsrs	r3, r3, #8
 8002432:	f003 0307 	and.w	r3, r3, #7
}
 8002436:	4618      	mov	r0, r3
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800244e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002452:	2b00      	cmp	r3, #0
 8002454:	db0b      	blt.n	800246e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	f003 021f 	and.w	r2, r3, #31
 800245c:	4907      	ldr	r1, [pc, #28]	; (800247c <__NVIC_EnableIRQ+0x38>)
 800245e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	2001      	movs	r0, #1
 8002466:	fa00 f202 	lsl.w	r2, r0, r2
 800246a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	e000e100 	.word	0xe000e100

08002480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	6039      	str	r1, [r7, #0]
 800248a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800248c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002490:	2b00      	cmp	r3, #0
 8002492:	db0a      	blt.n	80024aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	b2da      	uxtb	r2, r3
 8002498:	490c      	ldr	r1, [pc, #48]	; (80024cc <__NVIC_SetPriority+0x4c>)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	0112      	lsls	r2, r2, #4
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	440b      	add	r3, r1
 80024a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024a8:	e00a      	b.n	80024c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4908      	ldr	r1, [pc, #32]	; (80024d0 <__NVIC_SetPriority+0x50>)
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	3b04      	subs	r3, #4
 80024b8:	0112      	lsls	r2, r2, #4
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	440b      	add	r3, r1
 80024be:	761a      	strb	r2, [r3, #24]
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000e100 	.word	0xe000e100
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b089      	sub	sp, #36	; 0x24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f1c3 0307 	rsb	r3, r3, #7
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	bf28      	it	cs
 80024f2:	2304      	movcs	r3, #4
 80024f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3304      	adds	r3, #4
 80024fa:	2b06      	cmp	r3, #6
 80024fc:	d902      	bls.n	8002504 <NVIC_EncodePriority+0x30>
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	3b03      	subs	r3, #3
 8002502:	e000      	b.n	8002506 <NVIC_EncodePriority+0x32>
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002508:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43da      	mvns	r2, r3
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	401a      	ands	r2, r3
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800251c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	fa01 f303 	lsl.w	r3, r1, r3
 8002526:	43d9      	mvns	r1, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800252c:	4313      	orrs	r3, r2
         );
}
 800252e:	4618      	mov	r0, r3
 8002530:	3724      	adds	r7, #36	; 0x24
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
	...

0800253c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3b01      	subs	r3, #1
 8002548:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800254c:	d301      	bcc.n	8002552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800254e:	2301      	movs	r3, #1
 8002550:	e00f      	b.n	8002572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002552:	4a0a      	ldr	r2, [pc, #40]	; (800257c <SysTick_Config+0x40>)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3b01      	subs	r3, #1
 8002558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800255a:	210f      	movs	r1, #15
 800255c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002560:	f7ff ff8e 	bl	8002480 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002564:	4b05      	ldr	r3, [pc, #20]	; (800257c <SysTick_Config+0x40>)
 8002566:	2200      	movs	r2, #0
 8002568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800256a:	4b04      	ldr	r3, [pc, #16]	; (800257c <SysTick_Config+0x40>)
 800256c:	2207      	movs	r2, #7
 800256e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	e000e010 	.word	0xe000e010

08002580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff ff29 	bl	80023e0 <__NVIC_SetPriorityGrouping>
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002596:	b580      	push	{r7, lr}
 8002598:	b086      	sub	sp, #24
 800259a:	af00      	add	r7, sp, #0
 800259c:	4603      	mov	r3, r0
 800259e:	60b9      	str	r1, [r7, #8]
 80025a0:	607a      	str	r2, [r7, #4]
 80025a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025a8:	f7ff ff3e 	bl	8002428 <__NVIC_GetPriorityGrouping>
 80025ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	68b9      	ldr	r1, [r7, #8]
 80025b2:	6978      	ldr	r0, [r7, #20]
 80025b4:	f7ff ff8e 	bl	80024d4 <NVIC_EncodePriority>
 80025b8:	4602      	mov	r2, r0
 80025ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025be:	4611      	mov	r1, r2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ff5d 	bl	8002480 <__NVIC_SetPriority>
}
 80025c6:	bf00      	nop
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b082      	sub	sp, #8
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	4603      	mov	r3, r0
 80025d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ff31 	bl	8002444 <__NVIC_EnableIRQ>
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7ff ffa2 	bl	800253c <SysTick_Config>
 80025f8:	4603      	mov	r3, r0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002610:	f7ff feb6 	bl	8002380 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e099      	b.n	8002754 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2202      	movs	r2, #2
 8002624:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0201 	bic.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002640:	e00f      	b.n	8002662 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002642:	f7ff fe9d 	bl	8002380 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b05      	cmp	r3, #5
 800264e:	d908      	bls.n	8002662 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2220      	movs	r2, #32
 8002654:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2203      	movs	r2, #3
 800265a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e078      	b.n	8002754 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1e8      	bne.n	8002642 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	4b38      	ldr	r3, [pc, #224]	; (800275c <HAL_DMA_Init+0x158>)
 800267c:	4013      	ands	r3, r2
 800267e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800268e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800269a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	2b04      	cmp	r3, #4
 80026ba:	d107      	bne.n	80026cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c4:	4313      	orrs	r3, r2
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f023 0307 	bic.w	r3, r3, #7
 80026e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	d117      	bne.n	8002726 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00e      	beq.n	8002726 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 facd 	bl	8002ca8 <DMA_CheckFifoParam>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d008      	beq.n	8002726 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2240      	movs	r2, #64	; 0x40
 8002718:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002722:	2301      	movs	r3, #1
 8002724:	e016      	b.n	8002754 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 fa84 	bl	8002c3c <DMA_CalcBaseAndBitshift>
 8002734:	4603      	mov	r3, r0
 8002736:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273c:	223f      	movs	r2, #63	; 0x3f
 800273e:	409a      	lsls	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	f010803f 	.word	0xf010803f

08002760 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e050      	b.n	8002814 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d101      	bne.n	8002782 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800277e:	2302      	movs	r3, #2
 8002780:	e048      	b.n	8002814 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0201 	bic.w	r2, r2, #1
 8002790:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2200      	movs	r2, #0
 80027a0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2200      	movs	r2, #0
 80027a8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2200      	movs	r2, #0
 80027b0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2200      	movs	r2, #0
 80027b8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2221      	movs	r2, #33	; 0x21
 80027c0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 fa3a 	bl	8002c3c <DMA_CalcBaseAndBitshift>
 80027c8:	4603      	mov	r3, r0
 80027ca:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f4:	223f      	movs	r2, #63	; 0x3f
 80027f6:	409a      	lsls	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
 8002828:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002832:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800283a:	2b01      	cmp	r3, #1
 800283c:	d101      	bne.n	8002842 <HAL_DMA_Start_IT+0x26>
 800283e:	2302      	movs	r3, #2
 8002840:	e040      	b.n	80028c4 <HAL_DMA_Start_IT+0xa8>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b01      	cmp	r3, #1
 8002854:	d12f      	bne.n	80028b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2202      	movs	r2, #2
 800285a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	68b9      	ldr	r1, [r7, #8]
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 f9b8 	bl	8002be0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002874:	223f      	movs	r2, #63	; 0x3f
 8002876:	409a      	lsls	r2, r3
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0216 	orr.w	r2, r2, #22
 800288a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	2b00      	cmp	r3, #0
 8002892:	d007      	beq.n	80028a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0208 	orr.w	r2, r2, #8
 80028a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0201 	orr.w	r2, r2, #1
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	e005      	b.n	80028c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028be:	2302      	movs	r3, #2
 80028c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028d8:	4b8e      	ldr	r3, [pc, #568]	; (8002b14 <HAL_DMA_IRQHandler+0x248>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a8e      	ldr	r2, [pc, #568]	; (8002b18 <HAL_DMA_IRQHandler+0x24c>)
 80028de:	fba2 2303 	umull	r2, r3, r2, r3
 80028e2:	0a9b      	lsrs	r3, r3, #10
 80028e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f6:	2208      	movs	r2, #8
 80028f8:	409a      	lsls	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	4013      	ands	r3, r2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d01a      	beq.n	8002938 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d013      	beq.n	8002938 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0204 	bic.w	r2, r2, #4
 800291e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002924:	2208      	movs	r2, #8
 8002926:	409a      	lsls	r2, r3
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002930:	f043 0201 	orr.w	r2, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293c:	2201      	movs	r2, #1
 800293e:	409a      	lsls	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d012      	beq.n	800296e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00b      	beq.n	800296e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295a:	2201      	movs	r2, #1
 800295c:	409a      	lsls	r2, r3
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002966:	f043 0202 	orr.w	r2, r3, #2
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002972:	2204      	movs	r2, #4
 8002974:	409a      	lsls	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	4013      	ands	r3, r2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d012      	beq.n	80029a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00b      	beq.n	80029a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002990:	2204      	movs	r2, #4
 8002992:	409a      	lsls	r2, r3
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299c:	f043 0204 	orr.w	r2, r3, #4
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a8:	2210      	movs	r2, #16
 80029aa:	409a      	lsls	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4013      	ands	r3, r2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d043      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0308 	and.w	r3, r3, #8
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d03c      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c6:	2210      	movs	r2, #16
 80029c8:	409a      	lsls	r2, r3
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d018      	beq.n	8002a0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d108      	bne.n	80029fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d024      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	4798      	blx	r3
 80029fa:	e01f      	b.n	8002a3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d01b      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	4798      	blx	r3
 8002a0c:	e016      	b.n	8002a3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d107      	bne.n	8002a2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0208 	bic.w	r2, r2, #8
 8002a2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a40:	2220      	movs	r2, #32
 8002a42:	409a      	lsls	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4013      	ands	r3, r2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 808f 	beq.w	8002b6c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0310 	and.w	r3, r3, #16
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 8087 	beq.w	8002b6c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a62:	2220      	movs	r2, #32
 8002a64:	409a      	lsls	r2, r3
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b05      	cmp	r3, #5
 8002a74:	d136      	bne.n	8002ae4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 0216 	bic.w	r2, r2, #22
 8002a84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	695a      	ldr	r2, [r3, #20]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d103      	bne.n	8002aa6 <HAL_DMA_IRQHandler+0x1da>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d007      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0208 	bic.w	r2, r2, #8
 8002ab4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aba:	223f      	movs	r2, #63	; 0x3f
 8002abc:	409a      	lsls	r2, r3
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d07e      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	4798      	blx	r3
        }
        return;
 8002ae2:	e079      	b.n	8002bd8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d01d      	beq.n	8002b2e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10d      	bne.n	8002b1c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d031      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	4798      	blx	r3
 8002b10:	e02c      	b.n	8002b6c <HAL_DMA_IRQHandler+0x2a0>
 8002b12:	bf00      	nop
 8002b14:	20000038 	.word	0x20000038
 8002b18:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d023      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	4798      	blx	r3
 8002b2c:	e01e      	b.n	8002b6c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10f      	bne.n	8002b5c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0210 	bic.w	r2, r2, #16
 8002b4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d032      	beq.n	8002bda <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d022      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2205      	movs	r2, #5
 8002b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0201 	bic.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d307      	bcc.n	8002bb4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f2      	bne.n	8002b98 <HAL_DMA_IRQHandler+0x2cc>
 8002bb2:	e000      	b.n	8002bb6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002bb4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d005      	beq.n	8002bda <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	4798      	blx	r3
 8002bd6:	e000      	b.n	8002bda <HAL_DMA_IRQHandler+0x30e>
        return;
 8002bd8:	bf00      	nop
    }
  }
}
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bfc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b40      	cmp	r3, #64	; 0x40
 8002c0c:	d108      	bne.n	8002c20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c1e:	e007      	b.n	8002c30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	60da      	str	r2, [r3, #12]
}
 8002c30:	bf00      	nop
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	3b10      	subs	r3, #16
 8002c4c:	4a14      	ldr	r2, [pc, #80]	; (8002ca0 <DMA_CalcBaseAndBitshift+0x64>)
 8002c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c52:	091b      	lsrs	r3, r3, #4
 8002c54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c56:	4a13      	ldr	r2, [pc, #76]	; (8002ca4 <DMA_CalcBaseAndBitshift+0x68>)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2b03      	cmp	r3, #3
 8002c68:	d909      	bls.n	8002c7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c72:	f023 0303 	bic.w	r3, r3, #3
 8002c76:	1d1a      	adds	r2, r3, #4
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	659a      	str	r2, [r3, #88]	; 0x58
 8002c7c:	e007      	b.n	8002c8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c86:	f023 0303 	bic.w	r3, r3, #3
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	aaaaaaab 	.word	0xaaaaaaab
 8002ca4:	0800d854 	.word	0x0800d854

08002ca8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d11f      	bne.n	8002d02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	d856      	bhi.n	8002d76 <DMA_CheckFifoParam+0xce>
 8002cc8:	a201      	add	r2, pc, #4	; (adr r2, 8002cd0 <DMA_CheckFifoParam+0x28>)
 8002cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cce:	bf00      	nop
 8002cd0:	08002ce1 	.word	0x08002ce1
 8002cd4:	08002cf3 	.word	0x08002cf3
 8002cd8:	08002ce1 	.word	0x08002ce1
 8002cdc:	08002d77 	.word	0x08002d77
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d046      	beq.n	8002d7a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cf0:	e043      	b.n	8002d7a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cfa:	d140      	bne.n	8002d7e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d00:	e03d      	b.n	8002d7e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d0a:	d121      	bne.n	8002d50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b03      	cmp	r3, #3
 8002d10:	d837      	bhi.n	8002d82 <DMA_CheckFifoParam+0xda>
 8002d12:	a201      	add	r2, pc, #4	; (adr r2, 8002d18 <DMA_CheckFifoParam+0x70>)
 8002d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d18:	08002d29 	.word	0x08002d29
 8002d1c:	08002d2f 	.word	0x08002d2f
 8002d20:	08002d29 	.word	0x08002d29
 8002d24:	08002d41 	.word	0x08002d41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d2c:	e030      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d025      	beq.n	8002d86 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d3e:	e022      	b.n	8002d86 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d48:	d11f      	bne.n	8002d8a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d4e:	e01c      	b.n	8002d8a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d903      	bls.n	8002d5e <DMA_CheckFifoParam+0xb6>
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d003      	beq.n	8002d64 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d5c:	e018      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	73fb      	strb	r3, [r7, #15]
      break;
 8002d62:	e015      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00e      	beq.n	8002d8e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	73fb      	strb	r3, [r7, #15]
      break;
 8002d74:	e00b      	b.n	8002d8e <DMA_CheckFifoParam+0xe6>
      break;
 8002d76:	bf00      	nop
 8002d78:	e00a      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;
 8002d7a:	bf00      	nop
 8002d7c:	e008      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;
 8002d7e:	bf00      	nop
 8002d80:	e006      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;
 8002d82:	bf00      	nop
 8002d84:	e004      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;
 8002d86:	bf00      	nop
 8002d88:	e002      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d8a:	bf00      	nop
 8002d8c:	e000      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;
 8002d8e:	bf00      	nop
    }
  } 
  
  return status; 
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop

08002da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b089      	sub	sp, #36	; 0x24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002db6:	2300      	movs	r3, #0
 8002db8:	61fb      	str	r3, [r7, #28]
 8002dba:	e16b      	b.n	8003094 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	f040 815a 	bne.w	800308e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d005      	beq.n	8002df2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d130      	bne.n	8002e54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e28:	2201      	movs	r2, #1
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 0201 	and.w	r2, r3, #1
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 0303 	and.w	r3, r3, #3
 8002e5c:	2b03      	cmp	r3, #3
 8002e5e:	d017      	beq.n	8002e90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 0303 	and.w	r3, r3, #3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d123      	bne.n	8002ee4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	08da      	lsrs	r2, r3, #3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3208      	adds	r2, #8
 8002ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	220f      	movs	r2, #15
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	08da      	lsrs	r2, r3, #3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3208      	adds	r2, #8
 8002ede:	69b9      	ldr	r1, [r7, #24]
 8002ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	2203      	movs	r2, #3
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 0203 	and.w	r2, r3, #3
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 80b4 	beq.w	800308e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	4b60      	ldr	r3, [pc, #384]	; (80030ac <HAL_GPIO_Init+0x30c>)
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2e:	4a5f      	ldr	r2, [pc, #380]	; (80030ac <HAL_GPIO_Init+0x30c>)
 8002f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f34:	6453      	str	r3, [r2, #68]	; 0x44
 8002f36:	4b5d      	ldr	r3, [pc, #372]	; (80030ac <HAL_GPIO_Init+0x30c>)
 8002f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f42:	4a5b      	ldr	r2, [pc, #364]	; (80030b0 <HAL_GPIO_Init+0x310>)
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	089b      	lsrs	r3, r3, #2
 8002f48:	3302      	adds	r3, #2
 8002f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	220f      	movs	r2, #15
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4013      	ands	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a52      	ldr	r2, [pc, #328]	; (80030b4 <HAL_GPIO_Init+0x314>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d02b      	beq.n	8002fc6 <HAL_GPIO_Init+0x226>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a51      	ldr	r2, [pc, #324]	; (80030b8 <HAL_GPIO_Init+0x318>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d025      	beq.n	8002fc2 <HAL_GPIO_Init+0x222>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a50      	ldr	r2, [pc, #320]	; (80030bc <HAL_GPIO_Init+0x31c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d01f      	beq.n	8002fbe <HAL_GPIO_Init+0x21e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a4f      	ldr	r2, [pc, #316]	; (80030c0 <HAL_GPIO_Init+0x320>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d019      	beq.n	8002fba <HAL_GPIO_Init+0x21a>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a4e      	ldr	r2, [pc, #312]	; (80030c4 <HAL_GPIO_Init+0x324>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d013      	beq.n	8002fb6 <HAL_GPIO_Init+0x216>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a4d      	ldr	r2, [pc, #308]	; (80030c8 <HAL_GPIO_Init+0x328>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d00d      	beq.n	8002fb2 <HAL_GPIO_Init+0x212>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a4c      	ldr	r2, [pc, #304]	; (80030cc <HAL_GPIO_Init+0x32c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d007      	beq.n	8002fae <HAL_GPIO_Init+0x20e>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a4b      	ldr	r2, [pc, #300]	; (80030d0 <HAL_GPIO_Init+0x330>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d101      	bne.n	8002faa <HAL_GPIO_Init+0x20a>
 8002fa6:	2307      	movs	r3, #7
 8002fa8:	e00e      	b.n	8002fc8 <HAL_GPIO_Init+0x228>
 8002faa:	2308      	movs	r3, #8
 8002fac:	e00c      	b.n	8002fc8 <HAL_GPIO_Init+0x228>
 8002fae:	2306      	movs	r3, #6
 8002fb0:	e00a      	b.n	8002fc8 <HAL_GPIO_Init+0x228>
 8002fb2:	2305      	movs	r3, #5
 8002fb4:	e008      	b.n	8002fc8 <HAL_GPIO_Init+0x228>
 8002fb6:	2304      	movs	r3, #4
 8002fb8:	e006      	b.n	8002fc8 <HAL_GPIO_Init+0x228>
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e004      	b.n	8002fc8 <HAL_GPIO_Init+0x228>
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	e002      	b.n	8002fc8 <HAL_GPIO_Init+0x228>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <HAL_GPIO_Init+0x228>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	69fa      	ldr	r2, [r7, #28]
 8002fca:	f002 0203 	and.w	r2, r2, #3
 8002fce:	0092      	lsls	r2, r2, #2
 8002fd0:	4093      	lsls	r3, r2
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fd8:	4935      	ldr	r1, [pc, #212]	; (80030b0 <HAL_GPIO_Init+0x310>)
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	089b      	lsrs	r3, r3, #2
 8002fde:	3302      	adds	r3, #2
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fe6:	4b3b      	ldr	r3, [pc, #236]	; (80030d4 <HAL_GPIO_Init+0x334>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4313      	orrs	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800300a:	4a32      	ldr	r2, [pc, #200]	; (80030d4 <HAL_GPIO_Init+0x334>)
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003010:	4b30      	ldr	r3, [pc, #192]	; (80030d4 <HAL_GPIO_Init+0x334>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	4313      	orrs	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003034:	4a27      	ldr	r2, [pc, #156]	; (80030d4 <HAL_GPIO_Init+0x334>)
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800303a:	4b26      	ldr	r3, [pc, #152]	; (80030d4 <HAL_GPIO_Init+0x334>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	43db      	mvns	r3, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4013      	ands	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800305e:	4a1d      	ldr	r2, [pc, #116]	; (80030d4 <HAL_GPIO_Init+0x334>)
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003064:	4b1b      	ldr	r3, [pc, #108]	; (80030d4 <HAL_GPIO_Init+0x334>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	43db      	mvns	r3, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4013      	ands	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	4313      	orrs	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003088:	4a12      	ldr	r2, [pc, #72]	; (80030d4 <HAL_GPIO_Init+0x334>)
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	3301      	adds	r3, #1
 8003092:	61fb      	str	r3, [r7, #28]
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	2b0f      	cmp	r3, #15
 8003098:	f67f ae90 	bls.w	8002dbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800309c:	bf00      	nop
 800309e:	bf00      	nop
 80030a0:	3724      	adds	r7, #36	; 0x24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	40023800 	.word	0x40023800
 80030b0:	40013800 	.word	0x40013800
 80030b4:	40020000 	.word	0x40020000
 80030b8:	40020400 	.word	0x40020400
 80030bc:	40020800 	.word	0x40020800
 80030c0:	40020c00 	.word	0x40020c00
 80030c4:	40021000 	.word	0x40021000
 80030c8:	40021400 	.word	0x40021400
 80030cc:	40021800 	.word	0x40021800
 80030d0:	40021c00 	.word	0x40021c00
 80030d4:	40013c00 	.word	0x40013c00

080030d8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80030d8:	b480      	push	{r7}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	e0cd      	b.n	8003290 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030f4:	2201      	movs	r2, #1
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	4013      	ands	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	429a      	cmp	r2, r3
 800310c:	f040 80bd 	bne.w	800328a <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003110:	4a65      	ldr	r2, [pc, #404]	; (80032a8 <HAL_GPIO_DeInit+0x1d0>)
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	089b      	lsrs	r3, r3, #2
 8003116:	3302      	adds	r3, #2
 8003118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800311c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	220f      	movs	r2, #15
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	4013      	ands	r3, r2
 8003130:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a5d      	ldr	r2, [pc, #372]	; (80032ac <HAL_GPIO_DeInit+0x1d4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d02b      	beq.n	8003192 <HAL_GPIO_DeInit+0xba>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a5c      	ldr	r2, [pc, #368]	; (80032b0 <HAL_GPIO_DeInit+0x1d8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d025      	beq.n	800318e <HAL_GPIO_DeInit+0xb6>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a5b      	ldr	r2, [pc, #364]	; (80032b4 <HAL_GPIO_DeInit+0x1dc>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d01f      	beq.n	800318a <HAL_GPIO_DeInit+0xb2>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a5a      	ldr	r2, [pc, #360]	; (80032b8 <HAL_GPIO_DeInit+0x1e0>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d019      	beq.n	8003186 <HAL_GPIO_DeInit+0xae>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a59      	ldr	r2, [pc, #356]	; (80032bc <HAL_GPIO_DeInit+0x1e4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d013      	beq.n	8003182 <HAL_GPIO_DeInit+0xaa>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a58      	ldr	r2, [pc, #352]	; (80032c0 <HAL_GPIO_DeInit+0x1e8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00d      	beq.n	800317e <HAL_GPIO_DeInit+0xa6>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a57      	ldr	r2, [pc, #348]	; (80032c4 <HAL_GPIO_DeInit+0x1ec>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d007      	beq.n	800317a <HAL_GPIO_DeInit+0xa2>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a56      	ldr	r2, [pc, #344]	; (80032c8 <HAL_GPIO_DeInit+0x1f0>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d101      	bne.n	8003176 <HAL_GPIO_DeInit+0x9e>
 8003172:	2307      	movs	r3, #7
 8003174:	e00e      	b.n	8003194 <HAL_GPIO_DeInit+0xbc>
 8003176:	2308      	movs	r3, #8
 8003178:	e00c      	b.n	8003194 <HAL_GPIO_DeInit+0xbc>
 800317a:	2306      	movs	r3, #6
 800317c:	e00a      	b.n	8003194 <HAL_GPIO_DeInit+0xbc>
 800317e:	2305      	movs	r3, #5
 8003180:	e008      	b.n	8003194 <HAL_GPIO_DeInit+0xbc>
 8003182:	2304      	movs	r3, #4
 8003184:	e006      	b.n	8003194 <HAL_GPIO_DeInit+0xbc>
 8003186:	2303      	movs	r3, #3
 8003188:	e004      	b.n	8003194 <HAL_GPIO_DeInit+0xbc>
 800318a:	2302      	movs	r3, #2
 800318c:	e002      	b.n	8003194 <HAL_GPIO_DeInit+0xbc>
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <HAL_GPIO_DeInit+0xbc>
 8003192:	2300      	movs	r3, #0
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	f002 0203 	and.w	r2, r2, #3
 800319a:	0092      	lsls	r2, r2, #2
 800319c:	4093      	lsls	r3, r2
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d132      	bne.n	800320a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80031a4:	4b49      	ldr	r3, [pc, #292]	; (80032cc <HAL_GPIO_DeInit+0x1f4>)
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	43db      	mvns	r3, r3
 80031ac:	4947      	ldr	r1, [pc, #284]	; (80032cc <HAL_GPIO_DeInit+0x1f4>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80031b2:	4b46      	ldr	r3, [pc, #280]	; (80032cc <HAL_GPIO_DeInit+0x1f4>)
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	43db      	mvns	r3, r3
 80031ba:	4944      	ldr	r1, [pc, #272]	; (80032cc <HAL_GPIO_DeInit+0x1f4>)
 80031bc:	4013      	ands	r3, r2
 80031be:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80031c0:	4b42      	ldr	r3, [pc, #264]	; (80032cc <HAL_GPIO_DeInit+0x1f4>)
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	43db      	mvns	r3, r3
 80031c8:	4940      	ldr	r1, [pc, #256]	; (80032cc <HAL_GPIO_DeInit+0x1f4>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80031ce:	4b3f      	ldr	r3, [pc, #252]	; (80032cc <HAL_GPIO_DeInit+0x1f4>)
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	43db      	mvns	r3, r3
 80031d6:	493d      	ldr	r1, [pc, #244]	; (80032cc <HAL_GPIO_DeInit+0x1f4>)
 80031d8:	4013      	ands	r3, r2
 80031da:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	220f      	movs	r2, #15
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80031ec:	4a2e      	ldr	r2, [pc, #184]	; (80032a8 <HAL_GPIO_DeInit+0x1d0>)
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	089b      	lsrs	r3, r3, #2
 80031f2:	3302      	adds	r3, #2
 80031f4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	43da      	mvns	r2, r3
 80031fc:	482a      	ldr	r0, [pc, #168]	; (80032a8 <HAL_GPIO_DeInit+0x1d0>)
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	089b      	lsrs	r3, r3, #2
 8003202:	400a      	ands	r2, r1
 8003204:	3302      	adds	r3, #2
 8003206:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	2103      	movs	r1, #3
 8003214:	fa01 f303 	lsl.w	r3, r1, r3
 8003218:	43db      	mvns	r3, r3
 800321a:	401a      	ands	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	08da      	lsrs	r2, r3, #3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3208      	adds	r2, #8
 8003228:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	220f      	movs	r2, #15
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	43db      	mvns	r3, r3
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	08d2      	lsrs	r2, r2, #3
 8003240:	4019      	ands	r1, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	3208      	adds	r2, #8
 8003246:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	2103      	movs	r1, #3
 8003254:	fa01 f303 	lsl.w	r3, r1, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	401a      	ands	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	2101      	movs	r1, #1
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	fa01 f303 	lsl.w	r3, r1, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	401a      	ands	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	2103      	movs	r1, #3
 800327e:	fa01 f303 	lsl.w	r3, r1, r3
 8003282:	43db      	mvns	r3, r3
 8003284:	401a      	ands	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	3301      	adds	r3, #1
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2b0f      	cmp	r3, #15
 8003294:	f67f af2e 	bls.w	80030f4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003298:	bf00      	nop
 800329a:	bf00      	nop
 800329c:	371c      	adds	r7, #28
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	40013800 	.word	0x40013800
 80032ac:	40020000 	.word	0x40020000
 80032b0:	40020400 	.word	0x40020400
 80032b4:	40020800 	.word	0x40020800
 80032b8:	40020c00 	.word	0x40020c00
 80032bc:	40021000 	.word	0x40021000
 80032c0:	40021400 	.word	0x40021400
 80032c4:	40021800 	.word	0x40021800
 80032c8:	40021c00 	.word	0x40021c00
 80032cc:	40013c00 	.word	0x40013c00

080032d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	807b      	strh	r3, [r7, #2]
 80032dc:	4613      	mov	r3, r2
 80032de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032e0:	787b      	ldrb	r3, [r7, #1]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032e6:	887a      	ldrh	r2, [r7, #2]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032ec:	e003      	b.n	80032f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032ee:	887b      	ldrh	r3, [r7, #2]
 80032f0:	041a      	lsls	r2, r3, #16
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	619a      	str	r2, [r3, #24]
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003302:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003304:	b08f      	sub	sp, #60	; 0x3c
 8003306:	af0a      	add	r7, sp, #40	; 0x28
 8003308:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e054      	b.n	80033be <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f009 fd1e 	bl	800cd70 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2203      	movs	r2, #3
 8003338:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003344:	2b00      	cmp	r3, #0
 8003346:	d102      	bne.n	800334e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f004 fef6 	bl	8008144 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	603b      	str	r3, [r7, #0]
 800335e:	687e      	ldr	r6, [r7, #4]
 8003360:	466d      	mov	r5, sp
 8003362:	f106 0410 	add.w	r4, r6, #16
 8003366:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003368:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800336a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800336c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800336e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003372:	e885 0003 	stmia.w	r5, {r0, r1}
 8003376:	1d33      	adds	r3, r6, #4
 8003378:	cb0e      	ldmia	r3, {r1, r2, r3}
 800337a:	6838      	ldr	r0, [r7, #0]
 800337c:	f004 fe70 	bl	8008060 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2101      	movs	r1, #1
 8003386:	4618      	mov	r0, r3
 8003388:	f004 feed 	bl	8008166 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	603b      	str	r3, [r7, #0]
 8003392:	687e      	ldr	r6, [r7, #4]
 8003394:	466d      	mov	r5, sp
 8003396:	f106 0410 	add.w	r4, r6, #16
 800339a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800339c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800339e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80033aa:	1d33      	adds	r3, r6, #4
 80033ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033ae:	6838      	ldr	r0, [r7, #0]
 80033b0:	f005 f876 	bl	80084a0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033c6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80033c6:	b590      	push	{r4, r7, lr}
 80033c8:	b089      	sub	sp, #36	; 0x24
 80033ca:	af04      	add	r7, sp, #16
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	4608      	mov	r0, r1
 80033d0:	4611      	mov	r1, r2
 80033d2:	461a      	mov	r2, r3
 80033d4:	4603      	mov	r3, r0
 80033d6:	70fb      	strb	r3, [r7, #3]
 80033d8:	460b      	mov	r3, r1
 80033da:	70bb      	strb	r3, [r7, #2]
 80033dc:	4613      	mov	r3, r2
 80033de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d101      	bne.n	80033ee <HAL_HCD_HC_Init+0x28>
 80033ea:	2302      	movs	r3, #2
 80033ec:	e076      	b.n	80034dc <HAL_HCD_HC_Init+0x116>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80033f6:	78fb      	ldrb	r3, [r7, #3]
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	212c      	movs	r1, #44	; 0x2c
 80033fc:	fb01 f303 	mul.w	r3, r1, r3
 8003400:	4413      	add	r3, r2
 8003402:	333d      	adds	r3, #61	; 0x3d
 8003404:	2200      	movs	r2, #0
 8003406:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003408:	78fb      	ldrb	r3, [r7, #3]
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	212c      	movs	r1, #44	; 0x2c
 800340e:	fb01 f303 	mul.w	r3, r1, r3
 8003412:	4413      	add	r3, r2
 8003414:	3338      	adds	r3, #56	; 0x38
 8003416:	787a      	ldrb	r2, [r7, #1]
 8003418:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800341a:	78fb      	ldrb	r3, [r7, #3]
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	212c      	movs	r1, #44	; 0x2c
 8003420:	fb01 f303 	mul.w	r3, r1, r3
 8003424:	4413      	add	r3, r2
 8003426:	3340      	adds	r3, #64	; 0x40
 8003428:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800342a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800342c:	78fb      	ldrb	r3, [r7, #3]
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	212c      	movs	r1, #44	; 0x2c
 8003432:	fb01 f303 	mul.w	r3, r1, r3
 8003436:	4413      	add	r3, r2
 8003438:	3339      	adds	r3, #57	; 0x39
 800343a:	78fa      	ldrb	r2, [r7, #3]
 800343c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800343e:	78fb      	ldrb	r3, [r7, #3]
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	212c      	movs	r1, #44	; 0x2c
 8003444:	fb01 f303 	mul.w	r3, r1, r3
 8003448:	4413      	add	r3, r2
 800344a:	333f      	adds	r3, #63	; 0x3f
 800344c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003450:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003452:	78fb      	ldrb	r3, [r7, #3]
 8003454:	78ba      	ldrb	r2, [r7, #2]
 8003456:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800345a:	b2d0      	uxtb	r0, r2
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	212c      	movs	r1, #44	; 0x2c
 8003460:	fb01 f303 	mul.w	r3, r1, r3
 8003464:	4413      	add	r3, r2
 8003466:	333a      	adds	r3, #58	; 0x3a
 8003468:	4602      	mov	r2, r0
 800346a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800346c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003470:	2b00      	cmp	r3, #0
 8003472:	da09      	bge.n	8003488 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003474:	78fb      	ldrb	r3, [r7, #3]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	212c      	movs	r1, #44	; 0x2c
 800347a:	fb01 f303 	mul.w	r3, r1, r3
 800347e:	4413      	add	r3, r2
 8003480:	333b      	adds	r3, #59	; 0x3b
 8003482:	2201      	movs	r2, #1
 8003484:	701a      	strb	r2, [r3, #0]
 8003486:	e008      	b.n	800349a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003488:	78fb      	ldrb	r3, [r7, #3]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	212c      	movs	r1, #44	; 0x2c
 800348e:	fb01 f303 	mul.w	r3, r1, r3
 8003492:	4413      	add	r3, r2
 8003494:	333b      	adds	r3, #59	; 0x3b
 8003496:	2200      	movs	r2, #0
 8003498:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800349a:	78fb      	ldrb	r3, [r7, #3]
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	212c      	movs	r1, #44	; 0x2c
 80034a0:	fb01 f303 	mul.w	r3, r1, r3
 80034a4:	4413      	add	r3, r2
 80034a6:	333c      	adds	r3, #60	; 0x3c
 80034a8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80034ac:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6818      	ldr	r0, [r3, #0]
 80034b2:	787c      	ldrb	r4, [r7, #1]
 80034b4:	78ba      	ldrb	r2, [r7, #2]
 80034b6:	78f9      	ldrb	r1, [r7, #3]
 80034b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80034ba:	9302      	str	r3, [sp, #8]
 80034bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80034c0:	9301      	str	r3, [sp, #4]
 80034c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	4623      	mov	r3, r4
 80034ca:	f005 f96f 	bl	80087ac <USB_HC_Init>
 80034ce:	4603      	mov	r3, r0
 80034d0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80034da:	7bfb      	ldrb	r3, [r7, #15]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd90      	pop	{r4, r7, pc}

080034e4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80034f0:	2300      	movs	r3, #0
 80034f2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d101      	bne.n	8003502 <HAL_HCD_HC_Halt+0x1e>
 80034fe:	2302      	movs	r3, #2
 8003500:	e00f      	b.n	8003522 <HAL_HCD_HC_Halt+0x3e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	78fa      	ldrb	r2, [r7, #3]
 8003510:	4611      	mov	r1, r2
 8003512:	4618      	mov	r0, r3
 8003514:	f005 fbbf 	bl	8008c96 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003520:	7bfb      	ldrb	r3, [r7, #15]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	4608      	mov	r0, r1
 8003536:	4611      	mov	r1, r2
 8003538:	461a      	mov	r2, r3
 800353a:	4603      	mov	r3, r0
 800353c:	70fb      	strb	r3, [r7, #3]
 800353e:	460b      	mov	r3, r1
 8003540:	70bb      	strb	r3, [r7, #2]
 8003542:	4613      	mov	r3, r2
 8003544:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003546:	78fb      	ldrb	r3, [r7, #3]
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	212c      	movs	r1, #44	; 0x2c
 800354c:	fb01 f303 	mul.w	r3, r1, r3
 8003550:	4413      	add	r3, r2
 8003552:	333b      	adds	r3, #59	; 0x3b
 8003554:	78ba      	ldrb	r2, [r7, #2]
 8003556:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003558:	78fb      	ldrb	r3, [r7, #3]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	212c      	movs	r1, #44	; 0x2c
 800355e:	fb01 f303 	mul.w	r3, r1, r3
 8003562:	4413      	add	r3, r2
 8003564:	333f      	adds	r3, #63	; 0x3f
 8003566:	787a      	ldrb	r2, [r7, #1]
 8003568:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800356a:	7c3b      	ldrb	r3, [r7, #16]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d112      	bne.n	8003596 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003570:	78fb      	ldrb	r3, [r7, #3]
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	212c      	movs	r1, #44	; 0x2c
 8003576:	fb01 f303 	mul.w	r3, r1, r3
 800357a:	4413      	add	r3, r2
 800357c:	3342      	adds	r3, #66	; 0x42
 800357e:	2203      	movs	r2, #3
 8003580:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003582:	78fb      	ldrb	r3, [r7, #3]
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	212c      	movs	r1, #44	; 0x2c
 8003588:	fb01 f303 	mul.w	r3, r1, r3
 800358c:	4413      	add	r3, r2
 800358e:	333d      	adds	r3, #61	; 0x3d
 8003590:	7f3a      	ldrb	r2, [r7, #28]
 8003592:	701a      	strb	r2, [r3, #0]
 8003594:	e008      	b.n	80035a8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003596:	78fb      	ldrb	r3, [r7, #3]
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	212c      	movs	r1, #44	; 0x2c
 800359c:	fb01 f303 	mul.w	r3, r1, r3
 80035a0:	4413      	add	r3, r2
 80035a2:	3342      	adds	r3, #66	; 0x42
 80035a4:	2202      	movs	r2, #2
 80035a6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80035a8:	787b      	ldrb	r3, [r7, #1]
 80035aa:	2b03      	cmp	r3, #3
 80035ac:	f200 80c6 	bhi.w	800373c <HAL_HCD_HC_SubmitRequest+0x210>
 80035b0:	a201      	add	r2, pc, #4	; (adr r2, 80035b8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80035b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b6:	bf00      	nop
 80035b8:	080035c9 	.word	0x080035c9
 80035bc:	08003729 	.word	0x08003729
 80035c0:	0800362d 	.word	0x0800362d
 80035c4:	080036ab 	.word	0x080036ab
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80035c8:	7c3b      	ldrb	r3, [r7, #16]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	f040 80b8 	bne.w	8003740 <HAL_HCD_HC_SubmitRequest+0x214>
 80035d0:	78bb      	ldrb	r3, [r7, #2]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f040 80b4 	bne.w	8003740 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80035d8:	8b3b      	ldrh	r3, [r7, #24]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d108      	bne.n	80035f0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80035de:	78fb      	ldrb	r3, [r7, #3]
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	212c      	movs	r1, #44	; 0x2c
 80035e4:	fb01 f303 	mul.w	r3, r1, r3
 80035e8:	4413      	add	r3, r2
 80035ea:	3355      	adds	r3, #85	; 0x55
 80035ec:	2201      	movs	r2, #1
 80035ee:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80035f0:	78fb      	ldrb	r3, [r7, #3]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	212c      	movs	r1, #44	; 0x2c
 80035f6:	fb01 f303 	mul.w	r3, r1, r3
 80035fa:	4413      	add	r3, r2
 80035fc:	3355      	adds	r3, #85	; 0x55
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d109      	bne.n	8003618 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003604:	78fb      	ldrb	r3, [r7, #3]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	212c      	movs	r1, #44	; 0x2c
 800360a:	fb01 f303 	mul.w	r3, r1, r3
 800360e:	4413      	add	r3, r2
 8003610:	3342      	adds	r3, #66	; 0x42
 8003612:	2200      	movs	r2, #0
 8003614:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003616:	e093      	b.n	8003740 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003618:	78fb      	ldrb	r3, [r7, #3]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	212c      	movs	r1, #44	; 0x2c
 800361e:	fb01 f303 	mul.w	r3, r1, r3
 8003622:	4413      	add	r3, r2
 8003624:	3342      	adds	r3, #66	; 0x42
 8003626:	2202      	movs	r2, #2
 8003628:	701a      	strb	r2, [r3, #0]
      break;
 800362a:	e089      	b.n	8003740 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800362c:	78bb      	ldrb	r3, [r7, #2]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d11d      	bne.n	800366e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003632:	78fb      	ldrb	r3, [r7, #3]
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	212c      	movs	r1, #44	; 0x2c
 8003638:	fb01 f303 	mul.w	r3, r1, r3
 800363c:	4413      	add	r3, r2
 800363e:	3355      	adds	r3, #85	; 0x55
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d109      	bne.n	800365a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003646:	78fb      	ldrb	r3, [r7, #3]
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	212c      	movs	r1, #44	; 0x2c
 800364c:	fb01 f303 	mul.w	r3, r1, r3
 8003650:	4413      	add	r3, r2
 8003652:	3342      	adds	r3, #66	; 0x42
 8003654:	2200      	movs	r2, #0
 8003656:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003658:	e073      	b.n	8003742 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800365a:	78fb      	ldrb	r3, [r7, #3]
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	212c      	movs	r1, #44	; 0x2c
 8003660:	fb01 f303 	mul.w	r3, r1, r3
 8003664:	4413      	add	r3, r2
 8003666:	3342      	adds	r3, #66	; 0x42
 8003668:	2202      	movs	r2, #2
 800366a:	701a      	strb	r2, [r3, #0]
      break;
 800366c:	e069      	b.n	8003742 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800366e:	78fb      	ldrb	r3, [r7, #3]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	212c      	movs	r1, #44	; 0x2c
 8003674:	fb01 f303 	mul.w	r3, r1, r3
 8003678:	4413      	add	r3, r2
 800367a:	3354      	adds	r3, #84	; 0x54
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d109      	bne.n	8003696 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003682:	78fb      	ldrb	r3, [r7, #3]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	212c      	movs	r1, #44	; 0x2c
 8003688:	fb01 f303 	mul.w	r3, r1, r3
 800368c:	4413      	add	r3, r2
 800368e:	3342      	adds	r3, #66	; 0x42
 8003690:	2200      	movs	r2, #0
 8003692:	701a      	strb	r2, [r3, #0]
      break;
 8003694:	e055      	b.n	8003742 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003696:	78fb      	ldrb	r3, [r7, #3]
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	212c      	movs	r1, #44	; 0x2c
 800369c:	fb01 f303 	mul.w	r3, r1, r3
 80036a0:	4413      	add	r3, r2
 80036a2:	3342      	adds	r3, #66	; 0x42
 80036a4:	2202      	movs	r2, #2
 80036a6:	701a      	strb	r2, [r3, #0]
      break;
 80036a8:	e04b      	b.n	8003742 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80036aa:	78bb      	ldrb	r3, [r7, #2]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d11d      	bne.n	80036ec <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80036b0:	78fb      	ldrb	r3, [r7, #3]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	212c      	movs	r1, #44	; 0x2c
 80036b6:	fb01 f303 	mul.w	r3, r1, r3
 80036ba:	4413      	add	r3, r2
 80036bc:	3355      	adds	r3, #85	; 0x55
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d109      	bne.n	80036d8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036c4:	78fb      	ldrb	r3, [r7, #3]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	212c      	movs	r1, #44	; 0x2c
 80036ca:	fb01 f303 	mul.w	r3, r1, r3
 80036ce:	4413      	add	r3, r2
 80036d0:	3342      	adds	r3, #66	; 0x42
 80036d2:	2200      	movs	r2, #0
 80036d4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80036d6:	e034      	b.n	8003742 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80036d8:	78fb      	ldrb	r3, [r7, #3]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	212c      	movs	r1, #44	; 0x2c
 80036de:	fb01 f303 	mul.w	r3, r1, r3
 80036e2:	4413      	add	r3, r2
 80036e4:	3342      	adds	r3, #66	; 0x42
 80036e6:	2202      	movs	r2, #2
 80036e8:	701a      	strb	r2, [r3, #0]
      break;
 80036ea:	e02a      	b.n	8003742 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80036ec:	78fb      	ldrb	r3, [r7, #3]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	212c      	movs	r1, #44	; 0x2c
 80036f2:	fb01 f303 	mul.w	r3, r1, r3
 80036f6:	4413      	add	r3, r2
 80036f8:	3354      	adds	r3, #84	; 0x54
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d109      	bne.n	8003714 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003700:	78fb      	ldrb	r3, [r7, #3]
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	212c      	movs	r1, #44	; 0x2c
 8003706:	fb01 f303 	mul.w	r3, r1, r3
 800370a:	4413      	add	r3, r2
 800370c:	3342      	adds	r3, #66	; 0x42
 800370e:	2200      	movs	r2, #0
 8003710:	701a      	strb	r2, [r3, #0]
      break;
 8003712:	e016      	b.n	8003742 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003714:	78fb      	ldrb	r3, [r7, #3]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	212c      	movs	r1, #44	; 0x2c
 800371a:	fb01 f303 	mul.w	r3, r1, r3
 800371e:	4413      	add	r3, r2
 8003720:	3342      	adds	r3, #66	; 0x42
 8003722:	2202      	movs	r2, #2
 8003724:	701a      	strb	r2, [r3, #0]
      break;
 8003726:	e00c      	b.n	8003742 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	212c      	movs	r1, #44	; 0x2c
 800372e:	fb01 f303 	mul.w	r3, r1, r3
 8003732:	4413      	add	r3, r2
 8003734:	3342      	adds	r3, #66	; 0x42
 8003736:	2200      	movs	r2, #0
 8003738:	701a      	strb	r2, [r3, #0]
      break;
 800373a:	e002      	b.n	8003742 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800373c:	bf00      	nop
 800373e:	e000      	b.n	8003742 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003740:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003742:	78fb      	ldrb	r3, [r7, #3]
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	212c      	movs	r1, #44	; 0x2c
 8003748:	fb01 f303 	mul.w	r3, r1, r3
 800374c:	4413      	add	r3, r2
 800374e:	3344      	adds	r3, #68	; 0x44
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003754:	78fb      	ldrb	r3, [r7, #3]
 8003756:	8b3a      	ldrh	r2, [r7, #24]
 8003758:	6879      	ldr	r1, [r7, #4]
 800375a:	202c      	movs	r0, #44	; 0x2c
 800375c:	fb00 f303 	mul.w	r3, r0, r3
 8003760:	440b      	add	r3, r1
 8003762:	334c      	adds	r3, #76	; 0x4c
 8003764:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003766:	78fb      	ldrb	r3, [r7, #3]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	212c      	movs	r1, #44	; 0x2c
 800376c:	fb01 f303 	mul.w	r3, r1, r3
 8003770:	4413      	add	r3, r2
 8003772:	3360      	adds	r3, #96	; 0x60
 8003774:	2200      	movs	r2, #0
 8003776:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003778:	78fb      	ldrb	r3, [r7, #3]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	212c      	movs	r1, #44	; 0x2c
 800377e:	fb01 f303 	mul.w	r3, r1, r3
 8003782:	4413      	add	r3, r2
 8003784:	3350      	adds	r3, #80	; 0x50
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800378a:	78fb      	ldrb	r3, [r7, #3]
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	212c      	movs	r1, #44	; 0x2c
 8003790:	fb01 f303 	mul.w	r3, r1, r3
 8003794:	4413      	add	r3, r2
 8003796:	3339      	adds	r3, #57	; 0x39
 8003798:	78fa      	ldrb	r2, [r7, #3]
 800379a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800379c:	78fb      	ldrb	r3, [r7, #3]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	212c      	movs	r1, #44	; 0x2c
 80037a2:	fb01 f303 	mul.w	r3, r1, r3
 80037a6:	4413      	add	r3, r2
 80037a8:	3361      	adds	r3, #97	; 0x61
 80037aa:	2200      	movs	r2, #0
 80037ac:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6818      	ldr	r0, [r3, #0]
 80037b2:	78fb      	ldrb	r3, [r7, #3]
 80037b4:	222c      	movs	r2, #44	; 0x2c
 80037b6:	fb02 f303 	mul.w	r3, r2, r3
 80037ba:	3338      	adds	r3, #56	; 0x38
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	18d1      	adds	r1, r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	461a      	mov	r2, r3
 80037c8:	f005 f912 	bl	80089f0 <USB_HC_StartXfer>
 80037cc:	4603      	mov	r3, r0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop

080037d8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f004 fe13 	bl	800841a <USB_GetMode>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	f040 80f6 	bne.w	80039e8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f004 fdf7 	bl	80083f4 <USB_ReadInterrupts>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 80ec 	beq.w	80039e6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4618      	mov	r0, r3
 8003814:	f004 fdee 	bl	80083f4 <USB_ReadInterrupts>
 8003818:	4603      	mov	r3, r0
 800381a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800381e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003822:	d104      	bne.n	800382e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800382c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f004 fdde 	bl	80083f4 <USB_ReadInterrupts>
 8003838:	4603      	mov	r3, r0
 800383a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800383e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003842:	d104      	bne.n	800384e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800384c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f004 fdce 	bl	80083f4 <USB_ReadInterrupts>
 8003858:	4603      	mov	r3, r0
 800385a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800385e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003862:	d104      	bne.n	800386e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800386c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f004 fdbe 	bl	80083f4 <USB_ReadInterrupts>
 8003878:	4603      	mov	r3, r0
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b02      	cmp	r3, #2
 8003880:	d103      	bne.n	800388a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2202      	movs	r2, #2
 8003888:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f004 fdb0 	bl	80083f4 <USB_ReadInterrupts>
 8003894:	4603      	mov	r3, r0
 8003896:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800389a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800389e:	d11c      	bne.n	80038da <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80038a8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10f      	bne.n	80038da <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80038ba:	2110      	movs	r1, #16
 80038bc:	6938      	ldr	r0, [r7, #16]
 80038be:	f004 fc9f 	bl	8008200 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80038c2:	6938      	ldr	r0, [r7, #16]
 80038c4:	f004 fcd0 	bl	8008268 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2101      	movs	r1, #1
 80038ce:	4618      	mov	r0, r3
 80038d0:	f004 fea6 	bl	8008620 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f009 fac9 	bl	800ce6c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f004 fd88 	bl	80083f4 <USB_ReadInterrupts>
 80038e4:	4603      	mov	r3, r0
 80038e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038ee:	d102      	bne.n	80038f6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f001 f89e 	bl	8004a32 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f004 fd7a 	bl	80083f4 <USB_ReadInterrupts>
 8003900:	4603      	mov	r3, r0
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b08      	cmp	r3, #8
 8003908:	d106      	bne.n	8003918 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f009 fa92 	bl	800ce34 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2208      	movs	r2, #8
 8003916:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f004 fd69 	bl	80083f4 <USB_ReadInterrupts>
 8003922:	4603      	mov	r3, r0
 8003924:	f003 0310 	and.w	r3, r3, #16
 8003928:	2b10      	cmp	r3, #16
 800392a:	d101      	bne.n	8003930 <HAL_HCD_IRQHandler+0x158>
 800392c:	2301      	movs	r3, #1
 800392e:	e000      	b.n	8003932 <HAL_HCD_IRQHandler+0x15a>
 8003930:	2300      	movs	r3, #0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d012      	beq.n	800395c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	699a      	ldr	r2, [r3, #24]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0210 	bic.w	r2, r2, #16
 8003944:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 ffa1 	bl	800488e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	699a      	ldr	r2, [r3, #24]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0210 	orr.w	r2, r2, #16
 800395a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f004 fd47 	bl	80083f4 <USB_ReadInterrupts>
 8003966:	4603      	mov	r3, r0
 8003968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003970:	d13a      	bne.n	80039e8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f005 f97c 	bl	8008c74 <USB_HC_ReadInterrupt>
 800397c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800397e:	2300      	movs	r3, #0
 8003980:	617b      	str	r3, [r7, #20]
 8003982:	e025      	b.n	80039d0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	fa22 f303 	lsr.w	r3, r2, r3
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d018      	beq.n	80039ca <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ae:	d106      	bne.n	80039be <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	4619      	mov	r1, r3
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f8ab 	bl	8003b12 <HCD_HC_IN_IRQHandler>
 80039bc:	e005      	b.n	80039ca <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	4619      	mov	r1, r3
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 fbf9 	bl	80041bc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	3301      	adds	r3, #1
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d3d4      	bcc.n	8003984 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039e2:	615a      	str	r2, [r3, #20]
 80039e4:	e000      	b.n	80039e8 <HAL_HCD_IRQHandler+0x210>
      return;
 80039e6:	bf00      	nop
    }
  }
}
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b082      	sub	sp, #8
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d101      	bne.n	8003a04 <HAL_HCD_Start+0x16>
 8003a00:	2302      	movs	r3, #2
 8003a02:	e013      	b.n	8003a2c <HAL_HCD_Start+0x3e>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2101      	movs	r1, #1
 8003a12:	4618      	mov	r0, r3
 8003a14:	f004 fe68 	bl	80086e8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f004 fb80 	bl	8008122 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d101      	bne.n	8003a4a <HAL_HCD_Stop+0x16>
 8003a46:	2302      	movs	r3, #2
 8003a48:	e00d      	b.n	8003a66 <HAL_HCD_Stop+0x32>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f005 fa56 	bl	8008f08 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b082      	sub	sp, #8
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f004 fe0a 	bl	8008694 <USB_ResetPort>
 8003a80:	4603      	mov	r3, r0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
 8003a92:	460b      	mov	r3, r1
 8003a94:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003a96:	78fb      	ldrb	r3, [r7, #3]
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	212c      	movs	r1, #44	; 0x2c
 8003a9c:	fb01 f303 	mul.w	r3, r1, r3
 8003aa0:	4413      	add	r3, r2
 8003aa2:	3360      	adds	r3, #96	; 0x60
 8003aa4:	781b      	ldrb	r3, [r3, #0]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b083      	sub	sp, #12
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	460b      	mov	r3, r1
 8003abc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003abe:	78fb      	ldrb	r3, [r7, #3]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	212c      	movs	r1, #44	; 0x2c
 8003ac4:	fb01 f303 	mul.w	r3, r1, r3
 8003ac8:	4413      	add	r3, r2
 8003aca:	3350      	adds	r3, #80	; 0x50
 8003acc:	681b      	ldr	r3, [r3, #0]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b082      	sub	sp, #8
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f004 fe4e 	bl	8008788 <USB_GetCurrentFrame>
 8003aec:	4603      	mov	r3, r0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b082      	sub	sp, #8
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f004 fe29 	bl	800875a <USB_GetHostSpeed>
 8003b08:	4603      	mov	r3, r0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b086      	sub	sp, #24
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003b28:	78fb      	ldrb	r3, [r7, #3]
 8003b2a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	015a      	lsls	r2, r3, #5
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	4413      	add	r3, r2
 8003b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f003 0304 	and.w	r3, r3, #4
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	d11a      	bne.n	8003b78 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	015a      	lsls	r2, r3, #5
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	4413      	add	r3, r2
 8003b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b4e:	461a      	mov	r2, r3
 8003b50:	2304      	movs	r3, #4
 8003b52:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	212c      	movs	r1, #44	; 0x2c
 8003b5a:	fb01 f303 	mul.w	r3, r1, r3
 8003b5e:	4413      	add	r3, r2
 8003b60:	3361      	adds	r3, #97	; 0x61
 8003b62:	2206      	movs	r2, #6
 8003b64:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	4611      	mov	r1, r2
 8003b70:	4618      	mov	r0, r3
 8003b72:	f005 f890 	bl	8008c96 <USB_HC_Halt>
 8003b76:	e0af      	b.n	8003cd8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	015a      	lsls	r2, r3, #5
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	4413      	add	r3, r2
 8003b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b8e:	d11b      	bne.n	8003bc8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ba2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	212c      	movs	r1, #44	; 0x2c
 8003baa:	fb01 f303 	mul.w	r3, r1, r3
 8003bae:	4413      	add	r3, r2
 8003bb0:	3361      	adds	r3, #97	; 0x61
 8003bb2:	2207      	movs	r2, #7
 8003bb4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	b2d2      	uxtb	r2, r2
 8003bbe:	4611      	mov	r1, r2
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f005 f868 	bl	8008c96 <USB_HC_Halt>
 8003bc6:	e087      	b.n	8003cd8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	015a      	lsls	r2, r3, #5
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 0320 	and.w	r3, r3, #32
 8003bda:	2b20      	cmp	r3, #32
 8003bdc:	d109      	bne.n	8003bf2 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bea:	461a      	mov	r2, r3
 8003bec:	2320      	movs	r3, #32
 8003bee:	6093      	str	r3, [r2, #8]
 8003bf0:	e072      	b.n	8003cd8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	015a      	lsls	r2, r3, #5
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 0308 	and.w	r3, r3, #8
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d11a      	bne.n	8003c3e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c14:	461a      	mov	r2, r3
 8003c16:	2308      	movs	r3, #8
 8003c18:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	212c      	movs	r1, #44	; 0x2c
 8003c20:	fb01 f303 	mul.w	r3, r1, r3
 8003c24:	4413      	add	r3, r2
 8003c26:	3361      	adds	r3, #97	; 0x61
 8003c28:	2205      	movs	r2, #5
 8003c2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	4611      	mov	r1, r2
 8003c36:	4618      	mov	r0, r3
 8003c38:	f005 f82d 	bl	8008c96 <USB_HC_Halt>
 8003c3c:	e04c      	b.n	8003cd8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	015a      	lsls	r2, r3, #5
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c54:	d11b      	bne.n	8003c8e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c62:	461a      	mov	r2, r3
 8003c64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c68:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	212c      	movs	r1, #44	; 0x2c
 8003c70:	fb01 f303 	mul.w	r3, r1, r3
 8003c74:	4413      	add	r3, r2
 8003c76:	3361      	adds	r3, #97	; 0x61
 8003c78:	2208      	movs	r2, #8
 8003c7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	4611      	mov	r1, r2
 8003c86:	4618      	mov	r0, r3
 8003c88:	f005 f805 	bl	8008c96 <USB_HC_Halt>
 8003c8c:	e024      	b.n	8003cd8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	015a      	lsls	r2, r3, #5
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	4413      	add	r3, r2
 8003c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca0:	2b80      	cmp	r3, #128	; 0x80
 8003ca2:	d119      	bne.n	8003cd8 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	015a      	lsls	r2, r3, #5
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	4413      	add	r3, r2
 8003cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	2380      	movs	r3, #128	; 0x80
 8003cb4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	212c      	movs	r1, #44	; 0x2c
 8003cbc:	fb01 f303 	mul.w	r3, r1, r3
 8003cc0:	4413      	add	r3, r2
 8003cc2:	3361      	adds	r3, #97	; 0x61
 8003cc4:	2206      	movs	r2, #6
 8003cc6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	4611      	mov	r1, r2
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f004 ffdf 	bl	8008c96 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cee:	d112      	bne.n	8003d16 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	4611      	mov	r1, r2
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f004 ffcb 	bl	8008c96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	015a      	lsls	r2, r3, #5
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	4413      	add	r3, r2
 8003d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d12:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003d14:	e24e      	b.n	80041b4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	015a      	lsls	r2, r3, #5
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	f040 80df 	bne.w	8003eec <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d019      	beq.n	8003d6a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	212c      	movs	r1, #44	; 0x2c
 8003d3c:	fb01 f303 	mul.w	r3, r1, r3
 8003d40:	4413      	add	r3, r2
 8003d42:	3348      	adds	r3, #72	; 0x48
 8003d44:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	0159      	lsls	r1, r3, #5
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	440b      	add	r3, r1
 8003d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003d58:	1ad2      	subs	r2, r2, r3
 8003d5a:	6879      	ldr	r1, [r7, #4]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	202c      	movs	r0, #44	; 0x2c
 8003d60:	fb00 f303 	mul.w	r3, r0, r3
 8003d64:	440b      	add	r3, r1
 8003d66:	3350      	adds	r3, #80	; 0x50
 8003d68:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	212c      	movs	r1, #44	; 0x2c
 8003d70:	fb01 f303 	mul.w	r3, r1, r3
 8003d74:	4413      	add	r3, r2
 8003d76:	3361      	adds	r3, #97	; 0x61
 8003d78:	2201      	movs	r2, #1
 8003d7a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	212c      	movs	r1, #44	; 0x2c
 8003d82:	fb01 f303 	mul.w	r3, r1, r3
 8003d86:	4413      	add	r3, r2
 8003d88:	335c      	adds	r3, #92	; 0x5c
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	015a      	lsls	r2, r3, #5
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	4413      	add	r3, r2
 8003d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	212c      	movs	r1, #44	; 0x2c
 8003da6:	fb01 f303 	mul.w	r3, r1, r3
 8003daa:	4413      	add	r3, r2
 8003dac:	333f      	adds	r3, #63	; 0x3f
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d009      	beq.n	8003dc8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	212c      	movs	r1, #44	; 0x2c
 8003dba:	fb01 f303 	mul.w	r3, r1, r3
 8003dbe:	4413      	add	r3, r2
 8003dc0:	333f      	adds	r3, #63	; 0x3f
 8003dc2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d111      	bne.n	8003dec <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	4611      	mov	r1, r2
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f004 ff5f 	bl	8008c96 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de4:	461a      	mov	r2, r3
 8003de6:	2310      	movs	r3, #16
 8003de8:	6093      	str	r3, [r2, #8]
 8003dea:	e03a      	b.n	8003e62 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	212c      	movs	r1, #44	; 0x2c
 8003df2:	fb01 f303 	mul.w	r3, r1, r3
 8003df6:	4413      	add	r3, r2
 8003df8:	333f      	adds	r3, #63	; 0x3f
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	d009      	beq.n	8003e14 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	212c      	movs	r1, #44	; 0x2c
 8003e06:	fb01 f303 	mul.w	r3, r1, r3
 8003e0a:	4413      	add	r3, r2
 8003e0c:	333f      	adds	r3, #63	; 0x3f
 8003e0e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d126      	bne.n	8003e62 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	0151      	lsls	r1, r2, #5
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	440a      	add	r2, r1
 8003e2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e32:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	212c      	movs	r1, #44	; 0x2c
 8003e3a:	fb01 f303 	mul.w	r3, r1, r3
 8003e3e:	4413      	add	r3, r2
 8003e40:	3360      	adds	r3, #96	; 0x60
 8003e42:	2201      	movs	r2, #1
 8003e44:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	b2d9      	uxtb	r1, r3
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	202c      	movs	r0, #44	; 0x2c
 8003e50:	fb00 f303 	mul.w	r3, r0, r3
 8003e54:	4413      	add	r3, r2
 8003e56:	3360      	adds	r3, #96	; 0x60
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f009 f813 	bl	800ce88 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d12b      	bne.n	8003ec2 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	212c      	movs	r1, #44	; 0x2c
 8003e70:	fb01 f303 	mul.w	r3, r1, r3
 8003e74:	4413      	add	r3, r2
 8003e76:	3348      	adds	r3, #72	; 0x48
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	202c      	movs	r0, #44	; 0x2c
 8003e80:	fb00 f202 	mul.w	r2, r0, r2
 8003e84:	440a      	add	r2, r1
 8003e86:	3240      	adds	r2, #64	; 0x40
 8003e88:	8812      	ldrh	r2, [r2, #0]
 8003e8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 818e 	beq.w	80041b4 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	212c      	movs	r1, #44	; 0x2c
 8003e9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ea2:	4413      	add	r3, r2
 8003ea4:	3354      	adds	r3, #84	; 0x54
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	f083 0301 	eor.w	r3, r3, #1
 8003eac:	b2d8      	uxtb	r0, r3
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	212c      	movs	r1, #44	; 0x2c
 8003eb4:	fb01 f303 	mul.w	r3, r1, r3
 8003eb8:	4413      	add	r3, r2
 8003eba:	3354      	adds	r3, #84	; 0x54
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	701a      	strb	r2, [r3, #0]
}
 8003ec0:	e178      	b.n	80041b4 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	212c      	movs	r1, #44	; 0x2c
 8003ec8:	fb01 f303 	mul.w	r3, r1, r3
 8003ecc:	4413      	add	r3, r2
 8003ece:	3354      	adds	r3, #84	; 0x54
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	f083 0301 	eor.w	r3, r3, #1
 8003ed6:	b2d8      	uxtb	r0, r3
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	212c      	movs	r1, #44	; 0x2c
 8003ede:	fb01 f303 	mul.w	r3, r1, r3
 8003ee2:	4413      	add	r3, r2
 8003ee4:	3354      	adds	r3, #84	; 0x54
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	701a      	strb	r2, [r3, #0]
}
 8003eea:	e163      	b.n	80041b4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	f040 80f6 	bne.w	80040f0 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	212c      	movs	r1, #44	; 0x2c
 8003f0a:	fb01 f303 	mul.w	r3, r1, r3
 8003f0e:	4413      	add	r3, r2
 8003f10:	3361      	adds	r3, #97	; 0x61
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d109      	bne.n	8003f2c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	212c      	movs	r1, #44	; 0x2c
 8003f1e:	fb01 f303 	mul.w	r3, r1, r3
 8003f22:	4413      	add	r3, r2
 8003f24:	3360      	adds	r3, #96	; 0x60
 8003f26:	2201      	movs	r2, #1
 8003f28:	701a      	strb	r2, [r3, #0]
 8003f2a:	e0c9      	b.n	80040c0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	212c      	movs	r1, #44	; 0x2c
 8003f32:	fb01 f303 	mul.w	r3, r1, r3
 8003f36:	4413      	add	r3, r2
 8003f38:	3361      	adds	r3, #97	; 0x61
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	2b05      	cmp	r3, #5
 8003f3e:	d109      	bne.n	8003f54 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	212c      	movs	r1, #44	; 0x2c
 8003f46:	fb01 f303 	mul.w	r3, r1, r3
 8003f4a:	4413      	add	r3, r2
 8003f4c:	3360      	adds	r3, #96	; 0x60
 8003f4e:	2205      	movs	r2, #5
 8003f50:	701a      	strb	r2, [r3, #0]
 8003f52:	e0b5      	b.n	80040c0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	212c      	movs	r1, #44	; 0x2c
 8003f5a:	fb01 f303 	mul.w	r3, r1, r3
 8003f5e:	4413      	add	r3, r2
 8003f60:	3361      	adds	r3, #97	; 0x61
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b06      	cmp	r3, #6
 8003f66:	d009      	beq.n	8003f7c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	212c      	movs	r1, #44	; 0x2c
 8003f6e:	fb01 f303 	mul.w	r3, r1, r3
 8003f72:	4413      	add	r3, r2
 8003f74:	3361      	adds	r3, #97	; 0x61
 8003f76:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d150      	bne.n	800401e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	212c      	movs	r1, #44	; 0x2c
 8003f82:	fb01 f303 	mul.w	r3, r1, r3
 8003f86:	4413      	add	r3, r2
 8003f88:	335c      	adds	r3, #92	; 0x5c
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	202c      	movs	r0, #44	; 0x2c
 8003f94:	fb00 f303 	mul.w	r3, r0, r3
 8003f98:	440b      	add	r3, r1
 8003f9a:	335c      	adds	r3, #92	; 0x5c
 8003f9c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	212c      	movs	r1, #44	; 0x2c
 8003fa4:	fb01 f303 	mul.w	r3, r1, r3
 8003fa8:	4413      	add	r3, r2
 8003faa:	335c      	adds	r3, #92	; 0x5c
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d912      	bls.n	8003fd8 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	212c      	movs	r1, #44	; 0x2c
 8003fb8:	fb01 f303 	mul.w	r3, r1, r3
 8003fbc:	4413      	add	r3, r2
 8003fbe:	335c      	adds	r3, #92	; 0x5c
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	212c      	movs	r1, #44	; 0x2c
 8003fca:	fb01 f303 	mul.w	r3, r1, r3
 8003fce:	4413      	add	r3, r2
 8003fd0:	3360      	adds	r3, #96	; 0x60
 8003fd2:	2204      	movs	r2, #4
 8003fd4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003fd6:	e073      	b.n	80040c0 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	212c      	movs	r1, #44	; 0x2c
 8003fde:	fb01 f303 	mul.w	r3, r1, r3
 8003fe2:	4413      	add	r3, r2
 8003fe4:	3360      	adds	r3, #96	; 0x60
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	015a      	lsls	r2, r3, #5
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004000:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004008:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	4413      	add	r3, r2
 8004012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004016:	461a      	mov	r2, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800401c:	e050      	b.n	80040c0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	212c      	movs	r1, #44	; 0x2c
 8004024:	fb01 f303 	mul.w	r3, r1, r3
 8004028:	4413      	add	r3, r2
 800402a:	3361      	adds	r3, #97	; 0x61
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	2b03      	cmp	r3, #3
 8004030:	d122      	bne.n	8004078 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	212c      	movs	r1, #44	; 0x2c
 8004038:	fb01 f303 	mul.w	r3, r1, r3
 800403c:	4413      	add	r3, r2
 800403e:	3360      	adds	r3, #96	; 0x60
 8004040:	2202      	movs	r2, #2
 8004042:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	4413      	add	r3, r2
 800404c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800405a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004062:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	4413      	add	r3, r2
 800406c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004070:	461a      	mov	r2, r3
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	e023      	b.n	80040c0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	212c      	movs	r1, #44	; 0x2c
 800407e:	fb01 f303 	mul.w	r3, r1, r3
 8004082:	4413      	add	r3, r2
 8004084:	3361      	adds	r3, #97	; 0x61
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b07      	cmp	r3, #7
 800408a:	d119      	bne.n	80040c0 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	212c      	movs	r1, #44	; 0x2c
 8004092:	fb01 f303 	mul.w	r3, r1, r3
 8004096:	4413      	add	r3, r2
 8004098:	335c      	adds	r3, #92	; 0x5c
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	1c5a      	adds	r2, r3, #1
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	202c      	movs	r0, #44	; 0x2c
 80040a4:	fb00 f303 	mul.w	r3, r0, r3
 80040a8:	440b      	add	r3, r1
 80040aa:	335c      	adds	r3, #92	; 0x5c
 80040ac:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	212c      	movs	r1, #44	; 0x2c
 80040b4:	fb01 f303 	mul.w	r3, r1, r3
 80040b8:	4413      	add	r3, r2
 80040ba:	3360      	adds	r3, #96	; 0x60
 80040bc:	2204      	movs	r2, #4
 80040be:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040cc:	461a      	mov	r2, r3
 80040ce:	2302      	movs	r3, #2
 80040d0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	b2d9      	uxtb	r1, r3
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	202c      	movs	r0, #44	; 0x2c
 80040dc:	fb00 f303 	mul.w	r3, r0, r3
 80040e0:	4413      	add	r3, r2
 80040e2:	3360      	adds	r3, #96	; 0x60
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	461a      	mov	r2, r3
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f008 fecd 	bl	800ce88 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80040ee:	e061      	b.n	80041b4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 0310 	and.w	r3, r3, #16
 8004102:	2b10      	cmp	r3, #16
 8004104:	d156      	bne.n	80041b4 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	212c      	movs	r1, #44	; 0x2c
 800410c:	fb01 f303 	mul.w	r3, r1, r3
 8004110:	4413      	add	r3, r2
 8004112:	333f      	adds	r3, #63	; 0x3f
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2b03      	cmp	r3, #3
 8004118:	d111      	bne.n	800413e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	212c      	movs	r1, #44	; 0x2c
 8004120:	fb01 f303 	mul.w	r3, r1, r3
 8004124:	4413      	add	r3, r2
 8004126:	335c      	adds	r3, #92	; 0x5c
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	4611      	mov	r1, r2
 8004136:	4618      	mov	r0, r3
 8004138:	f004 fdad 	bl	8008c96 <USB_HC_Halt>
 800413c:	e031      	b.n	80041a2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	212c      	movs	r1, #44	; 0x2c
 8004144:	fb01 f303 	mul.w	r3, r1, r3
 8004148:	4413      	add	r3, r2
 800414a:	333f      	adds	r3, #63	; 0x3f
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d009      	beq.n	8004166 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	212c      	movs	r1, #44	; 0x2c
 8004158:	fb01 f303 	mul.w	r3, r1, r3
 800415c:	4413      	add	r3, r2
 800415e:	333f      	adds	r3, #63	; 0x3f
 8004160:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004162:	2b02      	cmp	r3, #2
 8004164:	d11d      	bne.n	80041a2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	212c      	movs	r1, #44	; 0x2c
 800416c:	fb01 f303 	mul.w	r3, r1, r3
 8004170:	4413      	add	r3, r2
 8004172:	335c      	adds	r3, #92	; 0x5c
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d110      	bne.n	80041a2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	212c      	movs	r1, #44	; 0x2c
 8004186:	fb01 f303 	mul.w	r3, r1, r3
 800418a:	4413      	add	r3, r2
 800418c:	3361      	adds	r3, #97	; 0x61
 800418e:	2203      	movs	r2, #3
 8004190:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	b2d2      	uxtb	r2, r2
 800419a:	4611      	mov	r1, r2
 800419c:	4618      	mov	r0, r3
 800419e:	f004 fd7a 	bl	8008c96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ae:	461a      	mov	r2, r3
 80041b0:	2310      	movs	r3, #16
 80041b2:	6093      	str	r3, [r2, #8]
}
 80041b4:	bf00      	nop
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	460b      	mov	r3, r1
 80041c6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80041d2:	78fb      	ldrb	r3, [r7, #3]
 80041d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d11a      	bne.n	8004222 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f8:	461a      	mov	r2, r3
 80041fa:	2304      	movs	r3, #4
 80041fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	212c      	movs	r1, #44	; 0x2c
 8004204:	fb01 f303 	mul.w	r3, r1, r3
 8004208:	4413      	add	r3, r2
 800420a:	3361      	adds	r3, #97	; 0x61
 800420c:	2206      	movs	r2, #6
 800420e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	4611      	mov	r1, r2
 800421a:	4618      	mov	r0, r3
 800421c:	f004 fd3b 	bl	8008c96 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004220:	e331      	b.n	8004886 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	015a      	lsls	r2, r3, #5
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	4413      	add	r3, r2
 800422a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f003 0320 	and.w	r3, r3, #32
 8004234:	2b20      	cmp	r3, #32
 8004236:	d12e      	bne.n	8004296 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	4413      	add	r3, r2
 8004240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004244:	461a      	mov	r2, r3
 8004246:	2320      	movs	r3, #32
 8004248:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	212c      	movs	r1, #44	; 0x2c
 8004250:	fb01 f303 	mul.w	r3, r1, r3
 8004254:	4413      	add	r3, r2
 8004256:	333d      	adds	r3, #61	; 0x3d
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	2b01      	cmp	r3, #1
 800425c:	f040 8313 	bne.w	8004886 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	212c      	movs	r1, #44	; 0x2c
 8004266:	fb01 f303 	mul.w	r3, r1, r3
 800426a:	4413      	add	r3, r2
 800426c:	333d      	adds	r3, #61	; 0x3d
 800426e:	2200      	movs	r2, #0
 8004270:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	212c      	movs	r1, #44	; 0x2c
 8004278:	fb01 f303 	mul.w	r3, r1, r3
 800427c:	4413      	add	r3, r2
 800427e:	3360      	adds	r3, #96	; 0x60
 8004280:	2202      	movs	r2, #2
 8004282:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	4611      	mov	r1, r2
 800428e:	4618      	mov	r0, r3
 8004290:	f004 fd01 	bl	8008c96 <USB_HC_Halt>
}
 8004294:	e2f7      	b.n	8004886 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	4413      	add	r3, r2
 800429e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ac:	d112      	bne.n	80042d4 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ba:	461a      	mov	r2, r3
 80042bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042c0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	b2d2      	uxtb	r2, r2
 80042ca:	4611      	mov	r1, r2
 80042cc:	4618      	mov	r0, r3
 80042ce:	f004 fce2 	bl	8008c96 <USB_HC_Halt>
}
 80042d2:	e2d8      	b.n	8004886 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d140      	bne.n	800436c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	212c      	movs	r1, #44	; 0x2c
 80042f0:	fb01 f303 	mul.w	r3, r1, r3
 80042f4:	4413      	add	r3, r2
 80042f6:	335c      	adds	r3, #92	; 0x5c
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	4413      	add	r3, r2
 8004304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430e:	2b40      	cmp	r3, #64	; 0x40
 8004310:	d111      	bne.n	8004336 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	212c      	movs	r1, #44	; 0x2c
 8004318:	fb01 f303 	mul.w	r3, r1, r3
 800431c:	4413      	add	r3, r2
 800431e:	333d      	adds	r3, #61	; 0x3d
 8004320:	2201      	movs	r2, #1
 8004322:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	4413      	add	r3, r2
 800432c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004330:	461a      	mov	r2, r3
 8004332:	2340      	movs	r3, #64	; 0x40
 8004334:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	015a      	lsls	r2, r3, #5
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	4413      	add	r3, r2
 800433e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004342:	461a      	mov	r2, r3
 8004344:	2301      	movs	r3, #1
 8004346:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	212c      	movs	r1, #44	; 0x2c
 800434e:	fb01 f303 	mul.w	r3, r1, r3
 8004352:	4413      	add	r3, r2
 8004354:	3361      	adds	r3, #97	; 0x61
 8004356:	2201      	movs	r2, #1
 8004358:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	b2d2      	uxtb	r2, r2
 8004362:	4611      	mov	r1, r2
 8004364:	4618      	mov	r0, r3
 8004366:	f004 fc96 	bl	8008c96 <USB_HC_Halt>
}
 800436a:	e28c      	b.n	8004886 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	015a      	lsls	r2, r3, #5
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	4413      	add	r3, r2
 8004374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437e:	2b40      	cmp	r3, #64	; 0x40
 8004380:	d12c      	bne.n	80043dc <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	212c      	movs	r1, #44	; 0x2c
 8004388:	fb01 f303 	mul.w	r3, r1, r3
 800438c:	4413      	add	r3, r2
 800438e:	3361      	adds	r3, #97	; 0x61
 8004390:	2204      	movs	r2, #4
 8004392:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	212c      	movs	r1, #44	; 0x2c
 800439a:	fb01 f303 	mul.w	r3, r1, r3
 800439e:	4413      	add	r3, r2
 80043a0:	333d      	adds	r3, #61	; 0x3d
 80043a2:	2201      	movs	r2, #1
 80043a4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	212c      	movs	r1, #44	; 0x2c
 80043ac:	fb01 f303 	mul.w	r3, r1, r3
 80043b0:	4413      	add	r3, r2
 80043b2:	335c      	adds	r3, #92	; 0x5c
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	4611      	mov	r1, r2
 80043c2:	4618      	mov	r0, r3
 80043c4:	f004 fc67 	bl	8008c96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d4:	461a      	mov	r2, r3
 80043d6:	2340      	movs	r3, #64	; 0x40
 80043d8:	6093      	str	r3, [r2, #8]
}
 80043da:	e254      	b.n	8004886 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	015a      	lsls	r2, r3, #5
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	4413      	add	r3, r2
 80043e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b08      	cmp	r3, #8
 80043f0:	d11a      	bne.n	8004428 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043fe:	461a      	mov	r2, r3
 8004400:	2308      	movs	r3, #8
 8004402:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	212c      	movs	r1, #44	; 0x2c
 800440a:	fb01 f303 	mul.w	r3, r1, r3
 800440e:	4413      	add	r3, r2
 8004410:	3361      	adds	r3, #97	; 0x61
 8004412:	2205      	movs	r2, #5
 8004414:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	b2d2      	uxtb	r2, r2
 800441e:	4611      	mov	r1, r2
 8004420:	4618      	mov	r0, r3
 8004422:	f004 fc38 	bl	8008c96 <USB_HC_Halt>
}
 8004426:	e22e      	b.n	8004886 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	4413      	add	r3, r2
 8004430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f003 0310 	and.w	r3, r3, #16
 800443a:	2b10      	cmp	r3, #16
 800443c:	d140      	bne.n	80044c0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	212c      	movs	r1, #44	; 0x2c
 8004444:	fb01 f303 	mul.w	r3, r1, r3
 8004448:	4413      	add	r3, r2
 800444a:	335c      	adds	r3, #92	; 0x5c
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	212c      	movs	r1, #44	; 0x2c
 8004456:	fb01 f303 	mul.w	r3, r1, r3
 800445a:	4413      	add	r3, r2
 800445c:	3361      	adds	r3, #97	; 0x61
 800445e:	2203      	movs	r2, #3
 8004460:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	212c      	movs	r1, #44	; 0x2c
 8004468:	fb01 f303 	mul.w	r3, r1, r3
 800446c:	4413      	add	r3, r2
 800446e:	333d      	adds	r3, #61	; 0x3d
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d112      	bne.n	800449c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	212c      	movs	r1, #44	; 0x2c
 800447c:	fb01 f303 	mul.w	r3, r1, r3
 8004480:	4413      	add	r3, r2
 8004482:	333c      	adds	r3, #60	; 0x3c
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d108      	bne.n	800449c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	212c      	movs	r1, #44	; 0x2c
 8004490:	fb01 f303 	mul.w	r3, r1, r3
 8004494:	4413      	add	r3, r2
 8004496:	333d      	adds	r3, #61	; 0x3d
 8004498:	2201      	movs	r2, #1
 800449a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	4611      	mov	r1, r2
 80044a6:	4618      	mov	r0, r3
 80044a8:	f004 fbf5 	bl	8008c96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044b8:	461a      	mov	r2, r3
 80044ba:	2310      	movs	r3, #16
 80044bc:	6093      	str	r3, [r2, #8]
}
 80044be:	e1e2      	b.n	8004886 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	015a      	lsls	r2, r3, #5
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	4413      	add	r3, r2
 80044c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d2:	2b80      	cmp	r3, #128	; 0x80
 80044d4:	d164      	bne.n	80045a0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d111      	bne.n	8004502 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	212c      	movs	r1, #44	; 0x2c
 80044e4:	fb01 f303 	mul.w	r3, r1, r3
 80044e8:	4413      	add	r3, r2
 80044ea:	3361      	adds	r3, #97	; 0x61
 80044ec:	2206      	movs	r2, #6
 80044ee:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	b2d2      	uxtb	r2, r2
 80044f8:	4611      	mov	r1, r2
 80044fa:	4618      	mov	r0, r3
 80044fc:	f004 fbcb 	bl	8008c96 <USB_HC_Halt>
 8004500:	e044      	b.n	800458c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	212c      	movs	r1, #44	; 0x2c
 8004508:	fb01 f303 	mul.w	r3, r1, r3
 800450c:	4413      	add	r3, r2
 800450e:	335c      	adds	r3, #92	; 0x5c
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	1c5a      	adds	r2, r3, #1
 8004514:	6879      	ldr	r1, [r7, #4]
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	202c      	movs	r0, #44	; 0x2c
 800451a:	fb00 f303 	mul.w	r3, r0, r3
 800451e:	440b      	add	r3, r1
 8004520:	335c      	adds	r3, #92	; 0x5c
 8004522:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	212c      	movs	r1, #44	; 0x2c
 800452a:	fb01 f303 	mul.w	r3, r1, r3
 800452e:	4413      	add	r3, r2
 8004530:	335c      	adds	r3, #92	; 0x5c
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b02      	cmp	r3, #2
 8004536:	d920      	bls.n	800457a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	212c      	movs	r1, #44	; 0x2c
 800453e:	fb01 f303 	mul.w	r3, r1, r3
 8004542:	4413      	add	r3, r2
 8004544:	335c      	adds	r3, #92	; 0x5c
 8004546:	2200      	movs	r2, #0
 8004548:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	212c      	movs	r1, #44	; 0x2c
 8004550:	fb01 f303 	mul.w	r3, r1, r3
 8004554:	4413      	add	r3, r2
 8004556:	3360      	adds	r3, #96	; 0x60
 8004558:	2204      	movs	r2, #4
 800455a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	b2d9      	uxtb	r1, r3
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	202c      	movs	r0, #44	; 0x2c
 8004566:	fb00 f303 	mul.w	r3, r0, r3
 800456a:	4413      	add	r3, r2
 800456c:	3360      	adds	r3, #96	; 0x60
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	461a      	mov	r2, r3
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f008 fc88 	bl	800ce88 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004578:	e008      	b.n	800458c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	212c      	movs	r1, #44	; 0x2c
 8004580:	fb01 f303 	mul.w	r3, r1, r3
 8004584:	4413      	add	r3, r2
 8004586:	3360      	adds	r3, #96	; 0x60
 8004588:	2202      	movs	r2, #2
 800458a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	4413      	add	r3, r2
 8004594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004598:	461a      	mov	r2, r3
 800459a:	2380      	movs	r3, #128	; 0x80
 800459c:	6093      	str	r3, [r2, #8]
}
 800459e:	e172      	b.n	8004886 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	015a      	lsls	r2, r3, #5
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	4413      	add	r3, r2
 80045a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045b6:	d11b      	bne.n	80045f0 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	212c      	movs	r1, #44	; 0x2c
 80045be:	fb01 f303 	mul.w	r3, r1, r3
 80045c2:	4413      	add	r3, r2
 80045c4:	3361      	adds	r3, #97	; 0x61
 80045c6:	2208      	movs	r2, #8
 80045c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	b2d2      	uxtb	r2, r2
 80045d2:	4611      	mov	r1, r2
 80045d4:	4618      	mov	r0, r3
 80045d6:	f004 fb5e 	bl	8008c96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045e6:	461a      	mov	r2, r3
 80045e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045ec:	6093      	str	r3, [r2, #8]
}
 80045ee:	e14a      	b.n	8004886 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b02      	cmp	r3, #2
 8004604:	f040 813f 	bne.w	8004886 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	212c      	movs	r1, #44	; 0x2c
 800460e:	fb01 f303 	mul.w	r3, r1, r3
 8004612:	4413      	add	r3, r2
 8004614:	3361      	adds	r3, #97	; 0x61
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d17d      	bne.n	8004718 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	212c      	movs	r1, #44	; 0x2c
 8004622:	fb01 f303 	mul.w	r3, r1, r3
 8004626:	4413      	add	r3, r2
 8004628:	3360      	adds	r3, #96	; 0x60
 800462a:	2201      	movs	r2, #1
 800462c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	212c      	movs	r1, #44	; 0x2c
 8004634:	fb01 f303 	mul.w	r3, r1, r3
 8004638:	4413      	add	r3, r2
 800463a:	333f      	adds	r3, #63	; 0x3f
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	2b02      	cmp	r3, #2
 8004640:	d00a      	beq.n	8004658 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	212c      	movs	r1, #44	; 0x2c
 8004648:	fb01 f303 	mul.w	r3, r1, r3
 800464c:	4413      	add	r3, r2
 800464e:	333f      	adds	r3, #63	; 0x3f
 8004650:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004652:	2b03      	cmp	r3, #3
 8004654:	f040 8100 	bne.w	8004858 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d113      	bne.n	8004688 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	212c      	movs	r1, #44	; 0x2c
 8004666:	fb01 f303 	mul.w	r3, r1, r3
 800466a:	4413      	add	r3, r2
 800466c:	3355      	adds	r3, #85	; 0x55
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	f083 0301 	eor.w	r3, r3, #1
 8004674:	b2d8      	uxtb	r0, r3
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	212c      	movs	r1, #44	; 0x2c
 800467c:	fb01 f303 	mul.w	r3, r1, r3
 8004680:	4413      	add	r3, r2
 8004682:	3355      	adds	r3, #85	; 0x55
 8004684:	4602      	mov	r2, r0
 8004686:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	2b01      	cmp	r3, #1
 800468e:	f040 80e3 	bne.w	8004858 <HCD_HC_OUT_IRQHandler+0x69c>
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	212c      	movs	r1, #44	; 0x2c
 8004698:	fb01 f303 	mul.w	r3, r1, r3
 800469c:	4413      	add	r3, r2
 800469e:	334c      	adds	r3, #76	; 0x4c
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 80d8 	beq.w	8004858 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	212c      	movs	r1, #44	; 0x2c
 80046ae:	fb01 f303 	mul.w	r3, r1, r3
 80046b2:	4413      	add	r3, r2
 80046b4:	334c      	adds	r3, #76	; 0x4c
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6879      	ldr	r1, [r7, #4]
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	202c      	movs	r0, #44	; 0x2c
 80046be:	fb00 f202 	mul.w	r2, r0, r2
 80046c2:	440a      	add	r2, r1
 80046c4:	3240      	adds	r2, #64	; 0x40
 80046c6:	8812      	ldrh	r2, [r2, #0]
 80046c8:	4413      	add	r3, r2
 80046ca:	3b01      	subs	r3, #1
 80046cc:	6879      	ldr	r1, [r7, #4]
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	202c      	movs	r0, #44	; 0x2c
 80046d2:	fb00 f202 	mul.w	r2, r0, r2
 80046d6:	440a      	add	r2, r1
 80046d8:	3240      	adds	r2, #64	; 0x40
 80046da:	8812      	ldrh	r2, [r2, #0]
 80046dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 80b5 	beq.w	8004858 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	212c      	movs	r1, #44	; 0x2c
 80046f4:	fb01 f303 	mul.w	r3, r1, r3
 80046f8:	4413      	add	r3, r2
 80046fa:	3355      	adds	r3, #85	; 0x55
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	f083 0301 	eor.w	r3, r3, #1
 8004702:	b2d8      	uxtb	r0, r3
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	212c      	movs	r1, #44	; 0x2c
 800470a:	fb01 f303 	mul.w	r3, r1, r3
 800470e:	4413      	add	r3, r2
 8004710:	3355      	adds	r3, #85	; 0x55
 8004712:	4602      	mov	r2, r0
 8004714:	701a      	strb	r2, [r3, #0]
 8004716:	e09f      	b.n	8004858 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	212c      	movs	r1, #44	; 0x2c
 800471e:	fb01 f303 	mul.w	r3, r1, r3
 8004722:	4413      	add	r3, r2
 8004724:	3361      	adds	r3, #97	; 0x61
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	2b03      	cmp	r3, #3
 800472a:	d109      	bne.n	8004740 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	212c      	movs	r1, #44	; 0x2c
 8004732:	fb01 f303 	mul.w	r3, r1, r3
 8004736:	4413      	add	r3, r2
 8004738:	3360      	adds	r3, #96	; 0x60
 800473a:	2202      	movs	r2, #2
 800473c:	701a      	strb	r2, [r3, #0]
 800473e:	e08b      	b.n	8004858 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	212c      	movs	r1, #44	; 0x2c
 8004746:	fb01 f303 	mul.w	r3, r1, r3
 800474a:	4413      	add	r3, r2
 800474c:	3361      	adds	r3, #97	; 0x61
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	2b04      	cmp	r3, #4
 8004752:	d109      	bne.n	8004768 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	212c      	movs	r1, #44	; 0x2c
 800475a:	fb01 f303 	mul.w	r3, r1, r3
 800475e:	4413      	add	r3, r2
 8004760:	3360      	adds	r3, #96	; 0x60
 8004762:	2202      	movs	r2, #2
 8004764:	701a      	strb	r2, [r3, #0]
 8004766:	e077      	b.n	8004858 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	212c      	movs	r1, #44	; 0x2c
 800476e:	fb01 f303 	mul.w	r3, r1, r3
 8004772:	4413      	add	r3, r2
 8004774:	3361      	adds	r3, #97	; 0x61
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	2b05      	cmp	r3, #5
 800477a:	d109      	bne.n	8004790 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	212c      	movs	r1, #44	; 0x2c
 8004782:	fb01 f303 	mul.w	r3, r1, r3
 8004786:	4413      	add	r3, r2
 8004788:	3360      	adds	r3, #96	; 0x60
 800478a:	2205      	movs	r2, #5
 800478c:	701a      	strb	r2, [r3, #0]
 800478e:	e063      	b.n	8004858 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	212c      	movs	r1, #44	; 0x2c
 8004796:	fb01 f303 	mul.w	r3, r1, r3
 800479a:	4413      	add	r3, r2
 800479c:	3361      	adds	r3, #97	; 0x61
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	2b06      	cmp	r3, #6
 80047a2:	d009      	beq.n	80047b8 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	212c      	movs	r1, #44	; 0x2c
 80047aa:	fb01 f303 	mul.w	r3, r1, r3
 80047ae:	4413      	add	r3, r2
 80047b0:	3361      	adds	r3, #97	; 0x61
 80047b2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80047b4:	2b08      	cmp	r3, #8
 80047b6:	d14f      	bne.n	8004858 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	212c      	movs	r1, #44	; 0x2c
 80047be:	fb01 f303 	mul.w	r3, r1, r3
 80047c2:	4413      	add	r3, r2
 80047c4:	335c      	adds	r3, #92	; 0x5c
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	6879      	ldr	r1, [r7, #4]
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	202c      	movs	r0, #44	; 0x2c
 80047d0:	fb00 f303 	mul.w	r3, r0, r3
 80047d4:	440b      	add	r3, r1
 80047d6:	335c      	adds	r3, #92	; 0x5c
 80047d8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	212c      	movs	r1, #44	; 0x2c
 80047e0:	fb01 f303 	mul.w	r3, r1, r3
 80047e4:	4413      	add	r3, r2
 80047e6:	335c      	adds	r3, #92	; 0x5c
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d912      	bls.n	8004814 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	212c      	movs	r1, #44	; 0x2c
 80047f4:	fb01 f303 	mul.w	r3, r1, r3
 80047f8:	4413      	add	r3, r2
 80047fa:	335c      	adds	r3, #92	; 0x5c
 80047fc:	2200      	movs	r2, #0
 80047fe:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	212c      	movs	r1, #44	; 0x2c
 8004806:	fb01 f303 	mul.w	r3, r1, r3
 800480a:	4413      	add	r3, r2
 800480c:	3360      	adds	r3, #96	; 0x60
 800480e:	2204      	movs	r2, #4
 8004810:	701a      	strb	r2, [r3, #0]
 8004812:	e021      	b.n	8004858 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	212c      	movs	r1, #44	; 0x2c
 800481a:	fb01 f303 	mul.w	r3, r1, r3
 800481e:	4413      	add	r3, r2
 8004820:	3360      	adds	r3, #96	; 0x60
 8004822:	2202      	movs	r2, #2
 8004824:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	015a      	lsls	r2, r3, #5
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	4413      	add	r3, r2
 800482e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800483c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004844:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	015a      	lsls	r2, r3, #5
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	4413      	add	r3, r2
 800484e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004852:	461a      	mov	r2, r3
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	4413      	add	r3, r2
 8004860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004864:	461a      	mov	r2, r3
 8004866:	2302      	movs	r3, #2
 8004868:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	b2d9      	uxtb	r1, r3
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	202c      	movs	r0, #44	; 0x2c
 8004874:	fb00 f303 	mul.w	r3, r0, r3
 8004878:	4413      	add	r3, r2
 800487a:	3360      	adds	r3, #96	; 0x60
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	461a      	mov	r2, r3
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f008 fb01 	bl	800ce88 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004886:	bf00      	nop
 8004888:	3720      	adds	r7, #32
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b08a      	sub	sp, #40	; 0x28
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	0c5b      	lsrs	r3, r3, #17
 80048b4:	f003 030f 	and.w	r3, r3, #15
 80048b8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	091b      	lsrs	r3, r3, #4
 80048be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048c2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d004      	beq.n	80048d4 <HCD_RXQLVL_IRQHandler+0x46>
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	2b05      	cmp	r3, #5
 80048ce:	f000 80a9 	beq.w	8004a24 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80048d2:	e0aa      	b.n	8004a2a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f000 80a6 	beq.w	8004a28 <HCD_RXQLVL_IRQHandler+0x19a>
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	212c      	movs	r1, #44	; 0x2c
 80048e2:	fb01 f303 	mul.w	r3, r1, r3
 80048e6:	4413      	add	r3, r2
 80048e8:	3344      	adds	r3, #68	; 0x44
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 809b 	beq.w	8004a28 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	212c      	movs	r1, #44	; 0x2c
 80048f8:	fb01 f303 	mul.w	r3, r1, r3
 80048fc:	4413      	add	r3, r2
 80048fe:	3350      	adds	r3, #80	; 0x50
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	441a      	add	r2, r3
 8004906:	6879      	ldr	r1, [r7, #4]
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	202c      	movs	r0, #44	; 0x2c
 800490c:	fb00 f303 	mul.w	r3, r0, r3
 8004910:	440b      	add	r3, r1
 8004912:	334c      	adds	r3, #76	; 0x4c
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	429a      	cmp	r2, r3
 8004918:	d87a      	bhi.n	8004a10 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6818      	ldr	r0, [r3, #0]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	212c      	movs	r1, #44	; 0x2c
 8004924:	fb01 f303 	mul.w	r3, r1, r3
 8004928:	4413      	add	r3, r2
 800492a:	3344      	adds	r3, #68	; 0x44
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	b292      	uxth	r2, r2
 8004932:	4619      	mov	r1, r3
 8004934:	f003 fd06 	bl	8008344 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	212c      	movs	r1, #44	; 0x2c
 800493e:	fb01 f303 	mul.w	r3, r1, r3
 8004942:	4413      	add	r3, r2
 8004944:	3344      	adds	r3, #68	; 0x44
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	441a      	add	r2, r3
 800494c:	6879      	ldr	r1, [r7, #4]
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	202c      	movs	r0, #44	; 0x2c
 8004952:	fb00 f303 	mul.w	r3, r0, r3
 8004956:	440b      	add	r3, r1
 8004958:	3344      	adds	r3, #68	; 0x44
 800495a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	212c      	movs	r1, #44	; 0x2c
 8004962:	fb01 f303 	mul.w	r3, r1, r3
 8004966:	4413      	add	r3, r2
 8004968:	3350      	adds	r3, #80	; 0x50
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	441a      	add	r2, r3
 8004970:	6879      	ldr	r1, [r7, #4]
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	202c      	movs	r0, #44	; 0x2c
 8004976:	fb00 f303 	mul.w	r3, r0, r3
 800497a:	440b      	add	r3, r1
 800497c:	3350      	adds	r3, #80	; 0x50
 800497e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	4413      	add	r3, r2
 8004988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	0cdb      	lsrs	r3, r3, #19
 8004990:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004994:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	212c      	movs	r1, #44	; 0x2c
 800499c:	fb01 f303 	mul.w	r3, r1, r3
 80049a0:	4413      	add	r3, r2
 80049a2:	3340      	adds	r3, #64	; 0x40
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	461a      	mov	r2, r3
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d13c      	bne.n	8004a28 <HCD_RXQLVL_IRQHandler+0x19a>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d039      	beq.n	8004a28 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	6a3b      	ldr	r3, [r7, #32]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80049ca:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049d2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e0:	461a      	mov	r2, r3
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	212c      	movs	r1, #44	; 0x2c
 80049ec:	fb01 f303 	mul.w	r3, r1, r3
 80049f0:	4413      	add	r3, r2
 80049f2:	3354      	adds	r3, #84	; 0x54
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	f083 0301 	eor.w	r3, r3, #1
 80049fa:	b2d8      	uxtb	r0, r3
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	212c      	movs	r1, #44	; 0x2c
 8004a02:	fb01 f303 	mul.w	r3, r1, r3
 8004a06:	4413      	add	r3, r2
 8004a08:	3354      	adds	r3, #84	; 0x54
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	701a      	strb	r2, [r3, #0]
      break;
 8004a0e:	e00b      	b.n	8004a28 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	212c      	movs	r1, #44	; 0x2c
 8004a16:	fb01 f303 	mul.w	r3, r1, r3
 8004a1a:	4413      	add	r3, r2
 8004a1c:	3360      	adds	r3, #96	; 0x60
 8004a1e:	2204      	movs	r2, #4
 8004a20:	701a      	strb	r2, [r3, #0]
      break;
 8004a22:	e001      	b.n	8004a28 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004a24:	bf00      	nop
 8004a26:	e000      	b.n	8004a2a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004a28:	bf00      	nop
  }
}
 8004a2a:	bf00      	nop
 8004a2c:	3728      	adds	r7, #40	; 0x28
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b086      	sub	sp, #24
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004a5e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d10b      	bne.n	8004a82 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d102      	bne.n	8004a7a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f008 f9eb 	bl	800ce50 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	f043 0302 	orr.w	r3, r3, #2
 8004a80:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f003 0308 	and.w	r3, r3, #8
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d132      	bne.n	8004af2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f043 0308 	orr.w	r3, r3, #8
 8004a92:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d126      	bne.n	8004aec <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d113      	bne.n	8004ace <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004aac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ab0:	d106      	bne.n	8004ac0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2102      	movs	r1, #2
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f003 fdb1 	bl	8008620 <USB_InitFSLSPClkSel>
 8004abe:	e011      	b.n	8004ae4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f003 fdaa 	bl	8008620 <USB_InitFSLSPClkSel>
 8004acc:	e00a      	b.n	8004ae4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d106      	bne.n	8004ae4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004adc:	461a      	mov	r2, r3
 8004ade:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004ae2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f008 f9dd 	bl	800cea4 <HAL_HCD_PortEnabled_Callback>
 8004aea:	e002      	b.n	8004af2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f008 f9e7 	bl	800cec0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f003 0320 	and.w	r3, r3, #32
 8004af8:	2b20      	cmp	r3, #32
 8004afa:	d103      	bne.n	8004b04 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f043 0320 	orr.w	r3, r3, #32
 8004b02:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	6013      	str	r3, [r2, #0]
}
 8004b10:	bf00      	nop
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e12b      	b.n	8004d82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d106      	bne.n	8004b44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7fd f83c 	bl	8001bbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2224      	movs	r2, #36	; 0x24
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0201 	bic.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b7c:	f002 fab2 	bl	80070e4 <HAL_RCC_GetPCLK1Freq>
 8004b80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	4a81      	ldr	r2, [pc, #516]	; (8004d8c <HAL_I2C_Init+0x274>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d807      	bhi.n	8004b9c <HAL_I2C_Init+0x84>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4a80      	ldr	r2, [pc, #512]	; (8004d90 <HAL_I2C_Init+0x278>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	bf94      	ite	ls
 8004b94:	2301      	movls	r3, #1
 8004b96:	2300      	movhi	r3, #0
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	e006      	b.n	8004baa <HAL_I2C_Init+0x92>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4a7d      	ldr	r2, [pc, #500]	; (8004d94 <HAL_I2C_Init+0x27c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	bf94      	ite	ls
 8004ba4:	2301      	movls	r3, #1
 8004ba6:	2300      	movhi	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e0e7      	b.n	8004d82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	4a78      	ldr	r2, [pc, #480]	; (8004d98 <HAL_I2C_Init+0x280>)
 8004bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bba:	0c9b      	lsrs	r3, r3, #18
 8004bbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	4a6a      	ldr	r2, [pc, #424]	; (8004d8c <HAL_I2C_Init+0x274>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d802      	bhi.n	8004bec <HAL_I2C_Init+0xd4>
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	3301      	adds	r3, #1
 8004bea:	e009      	b.n	8004c00 <HAL_I2C_Init+0xe8>
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004bf2:	fb02 f303 	mul.w	r3, r2, r3
 8004bf6:	4a69      	ldr	r2, [pc, #420]	; (8004d9c <HAL_I2C_Init+0x284>)
 8004bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfc:	099b      	lsrs	r3, r3, #6
 8004bfe:	3301      	adds	r3, #1
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6812      	ldr	r2, [r2, #0]
 8004c04:	430b      	orrs	r3, r1
 8004c06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	495c      	ldr	r1, [pc, #368]	; (8004d8c <HAL_I2C_Init+0x274>)
 8004c1c:	428b      	cmp	r3, r1
 8004c1e:	d819      	bhi.n	8004c54 <HAL_I2C_Init+0x13c>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	1e59      	subs	r1, r3, #1
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	005b      	lsls	r3, r3, #1
 8004c2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c2e:	1c59      	adds	r1, r3, #1
 8004c30:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c34:	400b      	ands	r3, r1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <HAL_I2C_Init+0x138>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	1e59      	subs	r1, r3, #1
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c48:	3301      	adds	r3, #1
 8004c4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c4e:	e051      	b.n	8004cf4 <HAL_I2C_Init+0x1dc>
 8004c50:	2304      	movs	r3, #4
 8004c52:	e04f      	b.n	8004cf4 <HAL_I2C_Init+0x1dc>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d111      	bne.n	8004c80 <HAL_I2C_Init+0x168>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	1e58      	subs	r0, r3, #1
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6859      	ldr	r1, [r3, #4]
 8004c64:	460b      	mov	r3, r1
 8004c66:	005b      	lsls	r3, r3, #1
 8004c68:	440b      	add	r3, r1
 8004c6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c6e:	3301      	adds	r3, #1
 8004c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	bf0c      	ite	eq
 8004c78:	2301      	moveq	r3, #1
 8004c7a:	2300      	movne	r3, #0
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	e012      	b.n	8004ca6 <HAL_I2C_Init+0x18e>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	1e58      	subs	r0, r3, #1
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6859      	ldr	r1, [r3, #4]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	440b      	add	r3, r1
 8004c8e:	0099      	lsls	r1, r3, #2
 8004c90:	440b      	add	r3, r1
 8004c92:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c96:	3301      	adds	r3, #1
 8004c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	bf0c      	ite	eq
 8004ca0:	2301      	moveq	r3, #1
 8004ca2:	2300      	movne	r3, #0
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <HAL_I2C_Init+0x196>
 8004caa:	2301      	movs	r3, #1
 8004cac:	e022      	b.n	8004cf4 <HAL_I2C_Init+0x1dc>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10e      	bne.n	8004cd4 <HAL_I2C_Init+0x1bc>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	1e58      	subs	r0, r3, #1
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6859      	ldr	r1, [r3, #4]
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	005b      	lsls	r3, r3, #1
 8004cc2:	440b      	add	r3, r1
 8004cc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cc8:	3301      	adds	r3, #1
 8004cca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cd2:	e00f      	b.n	8004cf4 <HAL_I2C_Init+0x1dc>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	1e58      	subs	r0, r3, #1
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6859      	ldr	r1, [r3, #4]
 8004cdc:	460b      	mov	r3, r1
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	440b      	add	r3, r1
 8004ce2:	0099      	lsls	r1, r3, #2
 8004ce4:	440b      	add	r3, r1
 8004ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cea:	3301      	adds	r3, #1
 8004cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cf0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cf4:	6879      	ldr	r1, [r7, #4]
 8004cf6:	6809      	ldr	r1, [r1, #0]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	69da      	ldr	r2, [r3, #28]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	6911      	ldr	r1, [r2, #16]
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	68d2      	ldr	r2, [r2, #12]
 8004d2e:	4311      	orrs	r1, r2
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	6812      	ldr	r2, [r2, #0]
 8004d34:	430b      	orrs	r3, r1
 8004d36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	695a      	ldr	r2, [r3, #20]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f042 0201 	orr.w	r2, r2, #1
 8004d62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	000186a0 	.word	0x000186a0
 8004d90:	001e847f 	.word	0x001e847f
 8004d94:	003d08ff 	.word	0x003d08ff
 8004d98:	431bde83 	.word	0x431bde83
 8004d9c:	10624dd3 	.word	0x10624dd3

08004da0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e021      	b.n	8004df6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2224      	movs	r2, #36	; 0x24
 8004db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0201 	bic.w	r2, r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7fc ff3e 	bl	8001c4c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
	...

08004e00 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b088      	sub	sp, #32
 8004e04:	af02      	add	r7, sp, #8
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	4608      	mov	r0, r1
 8004e0a:	4611      	mov	r1, r2
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	4603      	mov	r3, r0
 8004e10:	817b      	strh	r3, [r7, #10]
 8004e12:	460b      	mov	r3, r1
 8004e14:	813b      	strh	r3, [r7, #8]
 8004e16:	4613      	mov	r3, r2
 8004e18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e1a:	f7fd fab1 	bl	8002380 <HAL_GetTick>
 8004e1e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b20      	cmp	r3, #32
 8004e2a:	f040 80d9 	bne.w	8004fe0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	2319      	movs	r3, #25
 8004e34:	2201      	movs	r2, #1
 8004e36:	496d      	ldr	r1, [pc, #436]	; (8004fec <HAL_I2C_Mem_Write+0x1ec>)
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 fc8d 	bl	8005758 <I2C_WaitOnFlagUntilTimeout>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d001      	beq.n	8004e48 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004e44:	2302      	movs	r3, #2
 8004e46:	e0cc      	b.n	8004fe2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d101      	bne.n	8004e56 <HAL_I2C_Mem_Write+0x56>
 8004e52:	2302      	movs	r3, #2
 8004e54:	e0c5      	b.n	8004fe2 <HAL_I2C_Mem_Write+0x1e2>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d007      	beq.n	8004e7c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f042 0201 	orr.w	r2, r2, #1
 8004e7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2221      	movs	r2, #33	; 0x21
 8004e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2240      	movs	r2, #64	; 0x40
 8004e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6a3a      	ldr	r2, [r7, #32]
 8004ea6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004eac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4a4d      	ldr	r2, [pc, #308]	; (8004ff0 <HAL_I2C_Mem_Write+0x1f0>)
 8004ebc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ebe:	88f8      	ldrh	r0, [r7, #6]
 8004ec0:	893a      	ldrh	r2, [r7, #8]
 8004ec2:	8979      	ldrh	r1, [r7, #10]
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	9301      	str	r3, [sp, #4]
 8004ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	4603      	mov	r3, r0
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 fac4 	bl	800545c <I2C_RequestMemoryWrite>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d052      	beq.n	8004f80 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e081      	b.n	8004fe2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f000 fd0e 	bl	8005904 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00d      	beq.n	8004f0a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	d107      	bne.n	8004f06 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e06b      	b.n	8004fe2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	781a      	ldrb	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b04      	cmp	r3, #4
 8004f46:	d11b      	bne.n	8004f80 <HAL_I2C_Mem_Write+0x180>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d017      	beq.n	8004f80 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	781a      	ldrb	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	1c5a      	adds	r2, r3, #1
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1aa      	bne.n	8004ede <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 fcfa 	bl	8005986 <I2C_WaitOnBTFFlagUntilTimeout>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00d      	beq.n	8004fb4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9c:	2b04      	cmp	r3, #4
 8004f9e:	d107      	bne.n	8004fb0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e016      	b.n	8004fe2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	e000      	b.n	8004fe2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004fe0:	2302      	movs	r3, #2
  }
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3718      	adds	r7, #24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	00100002 	.word	0x00100002
 8004ff0:	ffff0000 	.word	0xffff0000

08004ff4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b08c      	sub	sp, #48	; 0x30
 8004ff8:	af02      	add	r7, sp, #8
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	4608      	mov	r0, r1
 8004ffe:	4611      	mov	r1, r2
 8005000:	461a      	mov	r2, r3
 8005002:	4603      	mov	r3, r0
 8005004:	817b      	strh	r3, [r7, #10]
 8005006:	460b      	mov	r3, r1
 8005008:	813b      	strh	r3, [r7, #8]
 800500a:	4613      	mov	r3, r2
 800500c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800500e:	f7fd f9b7 	bl	8002380 <HAL_GetTick>
 8005012:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b20      	cmp	r3, #32
 800501e:	f040 8208 	bne.w	8005432 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	2319      	movs	r3, #25
 8005028:	2201      	movs	r2, #1
 800502a:	497b      	ldr	r1, [pc, #492]	; (8005218 <HAL_I2C_Mem_Read+0x224>)
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 fb93 	bl	8005758 <I2C_WaitOnFlagUntilTimeout>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d001      	beq.n	800503c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005038:	2302      	movs	r3, #2
 800503a:	e1fb      	b.n	8005434 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005042:	2b01      	cmp	r3, #1
 8005044:	d101      	bne.n	800504a <HAL_I2C_Mem_Read+0x56>
 8005046:	2302      	movs	r3, #2
 8005048:	e1f4      	b.n	8005434 <HAL_I2C_Mem_Read+0x440>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	2b01      	cmp	r3, #1
 800505e:	d007      	beq.n	8005070 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f042 0201 	orr.w	r2, r2, #1
 800506e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800507e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2222      	movs	r2, #34	; 0x22
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2240      	movs	r2, #64	; 0x40
 800508c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800509a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80050a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4a5b      	ldr	r2, [pc, #364]	; (800521c <HAL_I2C_Mem_Read+0x228>)
 80050b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050b2:	88f8      	ldrh	r0, [r7, #6]
 80050b4:	893a      	ldrh	r2, [r7, #8]
 80050b6:	8979      	ldrh	r1, [r7, #10]
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	9301      	str	r3, [sp, #4]
 80050bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	4603      	mov	r3, r0
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f000 fa60 	bl	8005588 <I2C_RequestMemoryRead>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e1b0      	b.n	8005434 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d113      	bne.n	8005102 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050da:	2300      	movs	r3, #0
 80050dc:	623b      	str	r3, [r7, #32]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	623b      	str	r3, [r7, #32]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	623b      	str	r3, [r7, #32]
 80050ee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050fe:	601a      	str	r2, [r3, #0]
 8005100:	e184      	b.n	800540c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005106:	2b01      	cmp	r3, #1
 8005108:	d11b      	bne.n	8005142 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005118:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800511a:	2300      	movs	r3, #0
 800511c:	61fb      	str	r3, [r7, #28]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	61fb      	str	r3, [r7, #28]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	61fb      	str	r3, [r7, #28]
 800512e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	e164      	b.n	800540c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005146:	2b02      	cmp	r3, #2
 8005148:	d11b      	bne.n	8005182 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005158:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005168:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800516a:	2300      	movs	r3, #0
 800516c:	61bb      	str	r3, [r7, #24]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	61bb      	str	r3, [r7, #24]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	61bb      	str	r3, [r7, #24]
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	e144      	b.n	800540c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005182:	2300      	movs	r3, #0
 8005184:	617b      	str	r3, [r7, #20]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	617b      	str	r3, [r7, #20]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	617b      	str	r3, [r7, #20]
 8005196:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005198:	e138      	b.n	800540c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800519e:	2b03      	cmp	r3, #3
 80051a0:	f200 80f1 	bhi.w	8005386 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d123      	bne.n	80051f4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 fc29 	bl	8005a08 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e139      	b.n	8005434 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	691a      	ldr	r2, [r3, #16]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	b2d2      	uxtb	r2, r2
 80051cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	1c5a      	adds	r2, r3, #1
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051dc:	3b01      	subs	r3, #1
 80051de:	b29a      	uxth	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	3b01      	subs	r3, #1
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051f2:	e10b      	b.n	800540c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d14e      	bne.n	800529a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005202:	2200      	movs	r2, #0
 8005204:	4906      	ldr	r1, [pc, #24]	; (8005220 <HAL_I2C_Mem_Read+0x22c>)
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f000 faa6 	bl	8005758 <I2C_WaitOnFlagUntilTimeout>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d008      	beq.n	8005224 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e10e      	b.n	8005434 <HAL_I2C_Mem_Read+0x440>
 8005216:	bf00      	nop
 8005218:	00100002 	.word	0x00100002
 800521c:	ffff0000 	.word	0xffff0000
 8005220:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005232:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	691a      	ldr	r2, [r3, #16]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	b2d2      	uxtb	r2, r2
 8005240:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	1c5a      	adds	r2, r3, #1
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005250:	3b01      	subs	r3, #1
 8005252:	b29a      	uxth	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525c:	b29b      	uxth	r3, r3
 800525e:	3b01      	subs	r3, #1
 8005260:	b29a      	uxth	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	691a      	ldr	r2, [r3, #16]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005270:	b2d2      	uxtb	r2, r2
 8005272:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	1c5a      	adds	r2, r3, #1
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005282:	3b01      	subs	r3, #1
 8005284:	b29a      	uxth	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528e:	b29b      	uxth	r3, r3
 8005290:	3b01      	subs	r3, #1
 8005292:	b29a      	uxth	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005298:	e0b8      	b.n	800540c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a0:	2200      	movs	r2, #0
 80052a2:	4966      	ldr	r1, [pc, #408]	; (800543c <HAL_I2C_Mem_Read+0x448>)
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f000 fa57 	bl	8005758 <I2C_WaitOnFlagUntilTimeout>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e0bf      	b.n	8005434 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	691a      	ldr	r2, [r3, #16]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	1c5a      	adds	r2, r3, #1
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e0:	3b01      	subs	r3, #1
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	3b01      	subs	r3, #1
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fc:	2200      	movs	r2, #0
 80052fe:	494f      	ldr	r1, [pc, #316]	; (800543c <HAL_I2C_Mem_Read+0x448>)
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f000 fa29 	bl	8005758 <I2C_WaitOnFlagUntilTimeout>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d001      	beq.n	8005310 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e091      	b.n	8005434 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800531e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	691a      	ldr	r2, [r3, #16]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	b2d2      	uxtb	r2, r2
 800532c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	1c5a      	adds	r2, r3, #1
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800533c:	3b01      	subs	r3, #1
 800533e:	b29a      	uxth	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005348:	b29b      	uxth	r3, r3
 800534a:	3b01      	subs	r3, #1
 800534c:	b29a      	uxth	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	691a      	ldr	r2, [r3, #16]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535c:	b2d2      	uxtb	r2, r2
 800535e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005364:	1c5a      	adds	r2, r3, #1
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800536e:	3b01      	subs	r3, #1
 8005370:	b29a      	uxth	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537a:	b29b      	uxth	r3, r3
 800537c:	3b01      	subs	r3, #1
 800537e:	b29a      	uxth	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005384:	e042      	b.n	800540c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005388:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 fb3c 	bl	8005a08 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e04c      	b.n	8005434 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	691a      	ldr	r2, [r3, #16]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a4:	b2d2      	uxtb	r2, r2
 80053a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	1c5a      	adds	r2, r3, #1
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053b6:	3b01      	subs	r3, #1
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	3b01      	subs	r3, #1
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	f003 0304 	and.w	r3, r3, #4
 80053d6:	2b04      	cmp	r3, #4
 80053d8:	d118      	bne.n	800540c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	691a      	ldr	r2, [r3, #16]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	b2d2      	uxtb	r2, r2
 80053e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005402:	b29b      	uxth	r3, r3
 8005404:	3b01      	subs	r3, #1
 8005406:	b29a      	uxth	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005410:	2b00      	cmp	r3, #0
 8005412:	f47f aec2 	bne.w	800519a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2220      	movs	r2, #32
 800541a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800542e:	2300      	movs	r3, #0
 8005430:	e000      	b.n	8005434 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005432:	2302      	movs	r3, #2
  }
}
 8005434:	4618      	mov	r0, r3
 8005436:	3728      	adds	r7, #40	; 0x28
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	00010004 	.word	0x00010004

08005440 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800544e:	b2db      	uxtb	r3, r3
}
 8005450:	4618      	mov	r0, r3
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b088      	sub	sp, #32
 8005460:	af02      	add	r7, sp, #8
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	4608      	mov	r0, r1
 8005466:	4611      	mov	r1, r2
 8005468:	461a      	mov	r2, r3
 800546a:	4603      	mov	r3, r0
 800546c:	817b      	strh	r3, [r7, #10]
 800546e:	460b      	mov	r3, r1
 8005470:	813b      	strh	r3, [r7, #8]
 8005472:	4613      	mov	r3, r2
 8005474:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005484:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	2200      	movs	r2, #0
 800548e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f000 f960 	bl	8005758 <I2C_WaitOnFlagUntilTimeout>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00d      	beq.n	80054ba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ac:	d103      	bne.n	80054b6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e05f      	b.n	800557a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054ba:	897b      	ldrh	r3, [r7, #10]
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	461a      	mov	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	6a3a      	ldr	r2, [r7, #32]
 80054ce:	492d      	ldr	r1, [pc, #180]	; (8005584 <I2C_RequestMemoryWrite+0x128>)
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 f998 	bl	8005806 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d001      	beq.n	80054e0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e04c      	b.n	800557a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054e0:	2300      	movs	r3, #0
 80054e2:	617b      	str	r3, [r7, #20]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	617b      	str	r3, [r7, #20]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	617b      	str	r3, [r7, #20]
 80054f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054f8:	6a39      	ldr	r1, [r7, #32]
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 fa02 	bl	8005904 <I2C_WaitOnTXEFlagUntilTimeout>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00d      	beq.n	8005522 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550a:	2b04      	cmp	r3, #4
 800550c:	d107      	bne.n	800551e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800551c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e02b      	b.n	800557a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005522:	88fb      	ldrh	r3, [r7, #6]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d105      	bne.n	8005534 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005528:	893b      	ldrh	r3, [r7, #8]
 800552a:	b2da      	uxtb	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	611a      	str	r2, [r3, #16]
 8005532:	e021      	b.n	8005578 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005534:	893b      	ldrh	r3, [r7, #8]
 8005536:	0a1b      	lsrs	r3, r3, #8
 8005538:	b29b      	uxth	r3, r3
 800553a:	b2da      	uxtb	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005544:	6a39      	ldr	r1, [r7, #32]
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 f9dc 	bl	8005904 <I2C_WaitOnTXEFlagUntilTimeout>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00d      	beq.n	800556e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005556:	2b04      	cmp	r3, #4
 8005558:	d107      	bne.n	800556a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005568:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e005      	b.n	800557a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800556e:	893b      	ldrh	r3, [r7, #8]
 8005570:	b2da      	uxtb	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3718      	adds	r7, #24
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	00010002 	.word	0x00010002

08005588 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b088      	sub	sp, #32
 800558c:	af02      	add	r7, sp, #8
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	4608      	mov	r0, r1
 8005592:	4611      	mov	r1, r2
 8005594:	461a      	mov	r2, r3
 8005596:	4603      	mov	r3, r0
 8005598:	817b      	strh	r3, [r7, #10]
 800559a:	460b      	mov	r3, r1
 800559c:	813b      	strh	r3, [r7, #8]
 800559e:	4613      	mov	r3, r2
 80055a0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055b0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f000 f8c2 	bl	8005758 <I2C_WaitOnFlagUntilTimeout>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00d      	beq.n	80055f6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055e8:	d103      	bne.n	80055f2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e0aa      	b.n	800574c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055f6:	897b      	ldrh	r3, [r7, #10]
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	461a      	mov	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005604:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	6a3a      	ldr	r2, [r7, #32]
 800560a:	4952      	ldr	r1, [pc, #328]	; (8005754 <I2C_RequestMemoryRead+0x1cc>)
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 f8fa 	bl	8005806 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d001      	beq.n	800561c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e097      	b.n	800574c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800561c:	2300      	movs	r3, #0
 800561e:	617b      	str	r3, [r7, #20]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	617b      	str	r3, [r7, #20]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	617b      	str	r3, [r7, #20]
 8005630:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005634:	6a39      	ldr	r1, [r7, #32]
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f000 f964 	bl	8005904 <I2C_WaitOnTXEFlagUntilTimeout>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00d      	beq.n	800565e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	2b04      	cmp	r3, #4
 8005648:	d107      	bne.n	800565a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005658:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e076      	b.n	800574c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800565e:	88fb      	ldrh	r3, [r7, #6]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d105      	bne.n	8005670 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005664:	893b      	ldrh	r3, [r7, #8]
 8005666:	b2da      	uxtb	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	611a      	str	r2, [r3, #16]
 800566e:	e021      	b.n	80056b4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005670:	893b      	ldrh	r3, [r7, #8]
 8005672:	0a1b      	lsrs	r3, r3, #8
 8005674:	b29b      	uxth	r3, r3
 8005676:	b2da      	uxtb	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800567e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005680:	6a39      	ldr	r1, [r7, #32]
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f000 f93e 	bl	8005904 <I2C_WaitOnTXEFlagUntilTimeout>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00d      	beq.n	80056aa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005692:	2b04      	cmp	r3, #4
 8005694:	d107      	bne.n	80056a6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e050      	b.n	800574c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056aa:	893b      	ldrh	r3, [r7, #8]
 80056ac:	b2da      	uxtb	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056b6:	6a39      	ldr	r1, [r7, #32]
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f000 f923 	bl	8005904 <I2C_WaitOnTXEFlagUntilTimeout>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00d      	beq.n	80056e0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c8:	2b04      	cmp	r3, #4
 80056ca:	d107      	bne.n	80056dc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056da:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e035      	b.n	800574c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056ee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	6a3b      	ldr	r3, [r7, #32]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f000 f82b 	bl	8005758 <I2C_WaitOnFlagUntilTimeout>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00d      	beq.n	8005724 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005716:	d103      	bne.n	8005720 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800571e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e013      	b.n	800574c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005724:	897b      	ldrh	r3, [r7, #10]
 8005726:	b2db      	uxtb	r3, r3
 8005728:	f043 0301 	orr.w	r3, r3, #1
 800572c:	b2da      	uxtb	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	6a3a      	ldr	r2, [r7, #32]
 8005738:	4906      	ldr	r1, [pc, #24]	; (8005754 <I2C_RequestMemoryRead+0x1cc>)
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f000 f863 	bl	8005806 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e000      	b.n	800574c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	00010002 	.word	0x00010002

08005758 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	603b      	str	r3, [r7, #0]
 8005764:	4613      	mov	r3, r2
 8005766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005768:	e025      	b.n	80057b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005770:	d021      	beq.n	80057b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005772:	f7fc fe05 	bl	8002380 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	429a      	cmp	r2, r3
 8005780:	d302      	bcc.n	8005788 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d116      	bne.n	80057b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2220      	movs	r2, #32
 8005792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	f043 0220 	orr.w	r2, r3, #32
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e023      	b.n	80057fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	0c1b      	lsrs	r3, r3, #16
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d10d      	bne.n	80057dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	43da      	mvns	r2, r3
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	4013      	ands	r3, r2
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	bf0c      	ite	eq
 80057d2:	2301      	moveq	r3, #1
 80057d4:	2300      	movne	r3, #0
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	461a      	mov	r2, r3
 80057da:	e00c      	b.n	80057f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	43da      	mvns	r2, r3
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	4013      	ands	r3, r2
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	bf0c      	ite	eq
 80057ee:	2301      	moveq	r3, #1
 80057f0:	2300      	movne	r3, #0
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	461a      	mov	r2, r3
 80057f6:	79fb      	ldrb	r3, [r7, #7]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d0b6      	beq.n	800576a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b084      	sub	sp, #16
 800580a:	af00      	add	r7, sp, #0
 800580c:	60f8      	str	r0, [r7, #12]
 800580e:	60b9      	str	r1, [r7, #8]
 8005810:	607a      	str	r2, [r7, #4]
 8005812:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005814:	e051      	b.n	80058ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005824:	d123      	bne.n	800586e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005834:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800583e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2220      	movs	r2, #32
 800584a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	f043 0204 	orr.w	r2, r3, #4
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e046      	b.n	80058fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005874:	d021      	beq.n	80058ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005876:	f7fc fd83 	bl	8002380 <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	429a      	cmp	r2, r3
 8005884:	d302      	bcc.n	800588c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d116      	bne.n	80058ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2220      	movs	r2, #32
 8005896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	f043 0220 	orr.w	r2, r3, #32
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e020      	b.n	80058fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	0c1b      	lsrs	r3, r3, #16
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d10c      	bne.n	80058de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	43da      	mvns	r2, r3
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	4013      	ands	r3, r2
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	bf14      	ite	ne
 80058d6:	2301      	movne	r3, #1
 80058d8:	2300      	moveq	r3, #0
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	e00b      	b.n	80058f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	43da      	mvns	r2, r3
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	4013      	ands	r3, r2
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	bf14      	ite	ne
 80058f0:	2301      	movne	r3, #1
 80058f2:	2300      	moveq	r3, #0
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d18d      	bne.n	8005816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005910:	e02d      	b.n	800596e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f000 f8ce 	bl	8005ab4 <I2C_IsAcknowledgeFailed>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d001      	beq.n	8005922 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e02d      	b.n	800597e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005928:	d021      	beq.n	800596e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800592a:	f7fc fd29 	bl	8002380 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	429a      	cmp	r2, r3
 8005938:	d302      	bcc.n	8005940 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d116      	bne.n	800596e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2220      	movs	r2, #32
 800594a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	f043 0220 	orr.w	r2, r3, #32
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e007      	b.n	800597e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005978:	2b80      	cmp	r3, #128	; 0x80
 800597a:	d1ca      	bne.n	8005912 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b084      	sub	sp, #16
 800598a:	af00      	add	r7, sp, #0
 800598c:	60f8      	str	r0, [r7, #12]
 800598e:	60b9      	str	r1, [r7, #8]
 8005990:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005992:	e02d      	b.n	80059f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f000 f88d 	bl	8005ab4 <I2C_IsAcknowledgeFailed>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e02d      	b.n	8005a00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059aa:	d021      	beq.n	80059f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ac:	f7fc fce8 	bl	8002380 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d302      	bcc.n	80059c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d116      	bne.n	80059f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2220      	movs	r2, #32
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059dc:	f043 0220 	orr.w	r2, r3, #32
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e007      	b.n	8005a00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	f003 0304 	and.w	r3, r3, #4
 80059fa:	2b04      	cmp	r3, #4
 80059fc:	d1ca      	bne.n	8005994 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a14:	e042      	b.n	8005a9c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	f003 0310 	and.w	r3, r3, #16
 8005a20:	2b10      	cmp	r3, #16
 8005a22:	d119      	bne.n	8005a58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f06f 0210 	mvn.w	r2, #16
 8005a2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2220      	movs	r2, #32
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e029      	b.n	8005aac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a58:	f7fc fc92 	bl	8002380 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d302      	bcc.n	8005a6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d116      	bne.n	8005a9c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a88:	f043 0220 	orr.w	r2, r3, #32
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e007      	b.n	8005aac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa6:	2b40      	cmp	r3, #64	; 0x40
 8005aa8:	d1b5      	bne.n	8005a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aca:	d11b      	bne.n	8005b04 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ad4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af0:	f043 0204 	orr.w	r2, r3, #4
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e000      	b.n	8005b06 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
	...

08005b14 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b088      	sub	sp, #32
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e128      	b.n	8005d78 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d109      	bne.n	8005b46 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a90      	ldr	r2, [pc, #576]	; (8005d80 <HAL_I2S_Init+0x26c>)
 8005b3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f7fc f8a7 	bl	8001c94 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2202      	movs	r2, #2
 8005b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	69db      	ldr	r3, [r3, #28]
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	6812      	ldr	r2, [r2, #0]
 8005b58:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005b5c:	f023 030f 	bic.w	r3, r3, #15
 8005b60:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2202      	movs	r2, #2
 8005b68:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d060      	beq.n	8005c34 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d102      	bne.n	8005b80 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005b7a:	2310      	movs	r3, #16
 8005b7c:	617b      	str	r3, [r7, #20]
 8005b7e:	e001      	b.n	8005b84 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005b80:	2320      	movs	r3, #32
 8005b82:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	2b20      	cmp	r3, #32
 8005b8a:	d802      	bhi.n	8005b92 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	005b      	lsls	r3, r3, #1
 8005b90:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005b92:	2001      	movs	r0, #1
 8005b94:	f001 fbdc 	bl	8007350 <HAL_RCCEx_GetPeriphCLKFreq>
 8005b98:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ba2:	d125      	bne.n	8005bf0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d010      	beq.n	8005bce <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4413      	add	r3, r2
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc8:	3305      	adds	r3, #5
 8005bca:	613b      	str	r3, [r7, #16]
 8005bcc:	e01f      	b.n	8005c0e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	00db      	lsls	r3, r3, #3
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bd8:	4613      	mov	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4413      	add	r3, r2
 8005bde:	005b      	lsls	r3, r3, #1
 8005be0:	461a      	mov	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bea:	3305      	adds	r3, #5
 8005bec:	613b      	str	r3, [r7, #16]
 8005bee:	e00e      	b.n	8005c0e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	005b      	lsls	r3, r3, #1
 8005c00:	461a      	mov	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c0a:	3305      	adds	r3, #5
 8005c0c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	4a5c      	ldr	r2, [pc, #368]	; (8005d84 <HAL_I2S_Init+0x270>)
 8005c12:	fba2 2303 	umull	r2, r3, r2, r3
 8005c16:	08db      	lsrs	r3, r3, #3
 8005c18:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	085b      	lsrs	r3, r3, #1
 8005c2a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	021b      	lsls	r3, r3, #8
 8005c30:	61bb      	str	r3, [r7, #24]
 8005c32:	e003      	b.n	8005c3c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005c34:	2302      	movs	r3, #2
 8005c36:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d902      	bls.n	8005c48 <HAL_I2S_Init+0x134>
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	2bff      	cmp	r3, #255	; 0xff
 8005c46:	d907      	bls.n	8005c58 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4c:	f043 0210 	orr.w	r2, r3, #16
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e08f      	b.n	8005d78 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691a      	ldr	r2, [r3, #16]
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	ea42 0103 	orr.w	r1, r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	69fa      	ldr	r2, [r7, #28]
 8005c68:	430a      	orrs	r2, r1
 8005c6a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005c76:	f023 030f 	bic.w	r3, r3, #15
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	6851      	ldr	r1, [r2, #4]
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	6892      	ldr	r2, [r2, #8]
 8005c82:	4311      	orrs	r1, r2
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	68d2      	ldr	r2, [r2, #12]
 8005c88:	4311      	orrs	r1, r2
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	6992      	ldr	r2, [r2, #24]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	431a      	orrs	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c9a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d161      	bne.n	8005d68 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a38      	ldr	r2, [pc, #224]	; (8005d88 <HAL_I2S_Init+0x274>)
 8005ca8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a37      	ldr	r2, [pc, #220]	; (8005d8c <HAL_I2S_Init+0x278>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d101      	bne.n	8005cb8 <HAL_I2S_Init+0x1a4>
 8005cb4:	4b36      	ldr	r3, [pc, #216]	; (8005d90 <HAL_I2S_Init+0x27c>)
 8005cb6:	e001      	b.n	8005cbc <HAL_I2S_Init+0x1a8>
 8005cb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cbc:	69db      	ldr	r3, [r3, #28]
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	6812      	ldr	r2, [r2, #0]
 8005cc2:	4932      	ldr	r1, [pc, #200]	; (8005d8c <HAL_I2S_Init+0x278>)
 8005cc4:	428a      	cmp	r2, r1
 8005cc6:	d101      	bne.n	8005ccc <HAL_I2S_Init+0x1b8>
 8005cc8:	4a31      	ldr	r2, [pc, #196]	; (8005d90 <HAL_I2S_Init+0x27c>)
 8005cca:	e001      	b.n	8005cd0 <HAL_I2S_Init+0x1bc>
 8005ccc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005cd0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005cd4:	f023 030f 	bic.w	r3, r3, #15
 8005cd8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a2b      	ldr	r2, [pc, #172]	; (8005d8c <HAL_I2S_Init+0x278>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d101      	bne.n	8005ce8 <HAL_I2S_Init+0x1d4>
 8005ce4:	4b2a      	ldr	r3, [pc, #168]	; (8005d90 <HAL_I2S_Init+0x27c>)
 8005ce6:	e001      	b.n	8005cec <HAL_I2S_Init+0x1d8>
 8005ce8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cec:	2202      	movs	r2, #2
 8005cee:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a25      	ldr	r2, [pc, #148]	; (8005d8c <HAL_I2S_Init+0x278>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d101      	bne.n	8005cfe <HAL_I2S_Init+0x1ea>
 8005cfa:	4b25      	ldr	r3, [pc, #148]	; (8005d90 <HAL_I2S_Init+0x27c>)
 8005cfc:	e001      	b.n	8005d02 <HAL_I2S_Init+0x1ee>
 8005cfe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d02:	69db      	ldr	r3, [r3, #28]
 8005d04:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d0e:	d003      	beq.n	8005d18 <HAL_I2S_Init+0x204>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d103      	bne.n	8005d20 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005d18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d1c:	613b      	str	r3, [r7, #16]
 8005d1e:	e001      	b.n	8005d24 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005d20:	2300      	movs	r3, #0
 8005d22:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005d42:	4313      	orrs	r3, r2
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	897b      	ldrh	r3, [r7, #10]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005d50:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a0d      	ldr	r2, [pc, #52]	; (8005d8c <HAL_I2S_Init+0x278>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d101      	bne.n	8005d60 <HAL_I2S_Init+0x24c>
 8005d5c:	4b0c      	ldr	r3, [pc, #48]	; (8005d90 <HAL_I2S_Init+0x27c>)
 8005d5e:	e001      	b.n	8005d64 <HAL_I2S_Init+0x250>
 8005d60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d64:	897a      	ldrh	r2, [r7, #10]
 8005d66:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3720      	adds	r7, #32
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	0800623b 	.word	0x0800623b
 8005d84:	cccccccd 	.word	0xcccccccd
 8005d88:	08006351 	.word	0x08006351
 8005d8c:	40003800 	.word	0x40003800
 8005d90:	40003400 	.word	0x40003400

08005d94 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d002      	beq.n	8005dae <HAL_I2S_Transmit_DMA+0x1a>
 8005da8:	88fb      	ldrh	r3, [r7, #6]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e08e      	b.n	8005ed0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d101      	bne.n	8005dc2 <HAL_I2S_Transmit_DMA+0x2e>
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	e086      	b.n	8005ed0 <HAL_I2S_Transmit_DMA+0x13c>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d005      	beq.n	8005de2 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8005dde:	2302      	movs	r3, #2
 8005de0:	e076      	b.n	8005ed0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2203      	movs	r2, #3
 8005de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	69db      	ldr	r3, [r3, #28]
 8005dfc:	f003 0307 	and.w	r3, r3, #7
 8005e00:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	2b03      	cmp	r3, #3
 8005e06:	d002      	beq.n	8005e0e <HAL_I2S_Transmit_DMA+0x7a>
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	2b05      	cmp	r3, #5
 8005e0c:	d10a      	bne.n	8005e24 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005e0e:	88fb      	ldrh	r3, [r7, #6]
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005e18:	88fb      	ldrh	r3, [r7, #6]
 8005e1a:	005b      	lsls	r3, r3, #1
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e22:	e005      	b.n	8005e30 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	88fa      	ldrh	r2, [r7, #6]
 8005e28:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	88fa      	ldrh	r2, [r7, #6]
 8005e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e34:	4a28      	ldr	r2, [pc, #160]	; (8005ed8 <HAL_I2S_Transmit_DMA+0x144>)
 8005e36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3c:	4a27      	ldr	r2, [pc, #156]	; (8005edc <HAL_I2S_Transmit_DMA+0x148>)
 8005e3e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e44:	4a26      	ldr	r2, [pc, #152]	; (8005ee0 <HAL_I2S_Transmit_DMA+0x14c>)
 8005e46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005e50:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005e58:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e5e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005e60:	f7fc fcdc 	bl	800281c <HAL_DMA_Start_IT>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00f      	beq.n	8005e8a <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e6e:	f043 0208 	orr.w	r2, r3, #8
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e022      	b.n	8005ed0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	69db      	ldr	r3, [r3, #28]
 8005e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d107      	bne.n	8005ea8 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	69da      	ldr	r2, [r3, #28]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ea6:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d107      	bne.n	8005ec6 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f042 0202 	orr.w	r2, r2, #2
 8005ec4:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3718      	adds	r7, #24
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	080060bb 	.word	0x080060bb
 8005edc:	08006079 	.word	0x08006079
 8005ee0:	08006135 	.word	0x08006135

08005ee4 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d002      	beq.n	8005efe <HAL_I2S_Receive_DMA+0x1a>
 8005ef8:	88fb      	ldrh	r3, [r7, #6]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e0a1      	b.n	8006046 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d101      	bne.n	8005f12 <HAL_I2S_Receive_DMA+0x2e>
 8005f0e:	2302      	movs	r3, #2
 8005f10:	e099      	b.n	8006046 <HAL_I2S_Receive_DMA+0x162>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d005      	beq.n	8005f32 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8005f2e:	2302      	movs	r3, #2
 8005f30:	e089      	b.n	8006046 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2204      	movs	r2, #4
 8005f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	69db      	ldr	r3, [r3, #28]
 8005f4c:	f003 0307 	and.w	r3, r3, #7
 8005f50:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	2b03      	cmp	r3, #3
 8005f56:	d002      	beq.n	8005f5e <HAL_I2S_Receive_DMA+0x7a>
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	2b05      	cmp	r3, #5
 8005f5c:	d10a      	bne.n	8005f74 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8005f5e:	88fb      	ldrh	r3, [r7, #6]
 8005f60:	005b      	lsls	r3, r3, #1
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8005f68:	88fb      	ldrh	r3, [r7, #6]
 8005f6a:	005b      	lsls	r3, r3, #1
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	865a      	strh	r2, [r3, #50]	; 0x32
 8005f72:	e005      	b.n	8005f80 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	88fa      	ldrh	r2, [r7, #6]
 8005f78:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	88fa      	ldrh	r2, [r7, #6]
 8005f7e:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f84:	4a32      	ldr	r2, [pc, #200]	; (8006050 <HAL_I2S_Receive_DMA+0x16c>)
 8005f86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f8c:	4a31      	ldr	r2, [pc, #196]	; (8006054 <HAL_I2S_Receive_DMA+0x170>)
 8005f8e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f94:	4a30      	ldr	r2, [pc, #192]	; (8006058 <HAL_I2S_Receive_DMA+0x174>)
 8005f96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fa2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fa6:	d10a      	bne.n	8005fbe <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005fa8:	2300      	movs	r3, #0
 8005faa:	613b      	str	r3, [r7, #16]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	613b      	str	r3, [r7, #16]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	613b      	str	r3, [r7, #16]
 8005fbc:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	330c      	adds	r3, #12
 8005fc8:	4619      	mov	r1, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fce:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8005fd4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8005fd6:	f7fc fc21 	bl	800281c <HAL_DMA_Start_IT>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00f      	beq.n	8006000 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe4:	f043 0208 	orr.w	r2, r3, #8
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e022      	b.n	8006046 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	69db      	ldr	r3, [r3, #28]
 8006006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800600a:	2b00      	cmp	r3, #0
 800600c:	d107      	bne.n	800601e <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	69da      	ldr	r2, [r3, #28]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800601c:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	2b00      	cmp	r3, #0
 800602a:	d107      	bne.n	800603c <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 0201 	orr.w	r2, r2, #1
 800603a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3718      	adds	r7, #24
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	08006119 	.word	0x08006119
 8006054:	080060d7 	.word	0x080060d7
 8006058:	08006135 	.word	0x08006135

0800605c <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800606a:	b2db      	uxtb	r3, r3
}
 800606c:	4618      	mov	r0, r3
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006084:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	69db      	ldr	r3, [r3, #28]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10e      	bne.n	80060ac <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	685a      	ldr	r2, [r3, #4]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0202 	bic.w	r2, r2, #2
 800609c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f7fa fa5b 	bl	8000568 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80060b2:	bf00      	nop
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b084      	sub	sp, #16
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f7fa fa5f 	bl	800058c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80060ce:	bf00      	nop
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b084      	sub	sp, #16
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e2:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10e      	bne.n	800610a <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f022 0201 	bic.w	r2, r2, #1
 80060fa:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f7fb f9d0 	bl	80014b0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006110:	bf00      	nop
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006124:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f7fb f998 	bl	800145c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800612c:	bf00      	nop
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006140:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	685a      	ldr	r2, [r3, #4]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f022 0203 	bic.w	r2, r2, #3
 8006150:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800616a:	f043 0208 	orr.w	r2, r3, #8
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f7fa fb86 	bl	8000884 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006178:	bf00      	nop
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618c:	881a      	ldrh	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006198:	1c9a      	adds	r2, r3, #2
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	3b01      	subs	r3, #1
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10e      	bne.n	80061d4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	685a      	ldr	r2, [r3, #4]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061c4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f7fa f9ca 	bl	8000568 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80061d4:	bf00      	nop
 80061d6:	3708      	adds	r7, #8
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68da      	ldr	r2, [r3, #12]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ee:	b292      	uxth	r2, r2
 80061f0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f6:	1c9a      	adds	r2, r3, #2
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006200:	b29b      	uxth	r3, r3
 8006202:	3b01      	subs	r3, #1
 8006204:	b29a      	uxth	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800620e:	b29b      	uxth	r3, r3
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10e      	bne.n	8006232 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006222:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f7fb f93f 	bl	80014b0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006232:	bf00      	nop
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b086      	sub	sp, #24
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b04      	cmp	r3, #4
 8006254:	d13a      	bne.n	80062cc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	2b01      	cmp	r3, #1
 800625e:	d109      	bne.n	8006274 <I2S_IRQHandler+0x3a>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800626a:	2b40      	cmp	r3, #64	; 0x40
 800626c:	d102      	bne.n	8006274 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7ff ffb4 	bl	80061dc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627a:	2b40      	cmp	r3, #64	; 0x40
 800627c:	d126      	bne.n	80062cc <I2S_IRQHandler+0x92>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	f003 0320 	and.w	r3, r3, #32
 8006288:	2b20      	cmp	r3, #32
 800628a:	d11f      	bne.n	80062cc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	685a      	ldr	r2, [r3, #4]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800629a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800629c:	2300      	movs	r3, #0
 800629e:	613b      	str	r3, [r7, #16]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	613b      	str	r3, [r7, #16]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	613b      	str	r3, [r7, #16]
 80062b0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062be:	f043 0202 	orr.w	r2, r3, #2
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7fa fadc 	bl	8000884 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b03      	cmp	r3, #3
 80062d6:	d136      	bne.n	8006346 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d109      	bne.n	80062f6 <I2S_IRQHandler+0xbc>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ec:	2b80      	cmp	r3, #128	; 0x80
 80062ee:	d102      	bne.n	80062f6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f7ff ff45 	bl	8006180 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f003 0308 	and.w	r3, r3, #8
 80062fc:	2b08      	cmp	r3, #8
 80062fe:	d122      	bne.n	8006346 <I2S_IRQHandler+0x10c>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f003 0320 	and.w	r3, r3, #32
 800630a:	2b20      	cmp	r3, #32
 800630c:	d11b      	bne.n	8006346 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800631c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800631e:	2300      	movs	r3, #0
 8006320:	60fb      	str	r3, [r7, #12]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	60fb      	str	r3, [r7, #12]
 800632a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006338:	f043 0204 	orr.w	r2, r3, #4
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f7fa fa9f 	bl	8000884 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006346:	bf00      	nop
 8006348:	3718      	adds	r7, #24
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
	...

08006350 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b088      	sub	sp, #32
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a92      	ldr	r2, [pc, #584]	; (80065b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d101      	bne.n	800636e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800636a:	4b92      	ldr	r3, [pc, #584]	; (80065b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800636c:	e001      	b.n	8006372 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800636e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a8b      	ldr	r2, [pc, #556]	; (80065b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d101      	bne.n	800638c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006388:	4b8a      	ldr	r3, [pc, #552]	; (80065b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800638a:	e001      	b.n	8006390 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800638c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800639c:	d004      	beq.n	80063a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f040 8099 	bne.w	80064da <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d107      	bne.n	80063c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d002      	beq.n	80063c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 f925 	bl	800660c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d107      	bne.n	80063dc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d002      	beq.n	80063dc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f9c8 	bl	800676c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e2:	2b40      	cmp	r3, #64	; 0x40
 80063e4:	d13a      	bne.n	800645c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	f003 0320 	and.w	r3, r3, #32
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d035      	beq.n	800645c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a6e      	ldr	r2, [pc, #440]	; (80065b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d101      	bne.n	80063fe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80063fa:	4b6e      	ldr	r3, [pc, #440]	; (80065b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80063fc:	e001      	b.n	8006402 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80063fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4969      	ldr	r1, [pc, #420]	; (80065b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800640a:	428b      	cmp	r3, r1
 800640c:	d101      	bne.n	8006412 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800640e:	4b69      	ldr	r3, [pc, #420]	; (80065b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006410:	e001      	b.n	8006416 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006412:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006416:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800641a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	685a      	ldr	r2, [r3, #4]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800642a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800642c:	2300      	movs	r3, #0
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	60fb      	str	r3, [r7, #12]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	60fb      	str	r3, [r7, #12]
 8006440:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800644e:	f043 0202 	orr.w	r2, r3, #2
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f7fa fa14 	bl	8000884 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	f003 0308 	and.w	r3, r3, #8
 8006462:	2b08      	cmp	r3, #8
 8006464:	f040 80c3 	bne.w	80065ee <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f003 0320 	and.w	r3, r3, #32
 800646e:	2b00      	cmp	r3, #0
 8006470:	f000 80bd 	beq.w	80065ee <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	685a      	ldr	r2, [r3, #4]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006482:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a49      	ldr	r2, [pc, #292]	; (80065b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d101      	bne.n	8006492 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800648e:	4b49      	ldr	r3, [pc, #292]	; (80065b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006490:	e001      	b.n	8006496 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006492:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006496:	685a      	ldr	r2, [r3, #4]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4944      	ldr	r1, [pc, #272]	; (80065b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800649e:	428b      	cmp	r3, r1
 80064a0:	d101      	bne.n	80064a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80064a2:	4b44      	ldr	r3, [pc, #272]	; (80065b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80064a4:	e001      	b.n	80064aa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80064a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80064ae:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80064b0:	2300      	movs	r3, #0
 80064b2:	60bb      	str	r3, [r7, #8]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	60bb      	str	r3, [r7, #8]
 80064bc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ca:	f043 0204 	orr.w	r2, r3, #4
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f7fa f9d6 	bl	8000884 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80064d8:	e089      	b.n	80065ee <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	f003 0302 	and.w	r3, r3, #2
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d107      	bne.n	80064f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d002      	beq.n	80064f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f8be 	bl	8006670 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d107      	bne.n	800650e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006504:	2b00      	cmp	r3, #0
 8006506:	d002      	beq.n	800650e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f8fd 	bl	8006708 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006514:	2b40      	cmp	r3, #64	; 0x40
 8006516:	d12f      	bne.n	8006578 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f003 0320 	and.w	r3, r3, #32
 800651e:	2b00      	cmp	r3, #0
 8006520:	d02a      	beq.n	8006578 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006530:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a1e      	ldr	r2, [pc, #120]	; (80065b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d101      	bne.n	8006540 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800653c:	4b1d      	ldr	r3, [pc, #116]	; (80065b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800653e:	e001      	b.n	8006544 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006540:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4919      	ldr	r1, [pc, #100]	; (80065b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800654c:	428b      	cmp	r3, r1
 800654e:	d101      	bne.n	8006554 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006550:	4b18      	ldr	r3, [pc, #96]	; (80065b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006552:	e001      	b.n	8006558 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006554:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006558:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800655c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800656a:	f043 0202 	orr.w	r2, r3, #2
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7fa f986 	bl	8000884 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	f003 0308 	and.w	r3, r3, #8
 800657e:	2b08      	cmp	r3, #8
 8006580:	d136      	bne.n	80065f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	f003 0320 	and.w	r3, r3, #32
 8006588:	2b00      	cmp	r3, #0
 800658a:	d031      	beq.n	80065f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a07      	ldr	r2, [pc, #28]	; (80065b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d101      	bne.n	800659a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006596:	4b07      	ldr	r3, [pc, #28]	; (80065b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006598:	e001      	b.n	800659e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800659a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4902      	ldr	r1, [pc, #8]	; (80065b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80065a6:	428b      	cmp	r3, r1
 80065a8:	d106      	bne.n	80065b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80065aa:	4b02      	ldr	r3, [pc, #8]	; (80065b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80065ac:	e006      	b.n	80065bc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80065ae:	bf00      	nop
 80065b0:	40003800 	.word	0x40003800
 80065b4:	40003400 	.word	0x40003400
 80065b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065c0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	685a      	ldr	r2, [r3, #4]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80065d0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065de:	f043 0204 	orr.w	r2, r3, #4
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7fa f94c 	bl	8000884 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80065ec:	e000      	b.n	80065f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80065ee:	bf00      	nop
}
 80065f0:	bf00      	nop
 80065f2:	3720      	adds	r7, #32
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006618:	1c99      	adds	r1, r3, #2
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	6251      	str	r1, [r2, #36]	; 0x24
 800661e:	881a      	ldrh	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800662a:	b29b      	uxth	r3, r3
 800662c:	3b01      	subs	r3, #1
 800662e:	b29a      	uxth	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006638:	b29b      	uxth	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d113      	bne.n	8006666 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	685a      	ldr	r2, [r3, #4]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800664c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006652:	b29b      	uxth	r3, r3
 8006654:	2b00      	cmp	r3, #0
 8006656:	d106      	bne.n	8006666 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7ff ffc9 	bl	80065f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006666:	bf00      	nop
 8006668:	3708      	adds	r7, #8
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
	...

08006670 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667c:	1c99      	adds	r1, r3, #2
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	6251      	str	r1, [r2, #36]	; 0x24
 8006682:	8819      	ldrh	r1, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a1d      	ldr	r2, [pc, #116]	; (8006700 <I2SEx_TxISR_I2SExt+0x90>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d101      	bne.n	8006692 <I2SEx_TxISR_I2SExt+0x22>
 800668e:	4b1d      	ldr	r3, [pc, #116]	; (8006704 <I2SEx_TxISR_I2SExt+0x94>)
 8006690:	e001      	b.n	8006696 <I2SEx_TxISR_I2SExt+0x26>
 8006692:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006696:	460a      	mov	r2, r1
 8006698:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800669e:	b29b      	uxth	r3, r3
 80066a0:	3b01      	subs	r3, #1
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d121      	bne.n	80066f6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a12      	ldr	r2, [pc, #72]	; (8006700 <I2SEx_TxISR_I2SExt+0x90>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d101      	bne.n	80066c0 <I2SEx_TxISR_I2SExt+0x50>
 80066bc:	4b11      	ldr	r3, [pc, #68]	; (8006704 <I2SEx_TxISR_I2SExt+0x94>)
 80066be:	e001      	b.n	80066c4 <I2SEx_TxISR_I2SExt+0x54>
 80066c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	490d      	ldr	r1, [pc, #52]	; (8006700 <I2SEx_TxISR_I2SExt+0x90>)
 80066cc:	428b      	cmp	r3, r1
 80066ce:	d101      	bne.n	80066d4 <I2SEx_TxISR_I2SExt+0x64>
 80066d0:	4b0c      	ldr	r3, [pc, #48]	; (8006704 <I2SEx_TxISR_I2SExt+0x94>)
 80066d2:	e001      	b.n	80066d8 <I2SEx_TxISR_I2SExt+0x68>
 80066d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066dc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d106      	bne.n	80066f6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f7ff ff81 	bl	80065f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80066f6:	bf00      	nop
 80066f8:	3708      	adds	r7, #8
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	40003800 	.word	0x40003800
 8006704:	40003400 	.word	0x40003400

08006708 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68d8      	ldr	r0, [r3, #12]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671a:	1c99      	adds	r1, r3, #2
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006720:	b282      	uxth	r2, r0
 8006722:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006728:	b29b      	uxth	r3, r3
 800672a:	3b01      	subs	r3, #1
 800672c:	b29a      	uxth	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006736:	b29b      	uxth	r3, r3
 8006738:	2b00      	cmp	r3, #0
 800673a:	d113      	bne.n	8006764 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	685a      	ldr	r2, [r3, #4]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800674a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006750:	b29b      	uxth	r3, r3
 8006752:	2b00      	cmp	r3, #0
 8006754:	d106      	bne.n	8006764 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7ff ff4a 	bl	80065f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006764:	bf00      	nop
 8006766:	3708      	adds	r7, #8
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a20      	ldr	r2, [pc, #128]	; (80067fc <I2SEx_RxISR_I2SExt+0x90>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d101      	bne.n	8006782 <I2SEx_RxISR_I2SExt+0x16>
 800677e:	4b20      	ldr	r3, [pc, #128]	; (8006800 <I2SEx_RxISR_I2SExt+0x94>)
 8006780:	e001      	b.n	8006786 <I2SEx_RxISR_I2SExt+0x1a>
 8006782:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006786:	68d8      	ldr	r0, [r3, #12]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678c:	1c99      	adds	r1, r3, #2
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006792:	b282      	uxth	r2, r0
 8006794:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800679a:	b29b      	uxth	r3, r3
 800679c:	3b01      	subs	r3, #1
 800679e:	b29a      	uxth	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d121      	bne.n	80067f2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a12      	ldr	r2, [pc, #72]	; (80067fc <I2SEx_RxISR_I2SExt+0x90>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d101      	bne.n	80067bc <I2SEx_RxISR_I2SExt+0x50>
 80067b8:	4b11      	ldr	r3, [pc, #68]	; (8006800 <I2SEx_RxISR_I2SExt+0x94>)
 80067ba:	e001      	b.n	80067c0 <I2SEx_RxISR_I2SExt+0x54>
 80067bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067c0:	685a      	ldr	r2, [r3, #4]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	490d      	ldr	r1, [pc, #52]	; (80067fc <I2SEx_RxISR_I2SExt+0x90>)
 80067c8:	428b      	cmp	r3, r1
 80067ca:	d101      	bne.n	80067d0 <I2SEx_RxISR_I2SExt+0x64>
 80067cc:	4b0c      	ldr	r3, [pc, #48]	; (8006800 <I2SEx_RxISR_I2SExt+0x94>)
 80067ce:	e001      	b.n	80067d4 <I2SEx_RxISR_I2SExt+0x68>
 80067d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80067d8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067de:	b29b      	uxth	r3, r3
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d106      	bne.n	80067f2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f7ff ff03 	bl	80065f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80067f2:	bf00      	nop
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	40003800 	.word	0x40003800
 8006800:	40003400 	.word	0x40003400

08006804 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e267      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	2b00      	cmp	r3, #0
 8006820:	d075      	beq.n	800690e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006822:	4b88      	ldr	r3, [pc, #544]	; (8006a44 <HAL_RCC_OscConfig+0x240>)
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f003 030c 	and.w	r3, r3, #12
 800682a:	2b04      	cmp	r3, #4
 800682c:	d00c      	beq.n	8006848 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800682e:	4b85      	ldr	r3, [pc, #532]	; (8006a44 <HAL_RCC_OscConfig+0x240>)
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006836:	2b08      	cmp	r3, #8
 8006838:	d112      	bne.n	8006860 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800683a:	4b82      	ldr	r3, [pc, #520]	; (8006a44 <HAL_RCC_OscConfig+0x240>)
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006842:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006846:	d10b      	bne.n	8006860 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006848:	4b7e      	ldr	r3, [pc, #504]	; (8006a44 <HAL_RCC_OscConfig+0x240>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d05b      	beq.n	800690c <HAL_RCC_OscConfig+0x108>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d157      	bne.n	800690c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e242      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006868:	d106      	bne.n	8006878 <HAL_RCC_OscConfig+0x74>
 800686a:	4b76      	ldr	r3, [pc, #472]	; (8006a44 <HAL_RCC_OscConfig+0x240>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a75      	ldr	r2, [pc, #468]	; (8006a44 <HAL_RCC_OscConfig+0x240>)
 8006870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006874:	6013      	str	r3, [r2, #0]
 8006876:	e01d      	b.n	80068b4 <HAL_RCC_OscConfig+0xb0>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006880:	d10c      	bne.n	800689c <HAL_RCC_OscConfig+0x98>
 8006882:	4b70      	ldr	r3, [pc, #448]	; (8006a44 <HAL_RCC_OscConfig+0x240>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a6f      	ldr	r2, [pc, #444]	; (8006a44 <HAL_RCC_OscConfig+0x240>)
 8006888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800688c:	6013      	str	r3, [r2, #0]
 800688e:	4b6d      	ldr	r3, [pc, #436]	; (8006a44 <HAL_RCC_OscConfig+0x240>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a6c      	ldr	r2, [pc, #432]	; (8006a44 <HAL_RCC_OscConfig+0x240>)
 8006894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006898:	6013      	str	r3, [r2, #0]
 800689a:	e00b      	b.n	80068b4 <HAL_RCC_OscConfig+0xb0>
 800689c:	4b69      	ldr	r3, [pc, #420]	; (8006a44 <HAL_RCC_OscConfig+0x240>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a68      	ldr	r2, [pc, #416]	; (8006a44 <HAL_RCC_OscConfig+0x240>)
 80068a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068a6:	6013      	str	r3, [r2, #0]
 80068a8:	4b66      	ldr	r3, [pc, #408]	; (8006a44 <HAL_RCC_OscConfig+0x240>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a65      	ldr	r2, [pc, #404]	; (8006a44 <HAL_RCC_OscConfig+0x240>)
 80068ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d013      	beq.n	80068e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068bc:	f7fb fd60 	bl	8002380 <HAL_GetTick>
 80068c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068c2:	e008      	b.n	80068d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068c4:	f7fb fd5c 	bl	8002380 <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	2b64      	cmp	r3, #100	; 0x64
 80068d0:	d901      	bls.n	80068d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e207      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068d6:	4b5b      	ldr	r3, [pc, #364]	; (8006a44 <HAL_RCC_OscConfig+0x240>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d0f0      	beq.n	80068c4 <HAL_RCC_OscConfig+0xc0>
 80068e2:	e014      	b.n	800690e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068e4:	f7fb fd4c 	bl	8002380 <HAL_GetTick>
 80068e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068ea:	e008      	b.n	80068fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068ec:	f7fb fd48 	bl	8002380 <HAL_GetTick>
 80068f0:	4602      	mov	r2, r0
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	2b64      	cmp	r3, #100	; 0x64
 80068f8:	d901      	bls.n	80068fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e1f3      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068fe:	4b51      	ldr	r3, [pc, #324]	; (8006a44 <HAL_RCC_OscConfig+0x240>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1f0      	bne.n	80068ec <HAL_RCC_OscConfig+0xe8>
 800690a:	e000      	b.n	800690e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800690c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b00      	cmp	r3, #0
 8006918:	d063      	beq.n	80069e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800691a:	4b4a      	ldr	r3, [pc, #296]	; (8006a44 <HAL_RCC_OscConfig+0x240>)
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f003 030c 	and.w	r3, r3, #12
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00b      	beq.n	800693e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006926:	4b47      	ldr	r3, [pc, #284]	; (8006a44 <HAL_RCC_OscConfig+0x240>)
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800692e:	2b08      	cmp	r3, #8
 8006930:	d11c      	bne.n	800696c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006932:	4b44      	ldr	r3, [pc, #272]	; (8006a44 <HAL_RCC_OscConfig+0x240>)
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d116      	bne.n	800696c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800693e:	4b41      	ldr	r3, [pc, #260]	; (8006a44 <HAL_RCC_OscConfig+0x240>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	2b00      	cmp	r3, #0
 8006948:	d005      	beq.n	8006956 <HAL_RCC_OscConfig+0x152>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d001      	beq.n	8006956 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e1c7      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006956:	4b3b      	ldr	r3, [pc, #236]	; (8006a44 <HAL_RCC_OscConfig+0x240>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	00db      	lsls	r3, r3, #3
 8006964:	4937      	ldr	r1, [pc, #220]	; (8006a44 <HAL_RCC_OscConfig+0x240>)
 8006966:	4313      	orrs	r3, r2
 8006968:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800696a:	e03a      	b.n	80069e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d020      	beq.n	80069b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006974:	4b34      	ldr	r3, [pc, #208]	; (8006a48 <HAL_RCC_OscConfig+0x244>)
 8006976:	2201      	movs	r2, #1
 8006978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800697a:	f7fb fd01 	bl	8002380 <HAL_GetTick>
 800697e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006980:	e008      	b.n	8006994 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006982:	f7fb fcfd 	bl	8002380 <HAL_GetTick>
 8006986:	4602      	mov	r2, r0
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	2b02      	cmp	r3, #2
 800698e:	d901      	bls.n	8006994 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	e1a8      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006994:	4b2b      	ldr	r3, [pc, #172]	; (8006a44 <HAL_RCC_OscConfig+0x240>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0302 	and.w	r3, r3, #2
 800699c:	2b00      	cmp	r3, #0
 800699e:	d0f0      	beq.n	8006982 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069a0:	4b28      	ldr	r3, [pc, #160]	; (8006a44 <HAL_RCC_OscConfig+0x240>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	00db      	lsls	r3, r3, #3
 80069ae:	4925      	ldr	r1, [pc, #148]	; (8006a44 <HAL_RCC_OscConfig+0x240>)
 80069b0:	4313      	orrs	r3, r2
 80069b2:	600b      	str	r3, [r1, #0]
 80069b4:	e015      	b.n	80069e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069b6:	4b24      	ldr	r3, [pc, #144]	; (8006a48 <HAL_RCC_OscConfig+0x244>)
 80069b8:	2200      	movs	r2, #0
 80069ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069bc:	f7fb fce0 	bl	8002380 <HAL_GetTick>
 80069c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069c2:	e008      	b.n	80069d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069c4:	f7fb fcdc 	bl	8002380 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d901      	bls.n	80069d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e187      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069d6:	4b1b      	ldr	r3, [pc, #108]	; (8006a44 <HAL_RCC_OscConfig+0x240>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0302 	and.w	r3, r3, #2
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1f0      	bne.n	80069c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0308 	and.w	r3, r3, #8
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d036      	beq.n	8006a5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d016      	beq.n	8006a24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069f6:	4b15      	ldr	r3, [pc, #84]	; (8006a4c <HAL_RCC_OscConfig+0x248>)
 80069f8:	2201      	movs	r2, #1
 80069fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069fc:	f7fb fcc0 	bl	8002380 <HAL_GetTick>
 8006a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a02:	e008      	b.n	8006a16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a04:	f7fb fcbc 	bl	8002380 <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d901      	bls.n	8006a16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e167      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a16:	4b0b      	ldr	r3, [pc, #44]	; (8006a44 <HAL_RCC_OscConfig+0x240>)
 8006a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a1a:	f003 0302 	and.w	r3, r3, #2
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d0f0      	beq.n	8006a04 <HAL_RCC_OscConfig+0x200>
 8006a22:	e01b      	b.n	8006a5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a24:	4b09      	ldr	r3, [pc, #36]	; (8006a4c <HAL_RCC_OscConfig+0x248>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a2a:	f7fb fca9 	bl	8002380 <HAL_GetTick>
 8006a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a30:	e00e      	b.n	8006a50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a32:	f7fb fca5 	bl	8002380 <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d907      	bls.n	8006a50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e150      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4e2>
 8006a44:	40023800 	.word	0x40023800
 8006a48:	42470000 	.word	0x42470000
 8006a4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a50:	4b88      	ldr	r3, [pc, #544]	; (8006c74 <HAL_RCC_OscConfig+0x470>)
 8006a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a54:	f003 0302 	and.w	r3, r3, #2
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1ea      	bne.n	8006a32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0304 	and.w	r3, r3, #4
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f000 8097 	beq.w	8006b98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a6e:	4b81      	ldr	r3, [pc, #516]	; (8006c74 <HAL_RCC_OscConfig+0x470>)
 8006a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10f      	bne.n	8006a9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	60bb      	str	r3, [r7, #8]
 8006a7e:	4b7d      	ldr	r3, [pc, #500]	; (8006c74 <HAL_RCC_OscConfig+0x470>)
 8006a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a82:	4a7c      	ldr	r2, [pc, #496]	; (8006c74 <HAL_RCC_OscConfig+0x470>)
 8006a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a88:	6413      	str	r3, [r2, #64]	; 0x40
 8006a8a:	4b7a      	ldr	r3, [pc, #488]	; (8006c74 <HAL_RCC_OscConfig+0x470>)
 8006a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a92:	60bb      	str	r3, [r7, #8]
 8006a94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a96:	2301      	movs	r3, #1
 8006a98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a9a:	4b77      	ldr	r3, [pc, #476]	; (8006c78 <HAL_RCC_OscConfig+0x474>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d118      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006aa6:	4b74      	ldr	r3, [pc, #464]	; (8006c78 <HAL_RCC_OscConfig+0x474>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a73      	ldr	r2, [pc, #460]	; (8006c78 <HAL_RCC_OscConfig+0x474>)
 8006aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ab0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ab2:	f7fb fc65 	bl	8002380 <HAL_GetTick>
 8006ab6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ab8:	e008      	b.n	8006acc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aba:	f7fb fc61 	bl	8002380 <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d901      	bls.n	8006acc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e10c      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006acc:	4b6a      	ldr	r3, [pc, #424]	; (8006c78 <HAL_RCC_OscConfig+0x474>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d0f0      	beq.n	8006aba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d106      	bne.n	8006aee <HAL_RCC_OscConfig+0x2ea>
 8006ae0:	4b64      	ldr	r3, [pc, #400]	; (8006c74 <HAL_RCC_OscConfig+0x470>)
 8006ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae4:	4a63      	ldr	r2, [pc, #396]	; (8006c74 <HAL_RCC_OscConfig+0x470>)
 8006ae6:	f043 0301 	orr.w	r3, r3, #1
 8006aea:	6713      	str	r3, [r2, #112]	; 0x70
 8006aec:	e01c      	b.n	8006b28 <HAL_RCC_OscConfig+0x324>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	2b05      	cmp	r3, #5
 8006af4:	d10c      	bne.n	8006b10 <HAL_RCC_OscConfig+0x30c>
 8006af6:	4b5f      	ldr	r3, [pc, #380]	; (8006c74 <HAL_RCC_OscConfig+0x470>)
 8006af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006afa:	4a5e      	ldr	r2, [pc, #376]	; (8006c74 <HAL_RCC_OscConfig+0x470>)
 8006afc:	f043 0304 	orr.w	r3, r3, #4
 8006b00:	6713      	str	r3, [r2, #112]	; 0x70
 8006b02:	4b5c      	ldr	r3, [pc, #368]	; (8006c74 <HAL_RCC_OscConfig+0x470>)
 8006b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b06:	4a5b      	ldr	r2, [pc, #364]	; (8006c74 <HAL_RCC_OscConfig+0x470>)
 8006b08:	f043 0301 	orr.w	r3, r3, #1
 8006b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8006b0e:	e00b      	b.n	8006b28 <HAL_RCC_OscConfig+0x324>
 8006b10:	4b58      	ldr	r3, [pc, #352]	; (8006c74 <HAL_RCC_OscConfig+0x470>)
 8006b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b14:	4a57      	ldr	r2, [pc, #348]	; (8006c74 <HAL_RCC_OscConfig+0x470>)
 8006b16:	f023 0301 	bic.w	r3, r3, #1
 8006b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8006b1c:	4b55      	ldr	r3, [pc, #340]	; (8006c74 <HAL_RCC_OscConfig+0x470>)
 8006b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b20:	4a54      	ldr	r2, [pc, #336]	; (8006c74 <HAL_RCC_OscConfig+0x470>)
 8006b22:	f023 0304 	bic.w	r3, r3, #4
 8006b26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d015      	beq.n	8006b5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b30:	f7fb fc26 	bl	8002380 <HAL_GetTick>
 8006b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b36:	e00a      	b.n	8006b4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b38:	f7fb fc22 	bl	8002380 <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d901      	bls.n	8006b4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e0cb      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b4e:	4b49      	ldr	r3, [pc, #292]	; (8006c74 <HAL_RCC_OscConfig+0x470>)
 8006b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b52:	f003 0302 	and.w	r3, r3, #2
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d0ee      	beq.n	8006b38 <HAL_RCC_OscConfig+0x334>
 8006b5a:	e014      	b.n	8006b86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b5c:	f7fb fc10 	bl	8002380 <HAL_GetTick>
 8006b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b62:	e00a      	b.n	8006b7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b64:	f7fb fc0c 	bl	8002380 <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d901      	bls.n	8006b7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e0b5      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b7a:	4b3e      	ldr	r3, [pc, #248]	; (8006c74 <HAL_RCC_OscConfig+0x470>)
 8006b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b7e:	f003 0302 	and.w	r3, r3, #2
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1ee      	bne.n	8006b64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b86:	7dfb      	ldrb	r3, [r7, #23]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d105      	bne.n	8006b98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b8c:	4b39      	ldr	r3, [pc, #228]	; (8006c74 <HAL_RCC_OscConfig+0x470>)
 8006b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b90:	4a38      	ldr	r2, [pc, #224]	; (8006c74 <HAL_RCC_OscConfig+0x470>)
 8006b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f000 80a1 	beq.w	8006ce4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ba2:	4b34      	ldr	r3, [pc, #208]	; (8006c74 <HAL_RCC_OscConfig+0x470>)
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f003 030c 	and.w	r3, r3, #12
 8006baa:	2b08      	cmp	r3, #8
 8006bac:	d05c      	beq.n	8006c68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d141      	bne.n	8006c3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bb6:	4b31      	ldr	r3, [pc, #196]	; (8006c7c <HAL_RCC_OscConfig+0x478>)
 8006bb8:	2200      	movs	r2, #0
 8006bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bbc:	f7fb fbe0 	bl	8002380 <HAL_GetTick>
 8006bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bc2:	e008      	b.n	8006bd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bc4:	f7fb fbdc 	bl	8002380 <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d901      	bls.n	8006bd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e087      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bd6:	4b27      	ldr	r3, [pc, #156]	; (8006c74 <HAL_RCC_OscConfig+0x470>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1f0      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	69da      	ldr	r2, [r3, #28]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	431a      	orrs	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf0:	019b      	lsls	r3, r3, #6
 8006bf2:	431a      	orrs	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf8:	085b      	lsrs	r3, r3, #1
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	041b      	lsls	r3, r3, #16
 8006bfe:	431a      	orrs	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c04:	061b      	lsls	r3, r3, #24
 8006c06:	491b      	ldr	r1, [pc, #108]	; (8006c74 <HAL_RCC_OscConfig+0x470>)
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c0c:	4b1b      	ldr	r3, [pc, #108]	; (8006c7c <HAL_RCC_OscConfig+0x478>)
 8006c0e:	2201      	movs	r2, #1
 8006c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c12:	f7fb fbb5 	bl	8002380 <HAL_GetTick>
 8006c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c18:	e008      	b.n	8006c2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c1a:	f7fb fbb1 	bl	8002380 <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d901      	bls.n	8006c2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e05c      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c2c:	4b11      	ldr	r3, [pc, #68]	; (8006c74 <HAL_RCC_OscConfig+0x470>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d0f0      	beq.n	8006c1a <HAL_RCC_OscConfig+0x416>
 8006c38:	e054      	b.n	8006ce4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c3a:	4b10      	ldr	r3, [pc, #64]	; (8006c7c <HAL_RCC_OscConfig+0x478>)
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c40:	f7fb fb9e 	bl	8002380 <HAL_GetTick>
 8006c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c46:	e008      	b.n	8006c5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c48:	f7fb fb9a 	bl	8002380 <HAL_GetTick>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d901      	bls.n	8006c5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e045      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c5a:	4b06      	ldr	r3, [pc, #24]	; (8006c74 <HAL_RCC_OscConfig+0x470>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1f0      	bne.n	8006c48 <HAL_RCC_OscConfig+0x444>
 8006c66:	e03d      	b.n	8006ce4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d107      	bne.n	8006c80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e038      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4e2>
 8006c74:	40023800 	.word	0x40023800
 8006c78:	40007000 	.word	0x40007000
 8006c7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c80:	4b1b      	ldr	r3, [pc, #108]	; (8006cf0 <HAL_RCC_OscConfig+0x4ec>)
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d028      	beq.n	8006ce0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d121      	bne.n	8006ce0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d11a      	bne.n	8006ce0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006cb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d111      	bne.n	8006ce0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc6:	085b      	lsrs	r3, r3, #1
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d107      	bne.n	8006ce0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d001      	beq.n	8006ce4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e000      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3718      	adds	r7, #24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	40023800 	.word	0x40023800

08006cf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d101      	bne.n	8006d08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e0cc      	b.n	8006ea2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d08:	4b68      	ldr	r3, [pc, #416]	; (8006eac <HAL_RCC_ClockConfig+0x1b8>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0307 	and.w	r3, r3, #7
 8006d10:	683a      	ldr	r2, [r7, #0]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d90c      	bls.n	8006d30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d16:	4b65      	ldr	r3, [pc, #404]	; (8006eac <HAL_RCC_ClockConfig+0x1b8>)
 8006d18:	683a      	ldr	r2, [r7, #0]
 8006d1a:	b2d2      	uxtb	r2, r2
 8006d1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d1e:	4b63      	ldr	r3, [pc, #396]	; (8006eac <HAL_RCC_ClockConfig+0x1b8>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 0307 	and.w	r3, r3, #7
 8006d26:	683a      	ldr	r2, [r7, #0]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d001      	beq.n	8006d30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e0b8      	b.n	8006ea2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0302 	and.w	r3, r3, #2
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d020      	beq.n	8006d7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0304 	and.w	r3, r3, #4
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d005      	beq.n	8006d54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d48:	4b59      	ldr	r3, [pc, #356]	; (8006eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	4a58      	ldr	r2, [pc, #352]	; (8006eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f003 0308 	and.w	r3, r3, #8
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d005      	beq.n	8006d6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d60:	4b53      	ldr	r3, [pc, #332]	; (8006eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	4a52      	ldr	r2, [pc, #328]	; (8006eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d6c:	4b50      	ldr	r3, [pc, #320]	; (8006eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	494d      	ldr	r1, [pc, #308]	; (8006eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d044      	beq.n	8006e14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d107      	bne.n	8006da2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d92:	4b47      	ldr	r3, [pc, #284]	; (8006eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d119      	bne.n	8006dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e07f      	b.n	8006ea2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d003      	beq.n	8006db2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	d107      	bne.n	8006dc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006db2:	4b3f      	ldr	r3, [pc, #252]	; (8006eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d109      	bne.n	8006dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e06f      	b.n	8006ea2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dc2:	4b3b      	ldr	r3, [pc, #236]	; (8006eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0302 	and.w	r3, r3, #2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d101      	bne.n	8006dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e067      	b.n	8006ea2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006dd2:	4b37      	ldr	r3, [pc, #220]	; (8006eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	f023 0203 	bic.w	r2, r3, #3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	4934      	ldr	r1, [pc, #208]	; (8006eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006de0:	4313      	orrs	r3, r2
 8006de2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006de4:	f7fb facc 	bl	8002380 <HAL_GetTick>
 8006de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dea:	e00a      	b.n	8006e02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dec:	f7fb fac8 	bl	8002380 <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d901      	bls.n	8006e02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e04f      	b.n	8006ea2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e02:	4b2b      	ldr	r3, [pc, #172]	; (8006eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f003 020c 	and.w	r2, r3, #12
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d1eb      	bne.n	8006dec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e14:	4b25      	ldr	r3, [pc, #148]	; (8006eac <HAL_RCC_ClockConfig+0x1b8>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0307 	and.w	r3, r3, #7
 8006e1c:	683a      	ldr	r2, [r7, #0]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d20c      	bcs.n	8006e3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e22:	4b22      	ldr	r3, [pc, #136]	; (8006eac <HAL_RCC_ClockConfig+0x1b8>)
 8006e24:	683a      	ldr	r2, [r7, #0]
 8006e26:	b2d2      	uxtb	r2, r2
 8006e28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e2a:	4b20      	ldr	r3, [pc, #128]	; (8006eac <HAL_RCC_ClockConfig+0x1b8>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0307 	and.w	r3, r3, #7
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d001      	beq.n	8006e3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e032      	b.n	8006ea2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0304 	and.w	r3, r3, #4
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d008      	beq.n	8006e5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e48:	4b19      	ldr	r3, [pc, #100]	; (8006eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	4916      	ldr	r1, [pc, #88]	; (8006eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0308 	and.w	r3, r3, #8
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d009      	beq.n	8006e7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e66:	4b12      	ldr	r3, [pc, #72]	; (8006eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	00db      	lsls	r3, r3, #3
 8006e74:	490e      	ldr	r1, [pc, #56]	; (8006eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e7a:	f000 f821 	bl	8006ec0 <HAL_RCC_GetSysClockFreq>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	4b0b      	ldr	r3, [pc, #44]	; (8006eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	091b      	lsrs	r3, r3, #4
 8006e86:	f003 030f 	and.w	r3, r3, #15
 8006e8a:	490a      	ldr	r1, [pc, #40]	; (8006eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8006e8c:	5ccb      	ldrb	r3, [r1, r3]
 8006e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e92:	4a09      	ldr	r2, [pc, #36]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8006e94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e96:	4b09      	ldr	r3, [pc, #36]	; (8006ebc <HAL_RCC_ClockConfig+0x1c8>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7fb fa2c 	bl	80022f8 <HAL_InitTick>

  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	40023c00 	.word	0x40023c00
 8006eb0:	40023800 	.word	0x40023800
 8006eb4:	0800d83c 	.word	0x0800d83c
 8006eb8:	20000038 	.word	0x20000038
 8006ebc:	2000003c 	.word	0x2000003c

08006ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ec0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ec4:	b094      	sub	sp, #80	; 0x50
 8006ec6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	647b      	str	r3, [r7, #68]	; 0x44
 8006ecc:	2300      	movs	r3, #0
 8006ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ed8:	4b79      	ldr	r3, [pc, #484]	; (80070c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	f003 030c 	and.w	r3, r3, #12
 8006ee0:	2b08      	cmp	r3, #8
 8006ee2:	d00d      	beq.n	8006f00 <HAL_RCC_GetSysClockFreq+0x40>
 8006ee4:	2b08      	cmp	r3, #8
 8006ee6:	f200 80e1 	bhi.w	80070ac <HAL_RCC_GetSysClockFreq+0x1ec>
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d002      	beq.n	8006ef4 <HAL_RCC_GetSysClockFreq+0x34>
 8006eee:	2b04      	cmp	r3, #4
 8006ef0:	d003      	beq.n	8006efa <HAL_RCC_GetSysClockFreq+0x3a>
 8006ef2:	e0db      	b.n	80070ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ef4:	4b73      	ldr	r3, [pc, #460]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006ef6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006ef8:	e0db      	b.n	80070b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006efa:	4b73      	ldr	r3, [pc, #460]	; (80070c8 <HAL_RCC_GetSysClockFreq+0x208>)
 8006efc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006efe:	e0d8      	b.n	80070b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f00:	4b6f      	ldr	r3, [pc, #444]	; (80070c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f08:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f0a:	4b6d      	ldr	r3, [pc, #436]	; (80070c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d063      	beq.n	8006fde <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f16:	4b6a      	ldr	r3, [pc, #424]	; (80070c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	099b      	lsrs	r3, r3, #6
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f28:	633b      	str	r3, [r7, #48]	; 0x30
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006f32:	4622      	mov	r2, r4
 8006f34:	462b      	mov	r3, r5
 8006f36:	f04f 0000 	mov.w	r0, #0
 8006f3a:	f04f 0100 	mov.w	r1, #0
 8006f3e:	0159      	lsls	r1, r3, #5
 8006f40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f44:	0150      	lsls	r0, r2, #5
 8006f46:	4602      	mov	r2, r0
 8006f48:	460b      	mov	r3, r1
 8006f4a:	4621      	mov	r1, r4
 8006f4c:	1a51      	subs	r1, r2, r1
 8006f4e:	6139      	str	r1, [r7, #16]
 8006f50:	4629      	mov	r1, r5
 8006f52:	eb63 0301 	sbc.w	r3, r3, r1
 8006f56:	617b      	str	r3, [r7, #20]
 8006f58:	f04f 0200 	mov.w	r2, #0
 8006f5c:	f04f 0300 	mov.w	r3, #0
 8006f60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f64:	4659      	mov	r1, fp
 8006f66:	018b      	lsls	r3, r1, #6
 8006f68:	4651      	mov	r1, sl
 8006f6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f6e:	4651      	mov	r1, sl
 8006f70:	018a      	lsls	r2, r1, #6
 8006f72:	4651      	mov	r1, sl
 8006f74:	ebb2 0801 	subs.w	r8, r2, r1
 8006f78:	4659      	mov	r1, fp
 8006f7a:	eb63 0901 	sbc.w	r9, r3, r1
 8006f7e:	f04f 0200 	mov.w	r2, #0
 8006f82:	f04f 0300 	mov.w	r3, #0
 8006f86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f92:	4690      	mov	r8, r2
 8006f94:	4699      	mov	r9, r3
 8006f96:	4623      	mov	r3, r4
 8006f98:	eb18 0303 	adds.w	r3, r8, r3
 8006f9c:	60bb      	str	r3, [r7, #8]
 8006f9e:	462b      	mov	r3, r5
 8006fa0:	eb49 0303 	adc.w	r3, r9, r3
 8006fa4:	60fb      	str	r3, [r7, #12]
 8006fa6:	f04f 0200 	mov.w	r2, #0
 8006faa:	f04f 0300 	mov.w	r3, #0
 8006fae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006fb2:	4629      	mov	r1, r5
 8006fb4:	024b      	lsls	r3, r1, #9
 8006fb6:	4621      	mov	r1, r4
 8006fb8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006fbc:	4621      	mov	r1, r4
 8006fbe:	024a      	lsls	r2, r1, #9
 8006fc0:	4610      	mov	r0, r2
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fcc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fd0:	f7f9 f8fa 	bl	80001c8 <__aeabi_uldivmod>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	4613      	mov	r3, r2
 8006fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fdc:	e058      	b.n	8007090 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fde:	4b38      	ldr	r3, [pc, #224]	; (80070c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	099b      	lsrs	r3, r3, #6
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	4611      	mov	r1, r2
 8006fea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006fee:	623b      	str	r3, [r7, #32]
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ff4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006ff8:	4642      	mov	r2, r8
 8006ffa:	464b      	mov	r3, r9
 8006ffc:	f04f 0000 	mov.w	r0, #0
 8007000:	f04f 0100 	mov.w	r1, #0
 8007004:	0159      	lsls	r1, r3, #5
 8007006:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800700a:	0150      	lsls	r0, r2, #5
 800700c:	4602      	mov	r2, r0
 800700e:	460b      	mov	r3, r1
 8007010:	4641      	mov	r1, r8
 8007012:	ebb2 0a01 	subs.w	sl, r2, r1
 8007016:	4649      	mov	r1, r9
 8007018:	eb63 0b01 	sbc.w	fp, r3, r1
 800701c:	f04f 0200 	mov.w	r2, #0
 8007020:	f04f 0300 	mov.w	r3, #0
 8007024:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007028:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800702c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007030:	ebb2 040a 	subs.w	r4, r2, sl
 8007034:	eb63 050b 	sbc.w	r5, r3, fp
 8007038:	f04f 0200 	mov.w	r2, #0
 800703c:	f04f 0300 	mov.w	r3, #0
 8007040:	00eb      	lsls	r3, r5, #3
 8007042:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007046:	00e2      	lsls	r2, r4, #3
 8007048:	4614      	mov	r4, r2
 800704a:	461d      	mov	r5, r3
 800704c:	4643      	mov	r3, r8
 800704e:	18e3      	adds	r3, r4, r3
 8007050:	603b      	str	r3, [r7, #0]
 8007052:	464b      	mov	r3, r9
 8007054:	eb45 0303 	adc.w	r3, r5, r3
 8007058:	607b      	str	r3, [r7, #4]
 800705a:	f04f 0200 	mov.w	r2, #0
 800705e:	f04f 0300 	mov.w	r3, #0
 8007062:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007066:	4629      	mov	r1, r5
 8007068:	028b      	lsls	r3, r1, #10
 800706a:	4621      	mov	r1, r4
 800706c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007070:	4621      	mov	r1, r4
 8007072:	028a      	lsls	r2, r1, #10
 8007074:	4610      	mov	r0, r2
 8007076:	4619      	mov	r1, r3
 8007078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800707a:	2200      	movs	r2, #0
 800707c:	61bb      	str	r3, [r7, #24]
 800707e:	61fa      	str	r2, [r7, #28]
 8007080:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007084:	f7f9 f8a0 	bl	80001c8 <__aeabi_uldivmod>
 8007088:	4602      	mov	r2, r0
 800708a:	460b      	mov	r3, r1
 800708c:	4613      	mov	r3, r2
 800708e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007090:	4b0b      	ldr	r3, [pc, #44]	; (80070c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	0c1b      	lsrs	r3, r3, #16
 8007096:	f003 0303 	and.w	r3, r3, #3
 800709a:	3301      	adds	r3, #1
 800709c:	005b      	lsls	r3, r3, #1
 800709e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80070a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80070a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80070aa:	e002      	b.n	80070b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80070ac:	4b05      	ldr	r3, [pc, #20]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80070ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80070b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3750      	adds	r7, #80	; 0x50
 80070b8:	46bd      	mov	sp, r7
 80070ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070be:	bf00      	nop
 80070c0:	40023800 	.word	0x40023800
 80070c4:	00f42400 	.word	0x00f42400
 80070c8:	007a1200 	.word	0x007a1200

080070cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070cc:	b480      	push	{r7}
 80070ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070d0:	4b03      	ldr	r3, [pc, #12]	; (80070e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80070d2:	681b      	ldr	r3, [r3, #0]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	20000038 	.word	0x20000038

080070e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80070e8:	f7ff fff0 	bl	80070cc <HAL_RCC_GetHCLKFreq>
 80070ec:	4602      	mov	r2, r0
 80070ee:	4b05      	ldr	r3, [pc, #20]	; (8007104 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	0a9b      	lsrs	r3, r3, #10
 80070f4:	f003 0307 	and.w	r3, r3, #7
 80070f8:	4903      	ldr	r1, [pc, #12]	; (8007108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070fa:	5ccb      	ldrb	r3, [r1, r3]
 80070fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007100:	4618      	mov	r0, r3
 8007102:	bd80      	pop	{r7, pc}
 8007104:	40023800 	.word	0x40023800
 8007108:	0800d84c 	.word	0x0800d84c

0800710c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007110:	f7ff ffdc 	bl	80070cc <HAL_RCC_GetHCLKFreq>
 8007114:	4602      	mov	r2, r0
 8007116:	4b05      	ldr	r3, [pc, #20]	; (800712c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	0b5b      	lsrs	r3, r3, #13
 800711c:	f003 0307 	and.w	r3, r3, #7
 8007120:	4903      	ldr	r1, [pc, #12]	; (8007130 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007122:	5ccb      	ldrb	r3, [r1, r3]
 8007124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007128:	4618      	mov	r0, r3
 800712a:	bd80      	pop	{r7, pc}
 800712c:	40023800 	.word	0x40023800
 8007130:	0800d84c 	.word	0x0800d84c

08007134 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b086      	sub	sp, #24
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800713c:	2300      	movs	r3, #0
 800713e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007140:	2300      	movs	r3, #0
 8007142:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0301 	and.w	r3, r3, #1
 800714c:	2b00      	cmp	r3, #0
 800714e:	d105      	bne.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007158:	2b00      	cmp	r3, #0
 800715a:	d035      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800715c:	4b62      	ldr	r3, [pc, #392]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800715e:	2200      	movs	r2, #0
 8007160:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007162:	f7fb f90d 	bl	8002380 <HAL_GetTick>
 8007166:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007168:	e008      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800716a:	f7fb f909 	bl	8002380 <HAL_GetTick>
 800716e:	4602      	mov	r2, r0
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	2b02      	cmp	r3, #2
 8007176:	d901      	bls.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	e0b0      	b.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800717c:	4b5b      	ldr	r3, [pc, #364]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1f0      	bne.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	019a      	lsls	r2, r3, #6
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	071b      	lsls	r3, r3, #28
 8007194:	4955      	ldr	r1, [pc, #340]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007196:	4313      	orrs	r3, r2
 8007198:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800719c:	4b52      	ldr	r3, [pc, #328]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800719e:	2201      	movs	r2, #1
 80071a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80071a2:	f7fb f8ed 	bl	8002380 <HAL_GetTick>
 80071a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80071a8:	e008      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80071aa:	f7fb f8e9 	bl	8002380 <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d901      	bls.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e090      	b.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80071bc:	4b4b      	ldr	r3, [pc, #300]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d0f0      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0302 	and.w	r3, r3, #2
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 8083 	beq.w	80072dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80071d6:	2300      	movs	r3, #0
 80071d8:	60fb      	str	r3, [r7, #12]
 80071da:	4b44      	ldr	r3, [pc, #272]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071de:	4a43      	ldr	r2, [pc, #268]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071e4:	6413      	str	r3, [r2, #64]	; 0x40
 80071e6:	4b41      	ldr	r3, [pc, #260]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071ee:	60fb      	str	r3, [r7, #12]
 80071f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80071f2:	4b3f      	ldr	r3, [pc, #252]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a3e      	ldr	r2, [pc, #248]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80071f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071fc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80071fe:	f7fb f8bf 	bl	8002380 <HAL_GetTick>
 8007202:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007204:	e008      	b.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007206:	f7fb f8bb 	bl	8002380 <HAL_GetTick>
 800720a:	4602      	mov	r2, r0
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	2b02      	cmp	r3, #2
 8007212:	d901      	bls.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007214:	2303      	movs	r3, #3
 8007216:	e062      	b.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007218:	4b35      	ldr	r3, [pc, #212]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007220:	2b00      	cmp	r3, #0
 8007222:	d0f0      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007224:	4b31      	ldr	r3, [pc, #196]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007228:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800722c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d02f      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	429a      	cmp	r2, r3
 8007240:	d028      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007242:	4b2a      	ldr	r3, [pc, #168]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800724a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800724c:	4b29      	ldr	r3, [pc, #164]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800724e:	2201      	movs	r2, #1
 8007250:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007252:	4b28      	ldr	r3, [pc, #160]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007254:	2200      	movs	r2, #0
 8007256:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007258:	4a24      	ldr	r2, [pc, #144]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800725e:	4b23      	ldr	r3, [pc, #140]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	2b01      	cmp	r3, #1
 8007268:	d114      	bne.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800726a:	f7fb f889 	bl	8002380 <HAL_GetTick>
 800726e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007270:	e00a      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007272:	f7fb f885 	bl	8002380 <HAL_GetTick>
 8007276:	4602      	mov	r2, r0
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	1ad3      	subs	r3, r2, r3
 800727c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007280:	4293      	cmp	r3, r2
 8007282:	d901      	bls.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007284:	2303      	movs	r3, #3
 8007286:	e02a      	b.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007288:	4b18      	ldr	r3, [pc, #96]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800728a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800728c:	f003 0302 	and.w	r3, r3, #2
 8007290:	2b00      	cmp	r3, #0
 8007292:	d0ee      	beq.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800729c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072a0:	d10d      	bne.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80072a2:	4b12      	ldr	r3, [pc, #72]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80072b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072b6:	490d      	ldr	r1, [pc, #52]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072b8:	4313      	orrs	r3, r2
 80072ba:	608b      	str	r3, [r1, #8]
 80072bc:	e005      	b.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 80072be:	4b0b      	ldr	r3, [pc, #44]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	4a0a      	ldr	r2, [pc, #40]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072c4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80072c8:	6093      	str	r3, [r2, #8]
 80072ca:	4b08      	ldr	r3, [pc, #32]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072d6:	4905      	ldr	r1, [pc, #20]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072d8:	4313      	orrs	r3, r2
 80072da:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3718      	adds	r7, #24
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	42470068 	.word	0x42470068
 80072ec:	40023800 	.word	0x40023800
 80072f0:	40007000 	.word	0x40007000
 80072f4:	42470e40 	.word	0x42470e40

080072f8 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2203      	movs	r2, #3
 8007304:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8007306:	4b11      	ldr	r3, [pc, #68]	; (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007308:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800730c:	099b      	lsrs	r3, r3, #6
 800730e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007316:	4b0d      	ldr	r3, [pc, #52]	; (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800731c:	0f1b      	lsrs	r3, r3, #28
 800731e:	f003 0207 	and.w	r2, r3, #7
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8007326:	4b09      	ldr	r3, [pc, #36]	; (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800732e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8007330:	4b06      	ldr	r3, [pc, #24]	; (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007334:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	431a      	orrs	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8007340:	bf00      	nop
 8007342:	3714      	adds	r7, #20
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr
 800734c:	40023800 	.word	0x40023800

08007350 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007350:	b480      	push	{r7}
 8007352:	b087      	sub	sp, #28
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007358:	2300      	movs	r3, #0
 800735a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800735c:	2300      	movs	r3, #0
 800735e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007360:	2300      	movs	r3, #0
 8007362:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007364:	2300      	movs	r3, #0
 8007366:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d13e      	bne.n	80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800736e:	4b23      	ldr	r3, [pc, #140]	; (80073fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007376:	60fb      	str	r3, [r7, #12]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d005      	beq.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2b01      	cmp	r3, #1
 8007382:	d12f      	bne.n	80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007384:	4b1e      	ldr	r3, [pc, #120]	; (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007386:	617b      	str	r3, [r7, #20]
          break;
 8007388:	e02f      	b.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800738a:	4b1c      	ldr	r3, [pc, #112]	; (80073fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007392:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007396:	d108      	bne.n	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007398:	4b18      	ldr	r3, [pc, #96]	; (80073fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073a0:	4a18      	ldr	r2, [pc, #96]	; (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80073a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a6:	613b      	str	r3, [r7, #16]
 80073a8:	e007      	b.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80073aa:	4b14      	ldr	r3, [pc, #80]	; (80073fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073b2:	4a15      	ldr	r2, [pc, #84]	; (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80073b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073b8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80073ba:	4b10      	ldr	r3, [pc, #64]	; (80073fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80073bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073c0:	099b      	lsrs	r3, r3, #6
 80073c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	fb02 f303 	mul.w	r3, r2, r3
 80073cc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80073ce:	4b0b      	ldr	r3, [pc, #44]	; (80073fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80073d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073d4:	0f1b      	lsrs	r3, r3, #28
 80073d6:	f003 0307 	and.w	r3, r3, #7
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e0:	617b      	str	r3, [r7, #20]
          break;
 80073e2:	e002      	b.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80073e4:	2300      	movs	r3, #0
 80073e6:	617b      	str	r3, [r7, #20]
          break;
 80073e8:	bf00      	nop
        }
      }
      break;
 80073ea:	bf00      	nop
    }
  }
  return frequency;
 80073ec:	697b      	ldr	r3, [r7, #20]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	371c      	adds	r7, #28
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	40023800 	.word	0x40023800
 8007400:	00bb8000 	.word	0x00bb8000
 8007404:	007a1200 	.word	0x007a1200
 8007408:	00f42400 	.word	0x00f42400

0800740c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d101      	bne.n	800741e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e03f      	b.n	800749e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007424:	b2db      	uxtb	r3, r3
 8007426:	2b00      	cmp	r3, #0
 8007428:	d106      	bne.n	8007438 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7fa fd5e 	bl	8001ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2224      	movs	r2, #36	; 0x24
 800743c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68da      	ldr	r2, [r3, #12]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800744e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 fb91 	bl	8007b78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	691a      	ldr	r2, [r3, #16]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007464:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	695a      	ldr	r2, [r3, #20]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007474:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68da      	ldr	r2, [r3, #12]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007484:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2220      	movs	r2, #32
 8007490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2220      	movs	r2, #32
 8007498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b08a      	sub	sp, #40	; 0x28
 80074aa:	af02      	add	r7, sp, #8
 80074ac:	60f8      	str	r0, [r7, #12]
 80074ae:	60b9      	str	r1, [r7, #8]
 80074b0:	603b      	str	r3, [r7, #0]
 80074b2:	4613      	mov	r3, r2
 80074b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80074b6:	2300      	movs	r3, #0
 80074b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	2b20      	cmp	r3, #32
 80074c4:	d17c      	bne.n	80075c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d002      	beq.n	80074d2 <HAL_UART_Transmit+0x2c>
 80074cc:	88fb      	ldrh	r3, [r7, #6]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d101      	bne.n	80074d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e075      	b.n	80075c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d101      	bne.n	80074e4 <HAL_UART_Transmit+0x3e>
 80074e0:	2302      	movs	r3, #2
 80074e2:	e06e      	b.n	80075c2 <HAL_UART_Transmit+0x11c>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2221      	movs	r2, #33	; 0x21
 80074f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074fa:	f7fa ff41 	bl	8002380 <HAL_GetTick>
 80074fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	88fa      	ldrh	r2, [r7, #6]
 8007504:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	88fa      	ldrh	r2, [r7, #6]
 800750a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007514:	d108      	bne.n	8007528 <HAL_UART_Transmit+0x82>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d104      	bne.n	8007528 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800751e:	2300      	movs	r3, #0
 8007520:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	61bb      	str	r3, [r7, #24]
 8007526:	e003      	b.n	8007530 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800752c:	2300      	movs	r3, #0
 800752e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007538:	e02a      	b.n	8007590 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	9300      	str	r3, [sp, #0]
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	2200      	movs	r2, #0
 8007542:	2180      	movs	r1, #128	; 0x80
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f000 f97e 	bl	8007846 <UART_WaitOnFlagUntilTimeout>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d001      	beq.n	8007554 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007550:	2303      	movs	r3, #3
 8007552:	e036      	b.n	80075c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d10b      	bne.n	8007572 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	881b      	ldrh	r3, [r3, #0]
 800755e:	461a      	mov	r2, r3
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007568:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	3302      	adds	r3, #2
 800756e:	61bb      	str	r3, [r7, #24]
 8007570:	e007      	b.n	8007582 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	781a      	ldrb	r2, [r3, #0]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	3301      	adds	r3, #1
 8007580:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007586:	b29b      	uxth	r3, r3
 8007588:	3b01      	subs	r3, #1
 800758a:	b29a      	uxth	r2, r3
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007594:	b29b      	uxth	r3, r3
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1cf      	bne.n	800753a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	2200      	movs	r2, #0
 80075a2:	2140      	movs	r1, #64	; 0x40
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f000 f94e 	bl	8007846 <UART_WaitOnFlagUntilTimeout>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d001      	beq.n	80075b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e006      	b.n	80075c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2220      	movs	r2, #32
 80075b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80075bc:	2300      	movs	r3, #0
 80075be:	e000      	b.n	80075c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80075c0:	2302      	movs	r3, #2
  }
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3720      	adds	r7, #32
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b084      	sub	sp, #16
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	60f8      	str	r0, [r7, #12]
 80075d2:	60b9      	str	r1, [r7, #8]
 80075d4:	4613      	mov	r3, r2
 80075d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	2b20      	cmp	r3, #32
 80075e2:	d11d      	bne.n	8007620 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d002      	beq.n	80075f0 <HAL_UART_Receive_DMA+0x26>
 80075ea:	88fb      	ldrh	r3, [r7, #6]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d101      	bne.n	80075f4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e016      	b.n	8007622 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d101      	bne.n	8007602 <HAL_UART_Receive_DMA+0x38>
 80075fe:	2302      	movs	r3, #2
 8007600:	e00f      	b.n	8007622 <HAL_UART_Receive_DMA+0x58>
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007610:	88fb      	ldrh	r3, [r7, #6]
 8007612:	461a      	mov	r2, r3
 8007614:	68b9      	ldr	r1, [r7, #8]
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f000 f984 	bl	8007924 <UART_Start_Receive_DMA>
 800761c:	4603      	mov	r3, r0
 800761e:	e000      	b.n	8007622 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007620:	2302      	movs	r3, #2
  }
}
 8007622:	4618      	mov	r0, r3
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800762a:	b480      	push	{r7}
 800762c:	b083      	sub	sp, #12
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007632:	bf00      	nop
 8007634:	370c      	adds	r7, #12
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800763e:	b480      	push	{r7}
 8007640:	b083      	sub	sp, #12
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	460b      	mov	r3, r1
 8007648:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800764a:	bf00      	nop
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b09c      	sub	sp, #112	; 0x70
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007662:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800766e:	2b00      	cmp	r3, #0
 8007670:	d172      	bne.n	8007758 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007674:	2200      	movs	r2, #0
 8007676:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	330c      	adds	r3, #12
 800767e:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007682:	e853 3f00 	ldrex	r3, [r3]
 8007686:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800768a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800768e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	330c      	adds	r3, #12
 8007696:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007698:	65ba      	str	r2, [r7, #88]	; 0x58
 800769a:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800769e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076a0:	e841 2300 	strex	r3, r2, [r1]
 80076a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80076a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1e5      	bne.n	8007678 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	3314      	adds	r3, #20
 80076b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b6:	e853 3f00 	ldrex	r3, [r3]
 80076ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80076bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076be:	f023 0301 	bic.w	r3, r3, #1
 80076c2:	667b      	str	r3, [r7, #100]	; 0x64
 80076c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	3314      	adds	r3, #20
 80076ca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80076cc:	647a      	str	r2, [r7, #68]	; 0x44
 80076ce:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076d4:	e841 2300 	strex	r3, r2, [r1]
 80076d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1e5      	bne.n	80076ac <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	3314      	adds	r3, #20
 80076e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ea:	e853 3f00 	ldrex	r3, [r3]
 80076ee:	623b      	str	r3, [r7, #32]
   return(result);
 80076f0:	6a3b      	ldr	r3, [r7, #32]
 80076f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076f6:	663b      	str	r3, [r7, #96]	; 0x60
 80076f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	3314      	adds	r3, #20
 80076fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007700:	633a      	str	r2, [r7, #48]	; 0x30
 8007702:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007704:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007708:	e841 2300 	strex	r3, r2, [r1]
 800770c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800770e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1e5      	bne.n	80076e0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007716:	2220      	movs	r2, #32
 8007718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800771c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800771e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007720:	2b01      	cmp	r3, #1
 8007722:	d119      	bne.n	8007758 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	330c      	adds	r3, #12
 800772a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	e853 3f00 	ldrex	r3, [r3]
 8007732:	60fb      	str	r3, [r7, #12]
   return(result);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f023 0310 	bic.w	r3, r3, #16
 800773a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800773c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	330c      	adds	r3, #12
 8007742:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007744:	61fa      	str	r2, [r7, #28]
 8007746:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007748:	69b9      	ldr	r1, [r7, #24]
 800774a:	69fa      	ldr	r2, [r7, #28]
 800774c:	e841 2300 	strex	r3, r2, [r1]
 8007750:	617b      	str	r3, [r7, #20]
   return(result);
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1e5      	bne.n	8007724 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800775a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775c:	2b01      	cmp	r3, #1
 800775e:	d106      	bne.n	800776e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007762:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007764:	4619      	mov	r1, r3
 8007766:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007768:	f7ff ff69 	bl	800763e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800776c:	e002      	b.n	8007774 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800776e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007770:	f7f9 fda0 	bl	80012b4 <HAL_UART_RxCpltCallback>
}
 8007774:	bf00      	nop
 8007776:	3770      	adds	r7, #112	; 0x70
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007788:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800778e:	2b01      	cmp	r3, #1
 8007790:	d108      	bne.n	80077a4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007796:	085b      	lsrs	r3, r3, #1
 8007798:	b29b      	uxth	r3, r3
 800779a:	4619      	mov	r1, r3
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f7ff ff4e 	bl	800763e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80077a2:	e002      	b.n	80077aa <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f7f9 fd6b 	bl	8001280 <HAL_UART_RxHalfCpltCallback>
}
 80077aa:	bf00      	nop
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b084      	sub	sp, #16
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80077ba:	2300      	movs	r3, #0
 80077bc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ce:	2b80      	cmp	r3, #128	; 0x80
 80077d0:	bf0c      	ite	eq
 80077d2:	2301      	moveq	r3, #1
 80077d4:	2300      	movne	r3, #0
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b21      	cmp	r3, #33	; 0x21
 80077e4:	d108      	bne.n	80077f8 <UART_DMAError+0x46>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d005      	beq.n	80077f8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	2200      	movs	r2, #0
 80077f0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80077f2:	68b8      	ldr	r0, [r7, #8]
 80077f4:	f000 f934 	bl	8007a60 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	695b      	ldr	r3, [r3, #20]
 80077fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007802:	2b40      	cmp	r3, #64	; 0x40
 8007804:	bf0c      	ite	eq
 8007806:	2301      	moveq	r3, #1
 8007808:	2300      	movne	r3, #0
 800780a:	b2db      	uxtb	r3, r3
 800780c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007814:	b2db      	uxtb	r3, r3
 8007816:	2b22      	cmp	r3, #34	; 0x22
 8007818:	d108      	bne.n	800782c <UART_DMAError+0x7a>
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d005      	beq.n	800782c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	2200      	movs	r2, #0
 8007824:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007826:	68b8      	ldr	r0, [r7, #8]
 8007828:	f000 f942 	bl	8007ab0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007830:	f043 0210 	orr.w	r2, r3, #16
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007838:	68b8      	ldr	r0, [r7, #8]
 800783a:	f7ff fef6 	bl	800762a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800783e:	bf00      	nop
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b090      	sub	sp, #64	; 0x40
 800784a:	af00      	add	r7, sp, #0
 800784c:	60f8      	str	r0, [r7, #12]
 800784e:	60b9      	str	r1, [r7, #8]
 8007850:	603b      	str	r3, [r7, #0]
 8007852:	4613      	mov	r3, r2
 8007854:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007856:	e050      	b.n	80078fa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800785a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800785e:	d04c      	beq.n	80078fa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007862:	2b00      	cmp	r3, #0
 8007864:	d007      	beq.n	8007876 <UART_WaitOnFlagUntilTimeout+0x30>
 8007866:	f7fa fd8b 	bl	8002380 <HAL_GetTick>
 800786a:	4602      	mov	r2, r0
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007872:	429a      	cmp	r2, r3
 8007874:	d241      	bcs.n	80078fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	330c      	adds	r3, #12
 800787c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007880:	e853 3f00 	ldrex	r3, [r3]
 8007884:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007888:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800788c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	330c      	adds	r3, #12
 8007894:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007896:	637a      	str	r2, [r7, #52]	; 0x34
 8007898:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800789c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800789e:	e841 2300 	strex	r3, r2, [r1]
 80078a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1e5      	bne.n	8007876 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	3314      	adds	r3, #20
 80078b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	e853 3f00 	ldrex	r3, [r3]
 80078b8:	613b      	str	r3, [r7, #16]
   return(result);
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	f023 0301 	bic.w	r3, r3, #1
 80078c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	3314      	adds	r3, #20
 80078c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078ca:	623a      	str	r2, [r7, #32]
 80078cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ce:	69f9      	ldr	r1, [r7, #28]
 80078d0:	6a3a      	ldr	r2, [r7, #32]
 80078d2:	e841 2300 	strex	r3, r2, [r1]
 80078d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1e5      	bne.n	80078aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2220      	movs	r2, #32
 80078e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2220      	movs	r2, #32
 80078ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80078f6:	2303      	movs	r3, #3
 80078f8:	e00f      	b.n	800791a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	4013      	ands	r3, r2
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	429a      	cmp	r2, r3
 8007908:	bf0c      	ite	eq
 800790a:	2301      	moveq	r3, #1
 800790c:	2300      	movne	r3, #0
 800790e:	b2db      	uxtb	r3, r3
 8007910:	461a      	mov	r2, r3
 8007912:	79fb      	ldrb	r3, [r7, #7]
 8007914:	429a      	cmp	r2, r3
 8007916:	d09f      	beq.n	8007858 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3740      	adds	r7, #64	; 0x40
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
	...

08007924 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b098      	sub	sp, #96	; 0x60
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	4613      	mov	r3, r2
 8007930:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	88fa      	ldrh	r2, [r7, #6]
 800793c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2200      	movs	r2, #0
 8007942:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2222      	movs	r2, #34	; 0x22
 8007948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007950:	4a40      	ldr	r2, [pc, #256]	; (8007a54 <UART_Start_Receive_DMA+0x130>)
 8007952:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007958:	4a3f      	ldr	r2, [pc, #252]	; (8007a58 <UART_Start_Receive_DMA+0x134>)
 800795a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007960:	4a3e      	ldr	r2, [pc, #248]	; (8007a5c <UART_Start_Receive_DMA+0x138>)
 8007962:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007968:	2200      	movs	r2, #0
 800796a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800796c:	f107 0308 	add.w	r3, r7, #8
 8007970:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	3304      	adds	r3, #4
 800797c:	4619      	mov	r1, r3
 800797e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	88fb      	ldrh	r3, [r7, #6]
 8007984:	f7fa ff4a 	bl	800281c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007988:	2300      	movs	r3, #0
 800798a:	613b      	str	r3, [r7, #16]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	613b      	str	r3, [r7, #16]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	613b      	str	r3, [r7, #16]
 800799c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d019      	beq.n	80079e2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	330c      	adds	r3, #12
 80079b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079b8:	e853 3f00 	ldrex	r3, [r3]
 80079bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	330c      	adds	r3, #12
 80079cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079ce:	64fa      	str	r2, [r7, #76]	; 0x4c
 80079d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80079d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079d6:	e841 2300 	strex	r3, r2, [r1]
 80079da:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80079dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1e5      	bne.n	80079ae <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	3314      	adds	r3, #20
 80079e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ec:	e853 3f00 	ldrex	r3, [r3]
 80079f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f4:	f043 0301 	orr.w	r3, r3, #1
 80079f8:	657b      	str	r3, [r7, #84]	; 0x54
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	3314      	adds	r3, #20
 8007a00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a02:	63ba      	str	r2, [r7, #56]	; 0x38
 8007a04:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a06:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007a08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a0a:	e841 2300 	strex	r3, r2, [r1]
 8007a0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1e5      	bne.n	80079e2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	3314      	adds	r3, #20
 8007a1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	e853 3f00 	ldrex	r3, [r3]
 8007a24:	617b      	str	r3, [r7, #20]
   return(result);
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a2c:	653b      	str	r3, [r7, #80]	; 0x50
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	3314      	adds	r3, #20
 8007a34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a36:	627a      	str	r2, [r7, #36]	; 0x24
 8007a38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3a:	6a39      	ldr	r1, [r7, #32]
 8007a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a3e:	e841 2300 	strex	r3, r2, [r1]
 8007a42:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1e5      	bne.n	8007a16 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3760      	adds	r7, #96	; 0x60
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	08007657 	.word	0x08007657
 8007a58:	0800777d 	.word	0x0800777d
 8007a5c:	080077b3 	.word	0x080077b3

08007a60 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b089      	sub	sp, #36	; 0x24
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	330c      	adds	r3, #12
 8007a6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	e853 3f00 	ldrex	r3, [r3]
 8007a76:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007a7e:	61fb      	str	r3, [r7, #28]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	330c      	adds	r3, #12
 8007a86:	69fa      	ldr	r2, [r7, #28]
 8007a88:	61ba      	str	r2, [r7, #24]
 8007a8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8c:	6979      	ldr	r1, [r7, #20]
 8007a8e:	69ba      	ldr	r2, [r7, #24]
 8007a90:	e841 2300 	strex	r3, r2, [r1]
 8007a94:	613b      	str	r3, [r7, #16]
   return(result);
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1e5      	bne.n	8007a68 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2220      	movs	r2, #32
 8007aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007aa4:	bf00      	nop
 8007aa6:	3724      	adds	r7, #36	; 0x24
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b095      	sub	sp, #84	; 0x54
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	330c      	adds	r3, #12
 8007abe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac2:	e853 3f00 	ldrex	r3, [r3]
 8007ac6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	330c      	adds	r3, #12
 8007ad6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ad8:	643a      	str	r2, [r7, #64]	; 0x40
 8007ada:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007adc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ade:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ae0:	e841 2300 	strex	r3, r2, [r1]
 8007ae4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1e5      	bne.n	8007ab8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	3314      	adds	r3, #20
 8007af2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af4:	6a3b      	ldr	r3, [r7, #32]
 8007af6:	e853 3f00 	ldrex	r3, [r3]
 8007afa:	61fb      	str	r3, [r7, #28]
   return(result);
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	f023 0301 	bic.w	r3, r3, #1
 8007b02:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	3314      	adds	r3, #20
 8007b0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b14:	e841 2300 	strex	r3, r2, [r1]
 8007b18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1e5      	bne.n	8007aec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d119      	bne.n	8007b5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	330c      	adds	r3, #12
 8007b2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	e853 3f00 	ldrex	r3, [r3]
 8007b36:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	f023 0310 	bic.w	r3, r3, #16
 8007b3e:	647b      	str	r3, [r7, #68]	; 0x44
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	330c      	adds	r3, #12
 8007b46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b48:	61ba      	str	r2, [r7, #24]
 8007b4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4c:	6979      	ldr	r1, [r7, #20]
 8007b4e:	69ba      	ldr	r2, [r7, #24]
 8007b50:	e841 2300 	strex	r3, r2, [r1]
 8007b54:	613b      	str	r3, [r7, #16]
   return(result);
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1e5      	bne.n	8007b28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2220      	movs	r2, #32
 8007b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007b6a:	bf00      	nop
 8007b6c:	3754      	adds	r7, #84	; 0x54
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
	...

08007b78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b7c:	b0c0      	sub	sp, #256	; 0x100
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b94:	68d9      	ldr	r1, [r3, #12]
 8007b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	ea40 0301 	orr.w	r3, r0, r1
 8007ba0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ba6:	689a      	ldr	r2, [r3, #8]
 8007ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	431a      	orrs	r2, r3
 8007bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	431a      	orrs	r2, r3
 8007bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bbc:	69db      	ldr	r3, [r3, #28]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007bd0:	f021 010c 	bic.w	r1, r1, #12
 8007bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007bde:	430b      	orrs	r3, r1
 8007be0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bf2:	6999      	ldr	r1, [r3, #24]
 8007bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	ea40 0301 	orr.w	r3, r0, r1
 8007bfe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	4b8f      	ldr	r3, [pc, #572]	; (8007e44 <UART_SetConfig+0x2cc>)
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d005      	beq.n	8007c18 <UART_SetConfig+0xa0>
 8007c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	4b8d      	ldr	r3, [pc, #564]	; (8007e48 <UART_SetConfig+0x2d0>)
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d104      	bne.n	8007c22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c18:	f7ff fa78 	bl	800710c <HAL_RCC_GetPCLK2Freq>
 8007c1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007c20:	e003      	b.n	8007c2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c22:	f7ff fa5f 	bl	80070e4 <HAL_RCC_GetPCLK1Freq>
 8007c26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c2e:	69db      	ldr	r3, [r3, #28]
 8007c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c34:	f040 810c 	bne.w	8007e50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007c46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007c4a:	4622      	mov	r2, r4
 8007c4c:	462b      	mov	r3, r5
 8007c4e:	1891      	adds	r1, r2, r2
 8007c50:	65b9      	str	r1, [r7, #88]	; 0x58
 8007c52:	415b      	adcs	r3, r3
 8007c54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007c5a:	4621      	mov	r1, r4
 8007c5c:	eb12 0801 	adds.w	r8, r2, r1
 8007c60:	4629      	mov	r1, r5
 8007c62:	eb43 0901 	adc.w	r9, r3, r1
 8007c66:	f04f 0200 	mov.w	r2, #0
 8007c6a:	f04f 0300 	mov.w	r3, #0
 8007c6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c7a:	4690      	mov	r8, r2
 8007c7c:	4699      	mov	r9, r3
 8007c7e:	4623      	mov	r3, r4
 8007c80:	eb18 0303 	adds.w	r3, r8, r3
 8007c84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c88:	462b      	mov	r3, r5
 8007c8a:	eb49 0303 	adc.w	r3, r9, r3
 8007c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007ca2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	18db      	adds	r3, r3, r3
 8007caa:	653b      	str	r3, [r7, #80]	; 0x50
 8007cac:	4613      	mov	r3, r2
 8007cae:	eb42 0303 	adc.w	r3, r2, r3
 8007cb2:	657b      	str	r3, [r7, #84]	; 0x54
 8007cb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007cb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007cbc:	f7f8 fa84 	bl	80001c8 <__aeabi_uldivmod>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	4b61      	ldr	r3, [pc, #388]	; (8007e4c <UART_SetConfig+0x2d4>)
 8007cc6:	fba3 2302 	umull	r2, r3, r3, r2
 8007cca:	095b      	lsrs	r3, r3, #5
 8007ccc:	011c      	lsls	r4, r3, #4
 8007cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007cd8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007cdc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007ce0:	4642      	mov	r2, r8
 8007ce2:	464b      	mov	r3, r9
 8007ce4:	1891      	adds	r1, r2, r2
 8007ce6:	64b9      	str	r1, [r7, #72]	; 0x48
 8007ce8:	415b      	adcs	r3, r3
 8007cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007cf0:	4641      	mov	r1, r8
 8007cf2:	eb12 0a01 	adds.w	sl, r2, r1
 8007cf6:	4649      	mov	r1, r9
 8007cf8:	eb43 0b01 	adc.w	fp, r3, r1
 8007cfc:	f04f 0200 	mov.w	r2, #0
 8007d00:	f04f 0300 	mov.w	r3, #0
 8007d04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007d08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007d0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d10:	4692      	mov	sl, r2
 8007d12:	469b      	mov	fp, r3
 8007d14:	4643      	mov	r3, r8
 8007d16:	eb1a 0303 	adds.w	r3, sl, r3
 8007d1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d1e:	464b      	mov	r3, r9
 8007d20:	eb4b 0303 	adc.w	r3, fp, r3
 8007d24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007d38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	18db      	adds	r3, r3, r3
 8007d40:	643b      	str	r3, [r7, #64]	; 0x40
 8007d42:	4613      	mov	r3, r2
 8007d44:	eb42 0303 	adc.w	r3, r2, r3
 8007d48:	647b      	str	r3, [r7, #68]	; 0x44
 8007d4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007d4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007d52:	f7f8 fa39 	bl	80001c8 <__aeabi_uldivmod>
 8007d56:	4602      	mov	r2, r0
 8007d58:	460b      	mov	r3, r1
 8007d5a:	4611      	mov	r1, r2
 8007d5c:	4b3b      	ldr	r3, [pc, #236]	; (8007e4c <UART_SetConfig+0x2d4>)
 8007d5e:	fba3 2301 	umull	r2, r3, r3, r1
 8007d62:	095b      	lsrs	r3, r3, #5
 8007d64:	2264      	movs	r2, #100	; 0x64
 8007d66:	fb02 f303 	mul.w	r3, r2, r3
 8007d6a:	1acb      	subs	r3, r1, r3
 8007d6c:	00db      	lsls	r3, r3, #3
 8007d6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007d72:	4b36      	ldr	r3, [pc, #216]	; (8007e4c <UART_SetConfig+0x2d4>)
 8007d74:	fba3 2302 	umull	r2, r3, r3, r2
 8007d78:	095b      	lsrs	r3, r3, #5
 8007d7a:	005b      	lsls	r3, r3, #1
 8007d7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d80:	441c      	add	r4, r3
 8007d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d86:	2200      	movs	r2, #0
 8007d88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007d90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007d94:	4642      	mov	r2, r8
 8007d96:	464b      	mov	r3, r9
 8007d98:	1891      	adds	r1, r2, r2
 8007d9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007d9c:	415b      	adcs	r3, r3
 8007d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007da0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007da4:	4641      	mov	r1, r8
 8007da6:	1851      	adds	r1, r2, r1
 8007da8:	6339      	str	r1, [r7, #48]	; 0x30
 8007daa:	4649      	mov	r1, r9
 8007dac:	414b      	adcs	r3, r1
 8007dae:	637b      	str	r3, [r7, #52]	; 0x34
 8007db0:	f04f 0200 	mov.w	r2, #0
 8007db4:	f04f 0300 	mov.w	r3, #0
 8007db8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007dbc:	4659      	mov	r1, fp
 8007dbe:	00cb      	lsls	r3, r1, #3
 8007dc0:	4651      	mov	r1, sl
 8007dc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dc6:	4651      	mov	r1, sl
 8007dc8:	00ca      	lsls	r2, r1, #3
 8007dca:	4610      	mov	r0, r2
 8007dcc:	4619      	mov	r1, r3
 8007dce:	4603      	mov	r3, r0
 8007dd0:	4642      	mov	r2, r8
 8007dd2:	189b      	adds	r3, r3, r2
 8007dd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007dd8:	464b      	mov	r3, r9
 8007dda:	460a      	mov	r2, r1
 8007ddc:	eb42 0303 	adc.w	r3, r2, r3
 8007de0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007df0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007df4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007df8:	460b      	mov	r3, r1
 8007dfa:	18db      	adds	r3, r3, r3
 8007dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dfe:	4613      	mov	r3, r2
 8007e00:	eb42 0303 	adc.w	r3, r2, r3
 8007e04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007e0e:	f7f8 f9db 	bl	80001c8 <__aeabi_uldivmod>
 8007e12:	4602      	mov	r2, r0
 8007e14:	460b      	mov	r3, r1
 8007e16:	4b0d      	ldr	r3, [pc, #52]	; (8007e4c <UART_SetConfig+0x2d4>)
 8007e18:	fba3 1302 	umull	r1, r3, r3, r2
 8007e1c:	095b      	lsrs	r3, r3, #5
 8007e1e:	2164      	movs	r1, #100	; 0x64
 8007e20:	fb01 f303 	mul.w	r3, r1, r3
 8007e24:	1ad3      	subs	r3, r2, r3
 8007e26:	00db      	lsls	r3, r3, #3
 8007e28:	3332      	adds	r3, #50	; 0x32
 8007e2a:	4a08      	ldr	r2, [pc, #32]	; (8007e4c <UART_SetConfig+0x2d4>)
 8007e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e30:	095b      	lsrs	r3, r3, #5
 8007e32:	f003 0207 	and.w	r2, r3, #7
 8007e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4422      	add	r2, r4
 8007e3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e40:	e105      	b.n	800804e <UART_SetConfig+0x4d6>
 8007e42:	bf00      	nop
 8007e44:	40011000 	.word	0x40011000
 8007e48:	40011400 	.word	0x40011400
 8007e4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e54:	2200      	movs	r2, #0
 8007e56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007e5a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007e5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007e62:	4642      	mov	r2, r8
 8007e64:	464b      	mov	r3, r9
 8007e66:	1891      	adds	r1, r2, r2
 8007e68:	6239      	str	r1, [r7, #32]
 8007e6a:	415b      	adcs	r3, r3
 8007e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8007e6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e72:	4641      	mov	r1, r8
 8007e74:	1854      	adds	r4, r2, r1
 8007e76:	4649      	mov	r1, r9
 8007e78:	eb43 0501 	adc.w	r5, r3, r1
 8007e7c:	f04f 0200 	mov.w	r2, #0
 8007e80:	f04f 0300 	mov.w	r3, #0
 8007e84:	00eb      	lsls	r3, r5, #3
 8007e86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e8a:	00e2      	lsls	r2, r4, #3
 8007e8c:	4614      	mov	r4, r2
 8007e8e:	461d      	mov	r5, r3
 8007e90:	4643      	mov	r3, r8
 8007e92:	18e3      	adds	r3, r4, r3
 8007e94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e98:	464b      	mov	r3, r9
 8007e9a:	eb45 0303 	adc.w	r3, r5, r3
 8007e9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007eae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007eb2:	f04f 0200 	mov.w	r2, #0
 8007eb6:	f04f 0300 	mov.w	r3, #0
 8007eba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007ebe:	4629      	mov	r1, r5
 8007ec0:	008b      	lsls	r3, r1, #2
 8007ec2:	4621      	mov	r1, r4
 8007ec4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ec8:	4621      	mov	r1, r4
 8007eca:	008a      	lsls	r2, r1, #2
 8007ecc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007ed0:	f7f8 f97a 	bl	80001c8 <__aeabi_uldivmod>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	4b60      	ldr	r3, [pc, #384]	; (800805c <UART_SetConfig+0x4e4>)
 8007eda:	fba3 2302 	umull	r2, r3, r3, r2
 8007ede:	095b      	lsrs	r3, r3, #5
 8007ee0:	011c      	lsls	r4, r3, #4
 8007ee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007eec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007ef0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007ef4:	4642      	mov	r2, r8
 8007ef6:	464b      	mov	r3, r9
 8007ef8:	1891      	adds	r1, r2, r2
 8007efa:	61b9      	str	r1, [r7, #24]
 8007efc:	415b      	adcs	r3, r3
 8007efe:	61fb      	str	r3, [r7, #28]
 8007f00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f04:	4641      	mov	r1, r8
 8007f06:	1851      	adds	r1, r2, r1
 8007f08:	6139      	str	r1, [r7, #16]
 8007f0a:	4649      	mov	r1, r9
 8007f0c:	414b      	adcs	r3, r1
 8007f0e:	617b      	str	r3, [r7, #20]
 8007f10:	f04f 0200 	mov.w	r2, #0
 8007f14:	f04f 0300 	mov.w	r3, #0
 8007f18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f1c:	4659      	mov	r1, fp
 8007f1e:	00cb      	lsls	r3, r1, #3
 8007f20:	4651      	mov	r1, sl
 8007f22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f26:	4651      	mov	r1, sl
 8007f28:	00ca      	lsls	r2, r1, #3
 8007f2a:	4610      	mov	r0, r2
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	4603      	mov	r3, r0
 8007f30:	4642      	mov	r2, r8
 8007f32:	189b      	adds	r3, r3, r2
 8007f34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f38:	464b      	mov	r3, r9
 8007f3a:	460a      	mov	r2, r1
 8007f3c:	eb42 0303 	adc.w	r3, r2, r3
 8007f40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f4e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007f50:	f04f 0200 	mov.w	r2, #0
 8007f54:	f04f 0300 	mov.w	r3, #0
 8007f58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007f5c:	4649      	mov	r1, r9
 8007f5e:	008b      	lsls	r3, r1, #2
 8007f60:	4641      	mov	r1, r8
 8007f62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f66:	4641      	mov	r1, r8
 8007f68:	008a      	lsls	r2, r1, #2
 8007f6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007f6e:	f7f8 f92b 	bl	80001c8 <__aeabi_uldivmod>
 8007f72:	4602      	mov	r2, r0
 8007f74:	460b      	mov	r3, r1
 8007f76:	4b39      	ldr	r3, [pc, #228]	; (800805c <UART_SetConfig+0x4e4>)
 8007f78:	fba3 1302 	umull	r1, r3, r3, r2
 8007f7c:	095b      	lsrs	r3, r3, #5
 8007f7e:	2164      	movs	r1, #100	; 0x64
 8007f80:	fb01 f303 	mul.w	r3, r1, r3
 8007f84:	1ad3      	subs	r3, r2, r3
 8007f86:	011b      	lsls	r3, r3, #4
 8007f88:	3332      	adds	r3, #50	; 0x32
 8007f8a:	4a34      	ldr	r2, [pc, #208]	; (800805c <UART_SetConfig+0x4e4>)
 8007f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f90:	095b      	lsrs	r3, r3, #5
 8007f92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f96:	441c      	add	r4, r3
 8007f98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	673b      	str	r3, [r7, #112]	; 0x70
 8007fa0:	677a      	str	r2, [r7, #116]	; 0x74
 8007fa2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007fa6:	4642      	mov	r2, r8
 8007fa8:	464b      	mov	r3, r9
 8007faa:	1891      	adds	r1, r2, r2
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	415b      	adcs	r3, r3
 8007fb0:	60fb      	str	r3, [r7, #12]
 8007fb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fb6:	4641      	mov	r1, r8
 8007fb8:	1851      	adds	r1, r2, r1
 8007fba:	6039      	str	r1, [r7, #0]
 8007fbc:	4649      	mov	r1, r9
 8007fbe:	414b      	adcs	r3, r1
 8007fc0:	607b      	str	r3, [r7, #4]
 8007fc2:	f04f 0200 	mov.w	r2, #0
 8007fc6:	f04f 0300 	mov.w	r3, #0
 8007fca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007fce:	4659      	mov	r1, fp
 8007fd0:	00cb      	lsls	r3, r1, #3
 8007fd2:	4651      	mov	r1, sl
 8007fd4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fd8:	4651      	mov	r1, sl
 8007fda:	00ca      	lsls	r2, r1, #3
 8007fdc:	4610      	mov	r0, r2
 8007fde:	4619      	mov	r1, r3
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	4642      	mov	r2, r8
 8007fe4:	189b      	adds	r3, r3, r2
 8007fe6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fe8:	464b      	mov	r3, r9
 8007fea:	460a      	mov	r2, r1
 8007fec:	eb42 0303 	adc.w	r3, r2, r3
 8007ff0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	663b      	str	r3, [r7, #96]	; 0x60
 8007ffc:	667a      	str	r2, [r7, #100]	; 0x64
 8007ffe:	f04f 0200 	mov.w	r2, #0
 8008002:	f04f 0300 	mov.w	r3, #0
 8008006:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800800a:	4649      	mov	r1, r9
 800800c:	008b      	lsls	r3, r1, #2
 800800e:	4641      	mov	r1, r8
 8008010:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008014:	4641      	mov	r1, r8
 8008016:	008a      	lsls	r2, r1, #2
 8008018:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800801c:	f7f8 f8d4 	bl	80001c8 <__aeabi_uldivmod>
 8008020:	4602      	mov	r2, r0
 8008022:	460b      	mov	r3, r1
 8008024:	4b0d      	ldr	r3, [pc, #52]	; (800805c <UART_SetConfig+0x4e4>)
 8008026:	fba3 1302 	umull	r1, r3, r3, r2
 800802a:	095b      	lsrs	r3, r3, #5
 800802c:	2164      	movs	r1, #100	; 0x64
 800802e:	fb01 f303 	mul.w	r3, r1, r3
 8008032:	1ad3      	subs	r3, r2, r3
 8008034:	011b      	lsls	r3, r3, #4
 8008036:	3332      	adds	r3, #50	; 0x32
 8008038:	4a08      	ldr	r2, [pc, #32]	; (800805c <UART_SetConfig+0x4e4>)
 800803a:	fba2 2303 	umull	r2, r3, r2, r3
 800803e:	095b      	lsrs	r3, r3, #5
 8008040:	f003 020f 	and.w	r2, r3, #15
 8008044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4422      	add	r2, r4
 800804c:	609a      	str	r2, [r3, #8]
}
 800804e:	bf00      	nop
 8008050:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008054:	46bd      	mov	sp, r7
 8008056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800805a:	bf00      	nop
 800805c:	51eb851f 	.word	0x51eb851f

08008060 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008060:	b084      	sub	sp, #16
 8008062:	b580      	push	{r7, lr}
 8008064:	b084      	sub	sp, #16
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	f107 001c 	add.w	r0, r7, #28
 800806e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	2b01      	cmp	r3, #1
 8008076:	d122      	bne.n	80080be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800808c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80080a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d105      	bne.n	80080b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f9c0 	bl	8008438 <USB_CoreReset>
 80080b8:	4603      	mov	r3, r0
 80080ba:	73fb      	strb	r3, [r7, #15]
 80080bc:	e01a      	b.n	80080f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f9b4 	bl	8008438 <USB_CoreReset>
 80080d0:	4603      	mov	r3, r0
 80080d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80080d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d106      	bne.n	80080e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	639a      	str	r2, [r3, #56]	; 0x38
 80080e6:	e005      	b.n	80080f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80080f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d10b      	bne.n	8008112 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	f043 0206 	orr.w	r2, r3, #6
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	f043 0220 	orr.w	r2, r3, #32
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008112:	7bfb      	ldrb	r3, [r7, #15]
}
 8008114:	4618      	mov	r0, r3
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800811e:	b004      	add	sp, #16
 8008120:	4770      	bx	lr

08008122 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008122:	b480      	push	{r7}
 8008124:	b083      	sub	sp, #12
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	f043 0201 	orr.w	r2, r3, #1
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	f023 0201 	bic.w	r2, r3, #1
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	370c      	adds	r7, #12
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr

08008166 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b084      	sub	sp, #16
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	460b      	mov	r3, r1
 8008170:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008172:	2300      	movs	r3, #0
 8008174:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008182:	78fb      	ldrb	r3, [r7, #3]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d115      	bne.n	80081b4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008194:	2001      	movs	r0, #1
 8008196:	f7fa f8ff 	bl	8002398 <HAL_Delay>
      ms++;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	3301      	adds	r3, #1
 800819e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 f93a 	bl	800841a <USB_GetMode>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d01e      	beq.n	80081ea <USB_SetCurrentMode+0x84>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2b31      	cmp	r3, #49	; 0x31
 80081b0:	d9f0      	bls.n	8008194 <USB_SetCurrentMode+0x2e>
 80081b2:	e01a      	b.n	80081ea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80081b4:	78fb      	ldrb	r3, [r7, #3]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d115      	bne.n	80081e6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80081c6:	2001      	movs	r0, #1
 80081c8:	f7fa f8e6 	bl	8002398 <HAL_Delay>
      ms++;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	3301      	adds	r3, #1
 80081d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f921 	bl	800841a <USB_GetMode>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d005      	beq.n	80081ea <USB_SetCurrentMode+0x84>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2b31      	cmp	r3, #49	; 0x31
 80081e2:	d9f0      	bls.n	80081c6 <USB_SetCurrentMode+0x60>
 80081e4:	e001      	b.n	80081ea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e005      	b.n	80081f6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2b32      	cmp	r3, #50	; 0x32
 80081ee:	d101      	bne.n	80081f4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	e000      	b.n	80081f6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
	...

08008200 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008200:	b480      	push	{r7}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800820a:	2300      	movs	r3, #0
 800820c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	3301      	adds	r3, #1
 8008212:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	4a13      	ldr	r2, [pc, #76]	; (8008264 <USB_FlushTxFifo+0x64>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d901      	bls.n	8008220 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800821c:	2303      	movs	r3, #3
 800821e:	e01b      	b.n	8008258 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	2b00      	cmp	r3, #0
 8008226:	daf2      	bge.n	800820e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008228:	2300      	movs	r3, #0
 800822a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	019b      	lsls	r3, r3, #6
 8008230:	f043 0220 	orr.w	r2, r3, #32
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	3301      	adds	r3, #1
 800823c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	4a08      	ldr	r2, [pc, #32]	; (8008264 <USB_FlushTxFifo+0x64>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d901      	bls.n	800824a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008246:	2303      	movs	r3, #3
 8008248:	e006      	b.n	8008258 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	f003 0320 	and.w	r3, r3, #32
 8008252:	2b20      	cmp	r3, #32
 8008254:	d0f0      	beq.n	8008238 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3714      	adds	r7, #20
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr
 8008264:	00030d40 	.word	0x00030d40

08008268 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008270:	2300      	movs	r3, #0
 8008272:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	3301      	adds	r3, #1
 8008278:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	4a11      	ldr	r2, [pc, #68]	; (80082c4 <USB_FlushRxFifo+0x5c>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d901      	bls.n	8008286 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008282:	2303      	movs	r3, #3
 8008284:	e018      	b.n	80082b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	2b00      	cmp	r3, #0
 800828c:	daf2      	bge.n	8008274 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800828e:	2300      	movs	r3, #0
 8008290:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2210      	movs	r2, #16
 8008296:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	3301      	adds	r3, #1
 800829c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	4a08      	ldr	r2, [pc, #32]	; (80082c4 <USB_FlushRxFifo+0x5c>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d901      	bls.n	80082aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80082a6:	2303      	movs	r3, #3
 80082a8:	e006      	b.n	80082b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	f003 0310 	and.w	r3, r3, #16
 80082b2:	2b10      	cmp	r3, #16
 80082b4:	d0f0      	beq.n	8008298 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3714      	adds	r7, #20
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr
 80082c4:	00030d40 	.word	0x00030d40

080082c8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b089      	sub	sp, #36	; 0x24
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	4611      	mov	r1, r2
 80082d4:	461a      	mov	r2, r3
 80082d6:	460b      	mov	r3, r1
 80082d8:	71fb      	strb	r3, [r7, #7]
 80082da:	4613      	mov	r3, r2
 80082dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80082e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d123      	bne.n	8008336 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80082ee:	88bb      	ldrh	r3, [r7, #4]
 80082f0:	3303      	adds	r3, #3
 80082f2:	089b      	lsrs	r3, r3, #2
 80082f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80082f6:	2300      	movs	r3, #0
 80082f8:	61bb      	str	r3, [r7, #24]
 80082fa:	e018      	b.n	800832e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80082fc:	79fb      	ldrb	r3, [r7, #7]
 80082fe:	031a      	lsls	r2, r3, #12
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	4413      	add	r3, r2
 8008304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008308:	461a      	mov	r2, r3
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	3301      	adds	r3, #1
 8008314:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	3301      	adds	r3, #1
 800831a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	3301      	adds	r3, #1
 8008320:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008322:	69fb      	ldr	r3, [r7, #28]
 8008324:	3301      	adds	r3, #1
 8008326:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	3301      	adds	r3, #1
 800832c:	61bb      	str	r3, [r7, #24]
 800832e:	69ba      	ldr	r2, [r7, #24]
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	429a      	cmp	r2, r3
 8008334:	d3e2      	bcc.n	80082fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3724      	adds	r7, #36	; 0x24
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008344:	b480      	push	{r7}
 8008346:	b08b      	sub	sp, #44	; 0x2c
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	4613      	mov	r3, r2
 8008350:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800835a:	88fb      	ldrh	r3, [r7, #6]
 800835c:	089b      	lsrs	r3, r3, #2
 800835e:	b29b      	uxth	r3, r3
 8008360:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008362:	88fb      	ldrh	r3, [r7, #6]
 8008364:	f003 0303 	and.w	r3, r3, #3
 8008368:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800836a:	2300      	movs	r3, #0
 800836c:	623b      	str	r3, [r7, #32]
 800836e:	e014      	b.n	800839a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837a:	601a      	str	r2, [r3, #0]
    pDest++;
 800837c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837e:	3301      	adds	r3, #1
 8008380:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008384:	3301      	adds	r3, #1
 8008386:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838a:	3301      	adds	r3, #1
 800838c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800838e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008390:	3301      	adds	r3, #1
 8008392:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008394:	6a3b      	ldr	r3, [r7, #32]
 8008396:	3301      	adds	r3, #1
 8008398:	623b      	str	r3, [r7, #32]
 800839a:	6a3a      	ldr	r2, [r7, #32]
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d3e6      	bcc.n	8008370 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80083a2:	8bfb      	ldrh	r3, [r7, #30]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d01e      	beq.n	80083e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80083a8:	2300      	movs	r3, #0
 80083aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80083ac:	69bb      	ldr	r3, [r7, #24]
 80083ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083b2:	461a      	mov	r2, r3
 80083b4:	f107 0310 	add.w	r3, r7, #16
 80083b8:	6812      	ldr	r2, [r2, #0]
 80083ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80083bc:	693a      	ldr	r2, [r7, #16]
 80083be:	6a3b      	ldr	r3, [r7, #32]
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	00db      	lsls	r3, r3, #3
 80083c4:	fa22 f303 	lsr.w	r3, r2, r3
 80083c8:	b2da      	uxtb	r2, r3
 80083ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083cc:	701a      	strb	r2, [r3, #0]
      i++;
 80083ce:	6a3b      	ldr	r3, [r7, #32]
 80083d0:	3301      	adds	r3, #1
 80083d2:	623b      	str	r3, [r7, #32]
      pDest++;
 80083d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d6:	3301      	adds	r3, #1
 80083d8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80083da:	8bfb      	ldrh	r3, [r7, #30]
 80083dc:	3b01      	subs	r3, #1
 80083de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80083e0:	8bfb      	ldrh	r3, [r7, #30]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d1ea      	bne.n	80083bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80083e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	372c      	adds	r7, #44	; 0x2c
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	695b      	ldr	r3, [r3, #20]
 8008400:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	699b      	ldr	r3, [r3, #24]
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	4013      	ands	r3, r2
 800840a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800840c:	68fb      	ldr	r3, [r7, #12]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3714      	adds	r7, #20
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800841a:	b480      	push	{r7}
 800841c:	b083      	sub	sp, #12
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	f003 0301 	and.w	r3, r3, #1
}
 800842a:	4618      	mov	r0, r3
 800842c:	370c      	adds	r7, #12
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
	...

08008438 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008440:	2300      	movs	r3, #0
 8008442:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	3301      	adds	r3, #1
 8008448:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	4a13      	ldr	r2, [pc, #76]	; (800849c <USB_CoreReset+0x64>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d901      	bls.n	8008456 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008452:	2303      	movs	r3, #3
 8008454:	e01b      	b.n	800848e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	2b00      	cmp	r3, #0
 800845c:	daf2      	bge.n	8008444 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800845e:	2300      	movs	r3, #0
 8008460:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	f043 0201 	orr.w	r2, r3, #1
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	3301      	adds	r3, #1
 8008472:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	4a09      	ldr	r2, [pc, #36]	; (800849c <USB_CoreReset+0x64>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d901      	bls.n	8008480 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800847c:	2303      	movs	r3, #3
 800847e:	e006      	b.n	800848e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	f003 0301 	and.w	r3, r3, #1
 8008488:	2b01      	cmp	r3, #1
 800848a:	d0f0      	beq.n	800846e <USB_CoreReset+0x36>

  return HAL_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3714      	adds	r7, #20
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	00030d40 	.word	0x00030d40

080084a0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80084a0:	b084      	sub	sp, #16
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b086      	sub	sp, #24
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
 80084aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80084ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80084b2:	2300      	movs	r3, #0
 80084b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80084c0:	461a      	mov	r2, r3
 80084c2:	2300      	movs	r3, #0
 80084c4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d018      	beq.n	8008528 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80084f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d10a      	bne.n	8008512 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800850a:	f043 0304 	orr.w	r3, r3, #4
 800850e:	6013      	str	r3, [r2, #0]
 8008510:	e014      	b.n	800853c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68fa      	ldr	r2, [r7, #12]
 800851c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008520:	f023 0304 	bic.w	r3, r3, #4
 8008524:	6013      	str	r3, [r2, #0]
 8008526:	e009      	b.n	800853c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008536:	f023 0304 	bic.w	r3, r3, #4
 800853a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800853c:	2110      	movs	r1, #16
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f7ff fe5e 	bl	8008200 <USB_FlushTxFifo>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d001      	beq.n	800854e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f7ff fe8a 	bl	8008268 <USB_FlushRxFifo>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d001      	beq.n	800855e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800855e:	2300      	movs	r3, #0
 8008560:	613b      	str	r3, [r7, #16]
 8008562:	e015      	b.n	8008590 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	015a      	lsls	r2, r3, #5
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	4413      	add	r3, r2
 800856c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008570:	461a      	mov	r2, r3
 8008572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008576:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	015a      	lsls	r2, r3, #5
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	4413      	add	r3, r2
 8008580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008584:	461a      	mov	r2, r3
 8008586:	2300      	movs	r3, #0
 8008588:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	3301      	adds	r3, #1
 800858e:	613b      	str	r3, [r7, #16]
 8008590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008592:	693a      	ldr	r2, [r7, #16]
 8008594:	429a      	cmp	r2, r3
 8008596:	d3e5      	bcc.n	8008564 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085a4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00b      	beq.n	80085ca <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085b8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4a13      	ldr	r2, [pc, #76]	; (800860c <USB_HostInit+0x16c>)
 80085be:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4a13      	ldr	r2, [pc, #76]	; (8008610 <USB_HostInit+0x170>)
 80085c4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80085c8:	e009      	b.n	80085de <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2280      	movs	r2, #128	; 0x80
 80085ce:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a10      	ldr	r2, [pc, #64]	; (8008614 <USB_HostInit+0x174>)
 80085d4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a0f      	ldr	r2, [pc, #60]	; (8008618 <USB_HostInit+0x178>)
 80085da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80085de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d105      	bne.n	80085f0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	699b      	ldr	r3, [r3, #24]
 80085e8:	f043 0210 	orr.w	r2, r3, #16
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	699a      	ldr	r2, [r3, #24]
 80085f4:	4b09      	ldr	r3, [pc, #36]	; (800861c <USB_HostInit+0x17c>)
 80085f6:	4313      	orrs	r3, r2
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80085fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3718      	adds	r7, #24
 8008602:	46bd      	mov	sp, r7
 8008604:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008608:	b004      	add	sp, #16
 800860a:	4770      	bx	lr
 800860c:	01000200 	.word	0x01000200
 8008610:	00e00300 	.word	0x00e00300
 8008614:	00600080 	.word	0x00600080
 8008618:	004000e0 	.word	0x004000e0
 800861c:	a3200008 	.word	0xa3200008

08008620 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	460b      	mov	r3, r1
 800862a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800863e:	f023 0303 	bic.w	r3, r3, #3
 8008642:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	78fb      	ldrb	r3, [r7, #3]
 800864e:	f003 0303 	and.w	r3, r3, #3
 8008652:	68f9      	ldr	r1, [r7, #12]
 8008654:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008658:	4313      	orrs	r3, r2
 800865a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800865c:	78fb      	ldrb	r3, [r7, #3]
 800865e:	2b01      	cmp	r3, #1
 8008660:	d107      	bne.n	8008672 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008668:	461a      	mov	r2, r3
 800866a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800866e:	6053      	str	r3, [r2, #4]
 8008670:	e009      	b.n	8008686 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008672:	78fb      	ldrb	r3, [r7, #3]
 8008674:	2b02      	cmp	r3, #2
 8008676:	d106      	bne.n	8008686 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800867e:	461a      	mov	r2, r3
 8008680:	f241 7370 	movw	r3, #6000	; 0x1770
 8008684:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3714      	adds	r7, #20
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80086a0:	2300      	movs	r3, #0
 80086a2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80086b4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80086be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086c2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80086c4:	2064      	movs	r0, #100	; 0x64
 80086c6:	f7f9 fe67 	bl	8002398 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80086d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086d6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80086d8:	200a      	movs	r0, #10
 80086da:	f7f9 fe5d 	bl	8002398 <HAL_Delay>

  return HAL_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3710      	adds	r7, #16
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	460b      	mov	r3, r1
 80086f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80086f8:	2300      	movs	r3, #0
 80086fa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800870c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008714:	2b00      	cmp	r3, #0
 8008716:	d109      	bne.n	800872c <USB_DriveVbus+0x44>
 8008718:	78fb      	ldrb	r3, [r7, #3]
 800871a:	2b01      	cmp	r3, #1
 800871c:	d106      	bne.n	800872c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008726:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800872a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008736:	d109      	bne.n	800874c <USB_DriveVbus+0x64>
 8008738:	78fb      	ldrb	r3, [r7, #3]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d106      	bne.n	800874c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	68fa      	ldr	r2, [r7, #12]
 8008742:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008746:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800874a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3714      	adds	r7, #20
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr

0800875a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800875a:	b480      	push	{r7}
 800875c:	b085      	sub	sp, #20
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008766:	2300      	movs	r3, #0
 8008768:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	0c5b      	lsrs	r3, r3, #17
 8008778:	f003 0303 	and.w	r3, r3, #3
}
 800877c:	4618      	mov	r0, r3
 800877e:	3714      	adds	r7, #20
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	b29b      	uxth	r3, r3
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3714      	adds	r7, #20
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr
	...

080087ac <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b088      	sub	sp, #32
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	4608      	mov	r0, r1
 80087b6:	4611      	mov	r1, r2
 80087b8:	461a      	mov	r2, r3
 80087ba:	4603      	mov	r3, r0
 80087bc:	70fb      	strb	r3, [r7, #3]
 80087be:	460b      	mov	r3, r1
 80087c0:	70bb      	strb	r3, [r7, #2]
 80087c2:	4613      	mov	r3, r2
 80087c4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80087c6:	2300      	movs	r3, #0
 80087c8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80087ce:	78fb      	ldrb	r3, [r7, #3]
 80087d0:	015a      	lsls	r2, r3, #5
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	4413      	add	r3, r2
 80087d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087da:	461a      	mov	r2, r3
 80087dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087e0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80087e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80087e6:	2b03      	cmp	r3, #3
 80087e8:	d87e      	bhi.n	80088e8 <USB_HC_Init+0x13c>
 80087ea:	a201      	add	r2, pc, #4	; (adr r2, 80087f0 <USB_HC_Init+0x44>)
 80087ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f0:	08008801 	.word	0x08008801
 80087f4:	080088ab 	.word	0x080088ab
 80087f8:	08008801 	.word	0x08008801
 80087fc:	0800886d 	.word	0x0800886d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008800:	78fb      	ldrb	r3, [r7, #3]
 8008802:	015a      	lsls	r2, r3, #5
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	4413      	add	r3, r2
 8008808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800880c:	461a      	mov	r2, r3
 800880e:	f240 439d 	movw	r3, #1181	; 0x49d
 8008812:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008814:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008818:	2b00      	cmp	r3, #0
 800881a:	da10      	bge.n	800883e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800881c:	78fb      	ldrb	r3, [r7, #3]
 800881e:	015a      	lsls	r2, r3, #5
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	4413      	add	r3, r2
 8008824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	78fa      	ldrb	r2, [r7, #3]
 800882c:	0151      	lsls	r1, r2, #5
 800882e:	693a      	ldr	r2, [r7, #16]
 8008830:	440a      	add	r2, r1
 8008832:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800883a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800883c:	e057      	b.n	80088ee <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008846:	2b00      	cmp	r3, #0
 8008848:	d051      	beq.n	80088ee <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800884a:	78fb      	ldrb	r3, [r7, #3]
 800884c:	015a      	lsls	r2, r3, #5
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	4413      	add	r3, r2
 8008852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	78fa      	ldrb	r2, [r7, #3]
 800885a:	0151      	lsls	r1, r2, #5
 800885c:	693a      	ldr	r2, [r7, #16]
 800885e:	440a      	add	r2, r1
 8008860:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008864:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008868:	60d3      	str	r3, [r2, #12]
      break;
 800886a:	e040      	b.n	80088ee <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800886c:	78fb      	ldrb	r3, [r7, #3]
 800886e:	015a      	lsls	r2, r3, #5
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	4413      	add	r3, r2
 8008874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008878:	461a      	mov	r2, r3
 800887a:	f240 639d 	movw	r3, #1693	; 0x69d
 800887e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008880:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008884:	2b00      	cmp	r3, #0
 8008886:	da34      	bge.n	80088f2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008888:	78fb      	ldrb	r3, [r7, #3]
 800888a:	015a      	lsls	r2, r3, #5
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	4413      	add	r3, r2
 8008890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	78fa      	ldrb	r2, [r7, #3]
 8008898:	0151      	lsls	r1, r2, #5
 800889a:	693a      	ldr	r2, [r7, #16]
 800889c:	440a      	add	r2, r1
 800889e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088a6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80088a8:	e023      	b.n	80088f2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80088aa:	78fb      	ldrb	r3, [r7, #3]
 80088ac:	015a      	lsls	r2, r3, #5
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	4413      	add	r3, r2
 80088b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088b6:	461a      	mov	r2, r3
 80088b8:	f240 2325 	movw	r3, #549	; 0x225
 80088bc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80088be:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	da17      	bge.n	80088f6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80088c6:	78fb      	ldrb	r3, [r7, #3]
 80088c8:	015a      	lsls	r2, r3, #5
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	4413      	add	r3, r2
 80088ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	78fa      	ldrb	r2, [r7, #3]
 80088d6:	0151      	lsls	r1, r2, #5
 80088d8:	693a      	ldr	r2, [r7, #16]
 80088da:	440a      	add	r2, r1
 80088dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088e0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80088e4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80088e6:	e006      	b.n	80088f6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	77fb      	strb	r3, [r7, #31]
      break;
 80088ec:	e004      	b.n	80088f8 <USB_HC_Init+0x14c>
      break;
 80088ee:	bf00      	nop
 80088f0:	e002      	b.n	80088f8 <USB_HC_Init+0x14c>
      break;
 80088f2:	bf00      	nop
 80088f4:	e000      	b.n	80088f8 <USB_HC_Init+0x14c>
      break;
 80088f6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80088f8:	78fb      	ldrb	r3, [r7, #3]
 80088fa:	015a      	lsls	r2, r3, #5
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	4413      	add	r3, r2
 8008900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	78fa      	ldrb	r2, [r7, #3]
 8008908:	0151      	lsls	r1, r2, #5
 800890a:	693a      	ldr	r2, [r7, #16]
 800890c:	440a      	add	r2, r1
 800890e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008912:	f043 0302 	orr.w	r3, r3, #2
 8008916:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800891e:	699a      	ldr	r2, [r3, #24]
 8008920:	78fb      	ldrb	r3, [r7, #3]
 8008922:	f003 030f 	and.w	r3, r3, #15
 8008926:	2101      	movs	r1, #1
 8008928:	fa01 f303 	lsl.w	r3, r1, r3
 800892c:	6939      	ldr	r1, [r7, #16]
 800892e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008932:	4313      	orrs	r3, r2
 8008934:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	699b      	ldr	r3, [r3, #24]
 800893a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008942:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008946:	2b00      	cmp	r3, #0
 8008948:	da03      	bge.n	8008952 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800894a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800894e:	61bb      	str	r3, [r7, #24]
 8008950:	e001      	b.n	8008956 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8008952:	2300      	movs	r3, #0
 8008954:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f7ff feff 	bl	800875a <USB_GetHostSpeed>
 800895c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800895e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008962:	2b02      	cmp	r3, #2
 8008964:	d106      	bne.n	8008974 <USB_HC_Init+0x1c8>
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2b02      	cmp	r3, #2
 800896a:	d003      	beq.n	8008974 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800896c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008970:	617b      	str	r3, [r7, #20]
 8008972:	e001      	b.n	8008978 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008974:	2300      	movs	r3, #0
 8008976:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008978:	787b      	ldrb	r3, [r7, #1]
 800897a:	059b      	lsls	r3, r3, #22
 800897c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008980:	78bb      	ldrb	r3, [r7, #2]
 8008982:	02db      	lsls	r3, r3, #11
 8008984:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008988:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800898a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800898e:	049b      	lsls	r3, r3, #18
 8008990:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008994:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008996:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008998:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800899c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80089a2:	78fb      	ldrb	r3, [r7, #3]
 80089a4:	0159      	lsls	r1, r3, #5
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	440b      	add	r3, r1
 80089aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089ae:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80089b4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80089b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80089ba:	2b03      	cmp	r3, #3
 80089bc:	d003      	beq.n	80089c6 <USB_HC_Init+0x21a>
 80089be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d10f      	bne.n	80089e6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80089c6:	78fb      	ldrb	r3, [r7, #3]
 80089c8:	015a      	lsls	r2, r3, #5
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	4413      	add	r3, r2
 80089ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	78fa      	ldrb	r2, [r7, #3]
 80089d6:	0151      	lsls	r1, r2, #5
 80089d8:	693a      	ldr	r2, [r7, #16]
 80089da:	440a      	add	r2, r1
 80089dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80089e4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80089e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3720      	adds	r7, #32
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b08c      	sub	sp, #48	; 0x30
 80089f4:	af02      	add	r7, sp, #8
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	4613      	mov	r3, r2
 80089fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	785b      	ldrb	r3, [r3, #1]
 8008a06:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008a08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a0c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d02d      	beq.n	8008a76 <USB_HC_StartXfer+0x86>
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	791b      	ldrb	r3, [r3, #4]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d129      	bne.n	8008a76 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008a22:	79fb      	ldrb	r3, [r7, #7]
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d117      	bne.n	8008a58 <USB_HC_StartXfer+0x68>
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	79db      	ldrb	r3, [r3, #7]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d003      	beq.n	8008a38 <USB_HC_StartXfer+0x48>
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	79db      	ldrb	r3, [r3, #7]
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d10f      	bne.n	8008a58 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	015a      	lsls	r2, r3, #5
 8008a3c:	6a3b      	ldr	r3, [r7, #32]
 8008a3e:	4413      	add	r3, r2
 8008a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	69fa      	ldr	r2, [r7, #28]
 8008a48:	0151      	lsls	r1, r2, #5
 8008a4a:	6a3a      	ldr	r2, [r7, #32]
 8008a4c:	440a      	add	r2, r1
 8008a4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a56:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008a58:	79fb      	ldrb	r3, [r7, #7]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d10b      	bne.n	8008a76 <USB_HC_StartXfer+0x86>
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	795b      	ldrb	r3, [r3, #5]
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d107      	bne.n	8008a76 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	785b      	ldrb	r3, [r3, #1]
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	f000 fa0f 	bl	8008e90 <USB_DoPing>
      return HAL_OK;
 8008a72:	2300      	movs	r3, #0
 8008a74:	e0f8      	b.n	8008c68 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	695b      	ldr	r3, [r3, #20]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d018      	beq.n	8008ab0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	695b      	ldr	r3, [r3, #20]
 8008a82:	68ba      	ldr	r2, [r7, #8]
 8008a84:	8912      	ldrh	r2, [r2, #8]
 8008a86:	4413      	add	r3, r2
 8008a88:	3b01      	subs	r3, #1
 8008a8a:	68ba      	ldr	r2, [r7, #8]
 8008a8c:	8912      	ldrh	r2, [r2, #8]
 8008a8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a92:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008a94:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008a96:	8b7b      	ldrh	r3, [r7, #26]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d90b      	bls.n	8008ab4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008a9c:	8b7b      	ldrh	r3, [r7, #26]
 8008a9e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008aa0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008aa2:	68ba      	ldr	r2, [r7, #8]
 8008aa4:	8912      	ldrh	r2, [r2, #8]
 8008aa6:	fb03 f202 	mul.w	r2, r3, r2
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	611a      	str	r2, [r3, #16]
 8008aae:	e001      	b.n	8008ab4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	78db      	ldrb	r3, [r3, #3]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d007      	beq.n	8008acc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008abc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008abe:	68ba      	ldr	r2, [r7, #8]
 8008ac0:	8912      	ldrh	r2, [r2, #8]
 8008ac2:	fb03 f202 	mul.w	r2, r3, r2
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	611a      	str	r2, [r3, #16]
 8008aca:	e003      	b.n	8008ad4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	695a      	ldr	r2, [r3, #20]
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	691b      	ldr	r3, [r3, #16]
 8008ad8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008adc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008ade:	04d9      	lsls	r1, r3, #19
 8008ae0:	4b63      	ldr	r3, [pc, #396]	; (8008c70 <USB_HC_StartXfer+0x280>)
 8008ae2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008ae4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	7a9b      	ldrb	r3, [r3, #10]
 8008aea:	075b      	lsls	r3, r3, #29
 8008aec:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008af0:	69f9      	ldr	r1, [r7, #28]
 8008af2:	0148      	lsls	r0, r1, #5
 8008af4:	6a39      	ldr	r1, [r7, #32]
 8008af6:	4401      	add	r1, r0
 8008af8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008afc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008afe:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008b00:	79fb      	ldrb	r3, [r7, #7]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d009      	beq.n	8008b1a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	68d9      	ldr	r1, [r3, #12]
 8008b0a:	69fb      	ldr	r3, [r7, #28]
 8008b0c:	015a      	lsls	r2, r3, #5
 8008b0e:	6a3b      	ldr	r3, [r7, #32]
 8008b10:	4413      	add	r3, r2
 8008b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b16:	460a      	mov	r2, r1
 8008b18:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008b1a:	6a3b      	ldr	r3, [r7, #32]
 8008b1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	f003 0301 	and.w	r3, r3, #1
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	bf0c      	ite	eq
 8008b2a:	2301      	moveq	r3, #1
 8008b2c:	2300      	movne	r3, #0
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	015a      	lsls	r2, r3, #5
 8008b36:	6a3b      	ldr	r3, [r7, #32]
 8008b38:	4413      	add	r3, r2
 8008b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	69fa      	ldr	r2, [r7, #28]
 8008b42:	0151      	lsls	r1, r2, #5
 8008b44:	6a3a      	ldr	r2, [r7, #32]
 8008b46:	440a      	add	r2, r1
 8008b48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b4c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008b50:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	015a      	lsls	r2, r3, #5
 8008b56:	6a3b      	ldr	r3, [r7, #32]
 8008b58:	4413      	add	r3, r2
 8008b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	7e7b      	ldrb	r3, [r7, #25]
 8008b62:	075b      	lsls	r3, r3, #29
 8008b64:	69f9      	ldr	r1, [r7, #28]
 8008b66:	0148      	lsls	r0, r1, #5
 8008b68:	6a39      	ldr	r1, [r7, #32]
 8008b6a:	4401      	add	r1, r0
 8008b6c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008b70:	4313      	orrs	r3, r2
 8008b72:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	015a      	lsls	r2, r3, #5
 8008b78:	6a3b      	ldr	r3, [r7, #32]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b8a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	78db      	ldrb	r3, [r3, #3]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d004      	beq.n	8008b9e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b9a:	613b      	str	r3, [r7, #16]
 8008b9c:	e003      	b.n	8008ba6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ba4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008bac:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008bae:	69fb      	ldr	r3, [r7, #28]
 8008bb0:	015a      	lsls	r2, r3, #5
 8008bb2:	6a3b      	ldr	r3, [r7, #32]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bba:	461a      	mov	r2, r3
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008bc0:	79fb      	ldrb	r3, [r7, #7]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d001      	beq.n	8008bca <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	e04e      	b.n	8008c68 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	78db      	ldrb	r3, [r3, #3]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d149      	bne.n	8008c66 <USB_HC_StartXfer+0x276>
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	695b      	ldr	r3, [r3, #20]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d045      	beq.n	8008c66 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	79db      	ldrb	r3, [r3, #7]
 8008bde:	2b03      	cmp	r3, #3
 8008be0:	d830      	bhi.n	8008c44 <USB_HC_StartXfer+0x254>
 8008be2:	a201      	add	r2, pc, #4	; (adr r2, 8008be8 <USB_HC_StartXfer+0x1f8>)
 8008be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be8:	08008bf9 	.word	0x08008bf9
 8008bec:	08008c1d 	.word	0x08008c1d
 8008bf0:	08008bf9 	.word	0x08008bf9
 8008bf4:	08008c1d 	.word	0x08008c1d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	695b      	ldr	r3, [r3, #20]
 8008bfc:	3303      	adds	r3, #3
 8008bfe:	089b      	lsrs	r3, r3, #2
 8008c00:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008c02:	8afa      	ldrh	r2, [r7, #22]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d91c      	bls.n	8008c48 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	699b      	ldr	r3, [r3, #24]
 8008c12:	f043 0220 	orr.w	r2, r3, #32
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	619a      	str	r2, [r3, #24]
        }
        break;
 8008c1a:	e015      	b.n	8008c48 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	695b      	ldr	r3, [r3, #20]
 8008c20:	3303      	adds	r3, #3
 8008c22:	089b      	lsrs	r3, r3, #2
 8008c24:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008c26:	8afa      	ldrh	r2, [r7, #22]
 8008c28:	6a3b      	ldr	r3, [r7, #32]
 8008c2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c2e:	691b      	ldr	r3, [r3, #16]
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d90a      	bls.n	8008c4c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	699b      	ldr	r3, [r3, #24]
 8008c3a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	619a      	str	r2, [r3, #24]
        }
        break;
 8008c42:	e003      	b.n	8008c4c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008c44:	bf00      	nop
 8008c46:	e002      	b.n	8008c4e <USB_HC_StartXfer+0x25e>
        break;
 8008c48:	bf00      	nop
 8008c4a:	e000      	b.n	8008c4e <USB_HC_StartXfer+0x25e>
        break;
 8008c4c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	68d9      	ldr	r1, [r3, #12]
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	785a      	ldrb	r2, [r3, #1]
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	695b      	ldr	r3, [r3, #20]
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	2000      	movs	r0, #0
 8008c5e:	9000      	str	r0, [sp, #0]
 8008c60:	68f8      	ldr	r0, [r7, #12]
 8008c62:	f7ff fb31 	bl	80082c8 <USB_WritePacket>
  }

  return HAL_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3728      	adds	r7, #40	; 0x28
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	1ff80000 	.word	0x1ff80000

08008c74 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c86:	695b      	ldr	r3, [r3, #20]
 8008c88:	b29b      	uxth	r3, r3
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3714      	adds	r7, #20
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr

08008c96 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008c96:	b480      	push	{r7}
 8008c98:	b089      	sub	sp, #36	; 0x24
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008ca6:	78fb      	ldrb	r3, [r7, #3]
 8008ca8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008caa:	2300      	movs	r3, #0
 8008cac:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	015a      	lsls	r2, r3, #5
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	4413      	add	r3, r2
 8008cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	0c9b      	lsrs	r3, r3, #18
 8008cbe:	f003 0303 	and.w	r3, r3, #3
 8008cc2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	015a      	lsls	r2, r3, #5
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	4413      	add	r3, r2
 8008ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	0fdb      	lsrs	r3, r3, #31
 8008cd4:	f003 0301 	and.w	r3, r3, #1
 8008cd8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	f003 0320 	and.w	r3, r3, #32
 8008ce2:	2b20      	cmp	r3, #32
 8008ce4:	d104      	bne.n	8008cf0 <USB_HC_Halt+0x5a>
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d101      	bne.n	8008cf0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008cec:	2300      	movs	r3, #0
 8008cee:	e0c8      	b.n	8008e82 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d002      	beq.n	8008cfc <USB_HC_Halt+0x66>
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	d163      	bne.n	8008dc4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	015a      	lsls	r2, r3, #5
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	4413      	add	r3, r2
 8008d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	69ba      	ldr	r2, [r7, #24]
 8008d0c:	0151      	lsls	r1, r2, #5
 8008d0e:	69fa      	ldr	r2, [r7, #28]
 8008d10:	440a      	add	r2, r1
 8008d12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d1a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	f003 0320 	and.w	r3, r3, #32
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f040 80ab 	bne.w	8008e80 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d133      	bne.n	8008d9e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	015a      	lsls	r2, r3, #5
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	69ba      	ldr	r2, [r7, #24]
 8008d46:	0151      	lsls	r1, r2, #5
 8008d48:	69fa      	ldr	r2, [r7, #28]
 8008d4a:	440a      	add	r2, r1
 8008d4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d54:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d56:	69bb      	ldr	r3, [r7, #24]
 8008d58:	015a      	lsls	r2, r3, #5
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	69ba      	ldr	r2, [r7, #24]
 8008d66:	0151      	lsls	r1, r2, #5
 8008d68:	69fa      	ldr	r2, [r7, #28]
 8008d6a:	440a      	add	r2, r1
 8008d6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d74:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d82:	d81d      	bhi.n	8008dc0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	015a      	lsls	r2, r3, #5
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	4413      	add	r3, r2
 8008d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d9a:	d0ec      	beq.n	8008d76 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d9c:	e070      	b.n	8008e80 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	015a      	lsls	r2, r3, #5
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	4413      	add	r3, r2
 8008da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	69ba      	ldr	r2, [r7, #24]
 8008dae:	0151      	lsls	r1, r2, #5
 8008db0:	69fa      	ldr	r2, [r7, #28]
 8008db2:	440a      	add	r2, r1
 8008db4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008db8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008dbc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008dbe:	e05f      	b.n	8008e80 <USB_HC_Halt+0x1ea>
            break;
 8008dc0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008dc2:	e05d      	b.n	8008e80 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008dc4:	69bb      	ldr	r3, [r7, #24]
 8008dc6:	015a      	lsls	r2, r3, #5
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	4413      	add	r3, r2
 8008dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	69ba      	ldr	r2, [r7, #24]
 8008dd4:	0151      	lsls	r1, r2, #5
 8008dd6:	69fa      	ldr	r2, [r7, #28]
 8008dd8:	440a      	add	r2, r1
 8008dda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008dde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008de2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dea:	691b      	ldr	r3, [r3, #16]
 8008dec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d133      	bne.n	8008e5c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008df4:	69bb      	ldr	r3, [r7, #24]
 8008df6:	015a      	lsls	r2, r3, #5
 8008df8:	69fb      	ldr	r3, [r7, #28]
 8008dfa:	4413      	add	r3, r2
 8008dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	69ba      	ldr	r2, [r7, #24]
 8008e04:	0151      	lsls	r1, r2, #5
 8008e06:	69fa      	ldr	r2, [r7, #28]
 8008e08:	440a      	add	r2, r1
 8008e0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e12:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008e14:	69bb      	ldr	r3, [r7, #24]
 8008e16:	015a      	lsls	r2, r3, #5
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	4413      	add	r3, r2
 8008e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	69ba      	ldr	r2, [r7, #24]
 8008e24:	0151      	lsls	r1, r2, #5
 8008e26:	69fa      	ldr	r2, [r7, #28]
 8008e28:	440a      	add	r2, r1
 8008e2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e32:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	3301      	adds	r3, #1
 8008e38:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e40:	d81d      	bhi.n	8008e7e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	015a      	lsls	r2, r3, #5
 8008e46:	69fb      	ldr	r3, [r7, #28]
 8008e48:	4413      	add	r3, r2
 8008e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e58:	d0ec      	beq.n	8008e34 <USB_HC_Halt+0x19e>
 8008e5a:	e011      	b.n	8008e80 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	015a      	lsls	r2, r3, #5
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	4413      	add	r3, r2
 8008e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	69ba      	ldr	r2, [r7, #24]
 8008e6c:	0151      	lsls	r1, r2, #5
 8008e6e:	69fa      	ldr	r2, [r7, #28]
 8008e70:	440a      	add	r2, r1
 8008e72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e7a:	6013      	str	r3, [r2, #0]
 8008e7c:	e000      	b.n	8008e80 <USB_HC_Halt+0x1ea>
          break;
 8008e7e:	bf00      	nop
    }
  }

  return HAL_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3724      	adds	r7, #36	; 0x24
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
	...

08008e90 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b087      	sub	sp, #28
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	460b      	mov	r3, r1
 8008e9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008ea0:	78fb      	ldrb	r3, [r7, #3]
 8008ea2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	04da      	lsls	r2, r3, #19
 8008eac:	4b15      	ldr	r3, [pc, #84]	; (8008f04 <USB_DoPing+0x74>)
 8008eae:	4013      	ands	r3, r2
 8008eb0:	693a      	ldr	r2, [r7, #16]
 8008eb2:	0151      	lsls	r1, r2, #5
 8008eb4:	697a      	ldr	r2, [r7, #20]
 8008eb6:	440a      	add	r2, r1
 8008eb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ebc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ec0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	015a      	lsls	r2, r3, #5
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	4413      	add	r3, r2
 8008eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ed8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ee0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	015a      	lsls	r2, r3, #5
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	4413      	add	r3, r2
 8008eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eee:	461a      	mov	r2, r3
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	371c      	adds	r7, #28
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	1ff80000 	.word	0x1ff80000

08008f08 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b088      	sub	sp, #32
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008f10:	2300      	movs	r3, #0
 8008f12:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f7ff f911 	bl	8008144 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008f22:	2110      	movs	r1, #16
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f7ff f96b 	bl	8008200 <USB_FlushTxFifo>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d001      	beq.n	8008f34 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008f30:	2301      	movs	r3, #1
 8008f32:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f7ff f997 	bl	8008268 <USB_FlushRxFifo>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d001      	beq.n	8008f44 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008f44:	2300      	movs	r3, #0
 8008f46:	61bb      	str	r3, [r7, #24]
 8008f48:	e01f      	b.n	8008f8a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	015a      	lsls	r2, r3, #5
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	4413      	add	r3, r2
 8008f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f60:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f68:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f70:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	015a      	lsls	r2, r3, #5
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	4413      	add	r3, r2
 8008f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f7e:	461a      	mov	r2, r3
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008f84:	69bb      	ldr	r3, [r7, #24]
 8008f86:	3301      	adds	r3, #1
 8008f88:	61bb      	str	r3, [r7, #24]
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	2b0f      	cmp	r3, #15
 8008f8e:	d9dc      	bls.n	8008f4a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008f90:	2300      	movs	r3, #0
 8008f92:	61bb      	str	r3, [r7, #24]
 8008f94:	e034      	b.n	8009000 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	015a      	lsls	r2, r3, #5
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008fac:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008fb4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008fbc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	015a      	lsls	r2, r3, #5
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fca:	461a      	mov	r2, r3
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008fdc:	d80c      	bhi.n	8008ff8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008fde:	69bb      	ldr	r3, [r7, #24]
 8008fe0:	015a      	lsls	r2, r3, #5
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	4413      	add	r3, r2
 8008fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ff0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ff4:	d0ec      	beq.n	8008fd0 <USB_StopHost+0xc8>
 8008ff6:	e000      	b.n	8008ffa <USB_StopHost+0xf2>
        break;
 8008ff8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	61bb      	str	r3, [r7, #24]
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	2b0f      	cmp	r3, #15
 8009004:	d9c7      	bls.n	8008f96 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800900c:	461a      	mov	r2, r3
 800900e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009012:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800901a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f7ff f880 	bl	8008122 <USB_EnableGlobalInt>

  return ret;
 8009022:	7ffb      	ldrb	r3, [r7, #31]
}
 8009024:	4618      	mov	r0, r3
 8009026:	3720      	adds	r7, #32
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8009030:	4904      	ldr	r1, [pc, #16]	; (8009044 <MX_FATFS_Init+0x18>)
 8009032:	4805      	ldr	r0, [pc, #20]	; (8009048 <MX_FATFS_Init+0x1c>)
 8009034:	f003 fe2e 	bl	800cc94 <FATFS_LinkDriver>
 8009038:	4603      	mov	r3, r0
 800903a:	461a      	mov	r2, r3
 800903c:	4b03      	ldr	r3, [pc, #12]	; (800904c <MX_FATFS_Init+0x20>)
 800903e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009040:	bf00      	nop
 8009042:	bd80      	pop	{r7, pc}
 8009044:	20002ef8 	.word	0x20002ef8
 8009048:	0800d85c 	.word	0x0800d85c
 800904c:	20002ef4 	.word	0x20002ef4

08009050 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	4603      	mov	r3, r0
 8009058:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	4603      	mov	r3, r0
 8009070:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8009072:	2301      	movs	r3, #1
 8009074:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8009076:	79fb      	ldrb	r3, [r7, #7]
 8009078:	4619      	mov	r1, r3
 800907a:	4808      	ldr	r0, [pc, #32]	; (800909c <USBH_status+0x34>)
 800907c:	f000 fe32 	bl	8009ce4 <USBH_MSC_UnitIsReady>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d002      	beq.n	800908c <USBH_status+0x24>
  {
    res = RES_OK;
 8009086:	2300      	movs	r3, #0
 8009088:	73fb      	strb	r3, [r7, #15]
 800908a:	e001      	b.n	8009090 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009090:	7bfb      	ldrb	r3, [r7, #15]
}
 8009092:	4618      	mov	r0, r3
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	20002f30 	.word	0x20002f30

080090a0 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b094      	sub	sp, #80	; 0x50
 80090a4:	af02      	add	r7, sp, #8
 80090a6:	60b9      	str	r1, [r7, #8]
 80090a8:	607a      	str	r2, [r7, #4]
 80090aa:	603b      	str	r3, [r7, #0]
 80090ac:	4603      	mov	r3, r0
 80090ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80090b6:	7bf9      	ldrb	r1, [r7, #15]
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	9300      	str	r3, [sp, #0]
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	4813      	ldr	r0, [pc, #76]	; (8009110 <USBH_read+0x70>)
 80090c2:	f000 fe59 	bl	8009d78 <USBH_MSC_Read>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d103      	bne.n	80090d4 <USBH_read+0x34>
  {
    res = RES_OK;
 80090cc:	2300      	movs	r3, #0
 80090ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80090d2:	e017      	b.n	8009104 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80090d4:	f107 0210 	add.w	r2, r7, #16
 80090d8:	7bfb      	ldrb	r3, [r7, #15]
 80090da:	4619      	mov	r1, r3
 80090dc:	480c      	ldr	r0, [pc, #48]	; (8009110 <USBH_read+0x70>)
 80090de:	f000 fe27 	bl	8009d30 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80090e2:	7f7b      	ldrb	r3, [r7, #29]
 80090e4:	2b3a      	cmp	r3, #58	; 0x3a
 80090e6:	d005      	beq.n	80090f4 <USBH_read+0x54>
 80090e8:	2b3a      	cmp	r3, #58	; 0x3a
 80090ea:	dc07      	bgt.n	80090fc <USBH_read+0x5c>
 80090ec:	2b04      	cmp	r3, #4
 80090ee:	d001      	beq.n	80090f4 <USBH_read+0x54>
 80090f0:	2b28      	cmp	r3, #40	; 0x28
 80090f2:	d103      	bne.n	80090fc <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 80090f4:	2303      	movs	r3, #3
 80090f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80090fa:	e003      	b.n	8009104 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009102:	bf00      	nop
    }
  }

  return res;
 8009104:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009108:	4618      	mov	r0, r3
 800910a:	3748      	adds	r7, #72	; 0x48
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}
 8009110:	20002f30 	.word	0x20002f30

08009114 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b094      	sub	sp, #80	; 0x50
 8009118:	af02      	add	r7, sp, #8
 800911a:	60b9      	str	r1, [r7, #8]
 800911c:	607a      	str	r2, [r7, #4]
 800911e:	603b      	str	r3, [r7, #0]
 8009120:	4603      	mov	r3, r0
 8009122:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009124:	2301      	movs	r3, #1
 8009126:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800912a:	7bf9      	ldrb	r1, [r7, #15]
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	9300      	str	r3, [sp, #0]
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	4817      	ldr	r0, [pc, #92]	; (8009194 <USBH_write+0x80>)
 8009136:	f000 fe88 	bl	8009e4a <USBH_MSC_Write>
 800913a:	4603      	mov	r3, r0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d103      	bne.n	8009148 <USBH_write+0x34>
  {
    res = RES_OK;
 8009140:	2300      	movs	r3, #0
 8009142:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009146:	e01f      	b.n	8009188 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009148:	f107 0210 	add.w	r2, r7, #16
 800914c:	7bfb      	ldrb	r3, [r7, #15]
 800914e:	4619      	mov	r1, r3
 8009150:	4810      	ldr	r0, [pc, #64]	; (8009194 <USBH_write+0x80>)
 8009152:	f000 fded 	bl	8009d30 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8009156:	7f7b      	ldrb	r3, [r7, #29]
 8009158:	2b3a      	cmp	r3, #58	; 0x3a
 800915a:	d00d      	beq.n	8009178 <USBH_write+0x64>
 800915c:	2b3a      	cmp	r3, #58	; 0x3a
 800915e:	dc0f      	bgt.n	8009180 <USBH_write+0x6c>
 8009160:	2b28      	cmp	r3, #40	; 0x28
 8009162:	d009      	beq.n	8009178 <USBH_write+0x64>
 8009164:	2b28      	cmp	r3, #40	; 0x28
 8009166:	dc0b      	bgt.n	8009180 <USBH_write+0x6c>
 8009168:	2b04      	cmp	r3, #4
 800916a:	d005      	beq.n	8009178 <USBH_write+0x64>
 800916c:	2b27      	cmp	r3, #39	; 0x27
 800916e:	d107      	bne.n	8009180 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8009170:	2302      	movs	r3, #2
 8009172:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009176:	e007      	b.n	8009188 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009178:	2303      	movs	r3, #3
 800917a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800917e:	e003      	b.n	8009188 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8009180:	2301      	movs	r3, #1
 8009182:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009186:	bf00      	nop
    }
  }

  return res;
 8009188:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800918c:	4618      	mov	r0, r3
 800918e:	3748      	adds	r7, #72	; 0x48
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}
 8009194:	20002f30 	.word	0x20002f30

08009198 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b090      	sub	sp, #64	; 0x40
 800919c:	af00      	add	r7, sp, #0
 800919e:	4603      	mov	r3, r0
 80091a0:	603a      	str	r2, [r7, #0]
 80091a2:	71fb      	strb	r3, [r7, #7]
 80091a4:	460b      	mov	r3, r1
 80091a6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80091a8:	2301      	movs	r3, #1
 80091aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 80091ae:	79bb      	ldrb	r3, [r7, #6]
 80091b0:	2b03      	cmp	r3, #3
 80091b2:	d852      	bhi.n	800925a <USBH_ioctl+0xc2>
 80091b4:	a201      	add	r2, pc, #4	; (adr r2, 80091bc <USBH_ioctl+0x24>)
 80091b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ba:	bf00      	nop
 80091bc:	080091cd 	.word	0x080091cd
 80091c0:	080091d5 	.word	0x080091d5
 80091c4:	080091ff 	.word	0x080091ff
 80091c8:	0800922b 	.word	0x0800922b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 80091cc:	2300      	movs	r3, #0
 80091ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80091d2:	e045      	b.n	8009260 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80091d4:	f107 0208 	add.w	r2, r7, #8
 80091d8:	79fb      	ldrb	r3, [r7, #7]
 80091da:	4619      	mov	r1, r3
 80091dc:	4823      	ldr	r0, [pc, #140]	; (800926c <USBH_ioctl+0xd4>)
 80091de:	f000 fda7 	bl	8009d30 <USBH_MSC_GetLUNInfo>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d106      	bne.n	80091f6 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80091ee:	2300      	movs	r3, #0
 80091f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80091f4:	e034      	b.n	8009260 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80091fc:	e030      	b.n	8009260 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80091fe:	f107 0208 	add.w	r2, r7, #8
 8009202:	79fb      	ldrb	r3, [r7, #7]
 8009204:	4619      	mov	r1, r3
 8009206:	4819      	ldr	r0, [pc, #100]	; (800926c <USBH_ioctl+0xd4>)
 8009208:	f000 fd92 	bl	8009d30 <USBH_MSC_GetLUNInfo>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d107      	bne.n	8009222 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8009212:	8a3b      	ldrh	r3, [r7, #16]
 8009214:	461a      	mov	r2, r3
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800921a:	2300      	movs	r3, #0
 800921c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009220:	e01e      	b.n	8009260 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009222:	2301      	movs	r3, #1
 8009224:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009228:	e01a      	b.n	8009260 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800922a:	f107 0208 	add.w	r2, r7, #8
 800922e:	79fb      	ldrb	r3, [r7, #7]
 8009230:	4619      	mov	r1, r3
 8009232:	480e      	ldr	r0, [pc, #56]	; (800926c <USBH_ioctl+0xd4>)
 8009234:	f000 fd7c 	bl	8009d30 <USBH_MSC_GetLUNInfo>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d109      	bne.n	8009252 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800923e:	8a3b      	ldrh	r3, [r7, #16]
 8009240:	0a5b      	lsrs	r3, r3, #9
 8009242:	b29b      	uxth	r3, r3
 8009244:	461a      	mov	r2, r3
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800924a:	2300      	movs	r3, #0
 800924c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009250:	e006      	b.n	8009260 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009258:	e002      	b.n	8009260 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800925a:	2304      	movs	r3, #4
 800925c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8009260:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009264:	4618      	mov	r0, r3
 8009266:	3740      	adds	r7, #64	; 0x40
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	20002f30 	.word	0x20002f30

08009270 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009270:	b590      	push	{r4, r7, lr}
 8009272:	b089      	sub	sp, #36	; 0x24
 8009274:	af04      	add	r7, sp, #16
 8009276:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800927e:	7919      	ldrb	r1, [r3, #4]
 8009280:	2350      	movs	r3, #80	; 0x50
 8009282:	2206      	movs	r2, #6
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f001 fc6b 	bl	800ab60 <USBH_FindInterface>
 800928a:	4603      	mov	r3, r0
 800928c:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800928e:	7bfb      	ldrb	r3, [r7, #15]
 8009290:	2bff      	cmp	r3, #255	; 0xff
 8009292:	d002      	beq.n	800929a <USBH_MSC_InterfaceInit+0x2a>
 8009294:	7bfb      	ldrb	r3, [r7, #15]
 8009296:	2b01      	cmp	r3, #1
 8009298:	d901      	bls.n	800929e <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800929a:	2302      	movs	r3, #2
 800929c:	e106      	b.n	80094ac <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800929e:	7bfb      	ldrb	r3, [r7, #15]
 80092a0:	4619      	mov	r1, r3
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f001 fc40 	bl	800ab28 <USBH_SelectInterface>
 80092a8:	4603      	mov	r3, r0
 80092aa:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80092ac:	7bbb      	ldrb	r3, [r7, #14]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d001      	beq.n	80092b6 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 80092b2:	2302      	movs	r3, #2
 80092b4:	e0fa      	b.n	80094ac <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80092bc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80092c0:	f004 f85a 	bl	800d378 <malloc>
 80092c4:	4603      	mov	r3, r0
 80092c6:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092ce:	69db      	ldr	r3, [r3, #28]
 80092d0:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d101      	bne.n	80092dc <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 80092d8:	2302      	movs	r3, #2
 80092da:	e0e7      	b.n	80094ac <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80092dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80092e0:	2100      	movs	r1, #0
 80092e2:	68b8      	ldr	r0, [r7, #8]
 80092e4:	f004 f866 	bl	800d3b4 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80092e8:	7bfb      	ldrb	r3, [r7, #15]
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	211a      	movs	r1, #26
 80092ee:	fb01 f303 	mul.w	r3, r1, r3
 80092f2:	4413      	add	r3, r2
 80092f4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	b25b      	sxtb	r3, r3
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	da16      	bge.n	800932e <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009300:	7bfb      	ldrb	r3, [r7, #15]
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	211a      	movs	r1, #26
 8009306:	fb01 f303 	mul.w	r3, r1, r3
 800930a:	4413      	add	r3, r2
 800930c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009310:	781a      	ldrb	r2, [r3, #0]
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009316:	7bfb      	ldrb	r3, [r7, #15]
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	211a      	movs	r1, #26
 800931c:	fb01 f303 	mul.w	r3, r1, r3
 8009320:	4413      	add	r3, r2
 8009322:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009326:	881a      	ldrh	r2, [r3, #0]
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	815a      	strh	r2, [r3, #10]
 800932c:	e015      	b.n	800935a <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800932e:	7bfb      	ldrb	r3, [r7, #15]
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	211a      	movs	r1, #26
 8009334:	fb01 f303 	mul.w	r3, r1, r3
 8009338:	4413      	add	r3, r2
 800933a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800933e:	781a      	ldrb	r2, [r3, #0]
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009344:	7bfb      	ldrb	r3, [r7, #15]
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	211a      	movs	r1, #26
 800934a:	fb01 f303 	mul.w	r3, r1, r3
 800934e:	4413      	add	r3, r2
 8009350:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009354:	881a      	ldrh	r2, [r3, #0]
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800935a:	7bfb      	ldrb	r3, [r7, #15]
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	211a      	movs	r1, #26
 8009360:	fb01 f303 	mul.w	r3, r1, r3
 8009364:	4413      	add	r3, r2
 8009366:	f203 3356 	addw	r3, r3, #854	; 0x356
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	b25b      	sxtb	r3, r3
 800936e:	2b00      	cmp	r3, #0
 8009370:	da16      	bge.n	80093a0 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009372:	7bfb      	ldrb	r3, [r7, #15]
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	211a      	movs	r1, #26
 8009378:	fb01 f303 	mul.w	r3, r1, r3
 800937c:	4413      	add	r3, r2
 800937e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009382:	781a      	ldrb	r2, [r3, #0]
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009388:	7bfb      	ldrb	r3, [r7, #15]
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	211a      	movs	r1, #26
 800938e:	fb01 f303 	mul.w	r3, r1, r3
 8009392:	4413      	add	r3, r2
 8009394:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009398:	881a      	ldrh	r2, [r3, #0]
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	815a      	strh	r2, [r3, #10]
 800939e:	e015      	b.n	80093cc <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80093a0:	7bfb      	ldrb	r3, [r7, #15]
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	211a      	movs	r1, #26
 80093a6:	fb01 f303 	mul.w	r3, r1, r3
 80093aa:	4413      	add	r3, r2
 80093ac:	f203 3356 	addw	r3, r3, #854	; 0x356
 80093b0:	781a      	ldrb	r2, [r3, #0]
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80093b6:	7bfb      	ldrb	r3, [r7, #15]
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	211a      	movs	r1, #26
 80093bc:	fb01 f303 	mul.w	r3, r1, r3
 80093c0:	4413      	add	r3, r2
 80093c2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80093c6:	881a      	ldrh	r2, [r3, #0]
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	2200      	movs	r2, #0
 80093d0:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	2200      	movs	r2, #0
 80093d6:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	2200      	movs	r2, #0
 80093dc:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	799b      	ldrb	r3, [r3, #6]
 80093e2:	4619      	mov	r1, r3
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f002 fed6 	bl	800c196 <USBH_AllocPipe>
 80093ea:	4603      	mov	r3, r0
 80093ec:	461a      	mov	r2, r3
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	79db      	ldrb	r3, [r3, #7]
 80093f6:	4619      	mov	r1, r3
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f002 fecc 	bl	800c196 <USBH_AllocPipe>
 80093fe:	4603      	mov	r3, r0
 8009400:	461a      	mov	r2, r3
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 fdc4 	bl	8009f94 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	799b      	ldrb	r3, [r3, #6]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d01e      	beq.n	8009452 <USBH_MSC_InterfaceInit+0x1e2>
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	891b      	ldrh	r3, [r3, #8]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d01a      	beq.n	8009452 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	7959      	ldrb	r1, [r3, #5]
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	7998      	ldrb	r0, [r3, #6]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009430:	68ba      	ldr	r2, [r7, #8]
 8009432:	8912      	ldrh	r2, [r2, #8]
 8009434:	9202      	str	r2, [sp, #8]
 8009436:	2202      	movs	r2, #2
 8009438:	9201      	str	r2, [sp, #4]
 800943a:	9300      	str	r3, [sp, #0]
 800943c:	4623      	mov	r3, r4
 800943e:	4602      	mov	r2, r0
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f002 fe79 	bl	800c138 <USBH_OpenPipe>
 8009446:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	79db      	ldrb	r3, [r3, #7]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d02c      	beq.n	80094aa <USBH_MSC_InterfaceInit+0x23a>
 8009450:	e001      	b.n	8009456 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8009452:	2303      	movs	r3, #3
 8009454:	e02a      	b.n	80094ac <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	895b      	ldrh	r3, [r3, #10]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d025      	beq.n	80094aa <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	7919      	ldrb	r1, [r3, #4]
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	79d8      	ldrb	r0, [r3, #7]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009472:	68ba      	ldr	r2, [r7, #8]
 8009474:	8952      	ldrh	r2, [r2, #10]
 8009476:	9202      	str	r2, [sp, #8]
 8009478:	2202      	movs	r2, #2
 800947a:	9201      	str	r2, [sp, #4]
 800947c:	9300      	str	r3, [sp, #0]
 800947e:	4623      	mov	r3, r4
 8009480:	4602      	mov	r2, r0
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f002 fe58 	bl	800c138 <USBH_OpenPipe>
 8009488:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	791b      	ldrb	r3, [r3, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	4619      	mov	r1, r3
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f003 fe92 	bl	800d1bc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	795b      	ldrb	r3, [r3, #5]
 800949c:	2200      	movs	r2, #0
 800949e:	4619      	mov	r1, r3
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f003 fe8b 	bl	800d1bc <USBH_LL_SetToggle>

  return USBH_OK;
 80094a6:	2300      	movs	r3, #0
 80094a8:	e000      	b.n	80094ac <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 80094aa:	2303      	movs	r3, #3
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3714      	adds	r7, #20
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd90      	pop	{r4, r7, pc}

080094b4 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094c2:	69db      	ldr	r3, [r3, #28]
 80094c4:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	795b      	ldrb	r3, [r3, #5]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d00e      	beq.n	80094ec <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	795b      	ldrb	r3, [r3, #5]
 80094d2:	4619      	mov	r1, r3
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f002 fe4e 	bl	800c176 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	795b      	ldrb	r3, [r3, #5]
 80094de:	4619      	mov	r1, r3
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f002 fe79 	bl	800c1d8 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2200      	movs	r2, #0
 80094ea:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	791b      	ldrb	r3, [r3, #4]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d00e      	beq.n	8009512 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	791b      	ldrb	r3, [r3, #4]
 80094f8:	4619      	mov	r1, r3
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f002 fe3b 	bl	800c176 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	791b      	ldrb	r3, [r3, #4]
 8009504:	4619      	mov	r1, r3
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f002 fe66 	bl	800c1d8 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2200      	movs	r2, #0
 8009510:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009518:	69db      	ldr	r3, [r3, #28]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d00b      	beq.n	8009536 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009524:	69db      	ldr	r3, [r3, #28]
 8009526:	4618      	mov	r0, r3
 8009528:	f003 ff2e 	bl	800d388 <free>
    phost->pActiveClass->pData = 0U;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009532:	2200      	movs	r2, #0
 8009534:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009536:	2300      	movs	r3, #0
}
 8009538:	4618      	mov	r0, r3
 800953a:	3710      	adds	r7, #16
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800954e:	69db      	ldr	r3, [r3, #28]
 8009550:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009552:	2301      	movs	r3, #1
 8009554:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	7b9b      	ldrb	r3, [r3, #14]
 800955a:	2b03      	cmp	r3, #3
 800955c:	d041      	beq.n	80095e2 <USBH_MSC_ClassRequest+0xa2>
 800955e:	2b03      	cmp	r3, #3
 8009560:	dc4b      	bgt.n	80095fa <USBH_MSC_ClassRequest+0xba>
 8009562:	2b00      	cmp	r3, #0
 8009564:	d001      	beq.n	800956a <USBH_MSC_ClassRequest+0x2a>
 8009566:	2b02      	cmp	r3, #2
 8009568:	d147      	bne.n	80095fa <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	4619      	mov	r1, r3
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 fcf1 	bl	8009f56 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8009574:	4603      	mov	r3, r0
 8009576:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8009578:	7bfb      	ldrb	r3, [r7, #15]
 800957a:	2b03      	cmp	r3, #3
 800957c:	d104      	bne.n	8009588 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	2200      	movs	r2, #0
 8009582:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8009584:	2300      	movs	r3, #0
 8009586:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8009588:	7bfb      	ldrb	r3, [r7, #15]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d137      	bne.n	80095fe <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	2b02      	cmp	r3, #2
 8009594:	d804      	bhi.n	80095a0 <USBH_MSC_ClassRequest+0x60>
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	3301      	adds	r3, #1
 800959c:	b2da      	uxtb	r2, r3
 800959e:	e000      	b.n	80095a2 <USBH_MSC_ClassRequest+0x62>
 80095a0:	2202      	movs	r2, #2
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80095a6:	2300      	movs	r3, #0
 80095a8:	73bb      	strb	r3, [r7, #14]
 80095aa:	e014      	b.n	80095d6 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80095ac:	7bbb      	ldrb	r3, [r7, #14]
 80095ae:	68ba      	ldr	r2, [r7, #8]
 80095b0:	2134      	movs	r1, #52	; 0x34
 80095b2:	fb01 f303 	mul.w	r3, r1, r3
 80095b6:	4413      	add	r3, r2
 80095b8:	3392      	adds	r3, #146	; 0x92
 80095ba:	2202      	movs	r2, #2
 80095bc:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 80095be:	7bbb      	ldrb	r3, [r7, #14]
 80095c0:	68ba      	ldr	r2, [r7, #8]
 80095c2:	2134      	movs	r1, #52	; 0x34
 80095c4:	fb01 f303 	mul.w	r3, r1, r3
 80095c8:	4413      	add	r3, r2
 80095ca:	33c1      	adds	r3, #193	; 0xc1
 80095cc:	2200      	movs	r2, #0
 80095ce:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80095d0:	7bbb      	ldrb	r3, [r7, #14]
 80095d2:	3301      	adds	r3, #1
 80095d4:	73bb      	strb	r3, [r7, #14]
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	7bba      	ldrb	r2, [r7, #14]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d3e5      	bcc.n	80095ac <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 80095e0:	e00d      	b.n	80095fe <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 80095e2:	2100      	movs	r1, #0
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f002 f888 	bl	800b6fa <USBH_ClrFeature>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d108      	bne.n	8009602 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	7bda      	ldrb	r2, [r3, #15]
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	739a      	strb	r2, [r3, #14]
      }
      break;
 80095f8:	e003      	b.n	8009602 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 80095fa:	bf00      	nop
 80095fc:	e002      	b.n	8009604 <USBH_MSC_ClassRequest+0xc4>
      break;
 80095fe:	bf00      	nop
 8009600:	e000      	b.n	8009604 <USBH_MSC_ClassRequest+0xc4>
      break;
 8009602:	bf00      	nop
  }

  return status;
 8009604:	7bfb      	ldrb	r3, [r7, #15]
}
 8009606:	4618      	mov	r0, r3
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
	...

08009610 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b086      	sub	sp, #24
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800961e:	69db      	ldr	r3, [r3, #28]
 8009620:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8009622:	2301      	movs	r3, #1
 8009624:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8009626:	2301      	movs	r3, #1
 8009628:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800962a:	2301      	movs	r3, #1
 800962c:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	7b1b      	ldrb	r3, [r3, #12]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d003      	beq.n	800963e <USBH_MSC_Process+0x2e>
 8009636:	2b01      	cmp	r3, #1
 8009638:	f000 8271 	beq.w	8009b1e <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800963c:	e272      	b.n	8009b24 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	b29b      	uxth	r3, r3
 800964a:	429a      	cmp	r2, r3
 800964c:	f080 824f 	bcs.w	8009aee <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009656:	4619      	mov	r1, r3
 8009658:	693a      	ldr	r2, [r7, #16]
 800965a:	2334      	movs	r3, #52	; 0x34
 800965c:	fb01 f303 	mul.w	r3, r1, r3
 8009660:	4413      	add	r3, r2
 8009662:	3391      	adds	r3, #145	; 0x91
 8009664:	2201      	movs	r2, #1
 8009666:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800966e:	4619      	mov	r1, r3
 8009670:	693a      	ldr	r2, [r7, #16]
 8009672:	2334      	movs	r3, #52	; 0x34
 8009674:	fb01 f303 	mul.w	r3, r1, r3
 8009678:	4413      	add	r3, r2
 800967a:	3390      	adds	r3, #144	; 0x90
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	2b08      	cmp	r3, #8
 8009680:	f200 8243 	bhi.w	8009b0a <USBH_MSC_Process+0x4fa>
 8009684:	a201      	add	r2, pc, #4	; (adr r2, 800968c <USBH_MSC_Process+0x7c>)
 8009686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800968a:	bf00      	nop
 800968c:	080096b1 	.word	0x080096b1
 8009690:	08009b0b 	.word	0x08009b0b
 8009694:	08009779 	.word	0x08009779
 8009698:	080098fd 	.word	0x080098fd
 800969c:	080096d7 	.word	0x080096d7
 80096a0:	080099c9 	.word	0x080099c9
 80096a4:	08009b0b 	.word	0x08009b0b
 80096a8:	08009b0b 	.word	0x08009b0b
 80096ac:	08009add 	.word	0x08009add
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096b6:	4619      	mov	r1, r3
 80096b8:	693a      	ldr	r2, [r7, #16]
 80096ba:	2334      	movs	r3, #52	; 0x34
 80096bc:	fb01 f303 	mul.w	r3, r1, r3
 80096c0:	4413      	add	r3, r2
 80096c2:	3390      	adds	r3, #144	; 0x90
 80096c4:	2204      	movs	r2, #4
 80096c6:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 80096d4:	e222      	b.n	8009b1c <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096dc:	b2d9      	uxtb	r1, r3
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096e4:	461a      	mov	r2, r3
 80096e6:	2334      	movs	r3, #52	; 0x34
 80096e8:	fb02 f303 	mul.w	r3, r2, r3
 80096ec:	3398      	adds	r3, #152	; 0x98
 80096ee:	693a      	ldr	r2, [r7, #16]
 80096f0:	4413      	add	r3, r2
 80096f2:	3307      	adds	r3, #7
 80096f4:	461a      	mov	r2, r3
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 ff6a 	bl	800a5d0 <USBH_MSC_SCSI_Inquiry>
 80096fc:	4603      	mov	r3, r0
 80096fe:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009700:	7bfb      	ldrb	r3, [r7, #15]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d10b      	bne.n	800971e <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800970c:	4619      	mov	r1, r3
 800970e:	693a      	ldr	r2, [r7, #16]
 8009710:	2334      	movs	r3, #52	; 0x34
 8009712:	fb01 f303 	mul.w	r3, r1, r3
 8009716:	4413      	add	r3, r2
 8009718:	3390      	adds	r3, #144	; 0x90
 800971a:	2202      	movs	r2, #2
 800971c:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800971e:	7bfb      	ldrb	r3, [r7, #15]
 8009720:	2b02      	cmp	r3, #2
 8009722:	d10c      	bne.n	800973e <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800972a:	4619      	mov	r1, r3
 800972c:	693a      	ldr	r2, [r7, #16]
 800972e:	2334      	movs	r3, #52	; 0x34
 8009730:	fb01 f303 	mul.w	r3, r1, r3
 8009734:	4413      	add	r3, r2
 8009736:	3390      	adds	r3, #144	; 0x90
 8009738:	2205      	movs	r2, #5
 800973a:	701a      	strb	r2, [r3, #0]
            break;
 800973c:	e1e7      	b.n	8009b0e <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800973e:	7bfb      	ldrb	r3, [r7, #15]
 8009740:	2b04      	cmp	r3, #4
 8009742:	f040 81e4 	bne.w	8009b0e <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800974c:	4619      	mov	r1, r3
 800974e:	693a      	ldr	r2, [r7, #16]
 8009750:	2334      	movs	r3, #52	; 0x34
 8009752:	fb01 f303 	mul.w	r3, r1, r3
 8009756:	4413      	add	r3, r2
 8009758:	3390      	adds	r3, #144	; 0x90
 800975a:	2201      	movs	r2, #1
 800975c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009764:	4619      	mov	r1, r3
 8009766:	693a      	ldr	r2, [r7, #16]
 8009768:	2334      	movs	r3, #52	; 0x34
 800976a:	fb01 f303 	mul.w	r3, r1, r3
 800976e:	4413      	add	r3, r2
 8009770:	3391      	adds	r3, #145	; 0x91
 8009772:	2202      	movs	r2, #2
 8009774:	701a      	strb	r2, [r3, #0]
            break;
 8009776:	e1ca      	b.n	8009b0e <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800977e:	b2db      	uxtb	r3, r3
 8009780:	4619      	mov	r1, r3
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 fe66 	bl	800a454 <USBH_MSC_SCSI_TestUnitReady>
 8009788:	4603      	mov	r3, r0
 800978a:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800978c:	7bbb      	ldrb	r3, [r7, #14]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d149      	bne.n	8009826 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009798:	4619      	mov	r1, r3
 800979a:	693a      	ldr	r2, [r7, #16]
 800979c:	2334      	movs	r3, #52	; 0x34
 800979e:	fb01 f303 	mul.w	r3, r1, r3
 80097a2:	4413      	add	r3, r2
 80097a4:	3392      	adds	r3, #146	; 0x92
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00c      	beq.n	80097c6 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80097b2:	4619      	mov	r1, r3
 80097b4:	693a      	ldr	r2, [r7, #16]
 80097b6:	2334      	movs	r3, #52	; 0x34
 80097b8:	fb01 f303 	mul.w	r3, r1, r3
 80097bc:	4413      	add	r3, r2
 80097be:	33c1      	adds	r3, #193	; 0xc1
 80097c0:	2201      	movs	r2, #1
 80097c2:	701a      	strb	r2, [r3, #0]
 80097c4:	e00b      	b.n	80097de <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80097cc:	4619      	mov	r1, r3
 80097ce:	693a      	ldr	r2, [r7, #16]
 80097d0:	2334      	movs	r3, #52	; 0x34
 80097d2:	fb01 f303 	mul.w	r3, r1, r3
 80097d6:	4413      	add	r3, r2
 80097d8:	33c1      	adds	r3, #193	; 0xc1
 80097da:	2200      	movs	r2, #0
 80097dc:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80097e4:	4619      	mov	r1, r3
 80097e6:	693a      	ldr	r2, [r7, #16]
 80097e8:	2334      	movs	r3, #52	; 0x34
 80097ea:	fb01 f303 	mul.w	r3, r1, r3
 80097ee:	4413      	add	r3, r2
 80097f0:	3390      	adds	r3, #144	; 0x90
 80097f2:	2203      	movs	r2, #3
 80097f4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80097fc:	4619      	mov	r1, r3
 80097fe:	693a      	ldr	r2, [r7, #16]
 8009800:	2334      	movs	r3, #52	; 0x34
 8009802:	fb01 f303 	mul.w	r3, r1, r3
 8009806:	4413      	add	r3, r2
 8009808:	3391      	adds	r3, #145	; 0x91
 800980a:	2200      	movs	r2, #0
 800980c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009814:	4619      	mov	r1, r3
 8009816:	693a      	ldr	r2, [r7, #16]
 8009818:	2334      	movs	r3, #52	; 0x34
 800981a:	fb01 f303 	mul.w	r3, r1, r3
 800981e:	4413      	add	r3, r2
 8009820:	3392      	adds	r3, #146	; 0x92
 8009822:	2200      	movs	r2, #0
 8009824:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8009826:	7bbb      	ldrb	r3, [r7, #14]
 8009828:	2b02      	cmp	r3, #2
 800982a:	d14a      	bne.n	80098c2 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009832:	4619      	mov	r1, r3
 8009834:	693a      	ldr	r2, [r7, #16]
 8009836:	2334      	movs	r3, #52	; 0x34
 8009838:	fb01 f303 	mul.w	r3, r1, r3
 800983c:	4413      	add	r3, r2
 800983e:	3392      	adds	r3, #146	; 0x92
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	2b02      	cmp	r3, #2
 8009844:	d00c      	beq.n	8009860 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800984c:	4619      	mov	r1, r3
 800984e:	693a      	ldr	r2, [r7, #16]
 8009850:	2334      	movs	r3, #52	; 0x34
 8009852:	fb01 f303 	mul.w	r3, r1, r3
 8009856:	4413      	add	r3, r2
 8009858:	33c1      	adds	r3, #193	; 0xc1
 800985a:	2201      	movs	r2, #1
 800985c:	701a      	strb	r2, [r3, #0]
 800985e:	e00b      	b.n	8009878 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009866:	4619      	mov	r1, r3
 8009868:	693a      	ldr	r2, [r7, #16]
 800986a:	2334      	movs	r3, #52	; 0x34
 800986c:	fb01 f303 	mul.w	r3, r1, r3
 8009870:	4413      	add	r3, r2
 8009872:	33c1      	adds	r3, #193	; 0xc1
 8009874:	2200      	movs	r2, #0
 8009876:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800987e:	4619      	mov	r1, r3
 8009880:	693a      	ldr	r2, [r7, #16]
 8009882:	2334      	movs	r3, #52	; 0x34
 8009884:	fb01 f303 	mul.w	r3, r1, r3
 8009888:	4413      	add	r3, r2
 800988a:	3390      	adds	r3, #144	; 0x90
 800988c:	2205      	movs	r2, #5
 800988e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009896:	4619      	mov	r1, r3
 8009898:	693a      	ldr	r2, [r7, #16]
 800989a:	2334      	movs	r3, #52	; 0x34
 800989c:	fb01 f303 	mul.w	r3, r1, r3
 80098a0:	4413      	add	r3, r2
 80098a2:	3391      	adds	r3, #145	; 0x91
 80098a4:	2201      	movs	r2, #1
 80098a6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80098ae:	4619      	mov	r1, r3
 80098b0:	693a      	ldr	r2, [r7, #16]
 80098b2:	2334      	movs	r3, #52	; 0x34
 80098b4:	fb01 f303 	mul.w	r3, r1, r3
 80098b8:	4413      	add	r3, r2
 80098ba:	3392      	adds	r3, #146	; 0x92
 80098bc:	2202      	movs	r2, #2
 80098be:	701a      	strb	r2, [r3, #0]
            break;
 80098c0:	e127      	b.n	8009b12 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 80098c2:	7bbb      	ldrb	r3, [r7, #14]
 80098c4:	2b04      	cmp	r3, #4
 80098c6:	f040 8124 	bne.w	8009b12 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80098d0:	4619      	mov	r1, r3
 80098d2:	693a      	ldr	r2, [r7, #16]
 80098d4:	2334      	movs	r3, #52	; 0x34
 80098d6:	fb01 f303 	mul.w	r3, r1, r3
 80098da:	4413      	add	r3, r2
 80098dc:	3390      	adds	r3, #144	; 0x90
 80098de:	2201      	movs	r2, #1
 80098e0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80098e8:	4619      	mov	r1, r3
 80098ea:	693a      	ldr	r2, [r7, #16]
 80098ec:	2334      	movs	r3, #52	; 0x34
 80098ee:	fb01 f303 	mul.w	r3, r1, r3
 80098f2:	4413      	add	r3, r2
 80098f4:	3391      	adds	r3, #145	; 0x91
 80098f6:	2202      	movs	r2, #2
 80098f8:	701a      	strb	r2, [r3, #0]
            break;
 80098fa:	e10a      	b.n	8009b12 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009902:	b2d9      	uxtb	r1, r3
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800990a:	461a      	mov	r2, r3
 800990c:	2334      	movs	r3, #52	; 0x34
 800990e:	fb02 f303 	mul.w	r3, r2, r3
 8009912:	3390      	adds	r3, #144	; 0x90
 8009914:	693a      	ldr	r2, [r7, #16]
 8009916:	4413      	add	r3, r2
 8009918:	3304      	adds	r3, #4
 800991a:	461a      	mov	r2, r3
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 fddc 	bl	800a4da <USBH_MSC_SCSI_ReadCapacity>
 8009922:	4603      	mov	r3, r0
 8009924:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009926:	7bfb      	ldrb	r3, [r7, #15]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d120      	bne.n	800996e <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009932:	4619      	mov	r1, r3
 8009934:	693a      	ldr	r2, [r7, #16]
 8009936:	2334      	movs	r3, #52	; 0x34
 8009938:	fb01 f303 	mul.w	r3, r1, r3
 800993c:	4413      	add	r3, r2
 800993e:	3390      	adds	r3, #144	; 0x90
 8009940:	2201      	movs	r2, #1
 8009942:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800994a:	4619      	mov	r1, r3
 800994c:	693a      	ldr	r2, [r7, #16]
 800994e:	2334      	movs	r3, #52	; 0x34
 8009950:	fb01 f303 	mul.w	r3, r1, r3
 8009954:	4413      	add	r3, r2
 8009956:	3391      	adds	r3, #145	; 0x91
 8009958:	2200      	movs	r2, #0
 800995a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009962:	3301      	adds	r3, #1
 8009964:	b29a      	uxth	r2, r3
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800996c:	e0d3      	b.n	8009b16 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800996e:	7bfb      	ldrb	r3, [r7, #15]
 8009970:	2b02      	cmp	r3, #2
 8009972:	d10c      	bne.n	800998e <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800997a:	4619      	mov	r1, r3
 800997c:	693a      	ldr	r2, [r7, #16]
 800997e:	2334      	movs	r3, #52	; 0x34
 8009980:	fb01 f303 	mul.w	r3, r1, r3
 8009984:	4413      	add	r3, r2
 8009986:	3390      	adds	r3, #144	; 0x90
 8009988:	2205      	movs	r2, #5
 800998a:	701a      	strb	r2, [r3, #0]
            break;
 800998c:	e0c3      	b.n	8009b16 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800998e:	7bfb      	ldrb	r3, [r7, #15]
 8009990:	2b04      	cmp	r3, #4
 8009992:	f040 80c0 	bne.w	8009b16 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800999c:	4619      	mov	r1, r3
 800999e:	693a      	ldr	r2, [r7, #16]
 80099a0:	2334      	movs	r3, #52	; 0x34
 80099a2:	fb01 f303 	mul.w	r3, r1, r3
 80099a6:	4413      	add	r3, r2
 80099a8:	3390      	adds	r3, #144	; 0x90
 80099aa:	2201      	movs	r2, #1
 80099ac:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80099b4:	4619      	mov	r1, r3
 80099b6:	693a      	ldr	r2, [r7, #16]
 80099b8:	2334      	movs	r3, #52	; 0x34
 80099ba:	fb01 f303 	mul.w	r3, r1, r3
 80099be:	4413      	add	r3, r2
 80099c0:	3391      	adds	r3, #145	; 0x91
 80099c2:	2202      	movs	r2, #2
 80099c4:	701a      	strb	r2, [r3, #0]
            break;
 80099c6:	e0a6      	b.n	8009b16 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80099ce:	b2d9      	uxtb	r1, r3
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80099d6:	461a      	mov	r2, r3
 80099d8:	2334      	movs	r3, #52	; 0x34
 80099da:	fb02 f303 	mul.w	r3, r2, r3
 80099de:	3398      	adds	r3, #152	; 0x98
 80099e0:	693a      	ldr	r2, [r7, #16]
 80099e2:	4413      	add	r3, r2
 80099e4:	3304      	adds	r3, #4
 80099e6:	461a      	mov	r2, r3
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 fe96 	bl	800a71a <USBH_MSC_SCSI_RequestSense>
 80099ee:	4603      	mov	r3, r0
 80099f0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80099f2:	7bfb      	ldrb	r3, [r7, #15]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d145      	bne.n	8009a84 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80099fe:	4619      	mov	r1, r3
 8009a00:	693a      	ldr	r2, [r7, #16]
 8009a02:	2334      	movs	r3, #52	; 0x34
 8009a04:	fb01 f303 	mul.w	r3, r1, r3
 8009a08:	4413      	add	r3, r2
 8009a0a:	339c      	adds	r3, #156	; 0x9c
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	2b06      	cmp	r3, #6
 8009a10:	d00c      	beq.n	8009a2c <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a18:	4619      	mov	r1, r3
 8009a1a:	693a      	ldr	r2, [r7, #16]
 8009a1c:	2334      	movs	r3, #52	; 0x34
 8009a1e:	fb01 f303 	mul.w	r3, r1, r3
 8009a22:	4413      	add	r3, r2
 8009a24:	339c      	adds	r3, #156	; 0x9c
 8009a26:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009a28:	2b02      	cmp	r3, #2
 8009a2a:	d117      	bne.n	8009a5c <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8009a38:	1ad3      	subs	r3, r2, r3
 8009a3a:	f242 720f 	movw	r2, #9999	; 0x270f
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d80c      	bhi.n	8009a5c <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a48:	4619      	mov	r1, r3
 8009a4a:	693a      	ldr	r2, [r7, #16]
 8009a4c:	2334      	movs	r3, #52	; 0x34
 8009a4e:	fb01 f303 	mul.w	r3, r1, r3
 8009a52:	4413      	add	r3, r2
 8009a54:	3390      	adds	r3, #144	; 0x90
 8009a56:	2202      	movs	r2, #2
 8009a58:	701a      	strb	r2, [r3, #0]
                  break;
 8009a5a:	e05f      	b.n	8009b1c <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a62:	4619      	mov	r1, r3
 8009a64:	693a      	ldr	r2, [r7, #16]
 8009a66:	2334      	movs	r3, #52	; 0x34
 8009a68:	fb01 f303 	mul.w	r3, r1, r3
 8009a6c:	4413      	add	r3, r2
 8009a6e:	3390      	adds	r3, #144	; 0x90
 8009a70:	2201      	movs	r2, #1
 8009a72:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8009a84:	7bfb      	ldrb	r3, [r7, #15]
 8009a86:	2b02      	cmp	r3, #2
 8009a88:	d10c      	bne.n	8009aa4 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a90:	4619      	mov	r1, r3
 8009a92:	693a      	ldr	r2, [r7, #16]
 8009a94:	2334      	movs	r3, #52	; 0x34
 8009a96:	fb01 f303 	mul.w	r3, r1, r3
 8009a9a:	4413      	add	r3, r2
 8009a9c:	3390      	adds	r3, #144	; 0x90
 8009a9e:	2208      	movs	r2, #8
 8009aa0:	701a      	strb	r2, [r3, #0]
            break;
 8009aa2:	e03a      	b.n	8009b1a <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009aa4:	7bfb      	ldrb	r3, [r7, #15]
 8009aa6:	2b04      	cmp	r3, #4
 8009aa8:	d137      	bne.n	8009b1a <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	693a      	ldr	r2, [r7, #16]
 8009ab4:	2334      	movs	r3, #52	; 0x34
 8009ab6:	fb01 f303 	mul.w	r3, r1, r3
 8009aba:	4413      	add	r3, r2
 8009abc:	3390      	adds	r3, #144	; 0x90
 8009abe:	2201      	movs	r2, #1
 8009ac0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ac8:	4619      	mov	r1, r3
 8009aca:	693a      	ldr	r2, [r7, #16]
 8009acc:	2334      	movs	r3, #52	; 0x34
 8009ace:	fb01 f303 	mul.w	r3, r1, r3
 8009ad2:	4413      	add	r3, r2
 8009ad4:	3391      	adds	r3, #145	; 0x91
 8009ad6:	2202      	movs	r2, #2
 8009ad8:	701a      	strb	r2, [r3, #0]
            break;
 8009ada:	e01e      	b.n	8009b1a <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	b29a      	uxth	r2, r3
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009aec:	e016      	b.n	8009b1c <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	2200      	movs	r2, #0
 8009af2:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	2201      	movs	r2, #1
 8009afa:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009b02:	2102      	movs	r1, #2
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	4798      	blx	r3
      break;
 8009b08:	e00c      	b.n	8009b24 <USBH_MSC_Process+0x514>
            break;
 8009b0a:	bf00      	nop
 8009b0c:	e00a      	b.n	8009b24 <USBH_MSC_Process+0x514>
            break;
 8009b0e:	bf00      	nop
 8009b10:	e008      	b.n	8009b24 <USBH_MSC_Process+0x514>
            break;
 8009b12:	bf00      	nop
 8009b14:	e006      	b.n	8009b24 <USBH_MSC_Process+0x514>
            break;
 8009b16:	bf00      	nop
 8009b18:	e004      	b.n	8009b24 <USBH_MSC_Process+0x514>
            break;
 8009b1a:	bf00      	nop
      break;
 8009b1c:	e002      	b.n	8009b24 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	75fb      	strb	r3, [r7, #23]
      break;
 8009b22:	bf00      	nop
  }
  return error;
 8009b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3718      	adds	r7, #24
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
 8009b2e:	bf00      	nop

08009b30 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009b38:	2300      	movs	r3, #0
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	370c      	adds	r7, #12
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr

08009b46 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b088      	sub	sp, #32
 8009b4a:	af02      	add	r7, sp, #8
 8009b4c:	6078      	str	r0, [r7, #4]
 8009b4e:	460b      	mov	r3, r1
 8009b50:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b58:	69db      	ldr	r3, [r3, #28]
 8009b5a:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8009b60:	2301      	movs	r3, #1
 8009b62:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8009b64:	78fb      	ldrb	r3, [r7, #3]
 8009b66:	693a      	ldr	r2, [r7, #16]
 8009b68:	2134      	movs	r1, #52	; 0x34
 8009b6a:	fb01 f303 	mul.w	r3, r1, r3
 8009b6e:	4413      	add	r3, r2
 8009b70:	3390      	adds	r3, #144	; 0x90
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	2b07      	cmp	r3, #7
 8009b76:	d03c      	beq.n	8009bf2 <USBH_MSC_RdWrProcess+0xac>
 8009b78:	2b07      	cmp	r3, #7
 8009b7a:	f300 80a7 	bgt.w	8009ccc <USBH_MSC_RdWrProcess+0x186>
 8009b7e:	2b05      	cmp	r3, #5
 8009b80:	d06c      	beq.n	8009c5c <USBH_MSC_RdWrProcess+0x116>
 8009b82:	2b06      	cmp	r3, #6
 8009b84:	f040 80a2 	bne.w	8009ccc <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8009b88:	78f9      	ldrb	r1, [r7, #3]
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	9300      	str	r3, [sp, #0]
 8009b8e:	2300      	movs	r3, #0
 8009b90:	2200      	movs	r2, #0
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 fea5 	bl	800a8e2 <USBH_MSC_SCSI_Read>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009b9c:	7bfb      	ldrb	r3, [r7, #15]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d10b      	bne.n	8009bba <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009ba2:	78fb      	ldrb	r3, [r7, #3]
 8009ba4:	693a      	ldr	r2, [r7, #16]
 8009ba6:	2134      	movs	r1, #52	; 0x34
 8009ba8:	fb01 f303 	mul.w	r3, r1, r3
 8009bac:	4413      	add	r3, r2
 8009bae:	3390      	adds	r3, #144	; 0x90
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009bb8:	e08a      	b.n	8009cd0 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8009bba:	7bfb      	ldrb	r3, [r7, #15]
 8009bbc:	2b02      	cmp	r3, #2
 8009bbe:	d109      	bne.n	8009bd4 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009bc0:	78fb      	ldrb	r3, [r7, #3]
 8009bc2:	693a      	ldr	r2, [r7, #16]
 8009bc4:	2134      	movs	r1, #52	; 0x34
 8009bc6:	fb01 f303 	mul.w	r3, r1, r3
 8009bca:	4413      	add	r3, r2
 8009bcc:	3390      	adds	r3, #144	; 0x90
 8009bce:	2205      	movs	r2, #5
 8009bd0:	701a      	strb	r2, [r3, #0]
      break;
 8009bd2:	e07d      	b.n	8009cd0 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009bd4:	7bfb      	ldrb	r3, [r7, #15]
 8009bd6:	2b04      	cmp	r3, #4
 8009bd8:	d17a      	bne.n	8009cd0 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009bda:	78fb      	ldrb	r3, [r7, #3]
 8009bdc:	693a      	ldr	r2, [r7, #16]
 8009bde:	2134      	movs	r1, #52	; 0x34
 8009be0:	fb01 f303 	mul.w	r3, r1, r3
 8009be4:	4413      	add	r3, r2
 8009be6:	3390      	adds	r3, #144	; 0x90
 8009be8:	2208      	movs	r2, #8
 8009bea:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009bec:	2302      	movs	r3, #2
 8009bee:	75fb      	strb	r3, [r7, #23]
      break;
 8009bf0:	e06e      	b.n	8009cd0 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8009bf2:	78f9      	ldrb	r1, [r7, #3]
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	9300      	str	r3, [sp, #0]
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 fe05 	bl	800a80c <USBH_MSC_SCSI_Write>
 8009c02:	4603      	mov	r3, r0
 8009c04:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009c06:	7bfb      	ldrb	r3, [r7, #15]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d10b      	bne.n	8009c24 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009c0c:	78fb      	ldrb	r3, [r7, #3]
 8009c0e:	693a      	ldr	r2, [r7, #16]
 8009c10:	2134      	movs	r1, #52	; 0x34
 8009c12:	fb01 f303 	mul.w	r3, r1, r3
 8009c16:	4413      	add	r3, r2
 8009c18:	3390      	adds	r3, #144	; 0x90
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009c22:	e057      	b.n	8009cd4 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8009c24:	7bfb      	ldrb	r3, [r7, #15]
 8009c26:	2b02      	cmp	r3, #2
 8009c28:	d109      	bne.n	8009c3e <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009c2a:	78fb      	ldrb	r3, [r7, #3]
 8009c2c:	693a      	ldr	r2, [r7, #16]
 8009c2e:	2134      	movs	r1, #52	; 0x34
 8009c30:	fb01 f303 	mul.w	r3, r1, r3
 8009c34:	4413      	add	r3, r2
 8009c36:	3390      	adds	r3, #144	; 0x90
 8009c38:	2205      	movs	r2, #5
 8009c3a:	701a      	strb	r2, [r3, #0]
      break;
 8009c3c:	e04a      	b.n	8009cd4 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009c3e:	7bfb      	ldrb	r3, [r7, #15]
 8009c40:	2b04      	cmp	r3, #4
 8009c42:	d147      	bne.n	8009cd4 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009c44:	78fb      	ldrb	r3, [r7, #3]
 8009c46:	693a      	ldr	r2, [r7, #16]
 8009c48:	2134      	movs	r1, #52	; 0x34
 8009c4a:	fb01 f303 	mul.w	r3, r1, r3
 8009c4e:	4413      	add	r3, r2
 8009c50:	3390      	adds	r3, #144	; 0x90
 8009c52:	2208      	movs	r2, #8
 8009c54:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009c56:	2302      	movs	r3, #2
 8009c58:	75fb      	strb	r3, [r7, #23]
      break;
 8009c5a:	e03b      	b.n	8009cd4 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8009c5c:	78fb      	ldrb	r3, [r7, #3]
 8009c5e:	2234      	movs	r2, #52	; 0x34
 8009c60:	fb02 f303 	mul.w	r3, r2, r3
 8009c64:	3398      	adds	r3, #152	; 0x98
 8009c66:	693a      	ldr	r2, [r7, #16]
 8009c68:	4413      	add	r3, r2
 8009c6a:	1d1a      	adds	r2, r3, #4
 8009c6c:	78fb      	ldrb	r3, [r7, #3]
 8009c6e:	4619      	mov	r1, r3
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 fd52 	bl	800a71a <USBH_MSC_SCSI_RequestSense>
 8009c76:	4603      	mov	r3, r0
 8009c78:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009c7a:	7bfb      	ldrb	r3, [r7, #15]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d113      	bne.n	8009ca8 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009c80:	78fb      	ldrb	r3, [r7, #3]
 8009c82:	693a      	ldr	r2, [r7, #16]
 8009c84:	2134      	movs	r1, #52	; 0x34
 8009c86:	fb01 f303 	mul.w	r3, r1, r3
 8009c8a:	4413      	add	r3, r2
 8009c8c:	3390      	adds	r3, #144	; 0x90
 8009c8e:	2201      	movs	r2, #1
 8009c90:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8009c92:	78fb      	ldrb	r3, [r7, #3]
 8009c94:	693a      	ldr	r2, [r7, #16]
 8009c96:	2134      	movs	r1, #52	; 0x34
 8009c98:	fb01 f303 	mul.w	r3, r1, r3
 8009c9c:	4413      	add	r3, r2
 8009c9e:	3391      	adds	r3, #145	; 0x91
 8009ca0:	2202      	movs	r2, #2
 8009ca2:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8009ca4:	2302      	movs	r3, #2
 8009ca6:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8009ca8:	7bfb      	ldrb	r3, [r7, #15]
 8009caa:	2b02      	cmp	r3, #2
 8009cac:	d014      	beq.n	8009cd8 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009cae:	7bfb      	ldrb	r3, [r7, #15]
 8009cb0:	2b04      	cmp	r3, #4
 8009cb2:	d111      	bne.n	8009cd8 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009cb4:	78fb      	ldrb	r3, [r7, #3]
 8009cb6:	693a      	ldr	r2, [r7, #16]
 8009cb8:	2134      	movs	r1, #52	; 0x34
 8009cba:	fb01 f303 	mul.w	r3, r1, r3
 8009cbe:	4413      	add	r3, r2
 8009cc0:	3390      	adds	r3, #144	; 0x90
 8009cc2:	2208      	movs	r2, #8
 8009cc4:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009cc6:	2302      	movs	r3, #2
 8009cc8:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009cca:	e005      	b.n	8009cd8 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8009ccc:	bf00      	nop
 8009cce:	e004      	b.n	8009cda <USBH_MSC_RdWrProcess+0x194>
      break;
 8009cd0:	bf00      	nop
 8009cd2:	e002      	b.n	8009cda <USBH_MSC_RdWrProcess+0x194>
      break;
 8009cd4:	bf00      	nop
 8009cd6:	e000      	b.n	8009cda <USBH_MSC_RdWrProcess+0x194>
      break;
 8009cd8:	bf00      	nop

  }
  return error;
 8009cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3718      	adds	r7, #24
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b085      	sub	sp, #20
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	460b      	mov	r3, r1
 8009cee:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cf6:	69db      	ldr	r3, [r3, #28]
 8009cf8:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	2b0b      	cmp	r3, #11
 8009d02:	d10c      	bne.n	8009d1e <USBH_MSC_UnitIsReady+0x3a>
 8009d04:	78fb      	ldrb	r3, [r7, #3]
 8009d06:	68ba      	ldr	r2, [r7, #8]
 8009d08:	2134      	movs	r1, #52	; 0x34
 8009d0a:	fb01 f303 	mul.w	r3, r1, r3
 8009d0e:	4413      	add	r3, r2
 8009d10:	3391      	adds	r3, #145	; 0x91
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d102      	bne.n	8009d1e <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	73fb      	strb	r3, [r7, #15]
 8009d1c:	e001      	b.n	8009d22 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3714      	adds	r7, #20
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b086      	sub	sp, #24
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	460b      	mov	r3, r1
 8009d3a:	607a      	str	r2, [r7, #4]
 8009d3c:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d44:	69db      	ldr	r3, [r3, #28]
 8009d46:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	2b0b      	cmp	r3, #11
 8009d50:	d10d      	bne.n	8009d6e <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8009d52:	7afb      	ldrb	r3, [r7, #11]
 8009d54:	2234      	movs	r2, #52	; 0x34
 8009d56:	fb02 f303 	mul.w	r3, r2, r3
 8009d5a:	3390      	adds	r3, #144	; 0x90
 8009d5c:	697a      	ldr	r2, [r7, #20]
 8009d5e:	4413      	add	r3, r2
 8009d60:	2234      	movs	r2, #52	; 0x34
 8009d62:	4619      	mov	r1, r3
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f003 fb17 	bl	800d398 <memcpy>
    return USBH_OK;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	e000      	b.n	8009d70 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8009d6e:	2302      	movs	r3, #2
  }
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3718      	adds	r7, #24
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b088      	sub	sp, #32
 8009d7c:	af02      	add	r7, sp, #8
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	607a      	str	r2, [r7, #4]
 8009d82:	603b      	str	r3, [r7, #0]
 8009d84:	460b      	mov	r3, r1
 8009d86:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d8e:	69db      	ldr	r3, [r3, #28]
 8009d90:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009d98:	b2db      	uxtb	r3, r3
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d00e      	beq.n	8009dbc <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009da4:	2b0b      	cmp	r3, #11
 8009da6:	d109      	bne.n	8009dbc <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009da8:	7afb      	ldrb	r3, [r7, #11]
 8009daa:	697a      	ldr	r2, [r7, #20]
 8009dac:	2134      	movs	r1, #52	; 0x34
 8009dae:	fb01 f303 	mul.w	r3, r1, r3
 8009db2:	4413      	add	r3, r2
 8009db4:	3390      	adds	r3, #144	; 0x90
 8009db6:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d001      	beq.n	8009dc0 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8009dbc:	2302      	movs	r3, #2
 8009dbe:	e040      	b.n	8009e42 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	2206      	movs	r2, #6
 8009dc4:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8009dc6:	7afb      	ldrb	r3, [r7, #11]
 8009dc8:	697a      	ldr	r2, [r7, #20]
 8009dca:	2134      	movs	r1, #52	; 0x34
 8009dcc:	fb01 f303 	mul.w	r3, r1, r3
 8009dd0:	4413      	add	r3, r2
 8009dd2:	3390      	adds	r3, #144	; 0x90
 8009dd4:	2206      	movs	r2, #6
 8009dd6:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009dd8:	7afb      	ldrb	r3, [r7, #11]
 8009dda:	b29a      	uxth	r2, r3
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009de2:	7af9      	ldrb	r1, [r7, #11]
 8009de4:	6a3b      	ldr	r3, [r7, #32]
 8009de6:	9300      	str	r3, [sp, #0]
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	68f8      	ldr	r0, [r7, #12]
 8009dee:	f000 fd78 	bl	800a8e2 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009df8:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009dfa:	e016      	b.n	8009e2a <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	1ad2      	subs	r2, r2, r3
 8009e06:	6a3b      	ldr	r3, [r7, #32]
 8009e08:	f242 7110 	movw	r1, #10000	; 0x2710
 8009e0c:	fb01 f303 	mul.w	r3, r1, r3
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d805      	bhi.n	8009e20 <USBH_MSC_Read+0xa8>
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009e1a:	b2db      	uxtb	r3, r3
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d104      	bne.n	8009e2a <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	2201      	movs	r2, #1
 8009e24:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009e26:	2302      	movs	r3, #2
 8009e28:	e00b      	b.n	8009e42 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009e2a:	7afb      	ldrb	r3, [r7, #11]
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	68f8      	ldr	r0, [r7, #12]
 8009e30:	f7ff fe89 	bl	8009b46 <USBH_MSC_RdWrProcess>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d0e0      	beq.n	8009dfc <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8009e40:	2300      	movs	r3, #0
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3718      	adds	r7, #24
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}

08009e4a <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b088      	sub	sp, #32
 8009e4e:	af02      	add	r7, sp, #8
 8009e50:	60f8      	str	r0, [r7, #12]
 8009e52:	607a      	str	r2, [r7, #4]
 8009e54:	603b      	str	r3, [r7, #0]
 8009e56:	460b      	mov	r3, r1
 8009e58:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e60:	69db      	ldr	r3, [r3, #28]
 8009e62:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d00e      	beq.n	8009e8e <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009e76:	2b0b      	cmp	r3, #11
 8009e78:	d109      	bne.n	8009e8e <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009e7a:	7afb      	ldrb	r3, [r7, #11]
 8009e7c:	697a      	ldr	r2, [r7, #20]
 8009e7e:	2134      	movs	r1, #52	; 0x34
 8009e80:	fb01 f303 	mul.w	r3, r1, r3
 8009e84:	4413      	add	r3, r2
 8009e86:	3390      	adds	r3, #144	; 0x90
 8009e88:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	d001      	beq.n	8009e92 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8009e8e:	2302      	movs	r3, #2
 8009e90:	e040      	b.n	8009f14 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	2207      	movs	r2, #7
 8009e96:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8009e98:	7afb      	ldrb	r3, [r7, #11]
 8009e9a:	697a      	ldr	r2, [r7, #20]
 8009e9c:	2134      	movs	r1, #52	; 0x34
 8009e9e:	fb01 f303 	mul.w	r3, r1, r3
 8009ea2:	4413      	add	r3, r2
 8009ea4:	3390      	adds	r3, #144	; 0x90
 8009ea6:	2207      	movs	r2, #7
 8009ea8:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009eaa:	7afb      	ldrb	r3, [r7, #11]
 8009eac:	b29a      	uxth	r2, r3
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009eb4:	7af9      	ldrb	r1, [r7, #11]
 8009eb6:	6a3b      	ldr	r3, [r7, #32]
 8009eb8:	9300      	str	r3, [sp, #0]
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	68f8      	ldr	r0, [r7, #12]
 8009ec0:	f000 fca4 	bl	800a80c <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009eca:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009ecc:	e016      	b.n	8009efc <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	1ad2      	subs	r2, r2, r3
 8009ed8:	6a3b      	ldr	r3, [r7, #32]
 8009eda:	f242 7110 	movw	r1, #10000	; 0x2710
 8009ede:	fb01 f303 	mul.w	r3, r1, r3
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d805      	bhi.n	8009ef2 <USBH_MSC_Write+0xa8>
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d104      	bne.n	8009efc <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009ef8:	2302      	movs	r3, #2
 8009efa:	e00b      	b.n	8009f14 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009efc:	7afb      	ldrb	r3, [r7, #11]
 8009efe:	4619      	mov	r1, r3
 8009f00:	68f8      	ldr	r0, [r7, #12]
 8009f02:	f7ff fe20 	bl	8009b46 <USBH_MSC_RdWrProcess>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d0e0      	beq.n	8009ece <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8009f12:	2300      	movs	r3, #0
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3718      	adds	r7, #24
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b082      	sub	sp, #8
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2221      	movs	r2, #33	; 0x21
 8009f28:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	22ff      	movs	r2, #255	; 0xff
 8009f2e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8009f42:	2200      	movs	r2, #0
 8009f44:	2100      	movs	r1, #0
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f001 fea4 	bl	800bc94 <USBH_CtlReq>
 8009f4c:	4603      	mov	r3, r0
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3708      	adds	r7, #8
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8009f56:	b580      	push	{r7, lr}
 8009f58:	b082      	sub	sp, #8
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
 8009f5e:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	22a1      	movs	r2, #161	; 0xa1
 8009f64:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	22fe      	movs	r2, #254	; 0xfe
 8009f6a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2200      	movs	r2, #0
 8009f76:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8009f7e:	2201      	movs	r2, #1
 8009f80:	6839      	ldr	r1, [r7, #0]
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f001 fe86 	bl	800bc94 <USBH_CtlReq>
 8009f88:	4603      	mov	r3, r0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3708      	adds	r7, #8
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
	...

08009f94 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b085      	sub	sp, #20
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009fa2:	69db      	ldr	r3, [r3, #28]
 8009fa4:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	4a09      	ldr	r2, [pc, #36]	; (8009fd0 <USBH_MSC_BOT_Init+0x3c>)
 8009faa:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	4a09      	ldr	r2, [pc, #36]	; (8009fd4 <USBH_MSC_BOT_Init+0x40>)
 8009fb0:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8009fc2:	2300      	movs	r3, #0
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3714      	adds	r7, #20
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr
 8009fd0:	43425355 	.word	0x43425355
 8009fd4:	20304050 	.word	0x20304050

08009fd8 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b088      	sub	sp, #32
 8009fdc:	af02      	add	r7, sp, #8
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8009fec:	2301      	movs	r3, #1
 8009fee:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ffa:	69db      	ldr	r3, [r3, #28]
 8009ffc:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8009ffe:	2300      	movs	r3, #0
 800a000:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a008:	3b01      	subs	r3, #1
 800a00a:	2b0a      	cmp	r3, #10
 800a00c:	f200 819e 	bhi.w	800a34c <USBH_MSC_BOT_Process+0x374>
 800a010:	a201      	add	r2, pc, #4	; (adr r2, 800a018 <USBH_MSC_BOT_Process+0x40>)
 800a012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a016:	bf00      	nop
 800a018:	0800a045 	.word	0x0800a045
 800a01c:	0800a06d 	.word	0x0800a06d
 800a020:	0800a0d7 	.word	0x0800a0d7
 800a024:	0800a0f5 	.word	0x0800a0f5
 800a028:	0800a179 	.word	0x0800a179
 800a02c:	0800a19b 	.word	0x0800a19b
 800a030:	0800a233 	.word	0x0800a233
 800a034:	0800a24f 	.word	0x0800a24f
 800a038:	0800a2a1 	.word	0x0800a2a1
 800a03c:	0800a2d1 	.word	0x0800a2d1
 800a040:	0800a333 	.word	0x0800a333
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	78fa      	ldrb	r2, [r7, #3]
 800a048:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	2202      	movs	r2, #2
 800a050:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	795b      	ldrb	r3, [r3, #5]
 800a05e:	2201      	movs	r2, #1
 800a060:	9200      	str	r2, [sp, #0]
 800a062:	221f      	movs	r2, #31
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f002 f824 	bl	800c0b2 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800a06a:	e17e      	b.n	800a36a <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	795b      	ldrb	r3, [r3, #5]
 800a070:	4619      	mov	r1, r3
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f003 f878 	bl	800d168 <USBH_LL_GetURBState>
 800a078:	4603      	mov	r3, r0
 800a07a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a07c:	7d3b      	ldrb	r3, [r7, #20]
 800a07e:	2b01      	cmp	r3, #1
 800a080:	d118      	bne.n	800a0b4 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a086:	2b00      	cmp	r3, #0
 800a088:	d00f      	beq.n	800a0aa <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a090:	b25b      	sxtb	r3, r3
 800a092:	2b00      	cmp	r3, #0
 800a094:	da04      	bge.n	800a0a0 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	2203      	movs	r2, #3
 800a09a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a09e:	e157      	b.n	800a350 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	2205      	movs	r2, #5
 800a0a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a0a8:	e152      	b.n	800a350 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	2207      	movs	r2, #7
 800a0ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a0b2:	e14d      	b.n	800a350 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a0b4:	7d3b      	ldrb	r3, [r7, #20]
 800a0b6:	2b02      	cmp	r3, #2
 800a0b8:	d104      	bne.n	800a0c4 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a0c2:	e145      	b.n	800a350 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800a0c4:	7d3b      	ldrb	r3, [r7, #20]
 800a0c6:	2b05      	cmp	r3, #5
 800a0c8:	f040 8142 	bne.w	800a350 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	220a      	movs	r2, #10
 800a0d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a0d4:	e13c      	b.n	800a350 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	895a      	ldrh	r2, [r3, #10]
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	791b      	ldrb	r3, [r3, #4]
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f002 f809 	bl	800c0fc <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	2204      	movs	r2, #4
 800a0ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800a0f2:	e13a      	b.n	800a36a <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	791b      	ldrb	r3, [r3, #4]
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f003 f834 	bl	800d168 <USBH_LL_GetURBState>
 800a100:	4603      	mov	r3, r0
 800a102:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a104:	7d3b      	ldrb	r3, [r7, #20]
 800a106:	2b01      	cmp	r3, #1
 800a108:	d12d      	bne.n	800a166 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a10e:	693a      	ldr	r2, [r7, #16]
 800a110:	8952      	ldrh	r2, [r2, #10]
 800a112:	4293      	cmp	r3, r2
 800a114:	d910      	bls.n	800a138 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a11c:	693a      	ldr	r2, [r7, #16]
 800a11e:	8952      	ldrh	r2, [r2, #10]
 800a120:	441a      	add	r2, r3
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a12c:	693a      	ldr	r2, [r7, #16]
 800a12e:	8952      	ldrh	r2, [r2, #10]
 800a130:	1a9a      	subs	r2, r3, r2
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	65da      	str	r2, [r3, #92]	; 0x5c
 800a136:	e002      	b.n	800a13e <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	2200      	movs	r2, #0
 800a13c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a142:	2b00      	cmp	r3, #0
 800a144:	d00a      	beq.n	800a15c <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	895a      	ldrh	r2, [r3, #10]
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	791b      	ldrb	r3, [r3, #4]
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f001 ffd1 	bl	800c0fc <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800a15a:	e0fb      	b.n	800a354 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	2207      	movs	r2, #7
 800a160:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a164:	e0f6      	b.n	800a354 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800a166:	7d3b      	ldrb	r3, [r7, #20]
 800a168:	2b05      	cmp	r3, #5
 800a16a:	f040 80f3 	bne.w	800a354 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	2209      	movs	r2, #9
 800a172:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a176:	e0ed      	b.n	800a354 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	891a      	ldrh	r2, [r3, #8]
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	795b      	ldrb	r3, [r3, #5]
 800a186:	2001      	movs	r0, #1
 800a188:	9000      	str	r0, [sp, #0]
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f001 ff91 	bl	800c0b2 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	2206      	movs	r2, #6
 800a194:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a198:	e0e7      	b.n	800a36a <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	795b      	ldrb	r3, [r3, #5]
 800a19e:	4619      	mov	r1, r3
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f002 ffe1 	bl	800d168 <USBH_LL_GetURBState>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a1aa:	7d3b      	ldrb	r3, [r7, #20]
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d12f      	bne.n	800a210 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1b4:	693a      	ldr	r2, [r7, #16]
 800a1b6:	8912      	ldrh	r2, [r2, #8]
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d910      	bls.n	800a1de <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1c2:	693a      	ldr	r2, [r7, #16]
 800a1c4:	8912      	ldrh	r2, [r2, #8]
 800a1c6:	441a      	add	r2, r3
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1d2:	693a      	ldr	r2, [r7, #16]
 800a1d4:	8912      	ldrh	r2, [r2, #8]
 800a1d6:	1a9a      	subs	r2, r3, r2
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	65da      	str	r2, [r3, #92]	; 0x5c
 800a1dc:	e002      	b.n	800a1e4 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d00c      	beq.n	800a206 <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	891a      	ldrh	r2, [r3, #8]
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	795b      	ldrb	r3, [r3, #5]
 800a1fa:	2001      	movs	r0, #1
 800a1fc:	9000      	str	r0, [sp, #0]
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f001 ff57 	bl	800c0b2 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800a204:	e0a8      	b.n	800a358 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	2207      	movs	r2, #7
 800a20a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a20e:	e0a3      	b.n	800a358 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a210:	7d3b      	ldrb	r3, [r7, #20]
 800a212:	2b02      	cmp	r3, #2
 800a214:	d104      	bne.n	800a220 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	2205      	movs	r2, #5
 800a21a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a21e:	e09b      	b.n	800a358 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800a220:	7d3b      	ldrb	r3, [r7, #20]
 800a222:	2b05      	cmp	r3, #5
 800a224:	f040 8098 	bne.w	800a358 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	220a      	movs	r2, #10
 800a22c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a230:	e092      	b.n	800a358 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	791b      	ldrb	r3, [r3, #4]
 800a23c:	220d      	movs	r2, #13
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f001 ff5c 	bl	800c0fc <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	2208      	movs	r2, #8
 800a248:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a24c:	e08d      	b.n	800a36a <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	791b      	ldrb	r3, [r3, #4]
 800a252:	4619      	mov	r1, r3
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f002 ff87 	bl	800d168 <USBH_LL_GetURBState>
 800a25a:	4603      	mov	r3, r0
 800a25c:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800a25e:	7d3b      	ldrb	r3, [r7, #20]
 800a260:	2b01      	cmp	r3, #1
 800a262:	d115      	bne.n	800a290 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	2201      	movs	r2, #1
 800a268:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	2201      	movs	r2, #1
 800a270:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 f8a9 	bl	800a3cc <USBH_MSC_DecodeCSW>
 800a27a:	4603      	mov	r3, r0
 800a27c:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800a27e:	7d7b      	ldrb	r3, [r7, #21]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d102      	bne.n	800a28a <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800a284:	2300      	movs	r3, #0
 800a286:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800a288:	e068      	b.n	800a35c <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800a28a:	2302      	movs	r3, #2
 800a28c:	75fb      	strb	r3, [r7, #23]
      break;
 800a28e:	e065      	b.n	800a35c <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800a290:	7d3b      	ldrb	r3, [r7, #20]
 800a292:	2b05      	cmp	r3, #5
 800a294:	d162      	bne.n	800a35c <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	2209      	movs	r2, #9
 800a29a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a29e:	e05d      	b.n	800a35c <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800a2a0:	78fb      	ldrb	r3, [r7, #3]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 f864 	bl	800a374 <USBH_MSC_BOT_Abort>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a2b0:	7dbb      	ldrb	r3, [r7, #22]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d104      	bne.n	800a2c0 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	2207      	movs	r2, #7
 800a2ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800a2be:	e04f      	b.n	800a360 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800a2c0:	7dbb      	ldrb	r3, [r7, #22]
 800a2c2:	2b04      	cmp	r3, #4
 800a2c4:	d14c      	bne.n	800a360 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	220b      	movs	r2, #11
 800a2ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a2ce:	e047      	b.n	800a360 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800a2d0:	78fb      	ldrb	r3, [r7, #3]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 f84c 	bl	800a374 <USBH_MSC_BOT_Abort>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a2e0:	7dbb      	ldrb	r3, [r7, #22]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d11d      	bne.n	800a322 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	795b      	ldrb	r3, [r3, #5]
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f002 ff95 	bl	800d21c <USBH_LL_GetToggle>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	7959      	ldrb	r1, [r3, #5]
 800a2fa:	7bfb      	ldrb	r3, [r7, #15]
 800a2fc:	f1c3 0301 	rsb	r3, r3, #1
 800a300:	b2db      	uxtb	r3, r3
 800a302:	461a      	mov	r2, r3
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f002 ff59 	bl	800d1bc <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	791b      	ldrb	r3, [r3, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	4619      	mov	r1, r3
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f002 ff52 	bl	800d1bc <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	2209      	movs	r2, #9
 800a31c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800a320:	e020      	b.n	800a364 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800a322:	7dbb      	ldrb	r3, [r7, #22]
 800a324:	2b04      	cmp	r3, #4
 800a326:	d11d      	bne.n	800a364 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	220b      	movs	r2, #11
 800a32c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a330:	e018      	b.n	800a364 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f7ff fdf2 	bl	8009f1c <USBH_MSC_BOT_REQ_Reset>
 800a338:	4603      	mov	r3, r0
 800a33a:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800a33c:	7dfb      	ldrb	r3, [r7, #23]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d112      	bne.n	800a368 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	2201      	movs	r2, #1
 800a346:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800a34a:	e00d      	b.n	800a368 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800a34c:	bf00      	nop
 800a34e:	e00c      	b.n	800a36a <USBH_MSC_BOT_Process+0x392>
      break;
 800a350:	bf00      	nop
 800a352:	e00a      	b.n	800a36a <USBH_MSC_BOT_Process+0x392>
      break;
 800a354:	bf00      	nop
 800a356:	e008      	b.n	800a36a <USBH_MSC_BOT_Process+0x392>
      break;
 800a358:	bf00      	nop
 800a35a:	e006      	b.n	800a36a <USBH_MSC_BOT_Process+0x392>
      break;
 800a35c:	bf00      	nop
 800a35e:	e004      	b.n	800a36a <USBH_MSC_BOT_Process+0x392>
      break;
 800a360:	bf00      	nop
 800a362:	e002      	b.n	800a36a <USBH_MSC_BOT_Process+0x392>
      break;
 800a364:	bf00      	nop
 800a366:	e000      	b.n	800a36a <USBH_MSC_BOT_Process+0x392>
      break;
 800a368:	bf00      	nop
  }
  return status;
 800a36a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3718      	adds	r7, #24
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b084      	sub	sp, #16
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	460b      	mov	r3, r1
 800a37e:	70fb      	strb	r3, [r7, #3]
 800a380:	4613      	mov	r3, r2
 800a382:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800a384:	2302      	movs	r3, #2
 800a386:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a38e:	69db      	ldr	r3, [r3, #28]
 800a390:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800a392:	78bb      	ldrb	r3, [r7, #2]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d002      	beq.n	800a39e <USBH_MSC_BOT_Abort+0x2a>
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d009      	beq.n	800a3b0 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800a39c:	e011      	b.n	800a3c2 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	79db      	ldrb	r3, [r3, #7]
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f001 f9a8 	bl	800b6fa <USBH_ClrFeature>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	73fb      	strb	r3, [r7, #15]
      break;
 800a3ae:	e008      	b.n	800a3c2 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	799b      	ldrb	r3, [r3, #6]
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f001 f99f 	bl	800b6fa <USBH_ClrFeature>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	73fb      	strb	r3, [r7, #15]
      break;
 800a3c0:	bf00      	nop
  }
  return status;
 800a3c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3710      	adds	r7, #16
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3da:	69db      	ldr	r3, [r3, #28]
 800a3dc:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	791b      	ldrb	r3, [r3, #4]
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f002 fe2b 	bl	800d044 <USBH_LL_GetLastXferSize>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2b0d      	cmp	r3, #13
 800a3f2:	d002      	beq.n	800a3fa <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800a3f4:	2302      	movs	r3, #2
 800a3f6:	73fb      	strb	r3, [r7, #15]
 800a3f8:	e024      	b.n	800a444 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3fe:	4a14      	ldr	r2, [pc, #80]	; (800a450 <USBH_MSC_DecodeCSW+0x84>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d11d      	bne.n	800a440 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d119      	bne.n	800a444 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a416:	2b00      	cmp	r3, #0
 800a418:	d102      	bne.n	800a420 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800a41a:	2300      	movs	r3, #0
 800a41c:	73fb      	strb	r3, [r7, #15]
 800a41e:	e011      	b.n	800a444 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a426:	2b01      	cmp	r3, #1
 800a428:	d102      	bne.n	800a430 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800a42a:	2301      	movs	r3, #1
 800a42c:	73fb      	strb	r3, [r7, #15]
 800a42e:	e009      	b.n	800a444 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a436:	2b02      	cmp	r3, #2
 800a438:	d104      	bne.n	800a444 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800a43a:	2302      	movs	r3, #2
 800a43c:	73fb      	strb	r3, [r7, #15]
 800a43e:	e001      	b.n	800a444 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800a440:	2302      	movs	r3, #2
 800a442:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800a444:	7bfb      	ldrb	r3, [r7, #15]
}
 800a446:	4618      	mov	r0, r3
 800a448:	3710      	adds	r7, #16
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop
 800a450:	53425355 	.word	0x53425355

0800a454 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b084      	sub	sp, #16
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	460b      	mov	r3, r1
 800a45e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a460:	2302      	movs	r3, #2
 800a462:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a46a:	69db      	ldr	r3, [r3, #28]
 800a46c:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a474:	2b01      	cmp	r3, #1
 800a476:	d002      	beq.n	800a47e <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800a478:	2b02      	cmp	r3, #2
 800a47a:	d021      	beq.n	800a4c0 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a47c:	e028      	b.n	800a4d0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	2200      	movs	r2, #0
 800a482:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	2200      	movs	r2, #0
 800a488:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	220a      	movs	r2, #10
 800a490:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	3363      	adds	r3, #99	; 0x63
 800a498:	2210      	movs	r2, #16
 800a49a:	2100      	movs	r1, #0
 800a49c:	4618      	mov	r0, r3
 800a49e:	f002 ff89 	bl	800d3b4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	2202      	movs	r2, #2
 800a4b6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	73fb      	strb	r3, [r7, #15]
      break;
 800a4be:	e007      	b.n	800a4d0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a4c0:	78fb      	ldrb	r3, [r7, #3]
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f7ff fd87 	bl	8009fd8 <USBH_MSC_BOT_Process>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	73fb      	strb	r3, [r7, #15]
      break;
 800a4ce:	bf00      	nop
  }

  return error;
 800a4d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	b086      	sub	sp, #24
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	60f8      	str	r0, [r7, #12]
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	607a      	str	r2, [r7, #4]
 800a4e6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4f2:	69db      	ldr	r3, [r3, #28]
 800a4f4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d002      	beq.n	800a506 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800a500:	2b02      	cmp	r3, #2
 800a502:	d027      	beq.n	800a554 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800a504:	e05f      	b.n	800a5c6 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	2208      	movs	r2, #8
 800a50a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	2280      	movs	r2, #128	; 0x80
 800a510:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	220a      	movs	r2, #10
 800a518:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	3363      	adds	r3, #99	; 0x63
 800a520:	2210      	movs	r2, #16
 800a522:	2100      	movs	r1, #0
 800a524:	4618      	mov	r0, r3
 800a526:	f002 ff45 	bl	800d3b4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	2225      	movs	r2, #37	; 0x25
 800a52e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	2201      	movs	r2, #1
 800a536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	2202      	movs	r2, #2
 800a53e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	f103 0210 	add.w	r2, r3, #16
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a54e:	2301      	movs	r3, #1
 800a550:	75fb      	strb	r3, [r7, #23]
      break;
 800a552:	e038      	b.n	800a5c6 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a554:	7afb      	ldrb	r3, [r7, #11]
 800a556:	4619      	mov	r1, r3
 800a558:	68f8      	ldr	r0, [r7, #12]
 800a55a:	f7ff fd3d 	bl	8009fd8 <USBH_MSC_BOT_Process>
 800a55e:	4603      	mov	r3, r0
 800a560:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a562:	7dfb      	ldrb	r3, [r7, #23]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d12d      	bne.n	800a5c4 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a56e:	3303      	adds	r3, #3
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	461a      	mov	r2, r3
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a57a:	3302      	adds	r3, #2
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	021b      	lsls	r3, r3, #8
 800a580:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a588:	3301      	adds	r3, #1
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a58e:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	061b      	lsls	r3, r3, #24
 800a59a:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5a6:	3307      	adds	r3, #7
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	b29a      	uxth	r2, r3
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5b2:	3306      	adds	r3, #6
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	021b      	lsls	r3, r3, #8
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	b29a      	uxth	r2, r3
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	809a      	strh	r2, [r3, #4]
      break;
 800a5c4:	bf00      	nop
  }

  return error;
 800a5c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3718      	adds	r7, #24
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b086      	sub	sp, #24
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	460b      	mov	r3, r1
 800a5da:	607a      	str	r2, [r7, #4]
 800a5dc:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800a5de:	2302      	movs	r3, #2
 800a5e0:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a5e8:	69db      	ldr	r3, [r3, #28]
 800a5ea:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	d002      	beq.n	800a5fc <USBH_MSC_SCSI_Inquiry+0x2c>
 800a5f6:	2b02      	cmp	r3, #2
 800a5f8:	d03d      	beq.n	800a676 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800a5fa:	e089      	b.n	800a710 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	2224      	movs	r2, #36	; 0x24
 800a600:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	2280      	movs	r2, #128	; 0x80
 800a606:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	220a      	movs	r2, #10
 800a60e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	3363      	adds	r3, #99	; 0x63
 800a616:	220a      	movs	r2, #10
 800a618:	2100      	movs	r1, #0
 800a61a:	4618      	mov	r0, r3
 800a61c:	f002 feca 	bl	800d3b4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	2212      	movs	r2, #18
 800a624:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a628:	7afb      	ldrb	r3, [r7, #11]
 800a62a:	015b      	lsls	r3, r3, #5
 800a62c:	b2da      	uxtb	r2, r3
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	2200      	movs	r2, #0
 800a638:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	2200      	movs	r2, #0
 800a640:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	2224      	movs	r2, #36	; 0x24
 800a648:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	2200      	movs	r2, #0
 800a650:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	2201      	movs	r2, #1
 800a658:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	2202      	movs	r2, #2
 800a660:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	f103 0210 	add.w	r2, r3, #16
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a670:	2301      	movs	r3, #1
 800a672:	75fb      	strb	r3, [r7, #23]
      break;
 800a674:	e04c      	b.n	800a710 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a676:	7afb      	ldrb	r3, [r7, #11]
 800a678:	4619      	mov	r1, r3
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	f7ff fcac 	bl	8009fd8 <USBH_MSC_BOT_Process>
 800a680:	4603      	mov	r3, r0
 800a682:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a684:	7dfb      	ldrb	r3, [r7, #23]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d141      	bne.n	800a70e <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800a68a:	2222      	movs	r2, #34	; 0x22
 800a68c:	2100      	movs	r1, #0
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f002 fe90 	bl	800d3b4 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	f003 031f 	and.w	r3, r3, #31
 800a6a0:	b2da      	uxtb	r2, r3
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	095b      	lsrs	r3, r3, #5
 800a6b0:	b2da      	uxtb	r2, r3
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6bc:	3301      	adds	r3, #1
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	b25b      	sxtb	r3, r3
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	da03      	bge.n	800a6ce <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	709a      	strb	r2, [r3, #2]
 800a6cc:	e002      	b.n	800a6d4 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	1cd8      	adds	r0, r3, #3
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6de:	3308      	adds	r3, #8
 800a6e0:	2208      	movs	r2, #8
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	f002 fe58 	bl	800d398 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f103 000c 	add.w	r0, r3, #12
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6f4:	3310      	adds	r3, #16
 800a6f6:	2210      	movs	r2, #16
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	f002 fe4d 	bl	800d398 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	331d      	adds	r3, #29
 800a702:	693a      	ldr	r2, [r7, #16]
 800a704:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800a708:	3220      	adds	r2, #32
 800a70a:	6812      	ldr	r2, [r2, #0]
 800a70c:	601a      	str	r2, [r3, #0]
      break;
 800a70e:	bf00      	nop
  }

  return error;
 800a710:	7dfb      	ldrb	r3, [r7, #23]
}
 800a712:	4618      	mov	r0, r3
 800a714:	3718      	adds	r7, #24
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800a71a:	b580      	push	{r7, lr}
 800a71c:	b086      	sub	sp, #24
 800a71e:	af00      	add	r7, sp, #0
 800a720:	60f8      	str	r0, [r7, #12]
 800a722:	460b      	mov	r3, r1
 800a724:	607a      	str	r2, [r7, #4]
 800a726:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a728:	2302      	movs	r3, #2
 800a72a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a732:	69db      	ldr	r3, [r3, #28]
 800a734:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d002      	beq.n	800a746 <USBH_MSC_SCSI_RequestSense+0x2c>
 800a740:	2b02      	cmp	r3, #2
 800a742:	d03d      	beq.n	800a7c0 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800a744:	e05d      	b.n	800a802 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	220e      	movs	r2, #14
 800a74a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	2280      	movs	r2, #128	; 0x80
 800a750:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	220a      	movs	r2, #10
 800a758:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	3363      	adds	r3, #99	; 0x63
 800a760:	2210      	movs	r2, #16
 800a762:	2100      	movs	r1, #0
 800a764:	4618      	mov	r0, r3
 800a766:	f002 fe25 	bl	800d3b4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	2203      	movs	r2, #3
 800a76e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a772:	7afb      	ldrb	r3, [r7, #11]
 800a774:	015b      	lsls	r3, r3, #5
 800a776:	b2da      	uxtb	r2, r3
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	2200      	movs	r2, #0
 800a782:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	2200      	movs	r2, #0
 800a78a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	220e      	movs	r2, #14
 800a792:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	2200      	movs	r2, #0
 800a79a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	2202      	movs	r2, #2
 800a7aa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	f103 0210 	add.w	r2, r3, #16
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	75fb      	strb	r3, [r7, #23]
      break;
 800a7be:	e020      	b.n	800a802 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a7c0:	7afb      	ldrb	r3, [r7, #11]
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	68f8      	ldr	r0, [r7, #12]
 800a7c6:	f7ff fc07 	bl	8009fd8 <USBH_MSC_BOT_Process>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a7ce:	7dfb      	ldrb	r3, [r7, #23]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d115      	bne.n	800a800 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7da:	3302      	adds	r3, #2
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	f003 030f 	and.w	r3, r3, #15
 800a7e2:	b2da      	uxtb	r2, r3
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7ee:	7b1a      	ldrb	r2, [r3, #12]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7fa:	7b5a      	ldrb	r2, [r3, #13]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	709a      	strb	r2, [r3, #2]
      break;
 800a800:	bf00      	nop
  }

  return error;
 800a802:	7dfb      	ldrb	r3, [r7, #23]
}
 800a804:	4618      	mov	r0, r3
 800a806:	3718      	adds	r7, #24
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b086      	sub	sp, #24
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	607a      	str	r2, [r7, #4]
 800a816:	603b      	str	r3, [r7, #0]
 800a818:	460b      	mov	r3, r1
 800a81a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a81c:	2302      	movs	r3, #2
 800a81e:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a826:	69db      	ldr	r3, [r3, #28]
 800a828:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a830:	2b01      	cmp	r3, #1
 800a832:	d002      	beq.n	800a83a <USBH_MSC_SCSI_Write+0x2e>
 800a834:	2b02      	cmp	r3, #2
 800a836:	d047      	beq.n	800a8c8 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a838:	e04e      	b.n	800a8d8 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a840:	461a      	mov	r2, r3
 800a842:	6a3b      	ldr	r3, [r7, #32]
 800a844:	fb03 f202 	mul.w	r2, r3, r2
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	2200      	movs	r2, #0
 800a850:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	220a      	movs	r2, #10
 800a858:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	3363      	adds	r3, #99	; 0x63
 800a860:	2210      	movs	r2, #16
 800a862:	2100      	movs	r1, #0
 800a864:	4618      	mov	r0, r3
 800a866:	f002 fda5 	bl	800d3b4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	222a      	movs	r2, #42	; 0x2a
 800a86e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a872:	79fa      	ldrb	r2, [r7, #7]
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a87a:	79ba      	ldrb	r2, [r7, #6]
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a882:	797a      	ldrb	r2, [r7, #5]
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a88a:	1d3b      	adds	r3, r7, #4
 800a88c:	781a      	ldrb	r2, [r3, #0]
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a894:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a89e:	f107 0320 	add.w	r3, r7, #32
 800a8a2:	781a      	ldrb	r2, [r3, #0]
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	2202      	movs	r2, #2
 800a8b6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	683a      	ldr	r2, [r7, #0]
 800a8be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	75fb      	strb	r3, [r7, #23]
      break;
 800a8c6:	e007      	b.n	800a8d8 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a8c8:	7afb      	ldrb	r3, [r7, #11]
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	68f8      	ldr	r0, [r7, #12]
 800a8ce:	f7ff fb83 	bl	8009fd8 <USBH_MSC_BOT_Process>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	75fb      	strb	r3, [r7, #23]
      break;
 800a8d6:	bf00      	nop
  }

  return error;
 800a8d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3718      	adds	r7, #24
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}

0800a8e2 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800a8e2:	b580      	push	{r7, lr}
 800a8e4:	b086      	sub	sp, #24
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	60f8      	str	r0, [r7, #12]
 800a8ea:	607a      	str	r2, [r7, #4]
 800a8ec:	603b      	str	r3, [r7, #0]
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a8f2:	2302      	movs	r3, #2
 800a8f4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8fc:	69db      	ldr	r3, [r3, #28]
 800a8fe:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a906:	2b01      	cmp	r3, #1
 800a908:	d002      	beq.n	800a910 <USBH_MSC_SCSI_Read+0x2e>
 800a90a:	2b02      	cmp	r3, #2
 800a90c:	d047      	beq.n	800a99e <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a90e:	e04e      	b.n	800a9ae <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a916:	461a      	mov	r2, r3
 800a918:	6a3b      	ldr	r3, [r7, #32]
 800a91a:	fb03 f202 	mul.w	r2, r3, r2
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	2280      	movs	r2, #128	; 0x80
 800a926:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	220a      	movs	r2, #10
 800a92e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	3363      	adds	r3, #99	; 0x63
 800a936:	2210      	movs	r2, #16
 800a938:	2100      	movs	r1, #0
 800a93a:	4618      	mov	r0, r3
 800a93c:	f002 fd3a 	bl	800d3b4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	2228      	movs	r2, #40	; 0x28
 800a944:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a948:	79fa      	ldrb	r2, [r7, #7]
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a950:	79ba      	ldrb	r2, [r7, #6]
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a958:	797a      	ldrb	r2, [r7, #5]
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a960:	1d3b      	adds	r3, r7, #4
 800a962:	781a      	ldrb	r2, [r3, #0]
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a96a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a974:	f107 0320 	add.w	r3, r7, #32
 800a978:	781a      	ldrb	r2, [r3, #0]
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	2201      	movs	r2, #1
 800a984:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	2202      	movs	r2, #2
 800a98c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	683a      	ldr	r2, [r7, #0]
 800a994:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a998:	2301      	movs	r3, #1
 800a99a:	75fb      	strb	r3, [r7, #23]
      break;
 800a99c:	e007      	b.n	800a9ae <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a99e:	7afb      	ldrb	r3, [r7, #11]
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	f7ff fb18 	bl	8009fd8 <USBH_MSC_BOT_Process>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	75fb      	strb	r3, [r7, #23]
      break;
 800a9ac:	bf00      	nop
  }

  return error;
 800a9ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3718      	adds	r7, #24
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b084      	sub	sp, #16
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	60b9      	str	r1, [r7, #8]
 800a9c2:	4613      	mov	r3, r2
 800a9c4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d101      	bne.n	800a9d0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a9cc:	2302      	movs	r3, #2
 800a9ce:	e029      	b.n	800aa24 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	79fa      	ldrb	r2, [r7, #7]
 800a9d4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a9e8:	68f8      	ldr	r0, [r7, #12]
 800a9ea:	f000 f81f 	bl	800aa2c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	2200      	movs	r2, #0
 800aa02:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d003      	beq.n	800aa1c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	68ba      	ldr	r2, [r7, #8]
 800aa18:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	f002 fa5d 	bl	800cedc <USBH_LL_Init>

  return USBH_OK;
 800aa22:	2300      	movs	r3, #0
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3710      	adds	r7, #16
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b085      	sub	sp, #20
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800aa34:	2300      	movs	r3, #0
 800aa36:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800aa38:	2300      	movs	r3, #0
 800aa3a:	60fb      	str	r3, [r7, #12]
 800aa3c:	e009      	b.n	800aa52 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	33e0      	adds	r3, #224	; 0xe0
 800aa44:	009b      	lsls	r3, r3, #2
 800aa46:	4413      	add	r3, r2
 800aa48:	2200      	movs	r2, #0
 800aa4a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	3301      	adds	r3, #1
 800aa50:	60fb      	str	r3, [r7, #12]
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2b0f      	cmp	r3, #15
 800aa56:	d9f2      	bls.n	800aa3e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800aa58:	2300      	movs	r3, #0
 800aa5a:	60fb      	str	r3, [r7, #12]
 800aa5c:	e009      	b.n	800aa72 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	4413      	add	r3, r2
 800aa64:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800aa68:	2200      	movs	r2, #0
 800aa6a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	3301      	adds	r3, #1
 800aa70:	60fb      	str	r3, [r7, #12]
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa78:	d3f1      	bcc.n	800aa5e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2200      	movs	r2, #0
 800aa84:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2201      	movs	r2, #1
 800aa8a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2201      	movs	r2, #1
 800aa98:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2240      	movs	r2, #64	; 0x40
 800aa9e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2201      	movs	r2, #1
 800aab2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2200      	movs	r2, #0
 800aaba:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2200      	movs	r2, #0
 800aac2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800aac6:	2300      	movs	r3, #0
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3714      	adds	r7, #20
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr

0800aad4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b085      	sub	sp, #20
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800aade:	2300      	movs	r3, #0
 800aae0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d016      	beq.n	800ab16 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d10e      	bne.n	800ab10 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800aaf8:	1c59      	adds	r1, r3, #1
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	33de      	adds	r3, #222	; 0xde
 800ab04:	6839      	ldr	r1, [r7, #0]
 800ab06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	73fb      	strb	r3, [r7, #15]
 800ab0e:	e004      	b.n	800ab1a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800ab10:	2302      	movs	r3, #2
 800ab12:	73fb      	strb	r3, [r7, #15]
 800ab14:	e001      	b.n	800ab1a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ab16:	2302      	movs	r3, #2
 800ab18:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ab1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3714      	adds	r7, #20
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr

0800ab28 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b085      	sub	sp, #20
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	460b      	mov	r3, r1
 800ab32:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800ab34:	2300      	movs	r3, #0
 800ab36:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800ab3e:	78fa      	ldrb	r2, [r7, #3]
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d204      	bcs.n	800ab4e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	78fa      	ldrb	r2, [r7, #3]
 800ab48:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800ab4c:	e001      	b.n	800ab52 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800ab4e:	2302      	movs	r3, #2
 800ab50:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ab52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3714      	adds	r7, #20
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr

0800ab60 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b087      	sub	sp, #28
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	4608      	mov	r0, r1
 800ab6a:	4611      	mov	r1, r2
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	4603      	mov	r3, r0
 800ab70:	70fb      	strb	r3, [r7, #3]
 800ab72:	460b      	mov	r3, r1
 800ab74:	70bb      	strb	r3, [r7, #2]
 800ab76:	4613      	mov	r3, r2
 800ab78:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ab88:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ab8a:	e025      	b.n	800abd8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ab8c:	7dfb      	ldrb	r3, [r7, #23]
 800ab8e:	221a      	movs	r2, #26
 800ab90:	fb02 f303 	mul.w	r3, r2, r3
 800ab94:	3308      	adds	r3, #8
 800ab96:	68fa      	ldr	r2, [r7, #12]
 800ab98:	4413      	add	r3, r2
 800ab9a:	3302      	adds	r3, #2
 800ab9c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	795b      	ldrb	r3, [r3, #5]
 800aba2:	78fa      	ldrb	r2, [r7, #3]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d002      	beq.n	800abae <USBH_FindInterface+0x4e>
 800aba8:	78fb      	ldrb	r3, [r7, #3]
 800abaa:	2bff      	cmp	r3, #255	; 0xff
 800abac:	d111      	bne.n	800abd2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800abb2:	78ba      	ldrb	r2, [r7, #2]
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d002      	beq.n	800abbe <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800abb8:	78bb      	ldrb	r3, [r7, #2]
 800abba:	2bff      	cmp	r3, #255	; 0xff
 800abbc:	d109      	bne.n	800abd2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800abc2:	787a      	ldrb	r2, [r7, #1]
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d002      	beq.n	800abce <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800abc8:	787b      	ldrb	r3, [r7, #1]
 800abca:	2bff      	cmp	r3, #255	; 0xff
 800abcc:	d101      	bne.n	800abd2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800abce:	7dfb      	ldrb	r3, [r7, #23]
 800abd0:	e006      	b.n	800abe0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800abd2:	7dfb      	ldrb	r3, [r7, #23]
 800abd4:	3301      	adds	r3, #1
 800abd6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800abd8:	7dfb      	ldrb	r3, [r7, #23]
 800abda:	2b01      	cmp	r3, #1
 800abdc:	d9d6      	bls.n	800ab8c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800abde:	23ff      	movs	r3, #255	; 0xff
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	371c      	adds	r7, #28
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr

0800abec <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b082      	sub	sp, #8
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f002 f9ad 	bl	800cf54 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800abfa:	2101      	movs	r1, #1
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f002 fac6 	bl	800d18e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ac02:	2300      	movs	r3, #0
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3708      	adds	r7, #8
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b088      	sub	sp, #32
 800ac10:	af04      	add	r7, sp, #16
 800ac12:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ac14:	2302      	movs	r3, #2
 800ac16:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d102      	bne.n	800ac2e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2203      	movs	r2, #3
 800ac2c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	2b0b      	cmp	r3, #11
 800ac36:	f200 81be 	bhi.w	800afb6 <USBH_Process+0x3aa>
 800ac3a:	a201      	add	r2, pc, #4	; (adr r2, 800ac40 <USBH_Process+0x34>)
 800ac3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac40:	0800ac71 	.word	0x0800ac71
 800ac44:	0800aca3 	.word	0x0800aca3
 800ac48:	0800ad0b 	.word	0x0800ad0b
 800ac4c:	0800af51 	.word	0x0800af51
 800ac50:	0800afb7 	.word	0x0800afb7
 800ac54:	0800adaf 	.word	0x0800adaf
 800ac58:	0800aef7 	.word	0x0800aef7
 800ac5c:	0800ade5 	.word	0x0800ade5
 800ac60:	0800ae05 	.word	0x0800ae05
 800ac64:	0800ae25 	.word	0x0800ae25
 800ac68:	0800ae69 	.word	0x0800ae69
 800ac6c:	0800af39 	.word	0x0800af39
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	f000 819e 	beq.w	800afba <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2201      	movs	r2, #1
 800ac82:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ac84:	20c8      	movs	r0, #200	; 0xc8
 800ac86:	f002 faf9 	bl	800d27c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f002 f9bf 	bl	800d00e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2200      	movs	r2, #0
 800ac94:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800aca0:	e18b      	b.n	800afba <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d107      	bne.n	800acbc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2200      	movs	r2, #0
 800acb0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2202      	movs	r2, #2
 800acb8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800acba:	e18d      	b.n	800afd8 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800acc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800acc6:	d914      	bls.n	800acf2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800acce:	3301      	adds	r3, #1
 800acd0:	b2da      	uxtb	r2, r3
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800acde:	2b03      	cmp	r3, #3
 800ace0:	d903      	bls.n	800acea <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	220d      	movs	r2, #13
 800ace6:	701a      	strb	r2, [r3, #0]
      break;
 800ace8:	e176      	b.n	800afd8 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2200      	movs	r2, #0
 800acee:	701a      	strb	r2, [r3, #0]
      break;
 800acf0:	e172      	b.n	800afd8 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800acf8:	f103 020a 	add.w	r2, r3, #10
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800ad02:	200a      	movs	r0, #10
 800ad04:	f002 faba 	bl	800d27c <USBH_Delay>
      break;
 800ad08:	e166      	b.n	800afd8 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d005      	beq.n	800ad20 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad1a:	2104      	movs	r1, #4
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ad20:	2064      	movs	r0, #100	; 0x64
 800ad22:	f002 faab 	bl	800d27c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f002 f94a 	bl	800cfc0 <USBH_LL_GetSpeed>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	461a      	mov	r2, r3
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2205      	movs	r2, #5
 800ad3a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ad3c:	2100      	movs	r1, #0
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f001 fa29 	bl	800c196 <USBH_AllocPipe>
 800ad44:	4603      	mov	r3, r0
 800ad46:	461a      	mov	r2, r3
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ad4c:	2180      	movs	r1, #128	; 0x80
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f001 fa21 	bl	800c196 <USBH_AllocPipe>
 800ad54:	4603      	mov	r3, r0
 800ad56:	461a      	mov	r2, r3
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	7919      	ldrb	r1, [r3, #4]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ad6c:	687a      	ldr	r2, [r7, #4]
 800ad6e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ad70:	b292      	uxth	r2, r2
 800ad72:	9202      	str	r2, [sp, #8]
 800ad74:	2200      	movs	r2, #0
 800ad76:	9201      	str	r2, [sp, #4]
 800ad78:	9300      	str	r3, [sp, #0]
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	2280      	movs	r2, #128	; 0x80
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f001 f9da 	bl	800c138 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	7959      	ldrb	r1, [r3, #5]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ad98:	b292      	uxth	r2, r2
 800ad9a:	9202      	str	r2, [sp, #8]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	9201      	str	r2, [sp, #4]
 800ada0:	9300      	str	r3, [sp, #0]
 800ada2:	4603      	mov	r3, r0
 800ada4:	2200      	movs	r2, #0
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f001 f9c6 	bl	800c138 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800adac:	e114      	b.n	800afd8 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f000 f918 	bl	800afe4 <USBH_HandleEnum>
 800adb4:	4603      	mov	r3, r0
 800adb6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800adb8:	7bbb      	ldrb	r3, [r7, #14]
 800adba:	b2db      	uxtb	r3, r3
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	f040 80fe 	bne.w	800afbe <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2200      	movs	r2, #0
 800adc6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800add0:	2b01      	cmp	r3, #1
 800add2:	d103      	bne.n	800addc <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2208      	movs	r2, #8
 800add8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800adda:	e0f0      	b.n	800afbe <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2207      	movs	r2, #7
 800ade0:	701a      	strb	r2, [r3, #0]
      break;
 800ade2:	e0ec      	b.n	800afbe <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800adea:	2b00      	cmp	r3, #0
 800adec:	f000 80e9 	beq.w	800afc2 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800adf6:	2101      	movs	r1, #1
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2208      	movs	r2, #8
 800ae00:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800ae02:	e0de      	b.n	800afc2 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 fc2c 	bl	800b66c <USBH_SetCfg>
 800ae14:	4603      	mov	r3, r0
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	f040 80d5 	bne.w	800afc6 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2209      	movs	r2, #9
 800ae20:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ae22:	e0d0      	b.n	800afc6 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ae2a:	f003 0320 	and.w	r3, r3, #32
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d016      	beq.n	800ae60 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800ae32:	2101      	movs	r1, #1
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f000 fc3c 	bl	800b6b2 <USBH_SetFeature>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ae3e:	7bbb      	ldrb	r3, [r7, #14]
 800ae40:	b2db      	uxtb	r3, r3
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d103      	bne.n	800ae4e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	220a      	movs	r2, #10
 800ae4a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ae4c:	e0bd      	b.n	800afca <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800ae4e:	7bbb      	ldrb	r3, [r7, #14]
 800ae50:	b2db      	uxtb	r3, r3
 800ae52:	2b03      	cmp	r3, #3
 800ae54:	f040 80b9 	bne.w	800afca <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	220a      	movs	r2, #10
 800ae5c:	701a      	strb	r2, [r3, #0]
      break;
 800ae5e:	e0b4      	b.n	800afca <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	220a      	movs	r2, #10
 800ae64:	701a      	strb	r2, [r3, #0]
      break;
 800ae66:	e0b0      	b.n	800afca <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	f000 80ad 	beq.w	800afce <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2200      	movs	r2, #0
 800ae78:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	73fb      	strb	r3, [r7, #15]
 800ae80:	e016      	b.n	800aeb0 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ae82:	7bfa      	ldrb	r2, [r7, #15]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	32de      	adds	r2, #222	; 0xde
 800ae88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae8c:	791a      	ldrb	r2, [r3, #4]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d108      	bne.n	800aeaa <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800ae98:	7bfa      	ldrb	r2, [r7, #15]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	32de      	adds	r2, #222	; 0xde
 800ae9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800aea8:	e005      	b.n	800aeb6 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800aeaa:	7bfb      	ldrb	r3, [r7, #15]
 800aeac:	3301      	adds	r3, #1
 800aeae:	73fb      	strb	r3, [r7, #15]
 800aeb0:	7bfb      	ldrb	r3, [r7, #15]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d0e5      	beq.n	800ae82 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d016      	beq.n	800aeee <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aec6:	689b      	ldr	r3, [r3, #8]
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	4798      	blx	r3
 800aecc:	4603      	mov	r3, r0
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d109      	bne.n	800aee6 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2206      	movs	r2, #6
 800aed6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aede:	2103      	movs	r1, #3
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aee4:	e073      	b.n	800afce <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	220d      	movs	r2, #13
 800aeea:	701a      	strb	r2, [r3, #0]
      break;
 800aeec:	e06f      	b.n	800afce <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	220d      	movs	r2, #13
 800aef2:	701a      	strb	r2, [r3, #0]
      break;
 800aef4:	e06b      	b.n	800afce <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d017      	beq.n	800af30 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af06:	691b      	ldr	r3, [r3, #16]
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	4798      	blx	r3
 800af0c:	4603      	mov	r3, r0
 800af0e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800af10:	7bbb      	ldrb	r3, [r7, #14]
 800af12:	b2db      	uxtb	r3, r3
 800af14:	2b00      	cmp	r3, #0
 800af16:	d103      	bne.n	800af20 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	220b      	movs	r2, #11
 800af1c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800af1e:	e058      	b.n	800afd2 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800af20:	7bbb      	ldrb	r3, [r7, #14]
 800af22:	b2db      	uxtb	r3, r3
 800af24:	2b02      	cmp	r3, #2
 800af26:	d154      	bne.n	800afd2 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	220d      	movs	r2, #13
 800af2c:	701a      	strb	r2, [r3, #0]
      break;
 800af2e:	e050      	b.n	800afd2 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	220d      	movs	r2, #13
 800af34:	701a      	strb	r2, [r3, #0]
      break;
 800af36:	e04c      	b.n	800afd2 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d049      	beq.n	800afd6 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af48:	695b      	ldr	r3, [r3, #20]
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	4798      	blx	r3
      }
      break;
 800af4e:	e042      	b.n	800afd6 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f7ff fd67 	bl	800aa2c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af64:	2b00      	cmp	r3, #0
 800af66:	d009      	beq.n	800af7c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2200      	movs	r2, #0
 800af78:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800af82:	2b00      	cmp	r3, #0
 800af84:	d005      	beq.n	800af92 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800af8c:	2105      	movs	r1, #5
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800af98:	b2db      	uxtb	r3, r3
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d107      	bne.n	800afae <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f7ff fe20 	bl	800abec <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800afac:	e014      	b.n	800afd8 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f001 ffd0 	bl	800cf54 <USBH_LL_Start>
      break;
 800afb4:	e010      	b.n	800afd8 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800afb6:	bf00      	nop
 800afb8:	e00e      	b.n	800afd8 <USBH_Process+0x3cc>
      break;
 800afba:	bf00      	nop
 800afbc:	e00c      	b.n	800afd8 <USBH_Process+0x3cc>
      break;
 800afbe:	bf00      	nop
 800afc0:	e00a      	b.n	800afd8 <USBH_Process+0x3cc>
    break;
 800afc2:	bf00      	nop
 800afc4:	e008      	b.n	800afd8 <USBH_Process+0x3cc>
      break;
 800afc6:	bf00      	nop
 800afc8:	e006      	b.n	800afd8 <USBH_Process+0x3cc>
      break;
 800afca:	bf00      	nop
 800afcc:	e004      	b.n	800afd8 <USBH_Process+0x3cc>
      break;
 800afce:	bf00      	nop
 800afd0:	e002      	b.n	800afd8 <USBH_Process+0x3cc>
      break;
 800afd2:	bf00      	nop
 800afd4:	e000      	b.n	800afd8 <USBH_Process+0x3cc>
      break;
 800afd6:	bf00      	nop
  }
  return USBH_OK;
 800afd8:	2300      	movs	r3, #0
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3710      	adds	r7, #16
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop

0800afe4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b088      	sub	sp, #32
 800afe8:	af04      	add	r7, sp, #16
 800afea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800afec:	2301      	movs	r3, #1
 800afee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800aff0:	2301      	movs	r3, #1
 800aff2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	785b      	ldrb	r3, [r3, #1]
 800aff8:	2b07      	cmp	r3, #7
 800affa:	f200 81c1 	bhi.w	800b380 <USBH_HandleEnum+0x39c>
 800affe:	a201      	add	r2, pc, #4	; (adr r2, 800b004 <USBH_HandleEnum+0x20>)
 800b000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b004:	0800b025 	.word	0x0800b025
 800b008:	0800b0e3 	.word	0x0800b0e3
 800b00c:	0800b14d 	.word	0x0800b14d
 800b010:	0800b1db 	.word	0x0800b1db
 800b014:	0800b245 	.word	0x0800b245
 800b018:	0800b2b5 	.word	0x0800b2b5
 800b01c:	0800b2fb 	.word	0x0800b2fb
 800b020:	0800b341 	.word	0x0800b341
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b024:	2108      	movs	r1, #8
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 fa50 	bl	800b4cc <USBH_Get_DevDesc>
 800b02c:	4603      	mov	r3, r0
 800b02e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b030:	7bbb      	ldrb	r3, [r7, #14]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d130      	bne.n	800b098 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2201      	movs	r2, #1
 800b044:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	7919      	ldrb	r1, [r3, #4]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b05a:	b292      	uxth	r2, r2
 800b05c:	9202      	str	r2, [sp, #8]
 800b05e:	2200      	movs	r2, #0
 800b060:	9201      	str	r2, [sp, #4]
 800b062:	9300      	str	r3, [sp, #0]
 800b064:	4603      	mov	r3, r0
 800b066:	2280      	movs	r2, #128	; 0x80
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f001 f865 	bl	800c138 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	7959      	ldrb	r1, [r3, #5]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b082:	b292      	uxth	r2, r2
 800b084:	9202      	str	r2, [sp, #8]
 800b086:	2200      	movs	r2, #0
 800b088:	9201      	str	r2, [sp, #4]
 800b08a:	9300      	str	r3, [sp, #0]
 800b08c:	4603      	mov	r3, r0
 800b08e:	2200      	movs	r2, #0
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f001 f851 	bl	800c138 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b096:	e175      	b.n	800b384 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b098:	7bbb      	ldrb	r3, [r7, #14]
 800b09a:	2b03      	cmp	r3, #3
 800b09c:	f040 8172 	bne.w	800b384 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	b2da      	uxtb	r2, r3
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b0b6:	2b03      	cmp	r3, #3
 800b0b8:	d903      	bls.n	800b0c2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	220d      	movs	r2, #13
 800b0be:	701a      	strb	r2, [r3, #0]
      break;
 800b0c0:	e160      	b.n	800b384 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	795b      	ldrb	r3, [r3, #5]
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f001 f885 	bl	800c1d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	791b      	ldrb	r3, [r3, #4]
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f001 f87f 	bl	800c1d8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	701a      	strb	r2, [r3, #0]
      break;
 800b0e0:	e150      	b.n	800b384 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b0e2:	2112      	movs	r1, #18
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 f9f1 	bl	800b4cc <USBH_Get_DevDesc>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b0ee:	7bbb      	ldrb	r3, [r7, #14]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d103      	bne.n	800b0fc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2202      	movs	r2, #2
 800b0f8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b0fa:	e145      	b.n	800b388 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b0fc:	7bbb      	ldrb	r3, [r7, #14]
 800b0fe:	2b03      	cmp	r3, #3
 800b100:	f040 8142 	bne.w	800b388 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b10a:	3301      	adds	r3, #1
 800b10c:	b2da      	uxtb	r2, r3
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b11a:	2b03      	cmp	r3, #3
 800b11c:	d903      	bls.n	800b126 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	220d      	movs	r2, #13
 800b122:	701a      	strb	r2, [r3, #0]
      break;
 800b124:	e130      	b.n	800b388 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	795b      	ldrb	r3, [r3, #5]
 800b12a:	4619      	mov	r1, r3
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f001 f853 	bl	800c1d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	791b      	ldrb	r3, [r3, #4]
 800b136:	4619      	mov	r1, r3
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f001 f84d 	bl	800c1d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2200      	movs	r2, #0
 800b142:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2200      	movs	r2, #0
 800b148:	701a      	strb	r2, [r3, #0]
      break;
 800b14a:	e11d      	b.n	800b388 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b14c:	2101      	movs	r1, #1
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f000 fa68 	bl	800b624 <USBH_SetAddress>
 800b154:	4603      	mov	r3, r0
 800b156:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b158:	7bbb      	ldrb	r3, [r7, #14]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d132      	bne.n	800b1c4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b15e:	2002      	movs	r0, #2
 800b160:	f002 f88c 	bl	800d27c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2201      	movs	r2, #1
 800b168:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2203      	movs	r2, #3
 800b170:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	7919      	ldrb	r1, [r3, #4]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b182:	687a      	ldr	r2, [r7, #4]
 800b184:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b186:	b292      	uxth	r2, r2
 800b188:	9202      	str	r2, [sp, #8]
 800b18a:	2200      	movs	r2, #0
 800b18c:	9201      	str	r2, [sp, #4]
 800b18e:	9300      	str	r3, [sp, #0]
 800b190:	4603      	mov	r3, r0
 800b192:	2280      	movs	r2, #128	; 0x80
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 ffcf 	bl	800c138 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	7959      	ldrb	r1, [r3, #5]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b1aa:	687a      	ldr	r2, [r7, #4]
 800b1ac:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b1ae:	b292      	uxth	r2, r2
 800b1b0:	9202      	str	r2, [sp, #8]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	9201      	str	r2, [sp, #4]
 800b1b6:	9300      	str	r3, [sp, #0]
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f000 ffbb 	bl	800c138 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b1c2:	e0e3      	b.n	800b38c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b1c4:	7bbb      	ldrb	r3, [r7, #14]
 800b1c6:	2b03      	cmp	r3, #3
 800b1c8:	f040 80e0 	bne.w	800b38c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	220d      	movs	r2, #13
 800b1d0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	705a      	strb	r2, [r3, #1]
      break;
 800b1d8:	e0d8      	b.n	800b38c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b1da:	2109      	movs	r1, #9
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 f99d 	bl	800b51c <USBH_Get_CfgDesc>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b1e6:	7bbb      	ldrb	r3, [r7, #14]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d103      	bne.n	800b1f4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2204      	movs	r2, #4
 800b1f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b1f2:	e0cd      	b.n	800b390 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b1f4:	7bbb      	ldrb	r3, [r7, #14]
 800b1f6:	2b03      	cmp	r3, #3
 800b1f8:	f040 80ca 	bne.w	800b390 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b202:	3301      	adds	r3, #1
 800b204:	b2da      	uxtb	r2, r3
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b212:	2b03      	cmp	r3, #3
 800b214:	d903      	bls.n	800b21e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	220d      	movs	r2, #13
 800b21a:	701a      	strb	r2, [r3, #0]
      break;
 800b21c:	e0b8      	b.n	800b390 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	795b      	ldrb	r3, [r3, #5]
 800b222:	4619      	mov	r1, r3
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 ffd7 	bl	800c1d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	791b      	ldrb	r3, [r3, #4]
 800b22e:	4619      	mov	r1, r3
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 ffd1 	bl	800c1d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2200      	movs	r2, #0
 800b23a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2200      	movs	r2, #0
 800b240:	701a      	strb	r2, [r3, #0]
      break;
 800b242:	e0a5      	b.n	800b390 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b24a:	4619      	mov	r1, r3
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f000 f965 	bl	800b51c <USBH_Get_CfgDesc>
 800b252:	4603      	mov	r3, r0
 800b254:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b256:	7bbb      	ldrb	r3, [r7, #14]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d103      	bne.n	800b264 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2205      	movs	r2, #5
 800b260:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b262:	e097      	b.n	800b394 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b264:	7bbb      	ldrb	r3, [r7, #14]
 800b266:	2b03      	cmp	r3, #3
 800b268:	f040 8094 	bne.w	800b394 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b272:	3301      	adds	r3, #1
 800b274:	b2da      	uxtb	r2, r3
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b282:	2b03      	cmp	r3, #3
 800b284:	d903      	bls.n	800b28e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	220d      	movs	r2, #13
 800b28a:	701a      	strb	r2, [r3, #0]
      break;
 800b28c:	e082      	b.n	800b394 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	795b      	ldrb	r3, [r3, #5]
 800b292:	4619      	mov	r1, r3
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 ff9f 	bl	800c1d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	791b      	ldrb	r3, [r3, #4]
 800b29e:	4619      	mov	r1, r3
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f000 ff99 	bl	800c1d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	701a      	strb	r2, [r3, #0]
      break;
 800b2b2:	e06f      	b.n	800b394 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d019      	beq.n	800b2f2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b2ca:	23ff      	movs	r3, #255	; 0xff
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 f949 	bl	800b564 <USBH_Get_StringDesc>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b2d6:	7bbb      	ldrb	r3, [r7, #14]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d103      	bne.n	800b2e4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2206      	movs	r2, #6
 800b2e0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b2e2:	e059      	b.n	800b398 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b2e4:	7bbb      	ldrb	r3, [r7, #14]
 800b2e6:	2b03      	cmp	r3, #3
 800b2e8:	d156      	bne.n	800b398 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2206      	movs	r2, #6
 800b2ee:	705a      	strb	r2, [r3, #1]
      break;
 800b2f0:	e052      	b.n	800b398 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2206      	movs	r2, #6
 800b2f6:	705a      	strb	r2, [r3, #1]
      break;
 800b2f8:	e04e      	b.n	800b398 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b300:	2b00      	cmp	r3, #0
 800b302:	d019      	beq.n	800b338 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b310:	23ff      	movs	r3, #255	; 0xff
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f000 f926 	bl	800b564 <USBH_Get_StringDesc>
 800b318:	4603      	mov	r3, r0
 800b31a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b31c:	7bbb      	ldrb	r3, [r7, #14]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d103      	bne.n	800b32a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2207      	movs	r2, #7
 800b326:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b328:	e038      	b.n	800b39c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b32a:	7bbb      	ldrb	r3, [r7, #14]
 800b32c:	2b03      	cmp	r3, #3
 800b32e:	d135      	bne.n	800b39c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2207      	movs	r2, #7
 800b334:	705a      	strb	r2, [r3, #1]
      break;
 800b336:	e031      	b.n	800b39c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2207      	movs	r2, #7
 800b33c:	705a      	strb	r2, [r3, #1]
      break;
 800b33e:	e02d      	b.n	800b39c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b346:	2b00      	cmp	r3, #0
 800b348:	d017      	beq.n	800b37a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b356:	23ff      	movs	r3, #255	; 0xff
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f000 f903 	bl	800b564 <USBH_Get_StringDesc>
 800b35e:	4603      	mov	r3, r0
 800b360:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b362:	7bbb      	ldrb	r3, [r7, #14]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d102      	bne.n	800b36e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b368:	2300      	movs	r3, #0
 800b36a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b36c:	e018      	b.n	800b3a0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b36e:	7bbb      	ldrb	r3, [r7, #14]
 800b370:	2b03      	cmp	r3, #3
 800b372:	d115      	bne.n	800b3a0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b374:	2300      	movs	r3, #0
 800b376:	73fb      	strb	r3, [r7, #15]
      break;
 800b378:	e012      	b.n	800b3a0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b37a:	2300      	movs	r3, #0
 800b37c:	73fb      	strb	r3, [r7, #15]
      break;
 800b37e:	e00f      	b.n	800b3a0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b380:	bf00      	nop
 800b382:	e00e      	b.n	800b3a2 <USBH_HandleEnum+0x3be>
      break;
 800b384:	bf00      	nop
 800b386:	e00c      	b.n	800b3a2 <USBH_HandleEnum+0x3be>
      break;
 800b388:	bf00      	nop
 800b38a:	e00a      	b.n	800b3a2 <USBH_HandleEnum+0x3be>
      break;
 800b38c:	bf00      	nop
 800b38e:	e008      	b.n	800b3a2 <USBH_HandleEnum+0x3be>
      break;
 800b390:	bf00      	nop
 800b392:	e006      	b.n	800b3a2 <USBH_HandleEnum+0x3be>
      break;
 800b394:	bf00      	nop
 800b396:	e004      	b.n	800b3a2 <USBH_HandleEnum+0x3be>
      break;
 800b398:	bf00      	nop
 800b39a:	e002      	b.n	800b3a2 <USBH_HandleEnum+0x3be>
      break;
 800b39c:	bf00      	nop
 800b39e:	e000      	b.n	800b3a2 <USBH_HandleEnum+0x3be>
      break;
 800b3a0:	bf00      	nop
  }
  return Status;
 800b3a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3710      	adds	r7, #16
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b083      	sub	sp, #12
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	683a      	ldr	r2, [r7, #0]
 800b3ba:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b3be:	bf00      	nop
 800b3c0:	370c      	adds	r7, #12
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr

0800b3ca <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b3ca:	b580      	push	{r7, lr}
 800b3cc:	b082      	sub	sp, #8
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b3d8:	1c5a      	adds	r2, r3, #1
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f000 f804 	bl	800b3ee <USBH_HandleSof>
}
 800b3e6:	bf00      	nop
 800b3e8:	3708      	adds	r7, #8
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}

0800b3ee <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b3ee:	b580      	push	{r7, lr}
 800b3f0:	b082      	sub	sp, #8
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	b2db      	uxtb	r3, r3
 800b3fc:	2b0b      	cmp	r3, #11
 800b3fe:	d10a      	bne.n	800b416 <USBH_HandleSof+0x28>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b406:	2b00      	cmp	r3, #0
 800b408:	d005      	beq.n	800b416 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b410:	699b      	ldr	r3, [r3, #24]
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	4798      	blx	r3
  }
}
 800b416:	bf00      	nop
 800b418:	3708      	adds	r7, #8
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}

0800b41e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b41e:	b480      	push	{r7}
 800b420:	b083      	sub	sp, #12
 800b422:	af00      	add	r7, sp, #0
 800b424:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2201      	movs	r2, #1
 800b42a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800b42e:	bf00      	nop
}
 800b430:	370c      	adds	r7, #12
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr

0800b43a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b43a:	b480      	push	{r7}
 800b43c:	b083      	sub	sp, #12
 800b43e:	af00      	add	r7, sp, #0
 800b440:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2200      	movs	r2, #0
 800b446:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b44a:	bf00      	nop
}
 800b44c:	370c      	adds	r7, #12
 800b44e:	46bd      	mov	sp, r7
 800b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b454:	4770      	bx	lr

0800b456 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b456:	b480      	push	{r7}
 800b458:	b083      	sub	sp, #12
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2201      	movs	r2, #1
 800b462:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2200      	movs	r2, #0
 800b46a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2200      	movs	r2, #0
 800b472:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b476:	2300      	movs	r3, #0
}
 800b478:	4618      	mov	r0, r3
 800b47a:	370c      	adds	r7, #12
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr

0800b484 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2201      	movs	r2, #1
 800b490:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2200      	movs	r2, #0
 800b498:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f001 fd70 	bl	800cf8a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	791b      	ldrb	r3, [r3, #4]
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 fe91 	bl	800c1d8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	795b      	ldrb	r3, [r3, #5]
 800b4ba:	4619      	mov	r1, r3
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f000 fe8b 	bl	800c1d8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b4c2:	2300      	movs	r3, #0
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3708      	adds	r7, #8
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b086      	sub	sp, #24
 800b4d0:	af02      	add	r7, sp, #8
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	460b      	mov	r3, r1
 800b4d6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b4de:	78fb      	ldrb	r3, [r7, #3]
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	9300      	str	r3, [sp, #0]
 800b4e4:	4613      	mov	r3, r2
 800b4e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b4ea:	2100      	movs	r1, #0
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 f864 	bl	800b5ba <USBH_GetDescriptor>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800b4f6:	7bfb      	ldrb	r3, [r7, #15]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d10a      	bne.n	800b512 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b508:	78fa      	ldrb	r2, [r7, #3]
 800b50a:	b292      	uxth	r2, r2
 800b50c:	4619      	mov	r1, r3
 800b50e:	f000 f918 	bl	800b742 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b512:	7bfb      	ldrb	r3, [r7, #15]
}
 800b514:	4618      	mov	r0, r3
 800b516:	3710      	adds	r7, #16
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}

0800b51c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b086      	sub	sp, #24
 800b520:	af02      	add	r7, sp, #8
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	460b      	mov	r3, r1
 800b526:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	331c      	adds	r3, #28
 800b52c:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b52e:	887b      	ldrh	r3, [r7, #2]
 800b530:	9300      	str	r3, [sp, #0]
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b538:	2100      	movs	r1, #0
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f000 f83d 	bl	800b5ba <USBH_GetDescriptor>
 800b540:	4603      	mov	r3, r0
 800b542:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b544:	7bfb      	ldrb	r3, [r7, #15]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d107      	bne.n	800b55a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b54a:	887b      	ldrh	r3, [r7, #2]
 800b54c:	461a      	mov	r2, r3
 800b54e:	68b9      	ldr	r1, [r7, #8]
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f000 f987 	bl	800b864 <USBH_ParseCfgDesc>
 800b556:	4603      	mov	r3, r0
 800b558:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b55a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3710      	adds	r7, #16
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b088      	sub	sp, #32
 800b568:	af02      	add	r7, sp, #8
 800b56a:	60f8      	str	r0, [r7, #12]
 800b56c:	607a      	str	r2, [r7, #4]
 800b56e:	461a      	mov	r2, r3
 800b570:	460b      	mov	r3, r1
 800b572:	72fb      	strb	r3, [r7, #11]
 800b574:	4613      	mov	r3, r2
 800b576:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800b578:	7afb      	ldrb	r3, [r7, #11]
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b580:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b588:	893b      	ldrh	r3, [r7, #8]
 800b58a:	9300      	str	r3, [sp, #0]
 800b58c:	460b      	mov	r3, r1
 800b58e:	2100      	movs	r1, #0
 800b590:	68f8      	ldr	r0, [r7, #12]
 800b592:	f000 f812 	bl	800b5ba <USBH_GetDescriptor>
 800b596:	4603      	mov	r3, r0
 800b598:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b59a:	7dfb      	ldrb	r3, [r7, #23]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d107      	bne.n	800b5b0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b5a6:	893a      	ldrh	r2, [r7, #8]
 800b5a8:	6879      	ldr	r1, [r7, #4]
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f000 fb24 	bl	800bbf8 <USBH_ParseStringDesc>
  }

  return status;
 800b5b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3718      	adds	r7, #24
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}

0800b5ba <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b5ba:	b580      	push	{r7, lr}
 800b5bc:	b084      	sub	sp, #16
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	60f8      	str	r0, [r7, #12]
 800b5c2:	607b      	str	r3, [r7, #4]
 800b5c4:	460b      	mov	r3, r1
 800b5c6:	72fb      	strb	r3, [r7, #11]
 800b5c8:	4613      	mov	r3, r2
 800b5ca:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	789b      	ldrb	r3, [r3, #2]
 800b5d0:	2b01      	cmp	r3, #1
 800b5d2:	d11c      	bne.n	800b60e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b5d4:	7afb      	ldrb	r3, [r7, #11]
 800b5d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b5da:	b2da      	uxtb	r2, r3
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2206      	movs	r2, #6
 800b5e4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	893a      	ldrh	r2, [r7, #8]
 800b5ea:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b5ec:	893b      	ldrh	r3, [r7, #8]
 800b5ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b5f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5f6:	d104      	bne.n	800b602 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f240 4209 	movw	r2, #1033	; 0x409
 800b5fe:	829a      	strh	r2, [r3, #20]
 800b600:	e002      	b.n	800b608 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	2200      	movs	r2, #0
 800b606:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	8b3a      	ldrh	r2, [r7, #24]
 800b60c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b60e:	8b3b      	ldrh	r3, [r7, #24]
 800b610:	461a      	mov	r2, r3
 800b612:	6879      	ldr	r1, [r7, #4]
 800b614:	68f8      	ldr	r0, [r7, #12]
 800b616:	f000 fb3d 	bl	800bc94 <USBH_CtlReq>
 800b61a:	4603      	mov	r3, r0
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3710      	adds	r7, #16
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b082      	sub	sp, #8
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	460b      	mov	r3, r1
 800b62e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	789b      	ldrb	r3, [r3, #2]
 800b634:	2b01      	cmp	r3, #1
 800b636:	d10f      	bne.n	800b658 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2200      	movs	r2, #0
 800b63c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2205      	movs	r2, #5
 800b642:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b644:	78fb      	ldrb	r3, [r7, #3]
 800b646:	b29a      	uxth	r2, r3
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2200      	movs	r2, #0
 800b650:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2200      	movs	r2, #0
 800b656:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b658:	2200      	movs	r2, #0
 800b65a:	2100      	movs	r1, #0
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 fb19 	bl	800bc94 <USBH_CtlReq>
 800b662:	4603      	mov	r3, r0
}
 800b664:	4618      	mov	r0, r3
 800b666:	3708      	adds	r7, #8
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	460b      	mov	r3, r1
 800b676:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	789b      	ldrb	r3, [r3, #2]
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d10e      	bne.n	800b69e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2200      	movs	r2, #0
 800b684:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2209      	movs	r2, #9
 800b68a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	887a      	ldrh	r2, [r7, #2]
 800b690:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2200      	movs	r2, #0
 800b696:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2200      	movs	r2, #0
 800b69c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b69e:	2200      	movs	r2, #0
 800b6a0:	2100      	movs	r1, #0
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f000 faf6 	bl	800bc94 <USBH_CtlReq>
 800b6a8:	4603      	mov	r3, r0
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3708      	adds	r7, #8
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}

0800b6b2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b6b2:	b580      	push	{r7, lr}
 800b6b4:	b082      	sub	sp, #8
 800b6b6:	af00      	add	r7, sp, #0
 800b6b8:	6078      	str	r0, [r7, #4]
 800b6ba:	460b      	mov	r3, r1
 800b6bc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	789b      	ldrb	r3, [r3, #2]
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	d10f      	bne.n	800b6e6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2203      	movs	r2, #3
 800b6d0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b6d2:	78fb      	ldrb	r3, [r7, #3]
 800b6d4:	b29a      	uxth	r2, r3
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	2100      	movs	r1, #0
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 fad2 	bl	800bc94 <USBH_CtlReq>
 800b6f0:	4603      	mov	r3, r0
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3708      	adds	r7, #8
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}

0800b6fa <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b6fa:	b580      	push	{r7, lr}
 800b6fc:	b082      	sub	sp, #8
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
 800b702:	460b      	mov	r3, r1
 800b704:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	789b      	ldrb	r3, [r3, #2]
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d10f      	bne.n	800b72e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2202      	movs	r2, #2
 800b712:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2201      	movs	r2, #1
 800b718:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2200      	movs	r2, #0
 800b71e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b720:	78fb      	ldrb	r3, [r7, #3]
 800b722:	b29a      	uxth	r2, r3
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2200      	movs	r2, #0
 800b72c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800b72e:	2200      	movs	r2, #0
 800b730:	2100      	movs	r1, #0
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 faae 	bl	800bc94 <USBH_CtlReq>
 800b738:	4603      	mov	r3, r0
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3708      	adds	r7, #8
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}

0800b742 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b742:	b480      	push	{r7}
 800b744:	b085      	sub	sp, #20
 800b746:	af00      	add	r7, sp, #0
 800b748:	60f8      	str	r0, [r7, #12]
 800b74a:	60b9      	str	r1, [r7, #8]
 800b74c:	4613      	mov	r3, r2
 800b74e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	781a      	ldrb	r2, [r3, #0]
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	785a      	ldrb	r2, [r3, #1]
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	3302      	adds	r3, #2
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	b29a      	uxth	r2, r3
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	3303      	adds	r3, #3
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	b29b      	uxth	r3, r3
 800b770:	021b      	lsls	r3, r3, #8
 800b772:	b29b      	uxth	r3, r3
 800b774:	4313      	orrs	r3, r2
 800b776:	b29a      	uxth	r2, r3
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	791a      	ldrb	r2, [r3, #4]
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	795a      	ldrb	r2, [r3, #5]
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	799a      	ldrb	r2, [r3, #6]
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	79da      	ldrb	r2, [r3, #7]
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	79db      	ldrb	r3, [r3, #7]
 800b7a0:	2b20      	cmp	r3, #32
 800b7a2:	dc11      	bgt.n	800b7c8 <USBH_ParseDevDesc+0x86>
 800b7a4:	2b08      	cmp	r3, #8
 800b7a6:	db16      	blt.n	800b7d6 <USBH_ParseDevDesc+0x94>
 800b7a8:	3b08      	subs	r3, #8
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	fa02 f303 	lsl.w	r3, r2, r3
 800b7b0:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800b7b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	bf14      	ite	ne
 800b7bc:	2301      	movne	r3, #1
 800b7be:	2300      	moveq	r3, #0
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d102      	bne.n	800b7cc <USBH_ParseDevDesc+0x8a>
 800b7c6:	e006      	b.n	800b7d6 <USBH_ParseDevDesc+0x94>
 800b7c8:	2b40      	cmp	r3, #64	; 0x40
 800b7ca:	d104      	bne.n	800b7d6 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	79da      	ldrb	r2, [r3, #7]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	71da      	strb	r2, [r3, #7]
      break;
 800b7d4:	e003      	b.n	800b7de <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2240      	movs	r2, #64	; 0x40
 800b7da:	71da      	strb	r2, [r3, #7]
      break;
 800b7dc:	bf00      	nop
  }

  if (length > 8U)
 800b7de:	88fb      	ldrh	r3, [r7, #6]
 800b7e0:	2b08      	cmp	r3, #8
 800b7e2:	d939      	bls.n	800b858 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	3308      	adds	r3, #8
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	b29a      	uxth	r2, r3
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	3309      	adds	r3, #9
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	b29b      	uxth	r3, r3
 800b7f4:	021b      	lsls	r3, r3, #8
 800b7f6:	b29b      	uxth	r3, r3
 800b7f8:	4313      	orrs	r3, r2
 800b7fa:	b29a      	uxth	r2, r3
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	330a      	adds	r3, #10
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	b29a      	uxth	r2, r3
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	330b      	adds	r3, #11
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	b29b      	uxth	r3, r3
 800b810:	021b      	lsls	r3, r3, #8
 800b812:	b29b      	uxth	r3, r3
 800b814:	4313      	orrs	r3, r2
 800b816:	b29a      	uxth	r2, r3
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	330c      	adds	r3, #12
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	b29a      	uxth	r2, r3
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	330d      	adds	r3, #13
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	b29b      	uxth	r3, r3
 800b82c:	021b      	lsls	r3, r3, #8
 800b82e:	b29b      	uxth	r3, r3
 800b830:	4313      	orrs	r3, r2
 800b832:	b29a      	uxth	r2, r3
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	7b9a      	ldrb	r2, [r3, #14]
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	7bda      	ldrb	r2, [r3, #15]
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	7c1a      	ldrb	r2, [r3, #16]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	7c5a      	ldrb	r2, [r3, #17]
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	745a      	strb	r2, [r3, #17]
  }
}
 800b858:	bf00      	nop
 800b85a:	3714      	adds	r7, #20
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr

0800b864 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b08c      	sub	sp, #48	; 0x30
 800b868:	af00      	add	r7, sp, #0
 800b86a:	60f8      	str	r0, [r7, #12]
 800b86c:	60b9      	str	r1, [r7, #8]
 800b86e:	4613      	mov	r3, r2
 800b870:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b878:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b87a:	2300      	movs	r3, #0
 800b87c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b884:	2300      	movs	r3, #0
 800b886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800b88a:	2300      	movs	r3, #0
 800b88c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	781a      	ldrb	r2, [r3, #0]
 800b898:	6a3b      	ldr	r3, [r7, #32]
 800b89a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	785a      	ldrb	r2, [r3, #1]
 800b8a0:	6a3b      	ldr	r3, [r7, #32]
 800b8a2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	3302      	adds	r3, #2
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	b29a      	uxth	r2, r3
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	3303      	adds	r3, #3
 800b8b0:	781b      	ldrb	r3, [r3, #0]
 800b8b2:	b29b      	uxth	r3, r3
 800b8b4:	021b      	lsls	r3, r3, #8
 800b8b6:	b29b      	uxth	r3, r3
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8c0:	bf28      	it	cs
 800b8c2:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800b8c6:	b29a      	uxth	r2, r3
 800b8c8:	6a3b      	ldr	r3, [r7, #32]
 800b8ca:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	791a      	ldrb	r2, [r3, #4]
 800b8d0:	6a3b      	ldr	r3, [r7, #32]
 800b8d2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	795a      	ldrb	r2, [r3, #5]
 800b8d8:	6a3b      	ldr	r3, [r7, #32]
 800b8da:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	799a      	ldrb	r2, [r3, #6]
 800b8e0:	6a3b      	ldr	r3, [r7, #32]
 800b8e2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	79da      	ldrb	r2, [r3, #7]
 800b8e8:	6a3b      	ldr	r3, [r7, #32]
 800b8ea:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	7a1a      	ldrb	r2, [r3, #8]
 800b8f0:	6a3b      	ldr	r3, [r7, #32]
 800b8f2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800b8f4:	6a3b      	ldr	r3, [r7, #32]
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	2b09      	cmp	r3, #9
 800b8fa:	d002      	beq.n	800b902 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b8fc:	6a3b      	ldr	r3, [r7, #32]
 800b8fe:	2209      	movs	r2, #9
 800b900:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b902:	88fb      	ldrh	r3, [r7, #6]
 800b904:	2b09      	cmp	r3, #9
 800b906:	f240 809d 	bls.w	800ba44 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800b90a:	2309      	movs	r3, #9
 800b90c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b90e:	2300      	movs	r3, #0
 800b910:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b912:	e081      	b.n	800ba18 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b914:	f107 0316 	add.w	r3, r7, #22
 800b918:	4619      	mov	r1, r3
 800b91a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b91c:	f000 f99f 	bl	800bc5e <USBH_GetNextDesc>
 800b920:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b924:	785b      	ldrb	r3, [r3, #1]
 800b926:	2b04      	cmp	r3, #4
 800b928:	d176      	bne.n	800ba18 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	2b09      	cmp	r3, #9
 800b930:	d002      	beq.n	800b938 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b934:	2209      	movs	r2, #9
 800b936:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b93c:	221a      	movs	r2, #26
 800b93e:	fb02 f303 	mul.w	r3, r2, r3
 800b942:	3308      	adds	r3, #8
 800b944:	6a3a      	ldr	r2, [r7, #32]
 800b946:	4413      	add	r3, r2
 800b948:	3302      	adds	r3, #2
 800b94a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b94c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b94e:	69f8      	ldr	r0, [r7, #28]
 800b950:	f000 f87e 	bl	800ba50 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b954:	2300      	movs	r3, #0
 800b956:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b95a:	2300      	movs	r3, #0
 800b95c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b95e:	e043      	b.n	800b9e8 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b960:	f107 0316 	add.w	r3, r7, #22
 800b964:	4619      	mov	r1, r3
 800b966:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b968:	f000 f979 	bl	800bc5e <USBH_GetNextDesc>
 800b96c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b970:	785b      	ldrb	r3, [r3, #1]
 800b972:	2b05      	cmp	r3, #5
 800b974:	d138      	bne.n	800b9e8 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800b976:	69fb      	ldr	r3, [r7, #28]
 800b978:	795b      	ldrb	r3, [r3, #5]
 800b97a:	2b01      	cmp	r3, #1
 800b97c:	d10f      	bne.n	800b99e <USBH_ParseCfgDesc+0x13a>
 800b97e:	69fb      	ldr	r3, [r7, #28]
 800b980:	799b      	ldrb	r3, [r3, #6]
 800b982:	2b02      	cmp	r3, #2
 800b984:	d10b      	bne.n	800b99e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b986:	69fb      	ldr	r3, [r7, #28]
 800b988:	79db      	ldrb	r3, [r3, #7]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d10f      	bne.n	800b9ae <USBH_ParseCfgDesc+0x14a>
 800b98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b990:	781b      	ldrb	r3, [r3, #0]
 800b992:	2b09      	cmp	r3, #9
 800b994:	d00b      	beq.n	800b9ae <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800b996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b998:	2209      	movs	r2, #9
 800b99a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b99c:	e007      	b.n	800b9ae <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800b99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	2b07      	cmp	r3, #7
 800b9a4:	d004      	beq.n	800b9b0 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a8:	2207      	movs	r2, #7
 800b9aa:	701a      	strb	r2, [r3, #0]
 800b9ac:	e000      	b.n	800b9b0 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b9ae:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b9b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9b4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b9b8:	3201      	adds	r2, #1
 800b9ba:	00d2      	lsls	r2, r2, #3
 800b9bc:	211a      	movs	r1, #26
 800b9be:	fb01 f303 	mul.w	r3, r1, r3
 800b9c2:	4413      	add	r3, r2
 800b9c4:	3308      	adds	r3, #8
 800b9c6:	6a3a      	ldr	r2, [r7, #32]
 800b9c8:	4413      	add	r3, r2
 800b9ca:	3304      	adds	r3, #4
 800b9cc:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b9ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9d0:	69b9      	ldr	r1, [r7, #24]
 800b9d2:	68f8      	ldr	r0, [r7, #12]
 800b9d4:	f000 f86b 	bl	800baae <USBH_ParseEPDesc>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800b9de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b9e8:	69fb      	ldr	r3, [r7, #28]
 800b9ea:	791b      	ldrb	r3, [r3, #4]
 800b9ec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d204      	bcs.n	800b9fe <USBH_ParseCfgDesc+0x19a>
 800b9f4:	6a3b      	ldr	r3, [r7, #32]
 800b9f6:	885a      	ldrh	r2, [r3, #2]
 800b9f8:	8afb      	ldrh	r3, [r7, #22]
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d8b0      	bhi.n	800b960 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b9fe:	69fb      	ldr	r3, [r7, #28]
 800ba00:	791b      	ldrb	r3, [r3, #4]
 800ba02:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d201      	bcs.n	800ba0e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800ba0a:	2303      	movs	r3, #3
 800ba0c:	e01c      	b.n	800ba48 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800ba0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba12:	3301      	adds	r3, #1
 800ba14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ba18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	d805      	bhi.n	800ba2c <USBH_ParseCfgDesc+0x1c8>
 800ba20:	6a3b      	ldr	r3, [r7, #32]
 800ba22:	885a      	ldrh	r2, [r3, #2]
 800ba24:	8afb      	ldrh	r3, [r7, #22]
 800ba26:	429a      	cmp	r2, r3
 800ba28:	f63f af74 	bhi.w	800b914 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800ba2c:	6a3b      	ldr	r3, [r7, #32]
 800ba2e:	791b      	ldrb	r3, [r3, #4]
 800ba30:	2b02      	cmp	r3, #2
 800ba32:	bf28      	it	cs
 800ba34:	2302      	movcs	r3, #2
 800ba36:	b2db      	uxtb	r3, r3
 800ba38:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d201      	bcs.n	800ba44 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800ba40:	2303      	movs	r3, #3
 800ba42:	e001      	b.n	800ba48 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800ba44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3730      	adds	r7, #48	; 0x30
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}

0800ba50 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b083      	sub	sp, #12
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	781a      	ldrb	r2, [r3, #0]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	785a      	ldrb	r2, [r3, #1]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	789a      	ldrb	r2, [r3, #2]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	78da      	ldrb	r2, [r3, #3]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	791a      	ldrb	r2, [r3, #4]
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	795a      	ldrb	r2, [r3, #5]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	799a      	ldrb	r2, [r3, #6]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	79da      	ldrb	r2, [r3, #7]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	7a1a      	ldrb	r2, [r3, #8]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	721a      	strb	r2, [r3, #8]
}
 800baa2:	bf00      	nop
 800baa4:	370c      	adds	r7, #12
 800baa6:	46bd      	mov	sp, r7
 800baa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baac:	4770      	bx	lr

0800baae <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800baae:	b480      	push	{r7}
 800bab0:	b087      	sub	sp, #28
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	60f8      	str	r0, [r7, #12]
 800bab6:	60b9      	str	r1, [r7, #8]
 800bab8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800baba:	2300      	movs	r3, #0
 800babc:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	781a      	ldrb	r2, [r3, #0]
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	785a      	ldrb	r2, [r3, #1]
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	789a      	ldrb	r2, [r3, #2]
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	78da      	ldrb	r2, [r3, #3]
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	3304      	adds	r3, #4
 800bae2:	781b      	ldrb	r3, [r3, #0]
 800bae4:	b29a      	uxth	r2, r3
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	3305      	adds	r3, #5
 800baea:	781b      	ldrb	r3, [r3, #0]
 800baec:	b29b      	uxth	r3, r3
 800baee:	021b      	lsls	r3, r3, #8
 800baf0:	b29b      	uxth	r3, r3
 800baf2:	4313      	orrs	r3, r2
 800baf4:	b29a      	uxth	r2, r3
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	799a      	ldrb	r2, [r3, #6]
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	889b      	ldrh	r3, [r3, #4]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d102      	bne.n	800bb10 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800bb0a:	2303      	movs	r3, #3
 800bb0c:	75fb      	strb	r3, [r7, #23]
 800bb0e:	e033      	b.n	800bb78 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	889b      	ldrh	r3, [r3, #4]
 800bb14:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bb18:	f023 0307 	bic.w	r3, r3, #7
 800bb1c:	b29a      	uxth	r2, r3
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	889b      	ldrh	r3, [r3, #4]
 800bb26:	b21a      	sxth	r2, r3
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	3304      	adds	r3, #4
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	b299      	uxth	r1, r3
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	3305      	adds	r3, #5
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	021b      	lsls	r3, r3, #8
 800bb3a:	b29b      	uxth	r3, r3
 800bb3c:	430b      	orrs	r3, r1
 800bb3e:	b29b      	uxth	r3, r3
 800bb40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d110      	bne.n	800bb6a <USBH_ParseEPDesc+0xbc>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	3304      	adds	r3, #4
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	b299      	uxth	r1, r3
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	3305      	adds	r3, #5
 800bb54:	781b      	ldrb	r3, [r3, #0]
 800bb56:	b29b      	uxth	r3, r3
 800bb58:	021b      	lsls	r3, r3, #8
 800bb5a:	b29b      	uxth	r3, r3
 800bb5c:	430b      	orrs	r3, r1
 800bb5e:	b29b      	uxth	r3, r3
 800bb60:	b21b      	sxth	r3, r3
 800bb62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bb66:	b21b      	sxth	r3, r3
 800bb68:	e001      	b.n	800bb6e <USBH_ParseEPDesc+0xc0>
 800bb6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	b21b      	sxth	r3, r3
 800bb72:	b29a      	uxth	r2, r3
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d116      	bne.n	800bbb0 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	78db      	ldrb	r3, [r3, #3]
 800bb86:	f003 0303 	and.w	r3, r3, #3
 800bb8a:	2b01      	cmp	r3, #1
 800bb8c:	d005      	beq.n	800bb9a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	78db      	ldrb	r3, [r3, #3]
 800bb92:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800bb96:	2b03      	cmp	r3, #3
 800bb98:	d127      	bne.n	800bbea <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	799b      	ldrb	r3, [r3, #6]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d003      	beq.n	800bbaa <USBH_ParseEPDesc+0xfc>
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	799b      	ldrb	r3, [r3, #6]
 800bba6:	2b10      	cmp	r3, #16
 800bba8:	d91f      	bls.n	800bbea <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800bbaa:	2303      	movs	r3, #3
 800bbac:	75fb      	strb	r3, [r7, #23]
 800bbae:	e01c      	b.n	800bbea <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	78db      	ldrb	r3, [r3, #3]
 800bbb4:	f003 0303 	and.w	r3, r3, #3
 800bbb8:	2b01      	cmp	r3, #1
 800bbba:	d10a      	bne.n	800bbd2 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	799b      	ldrb	r3, [r3, #6]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d003      	beq.n	800bbcc <USBH_ParseEPDesc+0x11e>
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	799b      	ldrb	r3, [r3, #6]
 800bbc8:	2b10      	cmp	r3, #16
 800bbca:	d90e      	bls.n	800bbea <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800bbcc:	2303      	movs	r3, #3
 800bbce:	75fb      	strb	r3, [r7, #23]
 800bbd0:	e00b      	b.n	800bbea <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	78db      	ldrb	r3, [r3, #3]
 800bbd6:	f003 0303 	and.w	r3, r3, #3
 800bbda:	2b03      	cmp	r3, #3
 800bbdc:	d105      	bne.n	800bbea <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	799b      	ldrb	r3, [r3, #6]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d101      	bne.n	800bbea <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800bbe6:	2303      	movs	r3, #3
 800bbe8:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800bbea:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	371c      	adds	r7, #28
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr

0800bbf8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b087      	sub	sp, #28
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	60f8      	str	r0, [r7, #12]
 800bc00:	60b9      	str	r1, [r7, #8]
 800bc02:	4613      	mov	r3, r2
 800bc04:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	3301      	adds	r3, #1
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	2b03      	cmp	r3, #3
 800bc0e:	d120      	bne.n	800bc52 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	1e9a      	subs	r2, r3, #2
 800bc16:	88fb      	ldrh	r3, [r7, #6]
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	bf28      	it	cs
 800bc1c:	4613      	movcs	r3, r2
 800bc1e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	3302      	adds	r3, #2
 800bc24:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800bc26:	2300      	movs	r3, #0
 800bc28:	82fb      	strh	r3, [r7, #22]
 800bc2a:	e00b      	b.n	800bc44 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800bc2c:	8afb      	ldrh	r3, [r7, #22]
 800bc2e:	68fa      	ldr	r2, [r7, #12]
 800bc30:	4413      	add	r3, r2
 800bc32:	781a      	ldrb	r2, [r3, #0]
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	701a      	strb	r2, [r3, #0]
      pdest++;
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800bc3e:	8afb      	ldrh	r3, [r7, #22]
 800bc40:	3302      	adds	r3, #2
 800bc42:	82fb      	strh	r3, [r7, #22]
 800bc44:	8afa      	ldrh	r2, [r7, #22]
 800bc46:	8abb      	ldrh	r3, [r7, #20]
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d3ef      	bcc.n	800bc2c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	701a      	strb	r2, [r3, #0]
  }
}
 800bc52:	bf00      	nop
 800bc54:	371c      	adds	r7, #28
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr

0800bc5e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800bc5e:	b480      	push	{r7}
 800bc60:	b085      	sub	sp, #20
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	6078      	str	r0, [r7, #4]
 800bc66:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	881a      	ldrh	r2, [r3, #0]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	4413      	add	r3, r2
 800bc74:	b29a      	uxth	r2, r3
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	4413      	add	r3, r2
 800bc84:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bc86:	68fb      	ldr	r3, [r7, #12]
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3714      	adds	r7, #20
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr

0800bc94 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b086      	sub	sp, #24
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	60f8      	str	r0, [r7, #12]
 800bc9c:	60b9      	str	r1, [r7, #8]
 800bc9e:	4613      	mov	r3, r2
 800bca0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800bca2:	2301      	movs	r3, #1
 800bca4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	789b      	ldrb	r3, [r3, #2]
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	d002      	beq.n	800bcb4 <USBH_CtlReq+0x20>
 800bcae:	2b02      	cmp	r3, #2
 800bcb0:	d00f      	beq.n	800bcd2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800bcb2:	e027      	b.n	800bd04 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	68ba      	ldr	r2, [r7, #8]
 800bcb8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	88fa      	ldrh	r2, [r7, #6]
 800bcbe:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	2202      	movs	r2, #2
 800bcca:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800bccc:	2301      	movs	r3, #1
 800bcce:	75fb      	strb	r3, [r7, #23]
      break;
 800bcd0:	e018      	b.n	800bd04 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800bcd2:	68f8      	ldr	r0, [r7, #12]
 800bcd4:	f000 f81c 	bl	800bd10 <USBH_HandleControl>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800bcdc:	7dfb      	ldrb	r3, [r7, #23]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d002      	beq.n	800bce8 <USBH_CtlReq+0x54>
 800bce2:	7dfb      	ldrb	r3, [r7, #23]
 800bce4:	2b03      	cmp	r3, #3
 800bce6:	d106      	bne.n	800bcf6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2201      	movs	r2, #1
 800bcec:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	761a      	strb	r2, [r3, #24]
      break;
 800bcf4:	e005      	b.n	800bd02 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800bcf6:	7dfb      	ldrb	r3, [r7, #23]
 800bcf8:	2b02      	cmp	r3, #2
 800bcfa:	d102      	bne.n	800bd02 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	2201      	movs	r2, #1
 800bd00:	709a      	strb	r2, [r3, #2]
      break;
 800bd02:	bf00      	nop
  }
  return status;
 800bd04:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3718      	adds	r7, #24
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
	...

0800bd10 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b086      	sub	sp, #24
 800bd14:	af02      	add	r7, sp, #8
 800bd16:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800bd18:	2301      	movs	r3, #1
 800bd1a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	7e1b      	ldrb	r3, [r3, #24]
 800bd24:	3b01      	subs	r3, #1
 800bd26:	2b0a      	cmp	r3, #10
 800bd28:	f200 8156 	bhi.w	800bfd8 <USBH_HandleControl+0x2c8>
 800bd2c:	a201      	add	r2, pc, #4	; (adr r2, 800bd34 <USBH_HandleControl+0x24>)
 800bd2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd32:	bf00      	nop
 800bd34:	0800bd61 	.word	0x0800bd61
 800bd38:	0800bd7b 	.word	0x0800bd7b
 800bd3c:	0800bde5 	.word	0x0800bde5
 800bd40:	0800be0b 	.word	0x0800be0b
 800bd44:	0800be43 	.word	0x0800be43
 800bd48:	0800be6d 	.word	0x0800be6d
 800bd4c:	0800bebf 	.word	0x0800bebf
 800bd50:	0800bee1 	.word	0x0800bee1
 800bd54:	0800bf1d 	.word	0x0800bf1d
 800bd58:	0800bf43 	.word	0x0800bf43
 800bd5c:	0800bf81 	.word	0x0800bf81
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f103 0110 	add.w	r1, r3, #16
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	795b      	ldrb	r3, [r3, #5]
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f000 f943 	bl	800bff8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2202      	movs	r2, #2
 800bd76:	761a      	strb	r2, [r3, #24]
      break;
 800bd78:	e139      	b.n	800bfee <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	795b      	ldrb	r3, [r3, #5]
 800bd7e:	4619      	mov	r1, r3
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f001 f9f1 	bl	800d168 <USBH_LL_GetURBState>
 800bd86:	4603      	mov	r3, r0
 800bd88:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800bd8a:	7bbb      	ldrb	r3, [r7, #14]
 800bd8c:	2b01      	cmp	r3, #1
 800bd8e:	d11e      	bne.n	800bdce <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	7c1b      	ldrb	r3, [r3, #16]
 800bd94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bd98:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	8adb      	ldrh	r3, [r3, #22]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d00a      	beq.n	800bdb8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800bda2:	7b7b      	ldrb	r3, [r7, #13]
 800bda4:	2b80      	cmp	r3, #128	; 0x80
 800bda6:	d103      	bne.n	800bdb0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2203      	movs	r2, #3
 800bdac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bdae:	e115      	b.n	800bfdc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2205      	movs	r2, #5
 800bdb4:	761a      	strb	r2, [r3, #24]
      break;
 800bdb6:	e111      	b.n	800bfdc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800bdb8:	7b7b      	ldrb	r3, [r7, #13]
 800bdba:	2b80      	cmp	r3, #128	; 0x80
 800bdbc:	d103      	bne.n	800bdc6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2209      	movs	r2, #9
 800bdc2:	761a      	strb	r2, [r3, #24]
      break;
 800bdc4:	e10a      	b.n	800bfdc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2207      	movs	r2, #7
 800bdca:	761a      	strb	r2, [r3, #24]
      break;
 800bdcc:	e106      	b.n	800bfdc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800bdce:	7bbb      	ldrb	r3, [r7, #14]
 800bdd0:	2b04      	cmp	r3, #4
 800bdd2:	d003      	beq.n	800bddc <USBH_HandleControl+0xcc>
 800bdd4:	7bbb      	ldrb	r3, [r7, #14]
 800bdd6:	2b02      	cmp	r3, #2
 800bdd8:	f040 8100 	bne.w	800bfdc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	220b      	movs	r2, #11
 800bde0:	761a      	strb	r2, [r3, #24]
      break;
 800bde2:	e0fb      	b.n	800bfdc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bdea:	b29a      	uxth	r2, r3
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6899      	ldr	r1, [r3, #8]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	899a      	ldrh	r2, [r3, #12]
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	791b      	ldrb	r3, [r3, #4]
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f000 f93a 	bl	800c076 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2204      	movs	r2, #4
 800be06:	761a      	strb	r2, [r3, #24]
      break;
 800be08:	e0f1      	b.n	800bfee <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	791b      	ldrb	r3, [r3, #4]
 800be0e:	4619      	mov	r1, r3
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f001 f9a9 	bl	800d168 <USBH_LL_GetURBState>
 800be16:	4603      	mov	r3, r0
 800be18:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800be1a:	7bbb      	ldrb	r3, [r7, #14]
 800be1c:	2b01      	cmp	r3, #1
 800be1e:	d102      	bne.n	800be26 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2209      	movs	r2, #9
 800be24:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800be26:	7bbb      	ldrb	r3, [r7, #14]
 800be28:	2b05      	cmp	r3, #5
 800be2a:	d102      	bne.n	800be32 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800be2c:	2303      	movs	r3, #3
 800be2e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800be30:	e0d6      	b.n	800bfe0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800be32:	7bbb      	ldrb	r3, [r7, #14]
 800be34:	2b04      	cmp	r3, #4
 800be36:	f040 80d3 	bne.w	800bfe0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	220b      	movs	r2, #11
 800be3e:	761a      	strb	r2, [r3, #24]
      break;
 800be40:	e0ce      	b.n	800bfe0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6899      	ldr	r1, [r3, #8]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	899a      	ldrh	r2, [r3, #12]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	795b      	ldrb	r3, [r3, #5]
 800be4e:	2001      	movs	r0, #1
 800be50:	9000      	str	r0, [sp, #0]
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 f8ea 	bl	800c02c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800be5e:	b29a      	uxth	r2, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2206      	movs	r2, #6
 800be68:	761a      	strb	r2, [r3, #24]
      break;
 800be6a:	e0c0      	b.n	800bfee <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	795b      	ldrb	r3, [r3, #5]
 800be70:	4619      	mov	r1, r3
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f001 f978 	bl	800d168 <USBH_LL_GetURBState>
 800be78:	4603      	mov	r3, r0
 800be7a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800be7c:	7bbb      	ldrb	r3, [r7, #14]
 800be7e:	2b01      	cmp	r3, #1
 800be80:	d103      	bne.n	800be8a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2207      	movs	r2, #7
 800be86:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800be88:	e0ac      	b.n	800bfe4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800be8a:	7bbb      	ldrb	r3, [r7, #14]
 800be8c:	2b05      	cmp	r3, #5
 800be8e:	d105      	bne.n	800be9c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	220c      	movs	r2, #12
 800be94:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800be96:	2303      	movs	r3, #3
 800be98:	73fb      	strb	r3, [r7, #15]
      break;
 800be9a:	e0a3      	b.n	800bfe4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800be9c:	7bbb      	ldrb	r3, [r7, #14]
 800be9e:	2b02      	cmp	r3, #2
 800bea0:	d103      	bne.n	800beaa <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2205      	movs	r2, #5
 800bea6:	761a      	strb	r2, [r3, #24]
      break;
 800bea8:	e09c      	b.n	800bfe4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800beaa:	7bbb      	ldrb	r3, [r7, #14]
 800beac:	2b04      	cmp	r3, #4
 800beae:	f040 8099 	bne.w	800bfe4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	220b      	movs	r2, #11
 800beb6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800beb8:	2302      	movs	r3, #2
 800beba:	73fb      	strb	r3, [r7, #15]
      break;
 800bebc:	e092      	b.n	800bfe4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	791b      	ldrb	r3, [r3, #4]
 800bec2:	2200      	movs	r2, #0
 800bec4:	2100      	movs	r1, #0
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 f8d5 	bl	800c076 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bed2:	b29a      	uxth	r2, r3
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2208      	movs	r2, #8
 800bedc:	761a      	strb	r2, [r3, #24]

      break;
 800bede:	e086      	b.n	800bfee <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	791b      	ldrb	r3, [r3, #4]
 800bee4:	4619      	mov	r1, r3
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f001 f93e 	bl	800d168 <USBH_LL_GetURBState>
 800beec:	4603      	mov	r3, r0
 800beee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bef0:	7bbb      	ldrb	r3, [r7, #14]
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d105      	bne.n	800bf02 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	220d      	movs	r2, #13
 800befa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800befc:	2300      	movs	r3, #0
 800befe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bf00:	e072      	b.n	800bfe8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800bf02:	7bbb      	ldrb	r3, [r7, #14]
 800bf04:	2b04      	cmp	r3, #4
 800bf06:	d103      	bne.n	800bf10 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	220b      	movs	r2, #11
 800bf0c:	761a      	strb	r2, [r3, #24]
      break;
 800bf0e:	e06b      	b.n	800bfe8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800bf10:	7bbb      	ldrb	r3, [r7, #14]
 800bf12:	2b05      	cmp	r3, #5
 800bf14:	d168      	bne.n	800bfe8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800bf16:	2303      	movs	r3, #3
 800bf18:	73fb      	strb	r3, [r7, #15]
      break;
 800bf1a:	e065      	b.n	800bfe8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	795b      	ldrb	r3, [r3, #5]
 800bf20:	2201      	movs	r2, #1
 800bf22:	9200      	str	r2, [sp, #0]
 800bf24:	2200      	movs	r2, #0
 800bf26:	2100      	movs	r1, #0
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f000 f87f 	bl	800c02c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bf34:	b29a      	uxth	r2, r3
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	220a      	movs	r2, #10
 800bf3e:	761a      	strb	r2, [r3, #24]
      break;
 800bf40:	e055      	b.n	800bfee <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	795b      	ldrb	r3, [r3, #5]
 800bf46:	4619      	mov	r1, r3
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f001 f90d 	bl	800d168 <USBH_LL_GetURBState>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bf52:	7bbb      	ldrb	r3, [r7, #14]
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	d105      	bne.n	800bf64 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	220d      	movs	r2, #13
 800bf60:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bf62:	e043      	b.n	800bfec <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bf64:	7bbb      	ldrb	r3, [r7, #14]
 800bf66:	2b02      	cmp	r3, #2
 800bf68:	d103      	bne.n	800bf72 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2209      	movs	r2, #9
 800bf6e:	761a      	strb	r2, [r3, #24]
      break;
 800bf70:	e03c      	b.n	800bfec <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800bf72:	7bbb      	ldrb	r3, [r7, #14]
 800bf74:	2b04      	cmp	r3, #4
 800bf76:	d139      	bne.n	800bfec <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	220b      	movs	r2, #11
 800bf7c:	761a      	strb	r2, [r3, #24]
      break;
 800bf7e:	e035      	b.n	800bfec <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	7e5b      	ldrb	r3, [r3, #25]
 800bf84:	3301      	adds	r3, #1
 800bf86:	b2da      	uxtb	r2, r3
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	765a      	strb	r2, [r3, #25]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	7e5b      	ldrb	r3, [r3, #25]
 800bf90:	2b02      	cmp	r3, #2
 800bf92:	d806      	bhi.n	800bfa2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2201      	movs	r2, #1
 800bf98:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bfa0:	e025      	b.n	800bfee <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bfa8:	2106      	movs	r1, #6
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	795b      	ldrb	r3, [r3, #5]
 800bfb8:	4619      	mov	r1, r3
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f000 f90c 	bl	800c1d8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	791b      	ldrb	r3, [r3, #4]
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f000 f906 	bl	800c1d8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bfd2:	2302      	movs	r3, #2
 800bfd4:	73fb      	strb	r3, [r7, #15]
      break;
 800bfd6:	e00a      	b.n	800bfee <USBH_HandleControl+0x2de>

    default:
      break;
 800bfd8:	bf00      	nop
 800bfda:	e008      	b.n	800bfee <USBH_HandleControl+0x2de>
      break;
 800bfdc:	bf00      	nop
 800bfde:	e006      	b.n	800bfee <USBH_HandleControl+0x2de>
      break;
 800bfe0:	bf00      	nop
 800bfe2:	e004      	b.n	800bfee <USBH_HandleControl+0x2de>
      break;
 800bfe4:	bf00      	nop
 800bfe6:	e002      	b.n	800bfee <USBH_HandleControl+0x2de>
      break;
 800bfe8:	bf00      	nop
 800bfea:	e000      	b.n	800bfee <USBH_HandleControl+0x2de>
      break;
 800bfec:	bf00      	nop
  }

  return status;
 800bfee:	7bfb      	ldrb	r3, [r7, #15]
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3710      	adds	r7, #16
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b088      	sub	sp, #32
 800bffc:	af04      	add	r7, sp, #16
 800bffe:	60f8      	str	r0, [r7, #12]
 800c000:	60b9      	str	r1, [r7, #8]
 800c002:	4613      	mov	r3, r2
 800c004:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c006:	79f9      	ldrb	r1, [r7, #7]
 800c008:	2300      	movs	r3, #0
 800c00a:	9303      	str	r3, [sp, #12]
 800c00c:	2308      	movs	r3, #8
 800c00e:	9302      	str	r3, [sp, #8]
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	9301      	str	r3, [sp, #4]
 800c014:	2300      	movs	r3, #0
 800c016:	9300      	str	r3, [sp, #0]
 800c018:	2300      	movs	r3, #0
 800c01a:	2200      	movs	r2, #0
 800c01c:	68f8      	ldr	r0, [r7, #12]
 800c01e:	f001 f872 	bl	800d106 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c022:	2300      	movs	r3, #0
}
 800c024:	4618      	mov	r0, r3
 800c026:	3710      	adds	r7, #16
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}

0800c02c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b088      	sub	sp, #32
 800c030:	af04      	add	r7, sp, #16
 800c032:	60f8      	str	r0, [r7, #12]
 800c034:	60b9      	str	r1, [r7, #8]
 800c036:	4611      	mov	r1, r2
 800c038:	461a      	mov	r2, r3
 800c03a:	460b      	mov	r3, r1
 800c03c:	80fb      	strh	r3, [r7, #6]
 800c03e:	4613      	mov	r3, r2
 800c040:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d001      	beq.n	800c050 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c04c:	2300      	movs	r3, #0
 800c04e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c050:	7979      	ldrb	r1, [r7, #5]
 800c052:	7e3b      	ldrb	r3, [r7, #24]
 800c054:	9303      	str	r3, [sp, #12]
 800c056:	88fb      	ldrh	r3, [r7, #6]
 800c058:	9302      	str	r3, [sp, #8]
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	9301      	str	r3, [sp, #4]
 800c05e:	2301      	movs	r3, #1
 800c060:	9300      	str	r3, [sp, #0]
 800c062:	2300      	movs	r3, #0
 800c064:	2200      	movs	r2, #0
 800c066:	68f8      	ldr	r0, [r7, #12]
 800c068:	f001 f84d 	bl	800d106 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c06c:	2300      	movs	r3, #0
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3710      	adds	r7, #16
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}

0800c076 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c076:	b580      	push	{r7, lr}
 800c078:	b088      	sub	sp, #32
 800c07a:	af04      	add	r7, sp, #16
 800c07c:	60f8      	str	r0, [r7, #12]
 800c07e:	60b9      	str	r1, [r7, #8]
 800c080:	4611      	mov	r1, r2
 800c082:	461a      	mov	r2, r3
 800c084:	460b      	mov	r3, r1
 800c086:	80fb      	strh	r3, [r7, #6]
 800c088:	4613      	mov	r3, r2
 800c08a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c08c:	7979      	ldrb	r1, [r7, #5]
 800c08e:	2300      	movs	r3, #0
 800c090:	9303      	str	r3, [sp, #12]
 800c092:	88fb      	ldrh	r3, [r7, #6]
 800c094:	9302      	str	r3, [sp, #8]
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	9301      	str	r3, [sp, #4]
 800c09a:	2301      	movs	r3, #1
 800c09c:	9300      	str	r3, [sp, #0]
 800c09e:	2300      	movs	r3, #0
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	68f8      	ldr	r0, [r7, #12]
 800c0a4:	f001 f82f 	bl	800d106 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c0a8:	2300      	movs	r3, #0

}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3710      	adds	r7, #16
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}

0800c0b2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c0b2:	b580      	push	{r7, lr}
 800c0b4:	b088      	sub	sp, #32
 800c0b6:	af04      	add	r7, sp, #16
 800c0b8:	60f8      	str	r0, [r7, #12]
 800c0ba:	60b9      	str	r1, [r7, #8]
 800c0bc:	4611      	mov	r1, r2
 800c0be:	461a      	mov	r2, r3
 800c0c0:	460b      	mov	r3, r1
 800c0c2:	80fb      	strh	r3, [r7, #6]
 800c0c4:	4613      	mov	r3, r2
 800c0c6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d001      	beq.n	800c0d6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c0d6:	7979      	ldrb	r1, [r7, #5]
 800c0d8:	7e3b      	ldrb	r3, [r7, #24]
 800c0da:	9303      	str	r3, [sp, #12]
 800c0dc:	88fb      	ldrh	r3, [r7, #6]
 800c0de:	9302      	str	r3, [sp, #8]
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	9301      	str	r3, [sp, #4]
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	9300      	str	r3, [sp, #0]
 800c0e8:	2302      	movs	r3, #2
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	68f8      	ldr	r0, [r7, #12]
 800c0ee:	f001 f80a 	bl	800d106 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c0f2:	2300      	movs	r3, #0
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3710      	adds	r7, #16
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b088      	sub	sp, #32
 800c100:	af04      	add	r7, sp, #16
 800c102:	60f8      	str	r0, [r7, #12]
 800c104:	60b9      	str	r1, [r7, #8]
 800c106:	4611      	mov	r1, r2
 800c108:	461a      	mov	r2, r3
 800c10a:	460b      	mov	r3, r1
 800c10c:	80fb      	strh	r3, [r7, #6]
 800c10e:	4613      	mov	r3, r2
 800c110:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c112:	7979      	ldrb	r1, [r7, #5]
 800c114:	2300      	movs	r3, #0
 800c116:	9303      	str	r3, [sp, #12]
 800c118:	88fb      	ldrh	r3, [r7, #6]
 800c11a:	9302      	str	r3, [sp, #8]
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	9301      	str	r3, [sp, #4]
 800c120:	2301      	movs	r3, #1
 800c122:	9300      	str	r3, [sp, #0]
 800c124:	2302      	movs	r3, #2
 800c126:	2201      	movs	r2, #1
 800c128:	68f8      	ldr	r0, [r7, #12]
 800c12a:	f000 ffec 	bl	800d106 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c12e:	2300      	movs	r3, #0
}
 800c130:	4618      	mov	r0, r3
 800c132:	3710      	adds	r7, #16
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b086      	sub	sp, #24
 800c13c:	af04      	add	r7, sp, #16
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	4608      	mov	r0, r1
 800c142:	4611      	mov	r1, r2
 800c144:	461a      	mov	r2, r3
 800c146:	4603      	mov	r3, r0
 800c148:	70fb      	strb	r3, [r7, #3]
 800c14a:	460b      	mov	r3, r1
 800c14c:	70bb      	strb	r3, [r7, #2]
 800c14e:	4613      	mov	r3, r2
 800c150:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c152:	7878      	ldrb	r0, [r7, #1]
 800c154:	78ba      	ldrb	r2, [r7, #2]
 800c156:	78f9      	ldrb	r1, [r7, #3]
 800c158:	8b3b      	ldrh	r3, [r7, #24]
 800c15a:	9302      	str	r3, [sp, #8]
 800c15c:	7d3b      	ldrb	r3, [r7, #20]
 800c15e:	9301      	str	r3, [sp, #4]
 800c160:	7c3b      	ldrb	r3, [r7, #16]
 800c162:	9300      	str	r3, [sp, #0]
 800c164:	4603      	mov	r3, r0
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 ff7f 	bl	800d06a <USBH_LL_OpenPipe>

  return USBH_OK;
 800c16c:	2300      	movs	r3, #0
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3708      	adds	r7, #8
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}

0800c176 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c176:	b580      	push	{r7, lr}
 800c178:	b082      	sub	sp, #8
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	6078      	str	r0, [r7, #4]
 800c17e:	460b      	mov	r3, r1
 800c180:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c182:	78fb      	ldrb	r3, [r7, #3]
 800c184:	4619      	mov	r1, r3
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f000 ff9e 	bl	800d0c8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c18c:	2300      	movs	r3, #0
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3708      	adds	r7, #8
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}

0800c196 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c196:	b580      	push	{r7, lr}
 800c198:	b084      	sub	sp, #16
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	6078      	str	r0, [r7, #4]
 800c19e:	460b      	mov	r3, r1
 800c1a0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 f836 	bl	800c214 <USBH_GetFreePipe>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c1ac:	89fb      	ldrh	r3, [r7, #14]
 800c1ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d00a      	beq.n	800c1cc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c1b6:	78fa      	ldrb	r2, [r7, #3]
 800c1b8:	89fb      	ldrh	r3, [r7, #14]
 800c1ba:	f003 030f 	and.w	r3, r3, #15
 800c1be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c1c2:	6879      	ldr	r1, [r7, #4]
 800c1c4:	33e0      	adds	r3, #224	; 0xe0
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	440b      	add	r3, r1
 800c1ca:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c1cc:	89fb      	ldrh	r3, [r7, #14]
 800c1ce:	b2db      	uxtb	r3, r3
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3710      	adds	r7, #16
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}

0800c1d8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b083      	sub	sp, #12
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800c1e4:	78fb      	ldrb	r3, [r7, #3]
 800c1e6:	2b0f      	cmp	r3, #15
 800c1e8:	d80d      	bhi.n	800c206 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c1ea:	78fb      	ldrb	r3, [r7, #3]
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	33e0      	adds	r3, #224	; 0xe0
 800c1f0:	009b      	lsls	r3, r3, #2
 800c1f2:	4413      	add	r3, r2
 800c1f4:	685a      	ldr	r2, [r3, #4]
 800c1f6:	78fb      	ldrb	r3, [r7, #3]
 800c1f8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c1fc:	6879      	ldr	r1, [r7, #4]
 800c1fe:	33e0      	adds	r3, #224	; 0xe0
 800c200:	009b      	lsls	r3, r3, #2
 800c202:	440b      	add	r3, r1
 800c204:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c206:	2300      	movs	r3, #0
}
 800c208:	4618      	mov	r0, r3
 800c20a:	370c      	adds	r7, #12
 800c20c:	46bd      	mov	sp, r7
 800c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c212:	4770      	bx	lr

0800c214 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c214:	b480      	push	{r7}
 800c216:	b085      	sub	sp, #20
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c21c:	2300      	movs	r3, #0
 800c21e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800c220:	2300      	movs	r3, #0
 800c222:	73fb      	strb	r3, [r7, #15]
 800c224:	e00f      	b.n	800c246 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c226:	7bfb      	ldrb	r3, [r7, #15]
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	33e0      	adds	r3, #224	; 0xe0
 800c22c:	009b      	lsls	r3, r3, #2
 800c22e:	4413      	add	r3, r2
 800c230:	685b      	ldr	r3, [r3, #4]
 800c232:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c236:	2b00      	cmp	r3, #0
 800c238:	d102      	bne.n	800c240 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c23a:	7bfb      	ldrb	r3, [r7, #15]
 800c23c:	b29b      	uxth	r3, r3
 800c23e:	e007      	b.n	800c250 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800c240:	7bfb      	ldrb	r3, [r7, #15]
 800c242:	3301      	adds	r3, #1
 800c244:	73fb      	strb	r3, [r7, #15]
 800c246:	7bfb      	ldrb	r3, [r7, #15]
 800c248:	2b0f      	cmp	r3, #15
 800c24a:	d9ec      	bls.n	800c226 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c24c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c250:	4618      	mov	r0, r3
 800c252:	3714      	adds	r7, #20
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr

0800c25c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b084      	sub	sp, #16
 800c260:	af00      	add	r7, sp, #0
 800c262:	4603      	mov	r3, r0
 800c264:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c266:	79fb      	ldrb	r3, [r7, #7]
 800c268:	4a08      	ldr	r2, [pc, #32]	; (800c28c <disk_status+0x30>)
 800c26a:	009b      	lsls	r3, r3, #2
 800c26c:	4413      	add	r3, r2
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	685b      	ldr	r3, [r3, #4]
 800c272:	79fa      	ldrb	r2, [r7, #7]
 800c274:	4905      	ldr	r1, [pc, #20]	; (800c28c <disk_status+0x30>)
 800c276:	440a      	add	r2, r1
 800c278:	7a12      	ldrb	r2, [r2, #8]
 800c27a:	4610      	mov	r0, r2
 800c27c:	4798      	blx	r3
 800c27e:	4603      	mov	r3, r0
 800c280:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c282:	7bfb      	ldrb	r3, [r7, #15]
}
 800c284:	4618      	mov	r0, r3
 800c286:	3710      	adds	r7, #16
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	20002f24 	.word	0x20002f24

0800c290 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	4603      	mov	r3, r0
 800c298:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c29a:	2300      	movs	r3, #0
 800c29c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c29e:	79fb      	ldrb	r3, [r7, #7]
 800c2a0:	4a0d      	ldr	r2, [pc, #52]	; (800c2d8 <disk_initialize+0x48>)
 800c2a2:	5cd3      	ldrb	r3, [r2, r3]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d111      	bne.n	800c2cc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c2a8:	79fb      	ldrb	r3, [r7, #7]
 800c2aa:	4a0b      	ldr	r2, [pc, #44]	; (800c2d8 <disk_initialize+0x48>)
 800c2ac:	2101      	movs	r1, #1
 800c2ae:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c2b0:	79fb      	ldrb	r3, [r7, #7]
 800c2b2:	4a09      	ldr	r2, [pc, #36]	; (800c2d8 <disk_initialize+0x48>)
 800c2b4:	009b      	lsls	r3, r3, #2
 800c2b6:	4413      	add	r3, r2
 800c2b8:	685b      	ldr	r3, [r3, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	79fa      	ldrb	r2, [r7, #7]
 800c2be:	4906      	ldr	r1, [pc, #24]	; (800c2d8 <disk_initialize+0x48>)
 800c2c0:	440a      	add	r2, r1
 800c2c2:	7a12      	ldrb	r2, [r2, #8]
 800c2c4:	4610      	mov	r0, r2
 800c2c6:	4798      	blx	r3
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c2cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3710      	adds	r7, #16
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}
 800c2d6:	bf00      	nop
 800c2d8:	20002f24 	.word	0x20002f24

0800c2dc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c2dc:	b590      	push	{r4, r7, lr}
 800c2de:	b087      	sub	sp, #28
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	60b9      	str	r1, [r7, #8]
 800c2e4:	607a      	str	r2, [r7, #4]
 800c2e6:	603b      	str	r3, [r7, #0]
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c2ec:	7bfb      	ldrb	r3, [r7, #15]
 800c2ee:	4a0a      	ldr	r2, [pc, #40]	; (800c318 <disk_read+0x3c>)
 800c2f0:	009b      	lsls	r3, r3, #2
 800c2f2:	4413      	add	r3, r2
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	689c      	ldr	r4, [r3, #8]
 800c2f8:	7bfb      	ldrb	r3, [r7, #15]
 800c2fa:	4a07      	ldr	r2, [pc, #28]	; (800c318 <disk_read+0x3c>)
 800c2fc:	4413      	add	r3, r2
 800c2fe:	7a18      	ldrb	r0, [r3, #8]
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	68b9      	ldr	r1, [r7, #8]
 800c306:	47a0      	blx	r4
 800c308:	4603      	mov	r3, r0
 800c30a:	75fb      	strb	r3, [r7, #23]
  return res;
 800c30c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c30e:	4618      	mov	r0, r3
 800c310:	371c      	adds	r7, #28
 800c312:	46bd      	mov	sp, r7
 800c314:	bd90      	pop	{r4, r7, pc}
 800c316:	bf00      	nop
 800c318:	20002f24 	.word	0x20002f24

0800c31c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c31c:	b590      	push	{r4, r7, lr}
 800c31e:	b087      	sub	sp, #28
 800c320:	af00      	add	r7, sp, #0
 800c322:	60b9      	str	r1, [r7, #8]
 800c324:	607a      	str	r2, [r7, #4]
 800c326:	603b      	str	r3, [r7, #0]
 800c328:	4603      	mov	r3, r0
 800c32a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c32c:	7bfb      	ldrb	r3, [r7, #15]
 800c32e:	4a0a      	ldr	r2, [pc, #40]	; (800c358 <disk_write+0x3c>)
 800c330:	009b      	lsls	r3, r3, #2
 800c332:	4413      	add	r3, r2
 800c334:	685b      	ldr	r3, [r3, #4]
 800c336:	68dc      	ldr	r4, [r3, #12]
 800c338:	7bfb      	ldrb	r3, [r7, #15]
 800c33a:	4a07      	ldr	r2, [pc, #28]	; (800c358 <disk_write+0x3c>)
 800c33c:	4413      	add	r3, r2
 800c33e:	7a18      	ldrb	r0, [r3, #8]
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	68b9      	ldr	r1, [r7, #8]
 800c346:	47a0      	blx	r4
 800c348:	4603      	mov	r3, r0
 800c34a:	75fb      	strb	r3, [r7, #23]
  return res;
 800c34c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c34e:	4618      	mov	r0, r3
 800c350:	371c      	adds	r7, #28
 800c352:	46bd      	mov	sp, r7
 800c354:	bd90      	pop	{r4, r7, pc}
 800c356:	bf00      	nop
 800c358:	20002f24 	.word	0x20002f24

0800c35c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b084      	sub	sp, #16
 800c360:	af00      	add	r7, sp, #0
 800c362:	4603      	mov	r3, r0
 800c364:	603a      	str	r2, [r7, #0]
 800c366:	71fb      	strb	r3, [r7, #7]
 800c368:	460b      	mov	r3, r1
 800c36a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c36c:	79fb      	ldrb	r3, [r7, #7]
 800c36e:	4a09      	ldr	r2, [pc, #36]	; (800c394 <disk_ioctl+0x38>)
 800c370:	009b      	lsls	r3, r3, #2
 800c372:	4413      	add	r3, r2
 800c374:	685b      	ldr	r3, [r3, #4]
 800c376:	691b      	ldr	r3, [r3, #16]
 800c378:	79fa      	ldrb	r2, [r7, #7]
 800c37a:	4906      	ldr	r1, [pc, #24]	; (800c394 <disk_ioctl+0x38>)
 800c37c:	440a      	add	r2, r1
 800c37e:	7a10      	ldrb	r0, [r2, #8]
 800c380:	79b9      	ldrb	r1, [r7, #6]
 800c382:	683a      	ldr	r2, [r7, #0]
 800c384:	4798      	blx	r3
 800c386:	4603      	mov	r3, r0
 800c388:	73fb      	strb	r3, [r7, #15]
  return res;
 800c38a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3710      	adds	r7, #16
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}
 800c394:	20002f24 	.word	0x20002f24

0800c398 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c398:	b480      	push	{r7}
 800c39a:	b085      	sub	sp, #20
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c3a8:	89fb      	ldrh	r3, [r7, #14]
 800c3aa:	021b      	lsls	r3, r3, #8
 800c3ac:	b21a      	sxth	r2, r3
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	b21b      	sxth	r3, r3
 800c3b4:	4313      	orrs	r3, r2
 800c3b6:	b21b      	sxth	r3, r3
 800c3b8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c3ba:	89fb      	ldrh	r3, [r7, #14]
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3714      	adds	r7, #20
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr

0800c3c8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b085      	sub	sp, #20
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	3303      	adds	r3, #3
 800c3d4:	781b      	ldrb	r3, [r3, #0]
 800c3d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	021b      	lsls	r3, r3, #8
 800c3dc:	687a      	ldr	r2, [r7, #4]
 800c3de:	3202      	adds	r2, #2
 800c3e0:	7812      	ldrb	r2, [r2, #0]
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	021b      	lsls	r3, r3, #8
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	3201      	adds	r2, #1
 800c3ee:	7812      	ldrb	r2, [r2, #0]
 800c3f0:	4313      	orrs	r3, r2
 800c3f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	021b      	lsls	r3, r3, #8
 800c3f8:	687a      	ldr	r2, [r7, #4]
 800c3fa:	7812      	ldrb	r2, [r2, #0]
 800c3fc:	4313      	orrs	r3, r2
 800c3fe:	60fb      	str	r3, [r7, #12]
	return rv;
 800c400:	68fb      	ldr	r3, [r7, #12]
}
 800c402:	4618      	mov	r0, r3
 800c404:	3714      	adds	r7, #20
 800c406:	46bd      	mov	sp, r7
 800c408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40c:	4770      	bx	lr
	...

0800c410 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c410:	b480      	push	{r7}
 800c412:	b085      	sub	sp, #20
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c418:	2300      	movs	r3, #0
 800c41a:	60fb      	str	r3, [r7, #12]
 800c41c:	e010      	b.n	800c440 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c41e:	4a0d      	ldr	r2, [pc, #52]	; (800c454 <clear_lock+0x44>)
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	011b      	lsls	r3, r3, #4
 800c424:	4413      	add	r3, r2
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	687a      	ldr	r2, [r7, #4]
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d105      	bne.n	800c43a <clear_lock+0x2a>
 800c42e:	4a09      	ldr	r2, [pc, #36]	; (800c454 <clear_lock+0x44>)
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	011b      	lsls	r3, r3, #4
 800c434:	4413      	add	r3, r2
 800c436:	2200      	movs	r2, #0
 800c438:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	3301      	adds	r3, #1
 800c43e:	60fb      	str	r3, [r7, #12]
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2b01      	cmp	r3, #1
 800c444:	d9eb      	bls.n	800c41e <clear_lock+0xe>
	}
}
 800c446:	bf00      	nop
 800c448:	bf00      	nop
 800c44a:	3714      	adds	r7, #20
 800c44c:	46bd      	mov	sp, r7
 800c44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c452:	4770      	bx	lr
 800c454:	20002f04 	.word	0x20002f04

0800c458 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b086      	sub	sp, #24
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c460:	2300      	movs	r3, #0
 800c462:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	78db      	ldrb	r3, [r3, #3]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d034      	beq.n	800c4d6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c470:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	7858      	ldrb	r0, [r3, #1]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c47c:	2301      	movs	r3, #1
 800c47e:	697a      	ldr	r2, [r7, #20]
 800c480:	f7ff ff4c 	bl	800c31c <disk_write>
 800c484:	4603      	mov	r3, r0
 800c486:	2b00      	cmp	r3, #0
 800c488:	d002      	beq.n	800c490 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c48a:	2301      	movs	r3, #1
 800c48c:	73fb      	strb	r3, [r7, #15]
 800c48e:	e022      	b.n	800c4d6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2200      	movs	r2, #0
 800c494:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c49a:	697a      	ldr	r2, [r7, #20]
 800c49c:	1ad2      	subs	r2, r2, r3
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	69db      	ldr	r3, [r3, #28]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d217      	bcs.n	800c4d6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	789b      	ldrb	r3, [r3, #2]
 800c4aa:	613b      	str	r3, [r7, #16]
 800c4ac:	e010      	b.n	800c4d0 <sync_window+0x78>
					wsect += fs->fsize;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	69db      	ldr	r3, [r3, #28]
 800c4b2:	697a      	ldr	r2, [r7, #20]
 800c4b4:	4413      	add	r3, r2
 800c4b6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	7858      	ldrb	r0, [r3, #1]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	697a      	ldr	r2, [r7, #20]
 800c4c6:	f7ff ff29 	bl	800c31c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	3b01      	subs	r3, #1
 800c4ce:	613b      	str	r3, [r7, #16]
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	d8eb      	bhi.n	800c4ae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c4d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3718      	adds	r7, #24
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b084      	sub	sp, #16
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4f2:	683a      	ldr	r2, [r7, #0]
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d01b      	beq.n	800c530 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f7ff ffad 	bl	800c458 <sync_window>
 800c4fe:	4603      	mov	r3, r0
 800c500:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c502:	7bfb      	ldrb	r3, [r7, #15]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d113      	bne.n	800c530 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	7858      	ldrb	r0, [r3, #1]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c512:	2301      	movs	r3, #1
 800c514:	683a      	ldr	r2, [r7, #0]
 800c516:	f7ff fee1 	bl	800c2dc <disk_read>
 800c51a:	4603      	mov	r3, r0
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d004      	beq.n	800c52a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c520:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c524:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c526:	2301      	movs	r3, #1
 800c528:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	683a      	ldr	r2, [r7, #0]
 800c52e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800c530:	7bfb      	ldrb	r3, [r7, #15]
}
 800c532:	4618      	mov	r0, r3
 800c534:	3710      	adds	r7, #16
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}

0800c53a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c53a:	b480      	push	{r7}
 800c53c:	b087      	sub	sp, #28
 800c53e:	af00      	add	r7, sp, #0
 800c540:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c546:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d031      	beq.n	800c5b4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	617b      	str	r3, [r7, #20]
 800c556:	e002      	b.n	800c55e <get_ldnumber+0x24>
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	3301      	adds	r3, #1
 800c55c:	617b      	str	r3, [r7, #20]
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	2b20      	cmp	r3, #32
 800c564:	d903      	bls.n	800c56e <get_ldnumber+0x34>
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	781b      	ldrb	r3, [r3, #0]
 800c56a:	2b3a      	cmp	r3, #58	; 0x3a
 800c56c:	d1f4      	bne.n	800c558 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	781b      	ldrb	r3, [r3, #0]
 800c572:	2b3a      	cmp	r3, #58	; 0x3a
 800c574:	d11c      	bne.n	800c5b0 <get_ldnumber+0x76>
			tp = *path;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	1c5a      	adds	r2, r3, #1
 800c580:	60fa      	str	r2, [r7, #12]
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	3b30      	subs	r3, #48	; 0x30
 800c586:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	2b09      	cmp	r3, #9
 800c58c:	d80e      	bhi.n	800c5ac <get_ldnumber+0x72>
 800c58e:	68fa      	ldr	r2, [r7, #12]
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	429a      	cmp	r2, r3
 800c594:	d10a      	bne.n	800c5ac <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d107      	bne.n	800c5ac <get_ldnumber+0x72>
					vol = (int)i;
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c5a0:	697b      	ldr	r3, [r7, #20]
 800c5a2:	3301      	adds	r3, #1
 800c5a4:	617b      	str	r3, [r7, #20]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	697a      	ldr	r2, [r7, #20]
 800c5aa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	e002      	b.n	800c5b6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c5b4:	693b      	ldr	r3, [r7, #16]
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	371c      	adds	r7, #28
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c0:	4770      	bx	lr
	...

0800c5c4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b082      	sub	sp, #8
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	70da      	strb	r2, [r3, #3]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c5da:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c5dc:	6839      	ldr	r1, [r7, #0]
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f7ff ff7e 	bl	800c4e0 <move_window>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d001      	beq.n	800c5ee <check_fs+0x2a>
 800c5ea:	2304      	movs	r3, #4
 800c5ec:	e038      	b.n	800c660 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	3334      	adds	r3, #52	; 0x34
 800c5f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f7ff fece 	bl	800c398 <ld_word>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	461a      	mov	r2, r3
 800c600:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c604:	429a      	cmp	r2, r3
 800c606:	d001      	beq.n	800c60c <check_fs+0x48>
 800c608:	2303      	movs	r3, #3
 800c60a:	e029      	b.n	800c660 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c612:	2be9      	cmp	r3, #233	; 0xe9
 800c614:	d009      	beq.n	800c62a <check_fs+0x66>
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c61c:	2beb      	cmp	r3, #235	; 0xeb
 800c61e:	d11e      	bne.n	800c65e <check_fs+0x9a>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800c626:	2b90      	cmp	r3, #144	; 0x90
 800c628:	d119      	bne.n	800c65e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	3334      	adds	r3, #52	; 0x34
 800c62e:	3336      	adds	r3, #54	; 0x36
 800c630:	4618      	mov	r0, r3
 800c632:	f7ff fec9 	bl	800c3c8 <ld_dword>
 800c636:	4603      	mov	r3, r0
 800c638:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c63c:	4a0a      	ldr	r2, [pc, #40]	; (800c668 <check_fs+0xa4>)
 800c63e:	4293      	cmp	r3, r2
 800c640:	d101      	bne.n	800c646 <check_fs+0x82>
 800c642:	2300      	movs	r3, #0
 800c644:	e00c      	b.n	800c660 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	3334      	adds	r3, #52	; 0x34
 800c64a:	3352      	adds	r3, #82	; 0x52
 800c64c:	4618      	mov	r0, r3
 800c64e:	f7ff febb 	bl	800c3c8 <ld_dword>
 800c652:	4603      	mov	r3, r0
 800c654:	4a05      	ldr	r2, [pc, #20]	; (800c66c <check_fs+0xa8>)
 800c656:	4293      	cmp	r3, r2
 800c658:	d101      	bne.n	800c65e <check_fs+0x9a>
 800c65a:	2300      	movs	r3, #0
 800c65c:	e000      	b.n	800c660 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c65e:	2302      	movs	r3, #2
}
 800c660:	4618      	mov	r0, r3
 800c662:	3708      	adds	r7, #8
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}
 800c668:	00544146 	.word	0x00544146
 800c66c:	33544146 	.word	0x33544146

0800c670 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b096      	sub	sp, #88	; 0x58
 800c674:	af00      	add	r7, sp, #0
 800c676:	60f8      	str	r0, [r7, #12]
 800c678:	60b9      	str	r1, [r7, #8]
 800c67a:	4613      	mov	r3, r2
 800c67c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	2200      	movs	r2, #0
 800c682:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c684:	68f8      	ldr	r0, [r7, #12]
 800c686:	f7ff ff58 	bl	800c53a <get_ldnumber>
 800c68a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c68c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c68e:	2b00      	cmp	r3, #0
 800c690:	da01      	bge.n	800c696 <find_volume+0x26>
 800c692:	230b      	movs	r3, #11
 800c694:	e262      	b.n	800cb5c <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c696:	4a9f      	ldr	r2, [pc, #636]	; (800c914 <find_volume+0x2a4>)
 800c698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c69a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c69e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d101      	bne.n	800c6aa <find_volume+0x3a>
 800c6a6:	230c      	movs	r3, #12
 800c6a8:	e258      	b.n	800cb5c <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6ae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c6b0:	79fb      	ldrb	r3, [r7, #7]
 800c6b2:	f023 0301 	bic.w	r3, r3, #1
 800c6b6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d01a      	beq.n	800c6f6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c2:	785b      	ldrb	r3, [r3, #1]
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f7ff fdc9 	bl	800c25c <disk_status>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c6d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c6d4:	f003 0301 	and.w	r3, r3, #1
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d10c      	bne.n	800c6f6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c6dc:	79fb      	ldrb	r3, [r7, #7]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d007      	beq.n	800c6f2 <find_volume+0x82>
 800c6e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c6e6:	f003 0304 	and.w	r3, r3, #4
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d001      	beq.n	800c6f2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c6ee:	230a      	movs	r3, #10
 800c6f0:	e234      	b.n	800cb5c <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	e232      	b.n	800cb5c <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c6fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6fe:	b2da      	uxtb	r2, r3
 800c700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c702:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c706:	785b      	ldrb	r3, [r3, #1]
 800c708:	4618      	mov	r0, r3
 800c70a:	f7ff fdc1 	bl	800c290 <disk_initialize>
 800c70e:	4603      	mov	r3, r0
 800c710:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c714:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c718:	f003 0301 	and.w	r3, r3, #1
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d001      	beq.n	800c724 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c720:	2303      	movs	r3, #3
 800c722:	e21b      	b.n	800cb5c <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c724:	79fb      	ldrb	r3, [r7, #7]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d007      	beq.n	800c73a <find_volume+0xca>
 800c72a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c72e:	f003 0304 	and.w	r3, r3, #4
 800c732:	2b00      	cmp	r3, #0
 800c734:	d001      	beq.n	800c73a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c736:	230a      	movs	r3, #10
 800c738:	e210      	b.n	800cb5c <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c73c:	7858      	ldrb	r0, [r3, #1]
 800c73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c740:	330c      	adds	r3, #12
 800c742:	461a      	mov	r2, r3
 800c744:	2102      	movs	r1, #2
 800c746:	f7ff fe09 	bl	800c35c <disk_ioctl>
 800c74a:	4603      	mov	r3, r0
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d001      	beq.n	800c754 <find_volume+0xe4>
 800c750:	2301      	movs	r3, #1
 800c752:	e203      	b.n	800cb5c <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800c754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c756:	899b      	ldrh	r3, [r3, #12]
 800c758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c75c:	d80d      	bhi.n	800c77a <find_volume+0x10a>
 800c75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c760:	899b      	ldrh	r3, [r3, #12]
 800c762:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c766:	d308      	bcc.n	800c77a <find_volume+0x10a>
 800c768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c76a:	899b      	ldrh	r3, [r3, #12]
 800c76c:	461a      	mov	r2, r3
 800c76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c770:	899b      	ldrh	r3, [r3, #12]
 800c772:	3b01      	subs	r3, #1
 800c774:	4013      	ands	r3, r2
 800c776:	2b00      	cmp	r3, #0
 800c778:	d001      	beq.n	800c77e <find_volume+0x10e>
 800c77a:	2301      	movs	r3, #1
 800c77c:	e1ee      	b.n	800cb5c <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c77e:	2300      	movs	r3, #0
 800c780:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c782:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c784:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c786:	f7ff ff1d 	bl	800c5c4 <check_fs>
 800c78a:	4603      	mov	r3, r0
 800c78c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c790:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c794:	2b02      	cmp	r3, #2
 800c796:	d149      	bne.n	800c82c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c798:	2300      	movs	r3, #0
 800c79a:	643b      	str	r3, [r7, #64]	; 0x40
 800c79c:	e01e      	b.n	800c7dc <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c7a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7a6:	011b      	lsls	r3, r3, #4
 800c7a8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c7ac:	4413      	add	r3, r2
 800c7ae:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b2:	3304      	adds	r3, #4
 800c7b4:	781b      	ldrb	r3, [r3, #0]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d006      	beq.n	800c7c8 <find_volume+0x158>
 800c7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7bc:	3308      	adds	r3, #8
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f7ff fe02 	bl	800c3c8 <ld_dword>
 800c7c4:	4602      	mov	r2, r0
 800c7c6:	e000      	b.n	800c7ca <find_volume+0x15a>
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7cc:	009b      	lsls	r3, r3, #2
 800c7ce:	3358      	adds	r3, #88	; 0x58
 800c7d0:	443b      	add	r3, r7
 800c7d2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c7d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7d8:	3301      	adds	r3, #1
 800c7da:	643b      	str	r3, [r7, #64]	; 0x40
 800c7dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7de:	2b03      	cmp	r3, #3
 800c7e0:	d9dd      	bls.n	800c79e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c7e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d002      	beq.n	800c7f2 <find_volume+0x182>
 800c7ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7ee:	3b01      	subs	r3, #1
 800c7f0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c7f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7f4:	009b      	lsls	r3, r3, #2
 800c7f6:	3358      	adds	r3, #88	; 0x58
 800c7f8:	443b      	add	r3, r7
 800c7fa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c7fe:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c802:	2b00      	cmp	r3, #0
 800c804:	d005      	beq.n	800c812 <find_volume+0x1a2>
 800c806:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c808:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c80a:	f7ff fedb 	bl	800c5c4 <check_fs>
 800c80e:	4603      	mov	r3, r0
 800c810:	e000      	b.n	800c814 <find_volume+0x1a4>
 800c812:	2303      	movs	r3, #3
 800c814:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c818:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c81c:	2b01      	cmp	r3, #1
 800c81e:	d905      	bls.n	800c82c <find_volume+0x1bc>
 800c820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c822:	3301      	adds	r3, #1
 800c824:	643b      	str	r3, [r7, #64]	; 0x40
 800c826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c828:	2b03      	cmp	r3, #3
 800c82a:	d9e2      	bls.n	800c7f2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c82c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c830:	2b04      	cmp	r3, #4
 800c832:	d101      	bne.n	800c838 <find_volume+0x1c8>
 800c834:	2301      	movs	r3, #1
 800c836:	e191      	b.n	800cb5c <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c838:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c83c:	2b01      	cmp	r3, #1
 800c83e:	d901      	bls.n	800c844 <find_volume+0x1d4>
 800c840:	230d      	movs	r3, #13
 800c842:	e18b      	b.n	800cb5c <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c846:	3334      	adds	r3, #52	; 0x34
 800c848:	330b      	adds	r3, #11
 800c84a:	4618      	mov	r0, r3
 800c84c:	f7ff fda4 	bl	800c398 <ld_word>
 800c850:	4603      	mov	r3, r0
 800c852:	461a      	mov	r2, r3
 800c854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c856:	899b      	ldrh	r3, [r3, #12]
 800c858:	429a      	cmp	r2, r3
 800c85a:	d001      	beq.n	800c860 <find_volume+0x1f0>
 800c85c:	230d      	movs	r3, #13
 800c85e:	e17d      	b.n	800cb5c <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c862:	3334      	adds	r3, #52	; 0x34
 800c864:	3316      	adds	r3, #22
 800c866:	4618      	mov	r0, r3
 800c868:	f7ff fd96 	bl	800c398 <ld_word>
 800c86c:	4603      	mov	r3, r0
 800c86e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c872:	2b00      	cmp	r3, #0
 800c874:	d106      	bne.n	800c884 <find_volume+0x214>
 800c876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c878:	3334      	adds	r3, #52	; 0x34
 800c87a:	3324      	adds	r3, #36	; 0x24
 800c87c:	4618      	mov	r0, r3
 800c87e:	f7ff fda3 	bl	800c3c8 <ld_dword>
 800c882:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c886:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c888:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c88c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c892:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c896:	789b      	ldrb	r3, [r3, #2]
 800c898:	2b01      	cmp	r3, #1
 800c89a:	d005      	beq.n	800c8a8 <find_volume+0x238>
 800c89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c89e:	789b      	ldrb	r3, [r3, #2]
 800c8a0:	2b02      	cmp	r3, #2
 800c8a2:	d001      	beq.n	800c8a8 <find_volume+0x238>
 800c8a4:	230d      	movs	r3, #13
 800c8a6:	e159      	b.n	800cb5c <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8aa:	789b      	ldrb	r3, [r3, #2]
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8b0:	fb02 f303 	mul.w	r3, r2, r3
 800c8b4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8bc:	b29a      	uxth	r2, r3
 800c8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c4:	895b      	ldrh	r3, [r3, #10]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d008      	beq.n	800c8dc <find_volume+0x26c>
 800c8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8cc:	895b      	ldrh	r3, [r3, #10]
 800c8ce:	461a      	mov	r2, r3
 800c8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d2:	895b      	ldrh	r3, [r3, #10]
 800c8d4:	3b01      	subs	r3, #1
 800c8d6:	4013      	ands	r3, r2
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d001      	beq.n	800c8e0 <find_volume+0x270>
 800c8dc:	230d      	movs	r3, #13
 800c8de:	e13d      	b.n	800cb5c <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e2:	3334      	adds	r3, #52	; 0x34
 800c8e4:	3311      	adds	r3, #17
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7ff fd56 	bl	800c398 <ld_word>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	461a      	mov	r2, r3
 800c8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f6:	891b      	ldrh	r3, [r3, #8]
 800c8f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8fa:	8992      	ldrh	r2, [r2, #12]
 800c8fc:	0952      	lsrs	r2, r2, #5
 800c8fe:	b292      	uxth	r2, r2
 800c900:	fbb3 f1f2 	udiv	r1, r3, r2
 800c904:	fb01 f202 	mul.w	r2, r1, r2
 800c908:	1a9b      	subs	r3, r3, r2
 800c90a:	b29b      	uxth	r3, r3
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d003      	beq.n	800c918 <find_volume+0x2a8>
 800c910:	230d      	movs	r3, #13
 800c912:	e123      	b.n	800cb5c <find_volume+0x4ec>
 800c914:	20002efc 	.word	0x20002efc

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c91a:	3334      	adds	r3, #52	; 0x34
 800c91c:	3313      	adds	r3, #19
 800c91e:	4618      	mov	r0, r3
 800c920:	f7ff fd3a 	bl	800c398 <ld_word>
 800c924:	4603      	mov	r3, r0
 800c926:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d106      	bne.n	800c93c <find_volume+0x2cc>
 800c92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c930:	3334      	adds	r3, #52	; 0x34
 800c932:	3320      	adds	r3, #32
 800c934:	4618      	mov	r0, r3
 800c936:	f7ff fd47 	bl	800c3c8 <ld_dword>
 800c93a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c93e:	3334      	adds	r3, #52	; 0x34
 800c940:	330e      	adds	r3, #14
 800c942:	4618      	mov	r0, r3
 800c944:	f7ff fd28 	bl	800c398 <ld_word>
 800c948:	4603      	mov	r3, r0
 800c94a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c94c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d101      	bne.n	800c956 <find_volume+0x2e6>
 800c952:	230d      	movs	r3, #13
 800c954:	e102      	b.n	800cb5c <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c956:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c95a:	4413      	add	r3, r2
 800c95c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c95e:	8911      	ldrh	r1, [r2, #8]
 800c960:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c962:	8992      	ldrh	r2, [r2, #12]
 800c964:	0952      	lsrs	r2, r2, #5
 800c966:	b292      	uxth	r2, r2
 800c968:	fbb1 f2f2 	udiv	r2, r1, r2
 800c96c:	b292      	uxth	r2, r2
 800c96e:	4413      	add	r3, r2
 800c970:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c972:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c976:	429a      	cmp	r2, r3
 800c978:	d201      	bcs.n	800c97e <find_volume+0x30e>
 800c97a:	230d      	movs	r3, #13
 800c97c:	e0ee      	b.n	800cb5c <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c97e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c982:	1ad3      	subs	r3, r2, r3
 800c984:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c986:	8952      	ldrh	r2, [r2, #10]
 800c988:	fbb3 f3f2 	udiv	r3, r3, r2
 800c98c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c990:	2b00      	cmp	r3, #0
 800c992:	d101      	bne.n	800c998 <find_volume+0x328>
 800c994:	230d      	movs	r3, #13
 800c996:	e0e1      	b.n	800cb5c <find_volume+0x4ec>
		fmt = FS_FAT32;
 800c998:	2303      	movs	r3, #3
 800c99a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d802      	bhi.n	800c9ae <find_volume+0x33e>
 800c9a8:	2302      	movs	r3, #2
 800c9aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d802      	bhi.n	800c9be <find_volume+0x34e>
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c0:	1c9a      	adds	r2, r3, #2
 800c9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c4:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800c9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c9ca:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c9cc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c9ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9d0:	441a      	add	r2, r3
 800c9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800c9d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9da:	441a      	add	r2, r3
 800c9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9de:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800c9e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c9e4:	2b03      	cmp	r3, #3
 800c9e6:	d11e      	bne.n	800ca26 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ea:	3334      	adds	r3, #52	; 0x34
 800c9ec:	332a      	adds	r3, #42	; 0x2a
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7ff fcd2 	bl	800c398 <ld_word>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d001      	beq.n	800c9fe <find_volume+0x38e>
 800c9fa:	230d      	movs	r3, #13
 800c9fc:	e0ae      	b.n	800cb5c <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca00:	891b      	ldrh	r3, [r3, #8]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d001      	beq.n	800ca0a <find_volume+0x39a>
 800ca06:	230d      	movs	r3, #13
 800ca08:	e0a8      	b.n	800cb5c <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ca0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0c:	3334      	adds	r3, #52	; 0x34
 800ca0e:	332c      	adds	r3, #44	; 0x2c
 800ca10:	4618      	mov	r0, r3
 800ca12:	f7ff fcd9 	bl	800c3c8 <ld_dword>
 800ca16:	4602      	mov	r2, r0
 800ca18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ca1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1e:	699b      	ldr	r3, [r3, #24]
 800ca20:	009b      	lsls	r3, r3, #2
 800ca22:	647b      	str	r3, [r7, #68]	; 0x44
 800ca24:	e01f      	b.n	800ca66 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ca26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca28:	891b      	ldrh	r3, [r3, #8]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d101      	bne.n	800ca32 <find_volume+0x3c2>
 800ca2e:	230d      	movs	r3, #13
 800ca30:	e094      	b.n	800cb5c <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ca32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca38:	441a      	add	r2, r3
 800ca3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ca3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ca42:	2b02      	cmp	r3, #2
 800ca44:	d103      	bne.n	800ca4e <find_volume+0x3de>
 800ca46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca48:	699b      	ldr	r3, [r3, #24]
 800ca4a:	005b      	lsls	r3, r3, #1
 800ca4c:	e00a      	b.n	800ca64 <find_volume+0x3f4>
 800ca4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca50:	699a      	ldr	r2, [r3, #24]
 800ca52:	4613      	mov	r3, r2
 800ca54:	005b      	lsls	r3, r3, #1
 800ca56:	4413      	add	r3, r2
 800ca58:	085a      	lsrs	r2, r3, #1
 800ca5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca5c:	699b      	ldr	r3, [r3, #24]
 800ca5e:	f003 0301 	and.w	r3, r3, #1
 800ca62:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ca64:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ca66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca68:	69da      	ldr	r2, [r3, #28]
 800ca6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6c:	899b      	ldrh	r3, [r3, #12]
 800ca6e:	4619      	mov	r1, r3
 800ca70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca72:	440b      	add	r3, r1
 800ca74:	3b01      	subs	r3, #1
 800ca76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ca78:	8989      	ldrh	r1, [r1, #12]
 800ca7a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d201      	bcs.n	800ca86 <find_volume+0x416>
 800ca82:	230d      	movs	r3, #13
 800ca84:	e06a      	b.n	800cb5c <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ca86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca8c:	615a      	str	r2, [r3, #20]
 800ca8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca90:	695a      	ldr	r2, [r3, #20]
 800ca92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca94:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800ca96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca98:	2280      	movs	r2, #128	; 0x80
 800ca9a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ca9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800caa0:	2b03      	cmp	r3, #3
 800caa2:	d149      	bne.n	800cb38 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800caa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa6:	3334      	adds	r3, #52	; 0x34
 800caa8:	3330      	adds	r3, #48	; 0x30
 800caaa:	4618      	mov	r0, r3
 800caac:	f7ff fc74 	bl	800c398 <ld_word>
 800cab0:	4603      	mov	r3, r0
 800cab2:	2b01      	cmp	r3, #1
 800cab4:	d140      	bne.n	800cb38 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cab8:	3301      	adds	r3, #1
 800caba:	4619      	mov	r1, r3
 800cabc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cabe:	f7ff fd0f 	bl	800c4e0 <move_window>
 800cac2:	4603      	mov	r3, r0
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d137      	bne.n	800cb38 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800cac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caca:	2200      	movs	r2, #0
 800cacc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad0:	3334      	adds	r3, #52	; 0x34
 800cad2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cad6:	4618      	mov	r0, r3
 800cad8:	f7ff fc5e 	bl	800c398 <ld_word>
 800cadc:	4603      	mov	r3, r0
 800cade:	461a      	mov	r2, r3
 800cae0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cae4:	429a      	cmp	r2, r3
 800cae6:	d127      	bne.n	800cb38 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caea:	3334      	adds	r3, #52	; 0x34
 800caec:	4618      	mov	r0, r3
 800caee:	f7ff fc6b 	bl	800c3c8 <ld_dword>
 800caf2:	4603      	mov	r3, r0
 800caf4:	4a1b      	ldr	r2, [pc, #108]	; (800cb64 <find_volume+0x4f4>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d11e      	bne.n	800cb38 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cafc:	3334      	adds	r3, #52	; 0x34
 800cafe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cb02:	4618      	mov	r0, r3
 800cb04:	f7ff fc60 	bl	800c3c8 <ld_dword>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	4a17      	ldr	r2, [pc, #92]	; (800cb68 <find_volume+0x4f8>)
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d113      	bne.n	800cb38 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cb10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb12:	3334      	adds	r3, #52	; 0x34
 800cb14:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f7ff fc55 	bl	800c3c8 <ld_dword>
 800cb1e:	4602      	mov	r2, r0
 800cb20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb22:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cb24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb26:	3334      	adds	r3, #52	; 0x34
 800cb28:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f7ff fc4b 	bl	800c3c8 <ld_dword>
 800cb32:	4602      	mov	r2, r0
 800cb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb36:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb3a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cb3e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cb40:	4b0a      	ldr	r3, [pc, #40]	; (800cb6c <find_volume+0x4fc>)
 800cb42:	881b      	ldrh	r3, [r3, #0]
 800cb44:	3301      	adds	r3, #1
 800cb46:	b29a      	uxth	r2, r3
 800cb48:	4b08      	ldr	r3, [pc, #32]	; (800cb6c <find_volume+0x4fc>)
 800cb4a:	801a      	strh	r2, [r3, #0]
 800cb4c:	4b07      	ldr	r3, [pc, #28]	; (800cb6c <find_volume+0x4fc>)
 800cb4e:	881a      	ldrh	r2, [r3, #0]
 800cb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb52:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cb54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cb56:	f7ff fc5b 	bl	800c410 <clear_lock>
#endif
	return FR_OK;
 800cb5a:	2300      	movs	r3, #0
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3758      	adds	r7, #88	; 0x58
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}
 800cb64:	41615252 	.word	0x41615252
 800cb68:	61417272 	.word	0x61417272
 800cb6c:	20002f00 	.word	0x20002f00

0800cb70 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b088      	sub	sp, #32
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	60f8      	str	r0, [r7, #12]
 800cb78:	60b9      	str	r1, [r7, #8]
 800cb7a:	4613      	mov	r3, r2
 800cb7c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cb82:	f107 0310 	add.w	r3, r7, #16
 800cb86:	4618      	mov	r0, r3
 800cb88:	f7ff fcd7 	bl	800c53a <get_ldnumber>
 800cb8c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cb8e:	69fb      	ldr	r3, [r7, #28]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	da01      	bge.n	800cb98 <f_mount+0x28>
 800cb94:	230b      	movs	r3, #11
 800cb96:	e02b      	b.n	800cbf0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cb98:	4a17      	ldr	r2, [pc, #92]	; (800cbf8 <f_mount+0x88>)
 800cb9a:	69fb      	ldr	r3, [r7, #28]
 800cb9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cba0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cba2:	69bb      	ldr	r3, [r7, #24]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d005      	beq.n	800cbb4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cba8:	69b8      	ldr	r0, [r7, #24]
 800cbaa:	f7ff fc31 	bl	800c410 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cbae:	69bb      	ldr	r3, [r7, #24]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d002      	beq.n	800cbc0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cbc0:	68fa      	ldr	r2, [r7, #12]
 800cbc2:	490d      	ldr	r1, [pc, #52]	; (800cbf8 <f_mount+0x88>)
 800cbc4:	69fb      	ldr	r3, [r7, #28]
 800cbc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d002      	beq.n	800cbd6 <f_mount+0x66>
 800cbd0:	79fb      	ldrb	r3, [r7, #7]
 800cbd2:	2b01      	cmp	r3, #1
 800cbd4:	d001      	beq.n	800cbda <f_mount+0x6a>
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	e00a      	b.n	800cbf0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cbda:	f107 010c 	add.w	r1, r7, #12
 800cbde:	f107 0308 	add.w	r3, r7, #8
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f7ff fd43 	bl	800c670 <find_volume>
 800cbea:	4603      	mov	r3, r0
 800cbec:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cbee:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3720      	adds	r7, #32
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}
 800cbf8:	20002efc 	.word	0x20002efc

0800cbfc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	b087      	sub	sp, #28
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	60f8      	str	r0, [r7, #12]
 800cc04:	60b9      	str	r1, [r7, #8]
 800cc06:	4613      	mov	r3, r2
 800cc08:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cc12:	4b1f      	ldr	r3, [pc, #124]	; (800cc90 <FATFS_LinkDriverEx+0x94>)
 800cc14:	7a5b      	ldrb	r3, [r3, #9]
 800cc16:	b2db      	uxtb	r3, r3
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d131      	bne.n	800cc80 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cc1c:	4b1c      	ldr	r3, [pc, #112]	; (800cc90 <FATFS_LinkDriverEx+0x94>)
 800cc1e:	7a5b      	ldrb	r3, [r3, #9]
 800cc20:	b2db      	uxtb	r3, r3
 800cc22:	461a      	mov	r2, r3
 800cc24:	4b1a      	ldr	r3, [pc, #104]	; (800cc90 <FATFS_LinkDriverEx+0x94>)
 800cc26:	2100      	movs	r1, #0
 800cc28:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cc2a:	4b19      	ldr	r3, [pc, #100]	; (800cc90 <FATFS_LinkDriverEx+0x94>)
 800cc2c:	7a5b      	ldrb	r3, [r3, #9]
 800cc2e:	b2db      	uxtb	r3, r3
 800cc30:	4a17      	ldr	r2, [pc, #92]	; (800cc90 <FATFS_LinkDriverEx+0x94>)
 800cc32:	009b      	lsls	r3, r3, #2
 800cc34:	4413      	add	r3, r2
 800cc36:	68fa      	ldr	r2, [r7, #12]
 800cc38:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cc3a:	4b15      	ldr	r3, [pc, #84]	; (800cc90 <FATFS_LinkDriverEx+0x94>)
 800cc3c:	7a5b      	ldrb	r3, [r3, #9]
 800cc3e:	b2db      	uxtb	r3, r3
 800cc40:	461a      	mov	r2, r3
 800cc42:	4b13      	ldr	r3, [pc, #76]	; (800cc90 <FATFS_LinkDriverEx+0x94>)
 800cc44:	4413      	add	r3, r2
 800cc46:	79fa      	ldrb	r2, [r7, #7]
 800cc48:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cc4a:	4b11      	ldr	r3, [pc, #68]	; (800cc90 <FATFS_LinkDriverEx+0x94>)
 800cc4c:	7a5b      	ldrb	r3, [r3, #9]
 800cc4e:	b2db      	uxtb	r3, r3
 800cc50:	1c5a      	adds	r2, r3, #1
 800cc52:	b2d1      	uxtb	r1, r2
 800cc54:	4a0e      	ldr	r2, [pc, #56]	; (800cc90 <FATFS_LinkDriverEx+0x94>)
 800cc56:	7251      	strb	r1, [r2, #9]
 800cc58:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cc5a:	7dbb      	ldrb	r3, [r7, #22]
 800cc5c:	3330      	adds	r3, #48	; 0x30
 800cc5e:	b2da      	uxtb	r2, r3
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	3301      	adds	r3, #1
 800cc68:	223a      	movs	r2, #58	; 0x3a
 800cc6a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	3302      	adds	r3, #2
 800cc70:	222f      	movs	r2, #47	; 0x2f
 800cc72:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	3303      	adds	r3, #3
 800cc78:	2200      	movs	r2, #0
 800cc7a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cc80:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	371c      	adds	r7, #28
 800cc86:	46bd      	mov	sp, r7
 800cc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8c:	4770      	bx	lr
 800cc8e:	bf00      	nop
 800cc90:	20002f24 	.word	0x20002f24

0800cc94 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b082      	sub	sp, #8
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cc9e:	2200      	movs	r2, #0
 800cca0:	6839      	ldr	r1, [r7, #0]
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f7ff ffaa 	bl	800cbfc <FATFS_LinkDriverEx>
 800cca8:	4603      	mov	r3, r0
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	3708      	adds	r7, #8
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}
	...

0800ccb4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ccb8:	2201      	movs	r2, #1
 800ccba:	490e      	ldr	r1, [pc, #56]	; (800ccf4 <MX_USB_HOST_Init+0x40>)
 800ccbc:	480e      	ldr	r0, [pc, #56]	; (800ccf8 <MX_USB_HOST_Init+0x44>)
 800ccbe:	f7fd fe7b 	bl	800a9b8 <USBH_Init>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d001      	beq.n	800cccc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ccc8:	f7f4 ff4a 	bl	8001b60 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800cccc:	490b      	ldr	r1, [pc, #44]	; (800ccfc <MX_USB_HOST_Init+0x48>)
 800ccce:	480a      	ldr	r0, [pc, #40]	; (800ccf8 <MX_USB_HOST_Init+0x44>)
 800ccd0:	f7fd ff00 	bl	800aad4 <USBH_RegisterClass>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d001      	beq.n	800ccde <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ccda:	f7f4 ff41 	bl	8001b60 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ccde:	4806      	ldr	r0, [pc, #24]	; (800ccf8 <MX_USB_HOST_Init+0x44>)
 800cce0:	f7fd ff84 	bl	800abec <USBH_Start>
 800cce4:	4603      	mov	r3, r0
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d001      	beq.n	800ccee <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ccea:	f7f4 ff39 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ccee:	bf00      	nop
 800ccf0:	bd80      	pop	{r7, pc}
 800ccf2:	bf00      	nop
 800ccf4:	0800cd15 	.word	0x0800cd15
 800ccf8:	20002f30 	.word	0x20002f30
 800ccfc:	20000044 	.word	0x20000044

0800cd00 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800cd04:	4802      	ldr	r0, [pc, #8]	; (800cd10 <MX_USB_HOST_Process+0x10>)
 800cd06:	f7fd ff81 	bl	800ac0c <USBH_Process>
}
 800cd0a:	bf00      	nop
 800cd0c:	bd80      	pop	{r7, pc}
 800cd0e:	bf00      	nop
 800cd10:	20002f30 	.word	0x20002f30

0800cd14 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800cd14:	b480      	push	{r7}
 800cd16:	b083      	sub	sp, #12
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	460b      	mov	r3, r1
 800cd1e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800cd20:	78fb      	ldrb	r3, [r7, #3]
 800cd22:	3b01      	subs	r3, #1
 800cd24:	2b04      	cmp	r3, #4
 800cd26:	d819      	bhi.n	800cd5c <USBH_UserProcess+0x48>
 800cd28:	a201      	add	r2, pc, #4	; (adr r2, 800cd30 <USBH_UserProcess+0x1c>)
 800cd2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd2e:	bf00      	nop
 800cd30:	0800cd5d 	.word	0x0800cd5d
 800cd34:	0800cd4d 	.word	0x0800cd4d
 800cd38:	0800cd5d 	.word	0x0800cd5d
 800cd3c:	0800cd55 	.word	0x0800cd55
 800cd40:	0800cd45 	.word	0x0800cd45
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800cd44:	4b09      	ldr	r3, [pc, #36]	; (800cd6c <USBH_UserProcess+0x58>)
 800cd46:	2203      	movs	r2, #3
 800cd48:	701a      	strb	r2, [r3, #0]
  break;
 800cd4a:	e008      	b.n	800cd5e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800cd4c:	4b07      	ldr	r3, [pc, #28]	; (800cd6c <USBH_UserProcess+0x58>)
 800cd4e:	2202      	movs	r2, #2
 800cd50:	701a      	strb	r2, [r3, #0]
  break;
 800cd52:	e004      	b.n	800cd5e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800cd54:	4b05      	ldr	r3, [pc, #20]	; (800cd6c <USBH_UserProcess+0x58>)
 800cd56:	2201      	movs	r2, #1
 800cd58:	701a      	strb	r2, [r3, #0]
  break;
 800cd5a:	e000      	b.n	800cd5e <USBH_UserProcess+0x4a>

  default:
  break;
 800cd5c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800cd5e:	bf00      	nop
 800cd60:	370c      	adds	r7, #12
 800cd62:	46bd      	mov	sp, r7
 800cd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd68:	4770      	bx	lr
 800cd6a:	bf00      	nop
 800cd6c:	20003308 	.word	0x20003308

0800cd70 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b08a      	sub	sp, #40	; 0x28
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cd78:	f107 0314 	add.w	r3, r7, #20
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	601a      	str	r2, [r3, #0]
 800cd80:	605a      	str	r2, [r3, #4]
 800cd82:	609a      	str	r2, [r3, #8]
 800cd84:	60da      	str	r2, [r3, #12]
 800cd86:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd90:	d147      	bne.n	800ce22 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cd92:	2300      	movs	r3, #0
 800cd94:	613b      	str	r3, [r7, #16]
 800cd96:	4b25      	ldr	r3, [pc, #148]	; (800ce2c <HAL_HCD_MspInit+0xbc>)
 800cd98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd9a:	4a24      	ldr	r2, [pc, #144]	; (800ce2c <HAL_HCD_MspInit+0xbc>)
 800cd9c:	f043 0301 	orr.w	r3, r3, #1
 800cda0:	6313      	str	r3, [r2, #48]	; 0x30
 800cda2:	4b22      	ldr	r3, [pc, #136]	; (800ce2c <HAL_HCD_MspInit+0xbc>)
 800cda4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cda6:	f003 0301 	and.w	r3, r3, #1
 800cdaa:	613b      	str	r3, [r7, #16]
 800cdac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800cdae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cdb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cdbc:	f107 0314 	add.w	r3, r7, #20
 800cdc0:	4619      	mov	r1, r3
 800cdc2:	481b      	ldr	r0, [pc, #108]	; (800ce30 <HAL_HCD_MspInit+0xc0>)
 800cdc4:	f7f5 ffec 	bl	8002da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cdc8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cdcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cdce:	2302      	movs	r3, #2
 800cdd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cdd6:	2303      	movs	r3, #3
 800cdd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cdda:	230a      	movs	r3, #10
 800cddc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cdde:	f107 0314 	add.w	r3, r7, #20
 800cde2:	4619      	mov	r1, r3
 800cde4:	4812      	ldr	r0, [pc, #72]	; (800ce30 <HAL_HCD_MspInit+0xc0>)
 800cde6:	f7f5 ffdb 	bl	8002da0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cdea:	4b10      	ldr	r3, [pc, #64]	; (800ce2c <HAL_HCD_MspInit+0xbc>)
 800cdec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdee:	4a0f      	ldr	r2, [pc, #60]	; (800ce2c <HAL_HCD_MspInit+0xbc>)
 800cdf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdf4:	6353      	str	r3, [r2, #52]	; 0x34
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	60fb      	str	r3, [r7, #12]
 800cdfa:	4b0c      	ldr	r3, [pc, #48]	; (800ce2c <HAL_HCD_MspInit+0xbc>)
 800cdfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdfe:	4a0b      	ldr	r2, [pc, #44]	; (800ce2c <HAL_HCD_MspInit+0xbc>)
 800ce00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ce04:	6453      	str	r3, [r2, #68]	; 0x44
 800ce06:	4b09      	ldr	r3, [pc, #36]	; (800ce2c <HAL_HCD_MspInit+0xbc>)
 800ce08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ce0e:	60fb      	str	r3, [r7, #12]
 800ce10:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ce12:	2200      	movs	r2, #0
 800ce14:	2100      	movs	r1, #0
 800ce16:	2043      	movs	r0, #67	; 0x43
 800ce18:	f7f5 fbbd 	bl	8002596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ce1c:	2043      	movs	r0, #67	; 0x43
 800ce1e:	f7f5 fbd6 	bl	80025ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ce22:	bf00      	nop
 800ce24:	3728      	adds	r7, #40	; 0x28
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}
 800ce2a:	bf00      	nop
 800ce2c:	40023800 	.word	0x40023800
 800ce30:	40020000 	.word	0x40020000

0800ce34 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b082      	sub	sp, #8
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ce42:	4618      	mov	r0, r3
 800ce44:	f7fe fac1 	bl	800b3ca <USBH_LL_IncTimer>
}
 800ce48:	bf00      	nop
 800ce4a:	3708      	adds	r7, #8
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}

0800ce50 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b082      	sub	sp, #8
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f7fe faf9 	bl	800b456 <USBH_LL_Connect>
}
 800ce64:	bf00      	nop
 800ce66:	3708      	adds	r7, #8
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b082      	sub	sp, #8
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f7fe fb02 	bl	800b484 <USBH_LL_Disconnect>
}
 800ce80:	bf00      	nop
 800ce82:	3708      	adds	r7, #8
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}

0800ce88 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ce88:	b480      	push	{r7}
 800ce8a:	b083      	sub	sp, #12
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
 800ce90:	460b      	mov	r3, r1
 800ce92:	70fb      	strb	r3, [r7, #3]
 800ce94:	4613      	mov	r3, r2
 800ce96:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ce98:	bf00      	nop
 800ce9a:	370c      	adds	r7, #12
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea2:	4770      	bx	lr

0800cea4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b082      	sub	sp, #8
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f7fe fab3 	bl	800b41e <USBH_LL_PortEnabled>
}
 800ceb8:	bf00      	nop
 800ceba:	3708      	adds	r7, #8
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cece:	4618      	mov	r0, r3
 800ced0:	f7fe fab3 	bl	800b43a <USBH_LL_PortDisabled>
}
 800ced4:	bf00      	nop
 800ced6:	3708      	adds	r7, #8
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}

0800cedc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b082      	sub	sp, #8
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ceea:	2b01      	cmp	r3, #1
 800ceec:	d12a      	bne.n	800cf44 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ceee:	4a18      	ldr	r2, [pc, #96]	; (800cf50 <USBH_LL_Init+0x74>)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	4a15      	ldr	r2, [pc, #84]	; (800cf50 <USBH_LL_Init+0x74>)
 800cefa:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cefe:	4b14      	ldr	r3, [pc, #80]	; (800cf50 <USBH_LL_Init+0x74>)
 800cf00:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800cf04:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800cf06:	4b12      	ldr	r3, [pc, #72]	; (800cf50 <USBH_LL_Init+0x74>)
 800cf08:	2208      	movs	r2, #8
 800cf0a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800cf0c:	4b10      	ldr	r3, [pc, #64]	; (800cf50 <USBH_LL_Init+0x74>)
 800cf0e:	2201      	movs	r2, #1
 800cf10:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cf12:	4b0f      	ldr	r3, [pc, #60]	; (800cf50 <USBH_LL_Init+0x74>)
 800cf14:	2200      	movs	r2, #0
 800cf16:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800cf18:	4b0d      	ldr	r3, [pc, #52]	; (800cf50 <USBH_LL_Init+0x74>)
 800cf1a:	2202      	movs	r2, #2
 800cf1c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cf1e:	4b0c      	ldr	r3, [pc, #48]	; (800cf50 <USBH_LL_Init+0x74>)
 800cf20:	2200      	movs	r2, #0
 800cf22:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800cf24:	480a      	ldr	r0, [pc, #40]	; (800cf50 <USBH_LL_Init+0x74>)
 800cf26:	f7f6 f9ec 	bl	8003302 <HAL_HCD_Init>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d001      	beq.n	800cf34 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800cf30:	f7f4 fe16 	bl	8001b60 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800cf34:	4806      	ldr	r0, [pc, #24]	; (800cf50 <USBH_LL_Init+0x74>)
 800cf36:	f7f6 fdd0 	bl	8003ada <HAL_HCD_GetCurrentFrame>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	4619      	mov	r1, r3
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f7fe fa34 	bl	800b3ac <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800cf44:	2300      	movs	r3, #0
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3708      	adds	r7, #8
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	bf00      	nop
 800cf50:	2000330c 	.word	0x2000330c

0800cf54 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b084      	sub	sp, #16
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cf60:	2300      	movs	r3, #0
 800cf62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7f6 fd3f 	bl	80039ee <HAL_HCD_Start>
 800cf70:	4603      	mov	r3, r0
 800cf72:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cf74:	7bfb      	ldrb	r3, [r7, #15]
 800cf76:	4618      	mov	r0, r3
 800cf78:	f000 f98c 	bl	800d294 <USBH_Get_USB_Status>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf80:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3710      	adds	r7, #16
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}

0800cf8a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800cf8a:	b580      	push	{r7, lr}
 800cf8c:	b084      	sub	sp, #16
 800cf8e:	af00      	add	r7, sp, #0
 800cf90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf92:	2300      	movs	r3, #0
 800cf94:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cf96:	2300      	movs	r3, #0
 800cf98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f7f6 fd47 	bl	8003a34 <HAL_HCD_Stop>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cfaa:	7bfb      	ldrb	r3, [r7, #15]
 800cfac:	4618      	mov	r0, r3
 800cfae:	f000 f971 	bl	800d294 <USBH_Get_USB_Status>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfb6:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	3710      	adds	r7, #16
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}

0800cfc0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b084      	sub	sp, #16
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800cfc8:	2301      	movs	r3, #1
 800cfca:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f7f6 fd8f 	bl	8003af6 <HAL_HCD_GetCurrentSpeed>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	2b02      	cmp	r3, #2
 800cfdc:	d00c      	beq.n	800cff8 <USBH_LL_GetSpeed+0x38>
 800cfde:	2b02      	cmp	r3, #2
 800cfe0:	d80d      	bhi.n	800cffe <USBH_LL_GetSpeed+0x3e>
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d002      	beq.n	800cfec <USBH_LL_GetSpeed+0x2c>
 800cfe6:	2b01      	cmp	r3, #1
 800cfe8:	d003      	beq.n	800cff2 <USBH_LL_GetSpeed+0x32>
 800cfea:	e008      	b.n	800cffe <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800cfec:	2300      	movs	r3, #0
 800cfee:	73fb      	strb	r3, [r7, #15]
    break;
 800cff0:	e008      	b.n	800d004 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800cff2:	2301      	movs	r3, #1
 800cff4:	73fb      	strb	r3, [r7, #15]
    break;
 800cff6:	e005      	b.n	800d004 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800cff8:	2302      	movs	r3, #2
 800cffa:	73fb      	strb	r3, [r7, #15]
    break;
 800cffc:	e002      	b.n	800d004 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800cffe:	2301      	movs	r3, #1
 800d000:	73fb      	strb	r3, [r7, #15]
    break;
 800d002:	bf00      	nop
  }
  return  speed;
 800d004:	7bfb      	ldrb	r3, [r7, #15]
}
 800d006:	4618      	mov	r0, r3
 800d008:	3710      	adds	r7, #16
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}

0800d00e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d00e:	b580      	push	{r7, lr}
 800d010:	b084      	sub	sp, #16
 800d012:	af00      	add	r7, sp, #0
 800d014:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d016:	2300      	movs	r3, #0
 800d018:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d01a:	2300      	movs	r3, #0
 800d01c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d024:	4618      	mov	r0, r3
 800d026:	f7f6 fd22 	bl	8003a6e <HAL_HCD_ResetPort>
 800d02a:	4603      	mov	r3, r0
 800d02c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d02e:	7bfb      	ldrb	r3, [r7, #15]
 800d030:	4618      	mov	r0, r3
 800d032:	f000 f92f 	bl	800d294 <USBH_Get_USB_Status>
 800d036:	4603      	mov	r3, r0
 800d038:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d03a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3710      	adds	r7, #16
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}

0800d044 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b082      	sub	sp, #8
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	460b      	mov	r3, r1
 800d04e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d056:	78fa      	ldrb	r2, [r7, #3]
 800d058:	4611      	mov	r1, r2
 800d05a:	4618      	mov	r0, r3
 800d05c:	f7f6 fd29 	bl	8003ab2 <HAL_HCD_HC_GetXferCount>
 800d060:	4603      	mov	r3, r0
}
 800d062:	4618      	mov	r0, r3
 800d064:	3708      	adds	r7, #8
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}

0800d06a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d06a:	b590      	push	{r4, r7, lr}
 800d06c:	b089      	sub	sp, #36	; 0x24
 800d06e:	af04      	add	r7, sp, #16
 800d070:	6078      	str	r0, [r7, #4]
 800d072:	4608      	mov	r0, r1
 800d074:	4611      	mov	r1, r2
 800d076:	461a      	mov	r2, r3
 800d078:	4603      	mov	r3, r0
 800d07a:	70fb      	strb	r3, [r7, #3]
 800d07c:	460b      	mov	r3, r1
 800d07e:	70bb      	strb	r3, [r7, #2]
 800d080:	4613      	mov	r3, r2
 800d082:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d084:	2300      	movs	r3, #0
 800d086:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d088:	2300      	movs	r3, #0
 800d08a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d092:	787c      	ldrb	r4, [r7, #1]
 800d094:	78ba      	ldrb	r2, [r7, #2]
 800d096:	78f9      	ldrb	r1, [r7, #3]
 800d098:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d09a:	9302      	str	r3, [sp, #8]
 800d09c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d0a0:	9301      	str	r3, [sp, #4]
 800d0a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d0a6:	9300      	str	r3, [sp, #0]
 800d0a8:	4623      	mov	r3, r4
 800d0aa:	f7f6 f98c 	bl	80033c6 <HAL_HCD_HC_Init>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d0b2:	7bfb      	ldrb	r3, [r7, #15]
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f000 f8ed 	bl	800d294 <USBH_Get_USB_Status>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0be:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3714      	adds	r7, #20
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd90      	pop	{r4, r7, pc}

0800d0c8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b084      	sub	sp, #16
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
 800d0d0:	460b      	mov	r3, r1
 800d0d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d0e2:	78fa      	ldrb	r2, [r7, #3]
 800d0e4:	4611      	mov	r1, r2
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f7f6 f9fc 	bl	80034e4 <HAL_HCD_HC_Halt>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d0f0:	7bfb      	ldrb	r3, [r7, #15]
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f000 f8ce 	bl	800d294 <USBH_Get_USB_Status>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3710      	adds	r7, #16
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}

0800d106 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d106:	b590      	push	{r4, r7, lr}
 800d108:	b089      	sub	sp, #36	; 0x24
 800d10a:	af04      	add	r7, sp, #16
 800d10c:	6078      	str	r0, [r7, #4]
 800d10e:	4608      	mov	r0, r1
 800d110:	4611      	mov	r1, r2
 800d112:	461a      	mov	r2, r3
 800d114:	4603      	mov	r3, r0
 800d116:	70fb      	strb	r3, [r7, #3]
 800d118:	460b      	mov	r3, r1
 800d11a:	70bb      	strb	r3, [r7, #2]
 800d11c:	4613      	mov	r3, r2
 800d11e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d120:	2300      	movs	r3, #0
 800d122:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d124:	2300      	movs	r3, #0
 800d126:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d12e:	787c      	ldrb	r4, [r7, #1]
 800d130:	78ba      	ldrb	r2, [r7, #2]
 800d132:	78f9      	ldrb	r1, [r7, #3]
 800d134:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d138:	9303      	str	r3, [sp, #12]
 800d13a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d13c:	9302      	str	r3, [sp, #8]
 800d13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d140:	9301      	str	r3, [sp, #4]
 800d142:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d146:	9300      	str	r3, [sp, #0]
 800d148:	4623      	mov	r3, r4
 800d14a:	f7f6 f9ef 	bl	800352c <HAL_HCD_HC_SubmitRequest>
 800d14e:	4603      	mov	r3, r0
 800d150:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d152:	7bfb      	ldrb	r3, [r7, #15]
 800d154:	4618      	mov	r0, r3
 800d156:	f000 f89d 	bl	800d294 <USBH_Get_USB_Status>
 800d15a:	4603      	mov	r3, r0
 800d15c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d15e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d160:	4618      	mov	r0, r3
 800d162:	3714      	adds	r7, #20
 800d164:	46bd      	mov	sp, r7
 800d166:	bd90      	pop	{r4, r7, pc}

0800d168 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b082      	sub	sp, #8
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	460b      	mov	r3, r1
 800d172:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d17a:	78fa      	ldrb	r2, [r7, #3]
 800d17c:	4611      	mov	r1, r2
 800d17e:	4618      	mov	r0, r3
 800d180:	f7f6 fc83 	bl	8003a8a <HAL_HCD_HC_GetURBState>
 800d184:	4603      	mov	r3, r0
}
 800d186:	4618      	mov	r0, r3
 800d188:	3708      	adds	r7, #8
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}

0800d18e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d18e:	b580      	push	{r7, lr}
 800d190:	b082      	sub	sp, #8
 800d192:	af00      	add	r7, sp, #0
 800d194:	6078      	str	r0, [r7, #4]
 800d196:	460b      	mov	r3, r1
 800d198:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	d103      	bne.n	800d1ac <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800d1a4:	78fb      	ldrb	r3, [r7, #3]
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f000 f8a0 	bl	800d2ec <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d1ac:	20c8      	movs	r0, #200	; 0xc8
 800d1ae:	f7f5 f8f3 	bl	8002398 <HAL_Delay>
  return USBH_OK;
 800d1b2:	2300      	movs	r3, #0
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3708      	adds	r7, #8
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}

0800d1bc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b085      	sub	sp, #20
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	460b      	mov	r3, r1
 800d1c6:	70fb      	strb	r3, [r7, #3]
 800d1c8:	4613      	mov	r3, r2
 800d1ca:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d1d2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d1d4:	78fb      	ldrb	r3, [r7, #3]
 800d1d6:	68fa      	ldr	r2, [r7, #12]
 800d1d8:	212c      	movs	r1, #44	; 0x2c
 800d1da:	fb01 f303 	mul.w	r3, r1, r3
 800d1de:	4413      	add	r3, r2
 800d1e0:	333b      	adds	r3, #59	; 0x3b
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d009      	beq.n	800d1fc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d1e8:	78fb      	ldrb	r3, [r7, #3]
 800d1ea:	68fa      	ldr	r2, [r7, #12]
 800d1ec:	212c      	movs	r1, #44	; 0x2c
 800d1ee:	fb01 f303 	mul.w	r3, r1, r3
 800d1f2:	4413      	add	r3, r2
 800d1f4:	3354      	adds	r3, #84	; 0x54
 800d1f6:	78ba      	ldrb	r2, [r7, #2]
 800d1f8:	701a      	strb	r2, [r3, #0]
 800d1fa:	e008      	b.n	800d20e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d1fc:	78fb      	ldrb	r3, [r7, #3]
 800d1fe:	68fa      	ldr	r2, [r7, #12]
 800d200:	212c      	movs	r1, #44	; 0x2c
 800d202:	fb01 f303 	mul.w	r3, r1, r3
 800d206:	4413      	add	r3, r2
 800d208:	3355      	adds	r3, #85	; 0x55
 800d20a:	78ba      	ldrb	r2, [r7, #2]
 800d20c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d20e:	2300      	movs	r3, #0
}
 800d210:	4618      	mov	r0, r3
 800d212:	3714      	adds	r7, #20
 800d214:	46bd      	mov	sp, r7
 800d216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21a:	4770      	bx	lr

0800d21c <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d21c:	b480      	push	{r7}
 800d21e:	b085      	sub	sp, #20
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
 800d224:	460b      	mov	r3, r1
 800d226:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800d228:	2300      	movs	r3, #0
 800d22a:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d232:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800d234:	78fb      	ldrb	r3, [r7, #3]
 800d236:	68ba      	ldr	r2, [r7, #8]
 800d238:	212c      	movs	r1, #44	; 0x2c
 800d23a:	fb01 f303 	mul.w	r3, r1, r3
 800d23e:	4413      	add	r3, r2
 800d240:	333b      	adds	r3, #59	; 0x3b
 800d242:	781b      	ldrb	r3, [r3, #0]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d009      	beq.n	800d25c <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800d248:	78fb      	ldrb	r3, [r7, #3]
 800d24a:	68ba      	ldr	r2, [r7, #8]
 800d24c:	212c      	movs	r1, #44	; 0x2c
 800d24e:	fb01 f303 	mul.w	r3, r1, r3
 800d252:	4413      	add	r3, r2
 800d254:	3354      	adds	r3, #84	; 0x54
 800d256:	781b      	ldrb	r3, [r3, #0]
 800d258:	73fb      	strb	r3, [r7, #15]
 800d25a:	e008      	b.n	800d26e <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800d25c:	78fb      	ldrb	r3, [r7, #3]
 800d25e:	68ba      	ldr	r2, [r7, #8]
 800d260:	212c      	movs	r1, #44	; 0x2c
 800d262:	fb01 f303 	mul.w	r3, r1, r3
 800d266:	4413      	add	r3, r2
 800d268:	3355      	adds	r3, #85	; 0x55
 800d26a:	781b      	ldrb	r3, [r3, #0]
 800d26c:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800d26e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d270:	4618      	mov	r0, r3
 800d272:	3714      	adds	r7, #20
 800d274:	46bd      	mov	sp, r7
 800d276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27a:	4770      	bx	lr

0800d27c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b082      	sub	sp, #8
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f7f5 f887 	bl	8002398 <HAL_Delay>
}
 800d28a:	bf00      	nop
 800d28c:	3708      	adds	r7, #8
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}
	...

0800d294 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d294:	b480      	push	{r7}
 800d296:	b085      	sub	sp, #20
 800d298:	af00      	add	r7, sp, #0
 800d29a:	4603      	mov	r3, r0
 800d29c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d2a2:	79fb      	ldrb	r3, [r7, #7]
 800d2a4:	2b03      	cmp	r3, #3
 800d2a6:	d817      	bhi.n	800d2d8 <USBH_Get_USB_Status+0x44>
 800d2a8:	a201      	add	r2, pc, #4	; (adr r2, 800d2b0 <USBH_Get_USB_Status+0x1c>)
 800d2aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2ae:	bf00      	nop
 800d2b0:	0800d2c1 	.word	0x0800d2c1
 800d2b4:	0800d2c7 	.word	0x0800d2c7
 800d2b8:	0800d2cd 	.word	0x0800d2cd
 800d2bc:	0800d2d3 	.word	0x0800d2d3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	73fb      	strb	r3, [r7, #15]
    break;
 800d2c4:	e00b      	b.n	800d2de <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d2c6:	2302      	movs	r3, #2
 800d2c8:	73fb      	strb	r3, [r7, #15]
    break;
 800d2ca:	e008      	b.n	800d2de <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	73fb      	strb	r3, [r7, #15]
    break;
 800d2d0:	e005      	b.n	800d2de <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d2d2:	2302      	movs	r3, #2
 800d2d4:	73fb      	strb	r3, [r7, #15]
    break;
 800d2d6:	e002      	b.n	800d2de <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d2d8:	2302      	movs	r3, #2
 800d2da:	73fb      	strb	r3, [r7, #15]
    break;
 800d2dc:	bf00      	nop
  }
  return usb_status;
 800d2de:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3714      	adds	r7, #20
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr

0800d2ec <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b084      	sub	sp, #16
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800d2f6:	79fb      	ldrb	r3, [r7, #7]
 800d2f8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800d2fa:	79fb      	ldrb	r3, [r7, #7]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d102      	bne.n	800d306 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800d300:	2300      	movs	r3, #0
 800d302:	73fb      	strb	r3, [r7, #15]
 800d304:	e001      	b.n	800d30a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800d306:	2301      	movs	r3, #1
 800d308:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 800d30a:	7bfb      	ldrb	r3, [r7, #15]
 800d30c:	461a      	mov	r2, r3
 800d30e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d312:	4803      	ldr	r0, [pc, #12]	; (800d320 <MX_DriverVbusFS+0x34>)
 800d314:	f7f5 ffdc 	bl	80032d0 <HAL_GPIO_WritePin>
}
 800d318:	bf00      	nop
 800d31a:	3710      	adds	r7, #16
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}
 800d320:	40020800 	.word	0x40020800

0800d324 <__errno>:
 800d324:	4b01      	ldr	r3, [pc, #4]	; (800d32c <__errno+0x8>)
 800d326:	6818      	ldr	r0, [r3, #0]
 800d328:	4770      	bx	lr
 800d32a:	bf00      	nop
 800d32c:	20000064 	.word	0x20000064

0800d330 <__libc_init_array>:
 800d330:	b570      	push	{r4, r5, r6, lr}
 800d332:	4d0d      	ldr	r5, [pc, #52]	; (800d368 <__libc_init_array+0x38>)
 800d334:	4c0d      	ldr	r4, [pc, #52]	; (800d36c <__libc_init_array+0x3c>)
 800d336:	1b64      	subs	r4, r4, r5
 800d338:	10a4      	asrs	r4, r4, #2
 800d33a:	2600      	movs	r6, #0
 800d33c:	42a6      	cmp	r6, r4
 800d33e:	d109      	bne.n	800d354 <__libc_init_array+0x24>
 800d340:	4d0b      	ldr	r5, [pc, #44]	; (800d370 <__libc_init_array+0x40>)
 800d342:	4c0c      	ldr	r4, [pc, #48]	; (800d374 <__libc_init_array+0x44>)
 800d344:	f000 f93c 	bl	800d5c0 <_init>
 800d348:	1b64      	subs	r4, r4, r5
 800d34a:	10a4      	asrs	r4, r4, #2
 800d34c:	2600      	movs	r6, #0
 800d34e:	42a6      	cmp	r6, r4
 800d350:	d105      	bne.n	800d35e <__libc_init_array+0x2e>
 800d352:	bd70      	pop	{r4, r5, r6, pc}
 800d354:	f855 3b04 	ldr.w	r3, [r5], #4
 800d358:	4798      	blx	r3
 800d35a:	3601      	adds	r6, #1
 800d35c:	e7ee      	b.n	800d33c <__libc_init_array+0xc>
 800d35e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d362:	4798      	blx	r3
 800d364:	3601      	adds	r6, #1
 800d366:	e7f2      	b.n	800d34e <__libc_init_array+0x1e>
 800d368:	0800d878 	.word	0x0800d878
 800d36c:	0800d878 	.word	0x0800d878
 800d370:	0800d878 	.word	0x0800d878
 800d374:	0800d87c 	.word	0x0800d87c

0800d378 <malloc>:
 800d378:	4b02      	ldr	r3, [pc, #8]	; (800d384 <malloc+0xc>)
 800d37a:	4601      	mov	r1, r0
 800d37c:	6818      	ldr	r0, [r3, #0]
 800d37e:	f000 b88d 	b.w	800d49c <_malloc_r>
 800d382:	bf00      	nop
 800d384:	20000064 	.word	0x20000064

0800d388 <free>:
 800d388:	4b02      	ldr	r3, [pc, #8]	; (800d394 <free+0xc>)
 800d38a:	4601      	mov	r1, r0
 800d38c:	6818      	ldr	r0, [r3, #0]
 800d38e:	f000 b819 	b.w	800d3c4 <_free_r>
 800d392:	bf00      	nop
 800d394:	20000064 	.word	0x20000064

0800d398 <memcpy>:
 800d398:	440a      	add	r2, r1
 800d39a:	4291      	cmp	r1, r2
 800d39c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d3a0:	d100      	bne.n	800d3a4 <memcpy+0xc>
 800d3a2:	4770      	bx	lr
 800d3a4:	b510      	push	{r4, lr}
 800d3a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d3ae:	4291      	cmp	r1, r2
 800d3b0:	d1f9      	bne.n	800d3a6 <memcpy+0xe>
 800d3b2:	bd10      	pop	{r4, pc}

0800d3b4 <memset>:
 800d3b4:	4402      	add	r2, r0
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	4293      	cmp	r3, r2
 800d3ba:	d100      	bne.n	800d3be <memset+0xa>
 800d3bc:	4770      	bx	lr
 800d3be:	f803 1b01 	strb.w	r1, [r3], #1
 800d3c2:	e7f9      	b.n	800d3b8 <memset+0x4>

0800d3c4 <_free_r>:
 800d3c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d3c6:	2900      	cmp	r1, #0
 800d3c8:	d044      	beq.n	800d454 <_free_r+0x90>
 800d3ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3ce:	9001      	str	r0, [sp, #4]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	f1a1 0404 	sub.w	r4, r1, #4
 800d3d6:	bfb8      	it	lt
 800d3d8:	18e4      	addlt	r4, r4, r3
 800d3da:	f000 f8e3 	bl	800d5a4 <__malloc_lock>
 800d3de:	4a1e      	ldr	r2, [pc, #120]	; (800d458 <_free_r+0x94>)
 800d3e0:	9801      	ldr	r0, [sp, #4]
 800d3e2:	6813      	ldr	r3, [r2, #0]
 800d3e4:	b933      	cbnz	r3, 800d3f4 <_free_r+0x30>
 800d3e6:	6063      	str	r3, [r4, #4]
 800d3e8:	6014      	str	r4, [r2, #0]
 800d3ea:	b003      	add	sp, #12
 800d3ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d3f0:	f000 b8de 	b.w	800d5b0 <__malloc_unlock>
 800d3f4:	42a3      	cmp	r3, r4
 800d3f6:	d908      	bls.n	800d40a <_free_r+0x46>
 800d3f8:	6825      	ldr	r5, [r4, #0]
 800d3fa:	1961      	adds	r1, r4, r5
 800d3fc:	428b      	cmp	r3, r1
 800d3fe:	bf01      	itttt	eq
 800d400:	6819      	ldreq	r1, [r3, #0]
 800d402:	685b      	ldreq	r3, [r3, #4]
 800d404:	1949      	addeq	r1, r1, r5
 800d406:	6021      	streq	r1, [r4, #0]
 800d408:	e7ed      	b.n	800d3e6 <_free_r+0x22>
 800d40a:	461a      	mov	r2, r3
 800d40c:	685b      	ldr	r3, [r3, #4]
 800d40e:	b10b      	cbz	r3, 800d414 <_free_r+0x50>
 800d410:	42a3      	cmp	r3, r4
 800d412:	d9fa      	bls.n	800d40a <_free_r+0x46>
 800d414:	6811      	ldr	r1, [r2, #0]
 800d416:	1855      	adds	r5, r2, r1
 800d418:	42a5      	cmp	r5, r4
 800d41a:	d10b      	bne.n	800d434 <_free_r+0x70>
 800d41c:	6824      	ldr	r4, [r4, #0]
 800d41e:	4421      	add	r1, r4
 800d420:	1854      	adds	r4, r2, r1
 800d422:	42a3      	cmp	r3, r4
 800d424:	6011      	str	r1, [r2, #0]
 800d426:	d1e0      	bne.n	800d3ea <_free_r+0x26>
 800d428:	681c      	ldr	r4, [r3, #0]
 800d42a:	685b      	ldr	r3, [r3, #4]
 800d42c:	6053      	str	r3, [r2, #4]
 800d42e:	4421      	add	r1, r4
 800d430:	6011      	str	r1, [r2, #0]
 800d432:	e7da      	b.n	800d3ea <_free_r+0x26>
 800d434:	d902      	bls.n	800d43c <_free_r+0x78>
 800d436:	230c      	movs	r3, #12
 800d438:	6003      	str	r3, [r0, #0]
 800d43a:	e7d6      	b.n	800d3ea <_free_r+0x26>
 800d43c:	6825      	ldr	r5, [r4, #0]
 800d43e:	1961      	adds	r1, r4, r5
 800d440:	428b      	cmp	r3, r1
 800d442:	bf04      	itt	eq
 800d444:	6819      	ldreq	r1, [r3, #0]
 800d446:	685b      	ldreq	r3, [r3, #4]
 800d448:	6063      	str	r3, [r4, #4]
 800d44a:	bf04      	itt	eq
 800d44c:	1949      	addeq	r1, r1, r5
 800d44e:	6021      	streq	r1, [r4, #0]
 800d450:	6054      	str	r4, [r2, #4]
 800d452:	e7ca      	b.n	800d3ea <_free_r+0x26>
 800d454:	b003      	add	sp, #12
 800d456:	bd30      	pop	{r4, r5, pc}
 800d458:	20003610 	.word	0x20003610

0800d45c <sbrk_aligned>:
 800d45c:	b570      	push	{r4, r5, r6, lr}
 800d45e:	4e0e      	ldr	r6, [pc, #56]	; (800d498 <sbrk_aligned+0x3c>)
 800d460:	460c      	mov	r4, r1
 800d462:	6831      	ldr	r1, [r6, #0]
 800d464:	4605      	mov	r5, r0
 800d466:	b911      	cbnz	r1, 800d46e <sbrk_aligned+0x12>
 800d468:	f000 f88c 	bl	800d584 <_sbrk_r>
 800d46c:	6030      	str	r0, [r6, #0]
 800d46e:	4621      	mov	r1, r4
 800d470:	4628      	mov	r0, r5
 800d472:	f000 f887 	bl	800d584 <_sbrk_r>
 800d476:	1c43      	adds	r3, r0, #1
 800d478:	d00a      	beq.n	800d490 <sbrk_aligned+0x34>
 800d47a:	1cc4      	adds	r4, r0, #3
 800d47c:	f024 0403 	bic.w	r4, r4, #3
 800d480:	42a0      	cmp	r0, r4
 800d482:	d007      	beq.n	800d494 <sbrk_aligned+0x38>
 800d484:	1a21      	subs	r1, r4, r0
 800d486:	4628      	mov	r0, r5
 800d488:	f000 f87c 	bl	800d584 <_sbrk_r>
 800d48c:	3001      	adds	r0, #1
 800d48e:	d101      	bne.n	800d494 <sbrk_aligned+0x38>
 800d490:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d494:	4620      	mov	r0, r4
 800d496:	bd70      	pop	{r4, r5, r6, pc}
 800d498:	20003614 	.word	0x20003614

0800d49c <_malloc_r>:
 800d49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4a0:	1ccd      	adds	r5, r1, #3
 800d4a2:	f025 0503 	bic.w	r5, r5, #3
 800d4a6:	3508      	adds	r5, #8
 800d4a8:	2d0c      	cmp	r5, #12
 800d4aa:	bf38      	it	cc
 800d4ac:	250c      	movcc	r5, #12
 800d4ae:	2d00      	cmp	r5, #0
 800d4b0:	4607      	mov	r7, r0
 800d4b2:	db01      	blt.n	800d4b8 <_malloc_r+0x1c>
 800d4b4:	42a9      	cmp	r1, r5
 800d4b6:	d905      	bls.n	800d4c4 <_malloc_r+0x28>
 800d4b8:	230c      	movs	r3, #12
 800d4ba:	603b      	str	r3, [r7, #0]
 800d4bc:	2600      	movs	r6, #0
 800d4be:	4630      	mov	r0, r6
 800d4c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4c4:	4e2e      	ldr	r6, [pc, #184]	; (800d580 <_malloc_r+0xe4>)
 800d4c6:	f000 f86d 	bl	800d5a4 <__malloc_lock>
 800d4ca:	6833      	ldr	r3, [r6, #0]
 800d4cc:	461c      	mov	r4, r3
 800d4ce:	bb34      	cbnz	r4, 800d51e <_malloc_r+0x82>
 800d4d0:	4629      	mov	r1, r5
 800d4d2:	4638      	mov	r0, r7
 800d4d4:	f7ff ffc2 	bl	800d45c <sbrk_aligned>
 800d4d8:	1c43      	adds	r3, r0, #1
 800d4da:	4604      	mov	r4, r0
 800d4dc:	d14d      	bne.n	800d57a <_malloc_r+0xde>
 800d4de:	6834      	ldr	r4, [r6, #0]
 800d4e0:	4626      	mov	r6, r4
 800d4e2:	2e00      	cmp	r6, #0
 800d4e4:	d140      	bne.n	800d568 <_malloc_r+0xcc>
 800d4e6:	6823      	ldr	r3, [r4, #0]
 800d4e8:	4631      	mov	r1, r6
 800d4ea:	4638      	mov	r0, r7
 800d4ec:	eb04 0803 	add.w	r8, r4, r3
 800d4f0:	f000 f848 	bl	800d584 <_sbrk_r>
 800d4f4:	4580      	cmp	r8, r0
 800d4f6:	d13a      	bne.n	800d56e <_malloc_r+0xd2>
 800d4f8:	6821      	ldr	r1, [r4, #0]
 800d4fa:	3503      	adds	r5, #3
 800d4fc:	1a6d      	subs	r5, r5, r1
 800d4fe:	f025 0503 	bic.w	r5, r5, #3
 800d502:	3508      	adds	r5, #8
 800d504:	2d0c      	cmp	r5, #12
 800d506:	bf38      	it	cc
 800d508:	250c      	movcc	r5, #12
 800d50a:	4629      	mov	r1, r5
 800d50c:	4638      	mov	r0, r7
 800d50e:	f7ff ffa5 	bl	800d45c <sbrk_aligned>
 800d512:	3001      	adds	r0, #1
 800d514:	d02b      	beq.n	800d56e <_malloc_r+0xd2>
 800d516:	6823      	ldr	r3, [r4, #0]
 800d518:	442b      	add	r3, r5
 800d51a:	6023      	str	r3, [r4, #0]
 800d51c:	e00e      	b.n	800d53c <_malloc_r+0xa0>
 800d51e:	6822      	ldr	r2, [r4, #0]
 800d520:	1b52      	subs	r2, r2, r5
 800d522:	d41e      	bmi.n	800d562 <_malloc_r+0xc6>
 800d524:	2a0b      	cmp	r2, #11
 800d526:	d916      	bls.n	800d556 <_malloc_r+0xba>
 800d528:	1961      	adds	r1, r4, r5
 800d52a:	42a3      	cmp	r3, r4
 800d52c:	6025      	str	r5, [r4, #0]
 800d52e:	bf18      	it	ne
 800d530:	6059      	strne	r1, [r3, #4]
 800d532:	6863      	ldr	r3, [r4, #4]
 800d534:	bf08      	it	eq
 800d536:	6031      	streq	r1, [r6, #0]
 800d538:	5162      	str	r2, [r4, r5]
 800d53a:	604b      	str	r3, [r1, #4]
 800d53c:	4638      	mov	r0, r7
 800d53e:	f104 060b 	add.w	r6, r4, #11
 800d542:	f000 f835 	bl	800d5b0 <__malloc_unlock>
 800d546:	f026 0607 	bic.w	r6, r6, #7
 800d54a:	1d23      	adds	r3, r4, #4
 800d54c:	1af2      	subs	r2, r6, r3
 800d54e:	d0b6      	beq.n	800d4be <_malloc_r+0x22>
 800d550:	1b9b      	subs	r3, r3, r6
 800d552:	50a3      	str	r3, [r4, r2]
 800d554:	e7b3      	b.n	800d4be <_malloc_r+0x22>
 800d556:	6862      	ldr	r2, [r4, #4]
 800d558:	42a3      	cmp	r3, r4
 800d55a:	bf0c      	ite	eq
 800d55c:	6032      	streq	r2, [r6, #0]
 800d55e:	605a      	strne	r2, [r3, #4]
 800d560:	e7ec      	b.n	800d53c <_malloc_r+0xa0>
 800d562:	4623      	mov	r3, r4
 800d564:	6864      	ldr	r4, [r4, #4]
 800d566:	e7b2      	b.n	800d4ce <_malloc_r+0x32>
 800d568:	4634      	mov	r4, r6
 800d56a:	6876      	ldr	r6, [r6, #4]
 800d56c:	e7b9      	b.n	800d4e2 <_malloc_r+0x46>
 800d56e:	230c      	movs	r3, #12
 800d570:	603b      	str	r3, [r7, #0]
 800d572:	4638      	mov	r0, r7
 800d574:	f000 f81c 	bl	800d5b0 <__malloc_unlock>
 800d578:	e7a1      	b.n	800d4be <_malloc_r+0x22>
 800d57a:	6025      	str	r5, [r4, #0]
 800d57c:	e7de      	b.n	800d53c <_malloc_r+0xa0>
 800d57e:	bf00      	nop
 800d580:	20003610 	.word	0x20003610

0800d584 <_sbrk_r>:
 800d584:	b538      	push	{r3, r4, r5, lr}
 800d586:	4d06      	ldr	r5, [pc, #24]	; (800d5a0 <_sbrk_r+0x1c>)
 800d588:	2300      	movs	r3, #0
 800d58a:	4604      	mov	r4, r0
 800d58c:	4608      	mov	r0, r1
 800d58e:	602b      	str	r3, [r5, #0]
 800d590:	f7f4 fd7c 	bl	800208c <_sbrk>
 800d594:	1c43      	adds	r3, r0, #1
 800d596:	d102      	bne.n	800d59e <_sbrk_r+0x1a>
 800d598:	682b      	ldr	r3, [r5, #0]
 800d59a:	b103      	cbz	r3, 800d59e <_sbrk_r+0x1a>
 800d59c:	6023      	str	r3, [r4, #0]
 800d59e:	bd38      	pop	{r3, r4, r5, pc}
 800d5a0:	20003618 	.word	0x20003618

0800d5a4 <__malloc_lock>:
 800d5a4:	4801      	ldr	r0, [pc, #4]	; (800d5ac <__malloc_lock+0x8>)
 800d5a6:	f000 b809 	b.w	800d5bc <__retarget_lock_acquire_recursive>
 800d5aa:	bf00      	nop
 800d5ac:	2000361c 	.word	0x2000361c

0800d5b0 <__malloc_unlock>:
 800d5b0:	4801      	ldr	r0, [pc, #4]	; (800d5b8 <__malloc_unlock+0x8>)
 800d5b2:	f000 b804 	b.w	800d5be <__retarget_lock_release_recursive>
 800d5b6:	bf00      	nop
 800d5b8:	2000361c 	.word	0x2000361c

0800d5bc <__retarget_lock_acquire_recursive>:
 800d5bc:	4770      	bx	lr

0800d5be <__retarget_lock_release_recursive>:
 800d5be:	4770      	bx	lr

0800d5c0 <_init>:
 800d5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5c2:	bf00      	nop
 800d5c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5c6:	bc08      	pop	{r3}
 800d5c8:	469e      	mov	lr, r3
 800d5ca:	4770      	bx	lr

0800d5cc <_fini>:
 800d5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ce:	bf00      	nop
 800d5d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5d2:	bc08      	pop	{r3}
 800d5d4:	469e      	mov	lr, r3
 800d5d6:	4770      	bx	lr
