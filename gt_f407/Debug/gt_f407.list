
gt_f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077a0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08007928  08007928  00017928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a80  08007a80  00020298  2**0
                  CONTENTS
  4 .ARM          00000008  08007a80  08007a80  00017a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a88  08007a88  00020298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a88  08007a88  00017a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a8c  08007a8c  00017a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000298  20000000  08007a90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020298  2**0
                  CONTENTS
 10 .bss          00002c5c  20000298  20000298  00020298  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002ef4  20002ef4  00020298  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002d5a8  00000000  00000000  000202c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000645a  00000000  00000000  0004d870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0001e2ca  00000000  00000000  00053cca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015d8  00000000  00000000  00071f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001968  00000000  00000000  00073570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027a26  00000000  00000000  00074ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002c8b0  00000000  00000000  0009c8fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cf99f  00000000  00000000  000c91ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00198b4d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004050  00000000  00000000  00198ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000298 	.word	0x20000298
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007910 	.word	0x08007910

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000029c 	.word	0x2000029c
 80001c4:	08007910 	.word	0x08007910

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80004cc:	b508      	push	{r3, lr}
  if(hi2s->Instance == I2S3)
 80004ce:	6802      	ldr	r2, [r0, #0]
 80004d0:	4b03      	ldr	r3, [pc, #12]	; (80004e0 <HAL_I2S_TxCpltCallback+0x14>)
 80004d2:	429a      	cmp	r2, r3
 80004d4:	d000      	beq.n	80004d8 <HAL_I2S_TxCpltCallback+0xc>
  {
    /* Call the user function which will manage directly transfer complete */  
    AUDIO_OUT_TransferComplete_CallBack();
  }
}
 80004d6:	bd08      	pop	{r3, pc}
    AUDIO_OUT_TransferComplete_CallBack();
 80004d8:	f000 fa60 	bl	800099c <AUDIO_OUT_TransferComplete_CallBack>
}
 80004dc:	e7fb      	b.n	80004d6 <HAL_I2S_TxCpltCallback+0xa>
 80004de:	bf00      	nop
 80004e0:	40003c00 	.word	0x40003c00

080004e4 <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80004e4:	b508      	push	{r3, lr}
  if(hi2s->Instance == I2S3)
 80004e6:	6802      	ldr	r2, [r0, #0]
 80004e8:	4b03      	ldr	r3, [pc, #12]	; (80004f8 <HAL_I2S_TxHalfCpltCallback+0x14>)
 80004ea:	429a      	cmp	r2, r3
 80004ec:	d000      	beq.n	80004f0 <HAL_I2S_TxHalfCpltCallback+0xc>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    AUDIO_OUT_HalfTransfer_CallBack();
  }
}
 80004ee:	bd08      	pop	{r3, pc}
    AUDIO_OUT_HalfTransfer_CallBack();
 80004f0:	f000 fa48 	bl	8000984 <AUDIO_OUT_HalfTransfer_CallBack>
}
 80004f4:	e7fb      	b.n	80004ee <HAL_I2S_TxHalfCpltCallback+0xa>
 80004f6:	bf00      	nop
 80004f8:	40003c00 	.word	0x40003c00

080004fc <AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void AUDIO_OUT_Error_CallBack(void)
{
}
 80004fc:	4770      	bx	lr
	...

08000500 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8000500:	b508      	push	{r3, lr}
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 8000502:	6802      	ldr	r2, [r0, #0]
 8000504:	4b03      	ldr	r3, [pc, #12]	; (8000514 <HAL_I2S_ErrorCallback+0x14>)
 8000506:	429a      	cmp	r2, r3
 8000508:	d000      	beq.n	800050c <HAL_I2S_ErrorCallback+0xc>
  {
    AUDIO_OUT_Error_CallBack();
  }
}
 800050a:	bd08      	pop	{r3, pc}
    AUDIO_OUT_Error_CallBack();
 800050c:	f7ff fff6 	bl	80004fc <AUDIO_OUT_Error_CallBack>
}
 8000510:	e7fb      	b.n	800050a <HAL_I2S_ErrorCallback+0xa>
 8000512:	bf00      	nop
 8000514:	40003c00 	.word	0x40003c00

08000518 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8000518:	b570      	push	{r4, r5, r6, lr}
 800051a:	b088      	sub	sp, #32
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800051c:	482b      	ldr	r0, [pc, #172]	; (80005cc <I2Cx_Init+0xb4>)
 800051e:	f002 ff01 	bl	8003324 <HAL_I2C_GetState>
 8000522:	b108      	cbz	r0, 8000528 <I2Cx_Init+0x10>

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
    HAL_I2C_Init(&I2cHandle);
  }
}
 8000524:	b008      	add	sp, #32
 8000526:	bd70      	pop	{r4, r5, r6, pc}
    I2cHandle.Instance = AUDIO_I2Cx;
 8000528:	4c28      	ldr	r4, [pc, #160]	; (80005cc <I2Cx_Init+0xb4>)
 800052a:	4b29      	ldr	r3, [pc, #164]	; (80005d0 <I2Cx_Init+0xb8>)
 800052c:	6023      	str	r3, [r4, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 800052e:	2343      	movs	r3, #67	; 0x43
 8000530:	60e3      	str	r3, [r4, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8000532:	4b28      	ldr	r3, [pc, #160]	; (80005d4 <I2Cx_Init+0xbc>)
 8000534:	6063      	str	r3, [r4, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000536:	2500      	movs	r5, #0
 8000538:	60a5      	str	r5, [r4, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800053a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800053e:	6123      	str	r3, [r4, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8000540:	6165      	str	r5, [r4, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 8000542:	61a5      	str	r5, [r4, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8000544:	61e5      	str	r5, [r4, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8000546:	6225      	str	r5, [r4, #32]
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the I2C peripheral */
  AUDIO_I2Cx_CLOCK_ENABLE();
 8000548:	9501      	str	r5, [sp, #4]
 800054a:	4e23      	ldr	r6, [pc, #140]	; (80005d8 <I2Cx_Init+0xc0>)
 800054c:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800054e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000552:	6433      	str	r3, [r6, #64]	; 0x40
 8000554:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8000556:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800055a:	9301      	str	r3, [sp, #4]
 800055c:	9b01      	ldr	r3, [sp, #4]

  /* Enable SCK and SDA GPIO clocks */
  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 800055e:	9502      	str	r5, [sp, #8]
 8000560:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8000562:	f043 0302 	orr.w	r3, r3, #2
 8000566:	6333      	str	r3, [r6, #48]	; 0x30
 8000568:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800056a:	f003 0302 	and.w	r3, r3, #2
 800056e:	9302      	str	r3, [sp, #8]
 8000570:	9b02      	ldr	r3, [sp, #8]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 8000572:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000576:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8000578:	2312      	movs	r3, #18
 800057a:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800057c:	9505      	str	r5, [sp, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800057e:	2302      	movs	r3, #2
 8000580:	9306      	str	r3, [sp, #24]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 8000582:	2304      	movs	r3, #4
 8000584:	9307      	str	r3, [sp, #28]

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8000586:	a903      	add	r1, sp, #12
 8000588:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800058c:	f500 3001 	add.w	r0, r0, #132096	; 0x20400
 8000590:	f001 fca4 	bl	8001edc <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  AUDIO_I2Cx_FORCE_RESET();
 8000594:	6a33      	ldr	r3, [r6, #32]
 8000596:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800059a:	6233      	str	r3, [r6, #32]

  /* Release the I2C peripheral clock reset */
  AUDIO_I2Cx_RELEASE_RESET();
 800059c:	6a33      	ldr	r3, [r6, #32]
 800059e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80005a2:	6233      	str	r3, [r6, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80005a4:	462a      	mov	r2, r5
 80005a6:	210f      	movs	r1, #15
 80005a8:	201f      	movs	r0, #31
 80005aa:	f001 fa4f 	bl	8001a4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 80005ae:	201f      	movs	r0, #31
 80005b0:	f001 fa82 	bl	8001ab8 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80005b4:	462a      	mov	r2, r5
 80005b6:	210f      	movs	r1, #15
 80005b8:	2020      	movs	r0, #32
 80005ba:	f001 fa47 	bl	8001a4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 80005be:	2020      	movs	r0, #32
 80005c0:	f001 fa7a 	bl	8001ab8 <HAL_NVIC_EnableIRQ>
    HAL_I2C_Init(&I2cHandle);
 80005c4:	4620      	mov	r0, r4
 80005c6:	f002 fd1b 	bl	8003000 <HAL_I2C_Init>
}
 80005ca:	e7ab      	b.n	8000524 <I2Cx_Init+0xc>
 80005cc:	200002b4 	.word	0x200002b4
 80005d0:	40005400 	.word	0x40005400
 80005d4:	000186a0 	.word	0x000186a0
 80005d8:	40023800 	.word	0x40023800

080005dc <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 80005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005de:	b087      	sub	sp, #28
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 80005e0:	2600      	movs	r6, #0
 80005e2:	9600      	str	r6, [sp, #0]
 80005e4:	4b15      	ldr	r3, [pc, #84]	; (800063c <AUDIO_IO_Init+0x60>)
 80005e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005e8:	f042 0208 	orr.w	r2, r2, #8
 80005ec:	631a      	str	r2, [r3, #48]	; 0x30
 80005ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f0:	f003 0308 	and.w	r3, r3, #8
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	9b00      	ldr	r3, [sp, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 80005f8:	f44f 7580 	mov.w	r5, #256	; 0x100
 80005fc:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fe:	2701      	movs	r7, #1
 8000600:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000602:	2302      	movs	r3, #2
 8000604:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000606:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8000608:	4c0d      	ldr	r4, [pc, #52]	; (8000640 <AUDIO_IO_Init+0x64>)
 800060a:	a901      	add	r1, sp, #4
 800060c:	4620      	mov	r0, r4
 800060e:	f001 fc65 	bl	8001edc <HAL_GPIO_Init>
  
  I2Cx_Init();
 8000612:	f7ff ff81 	bl	8000518 <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8000616:	4632      	mov	r2, r6
 8000618:	4629      	mov	r1, r5
 800061a:	4620      	mov	r0, r4
 800061c:	f001 fe10 	bl	8002240 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000620:	2005      	movs	r0, #5
 8000622:	f001 f9ed 	bl	8001a00 <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8000626:	463a      	mov	r2, r7
 8000628:	4629      	mov	r1, r5
 800062a:	4620      	mov	r0, r4
 800062c:	f001 fe08 	bl	8002240 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000630:	2005      	movs	r0, #5
 8000632:	f001 f9e5 	bl	8001a00 <HAL_Delay>
}
 8000636:	b007      	add	sp, #28
 8000638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800
 8000640:	40020800 	.word	0x40020800

08000644 <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000644:	b500      	push	{lr}
 8000646:	b087      	sub	sp, #28
  I2Cx_WriteData(Addr, Reg, Value);
 8000648:	f88d 2017 	strb.w	r2, [sp, #23]
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 800064c:	4b0b      	ldr	r3, [pc, #44]	; (800067c <AUDIO_IO_Write+0x38>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	9302      	str	r3, [sp, #8]
 8000652:	2301      	movs	r3, #1
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	f10d 0217 	add.w	r2, sp, #23
 800065a:	9200      	str	r2, [sp, #0]
 800065c:	460a      	mov	r2, r1
 800065e:	4601      	mov	r1, r0
 8000660:	4807      	ldr	r0, [pc, #28]	; (8000680 <AUDIO_IO_Write+0x3c>)
 8000662:	f002 fda9 	bl	80031b8 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8000666:	b910      	cbnz	r0, 800066e <AUDIO_IO_Write+0x2a>
}
 8000668:	b007      	add	sp, #28
 800066a:	f85d fb04 	ldr.w	pc, [sp], #4
  HAL_I2C_DeInit(&I2cHandle);
 800066e:	4804      	ldr	r0, [pc, #16]	; (8000680 <AUDIO_IO_Write+0x3c>)
 8000670:	f002 fd88 	bl	8003184 <HAL_I2C_DeInit>
  I2Cx_Init();
 8000674:	f7ff ff50 	bl	8000518 <I2Cx_Init>
}
 8000678:	e7f6      	b.n	8000668 <AUDIO_IO_Write+0x24>
 800067a:	bf00      	nop
 800067c:	20000000 	.word	0x20000000
 8000680:	200002b4 	.word	0x200002b4

08000684 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8000684:	b510      	push	{r4, lr}
  uint32_t counter = 0;
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8000686:	2901      	cmp	r1, #1
 8000688:	d012      	beq.n	80006b0 <cs43l22_SetMute+0x2c>
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 800068a:	b2c4      	uxtb	r4, r0
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
  uint32_t result = 0;
  
  AUDIO_IO_Write(Addr, Reg, Value);
 800068c:	2200      	movs	r2, #0
 800068e:	2122      	movs	r1, #34	; 0x22
 8000690:	4620      	mov	r0, r4
 8000692:	f7ff ffd7 	bl	8000644 <AUDIO_IO_Write>
 8000696:	2200      	movs	r2, #0
 8000698:	2123      	movs	r1, #35	; 0x23
 800069a:	4620      	mov	r0, r4
 800069c:	f7ff ffd2 	bl	8000644 <AUDIO_IO_Write>
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <cs43l22_SetMute+0x50>)
 80006a2:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 80006a4:	2104      	movs	r1, #4
 80006a6:	4620      	mov	r0, r4
 80006a8:	f7ff ffcc 	bl	8000644 <AUDIO_IO_Write>
}
 80006ac:	2000      	movs	r0, #0
 80006ae:	bd10      	pop	{r4, pc}
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 80006b0:	b2c4      	uxtb	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 80006b2:	22ff      	movs	r2, #255	; 0xff
 80006b4:	2104      	movs	r1, #4
 80006b6:	4620      	mov	r0, r4
 80006b8:	f7ff ffc4 	bl	8000644 <AUDIO_IO_Write>
 80006bc:	2201      	movs	r2, #1
 80006be:	2122      	movs	r1, #34	; 0x22
 80006c0:	4620      	mov	r0, r4
 80006c2:	f7ff ffbf 	bl	8000644 <AUDIO_IO_Write>
 80006c6:	2201      	movs	r2, #1
 80006c8:	2123      	movs	r1, #35	; 0x23
 80006ca:	4620      	mov	r0, r4
 80006cc:	f7ff ffba 	bl	8000644 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80006d0:	e7ec      	b.n	80006ac <cs43l22_SetMute+0x28>
 80006d2:	bf00      	nop
 80006d4:	20000308 	.word	0x20000308

080006d8 <cs43l22_Play>:
{
 80006d8:	b538      	push	{r3, r4, r5, lr}
  if(Is_cs43l22_Stop == 1)
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <cs43l22_Play+0x3c>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d002      	beq.n	80006e8 <cs43l22_Play+0x10>
  uint32_t counter = 0;
 80006e2:	2400      	movs	r4, #0
}
 80006e4:	4620      	mov	r0, r4
 80006e6:	bd38      	pop	{r3, r4, r5, pc}
 80006e8:	4604      	mov	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0b00000110);
 80006ea:	b2c5      	uxtb	r5, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 80006ec:	2206      	movs	r2, #6
 80006ee:	210e      	movs	r1, #14
 80006f0:	4628      	mov	r0, r5
 80006f2:	f7ff ffa7 	bl	8000644 <AUDIO_IO_Write>
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80006f6:	2100      	movs	r1, #0
 80006f8:	4620      	mov	r0, r4
 80006fa:	f7ff ffc3 	bl	8000684 <cs43l22_SetMute>
 80006fe:	4604      	mov	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8000700:	229e      	movs	r2, #158	; 0x9e
 8000702:	2102      	movs	r1, #2
 8000704:	4628      	mov	r0, r5
 8000706:	f7ff ff9d 	bl	8000644 <AUDIO_IO_Write>
    Is_cs43l22_Stop = 0;
 800070a:	4b02      	ldr	r3, [pc, #8]	; (8000714 <cs43l22_Play+0x3c>)
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
 8000710:	e7e8      	b.n	80006e4 <cs43l22_Play+0xc>
 8000712:	bf00      	nop
 8000714:	20000004 	.word	0x20000004

08000718 <cs43l22_SetVolume>:
{
 8000718:	b538      	push	{r3, r4, r5, lr}
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 800071a:	b2c5      	uxtb	r5, r0
 800071c:	3119      	adds	r1, #25
 800071e:	b2cc      	uxtb	r4, r1
  AUDIO_IO_Write(Addr, Reg, Value);
 8000720:	4622      	mov	r2, r4
 8000722:	2120      	movs	r1, #32
 8000724:	4628      	mov	r0, r5
 8000726:	f7ff ff8d 	bl	8000644 <AUDIO_IO_Write>
 800072a:	4622      	mov	r2, r4
 800072c:	2121      	movs	r1, #33	; 0x21
 800072e:	4628      	mov	r0, r5
 8000730:	f7ff ff88 	bl	8000644 <AUDIO_IO_Write>
}
 8000734:	2000      	movs	r0, #0
 8000736:	bd38      	pop	{r3, r4, r5, pc}

08000738 <cs43l22_Init>:
{
 8000738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800073c:	4605      	mov	r5, r0
 800073e:	460e      	mov	r6, r1
 8000740:	4617      	mov	r7, r2
  AUDIO_IO_Init();     
 8000742:	f7ff ff4b 	bl	80005dc <AUDIO_IO_Init>
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000746:	b2ec      	uxtb	r4, r5
  AUDIO_IO_Write(Addr, Reg, Value);
 8000748:	2201      	movs	r2, #1
 800074a:	2102      	movs	r1, #2
 800074c:	4620      	mov	r0, r4
 800074e:	f7ff ff79 	bl	8000644 <AUDIO_IO_Write>
  switch (OutputDevice)
 8000752:	1e73      	subs	r3, r6, #1
 8000754:	2b03      	cmp	r3, #3
 8000756:	d875      	bhi.n	8000844 <cs43l22_Init+0x10c>
 8000758:	e8df f003 	tbb	[pc, r3]
 800075c:	706c5402 	.word	0x706c5402
    OutputDev = 0xFA;
 8000760:	4b46      	ldr	r3, [pc, #280]	; (800087c <cs43l22_Init+0x144>)
 8000762:	22fa      	movs	r2, #250	; 0xfa
 8000764:	701a      	strb	r2, [r3, #0]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000766:	4b45      	ldr	r3, [pc, #276]	; (800087c <cs43l22_Init+0x144>)
 8000768:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 800076a:	2104      	movs	r1, #4
 800076c:	4620      	mov	r0, r4
 800076e:	f7ff ff69 	bl	8000644 <AUDIO_IO_Write>
 8000772:	2281      	movs	r2, #129	; 0x81
 8000774:	2105      	movs	r1, #5
 8000776:	4620      	mov	r0, r4
 8000778:	f7ff ff64 	bl	8000644 <AUDIO_IO_Write>
 800077c:	2204      	movs	r2, #4
 800077e:	2106      	movs	r1, #6
 8000780:	4620      	mov	r0, r4
 8000782:	f7ff ff5f 	bl	8000644 <AUDIO_IO_Write>
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000786:	4639      	mov	r1, r7
 8000788:	4628      	mov	r0, r5
 800078a:	f7ff ffc5 	bl	8000718 <cs43l22_SetVolume>
 800078e:	4605      	mov	r5, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8000790:	2206      	movs	r2, #6
 8000792:	210f      	movs	r1, #15
 8000794:	4620      	mov	r0, r4
 8000796:	f7ff ff55 	bl	8000644 <AUDIO_IO_Write>
 800079a:	2200      	movs	r2, #0
 800079c:	2124      	movs	r1, #36	; 0x24
 800079e:	4620      	mov	r0, r4
 80007a0:	f7ff ff50 	bl	8000644 <AUDIO_IO_Write>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2125      	movs	r1, #37	; 0x25
 80007a8:	4620      	mov	r0, r4
 80007aa:	f7ff ff4b 	bl	8000644 <AUDIO_IO_Write>
 80007ae:	2200      	movs	r2, #0
 80007b0:	210a      	movs	r1, #10
 80007b2:	4620      	mov	r0, r4
 80007b4:	f7ff ff46 	bl	8000644 <AUDIO_IO_Write>
 80007b8:	2204      	movs	r2, #4
 80007ba:	210e      	movs	r1, #14
 80007bc:	4620      	mov	r0, r4
 80007be:	f7ff ff41 	bl	8000644 <AUDIO_IO_Write>
 80007c2:	2200      	movs	r2, #0
 80007c4:	2127      	movs	r1, #39	; 0x27
 80007c6:	4620      	mov	r0, r4
 80007c8:	f7ff ff3c 	bl	8000644 <AUDIO_IO_Write>
 80007cc:	220f      	movs	r2, #15
 80007ce:	211f      	movs	r1, #31
 80007d0:	4620      	mov	r0, r4
 80007d2:	f7ff ff37 	bl	8000644 <AUDIO_IO_Write>
 80007d6:	220a      	movs	r2, #10
 80007d8:	211a      	movs	r1, #26
 80007da:	4620      	mov	r0, r4
 80007dc:	f7ff ff32 	bl	8000644 <AUDIO_IO_Write>
 80007e0:	220a      	movs	r2, #10
 80007e2:	211b      	movs	r1, #27
 80007e4:	4620      	mov	r0, r4
 80007e6:	f7ff ff2d 	bl	8000644 <AUDIO_IO_Write>
 80007ea:	2200      	movs	r2, #0
 80007ec:	2108      	movs	r1, #8
 80007ee:	4620      	mov	r0, r4
 80007f0:	f7ff ff28 	bl	8000644 <AUDIO_IO_Write>
 80007f4:	2200      	movs	r2, #0
 80007f6:	2108      	movs	r1, #8
 80007f8:	4620      	mov	r0, r4
 80007fa:	f7ff ff23 	bl	8000644 <AUDIO_IO_Write>
}
 80007fe:	4628      	mov	r0, r5
 8000800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    OutputDev = 0xAF;
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <cs43l22_Init+0x144>)
 8000806:	22af      	movs	r2, #175	; 0xaf
 8000808:	701a      	strb	r2, [r3, #0]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800080a:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 800080c:	2104      	movs	r1, #4
 800080e:	4620      	mov	r0, r4
 8000810:	f7ff ff18 	bl	8000644 <AUDIO_IO_Write>
 8000814:	2281      	movs	r2, #129	; 0x81
 8000816:	2105      	movs	r1, #5
 8000818:	4620      	mov	r0, r4
 800081a:	f7ff ff13 	bl	8000644 <AUDIO_IO_Write>
 800081e:	2204      	movs	r2, #4
 8000820:	2106      	movs	r1, #6
 8000822:	4620      	mov	r0, r4
 8000824:	f7ff ff0e 	bl	8000644 <AUDIO_IO_Write>
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000828:	4639      	mov	r1, r7
 800082a:	4628      	mov	r0, r5
 800082c:	f7ff ff74 	bl	8000718 <cs43l22_SetVolume>
 8000830:	4605      	mov	r5, r0
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000832:	e7bc      	b.n	80007ae <cs43l22_Init+0x76>
    OutputDev = 0xAA;
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <cs43l22_Init+0x144>)
 8000836:	22aa      	movs	r2, #170	; 0xaa
 8000838:	701a      	strb	r2, [r3, #0]
    break;
 800083a:	e794      	b.n	8000766 <cs43l22_Init+0x2e>
    OutputDev = 0x05;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <cs43l22_Init+0x144>)
 800083e:	2205      	movs	r2, #5
 8000840:	701a      	strb	r2, [r3, #0]
    break;    
 8000842:	e790      	b.n	8000766 <cs43l22_Init+0x2e>
    OutputDev = 0x05;
 8000844:	4b0d      	ldr	r3, [pc, #52]	; (800087c <cs43l22_Init+0x144>)
 8000846:	f04f 0805 	mov.w	r8, #5
 800084a:	f883 8000 	strb.w	r8, [r3]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800084e:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 8000850:	2104      	movs	r1, #4
 8000852:	4620      	mov	r0, r4
 8000854:	f7ff fef6 	bl	8000644 <AUDIO_IO_Write>
 8000858:	2281      	movs	r2, #129	; 0x81
 800085a:	4641      	mov	r1, r8
 800085c:	4620      	mov	r0, r4
 800085e:	f7ff fef1 	bl	8000644 <AUDIO_IO_Write>
 8000862:	2204      	movs	r2, #4
 8000864:	2106      	movs	r1, #6
 8000866:	4620      	mov	r0, r4
 8000868:	f7ff feec 	bl	8000644 <AUDIO_IO_Write>
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 800086c:	4639      	mov	r1, r7
 800086e:	4628      	mov	r0, r5
 8000870:	f7ff ff52 	bl	8000718 <cs43l22_SetVolume>
 8000874:	4605      	mov	r5, r0
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000876:	2e02      	cmp	r6, #2
 8000878:	d099      	beq.n	80007ae <cs43l22_Init+0x76>
 800087a:	e789      	b.n	8000790 <cs43l22_Init+0x58>
 800087c:	20000308 	.word	0x20000308

08000880 <command_callback>:
	Command command;
	memcpy(&command, hcommander.uart_rx_buffer + COMMAND_BYTESIZE, COMMAND_BYTESIZE);
	Commander_Enqueue(&hcommander, &command);
}

void command_callback(Command command) {
 8000880:	b084      	sub	sp, #16
 8000882:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
	//states[0] = states[0] == GPIO_PIN_RESET ? GPIO_PIN_SET : GPIO_PIN_RESET;
}
 8000886:	b004      	add	sp, #16
 8000888:	4770      	bx	lr
	...

0800088c <HAL_UART_RxHalfCpltCallback>:
{
 800088c:	b510      	push	{r4, lr}
 800088e:	b0a2      	sub	sp, #136	; 0x88
	memcpy(&command, hcommander.uart_rx_buffer, COMMAND_BYTESIZE);
 8000890:	4c06      	ldr	r4, [pc, #24]	; (80008ac <HAL_UART_RxHalfCpltCallback+0x20>)
 8000892:	2282      	movs	r2, #130	; 0x82
 8000894:	f104 0108 	add.w	r1, r4, #8
 8000898:	a801      	add	r0, sp, #4
 800089a:	f006 ff25 	bl	80076e8 <memcpy>
	Commander_Enqueue(&hcommander, &command);
 800089e:	a901      	add	r1, sp, #4
 80008a0:	4620      	mov	r0, r4
 80008a2:	f000 fcfc 	bl	800129e <Commander_Enqueue>
}
 80008a6:	b022      	add	sp, #136	; 0x88
 80008a8:	bd10      	pop	{r4, pc}
 80008aa:	bf00      	nop
 80008ac:	200005a4 	.word	0x200005a4

080008b0 <HAL_UART_RxCpltCallback>:
{
 80008b0:	b510      	push	{r4, lr}
 80008b2:	b0a2      	sub	sp, #136	; 0x88
	memcpy(&command, hcommander.uart_rx_buffer + COMMAND_BYTESIZE, COMMAND_BYTESIZE);
 80008b4:	4c06      	ldr	r4, [pc, #24]	; (80008d0 <HAL_UART_RxCpltCallback+0x20>)
 80008b6:	2282      	movs	r2, #130	; 0x82
 80008b8:	f104 018a 	add.w	r1, r4, #138	; 0x8a
 80008bc:	a801      	add	r0, sp, #4
 80008be:	f006 ff13 	bl	80076e8 <memcpy>
	Commander_Enqueue(&hcommander, &command);
 80008c2:	a901      	add	r1, sp, #4
 80008c4:	4620      	mov	r0, r4
 80008c6:	f000 fcea 	bl	800129e <Commander_Enqueue>
}
 80008ca:	b022      	add	sp, #136	; 0x88
 80008cc:	bd10      	pop	{r4, pc}
 80008ce:	bf00      	nop
 80008d0:	200005a4 	.word	0x200005a4

080008d4 <Conv_ADC>:

void Conv_ADC(uint8_t * buf, uint32_t *res){
	*res = 0x00000000 + (buf[1]<<24) + (buf[0]<<16) + (buf[3]<<8);
 80008d4:	7842      	ldrb	r2, [r0, #1]
 80008d6:	7803      	ldrb	r3, [r0, #0]
 80008d8:	041b      	lsls	r3, r3, #16
 80008da:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 80008de:	78c2      	ldrb	r2, [r0, #3]
 80008e0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80008e4:	600b      	str	r3, [r1, #0]
}
 80008e6:	4770      	bx	lr

080008e8 <ADC_Process>:
// 0 medium significant byte
// 1 most significant byte
// 2 empty byte
// 3 least significant byte

void ADC_Process(uint32_t *_raw, int16_t *out) {
 80008e8:	b510      	push	{r4, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	460c      	mov	r4, r1
	int16_t raw = (*_raw >> 16);
	float mid = (float)raw;
 80008ee:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80008f2:	ee07 3a90 	vmov	s15, r3
 80008f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008fa:	edcd 7a01 	vstr	s15, [sp, #4]
	Pedalboard_Process(&hpedalboard, &mid);
 80008fe:	a901      	add	r1, sp, #4
 8000900:	4805      	ldr	r0, [pc, #20]	; (8000918 <ADC_Process+0x30>)
 8000902:	f000 fecc 	bl	800169e <Pedalboard_Process>
	*out = (int16_t) mid;
 8000906:	eddd 7a01 	vldr	s15, [sp, #4]
 800090a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800090e:	ee17 3a90 	vmov	r3, s15
 8000912:	8023      	strh	r3, [r4, #0]
}
 8000914:	b002      	add	sp, #8
 8000916:	bd10      	pop	{r4, pc}
 8000918:	20001100 	.word	0x20001100

0800091c <HAL_I2S_RxHalfCpltCallback>:

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
	if (hi2s->Instance == SPI2) {
 800091c:	6802      	ldr	r2, [r0, #0]
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <HAL_I2S_RxHalfCpltCallback+0x28>)
 8000920:	429a      	cmp	r2, r3
 8000922:	d000      	beq.n	8000926 <HAL_I2S_RxHalfCpltCallback+0xa>
 8000924:	4770      	bx	lr
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000926:	b510      	push	{r4, lr}
 8000928:	b082      	sub	sp, #8
		//uint32_t left;
		uint32_t right;

		//Conv_ADC(&ADC_BUFF.ADC8[0], &left);
		Conv_ADC(&ADC_BUFF.ADC8[4], &right);
 800092a:	a901      	add	r1, sp, #4
 800092c:	4806      	ldr	r0, [pc, #24]	; (8000948 <HAL_I2S_RxHalfCpltCallback+0x2c>)
 800092e:	f7ff ffd1 	bl	80008d4 <Conv_ADC>

		//DSP_BUFF[0] = (left >> 16);
		ADC_Process(&right, &DSP_BUFF[1]);
 8000932:	4c06      	ldr	r4, [pc, #24]	; (800094c <HAL_I2S_RxHalfCpltCallback+0x30>)
 8000934:	1ca1      	adds	r1, r4, #2
 8000936:	a801      	add	r0, sp, #4
 8000938:	f7ff ffd6 	bl	80008e8 <ADC_Process>
		//DSP_BUFF[1] = (right >> 16);
		DSP_BUFF[0] = DSP_BUFF[1];
 800093c:	8863      	ldrh	r3, [r4, #2]
 800093e:	8023      	strh	r3, [r4, #0]
	}
}
 8000940:	b002      	add	sp, #8
 8000942:	bd10      	pop	{r4, pc}
 8000944:	40003800 	.word	0x40003800
 8000948:	20000310 	.word	0x20000310
 800094c:	2000039c 	.word	0x2000039c

08000950 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
	if (hi2s->Instance == SPI2) {
 8000950:	6802      	ldr	r2, [r0, #0]
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <HAL_I2S_RxCpltCallback+0x28>)
 8000954:	429a      	cmp	r2, r3
 8000956:	d000      	beq.n	800095a <HAL_I2S_RxCpltCallback+0xa>
 8000958:	4770      	bx	lr
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 800095a:	b510      	push	{r4, lr}
 800095c:	b082      	sub	sp, #8
		//uint32_t left;
		uint32_t right;

		//Conv_ADC(&ADC_BUFF.ADC8[0], &left);
		Conv_ADC(&ADC_BUFF.ADC8[4], &right);
 800095e:	a901      	add	r1, sp, #4
 8000960:	4806      	ldr	r0, [pc, #24]	; (800097c <HAL_I2S_RxCpltCallback+0x2c>)
 8000962:	f7ff ffb7 	bl	80008d4 <Conv_ADC>

		//DSP_BUFF[2] = (left >> 16);
		ADC_Process(&right, &DSP_BUFF[3]);
 8000966:	4c06      	ldr	r4, [pc, #24]	; (8000980 <HAL_I2S_RxCpltCallback+0x30>)
 8000968:	1da1      	adds	r1, r4, #6
 800096a:	a801      	add	r0, sp, #4
 800096c:	f7ff ffbc 	bl	80008e8 <ADC_Process>
		//DSP_BUFF[3] = (right >> 16);
		DSP_BUFF[2] = DSP_BUFF[3];
 8000970:	88e3      	ldrh	r3, [r4, #6]
 8000972:	80a3      	strh	r3, [r4, #4]
	}
}
 8000974:	b002      	add	sp, #8
 8000976:	bd10      	pop	{r4, pc}
 8000978:	40003800 	.word	0x40003800
 800097c:	20000310 	.word	0x20000310
 8000980:	2000039c 	.word	0x2000039c

08000984 <AUDIO_OUT_HalfTransfer_CallBack>:

void AUDIO_OUT_HalfTransfer_CallBack() {
	DAC_BUFF[0] = DSP_BUFF[0];
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <AUDIO_OUT_HalfTransfer_CallBack+0x10>)
 8000986:	4a04      	ldr	r2, [pc, #16]	; (8000998 <AUDIO_OUT_HalfTransfer_CallBack+0x14>)
 8000988:	8811      	ldrh	r1, [r2, #0]
 800098a:	8019      	strh	r1, [r3, #0]
	DAC_BUFF[1] = DSP_BUFF[1];
 800098c:	8852      	ldrh	r2, [r2, #2]
 800098e:	805a      	strh	r2, [r3, #2]
}
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	2000031c 	.word	0x2000031c
 8000998:	2000039c 	.word	0x2000039c

0800099c <AUDIO_OUT_TransferComplete_CallBack>:

void AUDIO_OUT_TransferComplete_CallBack() {
	DAC_BUFF[2] = DSP_BUFF[2];
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <AUDIO_OUT_TransferComplete_CallBack+0x10>)
 800099e:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <AUDIO_OUT_TransferComplete_CallBack+0x14>)
 80009a0:	8891      	ldrh	r1, [r2, #4]
 80009a2:	8099      	strh	r1, [r3, #4]
	DAC_BUFF[3] = DSP_BUFF[3];
 80009a4:	88d2      	ldrh	r2, [r2, #6]
 80009a6:	80da      	strh	r2, [r3, #6]
}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	2000031c 	.word	0x2000031c
 80009b0:	2000039c 	.word	0x2000039c

080009b4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80009b4:	b500      	push	{lr}
 80009b6:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b8:	2230      	movs	r2, #48	; 0x30
 80009ba:	2100      	movs	r1, #0
 80009bc:	a808      	add	r0, sp, #32
 80009be:	f006 fea1 	bl	8007704 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c2:	2300      	movs	r3, #0
 80009c4:	9303      	str	r3, [sp, #12]
 80009c6:	9304      	str	r3, [sp, #16]
 80009c8:	9305      	str	r3, [sp, #20]
 80009ca:	9306      	str	r3, [sp, #24]
 80009cc:	9307      	str	r3, [sp, #28]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	9301      	str	r3, [sp, #4]
 80009d0:	4a20      	ldr	r2, [pc, #128]	; (8000a54 <SystemClock_Config+0xa0>)
 80009d2:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80009d4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80009d8:	6411      	str	r1, [r2, #64]	; 0x40
 80009da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80009dc:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80009e0:	9201      	str	r2, [sp, #4]
 80009e2:	9a01      	ldr	r2, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009e4:	9302      	str	r3, [sp, #8]
 80009e6:	4b1c      	ldr	r3, [pc, #112]	; (8000a58 <SystemClock_Config+0xa4>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f6:	9302      	str	r3, [sp, #8]
 80009f8:	9b02      	ldr	r3, [sp, #8]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009fa:	2301      	movs	r3, #1
 80009fc:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a02:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a04:	2302      	movs	r3, #2
 8000a06:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a08:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a0c:	920f      	str	r2, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000a0e:	2204      	movs	r2, #4
 8000a10:	9210      	str	r2, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000a12:	22a8      	movs	r2, #168	; 0xa8
 8000a14:	9211      	str	r2, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a16:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a18:	2307      	movs	r3, #7
 8000a1a:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a1c:	a808      	add	r0, sp, #32
 8000a1e:	f003 f86b 	bl	8003af8 <HAL_RCC_OscConfig>
 8000a22:	b998      	cbnz	r0, 8000a4c <SystemClock_Config+0x98>
		Error_Handler();
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a24:	230f      	movs	r3, #15
 8000a26:	9303      	str	r3, [sp, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a30:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a34:	9306      	str	r3, [sp, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3a:	9307      	str	r3, [sp, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a3c:	2105      	movs	r1, #5
 8000a3e:	a803      	add	r0, sp, #12
 8000a40:	f003 fac0 	bl	8003fc4 <HAL_RCC_ClockConfig>
 8000a44:	b920      	cbnz	r0, 8000a50 <SystemClock_Config+0x9c>
	{
		Error_Handler();
	}
}
 8000a46:	b015      	add	sp, #84	; 0x54
 8000a48:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4c:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a4e:	e7fe      	b.n	8000a4e <SystemClock_Config+0x9a>
 8000a50:	b672      	cpsid	i
 8000a52:	e7fe      	b.n	8000a52 <SystemClock_Config+0x9e>
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40007000 	.word	0x40007000

08000a5c <PeriphCommonClock_Config>:
{
 8000a5c:	b500      	push	{lr}
 8000a5e:	b085      	sub	sp, #20
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a60:	2300      	movs	r3, #0
 8000a62:	9303      	str	r3, [sp, #12]
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a64:	2301      	movs	r3, #1
 8000a66:	9300      	str	r3, [sp, #0]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 196;
 8000a68:	23c4      	movs	r3, #196	; 0xc4
 8000a6a:	9301      	str	r3, [sp, #4]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 4;
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	9302      	str	r3, [sp, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a70:	4668      	mov	r0, sp
 8000a72:	f003 fb79 	bl	8004168 <HAL_RCCEx_PeriphCLKConfig>
 8000a76:	b910      	cbnz	r0, 8000a7e <PeriphCommonClock_Config+0x22>
}
 8000a78:	b005      	add	sp, #20
 8000a7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a7e:	b672      	cpsid	i
	while (1)
 8000a80:	e7fe      	b.n	8000a80 <PeriphCommonClock_Config+0x24>
	...

08000a84 <main>:
{
 8000a84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a88:	b0a9      	sub	sp, #164	; 0xa4
	HAL_Init();
 8000a8a:	f000 ff8d 	bl	80019a8 <HAL_Init>
	SystemClock_Config();
 8000a8e:	f7ff ff91 	bl	80009b4 <SystemClock_Config>
	PeriphCommonClock_Config();
 8000a92:	f7ff ffe3 	bl	8000a5c <PeriphCommonClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a96:	2400      	movs	r4, #0
 8000a98:	9407      	str	r4, [sp, #28]
 8000a9a:	9408      	str	r4, [sp, #32]
 8000a9c:	9409      	str	r4, [sp, #36]	; 0x24
 8000a9e:	940a      	str	r4, [sp, #40]	; 0x28
 8000aa0:	940b      	str	r4, [sp, #44]	; 0x2c
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa2:	9402      	str	r4, [sp, #8]
 8000aa4:	4d9c      	ldr	r5, [pc, #624]	; (8000d18 <main+0x294>)
 8000aa6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aac:	632b      	str	r3, [r5, #48]	; 0x30
 8000aae:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab4:	9302      	str	r3, [sp, #8]
 8000ab6:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab8:	9403      	str	r4, [sp, #12]
 8000aba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	632b      	str	r3, [r5, #48]	; 0x30
 8000ac2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000ac4:	f003 0302 	and.w	r3, r3, #2
 8000ac8:	9303      	str	r3, [sp, #12]
 8000aca:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000acc:	9404      	str	r4, [sp, #16]
 8000ace:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000ad0:	f043 0304 	orr.w	r3, r3, #4
 8000ad4:	632b      	str	r3, [r5, #48]	; 0x30
 8000ad6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000ad8:	f003 0304 	and.w	r3, r3, #4
 8000adc:	9304      	str	r3, [sp, #16]
 8000ade:	9b04      	ldr	r3, [sp, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	9405      	str	r4, [sp, #20]
 8000ae2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	632b      	str	r3, [r5, #48]	; 0x30
 8000aea:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	9305      	str	r3, [sp, #20]
 8000af2:	9b05      	ldr	r3, [sp, #20]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000af4:	9406      	str	r4, [sp, #24]
 8000af6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000af8:	f043 0308 	orr.w	r3, r3, #8
 8000afc:	632b      	str	r3, [r5, #48]	; 0x30
 8000afe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000b00:	f003 0308 	and.w	r3, r3, #8
 8000b04:	9306      	str	r3, [sp, #24]
 8000b06:	9b06      	ldr	r3, [sp, #24]
	HAL_GPIO_WritePin(SPKRPower_GPIO_Port, SPKRPower_Pin, GPIO_PIN_RESET);
 8000b08:	f8df 9248 	ldr.w	r9, [pc, #584]	; 8000d54 <main+0x2d0>
 8000b0c:	4622      	mov	r2, r4
 8000b0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b12:	4648      	mov	r0, r9
 8000b14:	f001 fb94 	bl	8002240 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8000b18:	f8df 824c 	ldr.w	r8, [pc, #588]	; 8000d68 <main+0x2e4>
 8000b1c:	4622      	mov	r2, r4
 8000b1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b22:	4640      	mov	r0, r8
 8000b24:	f001 fb8c 	bl	8002240 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b28:	4f7c      	ldr	r7, [pc, #496]	; (8000d1c <main+0x298>)
 8000b2a:	4622      	mov	r2, r4
 8000b2c:	2118      	movs	r1, #24
 8000b2e:	4638      	mov	r0, r7
 8000b30:	f001 fb86 	bl	8002240 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = SPKRPower_Pin;
 8000b34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b38:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2601      	movs	r6, #1
 8000b3c:	9608      	str	r6, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	940a      	str	r4, [sp, #40]	; 0x28
	HAL_GPIO_Init(SPKRPower_GPIO_Port, &GPIO_InitStruct);
 8000b42:	a907      	add	r1, sp, #28
 8000b44:	4648      	mov	r0, r9
 8000b46:	f001 f9c9 	bl	8001edc <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = OtgPower_Pin;
 8000b4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b4e:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b50:	9608      	str	r6, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	940a      	str	r4, [sp, #40]	; 0x28
	HAL_GPIO_Init(OtgPower_GPIO_Port, &GPIO_InitStruct);
 8000b56:	a907      	add	r1, sp, #28
 8000b58:	4640      	mov	r0, r8
 8000b5a:	f001 f9bf 	bl	8001edc <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 8000b5e:	2318      	movs	r3, #24
 8000b60:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	9608      	str	r6, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	940a      	str	r4, [sp, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b68:	a907      	add	r1, sp, #28
 8000b6a:	4638      	mov	r0, r7
 8000b6c:	f001 f9b6 	bl	8001edc <HAL_GPIO_Init>
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000b70:	9400      	str	r4, [sp, #0]
 8000b72:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000b74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b78:	632b      	str	r3, [r5, #48]	; 0x30
 8000b7a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000b7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	9b00      	ldr	r3, [sp, #0]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000b84:	9401      	str	r4, [sp, #4]
 8000b86:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000b88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b8c:	632b      	str	r3, [r5, #48]	; 0x30
 8000b8e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b94:	9301      	str	r3, [sp, #4]
 8000b96:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000b98:	4622      	mov	r2, r4
 8000b9a:	4621      	mov	r1, r4
 8000b9c:	200e      	movs	r0, #14
 8000b9e:	f000 ff55 	bl	8001a4c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ba2:	200e      	movs	r0, #14
 8000ba4:	f000 ff88 	bl	8001ab8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ba8:	4622      	mov	r2, r4
 8000baa:	4621      	mov	r1, r4
 8000bac:	2010      	movs	r0, #16
 8000bae:	f000 ff4d 	bl	8001a4c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000bb2:	2010      	movs	r0, #16
 8000bb4:	f000 ff80 	bl	8001ab8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000bb8:	4622      	mov	r2, r4
 8000bba:	4621      	mov	r1, r4
 8000bbc:	203a      	movs	r0, #58	; 0x3a
 8000bbe:	f000 ff45 	bl	8001a4c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000bc2:	203a      	movs	r0, #58	; 0x3a
 8000bc4:	f000 ff78 	bl	8001ab8 <HAL_NVIC_EnableIRQ>
	huart1.Instance = USART1;
 8000bc8:	4855      	ldr	r0, [pc, #340]	; (8000d20 <main+0x29c>)
 8000bca:	4b56      	ldr	r3, [pc, #344]	; (8000d24 <main+0x2a0>)
 8000bcc:	6003      	str	r3, [r0, #0]
	huart1.Init.BaudRate = 115200;
 8000bce:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000bd2:	6043      	str	r3, [r0, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd4:	6084      	str	r4, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000bd6:	60c4      	str	r4, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000bd8:	6104      	str	r4, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000bda:	230c      	movs	r3, #12
 8000bdc:	6143      	str	r3, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bde:	6184      	str	r4, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be0:	61c4      	str	r4, [r0, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000be2:	f003 fc8b 	bl	80044fc <HAL_UART_Init>
 8000be6:	2800      	cmp	r0, #0
 8000be8:	f040 8082 	bne.w	8000cf0 <main+0x26c>
	MX_FATFS_Init();
 8000bec:	f004 fa72 	bl	80050d4 <MX_FATFS_Init>
	MX_USB_HOST_Init();
 8000bf0:	f006 fbd2 	bl	8007398 <MX_USB_HOST_Init>
	hi2s3.Instance = SPI3;
 8000bf4:	484c      	ldr	r0, [pc, #304]	; (8000d28 <main+0x2a4>)
 8000bf6:	4b4d      	ldr	r3, [pc, #308]	; (8000d2c <main+0x2a8>)
 8000bf8:	6003      	str	r3, [r0, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000bfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bfe:	6042      	str	r2, [r0, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c00:	2300      	movs	r3, #0
 8000c02:	6083      	str	r3, [r0, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000c04:	60c3      	str	r3, [r0, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000c06:	6102      	str	r2, [r0, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000c08:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000c0c:	6142      	str	r2, [r0, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000c0e:	6183      	str	r3, [r0, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000c10:	61c3      	str	r3, [r0, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000c12:	6203      	str	r3, [r0, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000c14:	f002 fb8a 	bl	800332c <HAL_I2S_Init>
 8000c18:	2800      	cmp	r0, #0
 8000c1a:	d16b      	bne.n	8000cf4 <main+0x270>
	hi2c1.Instance = I2C1;
 8000c1c:	4844      	ldr	r0, [pc, #272]	; (8000d30 <main+0x2ac>)
 8000c1e:	4b45      	ldr	r3, [pc, #276]	; (8000d34 <main+0x2b0>)
 8000c20:	6003      	str	r3, [r0, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000c22:	4b45      	ldr	r3, [pc, #276]	; (8000d38 <main+0x2b4>)
 8000c24:	6043      	str	r3, [r0, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c26:	2300      	movs	r3, #0
 8000c28:	6083      	str	r3, [r0, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000c2a:	60c3      	str	r3, [r0, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c30:	6102      	str	r2, [r0, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c32:	6143      	str	r3, [r0, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000c34:	6183      	str	r3, [r0, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c36:	61c3      	str	r3, [r0, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c38:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c3a:	f002 f9e1 	bl	8003000 <HAL_I2C_Init>
 8000c3e:	2800      	cmp	r0, #0
 8000c40:	d15a      	bne.n	8000cf8 <main+0x274>
	hi2s2.Instance = SPI2;
 8000c42:	483e      	ldr	r0, [pc, #248]	; (8000d3c <main+0x2b8>)
 8000c44:	4b3e      	ldr	r3, [pc, #248]	; (8000d40 <main+0x2bc>)
 8000c46:	6003      	str	r3, [r0, #0]
	hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000c48:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c4c:	6043      	str	r3, [r0, #4]
	hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	6083      	str	r3, [r0, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000c52:	2203      	movs	r2, #3
 8000c54:	60c2      	str	r2, [r0, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000c56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c5a:	6102      	str	r2, [r0, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000c5c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000c60:	6142      	str	r2, [r0, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000c62:	6183      	str	r3, [r0, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000c64:	61c3      	str	r3, [r0, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000c66:	6203      	str	r3, [r0, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000c68:	f002 fb60 	bl	800332c <HAL_I2S_Init>
 8000c6c:	2800      	cmp	r0, #0
 8000c6e:	d145      	bne.n	8000cfc <main+0x278>
	Commander_Init(&hcommander, &huart1, &hdma_usart1_rx, command_callback);
 8000c70:	4c34      	ldr	r4, [pc, #208]	; (8000d44 <main+0x2c0>)
 8000c72:	4b35      	ldr	r3, [pc, #212]	; (8000d48 <main+0x2c4>)
 8000c74:	4a35      	ldr	r2, [pc, #212]	; (8000d4c <main+0x2c8>)
 8000c76:	492a      	ldr	r1, [pc, #168]	; (8000d20 <main+0x29c>)
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f000 faf0 	bl	800125e <Commander_Init>
	Commander_Start(&hcommander);
 8000c7e:	4620      	mov	r0, r4
 8000c80:	f000 fafc 	bl	800127c <Commander_Start>
	Pedalboard_Init(&hpedalboard);
 8000c84:	4c32      	ldr	r4, [pc, #200]	; (8000d50 <main+0x2cc>)
 8000c86:	4620      	mov	r0, r4
 8000c88:	f000 fb66 	bl	8001358 <Pedalboard_Init>
	Pedalboard_Append(&hpedalboard, OVERDRIVE);
 8000c8c:	2105      	movs	r1, #5
 8000c8e:	4620      	mov	r0, r4
 8000c90:	f000 fc70 	bl	8001574 <Pedalboard_Append>
	Pedalboard_Append(&hpedalboard, LPF);
 8000c94:	2104      	movs	r1, #4
 8000c96:	4620      	mov	r0, r4
 8000c98:	f000 fc6c 	bl	8001574 <Pedalboard_Append>
	HAL_GPIO_WritePin(SPKRPower_GPIO_Port, SPKRPower_Pin, RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ca2:	482c      	ldr	r0, [pc, #176]	; (8000d54 <main+0x2d0>)
 8000ca4:	f001 facc 	bl	8002240 <HAL_GPIO_WritePin>
	cs43l22_Init(0x94, OUTPUT_DEVICE_HEADPHONE, 200, AUDIO_FREQUENCY_48K);
 8000ca8:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8000cac:	22c8      	movs	r2, #200	; 0xc8
 8000cae:	2102      	movs	r1, #2
 8000cb0:	2094      	movs	r0, #148	; 0x94
 8000cb2:	f7ff fd41 	bl	8000738 <cs43l22_Init>
	cs43l22_Play(AUDIO_I2C_ADDRESS, (uint16_t *)DAC_BUFF, 4);
 8000cb6:	4c28      	ldr	r4, [pc, #160]	; (8000d58 <main+0x2d4>)
 8000cb8:	2204      	movs	r2, #4
 8000cba:	4621      	mov	r1, r4
 8000cbc:	2094      	movs	r0, #148	; 0x94
 8000cbe:	f7ff fd0b 	bl	80006d8 <cs43l22_Play>
	HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)DAC_BUFF, 4);
 8000cc2:	2204      	movs	r2, #4
 8000cc4:	4621      	mov	r1, r4
 8000cc6:	4818      	ldr	r0, [pc, #96]	; (8000d28 <main+0x2a4>)
 8000cc8:	f002 fbf2 	bl	80034b0 <HAL_I2S_Transmit_DMA>
	cs43l22_SetVolume(AUDIO_I2C_ADDRESS, 230);
 8000ccc:	21e6      	movs	r1, #230	; 0xe6
 8000cce:	2094      	movs	r0, #148	; 0x94
 8000cd0:	f7ff fd22 	bl	8000718 <cs43l22_SetVolume>
	HAL_I2S_Receive_DMA(&hi2s2, ADC_BUFF.ADC16, 4);
 8000cd4:	2204      	movs	r2, #4
 8000cd6:	4921      	ldr	r1, [pc, #132]	; (8000d5c <main+0x2d8>)
 8000cd8:	4818      	ldr	r0, [pc, #96]	; (8000d3c <main+0x2b8>)
 8000cda:	f002 fc57 	bl	800358c <HAL_I2S_Receive_DMA>
		HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8000cde:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8000d68 <main+0x2e4>
 8000ce2:	2500      	movs	r5, #0
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000ce4:	4c0d      	ldr	r4, [pc, #52]	; (8000d1c <main+0x298>)
 8000ce6:	2708      	movs	r7, #8
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ce8:	2610      	movs	r6, #16
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000cea:	f04f 0801 	mov.w	r8, #1
 8000cee:	e074      	b.n	8000dda <main+0x356>
 8000cf0:	b672      	cpsid	i
	while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <main+0x26e>
 8000cf4:	b672      	cpsid	i
 8000cf6:	e7fe      	b.n	8000cf6 <main+0x272>
 8000cf8:	b672      	cpsid	i
 8000cfa:	e7fe      	b.n	8000cfa <main+0x276>
 8000cfc:	b672      	cpsid	i
 8000cfe:	e7fe      	b.n	8000cfe <main+0x27a>
			if(f_mount(&usbFatFS, (TCHAR const*)USBHPath, 0) == FR_OK)
 8000d00:	462a      	mov	r2, r5
 8000d02:	4917      	ldr	r1, [pc, #92]	; (8000d60 <main+0x2dc>)
 8000d04:	4817      	ldr	r0, [pc, #92]	; (8000d64 <main+0x2e0>)
 8000d06:	f006 facd 	bl	80072a4 <f_mount>
 8000d0a:	bbc8      	cbnz	r0, 8000d80 <main+0x2fc>
				HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000d0c:	4642      	mov	r2, r8
 8000d0e:	4639      	mov	r1, r7
 8000d10:	4620      	mov	r0, r4
 8000d12:	f001 fa95 	bl	8002240 <HAL_GPIO_WritePin>
 8000d16:	e033      	b.n	8000d80 <main+0x2fc>
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40020c00 	.word	0x40020c00
 8000d20:	20001744 	.word	0x20001744
 8000d24:	40011000 	.word	0x40011000
 8000d28:	200010b8 	.word	0x200010b8
 8000d2c:	40003c00 	.word	0x40003c00
 8000d30:	2000101c 	.word	0x2000101c
 8000d34:	40005400 	.word	0x40005400
 8000d38:	000186a0 	.word	0x000186a0
 8000d3c:	20001070 	.word	0x20001070
 8000d40:	40003800 	.word	0x40003800
 8000d44:	200005a4 	.word	0x200005a4
 8000d48:	08000881 	.word	0x08000881
 8000d4c:	20000fbc 	.word	0x20000fbc
 8000d50:	20001100 	.word	0x20001100
 8000d54:	40020400 	.word	0x40020400
 8000d58:	2000031c 	.word	0x2000031c
 8000d5c:	2000030c 	.word	0x2000030c
 8000d60:	200027c8 	.word	0x200027c8
 8000d64:	2000178c 	.word	0x2000178c
 8000d68:	40020800 	.word	0x40020800
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000d6c:	462a      	mov	r2, r5
 8000d6e:	4639      	mov	r1, r7
 8000d70:	4620      	mov	r0, r4
 8000d72:	f001 fa65 	bl	8002240 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d76:	462a      	mov	r2, r5
 8000d78:	4631      	mov	r1, r6
 8000d7a:	4620      	mov	r0, r4
 8000d7c:	f001 fa60 	bl	8002240 <HAL_GPIO_WritePin>
		HAL_Delay(7000);
 8000d80:	f641 3058 	movw	r0, #7000	; 0x1b58
 8000d84:	f000 fe3c 	bl	8001a00 <HAL_Delay>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000d88:	4642      	mov	r2, r8
 8000d8a:	4639      	mov	r1, r7
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	f001 fa57 	bl	8002240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000d92:	4642      	mov	r2, r8
 8000d94:	4631      	mov	r1, r6
 8000d96:	4620      	mov	r0, r4
 8000d98:	f001 fa52 	bl	8002240 <HAL_GPIO_WritePin>
		command.header = 0x05;
 8000d9c:	2305      	movs	r3, #5
 8000d9e:	f88d 301c 	strb.w	r3, [sp, #28]
		for(uint8_t i = 0; i < 128; i++) {
 8000da2:	481a      	ldr	r0, [pc, #104]	; (8000e0c <main+0x388>)
 8000da4:	1f03      	subs	r3, r0, #4
 8000da6:	f10d 021f 	add.w	r2, sp, #31
 8000daa:	f500 70fe 	add.w	r0, r0, #508	; 0x1fc
			command.payload.bytes[i] = debug_samples[i];
 8000dae:	f853 1f04 	ldr.w	r1, [r3, #4]!
 8000db2:	f802 1f01 	strb.w	r1, [r2, #1]!
		for(uint8_t i = 0; i < 128; i++) {
 8000db6:	4283      	cmp	r3, r0
 8000db8:	d1f9      	bne.n	8000dae <main+0x32a>
		Commander_Send(&hcommander, &command);
 8000dba:	a907      	add	r1, sp, #28
 8000dbc:	4814      	ldr	r0, [pc, #80]	; (8000e10 <main+0x38c>)
 8000dbe:	f000 fa66 	bl	800128e <Commander_Send>
		samples_count = 0;
 8000dc2:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <main+0x390>)
 8000dc4:	701d      	strb	r5, [r3, #0]
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000dc6:	462a      	mov	r2, r5
 8000dc8:	4639      	mov	r1, r7
 8000dca:	4620      	mov	r0, r4
 8000dcc:	f001 fa38 	bl	8002240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000dd0:	462a      	mov	r2, r5
 8000dd2:	4631      	mov	r1, r6
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f001 fa33 	bl	8002240 <HAL_GPIO_WritePin>
		MX_USB_HOST_Process();
 8000dda:	f006 fafd 	bl	80073d8 <MX_USB_HOST_Process>
		HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8000dde:	462a      	mov	r2, r5
 8000de0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000de4:	4648      	mov	r0, r9
 8000de6:	f001 fa2b 	bl	8002240 <HAL_GPIO_WritePin>
		if (Appli_state == APPLICATION_START) {
 8000dea:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <main+0x394>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d086      	beq.n	8000d00 <main+0x27c>
		} else if (Appli_state == APPLICATION_DISCONNECT || Appli_state == APPLICATION_IDLE) {
 8000df2:	2b03      	cmp	r3, #3
 8000df4:	d0ba      	beq.n	8000d6c <main+0x2e8>
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d0b8      	beq.n	8000d6c <main+0x2e8>
		} else if (Appli_state == APPLICATION_READY) {
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d1c0      	bne.n	8000d80 <main+0x2fc>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000dfe:	4642      	mov	r2, r8
 8000e00:	4631      	mov	r1, r6
 8000e02:	4620      	mov	r0, r4
 8000e04:	f001 fa1c 	bl	8002240 <HAL_GPIO_WritePin>
 8000e08:	e7ba      	b.n	8000d80 <main+0x2fc>
 8000e0a:	bf00      	nop
 8000e0c:	200003a4 	.word	0x200003a4
 8000e10:	200005a4 	.word	0x200005a4
 8000e14:	20001788 	.word	0x20001788
 8000e18:	20002804 	.word	0x20002804

08000e1c <Error_Handler>:
 8000e1c:	b672      	cpsid	i
	while (1)
 8000e1e:	e7fe      	b.n	8000e1e <Error_Handler+0x2>

08000e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e20:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	2100      	movs	r1, #0
 8000e24:	9100      	str	r1, [sp, #0]
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <HAL_MspInit+0x34>)
 8000e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e2e:	645a      	str	r2, [r3, #68]	; 0x44
 8000e30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e32:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000e36:	9200      	str	r2, [sp, #0]
 8000e38:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	9101      	str	r1, [sp, #4]
 8000e3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e3e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e42:	641a      	str	r2, [r3, #64]	; 0x40
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	9301      	str	r3, [sp, #4]
 8000e4c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4e:	b002      	add	sp, #8
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40023800 	.word	0x40023800

08000e58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e58:	b530      	push	{r4, r5, lr}
 8000e5a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	9303      	str	r3, [sp, #12]
 8000e60:	9304      	str	r3, [sp, #16]
 8000e62:	9305      	str	r3, [sp, #20]
 8000e64:	9306      	str	r3, [sp, #24]
 8000e66:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8000e68:	6802      	ldr	r2, [r0, #0]
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <HAL_I2C_MspInit+0x64>)
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d001      	beq.n	8000e74 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e70:	b009      	add	sp, #36	; 0x24
 8000e72:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e74:	2500      	movs	r5, #0
 8000e76:	9501      	str	r5, [sp, #4]
 8000e78:	4c11      	ldr	r4, [pc, #68]	; (8000ec0 <HAL_I2C_MspInit+0x68>)
 8000e7a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e7c:	f043 0302 	orr.w	r3, r3, #2
 8000e80:	6323      	str	r3, [r4, #48]	; 0x30
 8000e82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	9301      	str	r3, [sp, #4]
 8000e8a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e8c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e90:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e92:	2312      	movs	r3, #18
 8000e94:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e96:	2303      	movs	r3, #3
 8000e98:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9e:	a903      	add	r1, sp, #12
 8000ea0:	4808      	ldr	r0, [pc, #32]	; (8000ec4 <HAL_I2C_MspInit+0x6c>)
 8000ea2:	f001 f81b 	bl	8001edc <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ea6:	9502      	str	r5, [sp, #8]
 8000ea8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000eaa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eae:	6423      	str	r3, [r4, #64]	; 0x40
 8000eb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000eb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb6:	9302      	str	r3, [sp, #8]
 8000eb8:	9b02      	ldr	r3, [sp, #8]
}
 8000eba:	e7d9      	b.n	8000e70 <HAL_I2C_MspInit+0x18>
 8000ebc:	40005400 	.word	0x40005400
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020400 	.word	0x40020400

08000ec8 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C1)
 8000ec8:	6802      	ldr	r2, [r0, #0]
 8000eca:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <HAL_I2C_MspDeInit+0x30>)
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d000      	beq.n	8000ed2 <HAL_I2C_MspDeInit+0xa>
 8000ed0:	4770      	bx	lr
{
 8000ed2:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000ed4:	4a09      	ldr	r2, [pc, #36]	; (8000efc <HAL_I2C_MspDeInit+0x34>)
 8000ed6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000ed8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000edc:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8000ede:	4c08      	ldr	r4, [pc, #32]	; (8000f00 <HAL_I2C_MspDeInit+0x38>)
 8000ee0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	f001 f8ff 	bl	80020e8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8000eea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eee:	4620      	mov	r0, r4
 8000ef0:	f001 f8fa 	bl	80020e8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8000ef4:	bd10      	pop	{r4, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40005400 	.word	0x40005400
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020400 	.word	0x40020400

08000f04 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f06:	b08d      	sub	sp, #52	; 0x34
 8000f08:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	9307      	str	r3, [sp, #28]
 8000f0e:	9308      	str	r3, [sp, #32]
 8000f10:	9309      	str	r3, [sp, #36]	; 0x24
 8000f12:	930a      	str	r3, [sp, #40]	; 0x28
 8000f14:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hi2s->Instance==SPI2)
 8000f16:	6803      	ldr	r3, [r0, #0]
 8000f18:	4a59      	ldr	r2, [pc, #356]	; (8001080 <HAL_I2S_MspInit+0x17c>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d004      	beq.n	8000f28 <HAL_I2S_MspInit+0x24>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hi2s->Instance==SPI3)
 8000f1e:	4a59      	ldr	r2, [pc, #356]	; (8001084 <HAL_I2S_MspInit+0x180>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d058      	beq.n	8000fd6 <HAL_I2S_MspInit+0xd2>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f24:	b00d      	add	sp, #52	; 0x34
 8000f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f28:	2500      	movs	r5, #0
 8000f2a:	9501      	str	r5, [sp, #4]
 8000f2c:	4b56      	ldr	r3, [pc, #344]	; (8001088 <HAL_I2S_MspInit+0x184>)
 8000f2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f34:	641a      	str	r2, [r3, #64]	; 0x40
 8000f36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f38:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000f3c:	9201      	str	r2, [sp, #4]
 8000f3e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f40:	9502      	str	r5, [sp, #8]
 8000f42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f44:	f042 0202 	orr.w	r2, r2, #2
 8000f48:	631a      	str	r2, [r3, #48]	; 0x30
 8000f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f4c:	f002 0202 	and.w	r2, r2, #2
 8000f50:	9202      	str	r2, [sp, #8]
 8000f52:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f54:	9503      	str	r5, [sp, #12]
 8000f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f58:	f042 0204 	orr.w	r2, r2, #4
 8000f5c:	631a      	str	r2, [r3, #48]	; 0x30
 8000f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	9303      	str	r3, [sp, #12]
 8000f66:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000f68:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000f6c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2702      	movs	r7, #2
 8000f70:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f72:	2605      	movs	r6, #5
 8000f74:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f76:	a907      	add	r1, sp, #28
 8000f78:	4844      	ldr	r0, [pc, #272]	; (800108c <HAL_I2S_MspInit+0x188>)
 8000f7a:	f000 ffaf 	bl	8001edc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f7e:	2340      	movs	r3, #64	; 0x40
 8000f80:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f82:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f88:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f8a:	a907      	add	r1, sp, #28
 8000f8c:	4840      	ldr	r0, [pc, #256]	; (8001090 <HAL_I2S_MspInit+0x18c>)
 8000f8e:	f000 ffa5 	bl	8001edc <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000f92:	4840      	ldr	r0, [pc, #256]	; (8001094 <HAL_I2S_MspInit+0x190>)
 8000f94:	4b40      	ldr	r3, [pc, #256]	; (8001098 <HAL_I2S_MspInit+0x194>)
 8000f96:	6003      	str	r3, [r0, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8000f98:	6045      	str	r5, [r0, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f9a:	6085      	str	r5, [r0, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f9c:	60c5      	str	r5, [r0, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fa2:	6103      	str	r3, [r0, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fa4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fa8:	6143      	str	r3, [r0, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000faa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fae:	6183      	str	r3, [r0, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000fb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fb4:	61c3      	str	r3, [r0, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fb6:	6205      	str	r5, [r0, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000fb8:	2304      	movs	r3, #4
 8000fba:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8000fbc:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000fbe:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000fc0:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000fc2:	f000 fdbb 	bl	8001b3c <HAL_DMA_Init>
 8000fc6:	b918      	cbnz	r0, 8000fd0 <HAL_I2S_MspInit+0xcc>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8000fc8:	4b32      	ldr	r3, [pc, #200]	; (8001094 <HAL_I2S_MspInit+0x190>)
 8000fca:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000fcc:	639c      	str	r4, [r3, #56]	; 0x38
 8000fce:	e7a9      	b.n	8000f24 <HAL_I2S_MspInit+0x20>
      Error_Handler();
 8000fd0:	f7ff ff24 	bl	8000e1c <Error_Handler>
 8000fd4:	e7f8      	b.n	8000fc8 <HAL_I2S_MspInit+0xc4>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fd6:	2500      	movs	r5, #0
 8000fd8:	9504      	str	r5, [sp, #16]
 8000fda:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <HAL_I2S_MspInit+0x184>)
 8000fdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000fe2:	641a      	str	r2, [r3, #64]	; 0x40
 8000fe4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fe6:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8000fea:	9204      	str	r2, [sp, #16]
 8000fec:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fee:	9505      	str	r5, [sp, #20]
 8000ff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ff2:	f042 0204 	orr.w	r2, r2, #4
 8000ff6:	631a      	str	r2, [r3, #48]	; 0x30
 8000ff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ffa:	f002 0204 	and.w	r2, r2, #4
 8000ffe:	9205      	str	r2, [sp, #20]
 8001000:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	9506      	str	r5, [sp, #24]
 8001004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001006:	f042 0201 	orr.w	r2, r2, #1
 800100a:	631a      	str	r2, [r3, #48]	; 0x30
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	9306      	str	r3, [sp, #24]
 8001014:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001016:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800101a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2702      	movs	r7, #2
 800101e:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001020:	2606      	movs	r6, #6
 8001022:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001024:	a907      	add	r1, sp, #28
 8001026:	481a      	ldr	r0, [pc, #104]	; (8001090 <HAL_I2S_MspInit+0x18c>)
 8001028:	f000 ff58 	bl	8001edc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800102c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001030:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001038:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103a:	a907      	add	r1, sp, #28
 800103c:	4817      	ldr	r0, [pc, #92]	; (800109c <HAL_I2S_MspInit+0x198>)
 800103e:	f000 ff4d 	bl	8001edc <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001042:	4817      	ldr	r0, [pc, #92]	; (80010a0 <HAL_I2S_MspInit+0x19c>)
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <HAL_I2S_MspInit+0x1a0>)
 8001046:	6003      	str	r3, [r0, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001048:	6045      	str	r5, [r0, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800104a:	2340      	movs	r3, #64	; 0x40
 800104c:	6083      	str	r3, [r0, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800104e:	60c5      	str	r5, [r0, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001054:	6103      	str	r3, [r0, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001056:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800105a:	6143      	str	r3, [r0, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800105c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001060:	6183      	str	r3, [r0, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001062:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001066:	61c3      	str	r3, [r0, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001068:	6205      	str	r5, [r0, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800106a:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800106c:	f000 fd66 	bl	8001b3c <HAL_DMA_Init>
 8001070:	b918      	cbnz	r0, 800107a <HAL_I2S_MspInit+0x176>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <HAL_I2S_MspInit+0x19c>)
 8001074:	63a3      	str	r3, [r4, #56]	; 0x38
 8001076:	639c      	str	r4, [r3, #56]	; 0x38
}
 8001078:	e754      	b.n	8000f24 <HAL_I2S_MspInit+0x20>
      Error_Handler();
 800107a:	f7ff fecf 	bl	8000e1c <Error_Handler>
 800107e:	e7f8      	b.n	8001072 <HAL_I2S_MspInit+0x16e>
 8001080:	40003800 	.word	0x40003800
 8001084:	40003c00 	.word	0x40003c00
 8001088:	40023800 	.word	0x40023800
 800108c:	40020400 	.word	0x40020400
 8001090:	40020800 	.word	0x40020800
 8001094:	20000efc 	.word	0x20000efc
 8001098:	40026058 	.word	0x40026058
 800109c:	40020000 	.word	0x40020000
 80010a0:	20000f5c 	.word	0x20000f5c
 80010a4:	40026088 	.word	0x40026088

080010a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a8:	b530      	push	{r4, r5, lr}
 80010aa:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	2300      	movs	r3, #0
 80010ae:	9303      	str	r3, [sp, #12]
 80010b0:	9304      	str	r3, [sp, #16]
 80010b2:	9305      	str	r3, [sp, #20]
 80010b4:	9306      	str	r3, [sp, #24]
 80010b6:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 80010b8:	6802      	ldr	r2, [r0, #0]
 80010ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80010be:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d001      	beq.n	80010ca <HAL_UART_MspInit+0x22>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010c6:	b009      	add	sp, #36	; 0x24
 80010c8:	bd30      	pop	{r4, r5, pc}
 80010ca:	4604      	mov	r4, r0
    __HAL_RCC_USART1_CLK_ENABLE();
 80010cc:	2500      	movs	r5, #0
 80010ce:	9501      	str	r5, [sp, #4]
 80010d0:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 80010d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010d6:	f042 0210 	orr.w	r2, r2, #16
 80010da:	645a      	str	r2, [r3, #68]	; 0x44
 80010dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010de:	f002 0210 	and.w	r2, r2, #16
 80010e2:	9201      	str	r2, [sp, #4]
 80010e4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e6:	9502      	str	r5, [sp, #8]
 80010e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010ea:	f042 0202 	orr.w	r2, r2, #2
 80010ee:	631a      	str	r2, [r3, #48]	; 0x30
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	9302      	str	r3, [sp, #8]
 80010f8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010fa:	23c0      	movs	r3, #192	; 0xc0
 80010fc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001102:	2303      	movs	r3, #3
 8001104:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001106:	2307      	movs	r3, #7
 8001108:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110a:	a903      	add	r1, sp, #12
 800110c:	480f      	ldr	r0, [pc, #60]	; (800114c <HAL_UART_MspInit+0xa4>)
 800110e:	f000 fee5 	bl	8001edc <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001112:	480f      	ldr	r0, [pc, #60]	; (8001150 <HAL_UART_MspInit+0xa8>)
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <HAL_UART_MspInit+0xac>)
 8001116:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001118:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800111c:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800111e:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001120:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001126:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001128:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800112a:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800112c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001130:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001132:	6205      	str	r5, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001134:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001136:	f000 fd01 	bl	8001b3c <HAL_DMA_Init>
 800113a:	b918      	cbnz	r0, 8001144 <HAL_UART_MspInit+0x9c>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <HAL_UART_MspInit+0xa8>)
 800113e:	63a3      	str	r3, [r4, #56]	; 0x38
 8001140:	639c      	str	r4, [r3, #56]	; 0x38
}
 8001142:	e7c0      	b.n	80010c6 <HAL_UART_MspInit+0x1e>
      Error_Handler();
 8001144:	f7ff fe6a 	bl	8000e1c <Error_Handler>
 8001148:	e7f8      	b.n	800113c <HAL_UART_MspInit+0x94>
 800114a:	bf00      	nop
 800114c:	40020400 	.word	0x40020400
 8001150:	20000fbc 	.word	0x20000fbc
 8001154:	40026440 	.word	0x40026440

08001158 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001158:	e7fe      	b.n	8001158 <NMI_Handler>

0800115a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800115a:	e7fe      	b.n	800115a <HardFault_Handler>

0800115c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800115c:	e7fe      	b.n	800115c <MemManage_Handler>

0800115e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800115e:	e7fe      	b.n	800115e <BusFault_Handler>

08001160 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001160:	e7fe      	b.n	8001160 <UsageFault_Handler>

08001162 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001162:	4770      	bx	lr

08001164 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001164:	4770      	bx	lr

08001166 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001166:	4770      	bx	lr

08001168 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001168:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800116a:	f000 fc37 	bl	80019dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800116e:	bd08      	pop	{r3, pc}

08001170 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001170:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001172:	4802      	ldr	r0, [pc, #8]	; (800117c <DMA1_Stream3_IRQHandler+0xc>)
 8001174:	f000 fdc4 	bl	8001d00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001178:	bd08      	pop	{r3, pc}
 800117a:	bf00      	nop
 800117c:	20000efc 	.word	0x20000efc

08001180 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001180:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001182:	4802      	ldr	r0, [pc, #8]	; (800118c <DMA1_Stream5_IRQHandler+0xc>)
 8001184:	f000 fdbc 	bl	8001d00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001188:	bd08      	pop	{r3, pc}
 800118a:	bf00      	nop
 800118c:	20000f5c 	.word	0x20000f5c

08001190 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001190:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001192:	4802      	ldr	r0, [pc, #8]	; (800119c <DMA2_Stream2_IRQHandler+0xc>)
 8001194:	f000 fdb4 	bl	8001d00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001198:	bd08      	pop	{r3, pc}
 800119a:	bf00      	nop
 800119c:	20000fbc 	.word	0x20000fbc

080011a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80011a2:	4802      	ldr	r0, [pc, #8]	; (80011ac <OTG_FS_IRQHandler+0xc>)
 80011a4:	f001 f9a6 	bl	80024f4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011a8:	bd08      	pop	{r3, pc}
 80011aa:	bf00      	nop
 80011ac:	20002be0 	.word	0x20002be0

080011b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b0:	b508      	push	{r3, lr}
 80011b2:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b4:	4a0c      	ldr	r2, [pc, #48]	; (80011e8 <_sbrk+0x38>)
 80011b6:	6812      	ldr	r2, [r2, #0]
 80011b8:	b152      	cbz	r2, 80011d0 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ba:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <_sbrk+0x38>)
 80011bc:	6810      	ldr	r0, [r2, #0]
 80011be:	4403      	add	r3, r0
 80011c0:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <_sbrk+0x3c>)
 80011c2:	490b      	ldr	r1, [pc, #44]	; (80011f0 <_sbrk+0x40>)
 80011c4:	1a52      	subs	r2, r2, r1
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d806      	bhi.n	80011d8 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80011ca:	4a07      	ldr	r2, [pc, #28]	; (80011e8 <_sbrk+0x38>)
 80011cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80011ce:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 80011d0:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <_sbrk+0x38>)
 80011d2:	4908      	ldr	r1, [pc, #32]	; (80011f4 <_sbrk+0x44>)
 80011d4:	6011      	str	r1, [r2, #0]
 80011d6:	e7f0      	b.n	80011ba <_sbrk+0xa>
    errno = ENOMEM;
 80011d8:	f006 fa4c 	bl	8007674 <__errno>
 80011dc:	230c      	movs	r3, #12
 80011de:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011e4:	e7f3      	b.n	80011ce <_sbrk+0x1e>
 80011e6:	bf00      	nop
 80011e8:	200027c0 	.word	0x200027c0
 80011ec:	20020000 	.word	0x20020000
 80011f0:	00000400 	.word	0x00000400
 80011f4:	20002ef8 	.word	0x20002ef8

080011f8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011f8:	4a03      	ldr	r2, [pc, #12]	; (8001208 <SystemInit+0x10>)
 80011fa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80011fe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001202:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800120c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001244 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001210:	480d      	ldr	r0, [pc, #52]	; (8001248 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001212:	490e      	ldr	r1, [pc, #56]	; (800124c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001214:	4a0e      	ldr	r2, [pc, #56]	; (8001250 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001218:	e002      	b.n	8001220 <LoopCopyDataInit>

0800121a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800121c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121e:	3304      	adds	r3, #4

08001220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001224:	d3f9      	bcc.n	800121a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001226:	4a0b      	ldr	r2, [pc, #44]	; (8001254 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001228:	4c0b      	ldr	r4, [pc, #44]	; (8001258 <LoopFillZerobss+0x26>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800122c:	e001      	b.n	8001232 <LoopFillZerobss>

0800122e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001230:	3204      	adds	r2, #4

08001232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001234:	d3fb      	bcc.n	800122e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001236:	f7ff ffdf 	bl	80011f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800123a:	f006 fa21 	bl	8007680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123e:	f7ff fc21 	bl	8000a84 <main>
  bx  lr    
 8001242:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001244:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800124c:	20000298 	.word	0x20000298
  ldr r2, =_sidata
 8001250:	08007a90 	.word	0x08007a90
  ldr r2, =_sbss
 8001254:	20000298 	.word	0x20000298
  ldr r4, =_ebss
 8001258:	20002ef4 	.word	0x20002ef4

0800125c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800125c:	e7fe      	b.n	800125c <ADC_IRQHandler>

0800125e <Commander_Init>:
#include "stm32f4xx_hal.h"
#include "commander.h"
#include <string.h>

void Commander_Init(Commander_HandleTypeDef *hcommander, UART_HandleTypeDef *huart, DMA_HandleTypeDef *hdma_uart_rx, void (*command_callback)(Command command)) {
	hcommander->huart = huart;
 800125e:	6001      	str	r1, [r0, #0]
	hcommander->hdma_uart_rx = hdma_uart_rx;
 8001260:	6042      	str	r2, [r0, #4]
	hcommander->rear = -1;
 8001262:	22ff      	movs	r2, #255	; 0xff
 8001264:	f880 294c 	strb.w	r2, [r0, #2380]	; 0x94c
	hcommander->front = -1;
 8001268:	f880 294d 	strb.w	r2, [r0, #2381]	; 0x94d
	hcommander->commands_to_handle = 0;
 800126c:	2200      	movs	r2, #0
 800126e:	f880 294e 	strb.w	r2, [r0, #2382]	; 0x94e
	hcommander->counter = 0;
 8001272:	f8c0 2950 	str.w	r2, [r0, #2384]	; 0x950
	hcommander->command_callback = command_callback;
 8001276:	f8c0 3954 	str.w	r3, [r0, #2388]	; 0x954
}
 800127a:	4770      	bx	lr

0800127c <Commander_Start>:

void Commander_Start(Commander_HandleTypeDef *hcommander) {
 800127c:	b508      	push	{r3, lr}
	HAL_UART_Receive_DMA(hcommander->huart, hcommander->uart_rx_buffer, COMMAND_BYTESIZE * 2);
 800127e:	4601      	mov	r1, r0
 8001280:	f851 0b08 	ldr.w	r0, [r1], #8
 8001284:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001288:	f003 fabe 	bl	8004808 <HAL_UART_Receive_DMA>
}
 800128c:	bd08      	pop	{r3, pc}

0800128e <Commander_Send>:

void Commander_Send(Commander_HandleTypeDef *hcommander, Command *command) {
 800128e:	b508      	push	{r3, lr}
	//HAL_StatusTypeDef status;
	/*status = */HAL_UART_Transmit(hcommander->huart, (uint8_t *)command, COMMAND_BYTESIZE, 1000);
 8001290:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001294:	2282      	movs	r2, #130	; 0x82
 8001296:	6800      	ldr	r0, [r0, #0]
 8001298:	f003 f95f 	bl	800455a <HAL_UART_Transmit>
}
 800129c:	bd08      	pop	{r3, pc}

0800129e <Commander_Enqueue>:
}

void Commander_Enqueue(Commander_HandleTypeDef *hcommander, Command *command) {


	if((hcommander->front == 0 && hcommander->rear == COMMANDS_COUNT-1) || (hcommander->front == hcommander->rear+1)) {
 800129e:	f9b0 394c 	ldrsh.w	r3, [r0, #2380]	; 0x94c
 80012a2:	2b0f      	cmp	r3, #15
 80012a4:	d028      	beq.n	80012f8 <Commander_Enqueue+0x5a>
void Commander_Enqueue(Commander_HandleTypeDef *hcommander, Command *command) {
 80012a6:	b510      	push	{r4, lr}
 80012a8:	4604      	mov	r4, r0
	if((hcommander->front == 0 && hcommander->rear == COMMANDS_COUNT-1) || (hcommander->front == hcommander->rear+1)) {
 80012aa:	f990 294d 	ldrsb.w	r2, [r0, #2381]	; 0x94d
 80012ae:	f990 394c 	ldrsb.w	r3, [r0, #2380]	; 0x94c
 80012b2:	1c58      	adds	r0, r3, #1
 80012b4:	4282      	cmp	r2, r0
 80012b6:	d018      	beq.n	80012ea <Commander_Enqueue+0x4c>
		// overflow
	} else {
		if(hcommander->front == -1) {
 80012b8:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80012bc:	d016      	beq.n	80012ec <Commander_Enqueue+0x4e>
			hcommander->front = 0;
			hcommander->rear = 0;
		} else {
			if(hcommander->rear == COMMANDS_COUNT-1) hcommander->rear = 0;
 80012be:	2b0f      	cmp	r3, #15
 80012c0:	bf0c      	ite	eq
 80012c2:	2300      	moveq	r3, #0
			else hcommander->rear++;
 80012c4:	3301      	addne	r3, #1
 80012c6:	f884 394c 	strb.w	r3, [r4, #2380]	; 0x94c
		}
		memcpy(hcommander->command_buffer + hcommander->rear, command, COMMAND_BYTESIZE);
 80012ca:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 80012ce:	f994 394c 	ldrsb.w	r3, [r4, #2380]	; 0x94c
 80012d2:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 80012d6:	2282      	movs	r2, #130	; 0x82
 80012d8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80012dc:	f006 fa04 	bl	80076e8 <memcpy>
		hcommander->commands_to_handle++;
 80012e0:	f894 394e 	ldrb.w	r3, [r4, #2382]	; 0x94e
 80012e4:	3301      	adds	r3, #1
 80012e6:	f884 394e 	strb.w	r3, [r4, #2382]	; 0x94e
	}


}
 80012ea:	bd10      	pop	{r4, pc}
			hcommander->front = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	f884 394d 	strb.w	r3, [r4, #2381]	; 0x94d
			hcommander->rear = 0;
 80012f2:	f884 394c 	strb.w	r3, [r4, #2380]	; 0x94c
 80012f6:	e7e8      	b.n	80012ca <Commander_Enqueue+0x2c>
 80012f8:	4770      	bx	lr

080012fa <bitcrusher_rs_process>:
}

void bitcrusher_rs_process(float *value, pedal_config_t *conf) {
    int16_t shift = conf->int_params[REDUCT_INTENSITY].value;
    int16_t _out = (int16_t)*value;
    _out = (_out >> shift);
 80012fa:	f9b1 1020 	ldrsh.w	r1, [r1, #32]
    int16_t _out = (int16_t)*value;
 80012fe:	edd0 7a00 	vldr	s15, [r0]
 8001302:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    _out = (_out >> shift);
 8001306:	ee17 3a90 	vmov	r3, s15
 800130a:	b21a      	sxth	r2, r3
    _out = (_out << shift);
    _out += (2 << (shift -2));
 800130c:	f1a1 0c02 	sub.w	ip, r1, #2
 8001310:	2302      	movs	r3, #2
 8001312:	fa03 f30c 	lsl.w	r3, r3, ip
    _out = (_out << shift);
 8001316:	410a      	asrs	r2, r1
 8001318:	408a      	lsls	r2, r1
    _out += (2 << (shift -2));
 800131a:	4413      	add	r3, r2
    *value = _out;
 800131c:	b21b      	sxth	r3, r3
 800131e:	ee07 3a90 	vmov	s15, r3
 8001322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001326:	edc0 7a00 	vstr	s15, [r0]
}
 800132a:	4770      	bx	lr

0800132c <low_pass_filter_process>:
    conf->float_params[BALANCE_OUT] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
    conf->float_params[PAST] = (float_parameter_t){0.F, 0.F, 0.F, 0.F};
}

void low_pass_filter_process(float *value, pedal_config_t *conf) {
    float alpha = conf->float_params[INTENSITY].value;
 800132c:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
    *value = conf->float_params[PAST].value * alpha + (1.F - alpha) * *value;
 8001330:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001334:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001338:	edd0 6a00 	vldr	s13, [r0]
 800133c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001340:	edd1 6a2c 	vldr	s13, [r1, #176]	; 0xb0
 8001344:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001348:	ee77 7a87 	vadd.f32	s15, s15, s14
 800134c:	edc0 7a00 	vstr	s15, [r0]
    conf->float_params[PAST].value = *value;
 8001350:	edc1 7a2c 	vstr	s15, [r1, #176]	; 0xb0
}
 8001354:	4770      	bx	lr

08001356 <bypass_process>:
    return;
}

void bypass_process(float *value, pedal_config_t *conf) {
    return;
}
 8001356:	4770      	bx	lr

08001358 <Pedalboard_Init>:
	p_pb->active_pedals = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	7003      	strb	r3, [r0, #0]
}
 800135c:	4770      	bx	lr
	...

08001360 <overdrive_pedal_init>:
void overdrive_pedal_init(pedal_config_t *conf) {
 8001360:	b510      	push	{r4, lr}
 8001362:	4684      	mov	ip, r0
    conf->float_params[INTENSITY] = (float_parameter_t){1000.F, 1.F, 10.F, 0.5F};
 8001364:	4c15      	ldr	r4, [pc, #84]	; (80013bc <overdrive_pedal_init+0x5c>)
 8001366:	f100 0e30 	add.w	lr, r0, #48	; 0x30
 800136a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800136e:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 8001372:	f10c 0e40 	add.w	lr, ip, #64	; 0x40
 8001376:	f104 0310 	add.w	r3, r4, #16
 800137a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800137c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_LOW] = (float_parameter_t){28000.F, 0.F, 32767.F, 1.F};
 8001380:	f10c 0e50 	add.w	lr, ip, #80	; 0x50
 8001384:	f104 0320 	add.w	r3, r4, #32
 8001388:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800138a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    conf->float_params[SOFTENER] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 800138e:	f10c 0e60 	add.w	lr, ip, #96	; 0x60
 8001392:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8001396:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001398:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    conf->float_params[BALANCE_IN] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 800139c:	f10c 0e70 	add.w	lr, ip, #112	; 0x70
 80013a0:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80013a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013a6:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    conf->float_params[BALANCE_OUT] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 80013aa:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
 80013ae:	3450      	adds	r4, #80	; 0x50
 80013b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013b4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
 80013b8:	bd10      	pop	{r4, pc}
 80013ba:	bf00      	nop
 80013bc:	08007928 	.word	0x08007928

080013c0 <bitcrusher_rs_pedal_init>:
void bitcrusher_rs_pedal_init(pedal_config_t *conf) {
 80013c0:	b530      	push	{r4, r5, lr}
 80013c2:	4686      	mov	lr, r0
    conf->int_params[REDUCT_INTENSITY] = (int_parameter_t){12, 1, 16, 1};
 80013c4:	4c0a      	ldr	r4, [pc, #40]	; (80013f0 <bitcrusher_rs_pedal_init+0x30>)
 80013c6:	f100 0520 	add.w	r5, r0, #32
 80013ca:	f104 0360 	add.w	r3, r4, #96	; 0x60
 80013ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013d0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    conf->float_params[BALANCE_IN] = (float_parameter_t){0.5F, 0.F, 1.F, 0.1F};
 80013d4:	f10e 0570 	add.w	r5, lr, #112	; 0x70
 80013d8:	f104 0c70 	add.w	ip, r4, #112	; 0x70
 80013dc:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80013e0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    conf->float_params[BALANCE_OUT] = (float_parameter_t){0.5F, 0.F, 1.F, 0.1F};
 80013e4:	f10e 0480 	add.w	r4, lr, #128	; 0x80
 80013e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80013ec:	bd30      	pop	{r4, r5, pc}
 80013ee:	bf00      	nop
 80013f0:	08007928 	.word	0x08007928

080013f4 <tremolo_pedal_init>:
void tremolo_pedal_init(pedal_config_t *conf) {
 80013f4:	b510      	push	{r4, lr}
 80013f6:	4684      	mov	ip, r0
    conf->int_params[COUNTER] = (int_parameter_t){0, 1, 0, 0};
 80013f8:	2300      	movs	r3, #0
 80013fa:	6103      	str	r3, [r0, #16]
 80013fc:	2201      	movs	r2, #1
 80013fe:	6142      	str	r2, [r0, #20]
 8001400:	6183      	str	r3, [r0, #24]
 8001402:	61c3      	str	r3, [r0, #28]
    conf->float_params[SPEED] = (float_parameter_t){2.F, 0.1F, 10.F, 0.1F};
 8001404:	4c0b      	ldr	r4, [pc, #44]	; (8001434 <tremolo_pedal_init+0x40>)
 8001406:	f100 0ea0 	add.w	lr, r0, #160	; 0xa0
 800140a:	f104 0380 	add.w	r3, r4, #128	; 0x80
 800140e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001410:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    conf->float_params[BALANCE_IN] = (float_parameter_t){0.8F, 0.F, 1.F, 0.1F};
 8001414:	f10c 0e70 	add.w	lr, ip, #112	; 0x70
 8001418:	f104 0390 	add.w	r3, r4, #144	; 0x90
 800141c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800141e:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    conf->float_params[BALANCE_OUT] = (float_parameter_t){0.2F, 0.F, 1.F, 0.1F};
 8001422:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
 8001426:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 800142a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800142c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
 8001430:	bd10      	pop	{r4, pc}
 8001432:	bf00      	nop
 8001434:	08007928 	.word	0x08007928

08001438 <overdrive_sqrt_pedal_init>:
void overdrive_sqrt_pedal_init(pedal_config_t *conf) {
 8001438:	b510      	push	{r4, lr}
 800143a:	4684      	mov	ip, r0
    conf->float_params[INTENSITY] = (float_parameter_t){500.F, 0.F, 2000.F, 100.F};
 800143c:	4c0e      	ldr	r4, [pc, #56]	; (8001478 <overdrive_sqrt_pedal_init+0x40>)
 800143e:	f100 0e30 	add.w	lr, r0, #48	; 0x30
 8001442:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 8001446:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001448:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 800144c:	f10c 0e40 	add.w	lr, ip, #64	; 0x40
 8001450:	f104 0310 	add.w	r3, r4, #16
 8001454:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001456:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    conf->float_params[BALANCE_IN] = (float_parameter_t){0.75F, 0.F, 1.F, 0.1F};
 800145a:	f10c 0e70 	add.w	lr, ip, #112	; 0x70
 800145e:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
 8001462:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001464:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    conf->float_params[BALANCE_OUT] = (float_parameter_t){0.25F, 0.F, 1.F, 0.1F};
 8001468:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
 800146c:	34d0      	adds	r4, #208	; 0xd0
 800146e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001472:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
 8001476:	bd10      	pop	{r4, pc}
 8001478:	08007928 	.word	0x08007928

0800147c <amplifier_pedal_init>:
void amplifier_pedal_init(pedal_config_t *conf) {
 800147c:	b510      	push	{r4, lr}
 800147e:	4684      	mov	ip, r0
    conf->float_params[INTENSITY] = (float_parameter_t){0.5F, 0.1F, 10.F, 0.1F};
 8001480:	4c0e      	ldr	r4, [pc, #56]	; (80014bc <amplifier_pedal_init+0x40>)
 8001482:	f100 0e30 	add.w	lr, r0, #48	; 0x30
 8001486:	f104 03e0 	add.w	r3, r4, #224	; 0xe0
 800148a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800148c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 8001490:	f10c 0e40 	add.w	lr, ip, #64	; 0x40
 8001494:	f104 0310 	add.w	r3, r4, #16
 8001498:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800149a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    conf->float_params[BALANCE_IN] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 800149e:	f10c 0e70 	add.w	lr, ip, #112	; 0x70
 80014a2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80014a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014a8:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	conf->float_params[BALANCE_OUT] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 80014ac:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
 80014b0:	3450      	adds	r4, #80	; 0x50
 80014b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014b6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
 80014ba:	bd10      	pop	{r4, pc}
 80014bc:	08007928 	.word	0x08007928

080014c0 <low_pass_filter_pedal_init>:
void low_pass_filter_pedal_init(pedal_config_t *conf) {
 80014c0:	b510      	push	{r4, lr}
 80014c2:	4684      	mov	ip, r0
    conf->float_params[INTENSITY] = (float_parameter_t){0.9F, 0.0F, 1.0F, 0.01F};
 80014c4:	4c0f      	ldr	r4, [pc, #60]	; (8001504 <low_pass_filter_pedal_init+0x44>)
 80014c6:	f100 0e30 	add.w	lr, r0, #48	; 0x30
 80014ca:	f104 03f0 	add.w	r3, r4, #240	; 0xf0
 80014ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014d0:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    conf->float_params[BALANCE_IN] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 80014d4:	f10c 0e70 	add.w	lr, ip, #112	; 0x70
 80014d8:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80014dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014de:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    conf->float_params[BALANCE_OUT] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 80014e2:	f10c 0e80 	add.w	lr, ip, #128	; 0x80
 80014e6:	f104 0350 	add.w	r3, r4, #80	; 0x50
 80014ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014ec:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    conf->float_params[PAST] = (float_parameter_t){0.F, 0.F, 0.F, 0.F};
 80014f0:	2300      	movs	r3, #0
 80014f2:	f8cc 30b0 	str.w	r3, [ip, #176]	; 0xb0
 80014f6:	f8cc 30b4 	str.w	r3, [ip, #180]	; 0xb4
 80014fa:	f8cc 30b8 	str.w	r3, [ip, #184]	; 0xb8
 80014fe:	f8cc 30bc 	str.w	r3, [ip, #188]	; 0xbc
}
 8001502:	bd10      	pop	{r4, pc}
 8001504:	08007928 	.word	0x08007928

08001508 <fuzz_pedal_init>:
void fuzz_pedal_init(pedal_config_t *conf) {
 8001508:	b510      	push	{r4, lr}
 800150a:	4684      	mov	ip, r0
    conf->int_params[COUNTER] = (int_parameter_t){0, 1, 0, 0};
 800150c:	2300      	movs	r3, #0
 800150e:	6103      	str	r3, [r0, #16]
 8001510:	2201      	movs	r2, #1
 8001512:	6142      	str	r2, [r0, #20]
 8001514:	6183      	str	r3, [r0, #24]
 8001516:	61c3      	str	r3, [r0, #28]
    conf->float_params[INTENSITY] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 8001518:	4c15      	ldr	r4, [pc, #84]	; (8001570 <fuzz_pedal_init+0x68>)
 800151a:	f100 0e30 	add.w	lr, r0, #48	; 0x30
 800151e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8001522:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001524:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 8001528:	f10c 0e40 	add.w	lr, ip, #64	; 0x40
 800152c:	f104 0310 	add.w	r3, r4, #16
 8001530:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001532:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    conf->float_params[HEIGHT] = (float_parameter_t){2048.F, 0.F, 8192.F, 32.F};
 8001536:	f10c 0e90 	add.w	lr, ip, #144	; 0x90
 800153a:	f504 7380 	add.w	r3, r4, #256	; 0x100
 800153e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001540:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    conf->float_params[SPEED] = (float_parameter_t){1.F, 0.1F, 10.F, 0.1F};
 8001544:	f10c 0ea0 	add.w	lr, ip, #160	; 0xa0
 8001548:	f504 7388 	add.w	r3, r4, #272	; 0x110
 800154c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800154e:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    conf->float_params[BALANCE_IN] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 8001552:	f10c 0e70 	add.w	lr, ip, #112	; 0x70
 8001556:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800155a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800155c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    conf->float_params[BALANCE_OUT] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 8001560:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
 8001564:	3450      	adds	r4, #80	; 0x50
 8001566:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800156a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
 800156e:	bd10      	pop	{r4, pc}
 8001570:	08007928 	.word	0x08007928

08001574 <Pedalboard_Append>:
void Pedalboard_Append(Pedalboard_Handler *p_pb, enum pedal_types type) {
 8001574:	b570      	push	{r4, r5, r6, lr}
    uint8_t i = p_pb->active_pedals;
 8001576:	7805      	ldrb	r5, [r0, #0]
    if (i < MAX_PEDALS_COUNT) {
 8001578:	2d07      	cmp	r5, #7
 800157a:	d826      	bhi.n	80015ca <Pedalboard_Append+0x56>
 800157c:	4604      	mov	r4, r0
        p_pb->pedals[i].type = type;
 800157e:	23c8      	movs	r3, #200	; 0xc8
 8001580:	fb03 0305 	mla	r3, r3, r5, r0
 8001584:	f883 10c4 	strb.w	r1, [r3, #196]	; 0xc4
        if (type == AMPLIFIER)
 8001588:	b191      	cbz	r1, 80015b0 <Pedalboard_Append+0x3c>
        else if (type == BITCRUSHER_RS)
 800158a:	2901      	cmp	r1, #1
 800158c:	d01e      	beq.n	80015cc <Pedalboard_Append+0x58>
        else if (type == FUZZ)
 800158e:	2903      	cmp	r1, #3
 8001590:	d028      	beq.n	80015e4 <Pedalboard_Append+0x70>
        else if (type == LPF)
 8001592:	2904      	cmp	r1, #4
 8001594:	d032      	beq.n	80015fc <Pedalboard_Append+0x88>
        else if (type == OVERDRIVE)
 8001596:	2905      	cmp	r1, #5
 8001598:	d03c      	beq.n	8001614 <Pedalboard_Append+0xa0>
        else if (type == OVERDRIVE_SQRT)
 800159a:	2906      	cmp	r1, #6
 800159c:	d046      	beq.n	800162c <Pedalboard_Append+0xb8>
        else if (type == TREMOLO)
 800159e:	2907      	cmp	r1, #7
 80015a0:	d050      	beq.n	8001644 <Pedalboard_Append+0xd0>
            p_pb->pedals[i].pedal_process = bypass_process;
 80015a2:	23c8      	movs	r3, #200	; 0xc8
 80015a4:	fb03 0505 	mla	r5, r3, r5, r0
 80015a8:	4b2c      	ldr	r3, [pc, #176]	; (800165c <Pedalboard_Append+0xe8>)
 80015aa:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
 80015ae:	e009      	b.n	80015c4 <Pedalboard_Append+0x50>
            amplifier_pedal_init(&(p_pb->pedals[i].config));
 80015b0:	26c8      	movs	r6, #200	; 0xc8
 80015b2:	4618      	mov	r0, r3
 80015b4:	3004      	adds	r0, #4
 80015b6:	f7ff ff61 	bl	800147c <amplifier_pedal_init>
            p_pb->pedals[i].pedal_process = amplifier_process;
 80015ba:	fb06 4505 	mla	r5, r6, r5, r4
 80015be:	4b28      	ldr	r3, [pc, #160]	; (8001660 <Pedalboard_Append+0xec>)
 80015c0:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
        p_pb->active_pedals++;
 80015c4:	7823      	ldrb	r3, [r4, #0]
 80015c6:	3301      	adds	r3, #1
 80015c8:	7023      	strb	r3, [r4, #0]
}
 80015ca:	bd70      	pop	{r4, r5, r6, pc}
            bitcrusher_rs_pedal_init(&(p_pb->pedals[i].config));
 80015cc:	26c8      	movs	r6, #200	; 0xc8
 80015ce:	fb06 0005 	mla	r0, r6, r5, r0
 80015d2:	3004      	adds	r0, #4
 80015d4:	f7ff fef4 	bl	80013c0 <bitcrusher_rs_pedal_init>
            p_pb->pedals[i].pedal_process = bitcrusher_rs_process;
 80015d8:	fb06 4505 	mla	r5, r6, r5, r4
 80015dc:	4b21      	ldr	r3, [pc, #132]	; (8001664 <Pedalboard_Append+0xf0>)
 80015de:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
 80015e2:	e7ef      	b.n	80015c4 <Pedalboard_Append+0x50>
            fuzz_pedal_init(&(p_pb->pedals[i].config));
 80015e4:	26c8      	movs	r6, #200	; 0xc8
 80015e6:	fb06 0005 	mla	r0, r6, r5, r0
 80015ea:	3004      	adds	r0, #4
 80015ec:	f7ff ff8c 	bl	8001508 <fuzz_pedal_init>
            p_pb->pedals[i].pedal_process = fuzz_process;
 80015f0:	fb06 4505 	mla	r5, r6, r5, r4
 80015f4:	4b1c      	ldr	r3, [pc, #112]	; (8001668 <Pedalboard_Append+0xf4>)
 80015f6:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
 80015fa:	e7e3      	b.n	80015c4 <Pedalboard_Append+0x50>
            low_pass_filter_pedal_init(&(p_pb->pedals[i].config));
 80015fc:	26c8      	movs	r6, #200	; 0xc8
 80015fe:	fb06 0005 	mla	r0, r6, r5, r0
 8001602:	3004      	adds	r0, #4
 8001604:	f7ff ff5c 	bl	80014c0 <low_pass_filter_pedal_init>
            p_pb->pedals[i].pedal_process = low_pass_filter_process;
 8001608:	fb06 4505 	mla	r5, r6, r5, r4
 800160c:	4b17      	ldr	r3, [pc, #92]	; (800166c <Pedalboard_Append+0xf8>)
 800160e:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
 8001612:	e7d7      	b.n	80015c4 <Pedalboard_Append+0x50>
            overdrive_pedal_init(&(p_pb->pedals[i].config));
 8001614:	26c8      	movs	r6, #200	; 0xc8
 8001616:	fb06 0005 	mla	r0, r6, r5, r0
 800161a:	3004      	adds	r0, #4
 800161c:	f7ff fea0 	bl	8001360 <overdrive_pedal_init>
            p_pb->pedals[i].pedal_process = overdrive_process;
 8001620:	fb06 4505 	mla	r5, r6, r5, r4
 8001624:	4b12      	ldr	r3, [pc, #72]	; (8001670 <Pedalboard_Append+0xfc>)
 8001626:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
 800162a:	e7cb      	b.n	80015c4 <Pedalboard_Append+0x50>
            overdrive_sqrt_pedal_init(&(p_pb->pedals[i].config));
 800162c:	26c8      	movs	r6, #200	; 0xc8
 800162e:	fb06 0005 	mla	r0, r6, r5, r0
 8001632:	3004      	adds	r0, #4
 8001634:	f7ff ff00 	bl	8001438 <overdrive_sqrt_pedal_init>
            p_pb->pedals[i].pedal_process = overdrive_sqrt_process;
 8001638:	fb06 4505 	mla	r5, r6, r5, r4
 800163c:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <Pedalboard_Append+0x100>)
 800163e:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
 8001642:	e7bf      	b.n	80015c4 <Pedalboard_Append+0x50>
            tremolo_pedal_init(&(p_pb->pedals[i].config));
 8001644:	26c8      	movs	r6, #200	; 0xc8
 8001646:	fb06 0005 	mla	r0, r6, r5, r0
 800164a:	3004      	adds	r0, #4
 800164c:	f7ff fed2 	bl	80013f4 <tremolo_pedal_init>
            p_pb->pedals[i].pedal_process = tremolo_process;
 8001650:	fb06 4505 	mla	r5, r6, r5, r4
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <Pedalboard_Append+0x104>)
 8001656:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
 800165a:	e7b3      	b.n	80015c4 <Pedalboard_Append+0x50>
 800165c:	08001357 	.word	0x08001357
 8001660:	08001723 	.word	0x08001723
 8001664:	080012fb 	.word	0x080012fb
 8001668:	080018a5 	.word	0x080018a5
 800166c:	0800132d 	.word	0x0800132d
 8001670:	08001783 	.word	0x08001783
 8001674:	080017f1 	.word	0x080017f1
 8001678:	08001881 	.word	0x08001881

0800167c <mix>:

// DSP

void mix(float *raw_in, float *raw_out, float *proc_out, pedal_config_t *conf) {
	*proc_out = *raw_in * conf->float_params[BALANCE_IN].value + *raw_out * conf->float_params[BALANCE_OUT].value;
 800167c:	edd0 7a00 	vldr	s15, [r0]
 8001680:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8001684:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001688:	ed91 7a00 	vldr	s14, [r1]
 800168c:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8001690:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001694:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001698:	edc2 7a00 	vstr	s15, [r2]
}
 800169c:	4770      	bx	lr

0800169e <Pedalboard_Process>:
	for (u_int8_t i = 0; i < p_pb->active_pedals; i++) {
 800169e:	7803      	ldrb	r3, [r0, #0]
 80016a0:	b323      	cbz	r3, 80016ec <Pedalboard_Process+0x4e>
void Pedalboard_Process(Pedalboard_Handler *p_pb, float *value) {
 80016a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	4607      	mov	r7, r0
 80016aa:	460d      	mov	r5, r1
	for (u_int8_t i = 0; i < p_pb->active_pedals; i++) {
 80016ac:	2600      	movs	r6, #0
        p_pb->pedals[i].pedal_process(value, &(p_pb->pedals[i].config));
 80016ae:	f04f 08c8 	mov.w	r8, #200	; 0xc8
    	pre = *value;
 80016b2:	682b      	ldr	r3, [r5, #0]
 80016b4:	9301      	str	r3, [sp, #4]
        p_pb->pedals[i].pedal_process(value, &(p_pb->pedals[i].config));
 80016b6:	fa5f fc86 	uxtb.w	ip, r6
 80016ba:	fb08 fc0c 	mul.w	ip, r8, ip
 80016be:	f10c 0404 	add.w	r4, ip, #4
 80016c2:	443c      	add	r4, r7
 80016c4:	44bc      	add	ip, r7
 80016c6:	f8dc 30c8 	ldr.w	r3, [ip, #200]	; 0xc8
 80016ca:	4621      	mov	r1, r4
 80016cc:	4628      	mov	r0, r5
 80016ce:	4798      	blx	r3
        mix(&pre, value, value, &(p_pb->pedals[i].config));
 80016d0:	4623      	mov	r3, r4
 80016d2:	462a      	mov	r2, r5
 80016d4:	4629      	mov	r1, r5
 80016d6:	a801      	add	r0, sp, #4
 80016d8:	f7ff ffd0 	bl	800167c <mix>
	for (u_int8_t i = 0; i < p_pb->active_pedals; i++) {
 80016dc:	3601      	adds	r6, #1
 80016de:	783a      	ldrb	r2, [r7, #0]
 80016e0:	b2f3      	uxtb	r3, r6
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d8e5      	bhi.n	80016b2 <Pedalboard_Process+0x14>
}
 80016e6:	b002      	add	sp, #8
 80016e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016ec:	4770      	bx	lr

080016ee <hard_clip>:

void hard_clip(float *value, pedal_config_t *conf) {
	float thr = conf->float_params[THRESHOLD_HIGH].value;
 80016ee:	edd1 7a10 	vldr	s15, [r1, #64]	; 0x40
    if (*value > thr) {
 80016f2:	ed90 7a00 	vldr	s14, [r0]
 80016f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fe:	dd02      	ble.n	8001706 <hard_clip+0x18>
    	*value = thr;
 8001700:	edc0 7a00 	vstr	s15, [r0]
 8001704:	4770      	bx	lr
    } else if (*value < -thr) {
 8001706:	eef1 7a67 	vneg.f32	s15, s15
 800170a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800170e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001712:	d505      	bpl.n	8001720 <hard_clip+0x32>
    	*value = -thr - 1.;
 8001714:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001718:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800171c:	edc0 7a00 	vstr	s15, [r0]
    }
}
 8001720:	4770      	bx	lr

08001722 <amplifier_process>:
void amplifier_process(float *value, pedal_config_t *conf) {
 8001722:	b508      	push	{r3, lr}
    *value *= conf->float_params[INTENSITY].value;
 8001724:	edd0 7a00 	vldr	s15, [r0]
 8001728:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 800172c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001730:	edc0 7a00 	vstr	s15, [r0]
    hard_clip(value, conf);
 8001734:	f7ff ffdb 	bl	80016ee <hard_clip>
}
 8001738:	bd08      	pop	{r3, pc}

0800173a <soft_clip>:

void soft_clip(float *value, pedal_config_t *conf) {
	float thr = conf->float_params[THRESHOLD_LOW].value;
 800173a:	ed91 7a14 	vldr	s14, [r1, #80]	; 0x50
	float soft = conf->float_params[SOFTENER].value;
 800173e:	ed91 6a18 	vldr	s12, [r1, #96]	; 0x60
    if (*value > thr) {
 8001742:	edd0 7a00 	vldr	s15, [r0]
 8001746:	eef4 7ac7 	vcmpe.f32	s15, s14
 800174a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800174e:	dd08      	ble.n	8001762 <soft_clip+0x28>
    	*value = thr + (*value - thr) / soft;
 8001750:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001754:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001758:	ee36 7a87 	vadd.f32	s14, s13, s14
 800175c:	ed80 7a00 	vstr	s14, [r0]
 8001760:	4770      	bx	lr
    } else if (*value < -thr) {
 8001762:	eef1 6a47 	vneg.f32	s13, s14
 8001766:	eef4 7ae6 	vcmpe.f32	s15, s13
 800176a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176e:	d507      	bpl.n	8001780 <soft_clip+0x46>
    	*value = -thr + (*value + thr) / soft;
 8001770:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001774:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001778:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800177c:	ed80 7a00 	vstr	s14, [r0]
    }
}
 8001780:	4770      	bx	lr

08001782 <overdrive_process>:
void overdrive_process(float *value, pedal_config_t *conf) {
 8001782:	b538      	push	{r3, r4, r5, lr}
 8001784:	4604      	mov	r4, r0
 8001786:	460d      	mov	r5, r1
    *value *=  conf->float_params[INTENSITY].value;
 8001788:	edd0 7a00 	vldr	s15, [r0]
 800178c:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8001790:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001794:	edc0 7a00 	vstr	s15, [r0]
    soft_clip(value, conf);
 8001798:	f7ff ffcf 	bl	800173a <soft_clip>
    hard_clip(value, conf);
 800179c:	4629      	mov	r1, r5
 800179e:	4620      	mov	r0, r4
 80017a0:	f7ff ffa5 	bl	80016ee <hard_clip>
}
 80017a4:	bd38      	pop	{r3, r4, r5, pc}

080017a6 <square_root>:

void square_root(float *value) {
	float multiplier = (*value < 0.F) ? -1.F : 1.F;
 80017a6:	edd0 6a00 	vldr	s13, [r0]
 80017aa:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80017ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80017b6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80017ba:	bf48      	it	mi
 80017bc:	eef0 5a67 	vmovmi.f32	s11, s15
	*value *= multiplier;
 80017c0:	ee66 6aa5 	vmul.f32	s13, s13, s11
	float original = *value;
    *value /= 2;
 80017c4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80017c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017cc:	2308      	movs	r3, #8
    for (u_int8_t i = 0; i < 8; i++) {
    	*value = 0.5F * (*value + (original / *value));
 80017ce:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80017d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017da:	ee67 7a86 	vmul.f32	s15, s15, s12
    for (u_int8_t i = 0; i < 8; i++) {
 80017de:	3b01      	subs	r3, #1
 80017e0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80017e4:	d1f5      	bne.n	80017d2 <square_root+0x2c>
    }
    *value *= multiplier;
 80017e6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80017ea:	edc0 7a00 	vstr	s15, [r0]
}
 80017ee:	4770      	bx	lr

080017f0 <overdrive_sqrt_process>:
void overdrive_sqrt_process(float *value, pedal_config_t *conf) {
 80017f0:	b538      	push	{r3, r4, r5, lr}
 80017f2:	4604      	mov	r4, r0
 80017f4:	460d      	mov	r5, r1
    square_root(value);
 80017f6:	f7ff ffd6 	bl	80017a6 <square_root>
    *value *= conf->float_params[INTENSITY].value;
 80017fa:	edd4 7a00 	vldr	s15, [r4]
 80017fe:	ed95 7a0c 	vldr	s14, [r5, #48]	; 0x30
 8001802:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001806:	edc4 7a00 	vstr	s15, [r4]
    hard_clip(value, conf);
 800180a:	4629      	mov	r1, r5
 800180c:	4620      	mov	r0, r4
 800180e:	f7ff ff6e 	bl	80016ee <hard_clip>
}
 8001812:	bd38      	pop	{r3, r4, r5, pc}

08001814 <wave_gen>:
float sin_table[128] = { 0.000000F, 0.024541F, 0.049068F, 0.073565F, 0.098017F, 0.122411F, 0.146730F, 0.170962F, 0.195090F, 0.219101F, 0.242980F, 0.266713F, 0.290284F, 0.313681F, 0.336890F, 0.359895F, 0.382683F, 0.405241F, 0.427555F, 0.449611F, 0.471396F, 0.492898F, 0.514102F, 0.534997F, 0.555570F, 0.575808F, 0.595699F, 0.615231F, 0.634393F, 0.653172F, 0.671559F, 0.689540F, 0.707106F, 0.724247F, 0.740951F, 0.757208F, 0.773010F, 0.788346F, 0.803207F, 0.817584F, 0.831469F, 0.844853F, 0.857728F, 0.870087F, 0.881921F, 0.893224F, 0.903989F, 0.914209F, 0.923879F, 0.932992F, 0.941544F, 0.949528F, 0.956940F, 0.963776F, 0.970031F, 0.975702F, 0.980785F, 0.985277F, 0.989176F, 0.992479F, 0.995185F, 0.997290F, 0.998795F, 0.999699F, 1.000000F, 0.999699F, 0.998796F, 0.997291F, 0.995185F, 0.992480F, 0.989177F, 0.985278F, 0.980786F, 0.975702F, 0.970032F, 0.963776F, 0.956941F, 0.949529F, 0.941545F, 0.932993F, 0.923880F, 0.914210F, 0.903990F, 0.893225F, 0.881922F, 0.870088F, 0.857729F, 0.844855F, 0.831471F, 0.817586F, 0.803209F, 0.788348F, 0.773012F, 0.757210F, 0.740952F, 0.724248F, 0.707108F, 0.689542F, 0.671560F, 0.653174F, 0.634395F, 0.615233F, 0.595701F, 0.575810F, 0.555572F, 0.534999F, 0.514105F, 0.492900F, 0.471399F, 0.449613F, 0.427557F, 0.405243F, 0.382685F, 0.359897F, 0.336892F, 0.313684F, 0.290287F, 0.266715F, 0.242982F, 0.219104F, 0.195093F, 0.170964F, 0.146733F, 0.122413F, 0.098019F, 0.073567F, 0.049070F, 0.024544F };

void wave_gen(float *out, char t, uint32_t i, float tone) {
    float period_f = 48000.F / tone;
    uint32_t period_i = period_f;
    uint32_t table_index = (i * 256 / period_i) % 256;
 8001814:	0212      	lsls	r2, r2, #8
    float period_f = 48000.F / tone;
 8001816:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001874 <wave_gen+0x60>
 800181a:	eec7 7a00 	vdiv.f32	s15, s14, s0
    uint32_t period_i = period_f;
 800181e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    uint32_t table_index = (i * 256 / period_i) % 256;
 8001822:	ee17 3a90 	vmov	r3, s15
 8001826:	fbb2 f2f3 	udiv	r2, r2, r3

    if (t == 's') {
 800182a:	2973      	cmp	r1, #115	; 0x73
 800182c:	d002      	beq.n	8001834 <wave_gen+0x20>
        if (table_index <= 127) {
        	*out = sin_table[table_index];
        } else {
            *out = -sin_table[table_index - 128];
        }
    } else if (t == 'q') {
 800182e:	2971      	cmp	r1, #113	; 0x71
 8001830:	d015      	beq.n	800185e <wave_gen+0x4a>
        	*out = -1.F;
        } else {
        	*out = 1.F;
        }
    }
}
 8001832:	4770      	bx	lr
    uint32_t table_index = (i * 256 / period_i) % 256;
 8001834:	b2d3      	uxtb	r3, r2
        if (table_index <= 127) {
 8001836:	f012 0f80 	tst.w	r2, #128	; 0x80
 800183a:	d105      	bne.n	8001848 <wave_gen+0x34>
        	*out = sin_table[table_index];
 800183c:	4a0e      	ldr	r2, [pc, #56]	; (8001878 <wave_gen+0x64>)
 800183e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6003      	str	r3, [r0, #0]
 8001846:	4770      	bx	lr
            *out = -sin_table[table_index - 128];
 8001848:	3b80      	subs	r3, #128	; 0x80
 800184a:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <wave_gen+0x64>)
 800184c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001850:	edd3 7a00 	vldr	s15, [r3]
 8001854:	eef1 7a67 	vneg.f32	s15, s15
 8001858:	edc0 7a00 	vstr	s15, [r0]
 800185c:	4770      	bx	lr
        if (table_index <= 127) {
 800185e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001862:	d102      	bne.n	800186a <wave_gen+0x56>
        	*out = -1.F;
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <wave_gen+0x68>)
 8001866:	6003      	str	r3, [r0, #0]
 8001868:	4770      	bx	lr
        	*out = 1.F;
 800186a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800186e:	6003      	str	r3, [r0, #0]
}
 8001870:	e7df      	b.n	8001832 <wave_gen+0x1e>
 8001872:	bf00      	nop
 8001874:	473b8000 	.word	0x473b8000
 8001878:	2000000c 	.word	0x2000000c
 800187c:	bf800000 	.word	0xbf800000

08001880 <tremolo_process>:
void tremolo_process(float *value, pedal_config_t *conf) {
 8001880:	b510      	push	{r4, lr}
 8001882:	460c      	mov	r4, r1
    wave_gen(value, 's', conf->int_params[COUNTER].value, tone * conf->float_params[SPEED].value);
 8001884:	ed91 0a28 	vldr	s0, [r1, #160]	; 0xa0
 8001888:	eddf 7a05 	vldr	s15, [pc, #20]	; 80018a0 <tremolo_process+0x20>
 800188c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001890:	690a      	ldr	r2, [r1, #16]
 8001892:	2173      	movs	r1, #115	; 0x73
 8001894:	f7ff ffbe 	bl	8001814 <wave_gen>
    conf->int_params[COUNTER].value++;
 8001898:	6923      	ldr	r3, [r4, #16]
 800189a:	3301      	adds	r3, #1
 800189c:	6123      	str	r3, [r4, #16]
}
 800189e:	bd10      	pop	{r4, pc}
 80018a0:	43dc0000 	.word	0x43dc0000

080018a4 <fuzz_process>:
void fuzz_process(float *value, pedal_config_t *conf) {
 80018a4:	b530      	push	{r4, r5, lr}
 80018a6:	b083      	sub	sp, #12
 80018a8:	4604      	mov	r4, r0
 80018aa:	460d      	mov	r5, r1
	*value *= conf->float_params[INTENSITY].value;
 80018ac:	edd0 7a00 	vldr	s15, [r0]
 80018b0:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 80018b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018b8:	edc0 7a00 	vstr	s15, [r0]
	hard_clip(value, conf);
 80018bc:	f7ff ff17 	bl	80016ee <hard_clip>
	if (*value == conf->float_params[THRESHOLD_HIGH].value) {
 80018c0:	ed94 7a00 	vldr	s14, [r4]
 80018c4:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 80018c8:	eeb4 7a66 	vcmp.f32	s14, s13
 80018cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d0:	d00a      	beq.n	80018e8 <fuzz_process+0x44>
	} else if (*value == - conf->float_params[THRESHOLD_HIGH].value - 1.F) {
 80018d2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80018d6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80018da:	eeb4 7a67 	vcmp.f32	s14, s15
 80018de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e2:	d01d      	beq.n	8001920 <fuzz_process+0x7c>
}
 80018e4:	b003      	add	sp, #12
 80018e6:	bd30      	pop	{r4, r5, pc}
		wave_gen(&wave, 's', conf->int_params[COUNTER].value, tone * conf->float_params[SPEED].value);
 80018e8:	ed95 0a28 	vldr	s0, [r5, #160]	; 0xa0
 80018ec:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8001958 <fuzz_process+0xb4>
 80018f0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80018f4:	692a      	ldr	r2, [r5, #16]
 80018f6:	2173      	movs	r1, #115	; 0x73
 80018f8:	a801      	add	r0, sp, #4
 80018fa:	f7ff ff8b 	bl	8001814 <wave_gen>
		*value += (wave - 1) * conf->float_params[HEIGHT].value;
 80018fe:	eddd 7a01 	vldr	s15, [sp, #4]
 8001902:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001906:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800190a:	ed95 7a24 	vldr	s14, [r5, #144]	; 0x90
 800190e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001912:	ed94 7a00 	vldr	s14, [r4]
 8001916:	ee77 7a27 	vadd.f32	s15, s14, s15
 800191a:	edc4 7a00 	vstr	s15, [r4]
 800191e:	e7e1      	b.n	80018e4 <fuzz_process+0x40>
		wave_gen(&wave, 's', conf->int_params[COUNTER].value, tone * conf->float_params[SPEED].value);
 8001920:	ed95 0a28 	vldr	s0, [r5, #160]	; 0xa0
 8001924:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8001958 <fuzz_process+0xb4>
 8001928:	ee20 0a27 	vmul.f32	s0, s0, s15
 800192c:	692a      	ldr	r2, [r5, #16]
 800192e:	2173      	movs	r1, #115	; 0x73
 8001930:	a801      	add	r0, sp, #4
 8001932:	f7ff ff6f 	bl	8001814 <wave_gen>
		*value += (wave + 1) * conf->float_params[HEIGHT].value;
 8001936:	eddd 7a01 	vldr	s15, [sp, #4]
 800193a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800193e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001942:	ed95 7a24 	vldr	s14, [r5, #144]	; 0x90
 8001946:	ee67 7a87 	vmul.f32	s15, s15, s14
 800194a:	ed94 7a00 	vldr	s14, [r4]
 800194e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001952:	edc4 7a00 	vstr	s15, [r4]
}
 8001956:	e7c5      	b.n	80018e4 <fuzz_process+0x40>
 8001958:	43dc0000 	.word	0x43dc0000

0800195c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800195c:	b510      	push	{r4, lr}
 800195e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001960:	4b0e      	ldr	r3, [pc, #56]	; (800199c <HAL_InitTick+0x40>)
 8001962:	7818      	ldrb	r0, [r3, #0]
 8001964:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001968:	fbb3 f3f0 	udiv	r3, r3, r0
 800196c:	4a0c      	ldr	r2, [pc, #48]	; (80019a0 <HAL_InitTick+0x44>)
 800196e:	6810      	ldr	r0, [r2, #0]
 8001970:	fbb0 f0f3 	udiv	r0, r0, r3
 8001974:	f000 f8ae 	bl	8001ad4 <HAL_SYSTICK_Config>
 8001978:	b968      	cbnz	r0, 8001996 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800197a:	2c0f      	cmp	r4, #15
 800197c:	d901      	bls.n	8001982 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800197e:	2001      	movs	r0, #1
 8001980:	e00a      	b.n	8001998 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001982:	2200      	movs	r2, #0
 8001984:	4621      	mov	r1, r4
 8001986:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800198a:	f000 f85f 	bl	8001a4c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800198e:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <HAL_InitTick+0x48>)
 8001990:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001992:	2000      	movs	r0, #0
 8001994:	e000      	b.n	8001998 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001996:	2001      	movs	r0, #1
}
 8001998:	bd10      	pop	{r4, pc}
 800199a:	bf00      	nop
 800199c:	2000020c 	.word	0x2000020c
 80019a0:	20000008 	.word	0x20000008
 80019a4:	20000210 	.word	0x20000210

080019a8 <HAL_Init>:
{
 80019a8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <HAL_Init+0x30>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019b2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019ba:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019c2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c4:	2003      	movs	r0, #3
 80019c6:	f000 f82f 	bl	8001a28 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ca:	200f      	movs	r0, #15
 80019cc:	f7ff ffc6 	bl	800195c <HAL_InitTick>
  HAL_MspInit();
 80019d0:	f7ff fa26 	bl	8000e20 <HAL_MspInit>
}
 80019d4:	2000      	movs	r0, #0
 80019d6:	bd08      	pop	{r3, pc}
 80019d8:	40023c00 	.word	0x40023c00

080019dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80019dc:	4a03      	ldr	r2, [pc, #12]	; (80019ec <HAL_IncTick+0x10>)
 80019de:	6811      	ldr	r1, [r2, #0]
 80019e0:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <HAL_IncTick+0x14>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	440b      	add	r3, r1
 80019e6:	6013      	str	r3, [r2, #0]
}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	200027c4 	.word	0x200027c4
 80019f0:	2000020c 	.word	0x2000020c

080019f4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80019f4:	4b01      	ldr	r3, [pc, #4]	; (80019fc <HAL_GetTick+0x8>)
 80019f6:	6818      	ldr	r0, [r3, #0]
}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	200027c4 	.word	0x200027c4

08001a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a00:	b538      	push	{r3, r4, r5, lr}
 8001a02:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001a04:	f7ff fff6 	bl	80019f4 <HAL_GetTick>
 8001a08:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a0a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8001a0e:	d002      	beq.n	8001a16 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <HAL_Delay+0x24>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a16:	f7ff ffed 	bl	80019f4 <HAL_GetTick>
 8001a1a:	1b40      	subs	r0, r0, r5
 8001a1c:	42a0      	cmp	r0, r4
 8001a1e:	d3fa      	bcc.n	8001a16 <HAL_Delay+0x16>
  {
  }
}
 8001a20:	bd38      	pop	{r3, r4, r5, pc}
 8001a22:	bf00      	nop
 8001a24:	2000020c 	.word	0x2000020c

08001a28 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a28:	4907      	ldr	r1, [pc, #28]	; (8001a48 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001a2a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a2c:	0203      	lsls	r3, r0, #8
 8001a2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001a36:	0412      	lsls	r2, r2, #16
 8001a38:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001a44:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001a46:	4770      	bx	lr
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a4c:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a4e:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <HAL_NVIC_SetPriority+0x64>)
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a56:	f1c3 0c07 	rsb	ip, r3, #7
 8001a5a:	f1bc 0f04 	cmp.w	ip, #4
 8001a5e:	bf28      	it	cs
 8001a60:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a64:	f103 0e04 	add.w	lr, r3, #4
 8001a68:	f1be 0f06 	cmp.w	lr, #6
 8001a6c:	bf8c      	ite	hi
 8001a6e:	3b03      	subhi	r3, #3
 8001a70:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a72:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8001a76:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001a7a:	ea21 010c 	bic.w	r1, r1, ip
 8001a7e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a80:	fa0e f303 	lsl.w	r3, lr, r3
 8001a84:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001a8a:	2800      	cmp	r0, #0
 8001a8c:	db09      	blt.n	8001aa2 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8e:	0109      	lsls	r1, r1, #4
 8001a90:	b2c9      	uxtb	r1, r1
 8001a92:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001a96:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001a9a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001a9e:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa2:	f000 000f 	and.w	r0, r0, #15
 8001aa6:	0109      	lsls	r1, r1, #4
 8001aa8:	b2c9      	uxtb	r1, r1
 8001aaa:	4b02      	ldr	r3, [pc, #8]	; (8001ab4 <HAL_NVIC_SetPriority+0x68>)
 8001aac:	5419      	strb	r1, [r3, r0]
 8001aae:	e7f6      	b.n	8001a9e <HAL_NVIC_SetPriority+0x52>
 8001ab0:	e000ed00 	.word	0xe000ed00
 8001ab4:	e000ed14 	.word	0xe000ed14

08001ab8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001ab8:	2800      	cmp	r0, #0
 8001aba:	db08      	blt.n	8001ace <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001abc:	0942      	lsrs	r2, r0, #5
 8001abe:	f000 001f 	and.w	r0, r0, #31
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	fa03 f000 	lsl.w	r0, r3, r0
 8001ac8:	4b01      	ldr	r3, [pc, #4]	; (8001ad0 <HAL_NVIC_EnableIRQ+0x18>)
 8001aca:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001ace:	4770      	bx	lr
 8001ad0:	e000e100 	.word	0xe000e100

08001ad4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad4:	3801      	subs	r0, #1
 8001ad6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001ada:	d20b      	bcs.n	8001af4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001adc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001ae0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae2:	4a05      	ldr	r2, [pc, #20]	; (8001af8 <HAL_SYSTICK_Config+0x24>)
 8001ae4:	21f0      	movs	r1, #240	; 0xf0
 8001ae6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aea:	2000      	movs	r0, #0
 8001aec:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aee:	2207      	movs	r2, #7
 8001af0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001af4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001af6:	4770      	bx	lr
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001afc:	b410      	push	{r4}
 8001afe:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b00:	6803      	ldr	r3, [r0, #0]
 8001b02:	b2d8      	uxtb	r0, r3
 8001b04:	3810      	subs	r0, #16
 8001b06:	490b      	ldr	r1, [pc, #44]	; (8001b34 <DMA_CalcBaseAndBitshift+0x38>)
 8001b08:	fba1 4100 	umull	r4, r1, r1, r0
 8001b0c:	0909      	lsrs	r1, r1, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b0e:	4c0a      	ldr	r4, [pc, #40]	; (8001b38 <DMA_CalcBaseAndBitshift+0x3c>)
 8001b10:	5c61      	ldrb	r1, [r4, r1]
 8001b12:	65d1      	str	r1, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b14:	285f      	cmp	r0, #95	; 0x5f
 8001b16:	d908      	bls.n	8001b2a <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b18:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b1c:	f023 0303 	bic.w	r3, r3, #3
 8001b20:	1d18      	adds	r0, r3, #4
 8001b22:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001b24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b28:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b2a:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8001b2e:	f020 0003 	bic.w	r0, r0, #3
 8001b32:	e7f6      	b.n	8001b22 <DMA_CalcBaseAndBitshift+0x26>
 8001b34:	aaaaaaab 	.word	0xaaaaaaab
 8001b38:	08007a60 	.word	0x08007a60

08001b3c <HAL_DMA_Init>:
{
 8001b3c:	b538      	push	{r3, r4, r5, lr}
 8001b3e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001b40:	f7ff ff58 	bl	80019f4 <HAL_GetTick>
  if(hdma == NULL)
 8001b44:	2c00      	cmp	r4, #0
 8001b46:	f000 808c 	beq.w	8001c62 <HAL_DMA_Init+0x126>
 8001b4a:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8001b52:	2300      	movs	r3, #0
 8001b54:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001b58:	6822      	ldr	r2, [r4, #0]
 8001b5a:	6813      	ldr	r3, [r2, #0]
 8001b5c:	f023 0301 	bic.w	r3, r3, #1
 8001b60:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b62:	6823      	ldr	r3, [r4, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	f012 0f01 	tst.w	r2, #1
 8001b6a:	d00a      	beq.n	8001b82 <HAL_DMA_Init+0x46>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b6c:	f7ff ff42 	bl	80019f4 <HAL_GetTick>
 8001b70:	1b43      	subs	r3, r0, r5
 8001b72:	2b05      	cmp	r3, #5
 8001b74:	d9f5      	bls.n	8001b62 <HAL_DMA_Init+0x26>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b76:	2320      	movs	r3, #32
 8001b78:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b7a:	2003      	movs	r0, #3
 8001b7c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001b80:	bd38      	pop	{r3, r4, r5, pc}
  tmp = hdma->Instance->CR;
 8001b82:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b84:	4838      	ldr	r0, [pc, #224]	; (8001c68 <HAL_DMA_Init+0x12c>)
 8001b86:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b88:	6861      	ldr	r1, [r4, #4]
 8001b8a:	68a2      	ldr	r2, [r4, #8]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	68e1      	ldr	r1, [r4, #12]
 8001b90:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b92:	6921      	ldr	r1, [r4, #16]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	6961      	ldr	r1, [r4, #20]
 8001b98:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b9a:	69a1      	ldr	r1, [r4, #24]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	69e1      	ldr	r1, [r4, #28]
 8001ba0:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ba2:	6a21      	ldr	r1, [r4, #32]
 8001ba4:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ba6:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ba8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001baa:	2904      	cmp	r1, #4
 8001bac:	d021      	beq.n	8001bf2 <HAL_DMA_Init+0xb6>
  hdma->Instance->CR = tmp;  
 8001bae:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001bb0:	6821      	ldr	r1, [r4, #0]
 8001bb2:	694a      	ldr	r2, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bb4:	f022 0207 	bic.w	r2, r2, #7
  tmp |= hdma->Init.FIFOMode;
 8001bb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bba:	431a      	orrs	r2, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d10a      	bne.n	8001bd6 <HAL_DMA_Init+0x9a>
    tmp |= hdma->Init.FIFOThreshold;
 8001bc0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001bc2:	4302      	orrs	r2, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001bc6:	b133      	cbz	r3, 8001bd6 <HAL_DMA_Init+0x9a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001bc8:	69a5      	ldr	r5, [r4, #24]
 8001bca:	bb3d      	cbnz	r5, 8001c1c <HAL_DMA_Init+0xe0>
  {
    switch (tmp)
 8001bcc:	2801      	cmp	r0, #1
 8001bce:	d01f      	beq.n	8001c10 <HAL_DMA_Init+0xd4>
 8001bd0:	f030 0002 	bics.w	r0, r0, #2
 8001bd4:	d012      	beq.n	8001bfc <HAL_DMA_Init+0xc0>
  hdma->Instance->FCR = tmp;
 8001bd6:	614a      	str	r2, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bd8:	4620      	mov	r0, r4
 8001bda:	f7ff ff8f 	bl	8001afc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bde:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001be0:	233f      	movs	r3, #63	; 0x3f
 8001be2:	4093      	lsls	r3, r2
 8001be4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001be6:	2000      	movs	r0, #0
 8001be8:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001bea:	2301      	movs	r3, #1
 8001bec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001bf0:	e7c6      	b.n	8001b80 <HAL_DMA_Init+0x44>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bf2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001bf4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001bf6:	4301      	orrs	r1, r0
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	e7d8      	b.n	8001bae <HAL_DMA_Init+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001bfc:	f3c3 6300 	ubfx	r3, r3, #24, #1
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0e8      	beq.n	8001bd6 <HAL_DMA_Init+0x9a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c04:	2340      	movs	r3, #64	; 0x40
 8001c06:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001c08:	2001      	movs	r0, #1
 8001c0a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8001c0e:	e7b7      	b.n	8001b80 <HAL_DMA_Init+0x44>
  HAL_StatusTypeDef status = HAL_OK;
 8001c10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c14:	bf14      	ite	ne
 8001c16:	2300      	movne	r3, #0
 8001c18:	2301      	moveq	r3, #1
 8001c1a:	e7f1      	b.n	8001c00 <HAL_DMA_Init+0xc4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c1c:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8001c20:	d008      	beq.n	8001c34 <HAL_DMA_Init+0xf8>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c22:	2802      	cmp	r0, #2
 8001c24:	d9ee      	bls.n	8001c04 <HAL_DMA_Init+0xc8>
 8001c26:	2803      	cmp	r0, #3
 8001c28:	d1d5      	bne.n	8001bd6 <HAL_DMA_Init+0x9a>
  HAL_StatusTypeDef status = HAL_OK;
 8001c2a:	f3c3 6300 	ubfx	r3, r3, #24, #1
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0d1      	beq.n	8001bd6 <HAL_DMA_Init+0x9a>
 8001c32:	e7e7      	b.n	8001c04 <HAL_DMA_Init+0xc8>
    switch (tmp)
 8001c34:	2803      	cmp	r0, #3
 8001c36:	d8ce      	bhi.n	8001bd6 <HAL_DMA_Init+0x9a>
 8001c38:	a501      	add	r5, pc, #4	; (adr r5, 8001c40 <HAL_DMA_Init+0x104>)
 8001c3a:	f855 f020 	ldr.w	pc, [r5, r0, lsl #2]
 8001c3e:	bf00      	nop
 8001c40:	08001c05 	.word	0x08001c05
 8001c44:	08001c51 	.word	0x08001c51
 8001c48:	08001c05 	.word	0x08001c05
 8001c4c:	08001c57 	.word	0x08001c57
  HAL_StatusTypeDef status = HAL_OK;
 8001c50:	f3c3 6300 	ubfx	r3, r3, #24, #1
 8001c54:	e7eb      	b.n	8001c2e <HAL_DMA_Init+0xf2>
 8001c56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c5a:	bf14      	ite	ne
 8001c5c:	2300      	movne	r3, #0
 8001c5e:	2301      	moveq	r3, #1
 8001c60:	e7e5      	b.n	8001c2e <HAL_DMA_Init+0xf2>
    return HAL_ERROR;
 8001c62:	2001      	movs	r0, #1
 8001c64:	e78c      	b.n	8001b80 <HAL_DMA_Init+0x44>
 8001c66:	bf00      	nop
 8001c68:	f010803f 	.word	0xf010803f

08001c6c <HAL_DMA_Start_IT>:
{
 8001c6c:	b470      	push	{r4, r5, r6}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c6e:	6d84      	ldr	r4, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8001c70:	f890 c034 	ldrb.w	ip, [r0, #52]	; 0x34
 8001c74:	f1bc 0f01 	cmp.w	ip, #1
 8001c78:	d03f      	beq.n	8001cfa <HAL_DMA_Start_IT+0x8e>
 8001c7a:	f04f 0c01 	mov.w	ip, #1
 8001c7e:	f880 c034 	strb.w	ip, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c82:	f890 c035 	ldrb.w	ip, [r0, #53]	; 0x35
 8001c86:	fa5f fc8c 	uxtb.w	ip, ip
 8001c8a:	f1bc 0f01 	cmp.w	ip, #1
 8001c8e:	d005      	beq.n	8001c9c <HAL_DMA_Start_IT+0x30>
    __HAL_UNLOCK(hdma);	  
 8001c90:	2300      	movs	r3, #0
 8001c92:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8001c96:	2002      	movs	r0, #2
}
 8001c98:	bc70      	pop	{r4, r5, r6}
 8001c9a:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c9c:	2502      	movs	r5, #2
 8001c9e:	f880 5035 	strb.w	r5, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ca2:	2500      	movs	r5, #0
 8001ca4:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ca6:	6806      	ldr	r6, [r0, #0]
 8001ca8:	6835      	ldr	r5, [r6, #0]
 8001caa:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8001cae:	6035      	str	r5, [r6, #0]
  hdma->Instance->NDTR = DataLength;
 8001cb0:	6805      	ldr	r5, [r0, #0]
 8001cb2:	606b      	str	r3, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cb4:	6883      	ldr	r3, [r0, #8]
 8001cb6:	2b40      	cmp	r3, #64	; 0x40
 8001cb8:	d01a      	beq.n	8001cf0 <HAL_DMA_Start_IT+0x84>
    hdma->Instance->PAR = SrcAddress;
 8001cba:	6803      	ldr	r3, [r0, #0]
 8001cbc:	6099      	str	r1, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001cbe:	6803      	ldr	r3, [r0, #0]
 8001cc0:	60da      	str	r2, [r3, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cc2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001cc4:	233f      	movs	r3, #63	; 0x3f
 8001cc6:	4093      	lsls	r3, r2
 8001cc8:	60a3      	str	r3, [r4, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001cca:	6802      	ldr	r2, [r0, #0]
 8001ccc:	6813      	ldr	r3, [r2, #0]
 8001cce:	f043 0316 	orr.w	r3, r3, #22
 8001cd2:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001cd4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001cd6:	b123      	cbz	r3, 8001ce2 <HAL_DMA_Start_IT+0x76>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001cd8:	6802      	ldr	r2, [r0, #0]
 8001cda:	6813      	ldr	r3, [r2, #0]
 8001cdc:	f043 0308 	orr.w	r3, r3, #8
 8001ce0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001ce2:	6802      	ldr	r2, [r0, #0]
 8001ce4:	6813      	ldr	r3, [r2, #0]
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cec:	2000      	movs	r0, #0
 8001cee:	e7d3      	b.n	8001c98 <HAL_DMA_Start_IT+0x2c>
    hdma->Instance->PAR = DstAddress;
 8001cf0:	6803      	ldr	r3, [r0, #0]
 8001cf2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001cf4:	6803      	ldr	r3, [r0, #0]
 8001cf6:	60d9      	str	r1, [r3, #12]
 8001cf8:	e7e3      	b.n	8001cc2 <HAL_DMA_Start_IT+0x56>
  __HAL_LOCK(hdma);
 8001cfa:	2002      	movs	r0, #2
 8001cfc:	e7cc      	b.n	8001c98 <HAL_DMA_Start_IT+0x2c>
	...

08001d00 <HAL_DMA_IRQHandler>:
{
 8001d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d02:	b083      	sub	sp, #12
 8001d04:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d0a:	4b72      	ldr	r3, [pc, #456]	; (8001ed4 <HAL_DMA_IRQHandler+0x1d4>)
 8001d0c:	681e      	ldr	r6, [r3, #0]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d0e:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8001d10:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d12:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001d14:	2308      	movs	r3, #8
 8001d16:	4093      	lsls	r3, r2
 8001d18:	422b      	tst	r3, r5
 8001d1a:	d010      	beq.n	8001d3e <HAL_DMA_IRQHandler+0x3e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d1c:	6803      	ldr	r3, [r0, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	f012 0f04 	tst.w	r2, #4
 8001d24:	d00b      	beq.n	8001d3e <HAL_DMA_IRQHandler+0x3e>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	f022 0204 	bic.w	r2, r2, #4
 8001d2c:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d2e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001d30:	2308      	movs	r3, #8
 8001d32:	4093      	lsls	r3, r2
 8001d34:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d36:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d3e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001d40:	2301      	movs	r3, #1
 8001d42:	4093      	lsls	r3, r2
 8001d44:	422b      	tst	r3, r5
 8001d46:	d009      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x5c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d48:	6822      	ldr	r2, [r4, #0]
 8001d4a:	6952      	ldr	r2, [r2, #20]
 8001d4c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001d50:	d004      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x5c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d52:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d54:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001d56:	f043 0302 	orr.w	r3, r3, #2
 8001d5a:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d5c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001d5e:	2304      	movs	r3, #4
 8001d60:	4093      	lsls	r3, r2
 8001d62:	422b      	tst	r3, r5
 8001d64:	d009      	beq.n	8001d7a <HAL_DMA_IRQHandler+0x7a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d66:	6822      	ldr	r2, [r4, #0]
 8001d68:	6812      	ldr	r2, [r2, #0]
 8001d6a:	f012 0f02 	tst.w	r2, #2
 8001d6e:	d004      	beq.n	8001d7a <HAL_DMA_IRQHandler+0x7a>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d70:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d72:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001d74:	f043 0304 	orr.w	r3, r3, #4
 8001d78:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d7a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001d7c:	2310      	movs	r3, #16
 8001d7e:	4093      	lsls	r3, r2
 8001d80:	422b      	tst	r3, r5
 8001d82:	d024      	beq.n	8001dce <HAL_DMA_IRQHandler+0xce>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d84:	6822      	ldr	r2, [r4, #0]
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	f012 0f08 	tst.w	r2, #8
 8001d8c:	d01f      	beq.n	8001dce <HAL_DMA_IRQHandler+0xce>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d8e:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d90:	6823      	ldr	r3, [r4, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001d98:	d00d      	beq.n	8001db6 <HAL_DMA_IRQHandler+0xb6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001da0:	d104      	bne.n	8001dac <HAL_DMA_IRQHandler+0xac>
          if(hdma->XferHalfCpltCallback != NULL)
 8001da2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001da4:	b19b      	cbz	r3, 8001dce <HAL_DMA_IRQHandler+0xce>
            hdma->XferHalfCpltCallback(hdma);
 8001da6:	4620      	mov	r0, r4
 8001da8:	4798      	blx	r3
 8001daa:	e010      	b.n	8001dce <HAL_DMA_IRQHandler+0xce>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001dac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001dae:	b173      	cbz	r3, 8001dce <HAL_DMA_IRQHandler+0xce>
            hdma->XferM1HalfCpltCallback(hdma);
 8001db0:	4620      	mov	r0, r4
 8001db2:	4798      	blx	r3
 8001db4:	e00b      	b.n	8001dce <HAL_DMA_IRQHandler+0xce>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001dbc:	d103      	bne.n	8001dc6 <HAL_DMA_IRQHandler+0xc6>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	f022 0208 	bic.w	r2, r2, #8
 8001dc4:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001dc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001dc8:	b10b      	cbz	r3, 8001dce <HAL_DMA_IRQHandler+0xce>
          hdma->XferHalfCpltCallback(hdma);
 8001dca:	4620      	mov	r0, r4
 8001dcc:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001dce:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001dd0:	2320      	movs	r3, #32
 8001dd2:	4093      	lsls	r3, r2
 8001dd4:	422b      	tst	r3, r5
 8001dd6:	d055      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x184>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001dd8:	6822      	ldr	r2, [r4, #0]
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	f012 0f10 	tst.w	r2, #16
 8001de0:	d050      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x184>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001de2:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001de4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b05      	cmp	r3, #5
 8001dec:	d00e      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x10c>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dee:	6823      	ldr	r3, [r4, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001df6:	d033      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x160>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001dfe:	d12a      	bne.n	8001e56 <HAL_DMA_IRQHandler+0x156>
          if(hdma->XferM1CpltCallback != NULL)
 8001e00:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d03e      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x184>
            hdma->XferM1CpltCallback(hdma);
 8001e06:	4620      	mov	r0, r4
 8001e08:	4798      	blx	r3
 8001e0a:	e03b      	b.n	8001e84 <HAL_DMA_IRQHandler+0x184>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e0c:	6822      	ldr	r2, [r4, #0]
 8001e0e:	6813      	ldr	r3, [r2, #0]
 8001e10:	f023 0316 	bic.w	r3, r3, #22
 8001e14:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e16:	6822      	ldr	r2, [r4, #0]
 8001e18:	6953      	ldr	r3, [r2, #20]
 8001e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e1e:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e22:	b1a3      	cbz	r3, 8001e4e <HAL_DMA_IRQHandler+0x14e>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e24:	6822      	ldr	r2, [r4, #0]
 8001e26:	6813      	ldr	r3, [r2, #0]
 8001e28:	f023 0308 	bic.w	r3, r3, #8
 8001e2c:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e2e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001e30:	233f      	movs	r3, #63	; 0x3f
 8001e32:	4093      	lsls	r3, r2
 8001e34:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001e36:	2301      	movs	r3, #1
 8001e38:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8001e42:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d043      	beq.n	8001ed0 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001e48:	4620      	mov	r0, r4
 8001e4a:	4798      	blx	r3
 8001e4c:	e040      	b.n	8001ed0 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e4e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1e7      	bne.n	8001e24 <HAL_DMA_IRQHandler+0x124>
 8001e54:	e7eb      	b.n	8001e2e <HAL_DMA_IRQHandler+0x12e>
          if(hdma->XferCpltCallback != NULL)
 8001e56:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001e58:	b1a3      	cbz	r3, 8001e84 <HAL_DMA_IRQHandler+0x184>
            hdma->XferCpltCallback(hdma);
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	4798      	blx	r3
 8001e5e:	e011      	b.n	8001e84 <HAL_DMA_IRQHandler+0x184>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001e66:	d109      	bne.n	8001e7c <HAL_DMA_IRQHandler+0x17c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	f022 0210 	bic.w	r2, r2, #16
 8001e6e:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001e70:	2301      	movs	r3, #1
 8001e72:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8001e76:	2300      	movs	r3, #0
 8001e78:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8001e7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001e7e:	b10b      	cbz	r3, 8001e84 <HAL_DMA_IRQHandler+0x184>
          hdma->XferCpltCallback(hdma);
 8001e80:	4620      	mov	r0, r4
 8001e82:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e86:	b31b      	cbz	r3, 8001ed0 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e88:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e8a:	f013 0f01 	tst.w	r3, #1
 8001e8e:	d01b      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x1c8>
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e90:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <HAL_DMA_IRQHandler+0x1d8>)
 8001e92:	fba3 3606 	umull	r3, r6, r3, r6
 8001e96:	0ab6      	lsrs	r6, r6, #10
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e98:	2305      	movs	r3, #5
 8001e9a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001e9e:	6822      	ldr	r2, [r4, #0]
 8001ea0:	6813      	ldr	r3, [r2, #0]
 8001ea2:	f023 0301 	bic.w	r3, r3, #1
 8001ea6:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001ea8:	9b01      	ldr	r3, [sp, #4]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	9301      	str	r3, [sp, #4]
 8001eae:	42b3      	cmp	r3, r6
 8001eb0:	d804      	bhi.n	8001ebc <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001eb2:	6823      	ldr	r3, [r4, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f013 0f01 	tst.w	r3, #1
 8001eba:	d1f5      	bne.n	8001ea8 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8001ec8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001eca:	b10b      	cbz	r3, 8001ed0 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001ecc:	4620      	mov	r0, r4
 8001ece:	4798      	blx	r3
}
 8001ed0:	b003      	add	sp, #12
 8001ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed4:	20000008 	.word	0x20000008
 8001ed8:	1b4e81b5 	.word	0x1b4e81b5

08001edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee4:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee6:	4d7b      	ldr	r5, [pc, #492]	; (80020d4 <HAL_GPIO_Init+0x1f8>)
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ee8:	4c7b      	ldr	r4, [pc, #492]	; (80020d8 <HAL_GPIO_Init+0x1fc>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eea:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 80020e0 <HAL_GPIO_Init+0x204>
 8001eee:	e04d      	b.n	8001f8c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001ef0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ef2:	f04f 0903 	mov.w	r9, #3
 8001ef6:	fa09 f902 	lsl.w	r9, r9, r2
 8001efa:	ea27 0909 	bic.w	r9, r7, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001efe:	68cf      	ldr	r7, [r1, #12]
 8001f00:	4097      	lsls	r7, r2
 8001f02:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8001f06:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001f08:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f0a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f0e:	684f      	ldr	r7, [r1, #4]
 8001f10:	f3c7 1700 	ubfx	r7, r7, #4, #1
 8001f14:	409f      	lsls	r7, r3
 8001f16:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001f1a:	6047      	str	r7, [r0, #4]
 8001f1c:	e046      	b.n	8001fac <HAL_GPIO_Init+0xd0>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f1e:	f04f 0e00 	mov.w	lr, #0
 8001f22:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001f26:	ea4e 0e0a 	orr.w	lr, lr, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f2a:	f8c7 e008 	str.w	lr, [r7, #8]
        temp = EXTI->RTSR;
 8001f2e:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001f30:	ea6f 0e0c 	mvn.w	lr, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f34:	684e      	ldr	r6, [r1, #4]
 8001f36:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001f3a:	bf0c      	ite	eq
 8001f3c:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001f40:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->RTSR = temp;
 8001f44:	60a7      	str	r7, [r4, #8]

        temp = EXTI->FTSR;
 8001f46:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f48:	684e      	ldr	r6, [r1, #4]
 8001f4a:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8001f4e:	bf0c      	ite	eq
 8001f50:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001f54:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->FTSR = temp;
 8001f58:	60e7      	str	r7, [r4, #12]

        temp = EXTI->EMR;
 8001f5a:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f5c:	684e      	ldr	r6, [r1, #4]
 8001f5e:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001f62:	bf0c      	ite	eq
 8001f64:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001f68:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->EMR = temp;
 8001f6c:	6067      	str	r7, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f6e:	6827      	ldr	r7, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f70:	684e      	ldr	r6, [r1, #4]
 8001f72:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001f76:	bf0c      	ite	eq
 8001f78:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001f7c:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->IMR = temp;
 8001f80:	6027      	str	r7, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f82:	3301      	adds	r3, #1
 8001f84:	3202      	adds	r2, #2
 8001f86:	2b10      	cmp	r3, #16
 8001f88:	f000 80a1 	beq.w	80020ce <HAL_GPIO_Init+0x1f2>
    ioposition = 0x01U << position;
 8001f8c:	f04f 0e01 	mov.w	lr, #1
 8001f90:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f94:	680f      	ldr	r7, [r1, #0]
 8001f96:	ea0e 0c07 	and.w	ip, lr, r7
    if(iocurrent == ioposition)
 8001f9a:	ea3e 0607 	bics.w	r6, lr, r7
 8001f9e:	d1f0      	bne.n	8001f82 <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fa0:	684f      	ldr	r7, [r1, #4]
 8001fa2:	f007 0703 	and.w	r7, r7, #3
 8001fa6:	3f01      	subs	r7, #1
 8001fa8:	2f01      	cmp	r7, #1
 8001faa:	d9a1      	bls.n	8001ef0 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fac:	684f      	ldr	r7, [r1, #4]
 8001fae:	f007 0703 	and.w	r7, r7, #3
 8001fb2:	2f03      	cmp	r7, #3
 8001fb4:	d027      	beq.n	8002006 <HAL_GPIO_Init+0x12a>
        temp = GPIOx->PUPDR;
 8001fb6:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fb8:	f04f 0e03 	mov.w	lr, #3
 8001fbc:	fa0e fe02 	lsl.w	lr, lr, r2
 8001fc0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fc4:	688f      	ldr	r7, [r1, #8]
 8001fc6:	4097      	lsls	r7, r2
 8001fc8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8001fcc:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fce:	684f      	ldr	r7, [r1, #4]
 8001fd0:	f007 0703 	and.w	r7, r7, #3
 8001fd4:	2f02      	cmp	r7, #2
 8001fd6:	d116      	bne.n	8002006 <HAL_GPIO_Init+0x12a>
        temp = GPIOx->AFR[position >> 3U];
 8001fd8:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8001fdc:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8001fe0:	f8de 7020 	ldr.w	r7, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fe4:	f003 0907 	and.w	r9, r3, #7
 8001fe8:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8001fec:	f04f 0a0f 	mov.w	sl, #15
 8001ff0:	fa0a fa09 	lsl.w	sl, sl, r9
 8001ff4:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ff8:	690f      	ldr	r7, [r1, #16]
 8001ffa:	fa07 f709 	lsl.w	r7, r7, r9
 8001ffe:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->AFR[position >> 3U] = temp;
 8002002:	f8ce 7020 	str.w	r7, [lr, #32]
      temp = GPIOx->MODER;
 8002006:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002008:	f04f 0e03 	mov.w	lr, #3
 800200c:	fa0e fe02 	lsl.w	lr, lr, r2
 8002010:	ea27 0e0e 	bic.w	lr, r7, lr
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002014:	684f      	ldr	r7, [r1, #4]
 8002016:	f007 0703 	and.w	r7, r7, #3
 800201a:	4097      	lsls	r7, r2
 800201c:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->MODER = temp;
 8002020:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002022:	684f      	ldr	r7, [r1, #4]
 8002024:	f417 3f40 	tst.w	r7, #196608	; 0x30000
 8002028:	d0ab      	beq.n	8001f82 <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202a:	2700      	movs	r7, #0
 800202c:	9701      	str	r7, [sp, #4]
 800202e:	6c6f      	ldr	r7, [r5, #68]	; 0x44
 8002030:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8002034:	646f      	str	r7, [r5, #68]	; 0x44
 8002036:	6c6f      	ldr	r7, [r5, #68]	; 0x44
 8002038:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800203c:	9701      	str	r7, [sp, #4]
 800203e:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002040:	f023 0703 	bic.w	r7, r3, #3
 8002044:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8002048:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 800204c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002050:	f003 0e03 	and.w	lr, r3, #3
 8002054:	ea4f 0b8e 	mov.w	fp, lr, lsl #2
 8002058:	f04f 0e0f 	mov.w	lr, #15
 800205c:	fa0e fe0b 	lsl.w	lr, lr, fp
 8002060:	ea2a 0a0e 	bic.w	sl, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002064:	4e1d      	ldr	r6, [pc, #116]	; (80020dc <HAL_GPIO_Init+0x200>)
 8002066:	42b0      	cmp	r0, r6
 8002068:	f43f af59 	beq.w	8001f1e <HAL_GPIO_Init+0x42>
 800206c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002070:	42b0      	cmp	r0, r6
 8002072:	d01a      	beq.n	80020aa <HAL_GPIO_Init+0x1ce>
 8002074:	4540      	cmp	r0, r8
 8002076:	d01b      	beq.n	80020b0 <HAL_GPIO_Init+0x1d4>
 8002078:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800207c:	42b0      	cmp	r0, r6
 800207e:	d01a      	beq.n	80020b6 <HAL_GPIO_Init+0x1da>
 8002080:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002084:	42b0      	cmp	r0, r6
 8002086:	d019      	beq.n	80020bc <HAL_GPIO_Init+0x1e0>
 8002088:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800208c:	42b0      	cmp	r0, r6
 800208e:	d018      	beq.n	80020c2 <HAL_GPIO_Init+0x1e6>
 8002090:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002094:	42b0      	cmp	r0, r6
 8002096:	d017      	beq.n	80020c8 <HAL_GPIO_Init+0x1ec>
 8002098:	f8df e048 	ldr.w	lr, [pc, #72]	; 80020e4 <HAL_GPIO_Init+0x208>
 800209c:	4570      	cmp	r0, lr
 800209e:	bf0c      	ite	eq
 80020a0:	f04f 0e07 	moveq.w	lr, #7
 80020a4:	f04f 0e08 	movne.w	lr, #8
 80020a8:	e73b      	b.n	8001f22 <HAL_GPIO_Init+0x46>
 80020aa:	f04f 0e01 	mov.w	lr, #1
 80020ae:	e738      	b.n	8001f22 <HAL_GPIO_Init+0x46>
 80020b0:	f04f 0e02 	mov.w	lr, #2
 80020b4:	e735      	b.n	8001f22 <HAL_GPIO_Init+0x46>
 80020b6:	f04f 0e03 	mov.w	lr, #3
 80020ba:	e732      	b.n	8001f22 <HAL_GPIO_Init+0x46>
 80020bc:	f04f 0e04 	mov.w	lr, #4
 80020c0:	e72f      	b.n	8001f22 <HAL_GPIO_Init+0x46>
 80020c2:	f04f 0e05 	mov.w	lr, #5
 80020c6:	e72c      	b.n	8001f22 <HAL_GPIO_Init+0x46>
 80020c8:	f04f 0e06 	mov.w	lr, #6
 80020cc:	e729      	b.n	8001f22 <HAL_GPIO_Init+0x46>
      }
    }
  }
}
 80020ce:	b003      	add	sp, #12
 80020d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40013c00 	.word	0x40013c00
 80020dc:	40020000 	.word	0x40020000
 80020e0:	40020800 	.word	0x40020800
 80020e4:	40021c00 	.word	0x40021c00

080020e8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80020e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020ec:	b083      	sub	sp, #12

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ee:	2300      	movs	r3, #0
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80020f0:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8002230 <HAL_GPIO_DeInit+0x148>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80020f4:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8002234 <HAL_GPIO_DeInit+0x14c>
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80020f8:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8002238 <HAL_GPIO_DeInit+0x150>
 80020fc:	f8df b13c 	ldr.w	fp, [pc, #316]	; 800223c <HAL_GPIO_DeInit+0x154>
 8002100:	e02b      	b.n	800215a <HAL_GPIO_DeInit+0x72>
 8002102:	f04f 0e00 	mov.w	lr, #0
 8002106:	fa0e f505 	lsl.w	r5, lr, r5
 800210a:	4565      	cmp	r5, ip
 800210c:	d06c      	beq.n	80021e8 <HAL_GPIO_DeInit+0x100>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800210e:	6805      	ldr	r5, [r0, #0]
 8002110:	005c      	lsls	r4, r3, #1
 8002112:	2603      	movs	r6, #3
 8002114:	fa06 f404 	lsl.w	r4, r6, r4
 8002118:	ea25 0504 	bic.w	r5, r5, r4
 800211c:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800211e:	fa23 f506 	lsr.w	r5, r3, r6
 8002122:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8002126:	6a2e      	ldr	r6, [r5, #32]
 8002128:	f003 0707 	and.w	r7, r3, #7
 800212c:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 8002130:	270f      	movs	r7, #15
 8002132:	fa07 f70c 	lsl.w	r7, r7, ip
 8002136:	ea26 0607 	bic.w	r6, r6, r7
 800213a:	622e      	str	r6, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800213c:	68c5      	ldr	r5, [r0, #12]
 800213e:	ea25 0504 	bic.w	r5, r5, r4
 8002142:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002144:	6845      	ldr	r5, [r0, #4]
 8002146:	ea25 0202 	bic.w	r2, r5, r2
 800214a:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800214c:	6882      	ldr	r2, [r0, #8]
 800214e:	ea22 0404 	bic.w	r4, r2, r4
 8002152:	6084      	str	r4, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002154:	3301      	adds	r3, #1
 8002156:	2b10      	cmp	r3, #16
 8002158:	d064      	beq.n	8002224 <HAL_GPIO_DeInit+0x13c>
    ioposition = 0x01U << position;
 800215a:	2201      	movs	r2, #1
 800215c:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 800215e:	ea02 0701 	and.w	r7, r2, r1
    if(iocurrent == ioposition)
 8002162:	ea32 0401 	bics.w	r4, r2, r1
 8002166:	d1f5      	bne.n	8002154 <HAL_GPIO_DeInit+0x6c>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002168:	f023 0403 	bic.w	r4, r3, #3
 800216c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8002170:	f504 349c 	add.w	r4, r4, #79872	; 0x13800
 8002174:	f8d4 c008 	ldr.w	ip, [r4, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002178:	f003 0503 	and.w	r5, r3, #3
 800217c:	00ad      	lsls	r5, r5, #2
 800217e:	260f      	movs	r6, #15
 8002180:	40ae      	lsls	r6, r5
 8002182:	9601      	str	r6, [sp, #4]
 8002184:	ea06 0c0c 	and.w	ip, r6, ip
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002188:	4548      	cmp	r0, r9
 800218a:	d0ba      	beq.n	8002102 <HAL_GPIO_DeInit+0x1a>
 800218c:	4550      	cmp	r0, sl
 800218e:	d019      	beq.n	80021c4 <HAL_GPIO_DeInit+0xdc>
 8002190:	4558      	cmp	r0, fp
 8002192:	d01a      	beq.n	80021ca <HAL_GPIO_DeInit+0xe2>
 8002194:	4e25      	ldr	r6, [pc, #148]	; (800222c <HAL_GPIO_DeInit+0x144>)
 8002196:	42b0      	cmp	r0, r6
 8002198:	d01a      	beq.n	80021d0 <HAL_GPIO_DeInit+0xe8>
 800219a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800219e:	42b0      	cmp	r0, r6
 80021a0:	d019      	beq.n	80021d6 <HAL_GPIO_DeInit+0xee>
 80021a2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80021a6:	42b0      	cmp	r0, r6
 80021a8:	d018      	beq.n	80021dc <HAL_GPIO_DeInit+0xf4>
 80021aa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80021ae:	42b0      	cmp	r0, r6
 80021b0:	d017      	beq.n	80021e2 <HAL_GPIO_DeInit+0xfa>
 80021b2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80021b6:	42b0      	cmp	r0, r6
 80021b8:	bf0c      	ite	eq
 80021ba:	f04f 0e07 	moveq.w	lr, #7
 80021be:	f04f 0e08 	movne.w	lr, #8
 80021c2:	e7a0      	b.n	8002106 <HAL_GPIO_DeInit+0x1e>
 80021c4:	f04f 0e01 	mov.w	lr, #1
 80021c8:	e79d      	b.n	8002106 <HAL_GPIO_DeInit+0x1e>
 80021ca:	f04f 0e02 	mov.w	lr, #2
 80021ce:	e79a      	b.n	8002106 <HAL_GPIO_DeInit+0x1e>
 80021d0:	f04f 0e03 	mov.w	lr, #3
 80021d4:	e797      	b.n	8002106 <HAL_GPIO_DeInit+0x1e>
 80021d6:	f04f 0e04 	mov.w	lr, #4
 80021da:	e794      	b.n	8002106 <HAL_GPIO_DeInit+0x1e>
 80021dc:	f04f 0e05 	mov.w	lr, #5
 80021e0:	e791      	b.n	8002106 <HAL_GPIO_DeInit+0x1e>
 80021e2:	f04f 0e06 	mov.w	lr, #6
 80021e6:	e78e      	b.n	8002106 <HAL_GPIO_DeInit+0x1e>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80021e8:	f8d8 5000 	ldr.w	r5, [r8]
 80021ec:	ea25 0507 	bic.w	r5, r5, r7
 80021f0:	f8c8 5000 	str.w	r5, [r8]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80021f4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80021f8:	ea25 0507 	bic.w	r5, r5, r7
 80021fc:	f8c8 5004 	str.w	r5, [r8, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002200:	f8d8 500c 	ldr.w	r5, [r8, #12]
 8002204:	ea25 0507 	bic.w	r5, r5, r7
 8002208:	f8c8 500c 	str.w	r5, [r8, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800220c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8002210:	ea25 0707 	bic.w	r7, r5, r7
 8002214:	f8c8 7008 	str.w	r7, [r8, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002218:	68a5      	ldr	r5, [r4, #8]
 800221a:	9e01      	ldr	r6, [sp, #4]
 800221c:	ea25 0606 	bic.w	r6, r5, r6
 8002220:	60a6      	str	r6, [r4, #8]
 8002222:	e774      	b.n	800210e <HAL_GPIO_DeInit+0x26>
    }
  }
}
 8002224:	b003      	add	sp, #12
 8002226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800222a:	bf00      	nop
 800222c:	40020c00 	.word	0x40020c00
 8002230:	40020000 	.word	0x40020000
 8002234:	40013c00 	.word	0x40013c00
 8002238:	40020400 	.word	0x40020400
 800223c:	40020800 	.word	0x40020800

08002240 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002240:	b10a      	cbz	r2, 8002246 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002242:	6181      	str	r1, [r0, #24]
 8002244:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002246:	0409      	lsls	r1, r1, #16
 8002248:	6181      	str	r1, [r0, #24]
  }
}
 800224a:	4770      	bx	lr

0800224c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800224c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800224e:	b085      	sub	sp, #20
 8002250:	4604      	mov	r4, r0
 8002252:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 8002256:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 800225a:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800225e:	f894 52f8 	ldrb.w	r5, [r4, #760]	; 0x2f8
 8002262:	2d01      	cmp	r5, #1
 8002264:	d025      	beq.n	80022b2 <HAL_HCD_HC_Init+0x66>
 8002266:	2501      	movs	r5, #1
 8002268:	f884 52f8 	strb.w	r5, [r4, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800226c:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 8002270:	fb0c 4c01 	mla	ip, ip, r1, r4
 8002274:	2500      	movs	r5, #0
 8002276:	f88c 503d 	strb.w	r5, [ip, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 800227a:	f88c 3038 	strb.w	r3, [ip, #56]	; 0x38
  hhcd->hc[ch_num].max_packet = mps;
 800227e:	f8ac 7040 	strh.w	r7, [ip, #64]	; 0x40
  hhcd->hc[ch_num].ch_num = ch_num;
 8002282:	f88c 1039 	strb.w	r1, [ip, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8002286:	f88c 603f 	strb.w	r6, [ip, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800228a:	f002 0e7f 	and.w	lr, r2, #127	; 0x7f
 800228e:	f88c e03a 	strb.w	lr, [ip, #58]	; 0x3a

  if ((epnum & 0x80U) == 0x80U)
 8002292:	ea4f 1ed2 	mov.w	lr, r2, lsr #7
 8002296:	f88c e03b 	strb.w	lr, [ip, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 800229a:	f88c 003c 	strb.w	r0, [ip, #60]	; 0x3c

  status =  USB_HC_Init(hhcd->Instance,
 800229e:	9702      	str	r7, [sp, #8]
 80022a0:	9601      	str	r6, [sp, #4]
 80022a2:	9000      	str	r0, [sp, #0]
 80022a4:	6820      	ldr	r0, [r4, #0]
 80022a6:	f002 fcee 	bl	8004c86 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80022aa:	f884 52f8 	strb.w	r5, [r4, #760]	; 0x2f8

  return status;
}
 80022ae:	b005      	add	sp, #20
 80022b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hhcd);
 80022b2:	2002      	movs	r0, #2
 80022b4:	e7fb      	b.n	80022ae <HAL_HCD_HC_Init+0x62>

080022b6 <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 80022b6:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d00b      	beq.n	80022d6 <HAL_HCD_HC_Halt+0x20>
{
 80022be:	b510      	push	{r4, lr}
 80022c0:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80022c2:	2301      	movs	r3, #1
 80022c4:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022c8:	6800      	ldr	r0, [r0, #0]
 80022ca:	f002 fd92 	bl	8004df2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80022ce:	2000      	movs	r0, #0
 80022d0:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8

  return status;
}
 80022d4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 80022d6:	2002      	movs	r0, #2
}
 80022d8:	4770      	bx	lr

080022da <HAL_HCD_Init>:
  if (hhcd == NULL)
 80022da:	2800      	cmp	r0, #0
 80022dc:	d04d      	beq.n	800237a <HAL_HCD_Init+0xa0>
{
 80022de:	b570      	push	{r4, r5, r6, lr}
 80022e0:	b08a      	sub	sp, #40	; 0x28
 80022e2:	4604      	mov	r4, r0
  USBx = hhcd->Instance;
 80022e4:	6805      	ldr	r5, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 80022e6:	f890 32f9 	ldrb.w	r3, [r0, #761]	; 0x2f9
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d040      	beq.n	8002370 <HAL_HCD_Init+0x96>
  hhcd->State = HAL_HCD_STATE_BUSY;
 80022ee:	2303      	movs	r3, #3
 80022f0:	f884 32f9 	strb.w	r3, [r4, #761]	; 0x2f9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022f4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80022f6:	f413 7f80 	tst.w	r3, #256	; 0x100
    hhcd->Init.dma_enable = 0U;
 80022fa:	bf04      	itt	eq
 80022fc:	2300      	moveq	r3, #0
 80022fe:	6123      	streq	r3, [r4, #16]
  __HAL_HCD_DISABLE(hhcd);
 8002300:	6820      	ldr	r0, [r4, #0]
 8002302:	f002 fb10 	bl	8004926 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002306:	46a4      	mov	ip, r4
 8002308:	f85c 6b10 	ldr.w	r6, [ip], #16
 800230c:	46ee      	mov	lr, sp
 800230e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002312:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002316:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800231a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800231e:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8002322:	e88e 0003 	stmia.w	lr, {r0, r1}
 8002326:	1d25      	adds	r5, r4, #4
 8002328:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800232c:	4630      	mov	r0, r6
 800232e:	f002 faaf 	bl	8004890 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002332:	2101      	movs	r1, #1
 8002334:	6820      	ldr	r0, [r4, #0]
 8002336:	f002 fafc 	bl	8004932 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800233a:	46a4      	mov	ip, r4
 800233c:	f85c 6b10 	ldr.w	r6, [ip], #16
 8002340:	46ee      	mov	lr, sp
 8002342:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002346:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800234a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800234e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002352:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8002356:	e88e 0003 	stmia.w	lr, {r0, r1}
 800235a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800235e:	4630      	mov	r0, r6
 8002360:	f002 fbaa 	bl	8004ab8 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8002364:	2301      	movs	r3, #1
 8002366:	f884 32f9 	strb.w	r3, [r4, #761]	; 0x2f9
  return HAL_OK;
 800236a:	2000      	movs	r0, #0
}
 800236c:	b00a      	add	sp, #40	; 0x28
 800236e:	bd70      	pop	{r4, r5, r6, pc}
    hhcd->Lock = HAL_UNLOCKED;
 8002370:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
    HAL_HCD_MspInit(hhcd);
 8002374:	f005 f838 	bl	80073e8 <HAL_HCD_MspInit>
 8002378:	e7b9      	b.n	80022ee <HAL_HCD_Init+0x14>
    return HAL_ERROR;
 800237a:	2001      	movs	r0, #1
}
 800237c:	4770      	bx	lr

0800237e <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800237e:	b538      	push	{r3, r4, r5, lr}
 8002380:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8002384:	f8bd 5018 	ldrh.w	r5, [sp, #24]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002388:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 800238c:	fb0c 0c01 	mla	ip, ip, r1, r0
 8002390:	f88c 203b 	strb.w	r2, [ip, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002394:	f88c 303f 	strb.w	r3, [ip, #63]	; 0x3f

  if (token == 0U)
 8002398:	bb3c      	cbnz	r4, 80023ea <HAL_HCD_HC_SubmitRequest+0x6c>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800239a:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 800239e:	fb0c 0c01 	mla	ip, ip, r1, r0
 80023a2:	2403      	movs	r4, #3
 80023a4:	f88c 4042 	strb.w	r4, [ip, #66]	; 0x42
    hhcd->hc[ch_num].do_ping = do_ping;
 80023a8:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80023ac:	f88c 403d 	strb.w	r4, [ip, #61]	; 0x3d
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d048      	beq.n	8002446 <HAL_HCD_HC_SubmitRequest+0xc8>
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d06e      	beq.n	8002496 <HAL_HCD_HC_SubmitRequest+0x118>
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	f000 8094 	beq.w	80024e6 <HAL_HCD_HC_SubmitRequest+0x168>

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80023be:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 80023c2:	fb0c 0301 	mla	r3, ip, r1, r0
 80023c6:	9a05      	ldr	r2, [sp, #20]
 80023c8:	645a      	str	r2, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 80023ca:	64dd      	str	r5, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hhcd->hc[ch_num].xfer_count = 0U;
 80023d2:	651a      	str	r2, [r3, #80]	; 0x50
  hhcd->hc[ch_num].ch_num = ch_num;
 80023d4:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;
 80023d8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80023dc:	4619      	mov	r1, r3
 80023de:	7c02      	ldrb	r2, [r0, #16]
 80023e0:	3138      	adds	r1, #56	; 0x38
 80023e2:	6800      	ldr	r0, [r0, #0]
 80023e4:	f002 fd86 	bl	8004ef4 <USB_HC_StartXfer>
}
 80023e8:	bd38      	pop	{r3, r4, r5, pc}
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023ea:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 80023ee:	fb0c 0c01 	mla	ip, ip, r1, r0
 80023f2:	f04f 0e02 	mov.w	lr, #2
 80023f6:	f88c e042 	strb.w	lr, [ip, #66]	; 0x42
  switch (ep_type)
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d8df      	bhi.n	80023be <HAL_HCD_HC_SubmitRequest+0x40>
 80023fe:	e8df f003 	tbb	[pc, r3]
 8002402:	7202      	.short	0x7202
 8002404:	4a22      	.short	0x4a22
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002406:	2c01      	cmp	r4, #1
 8002408:	d1d9      	bne.n	80023be <HAL_HCD_HC_SubmitRequest+0x40>
 800240a:	2a00      	cmp	r2, #0
 800240c:	d1d7      	bne.n	80023be <HAL_HCD_HC_SubmitRequest+0x40>
        if (length == 0U)
 800240e:	b965      	cbnz	r5, 800242a <HAL_HCD_HC_SubmitRequest+0xac>
          hhcd->hc[ch_num].toggle_out = 1U;
 8002410:	232c      	movs	r3, #44	; 0x2c
 8002412:	fb03 0301 	mla	r3, r3, r1, r0
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800241c:	232c      	movs	r3, #44	; 0x2c
 800241e:	fb03 0301 	mla	r3, r3, r1, r0
 8002422:	2202      	movs	r2, #2
 8002424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002428:	e7c9      	b.n	80023be <HAL_HCD_HC_SubmitRequest+0x40>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800242a:	232c      	movs	r3, #44	; 0x2c
 800242c:	fb03 0301 	mla	r3, r3, r1, r0
 8002430:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1f1      	bne.n	800241c <HAL_HCD_HC_SubmitRequest+0x9e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002438:	232c      	movs	r3, #44	; 0x2c
 800243a:	fb03 0301 	mla	r3, r3, r1, r0
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002444:	e7bb      	b.n	80023be <HAL_HCD_HC_SubmitRequest+0x40>
      if (direction == 0U)
 8002446:	b992      	cbnz	r2, 800246e <HAL_HCD_HC_SubmitRequest+0xf0>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002448:	232c      	movs	r3, #44	; 0x2c
 800244a:	fb03 0301 	mla	r3, r3, r1, r0
 800244e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002452:	b92b      	cbnz	r3, 8002460 <HAL_HCD_HC_SubmitRequest+0xe2>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002454:	232c      	movs	r3, #44	; 0x2c
 8002456:	fb03 0301 	mla	r3, r3, r1, r0
 800245a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800245e:	e7ae      	b.n	80023be <HAL_HCD_HC_SubmitRequest+0x40>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002460:	232c      	movs	r3, #44	; 0x2c
 8002462:	fb03 0301 	mla	r3, r3, r1, r0
 8002466:	2202      	movs	r2, #2
 8002468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800246c:	e7a7      	b.n	80023be <HAL_HCD_HC_SubmitRequest+0x40>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800246e:	232c      	movs	r3, #44	; 0x2c
 8002470:	fb03 0301 	mla	r3, r3, r1, r0
 8002474:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002478:	b933      	cbnz	r3, 8002488 <HAL_HCD_HC_SubmitRequest+0x10a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800247a:	232c      	movs	r3, #44	; 0x2c
 800247c:	fb03 0301 	mla	r3, r3, r1, r0
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002486:	e79a      	b.n	80023be <HAL_HCD_HC_SubmitRequest+0x40>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002488:	232c      	movs	r3, #44	; 0x2c
 800248a:	fb03 0301 	mla	r3, r3, r1, r0
 800248e:	2202      	movs	r2, #2
 8002490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002494:	e793      	b.n	80023be <HAL_HCD_HC_SubmitRequest+0x40>
      if (direction == 0U)
 8002496:	b992      	cbnz	r2, 80024be <HAL_HCD_HC_SubmitRequest+0x140>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002498:	232c      	movs	r3, #44	; 0x2c
 800249a:	fb03 0301 	mla	r3, r3, r1, r0
 800249e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80024a2:	b92b      	cbnz	r3, 80024b0 <HAL_HCD_HC_SubmitRequest+0x132>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024a4:	232c      	movs	r3, #44	; 0x2c
 80024a6:	fb03 0301 	mla	r3, r3, r1, r0
 80024aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024ae:	e786      	b.n	80023be <HAL_HCD_HC_SubmitRequest+0x40>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024b0:	232c      	movs	r3, #44	; 0x2c
 80024b2:	fb03 0301 	mla	r3, r3, r1, r0
 80024b6:	2202      	movs	r2, #2
 80024b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024bc:	e77f      	b.n	80023be <HAL_HCD_HC_SubmitRequest+0x40>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80024be:	232c      	movs	r3, #44	; 0x2c
 80024c0:	fb03 0301 	mla	r3, r3, r1, r0
 80024c4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80024c8:	b933      	cbnz	r3, 80024d8 <HAL_HCD_HC_SubmitRequest+0x15a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024ca:	232c      	movs	r3, #44	; 0x2c
 80024cc:	fb03 0301 	mla	r3, r3, r1, r0
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024d6:	e772      	b.n	80023be <HAL_HCD_HC_SubmitRequest+0x40>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024d8:	232c      	movs	r3, #44	; 0x2c
 80024da:	fb03 0301 	mla	r3, r3, r1, r0
 80024de:	2202      	movs	r2, #2
 80024e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024e4:	e76b      	b.n	80023be <HAL_HCD_HC_SubmitRequest+0x40>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024e6:	232c      	movs	r3, #44	; 0x2c
 80024e8:	fb03 0301 	mla	r3, r3, r1, r0
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      break;
 80024f2:	e764      	b.n	80023be <HAL_HCD_HC_SubmitRequest+0x40>

080024f4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80024f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024f8:	b085      	sub	sp, #20
 80024fa:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024fc:	6805      	ldr	r5, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80024fe:	4628      	mov	r0, r5
 8002500:	f002 fad6 	bl	8004ab0 <USB_GetMode>
 8002504:	2801      	cmp	r0, #1
 8002506:	d002      	beq.n	800250e <HAL_HCD_IRQHandler+0x1a>
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
    }
  }
}
 8002508:	b005      	add	sp, #20
 800250a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800250e:	6820      	ldr	r0, [r4, #0]
 8002510:	f002 faca 	bl	8004aa8 <USB_ReadInterrupts>
 8002514:	2800      	cmp	r0, #0
 8002516:	d0f7      	beq.n	8002508 <HAL_HCD_IRQHandler+0x14>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002518:	6820      	ldr	r0, [r4, #0]
 800251a:	f002 fac5 	bl	8004aa8 <USB_ReadInterrupts>
 800251e:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8002522:	d003      	beq.n	800252c <HAL_HCD_IRQHandler+0x38>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002524:	6823      	ldr	r3, [r4, #0]
 8002526:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800252a:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800252c:	6820      	ldr	r0, [r4, #0]
 800252e:	f002 fabb 	bl	8004aa8 <USB_ReadInterrupts>
 8002532:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8002536:	d003      	beq.n	8002540 <HAL_HCD_IRQHandler+0x4c>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002538:	6823      	ldr	r3, [r4, #0]
 800253a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800253e:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002540:	6820      	ldr	r0, [r4, #0]
 8002542:	f002 fab1 	bl	8004aa8 <USB_ReadInterrupts>
 8002546:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 800254a:	d003      	beq.n	8002554 <HAL_HCD_IRQHandler+0x60>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800254c:	6823      	ldr	r3, [r4, #0]
 800254e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002552:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002554:	6820      	ldr	r0, [r4, #0]
 8002556:	f002 faa7 	bl	8004aa8 <USB_ReadInterrupts>
 800255a:	f010 0f02 	tst.w	r0, #2
 800255e:	d002      	beq.n	8002566 <HAL_HCD_IRQHandler+0x72>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002560:	6823      	ldr	r3, [r4, #0]
 8002562:	2202      	movs	r2, #2
 8002564:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002566:	6820      	ldr	r0, [r4, #0]
 8002568:	f002 fa9e 	bl	8004aa8 <USB_ReadInterrupts>
 800256c:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 8002570:	d008      	beq.n	8002584 <HAL_HCD_IRQHandler+0x90>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002572:	6823      	ldr	r3, [r4, #0]
 8002574:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002578:	615a      	str	r2, [r3, #20]
      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800257a:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 800257e:	f013 0f01 	tst.w	r3, #1
 8002582:	d025      	beq.n	80025d0 <HAL_HCD_IRQHandler+0xdc>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002584:	6820      	ldr	r0, [r4, #0]
 8002586:	f002 fa8f 	bl	8004aa8 <USB_ReadInterrupts>
 800258a:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 800258e:	d12e      	bne.n	80025ee <HAL_HCD_IRQHandler+0xfa>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002590:	6820      	ldr	r0, [r4, #0]
 8002592:	f002 fa89 	bl	8004aa8 <USB_ReadInterrupts>
 8002596:	f010 0f08 	tst.w	r0, #8
 800259a:	d179      	bne.n	8002690 <HAL_HCD_IRQHandler+0x19c>
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800259c:	6820      	ldr	r0, [r4, #0]
 800259e:	f002 fa83 	bl	8004aa8 <USB_ReadInterrupts>
 80025a2:	f010 0f10 	tst.w	r0, #16
 80025a6:	d17a      	bne.n	800269e <HAL_HCD_IRQHandler+0x1aa>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80025a8:	6820      	ldr	r0, [r4, #0]
 80025aa:	f002 fa7d 	bl	8004aa8 <USB_ReadInterrupts>
 80025ae:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80025b2:	d0a9      	beq.n	8002508 <HAL_HCD_IRQHandler+0x14>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80025b4:	6820      	ldr	r0, [r4, #0]
 80025b6:	f002 fc17 	bl	8004de8 <USB_HC_ReadInterrupt>
 80025ba:	4681      	mov	r9, r0
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80025bc:	68a3      	ldr	r3, [r4, #8]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 8372 	beq.w	8002ca8 <HAL_HCD_IRQHandler+0x7b4>
 80025c4:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
 80025c8:	2600      	movs	r6, #0
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
  {
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80025ca:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 80025ce:	e149      	b.n	8002864 <HAL_HCD_IRQHandler+0x370>
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80025d0:	2110      	movs	r1, #16
 80025d2:	4628      	mov	r0, r5
 80025d4:	f002 f9de 	bl	8004994 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80025d8:	4628      	mov	r0, r5
 80025da:	f002 fa03 	bl	80049e4 <USB_FlushRxFifo>
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80025de:	2101      	movs	r1, #1
 80025e0:	6820      	ldr	r0, [r4, #0]
 80025e2:	f002 fadf 	bl	8004ba4 <USB_InitFSLSPClkSel>
        HAL_HCD_Disconnect_Callback(hhcd);
 80025e6:	4620      	mov	r0, r4
 80025e8:	f004 ff56 	bl	8007498 <HAL_HCD_Disconnect_Callback>
 80025ec:	e7ca      	b.n	8002584 <HAL_HCD_IRQHandler+0x90>
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025ee:	6826      	ldr	r6, [r4, #0]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80025f0:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 80025f4:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 80025f6:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 80025fa:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80025fc:	9b03      	ldr	r3, [sp, #12]
 80025fe:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002602:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002604:	9b02      	ldr	r3, [sp, #8]
 8002606:	f013 0f02 	tst.w	r3, #2
 800260a:	d007      	beq.n	800261c <HAL_HCD_IRQHandler+0x128>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800260c:	9b02      	ldr	r3, [sp, #8]
 800260e:	f013 0f01 	tst.w	r3, #1
 8002612:	d124      	bne.n	800265e <HAL_HCD_IRQHandler+0x16a>
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002614:	9b03      	ldr	r3, [sp, #12]
 8002616:	f043 0302 	orr.w	r3, r3, #2
 800261a:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800261c:	9b02      	ldr	r3, [sp, #8]
 800261e:	f013 0f08 	tst.w	r3, #8
 8002622:	d010      	beq.n	8002646 <HAL_HCD_IRQHandler+0x152>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002624:	9b03      	ldr	r3, [sp, #12]
 8002626:	f043 0308 	orr.w	r3, r3, #8
 800262a:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800262c:	9b02      	ldr	r3, [sp, #8]
 800262e:	f013 0f04 	tst.w	r3, #4
 8002632:	d029      	beq.n	8002688 <HAL_HCD_IRQHandler+0x194>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002634:	69a3      	ldr	r3, [r4, #24]
 8002636:	2b02      	cmp	r3, #2
 8002638:	d015      	beq.n	8002666 <HAL_HCD_IRQHandler+0x172>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800263a:	68e3      	ldr	r3, [r4, #12]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d01e      	beq.n	800267e <HAL_HCD_IRQHandler+0x18a>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002640:	4620      	mov	r0, r4
 8002642:	f004 ff30 	bl	80074a6 <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002646:	9b02      	ldr	r3, [sp, #8]
 8002648:	f013 0f20 	tst.w	r3, #32
 800264c:	d003      	beq.n	8002656 <HAL_HCD_IRQHandler+0x162>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800264e:	9b03      	ldr	r3, [sp, #12]
 8002650:	f043 0320 	orr.w	r3, r3, #32
 8002654:	9303      	str	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002656:	9b03      	ldr	r3, [sp, #12]
 8002658:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
}
 800265c:	e798      	b.n	8002590 <HAL_HCD_IRQHandler+0x9c>
      HAL_HCD_Connect_Callback(hhcd);
 800265e:	4620      	mov	r0, r4
 8002660:	f004 ff14 	bl	800748c <HAL_HCD_Connect_Callback>
 8002664:	e7d6      	b.n	8002614 <HAL_HCD_IRQHandler+0x120>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002666:	9b02      	ldr	r3, [sp, #8]
 8002668:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800266c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002670:	bf0c      	ite	eq
 8002672:	2102      	moveq	r1, #2
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002674:	2101      	movne	r1, #1
 8002676:	6820      	ldr	r0, [r4, #0]
 8002678:	f002 fa94 	bl	8004ba4 <USB_InitFSLSPClkSel>
 800267c:	e7e0      	b.n	8002640 <HAL_HCD_IRQHandler+0x14c>
          USBx_HOST->HFIR = 60000U;
 800267e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002682:	f8c6 2404 	str.w	r2, [r6, #1028]	; 0x404
 8002686:	e7db      	b.n	8002640 <HAL_HCD_IRQHandler+0x14c>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002688:	4620      	mov	r0, r4
 800268a:	f004 ff12 	bl	80074b2 <HAL_HCD_PortDisabled_Callback>
 800268e:	e7da      	b.n	8002646 <HAL_HCD_IRQHandler+0x152>
      HAL_HCD_SOF_Callback(hhcd);
 8002690:	4620      	mov	r0, r4
 8002692:	f004 fef5 	bl	8007480 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002696:	6823      	ldr	r3, [r4, #0]
 8002698:	2208      	movs	r2, #8
 800269a:	615a      	str	r2, [r3, #20]
 800269c:	e77e      	b.n	800259c <HAL_HCD_IRQHandler+0xa8>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800269e:	6822      	ldr	r2, [r4, #0]
 80026a0:	6993      	ldr	r3, [r2, #24]
 80026a2:	f023 0310 	bic.w	r3, r3, #16
 80026a6:	6193      	str	r3, [r2, #24]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026a8:	6827      	ldr	r7, [r4, #0]
  GrxstspReg = hhcd->Instance->GRXSTSP;
 80026aa:	6a3e      	ldr	r6, [r7, #32]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80026ac:	f3c6 4243 	ubfx	r2, r6, #17, #4
  switch (pktsts)
 80026b0:	2a02      	cmp	r2, #2
 80026b2:	d005      	beq.n	80026c0 <HAL_HCD_IRQHandler+0x1cc>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026b4:	6822      	ldr	r2, [r4, #0]
 80026b6:	6993      	ldr	r3, [r2, #24]
 80026b8:	f043 0310 	orr.w	r3, r3, #16
 80026bc:	6193      	str	r3, [r2, #24]
 80026be:	e773      	b.n	80025a8 <HAL_HCD_IRQHandler+0xb4>
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026c0:	f3c6 180a 	ubfx	r8, r6, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80026c4:	f1b8 0f00 	cmp.w	r8, #0
 80026c8:	d0f4      	beq.n	80026b4 <HAL_HCD_IRQHandler+0x1c0>
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80026ca:	f006 060f 	and.w	r6, r6, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80026ce:	232c      	movs	r3, #44	; 0x2c
 80026d0:	fb03 4306 	mla	r3, r3, r6, r4
 80026d4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80026d6:	2900      	cmp	r1, #0
 80026d8:	d0ec      	beq.n	80026b4 <HAL_HCD_IRQHandler+0x1c0>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80026da:	232c      	movs	r3, #44	; 0x2c
 80026dc:	fb03 4306 	mla	r3, r3, r6, r4
 80026e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026e2:	4442      	add	r2, r8
 80026e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d906      	bls.n	80026f8 <HAL_HCD_IRQHandler+0x204>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026ea:	232c      	movs	r3, #44	; 0x2c
 80026ec:	fb03 4306 	mla	r3, r3, r6, r4
 80026f0:	2204      	movs	r2, #4
 80026f2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80026f6:	e7dd      	b.n	80026b4 <HAL_HCD_IRQHandler+0x1c0>
          (void)USB_ReadPacket(hhcd->Instance,
 80026f8:	4642      	mov	r2, r8
 80026fa:	4638      	mov	r0, r7
 80026fc:	f002 f9af 	bl	8004a5e <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002700:	222c      	movs	r2, #44	; 0x2c
 8002702:	fb02 4206 	mla	r2, r2, r6, r4
 8002706:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8002708:	4443      	add	r3, r8
 800270a:	6453      	str	r3, [r2, #68]	; 0x44
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800270c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800270e:	4443      	add	r3, r8
 8002710:	6513      	str	r3, [r2, #80]	; 0x50
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002712:	0170      	lsls	r0, r6, #5
 8002714:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8002718:	eb03 1146 	add.w	r1, r3, r6, lsl #5
 800271c:	6909      	ldr	r1, [r1, #16]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800271e:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8002722:	4590      	cmp	r8, r2
 8002724:	d1c6      	bne.n	80026b4 <HAL_HCD_IRQHandler+0x1c0>
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002726:	f3c1 41c9 	ubfx	r1, r1, #19, #10
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800272a:	2900      	cmp	r1, #0
 800272c:	d0c2      	beq.n	80026b4 <HAL_HCD_IRQHandler+0x1c0>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800272e:	58c2      	ldr	r2, [r0, r3]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002730:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002734:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002738:	50c2      	str	r2, [r0, r3]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800273a:	232c      	movs	r3, #44	; 0x2c
 800273c:	fb03 4306 	mla	r3, r3, r6, r4
 8002740:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8002744:	f082 0201 	eor.w	r2, r2, #1
 8002748:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800274c:	e7b2      	b.n	80026b4 <HAL_HCD_IRQHandler+0x1c0>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800274e:	2304      	movs	r3, #4
 8002750:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002752:	fb0b 4308 	mla	r3, fp, r8, r4
 8002756:	2206      	movs	r2, #6
 8002758:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800275c:	4641      	mov	r1, r8
 800275e:	6820      	ldr	r0, [r4, #0]
 8002760:	f002 fb47 	bl	8004df2 <USB_HC_Halt>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f413 7f00 	tst.w	r3, #512	; 0x200
 800276a:	d16e      	bne.n	800284a <HAL_HCD_IRQHandler+0x356>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	f013 0f01 	tst.w	r3, #1
 8002772:	f000 80c2 	beq.w	80028fa <HAL_HCD_IRQHandler+0x406>
    if (hhcd->Init.dma_enable != 0U)
 8002776:	6923      	ldr	r3, [r4, #16]
 8002778:	b13b      	cbz	r3, 800278a <HAL_HCD_IRQHandler+0x296>
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800277a:	693a      	ldr	r2, [r7, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800277c:	fb0b 4108 	mla	r1, fp, r8, r4
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002780:	f3c2 0212 	ubfx	r2, r2, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002784:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 8002786:	1a9b      	subs	r3, r3, r2
 8002788:	650b      	str	r3, [r1, #80]	; 0x50
    hhcd->hc[ch_num].state = HC_XFRC;
 800278a:	fb0b 4308 	mla	r3, fp, r8, r4
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002794:	2100      	movs	r1, #0
 8002796:	65d9      	str	r1, [r3, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002798:	60ba      	str	r2, [r7, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800279a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800279e:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 80027a2:	f000 8085 	beq.w	80028b0 <HAL_HCD_IRQHandler+0x3bc>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	f040 8088 	bne.w	80028bc <HAL_HCD_IRQHandler+0x3c8>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80027ac:	9a01      	ldr	r2, [sp, #4]
 80027ae:	f85a 3002 	ldr.w	r3, [sl, r2]
 80027b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027b6:	f84a 3002 	str.w	r3, [sl, r2]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80027ba:	fb0b 4308 	mla	r3, fp, r8, r4
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027c4:	4641      	mov	r1, r8
 80027c6:	4620      	mov	r0, r4
 80027c8:	f004 fe6c 	bl	80074a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80027cc:	e076      	b.n	80028bc <HAL_HCD_IRQHandler+0x3c8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80027ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027d2:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80027d4:	fb0b 4308 	mla	r3, fp, r8, r4
 80027d8:	2207      	movs	r2, #7
 80027da:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027de:	4641      	mov	r1, r8
 80027e0:	6820      	ldr	r0, [r4, #0]
 80027e2:	f002 fb06 	bl	8004df2 <USB_HC_Halt>
 80027e6:	e7bd      	b.n	8002764 <HAL_HCD_IRQHandler+0x270>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	f013 0f08 	tst.w	r3, #8
 80027ee:	d113      	bne.n	8002818 <HAL_HCD_IRQHandler+0x324>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80027f6:	d11b      	bne.n	8002830 <HAL_HCD_IRQHandler+0x33c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80027fe:	d0b1      	beq.n	8002764 <HAL_HCD_IRQHandler+0x270>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002800:	2380      	movs	r3, #128	; 0x80
 8002802:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002804:	fb0b 4308 	mla	r3, fp, r8, r4
 8002808:	2206      	movs	r2, #6
 800280a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800280e:	4641      	mov	r1, r8
 8002810:	6820      	ldr	r0, [r4, #0]
 8002812:	f002 faee 	bl	8004df2 <USB_HC_Halt>
 8002816:	e7a5      	b.n	8002764 <HAL_HCD_IRQHandler+0x270>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002818:	2308      	movs	r3, #8
 800281a:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800281c:	fb0b 4308 	mla	r3, fp, r8, r4
 8002820:	2205      	movs	r2, #5
 8002822:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002826:	4641      	mov	r1, r8
 8002828:	6820      	ldr	r0, [r4, #0]
 800282a:	f002 fae2 	bl	8004df2 <USB_HC_Halt>
 800282e:	e799      	b.n	8002764 <HAL_HCD_IRQHandler+0x270>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002834:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002836:	fb0b 4308 	mla	r3, fp, r8, r4
 800283a:	2208      	movs	r2, #8
 800283c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002840:	4641      	mov	r1, r8
 8002842:	6820      	ldr	r0, [r4, #0]
 8002844:	f002 fad5 	bl	8004df2 <USB_HC_Halt>
 8002848:	e78c      	b.n	8002764 <HAL_HCD_IRQHandler+0x270>
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800284a:	4641      	mov	r1, r8
 800284c:	6820      	ldr	r0, [r4, #0]
 800284e:	f002 fad0 	bl	8004df2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002852:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002856:	60bb      	str	r3, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002858:	3601      	adds	r6, #1
 800285a:	3520      	adds	r5, #32
 800285c:	68a3      	ldr	r3, [r4, #8]
 800285e:	42b3      	cmp	r3, r6
 8002860:	f240 8222 	bls.w	8002ca8 <HAL_HCD_IRQHandler+0x7b4>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002864:	f006 030f 	and.w	r3, r6, #15
 8002868:	fa29 f303 	lsr.w	r3, r9, r3
 800286c:	f013 0f01 	tst.w	r3, #1
 8002870:	d0f2      	beq.n	8002858 <HAL_HCD_IRQHandler+0x364>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002872:	682b      	ldr	r3, [r5, #0]
 8002874:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002878:	f000 80ca 	beq.w	8002a10 <HAL_HCD_IRQHandler+0x51c>
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800287c:	fa5f f886 	uxtb.w	r8, r6
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002880:	6823      	ldr	r3, [r4, #0]
 8002882:	f503 6aa0 	add.w	sl, r3, #1280	; 0x500
 8002886:	ea4f 1348 	mov.w	r3, r8, lsl #5
 800288a:	9301      	str	r3, [sp, #4]
 800288c:	eb0a 1748 	add.w	r7, sl, r8, lsl #5
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	f013 0f04 	tst.w	r3, #4
 8002896:	f47f af5a 	bne.w	800274e <HAL_HCD_IRQHandler+0x25a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	f413 7f80 	tst.w	r3, #256	; 0x100
 80028a0:	d195      	bne.n	80027ce <HAL_HCD_IRQHandler+0x2da>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	f013 0f20 	tst.w	r3, #32
 80028a8:	d09e      	beq.n	80027e8 <HAL_HCD_IRQHandler+0x2f4>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80028aa:	2320      	movs	r3, #32
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	e759      	b.n	8002764 <HAL_HCD_IRQHandler+0x270>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028b0:	4641      	mov	r1, r8
 80028b2:	6820      	ldr	r0, [r4, #0]
 80028b4:	f002 fa9d 	bl	8004df2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028b8:	2310      	movs	r3, #16
 80028ba:	60bb      	str	r3, [r7, #8]
    if (hhcd->Init.dma_enable == 1U)
 80028bc:	6923      	ldr	r3, [r4, #16]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d008      	beq.n	80028d4 <HAL_HCD_IRQHandler+0x3e0>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80028c2:	fb0b 4808 	mla	r8, fp, r8, r4
 80028c6:	f898 3054 	ldrb.w	r3, [r8, #84]	; 0x54
 80028ca:	f083 0301 	eor.w	r3, r3, #1
 80028ce:	f888 3054 	strb.w	r3, [r8, #84]	; 0x54
 80028d2:	e7c1      	b.n	8002858 <HAL_HCD_IRQHandler+0x364>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80028d4:	fb0b 4308 	mla	r3, fp, r8, r4
 80028d8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80028dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028de:	fbb3 f3f2 	udiv	r3, r3, r2
 80028e2:	f013 0f01 	tst.w	r3, #1
 80028e6:	d0b7      	beq.n	8002858 <HAL_HCD_IRQHandler+0x364>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80028e8:	fb0b 4808 	mla	r8, fp, r8, r4
 80028ec:	f898 3054 	ldrb.w	r3, [r8, #84]	; 0x54
 80028f0:	f083 0301 	eor.w	r3, r3, #1
 80028f4:	f888 3054 	strb.w	r3, [r8, #84]	; 0x54
 80028f8:	e7ae      	b.n	8002858 <HAL_HCD_IRQHandler+0x364>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	f013 0f02 	tst.w	r3, #2
 8002900:	d05c      	beq.n	80029bc <HAL_HCD_IRQHandler+0x4c8>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002902:	fb0b 4308 	mla	r3, fp, r8, r4
 8002906:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800290a:	2b01      	cmp	r3, #1
 800290c:	d012      	beq.n	8002934 <HAL_HCD_IRQHandler+0x440>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800290e:	2b05      	cmp	r3, #5
 8002910:	d020      	beq.n	8002954 <HAL_HCD_IRQHandler+0x460>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002912:	2b06      	cmp	r3, #6
 8002914:	d024      	beq.n	8002960 <HAL_HCD_IRQHandler+0x46c>
 8002916:	2b08      	cmp	r3, #8
 8002918:	d022      	beq.n	8002960 <HAL_HCD_IRQHandler+0x46c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800291a:	2b03      	cmp	r3, #3
 800291c:	d03e      	beq.n	800299c <HAL_HCD_IRQHandler+0x4a8>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800291e:	2b07      	cmp	r3, #7
 8002920:	d10d      	bne.n	800293e <HAL_HCD_IRQHandler+0x44a>
      hhcd->hc[ch_num].ErrCnt++;
 8002922:	fb0b 4308 	mla	r3, fp, r8, r4
 8002926:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002928:	3201      	adds	r2, #1
 800292a:	65da      	str	r2, [r3, #92]	; 0x5c
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800292c:	2204      	movs	r2, #4
 800292e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8002932:	e004      	b.n	800293e <HAL_HCD_IRQHandler+0x44a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002934:	fb0b 4308 	mla	r3, fp, r8, r4
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800293e:	2302      	movs	r3, #2
 8002940:	60bb      	str	r3, [r7, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002942:	fb0b 4308 	mla	r3, fp, r8, r4
 8002946:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800294a:	4641      	mov	r1, r8
 800294c:	4620      	mov	r0, r4
 800294e:	f004 fda9 	bl	80074a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002952:	e781      	b.n	8002858 <HAL_HCD_IRQHandler+0x364>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002954:	fb0b 4308 	mla	r3, fp, r8, r4
 8002958:	2205      	movs	r2, #5
 800295a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800295e:	e7ee      	b.n	800293e <HAL_HCD_IRQHandler+0x44a>
      hhcd->hc[ch_num].ErrCnt++;
 8002960:	fb0b 4208 	mla	r2, fp, r8, r4
 8002964:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8002966:	3301      	adds	r3, #1
 8002968:	65d3      	str	r3, [r2, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800296a:	2b02      	cmp	r3, #2
 800296c:	d906      	bls.n	800297c <HAL_HCD_IRQHandler+0x488>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800296e:	4613      	mov	r3, r2
 8002970:	2200      	movs	r2, #0
 8002972:	65da      	str	r2, [r3, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002974:	2204      	movs	r2, #4
 8002976:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800297a:	e7e0      	b.n	800293e <HAL_HCD_IRQHandler+0x44a>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800297c:	fb0b 4308 	mla	r3, fp, r8, r4
 8002980:	f04f 0202 	mov.w	r2, #2
 8002984:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002988:	9a01      	ldr	r2, [sp, #4]
 800298a:	f85a 3002 	ldr.w	r3, [sl, r2]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800298e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002992:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002996:	f84a 3002 	str.w	r3, [sl, r2]
 800299a:	e7d0      	b.n	800293e <HAL_HCD_IRQHandler+0x44a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800299c:	fb0b 4308 	mla	r3, fp, r8, r4
 80029a0:	f04f 0202 	mov.w	r2, #2
 80029a4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029a8:	9a01      	ldr	r2, [sp, #4]
 80029aa:	f85a 3002 	ldr.w	r3, [sl, r2]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029b6:	f84a 3002 	str.w	r3, [sl, r2]
 80029ba:	e7c0      	b.n	800293e <HAL_HCD_IRQHandler+0x44a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	f013 0f10 	tst.w	r3, #16
 80029c2:	f43f af49 	beq.w	8002858 <HAL_HCD_IRQHandler+0x364>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80029c6:	fb0b 4308 	mla	r3, fp, r8, r4
 80029ca:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029ce:	2b03      	cmp	r3, #3
 80029d0:	d00b      	beq.n	80029ea <HAL_HCD_IRQHandler+0x4f6>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80029d2:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80029d6:	d105      	bne.n	80029e4 <HAL_HCD_IRQHandler+0x4f0>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80029d8:	fb0b 4308 	mla	r3, fp, r8, r4
 80029dc:	2200      	movs	r2, #0
 80029de:	65da      	str	r2, [r3, #92]	; 0x5c
      if (hhcd->Init.dma_enable == 0U)
 80029e0:	6923      	ldr	r3, [r4, #16]
 80029e2:	b15b      	cbz	r3, 80029fc <HAL_HCD_IRQHandler+0x508>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029e4:	2310      	movs	r3, #16
 80029e6:	60bb      	str	r3, [r7, #8]
 80029e8:	e736      	b.n	8002858 <HAL_HCD_IRQHandler+0x364>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80029ea:	fb0b 4308 	mla	r3, fp, r8, r4
 80029ee:	2200      	movs	r2, #0
 80029f0:	65da      	str	r2, [r3, #92]	; 0x5c
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029f2:	4641      	mov	r1, r8
 80029f4:	6820      	ldr	r0, [r4, #0]
 80029f6:	f002 f9fc 	bl	8004df2 <USB_HC_Halt>
 80029fa:	e7f3      	b.n	80029e4 <HAL_HCD_IRQHandler+0x4f0>
        hhcd->hc[ch_num].state = HC_NAK;
 80029fc:	fb0b 4308 	mla	r3, fp, r8, r4
 8002a00:	2203      	movs	r2, #3
 8002a02:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a06:	4641      	mov	r1, r8
 8002a08:	6820      	ldr	r0, [r4, #0]
 8002a0a:	f002 f9f2 	bl	8004df2 <USB_HC_Halt>
 8002a0e:	e7e9      	b.n	80029e4 <HAL_HCD_IRQHandler+0x4f0>
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002a10:	b2f1      	uxtb	r1, r6
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a12:	6820      	ldr	r0, [r4, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002a14:	f500 63a0 	add.w	r3, r0, #1280	; 0x500
 8002a18:	ea4f 1c41 	mov.w	ip, r1, lsl #5
 8002a1c:	eb03 1741 	add.w	r7, r3, r1, lsl #5
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	f012 0f04 	tst.w	r2, #4
 8002a26:	d11a      	bne.n	8002a5e <HAL_HCD_IRQHandler+0x56a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	f012 0f20 	tst.w	r2, #32
 8002a2e:	d021      	beq.n	8002a74 <HAL_HCD_IRQHandler+0x580>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002a30:	2320      	movs	r3, #32
 8002a32:	60bb      	str	r3, [r7, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002a34:	fb0b 4301 	mla	r3, fp, r1, r4
 8002a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	f47f af0b 	bne.w	8002858 <HAL_HCD_IRQHandler+0x364>
      hhcd->hc[ch_num].do_ping = 0U;
 8002a42:	fb0b 4301 	mla	r3, fp, r1, r4
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a4e:	f04f 0202 	mov.w	r2, #2
 8002a52:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a56:	6820      	ldr	r0, [r4, #0]
 8002a58:	f002 f9cb 	bl	8004df2 <USB_HC_Halt>
 8002a5c:	e6fc      	b.n	8002858 <HAL_HCD_IRQHandler+0x364>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002a5e:	2304      	movs	r3, #4
 8002a60:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a62:	fb0b 4301 	mla	r3, fp, r1, r4
 8002a66:	2206      	movs	r2, #6
 8002a68:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a6c:	6820      	ldr	r0, [r4, #0]
 8002a6e:	f002 f9c0 	bl	8004df2 <USB_HC_Halt>
 8002a72:	e6f1      	b.n	8002858 <HAL_HCD_IRQHandler+0x364>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002a7a:	d11c      	bne.n	8002ab6 <HAL_HCD_IRQHandler+0x5c2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	f012 0f01 	tst.w	r2, #1
 8002a82:	d01f      	beq.n	8002ac4 <HAL_HCD_IRQHandler+0x5d0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a84:	fb0b 4301 	mla	r3, fp, r1, r4
 8002a88:	2200      	movs	r2, #0
 8002a8a:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002a92:	d006      	beq.n	8002aa2 <HAL_HCD_IRQHandler+0x5ae>
      hhcd->hc[ch_num].do_ping = 1U;
 8002a94:	fb0b 4301 	mla	r3, fp, r1, r4
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002a9e:	2340      	movs	r3, #64	; 0x40
 8002aa0:	60bb      	str	r3, [r7, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002aa6:	fb0b 4201 	mla	r2, fp, r1, r4
 8002aaa:	f882 3061 	strb.w	r3, [r2, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aae:	6820      	ldr	r0, [r4, #0]
 8002ab0:	f002 f99f 	bl	8004df2 <USB_HC_Halt>
 8002ab4:	e6d0      	b.n	8002858 <HAL_HCD_IRQHandler+0x364>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002ab6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002aba:	60bb      	str	r3, [r7, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002abc:	6820      	ldr	r0, [r4, #0]
 8002abe:	f002 f998 	bl	8004df2 <USB_HC_Halt>
 8002ac2:	e6c9      	b.n	8002858 <HAL_HCD_IRQHandler+0x364>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002ac4:	68ba      	ldr	r2, [r7, #8]
 8002ac6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002aca:	d120      	bne.n	8002b0e <HAL_HCD_IRQHandler+0x61a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	f012 0f08 	tst.w	r2, #8
 8002ad2:	d12b      	bne.n	8002b2c <HAL_HCD_IRQHandler+0x638>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	f012 0f10 	tst.w	r2, #16
 8002ada:	d032      	beq.n	8002b42 <HAL_HCD_IRQHandler+0x64e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002adc:	fb0b 4301 	mla	r3, fp, r1, r4
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	65da      	str	r2, [r3, #92]	; 0x5c
    hhcd->hc[ch_num].state = HC_NAK;
 8002ae4:	2203      	movs	r2, #3
 8002ae6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aee:	b94b      	cbnz	r3, 8002b04 <HAL_HCD_IRQHandler+0x610>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002af0:	fb0b 4301 	mla	r3, fp, r1, r4
 8002af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002af8:	b923      	cbnz	r3, 8002b04 <HAL_HCD_IRQHandler+0x610>
        hhcd->hc[ch_num].do_ping = 1U;
 8002afa:	fb0b 4301 	mla	r3, fp, r1, r4
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b04:	f002 f975 	bl	8004df2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b08:	2310      	movs	r3, #16
 8002b0a:	60bb      	str	r3, [r7, #8]
 8002b0c:	e6a4      	b.n	8002858 <HAL_HCD_IRQHandler+0x364>
    hhcd->hc[ch_num].state = HC_NYET;
 8002b0e:	fb0b 4301 	mla	r3, fp, r1, r4
 8002b12:	2204      	movs	r2, #4
 8002b14:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    hhcd->hc[ch_num].do_ping = 1U;
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b1e:	2200      	movs	r2, #0
 8002b20:	65da      	str	r2, [r3, #92]	; 0x5c
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b22:	f002 f966 	bl	8004df2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002b26:	2340      	movs	r3, #64	; 0x40
 8002b28:	60bb      	str	r3, [r7, #8]
 8002b2a:	e695      	b.n	8002858 <HAL_HCD_IRQHandler+0x364>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b2c:	2308      	movs	r3, #8
 8002b2e:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002b30:	fb0b 4301 	mla	r3, fp, r1, r4
 8002b34:	2205      	movs	r2, #5
 8002b36:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b3a:	6820      	ldr	r0, [r4, #0]
 8002b3c:	f002 f959 	bl	8004df2 <USB_HC_Halt>
 8002b40:	e68a      	b.n	8002858 <HAL_HCD_IRQHandler+0x364>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002b48:	d023      	beq.n	8002b92 <HAL_HCD_IRQHandler+0x69e>
    if (hhcd->Init.dma_enable == 0U)
 8002b4a:	6923      	ldr	r3, [r4, #16]
 8002b4c:	b17b      	cbz	r3, 8002b6e <HAL_HCD_IRQHandler+0x67a>
      hhcd->hc[ch_num].ErrCnt++;
 8002b4e:	fb0b 4201 	mla	r2, fp, r1, r4
 8002b52:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8002b54:	3301      	adds	r3, #1
 8002b56:	65d3      	str	r3, [r2, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d810      	bhi.n	8002b7e <HAL_HCD_IRQHandler+0x68a>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b5c:	fb0b 4101 	mla	r1, fp, r1, r4
 8002b60:	f04f 0302 	mov.w	r3, #2
 8002b64:	f881 3060 	strb.w	r3, [r1, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b68:	2380      	movs	r3, #128	; 0x80
 8002b6a:	60bb      	str	r3, [r7, #8]
 8002b6c:	e674      	b.n	8002858 <HAL_HCD_IRQHandler+0x364>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002b6e:	fb0b 4301 	mla	r3, fp, r1, r4
 8002b72:	2206      	movs	r2, #6
 8002b74:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b78:	f002 f93b 	bl	8004df2 <USB_HC_Halt>
 8002b7c:	e7f4      	b.n	8002b68 <HAL_HCD_IRQHandler+0x674>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b7e:	4613      	mov	r3, r2
 8002b80:	2200      	movs	r2, #0
 8002b82:	65da      	str	r2, [r3, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b84:	2204      	movs	r2, #4
 8002b86:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	f004 fc8a 	bl	80074a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b90:	e7ea      	b.n	8002b68 <HAL_HCD_IRQHandler+0x674>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002b98:	d121      	bne.n	8002bde <HAL_HCD_IRQHandler+0x6ea>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	f012 0f02 	tst.w	r2, #2
 8002ba0:	f43f ae5a 	beq.w	8002858 <HAL_HCD_IRQHandler+0x364>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ba4:	fb0b 4201 	mla	r2, fp, r1, r4
 8002ba8:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
 8002bac:	2a01      	cmp	r2, #1
 8002bae:	d021      	beq.n	8002bf4 <HAL_HCD_IRQHandler+0x700>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002bb0:	2a03      	cmp	r2, #3
 8002bb2:	d04e      	beq.n	8002c52 <HAL_HCD_IRQHandler+0x75e>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002bb4:	2a04      	cmp	r2, #4
 8002bb6:	d05c      	beq.n	8002c72 <HAL_HCD_IRQHandler+0x77e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002bb8:	2a05      	cmp	r2, #5
 8002bba:	d061      	beq.n	8002c80 <HAL_HCD_IRQHandler+0x78c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bbc:	2a06      	cmp	r2, #6
 8002bbe:	d001      	beq.n	8002bc4 <HAL_HCD_IRQHandler+0x6d0>
 8002bc0:	2a08      	cmp	r2, #8
 8002bc2:	d14c      	bne.n	8002c5e <HAL_HCD_IRQHandler+0x76a>
      hhcd->hc[ch_num].ErrCnt++;
 8002bc4:	fb0b 4001 	mla	r0, fp, r1, r4
 8002bc8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002bca:	3201      	adds	r2, #1
 8002bcc:	65c2      	str	r2, [r0, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002bce:	2a02      	cmp	r2, #2
 8002bd0:	d95b      	bls.n	8002c8a <HAL_HCD_IRQHandler+0x796>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	65c2      	str	r2, [r0, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bd6:	2204      	movs	r2, #4
 8002bd8:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
 8002bdc:	e03f      	b.n	8002c5e <HAL_HCD_IRQHandler+0x76a>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002bde:	fb0b 4301 	mla	r3, fp, r1, r4
 8002be2:	2208      	movs	r2, #8
 8002be4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002be8:	f002 f903 	bl	8004df2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002bec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bf0:	60bb      	str	r3, [r7, #8]
 8002bf2:	e631      	b.n	8002858 <HAL_HCD_IRQHandler+0x364>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002bf4:	fb0b 4301 	mla	r3, fp, r1, r4
 8002bf8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002bfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c00:	3b02      	subs	r3, #2
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d82a      	bhi.n	8002c5e <HAL_HCD_IRQHandler+0x76a>
        if (hhcd->Init.dma_enable == 0U)
 8002c08:	6923      	ldr	r3, [r4, #16]
 8002c0a:	b943      	cbnz	r3, 8002c1e <HAL_HCD_IRQHandler+0x72a>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c0c:	fb0b 4201 	mla	r2, fp, r1, r4
 8002c10:	f892 3055 	ldrb.w	r3, [r2, #85]	; 0x55
 8002c14:	f083 0301 	eor.w	r3, r3, #1
 8002c18:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002c1c:	e01f      	b.n	8002c5e <HAL_HCD_IRQHandler+0x76a>
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d11d      	bne.n	8002c5e <HAL_HCD_IRQHandler+0x76a>
 8002c22:	fb0b 4301 	mla	r3, fp, r1, r4
 8002c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c28:	b1cb      	cbz	r3, 8002c5e <HAL_HCD_IRQHandler+0x76a>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002c2a:	fb0b 4201 	mla	r2, fp, r1, r4
 8002c2e:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8002c32:	3b01      	subs	r3, #1
 8002c34:	4413      	add	r3, r2
 8002c36:	fbb3 f3f2 	udiv	r3, r3, r2
          if ((num_packets & 1U) != 0U)
 8002c3a:	f013 0f01 	tst.w	r3, #1
 8002c3e:	d00e      	beq.n	8002c5e <HAL_HCD_IRQHandler+0x76a>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c40:	fb0b 4201 	mla	r2, fp, r1, r4
 8002c44:	f892 3055 	ldrb.w	r3, [r2, #85]	; 0x55
 8002c48:	f083 0301 	eor.w	r3, r3, #1
 8002c4c:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
 8002c50:	e005      	b.n	8002c5e <HAL_HCD_IRQHandler+0x76a>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c52:	fb0b 4301 	mla	r3, fp, r1, r4
 8002c56:	f04f 0202 	mov.w	r2, #2
 8002c5a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c5e:	2302      	movs	r3, #2
 8002c60:	60bb      	str	r3, [r7, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c62:	fb0b 4301 	mla	r3, fp, r1, r4
 8002c66:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	f004 fc1a 	bl	80074a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c70:	e5f2      	b.n	8002858 <HAL_HCD_IRQHandler+0x364>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c72:	fb0b 4301 	mla	r3, fp, r1, r4
 8002c76:	f04f 0202 	mov.w	r2, #2
 8002c7a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8002c7e:	e7ee      	b.n	8002c5e <HAL_HCD_IRQHandler+0x76a>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c80:	fb0b 4301 	mla	r3, fp, r1, r4
 8002c84:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8002c88:	e7e9      	b.n	8002c5e <HAL_HCD_IRQHandler+0x76a>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c8a:	fb0b 4201 	mla	r2, fp, r1, r4
 8002c8e:	f04f 0002 	mov.w	r0, #2
 8002c92:	f882 0060 	strb.w	r0, [r2, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c96:	f853 200c 	ldr.w	r2, [r3, ip]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c9a:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c9e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ca2:	f843 200c 	str.w	r2, [r3, ip]
 8002ca6:	e7da      	b.n	8002c5e <HAL_HCD_IRQHandler+0x76a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002ca8:	6823      	ldr	r3, [r4, #0]
 8002caa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cae:	615a      	str	r2, [r3, #20]
 8002cb0:	e42a      	b.n	8002508 <HAL_HCD_IRQHandler+0x14>

08002cb2 <HAL_HCD_Start>:
  __HAL_LOCK(hhcd);
 8002cb2:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d00e      	beq.n	8002cd8 <HAL_HCD_Start+0x26>
{
 8002cba:	b510      	push	{r4, lr}
 8002cbc:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	f880 12f8 	strb.w	r1, [r0, #760]	; 0x2f8
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002cc4:	6800      	ldr	r0, [r0, #0]
 8002cc6:	f001 ffaa 	bl	8004c1e <USB_DriveVbus>
  __HAL_HCD_ENABLE(hhcd);
 8002cca:	6820      	ldr	r0, [r4, #0]
 8002ccc:	f001 fe25 	bl	800491a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 8002cd6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8002cd8:	2002      	movs	r0, #2
}
 8002cda:	4770      	bx	lr

08002cdc <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8002cdc:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d00b      	beq.n	8002cfc <HAL_HCD_Stop+0x20>
{
 8002ce4:	b510      	push	{r4, lr}
 8002ce6:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8002ce8:	2301      	movs	r3, #1
 8002cea:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002cee:	6800      	ldr	r0, [r0, #0]
 8002cf0:	f002 f9ab 	bl	800504a <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 8002cfa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8002cfc:	2002      	movs	r0, #2
}
 8002cfe:	4770      	bx	lr

08002d00 <HAL_HCD_ResetPort>:
{
 8002d00:	b508      	push	{r3, lr}
  return (USB_ResetPort(hhcd->Instance));
 8002d02:	6800      	ldr	r0, [r0, #0]
 8002d04:	f001 ff6c 	bl	8004be0 <USB_ResetPort>
}
 8002d08:	bd08      	pop	{r3, pc}

08002d0a <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8002d0a:	232c      	movs	r3, #44	; 0x2c
 8002d0c:	fb03 0001 	mla	r0, r3, r1, r0
}
 8002d10:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
 8002d14:	4770      	bx	lr

08002d16 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8002d16:	232c      	movs	r3, #44	; 0x2c
 8002d18:	fb03 0001 	mla	r0, r3, r1, r0
}
 8002d1c:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8002d1e:	4770      	bx	lr

08002d20 <HAL_HCD_GetCurrentFrame>:
{
 8002d20:	b508      	push	{r3, lr}
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002d22:	6800      	ldr	r0, [r0, #0]
 8002d24:	f001 ffaa 	bl	8004c7c <USB_GetCurrentFrame>
}
 8002d28:	bd08      	pop	{r3, pc}

08002d2a <HAL_HCD_GetCurrentSpeed>:
{
 8002d2a:	b508      	push	{r3, lr}
  return (USB_GetHostSpeed(hhcd->Instance));
 8002d2c:	6800      	ldr	r0, [r0, #0]
 8002d2e:	f001 ff9a 	bl	8004c66 <USB_GetHostSpeed>
}
 8002d32:	bd08      	pop	{r3, pc}

08002d34 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d34:	6803      	ldr	r3, [r0, #0]
 8002d36:	695a      	ldr	r2, [r3, #20]
 8002d38:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002d3c:	d101      	bne.n	8002d42 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8002d3e:	2000      	movs	r0, #0
}
 8002d40:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d46:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d52:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d56:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002d58:	f042 0204 	orr.w	r2, r2, #4
 8002d5c:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8002d5e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8002d62:	2001      	movs	r0, #1
 8002d64:	4770      	bx	lr

08002d66 <I2C_WaitOnFlagUntilTimeout>:
{
 8002d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d6a:	4606      	mov	r6, r0
 8002d6c:	460c      	mov	r4, r1
 8002d6e:	4617      	mov	r7, r2
 8002d70:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d72:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8002d76:	f1b8 0f01 	cmp.w	r8, #1
 8002d7a:	6833      	ldr	r3, [r6, #0]
 8002d7c:	bf0c      	ite	eq
 8002d7e:	695b      	ldreq	r3, [r3, #20]
 8002d80:	699b      	ldrne	r3, [r3, #24]
 8002d82:	ea24 0c03 	bic.w	ip, r4, r3
 8002d86:	fa1f fc8c 	uxth.w	ip, ip
 8002d8a:	fabc fc8c 	clz	ip, ip
 8002d8e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8002d92:	4567      	cmp	r7, ip
 8002d94:	d119      	bne.n	8002dca <I2C_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8002d96:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002d9a:	d0ec      	beq.n	8002d76 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d9c:	f7fe fe2a 	bl	80019f4 <HAL_GetTick>
 8002da0:	9b06      	ldr	r3, [sp, #24]
 8002da2:	1ac0      	subs	r0, r0, r3
 8002da4:	42a8      	cmp	r0, r5
 8002da6:	d801      	bhi.n	8002dac <I2C_WaitOnFlagUntilTimeout+0x46>
 8002da8:	2d00      	cmp	r5, #0
 8002daa:	d1e4      	bne.n	8002d76 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002dac:	2300      	movs	r3, #0
 8002dae:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002db0:	2220      	movs	r2, #32
 8002db2:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002db6:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002dba:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8002dbc:	f042 0220 	orr.w	r2, r2, #32
 8002dc0:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002dc2:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8002dc6:	2001      	movs	r0, #1
 8002dc8:	e000      	b.n	8002dcc <I2C_WaitOnFlagUntilTimeout+0x66>
  return HAL_OK;
 8002dca:	2000      	movs	r0, #0
}
 8002dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002dd4:	4605      	mov	r5, r0
 8002dd6:	460e      	mov	r6, r1
 8002dd8:	4617      	mov	r7, r2
 8002dda:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ddc:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8002de0:	e03b      	b.n	8002e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de8:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dea:	682b      	ldr	r3, [r5, #0]
 8002dec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002df0:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002df2:	2300      	movs	r3, #0
 8002df4:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002df6:	2220      	movs	r2, #32
 8002df8:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dfc:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e00:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002e02:	f042 0204 	orr.w	r2, r2, #4
 8002e06:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002e08:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8002e0c:	2001      	movs	r0, #1
}
 8002e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e12:	f7fe fdef 	bl	80019f4 <HAL_GetTick>
 8002e16:	eba0 0009 	sub.w	r0, r0, r9
 8002e1a:	42b8      	cmp	r0, r7
 8002e1c:	d800      	bhi.n	8002e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x50>
 8002e1e:	b9e7      	cbnz	r7, 8002e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e20:	2300      	movs	r3, #0
 8002e22:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e24:	2220      	movs	r2, #32
 8002e26:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e2a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e2e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002e30:	f042 0220 	orr.w	r2, r2, #32
 8002e34:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002e36:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 8002e3a:	2001      	movs	r0, #1
 8002e3c:	e7e7      	b.n	8002e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e3e:	682b      	ldr	r3, [r5, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	ea26 0303 	bic.w	r3, r6, r3
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	b19b      	cbz	r3, 8002e72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e4a:	682b      	ldr	r3, [r5, #0]
 8002e4c:	695a      	ldr	r2, [r3, #20]
 8002e4e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002e52:	d1c6      	bne.n	8002de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x12>
    if (Timeout != HAL_MAX_DELAY)
 8002e54:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8002e58:	d1db      	bne.n	8002e12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x42>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e5a:	f1b8 0f01 	cmp.w	r8, #1
 8002e5e:	d0ee      	beq.n	8002e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x6e>
 8002e60:	682b      	ldr	r3, [r5, #0]
 8002e62:	699c      	ldr	r4, [r3, #24]
 8002e64:	ea26 0404 	bic.w	r4, r6, r4
 8002e68:	b2a4      	uxth	r4, r4
 8002e6a:	2c00      	cmp	r4, #0
 8002e6c:	d1ed      	bne.n	8002e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x7a>
  return HAL_OK;
 8002e6e:	2000      	movs	r0, #0
 8002e70:	e7cd      	b.n	8002e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>
 8002e72:	2000      	movs	r0, #0
 8002e74:	e7cb      	b.n	8002e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

08002e76 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002e76:	b570      	push	{r4, r5, r6, lr}
 8002e78:	4604      	mov	r4, r0
 8002e7a:	460d      	mov	r5, r1
 8002e7c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e7e:	6823      	ldr	r3, [r4, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002e86:	d11c      	bne.n	8002ec2 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e88:	4620      	mov	r0, r4
 8002e8a:	f7ff ff53 	bl	8002d34 <I2C_IsAcknowledgeFailed>
 8002e8e:	b9d0      	cbnz	r0, 8002ec6 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002e90:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002e94:	d0f3      	beq.n	8002e7e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e96:	f7fe fdad 	bl	80019f4 <HAL_GetTick>
 8002e9a:	1b80      	subs	r0, r0, r6
 8002e9c:	42a8      	cmp	r0, r5
 8002e9e:	d801      	bhi.n	8002ea4 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8002ea0:	2d00      	cmp	r5, #0
 8002ea2:	d1ec      	bne.n	8002e7e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eb2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002eb4:	f042 0220 	orr.w	r2, r2, #32
 8002eb8:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002eba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002ebe:	2001      	movs	r0, #1
 8002ec0:	e000      	b.n	8002ec4 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8002ec2:	2000      	movs	r0, #0
}
 8002ec4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002ec6:	2001      	movs	r0, #1
 8002ec8:	e7fc      	b.n	8002ec4 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
	...

08002ecc <I2C_RequestMemoryWrite>:
{
 8002ecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ed0:	b085      	sub	sp, #20
 8002ed2:	4604      	mov	r4, r0
 8002ed4:	460d      	mov	r5, r1
 8002ed6:	4691      	mov	r9, r2
 8002ed8:	461f      	mov	r7, r3
 8002eda:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8002ede:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ee0:	6803      	ldr	r3, [r0, #0]
 8002ee2:	6819      	ldr	r1, [r3, #0]
 8002ee4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002ee8:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002eea:	9600      	str	r6, [sp, #0]
 8002eec:	4643      	mov	r3, r8
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ef4:	f7ff ff37 	bl	8002d66 <I2C_WaitOnFlagUntilTimeout>
 8002ef8:	b970      	cbnz	r0, 8002f18 <I2C_RequestMemoryWrite+0x4c>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002efa:	6823      	ldr	r3, [r4, #0]
 8002efc:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8002f00:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f02:	4633      	mov	r3, r6
 8002f04:	4642      	mov	r2, r8
 8002f06:	4928      	ldr	r1, [pc, #160]	; (8002fa8 <I2C_RequestMemoryWrite+0xdc>)
 8002f08:	4620      	mov	r0, r4
 8002f0a:	f7ff ff61 	bl	8002dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f0e:	b168      	cbz	r0, 8002f2c <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 8002f10:	2001      	movs	r0, #1
}
 8002f12:	b005      	add	sp, #20
 8002f14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f18:	6823      	ldr	r3, [r4, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002f20:	d040      	beq.n	8002fa4 <I2C_RequestMemoryWrite+0xd8>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f26:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8002f28:	2003      	movs	r0, #3
 8002f2a:	e7f2      	b.n	8002f12 <I2C_RequestMemoryWrite+0x46>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	9303      	str	r3, [sp, #12]
 8002f30:	6823      	ldr	r3, [r4, #0]
 8002f32:	695a      	ldr	r2, [r3, #20]
 8002f34:	9203      	str	r2, [sp, #12]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	9303      	str	r3, [sp, #12]
 8002f3a:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f3c:	4632      	mov	r2, r6
 8002f3e:	4641      	mov	r1, r8
 8002f40:	4620      	mov	r0, r4
 8002f42:	f7ff ff98 	bl	8002e76 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f46:	b930      	cbnz	r0, 8002f56 <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f48:	2f01      	cmp	r7, #1
 8002f4a:	d110      	bne.n	8002f6e <I2C_RequestMemoryWrite+0xa2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f4c:	6823      	ldr	r3, [r4, #0]
 8002f4e:	fa5f f689 	uxtb.w	r6, r9
 8002f52:	611e      	str	r6, [r3, #16]
 8002f54:	e7dd      	b.n	8002f12 <I2C_RequestMemoryWrite+0x46>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f58:	2b04      	cmp	r3, #4
 8002f5a:	d001      	beq.n	8002f60 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 8002f5c:	2001      	movs	r0, #1
 8002f5e:	e7d8      	b.n	8002f12 <I2C_RequestMemoryWrite+0x46>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f60:	6822      	ldr	r2, [r4, #0]
 8002f62:	6813      	ldr	r3, [r2, #0]
 8002f64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f68:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8002f6a:	2001      	movs	r0, #1
 8002f6c:	e7d1      	b.n	8002f12 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f6e:	6823      	ldr	r3, [r4, #0]
 8002f70:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8002f74:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f76:	4632      	mov	r2, r6
 8002f78:	4641      	mov	r1, r8
 8002f7a:	4620      	mov	r0, r4
 8002f7c:	f7ff ff7b 	bl	8002e76 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f80:	b920      	cbnz	r0, 8002f8c <I2C_RequestMemoryWrite+0xc0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f82:	6823      	ldr	r3, [r4, #0]
 8002f84:	fa5f f689 	uxtb.w	r6, r9
 8002f88:	611e      	str	r6, [r3, #16]
 8002f8a:	e7c2      	b.n	8002f12 <I2C_RequestMemoryWrite+0x46>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d001      	beq.n	8002f96 <I2C_RequestMemoryWrite+0xca>
      return HAL_ERROR;
 8002f92:	2001      	movs	r0, #1
 8002f94:	e7bd      	b.n	8002f12 <I2C_RequestMemoryWrite+0x46>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f96:	6822      	ldr	r2, [r4, #0]
 8002f98:	6813      	ldr	r3, [r2, #0]
 8002f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f9e:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8002fa0:	2001      	movs	r0, #1
 8002fa2:	e7b6      	b.n	8002f12 <I2C_RequestMemoryWrite+0x46>
    return HAL_TIMEOUT;
 8002fa4:	2003      	movs	r0, #3
 8002fa6:	e7b4      	b.n	8002f12 <I2C_RequestMemoryWrite+0x46>
 8002fa8:	00010002 	.word	0x00010002

08002fac <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8002fac:	b570      	push	{r4, r5, r6, lr}
 8002fae:	4604      	mov	r4, r0
 8002fb0:	460d      	mov	r5, r1
 8002fb2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fb4:	6823      	ldr	r3, [r4, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	f013 0f04 	tst.w	r3, #4
 8002fbc:	d11c      	bne.n	8002ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	f7ff feb8 	bl	8002d34 <I2C_IsAcknowledgeFailed>
 8002fc4:	b9d0      	cbnz	r0, 8002ffc <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002fc6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002fca:	d0f3      	beq.n	8002fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fcc:	f7fe fd12 	bl	80019f4 <HAL_GetTick>
 8002fd0:	1b80      	subs	r0, r0, r6
 8002fd2:	42a8      	cmp	r0, r5
 8002fd4:	d801      	bhi.n	8002fda <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8002fd6:	2d00      	cmp	r5, #0
 8002fd8:	d1ec      	bne.n	8002fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fe8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002fea:	f042 0220 	orr.w	r2, r2, #32
 8002fee:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002ff0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	e000      	b.n	8002ffa <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8002ff8:	2000      	movs	r0, #0
}
 8002ffa:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	e7fc      	b.n	8002ffa <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08003000 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003000:	2800      	cmp	r0, #0
 8003002:	f000 80b0 	beq.w	8003166 <HAL_I2C_Init+0x166>
{
 8003006:	b570      	push	{r4, r5, r6, lr}
 8003008:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800300a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800300e:	2b00      	cmp	r3, #0
 8003010:	d073      	beq.n	80030fa <HAL_I2C_Init+0xfa>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003012:	2324      	movs	r3, #36	; 0x24
 8003014:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003018:	6822      	ldr	r2, [r4, #0]
 800301a:	6813      	ldr	r3, [r2, #0]
 800301c:	f023 0301 	bic.w	r3, r3, #1
 8003020:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003022:	6822      	ldr	r2, [r4, #0]
 8003024:	6813      	ldr	r3, [r2, #0]
 8003026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800302a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800302c:	6822      	ldr	r2, [r4, #0]
 800302e:	6813      	ldr	r3, [r2, #0]
 8003030:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003034:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003036:	f001 f877 	bl	8004128 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800303a:	6862      	ldr	r2, [r4, #4]
 800303c:	4b4c      	ldr	r3, [pc, #304]	; (8003170 <HAL_I2C_Init+0x170>)
 800303e:	429a      	cmp	r2, r3
 8003040:	d860      	bhi.n	8003104 <HAL_I2C_Init+0x104>
 8003042:	4b4c      	ldr	r3, [pc, #304]	; (8003174 <HAL_I2C_Init+0x174>)
 8003044:	4298      	cmp	r0, r3
 8003046:	f240 8090 	bls.w	800316a <HAL_I2C_Init+0x16a>
  freqrange = I2C_FREQRANGE(pclk1);
 800304a:	494b      	ldr	r1, [pc, #300]	; (8003178 <HAL_I2C_Init+0x178>)
 800304c:	fba1 3100 	umull	r3, r1, r1, r0
 8003050:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003052:	6825      	ldr	r5, [r4, #0]
 8003054:	686a      	ldr	r2, [r5, #4]
 8003056:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800305a:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 800305e:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003060:	6821      	ldr	r1, [r4, #0]
 8003062:	6a0a      	ldr	r2, [r1, #32]
 8003064:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003068:	4d41      	ldr	r5, [pc, #260]	; (8003170 <HAL_I2C_Init+0x170>)
 800306a:	6866      	ldr	r6, [r4, #4]
 800306c:	42ae      	cmp	r6, r5
 800306e:	d84e      	bhi.n	800310e <HAL_I2C_Init+0x10e>
 8003070:	3301      	adds	r3, #1
 8003072:	4313      	orrs	r3, r2
 8003074:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003076:	6821      	ldr	r1, [r4, #0]
 8003078:	69ca      	ldr	r2, [r1, #28]
 800307a:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 800307e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003082:	6865      	ldr	r5, [r4, #4]
 8003084:	4b3a      	ldr	r3, [pc, #232]	; (8003170 <HAL_I2C_Init+0x170>)
 8003086:	429d      	cmp	r5, r3
 8003088:	d84b      	bhi.n	8003122 <HAL_I2C_Init+0x122>
 800308a:	1e43      	subs	r3, r0, #1
 800308c:	006d      	lsls	r5, r5, #1
 800308e:	fbb3 f3f5 	udiv	r3, r3, r5
 8003092:	3301      	adds	r3, #1
 8003094:	f640 70fc 	movw	r0, #4092	; 0xffc
 8003098:	4203      	tst	r3, r0
 800309a:	d05e      	beq.n	800315a <HAL_I2C_Init+0x15a>
 800309c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a0:	4313      	orrs	r3, r2
 80030a2:	61cb      	str	r3, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030a4:	6821      	ldr	r1, [r4, #0]
 80030a6:	680a      	ldr	r2, [r1, #0]
 80030a8:	69e3      	ldr	r3, [r4, #28]
 80030aa:	6a20      	ldr	r0, [r4, #32]
 80030ac:	4303      	orrs	r3, r0
 80030ae:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80030b2:	4313      	orrs	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030b6:	6821      	ldr	r1, [r4, #0]
 80030b8:	688a      	ldr	r2, [r1, #8]
 80030ba:	6923      	ldr	r3, [r4, #16]
 80030bc:	68e0      	ldr	r0, [r4, #12]
 80030be:	4303      	orrs	r3, r0
 80030c0:	f422 4203 	bic.w	r2, r2, #33536	; 0x8300
 80030c4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030c8:	4313      	orrs	r3, r2
 80030ca:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030cc:	6821      	ldr	r1, [r4, #0]
 80030ce:	68ca      	ldr	r2, [r1, #12]
 80030d0:	6963      	ldr	r3, [r4, #20]
 80030d2:	69a0      	ldr	r0, [r4, #24]
 80030d4:	4303      	orrs	r3, r0
 80030d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030da:	4313      	orrs	r3, r2
 80030dc:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80030de:	6822      	ldr	r2, [r4, #0]
 80030e0:	6813      	ldr	r3, [r2, #0]
 80030e2:	f043 0301 	orr.w	r3, r3, #1
 80030e6:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030e8:	2000      	movs	r0, #0
 80030ea:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030ec:	2320      	movs	r3, #32
 80030ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030f2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 80030f8:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80030fa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80030fe:	f7fd feab 	bl	8000e58 <HAL_I2C_MspInit>
 8003102:	e786      	b.n	8003012 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003104:	4b1d      	ldr	r3, [pc, #116]	; (800317c <HAL_I2C_Init+0x17c>)
 8003106:	4298      	cmp	r0, r3
 8003108:	d89f      	bhi.n	800304a <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 800310a:	2001      	movs	r0, #1
 800310c:	e7f4      	b.n	80030f8 <HAL_I2C_Init+0xf8>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800310e:	f44f 7596 	mov.w	r5, #300	; 0x12c
 8003112:	fb05 f303 	mul.w	r3, r5, r3
 8003116:	4d1a      	ldr	r5, [pc, #104]	; (8003180 <HAL_I2C_Init+0x180>)
 8003118:	fba5 5303 	umull	r5, r3, r5, r3
 800311c:	099b      	lsrs	r3, r3, #6
 800311e:	3301      	adds	r3, #1
 8003120:	e7a7      	b.n	8003072 <HAL_I2C_Init+0x72>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003122:	68a3      	ldr	r3, [r4, #8]
 8003124:	b95b      	cbnz	r3, 800313e <HAL_I2C_Init+0x13e>
 8003126:	3801      	subs	r0, #1
 8003128:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800312c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003130:	3301      	adds	r3, #1
 8003132:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003136:	b193      	cbz	r3, 800315e <HAL_I2C_Init+0x15e>
 8003138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800313c:	e7b0      	b.n	80030a0 <HAL_I2C_Init+0xa0>
 800313e:	3801      	subs	r0, #1
 8003140:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8003144:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003148:	fbb0 f3f3 	udiv	r3, r0, r3
 800314c:	3301      	adds	r3, #1
 800314e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003152:	b133      	cbz	r3, 8003162 <HAL_I2C_Init+0x162>
 8003154:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003158:	e7a2      	b.n	80030a0 <HAL_I2C_Init+0xa0>
 800315a:	2304      	movs	r3, #4
 800315c:	e7a0      	b.n	80030a0 <HAL_I2C_Init+0xa0>
 800315e:	2301      	movs	r3, #1
 8003160:	e79e      	b.n	80030a0 <HAL_I2C_Init+0xa0>
 8003162:	2301      	movs	r3, #1
 8003164:	e79c      	b.n	80030a0 <HAL_I2C_Init+0xa0>
    return HAL_ERROR;
 8003166:	2001      	movs	r0, #1
}
 8003168:	4770      	bx	lr
    return HAL_ERROR;
 800316a:	2001      	movs	r0, #1
 800316c:	e7c4      	b.n	80030f8 <HAL_I2C_Init+0xf8>
 800316e:	bf00      	nop
 8003170:	000186a0 	.word	0x000186a0
 8003174:	001e847f 	.word	0x001e847f
 8003178:	431bde83 	.word	0x431bde83
 800317c:	003d08ff 	.word	0x003d08ff
 8003180:	10624dd3 	.word	0x10624dd3

08003184 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8003184:	b1a8      	cbz	r0, 80031b2 <HAL_I2C_DeInit+0x2e>
{
 8003186:	b510      	push	{r4, lr}
 8003188:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 800318a:	2324      	movs	r3, #36	; 0x24
 800318c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003190:	6802      	ldr	r2, [r0, #0]
 8003192:	6813      	ldr	r3, [r2, #0]
 8003194:	f023 0301 	bic.w	r3, r3, #1
 8003198:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800319a:	f7fd fe95 	bl	8000ec8 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800319e:	2000      	movs	r0, #0
 80031a0:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80031a2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031a6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80031a8:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  __HAL_UNLOCK(hi2c);
 80031ac:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80031b0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80031b2:	2001      	movs	r0, #1
}
 80031b4:	4770      	bx	lr
	...

080031b8 <HAL_I2C_Mem_Write>:
{
 80031b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031bc:	b083      	sub	sp, #12
 80031be:	4604      	mov	r4, r0
 80031c0:	460f      	mov	r7, r1
 80031c2:	4690      	mov	r8, r2
 80031c4:	4699      	mov	r9, r3
 80031c6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80031c8:	f7fe fc14 	bl	80019f4 <HAL_GetTick>
 80031cc:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ce:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 80031d2:	b2c0      	uxtb	r0, r0
 80031d4:	2820      	cmp	r0, #32
 80031d6:	d003      	beq.n	80031e0 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 80031d8:	2002      	movs	r0, #2
}
 80031da:	b003      	add	sp, #12
 80031dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031e0:	9500      	str	r5, [sp, #0]
 80031e2:	2319      	movs	r3, #25
 80031e4:	2201      	movs	r2, #1
 80031e6:	494d      	ldr	r1, [pc, #308]	; (800331c <HAL_I2C_Mem_Write+0x164>)
 80031e8:	4620      	mov	r0, r4
 80031ea:	f7ff fdbc 	bl	8002d66 <I2C_WaitOnFlagUntilTimeout>
 80031ee:	2800      	cmp	r0, #0
 80031f0:	f040 808d 	bne.w	800330e <HAL_I2C_Mem_Write+0x156>
    __HAL_LOCK(hi2c);
 80031f4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	f000 808a 	beq.w	8003312 <HAL_I2C_Mem_Write+0x15a>
 80031fe:	2301      	movs	r3, #1
 8003200:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003204:	6823      	ldr	r3, [r4, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	f012 0f01 	tst.w	r2, #1
 800320c:	d103      	bne.n	8003216 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	f042 0201 	orr.w	r2, r2, #1
 8003214:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003216:	6822      	ldr	r2, [r4, #0]
 8003218:	6813      	ldr	r3, [r2, #0]
 800321a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800321e:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003220:	2321      	movs	r3, #33	; 0x21
 8003222:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003226:	2340      	movs	r3, #64	; 0x40
 8003228:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800322c:	2300      	movs	r3, #0
 800322e:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003232:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003234:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8003238:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800323a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800323c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800323e:	4b38      	ldr	r3, [pc, #224]	; (8003320 <HAL_I2C_Mem_Write+0x168>)
 8003240:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003242:	9501      	str	r5, [sp, #4]
 8003244:	9600      	str	r6, [sp, #0]
 8003246:	464b      	mov	r3, r9
 8003248:	4642      	mov	r2, r8
 800324a:	4639      	mov	r1, r7
 800324c:	4620      	mov	r0, r4
 800324e:	f7ff fe3d 	bl	8002ecc <I2C_RequestMemoryWrite>
 8003252:	2800      	cmp	r0, #0
 8003254:	d15f      	bne.n	8003316 <HAL_I2C_Mem_Write+0x15e>
    while (hi2c->XferSize > 0U)
 8003256:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003258:	b9d3      	cbnz	r3, 8003290 <HAL_I2C_Mem_Write+0xd8>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800325a:	462a      	mov	r2, r5
 800325c:	4631      	mov	r1, r6
 800325e:	4620      	mov	r0, r4
 8003260:	f7ff fea4 	bl	8002fac <I2C_WaitOnBTFFlagUntilTimeout>
 8003264:	2800      	cmp	r0, #0
 8003266:	d044      	beq.n	80032f2 <HAL_I2C_Mem_Write+0x13a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003268:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800326a:	2b04      	cmp	r3, #4
 800326c:	d03a      	beq.n	80032e4 <HAL_I2C_Mem_Write+0x12c>
      return HAL_ERROR;
 800326e:	2001      	movs	r0, #1
 8003270:	e7b3      	b.n	80031da <HAL_I2C_Mem_Write+0x22>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003272:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003274:	2b04      	cmp	r3, #4
 8003276:	d001      	beq.n	800327c <HAL_I2C_Mem_Write+0xc4>
        return HAL_ERROR;
 8003278:	2001      	movs	r0, #1
 800327a:	e7ae      	b.n	80031da <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800327c:	6822      	ldr	r2, [r4, #0]
 800327e:	6813      	ldr	r3, [r2, #0]
 8003280:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003284:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8003286:	2001      	movs	r0, #1
 8003288:	e7a7      	b.n	80031da <HAL_I2C_Mem_Write+0x22>
    while (hi2c->XferSize > 0U)
 800328a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0e4      	beq.n	800325a <HAL_I2C_Mem_Write+0xa2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003290:	462a      	mov	r2, r5
 8003292:	4631      	mov	r1, r6
 8003294:	4620      	mov	r0, r4
 8003296:	f7ff fdee 	bl	8002e76 <I2C_WaitOnTXEFlagUntilTimeout>
 800329a:	2800      	cmp	r0, #0
 800329c:	d1e9      	bne.n	8003272 <HAL_I2C_Mem_Write+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800329e:	6823      	ldr	r3, [r4, #0]
 80032a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80032a2:	7812      	ldrb	r2, [r2, #0]
 80032a4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80032a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80032a8:	1c43      	adds	r3, r0, #1
 80032aa:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80032ac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80032b4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80032b6:	3901      	subs	r1, #1
 80032b8:	b289      	uxth	r1, r1
 80032ba:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032bc:	6822      	ldr	r2, [r4, #0]
 80032be:	6951      	ldr	r1, [r2, #20]
 80032c0:	f011 0f04 	tst.w	r1, #4
 80032c4:	d0e1      	beq.n	800328a <HAL_I2C_Mem_Write+0xd2>
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0c7      	beq.n	800325a <HAL_I2C_Mem_Write+0xa2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032ca:	7843      	ldrb	r3, [r0, #1]
 80032cc:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 80032ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032d0:	3301      	adds	r3, #1
 80032d2:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80032d4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80032d6:	3b01      	subs	r3, #1
 80032d8:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80032da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29b      	uxth	r3, r3
 80032e0:	8563      	strh	r3, [r4, #42]	; 0x2a
 80032e2:	e7d2      	b.n	800328a <HAL_I2C_Mem_Write+0xd2>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e4:	6822      	ldr	r2, [r4, #0]
 80032e6:	6813      	ldr	r3, [r2, #0]
 80032e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032ec:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80032ee:	2001      	movs	r0, #1
 80032f0:	e773      	b.n	80031da <HAL_I2C_Mem_Write+0x22>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f2:	6822      	ldr	r2, [r4, #0]
 80032f4:	6813      	ldr	r3, [r2, #0]
 80032f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032fa:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80032fc:	2320      	movs	r3, #32
 80032fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003302:	2300      	movs	r3, #0
 8003304:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8003308:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800330c:	e765      	b.n	80031da <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 800330e:	2002      	movs	r0, #2
 8003310:	e763      	b.n	80031da <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8003312:	2002      	movs	r0, #2
 8003314:	e761      	b.n	80031da <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8003316:	2001      	movs	r0, #1
 8003318:	e75f      	b.n	80031da <HAL_I2C_Mem_Write+0x22>
 800331a:	bf00      	nop
 800331c:	00100002 	.word	0x00100002
 8003320:	ffff0000 	.word	0xffff0000

08003324 <HAL_I2C_GetState>:
  return hi2c->State;
 8003324:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8003328:	4770      	bx	lr
	...

0800332c <HAL_I2S_Init>:
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800332c:	2800      	cmp	r0, #0
 800332e:	f000 80b3 	beq.w	8003498 <HAL_I2S_Init+0x16c>
{
 8003332:	b538      	push	{r3, r4, r5, lr}
 8003334:	4604      	mov	r4, r0
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003336:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800333a:	2b00      	cmp	r3, #0
 800333c:	d038      	beq.n	80033b0 <HAL_I2S_Init+0x84>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800333e:	2202      	movs	r2, #2
 8003340:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003344:	6821      	ldr	r1, [r4, #0]
 8003346:	69cb      	ldr	r3, [r1, #28]
 8003348:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800334c:	f023 030f 	bic.w	r3, r3, #15
 8003350:	61cb      	str	r3, [r1, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003352:	6823      	ldr	r3, [r4, #0]
 8003354:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003356:	6963      	ldr	r3, [r4, #20]
 8003358:	4293      	cmp	r3, r2
 800335a:	d04a      	beq.n	80033f2 <HAL_I2S_Init+0xc6>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800335c:	68e3      	ldr	r3, [r4, #12]
      packetlength = 16U;
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800335e:	2b00      	cmp	r3, #0
 8003360:	bf0c      	ite	eq
 8003362:	2510      	moveq	r5, #16
 8003364:	2520      	movne	r5, #32
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003366:	68a3      	ldr	r3, [r4, #8]
 8003368:	2b20      	cmp	r3, #32
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800336a:	bf98      	it	ls
 800336c:	006d      	lslls	r5, r5, #1
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800336e:	2001      	movs	r0, #1
 8003370:	f000 ffa4 	bl	80042bc <HAL_RCCEx_GetPeriphCLKFreq>
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003374:	6923      	ldr	r3, [r4, #16]
 8003376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800337a:	d020      	beq.n	80033be <HAL_I2S_Init+0x92>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800337c:	fbb0 f0f5 	udiv	r0, r0, r5
 8003380:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003384:	0043      	lsls	r3, r0, #1
 8003386:	6960      	ldr	r0, [r4, #20]
 8003388:	fbb3 f3f0 	udiv	r3, r3, r0
 800338c:	3305      	adds	r3, #5
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800338e:	4a43      	ldr	r2, [pc, #268]	; (800349c <HAL_I2S_Init+0x170>)
 8003390:	fba2 2303 	umull	r2, r3, r2, r3

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003394:	f3c3 02c0 	ubfx	r2, r3, #3, #1

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003398:	ebc2 03d3 	rsb	r3, r2, r3, lsr #3
 800339c:	085b      	lsrs	r3, r3, #1
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800339e:	1e99      	subs	r1, r3, #2
 80033a0:	29fd      	cmp	r1, #253	; 0xfd
 80033a2:	d924      	bls.n	80033ee <HAL_I2S_Init+0xc2>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80033a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80033a6:	f043 0310 	orr.w	r3, r3, #16
 80033aa:	6463      	str	r3, [r4, #68]	; 0x44
    return  HAL_ERROR;
 80033ac:	2001      	movs	r0, #1
 80033ae:	e03f      	b.n	8003430 <HAL_I2S_Init+0x104>
    hi2s->Lock = HAL_UNLOCKED;
 80033b0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80033b4:	4b3a      	ldr	r3, [pc, #232]	; (80034a0 <HAL_I2S_Init+0x174>)
 80033b6:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 80033b8:	f7fd fda4 	bl	8000f04 <HAL_I2S_MspInit>
 80033bc:	e7bf      	b.n	800333e <HAL_I2S_Init+0x12>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80033be:	68e3      	ldr	r3, [r4, #12]
 80033c0:	b153      	cbz	r3, 80033d8 <HAL_I2S_Init+0xac>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033c2:	00ad      	lsls	r5, r5, #2
 80033c4:	fbb0 f0f5 	udiv	r0, r0, r5
 80033c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80033cc:	0043      	lsls	r3, r0, #1
 80033ce:	6960      	ldr	r0, [r4, #20]
 80033d0:	fbb3 f3f0 	udiv	r3, r3, r0
 80033d4:	3305      	adds	r3, #5
 80033d6:	e7da      	b.n	800338e <HAL_I2S_Init+0x62>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033d8:	00ed      	lsls	r5, r5, #3
 80033da:	fbb0 f0f5 	udiv	r0, r0, r5
 80033de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80033e2:	0043      	lsls	r3, r0, #1
 80033e4:	6960      	ldr	r0, [r4, #20]
 80033e6:	fbb3 f3f0 	udiv	r3, r3, r0
 80033ea:	3305      	adds	r3, #5
 80033ec:	e7cf      	b.n	800338e <HAL_I2S_Init+0x62>
    i2sodd = (uint32_t)(i2sodd << 8U);
 80033ee:	0212      	lsls	r2, r2, #8
 80033f0:	e000      	b.n	80033f4 <HAL_I2S_Init+0xc8>
    i2sodd = 0U;
 80033f2:	2200      	movs	r2, #0
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80033f4:	6821      	ldr	r1, [r4, #0]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	6922      	ldr	r2, [r4, #16]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	620b      	str	r3, [r1, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80033fe:	6821      	ldr	r1, [r4, #0]
 8003400:	69ca      	ldr	r2, [r1, #28]
 8003402:	6863      	ldr	r3, [r4, #4]
 8003404:	68a0      	ldr	r0, [r4, #8]
 8003406:	4303      	orrs	r3, r0
 8003408:	f422 627b 	bic.w	r2, r2, #4016	; 0xfb0
 800340c:	f022 020f 	bic.w	r2, r2, #15
 8003410:	4313      	orrs	r3, r2
 8003412:	68e2      	ldr	r2, [r4, #12]
 8003414:	4313      	orrs	r3, r2
 8003416:	69a2      	ldr	r2, [r4, #24]
 8003418:	4313      	orrs	r3, r2
 800341a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800341e:	61cb      	str	r3, [r1, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003420:	6a23      	ldr	r3, [r4, #32]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d005      	beq.n	8003432 <HAL_I2S_Init+0x106>
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003426:	2000      	movs	r0, #0
 8003428:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800342a:	2301      	movs	r3, #1
 800342c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  return HAL_OK;
}
 8003430:	bd38      	pop	{r3, r4, r5, pc}
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003432:	4b1c      	ldr	r3, [pc, #112]	; (80034a4 <HAL_I2S_Init+0x178>)
 8003434:	6363      	str	r3, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003436:	6821      	ldr	r1, [r4, #0]
 8003438:	4b1b      	ldr	r3, [pc, #108]	; (80034a8 <HAL_I2S_Init+0x17c>)
 800343a:	4a1c      	ldr	r2, [pc, #112]	; (80034ac <HAL_I2S_Init+0x180>)
 800343c:	4299      	cmp	r1, r3
 800343e:	bf18      	it	ne
 8003440:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8003444:	69d3      	ldr	r3, [r2, #28]
 8003446:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800344a:	f023 030f 	bic.w	r3, r3, #15
 800344e:	61d3      	str	r3, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003450:	6821      	ldr	r1, [r4, #0]
 8003452:	4a15      	ldr	r2, [pc, #84]	; (80034a8 <HAL_I2S_Init+0x17c>)
 8003454:	4b15      	ldr	r3, [pc, #84]	; (80034ac <HAL_I2S_Init+0x180>)
 8003456:	4291      	cmp	r1, r2
 8003458:	bf18      	it	ne
 800345a:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 800345e:	2202      	movs	r2, #2
 8003460:	621a      	str	r2, [r3, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003462:	6821      	ldr	r1, [r4, #0]
 8003464:	4b10      	ldr	r3, [pc, #64]	; (80034a8 <HAL_I2S_Init+0x17c>)
 8003466:	4a11      	ldr	r2, [pc, #68]	; (80034ac <HAL_I2S_Init+0x180>)
 8003468:	4299      	cmp	r1, r3
 800346a:	bf18      	it	ne
 800346c:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8003470:	69d1      	ldr	r1, [r2, #28]
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003472:	6863      	ldr	r3, [r4, #4]
      tmp = I2S_MODE_SLAVE_TX;
 8003474:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8003478:	bf0c      	ite	eq
 800347a:	f44f 7080 	moveq.w	r0, #256	; 0x100
 800347e:	2000      	movne	r0, #0
                         (uint16_t)hi2s->Init.Standard   | \
 8003480:	68a3      	ldr	r3, [r4, #8]
                         (uint16_t)hi2s->Init.DataFormat | \
 8003482:	68e5      	ldr	r5, [r4, #12]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003484:	432b      	orrs	r3, r5
 8003486:	4303      	orrs	r3, r0
                         (uint16_t)hi2s->Init.CPOL);
 8003488:	69a0      	ldr	r0, [r4, #24]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800348a:	4303      	orrs	r3, r0
 800348c:	430b      	orrs	r3, r1
 800348e:	b29b      	uxth	r3, r3
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003490:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003494:	61d3      	str	r3, [r2, #28]
 8003496:	e7c6      	b.n	8003426 <HAL_I2S_Init+0xfa>
    return HAL_ERROR;
 8003498:	2001      	movs	r0, #1
}
 800349a:	4770      	bx	lr
 800349c:	cccccccd 	.word	0xcccccccd
 80034a0:	080036e5 	.word	0x080036e5
 80034a4:	08003839 	.word	0x08003839
 80034a8:	40003800 	.word	0x40003800
 80034ac:	40003400 	.word	0x40003400

080034b0 <HAL_I2S_Transmit_DMA>:
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80034b0:	2900      	cmp	r1, #0
 80034b2:	d05e      	beq.n	8003572 <HAL_I2S_Transmit_DMA+0xc2>
{
 80034b4:	b538      	push	{r3, r4, r5, lr}
 80034b6:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0U))
 80034b8:	2a00      	cmp	r2, #0
 80034ba:	d05c      	beq.n	8003576 <HAL_I2S_Transmit_DMA+0xc6>
  {
    return  HAL_ERROR;
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80034bc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d059      	beq.n	800357a <HAL_I2S_Transmit_DMA+0xca>
 80034c6:	2301      	movs	r3, #1
 80034c8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80034cc:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
 80034d0:	b2ed      	uxtb	r5, r5
 80034d2:	429d      	cmp	r5, r3
 80034d4:	d110      	bne.n	80034f8 <HAL_I2S_Transmit_DMA+0x48>
    __HAL_UNLOCK(hi2s);
    return HAL_BUSY;
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80034d6:	2303      	movs	r3, #3
 80034d8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80034dc:	2300      	movs	r3, #0
 80034de:	6463      	str	r3, [r4, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80034e0:	6261      	str	r1, [r4, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80034e2:	6823      	ldr	r3, [r4, #0]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	f003 0307 	and.w	r3, r3, #7

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	d009      	beq.n	8003502 <HAL_I2S_Transmit_DMA+0x52>
 80034ee:	2b05      	cmp	r3, #5
 80034f0:	d007      	beq.n	8003502 <HAL_I2S_Transmit_DMA+0x52>
    hi2s->TxXferSize = (Size << 1U);
    hi2s->TxXferCount = (Size << 1U);
  }
  else
  {
    hi2s->TxXferSize = Size;
 80034f2:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80034f4:	8562      	strh	r2, [r4, #42]	; 0x2a
 80034f6:	e008      	b.n	800350a <HAL_I2S_Transmit_DMA+0x5a>
    __HAL_UNLOCK(hi2s);
 80034f8:	2300      	movs	r3, #0
 80034fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_BUSY;
 80034fe:	2002      	movs	r0, #2
 8003500:	e03a      	b.n	8003578 <HAL_I2S_Transmit_DMA+0xc8>
    hi2s->TxXferSize = (Size << 1U);
 8003502:	0052      	lsls	r2, r2, #1
 8003504:	b292      	uxth	r2, r2
 8003506:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003508:	8562      	strh	r2, [r4, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800350a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800350c:	4a1c      	ldr	r2, [pc, #112]	; (8003580 <HAL_I2S_Transmit_DMA+0xd0>)
 800350e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003510:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003512:	4a1c      	ldr	r2, [pc, #112]	; (8003584 <HAL_I2S_Transmit_DMA+0xd4>)
 8003514:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003516:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003518:	4a1b      	ldr	r2, [pc, #108]	; (8003588 <HAL_I2S_Transmit_DMA+0xd8>)
 800351a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
                                 (uint32_t)hi2s->pTxBuffPtr,
                                 (uint32_t)&hi2s->Instance->DR,
                                 hi2s->TxXferSize))
 800351c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
                                 (uint32_t)&hi2s->Instance->DR,
 800351e:	6822      	ldr	r2, [r4, #0]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003520:	b29b      	uxth	r3, r3
 8003522:	320c      	adds	r2, #12
 8003524:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003526:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003528:	f7fe fba0 	bl	8001c6c <HAL_DMA_Start_IT>
 800352c:	b9a8      	cbnz	r0, 800355a <HAL_I2S_Transmit_DMA+0xaa>
    __HAL_UNLOCK(hi2s);
    return HAL_ERROR;
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800352e:	6823      	ldr	r3, [r4, #0]
 8003530:	69da      	ldr	r2, [r3, #28]
 8003532:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003536:	d103      	bne.n	8003540 <HAL_I2S_Transmit_DMA+0x90>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003538:	69da      	ldr	r2, [r3, #28]
 800353a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800353e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003540:	6823      	ldr	r3, [r4, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	f012 0f02 	tst.w	r2, #2
 8003548:	d103      	bne.n	8003552 <HAL_I2S_Transmit_DMA+0xa2>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	f042 0202 	orr.w	r2, r2, #2
 8003550:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8003552:	2300      	movs	r3, #0
 8003554:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return HAL_OK;
 8003558:	e00e      	b.n	8003578 <HAL_I2S_Transmit_DMA+0xc8>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800355a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800355c:	f043 0308 	orr.w	r3, r3, #8
 8003560:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003562:	2301      	movs	r3, #1
 8003564:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 8003568:	2300      	movs	r3, #0
 800356a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 800356e:	4628      	mov	r0, r5
 8003570:	e002      	b.n	8003578 <HAL_I2S_Transmit_DMA+0xc8>
    return  HAL_ERROR;
 8003572:	2001      	movs	r0, #1
}
 8003574:	4770      	bx	lr
    return  HAL_ERROR;
 8003576:	2001      	movs	r0, #1
}
 8003578:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hi2s);
 800357a:	2002      	movs	r0, #2
 800357c:	e7fc      	b.n	8003578 <HAL_I2S_Transmit_DMA+0xc8>
 800357e:	bf00      	nop
 8003580:	08003689 	.word	0x08003689
 8003584:	08003693 	.word	0x08003693
 8003588:	0800380d 	.word	0x0800380d

0800358c <HAL_I2S_Receive_DMA>:
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800358c:	2900      	cmp	r1, #0
 800358e:	d06d      	beq.n	800366c <HAL_I2S_Receive_DMA+0xe0>
{
 8003590:	b530      	push	{r4, r5, lr}
 8003592:	b083      	sub	sp, #12
 8003594:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0U))
 8003596:	2a00      	cmp	r2, #0
 8003598:	d06a      	beq.n	8003670 <HAL_I2S_Receive_DMA+0xe4>
  {
    return  HAL_ERROR;
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800359a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d068      	beq.n	8003676 <HAL_I2S_Receive_DMA+0xea>
 80035a4:	2301      	movs	r3, #1
 80035a6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80035aa:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
 80035ae:	b2ed      	uxtb	r5, r5
 80035b0:	429d      	cmp	r5, r3
 80035b2:	d110      	bne.n	80035d6 <HAL_I2S_Receive_DMA+0x4a>
    __HAL_UNLOCK(hi2s);
    return HAL_BUSY;
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80035b4:	2304      	movs	r3, #4
 80035b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80035ba:	2300      	movs	r3, #0
 80035bc:	6463      	str	r3, [r4, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 80035be:	62e1      	str	r1, [r4, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80035c0:	6823      	ldr	r3, [r4, #0]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	f003 0307 	and.w	r3, r3, #7

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	d009      	beq.n	80035e0 <HAL_I2S_Receive_DMA+0x54>
 80035cc:	2b05      	cmp	r3, #5
 80035ce:	d007      	beq.n	80035e0 <HAL_I2S_Receive_DMA+0x54>
    hi2s->RxXferSize = (Size << 1U);
    hi2s->RxXferCount = (Size << 1U);
  }
  else
  {
    hi2s->RxXferSize = Size;
 80035d0:	8622      	strh	r2, [r4, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80035d2:	8662      	strh	r2, [r4, #50]	; 0x32
 80035d4:	e008      	b.n	80035e8 <HAL_I2S_Receive_DMA+0x5c>
    __HAL_UNLOCK(hi2s);
 80035d6:	2300      	movs	r3, #0
 80035d8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_BUSY;
 80035dc:	2002      	movs	r0, #2
 80035de:	e048      	b.n	8003672 <HAL_I2S_Receive_DMA+0xe6>
    hi2s->RxXferSize = (Size << 1U);
 80035e0:	0052      	lsls	r2, r2, #1
 80035e2:	b292      	uxth	r2, r2
 80035e4:	8622      	strh	r2, [r4, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80035e6:	8662      	strh	r2, [r4, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80035e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80035ea:	4a24      	ldr	r2, [pc, #144]	; (800367c <HAL_I2S_Receive_DMA+0xf0>)
 80035ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80035ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80035f0:	4a23      	ldr	r2, [pc, #140]	; (8003680 <HAL_I2S_Receive_DMA+0xf4>)
 80035f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80035f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80035f6:	4a23      	ldr	r2, [pc, #140]	; (8003684 <HAL_I2S_Receive_DMA+0xf8>)
 80035f8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80035fa:	6821      	ldr	r1, [r4, #0]
 80035fc:	69cb      	ldr	r3, [r1, #28]
 80035fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003602:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003606:	d01d      	beq.n	8003644 <HAL_I2S_Receive_DMA+0xb8>
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
                                 hi2s->RxXferSize))
 8003608:	8e23      	ldrh	r3, [r4, #48]	; 0x30
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800360a:	b29b      	uxth	r3, r3
 800360c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800360e:	310c      	adds	r1, #12
 8003610:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003612:	f7fe fb2b 	bl	8001c6c <HAL_DMA_Start_IT>
 8003616:	b9e8      	cbnz	r0, 8003654 <HAL_I2S_Receive_DMA+0xc8>
    __HAL_UNLOCK(hi2s);
    return HAL_ERROR;
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003618:	6823      	ldr	r3, [r4, #0]
 800361a:	69da      	ldr	r2, [r3, #28]
 800361c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003620:	d103      	bne.n	800362a <HAL_I2S_Receive_DMA+0x9e>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003622:	69da      	ldr	r2, [r3, #28]
 8003624:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003628:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800362a:	6823      	ldr	r3, [r4, #0]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	f012 0f01 	tst.w	r2, #1
 8003632:	d103      	bne.n	800363c <HAL_I2S_Receive_DMA+0xb0>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	f042 0201 	orr.w	r2, r2, #1
 800363a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800363c:	2300      	movs	r3, #0
 800363e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return HAL_OK;
 8003642:	e016      	b.n	8003672 <HAL_I2S_Receive_DMA+0xe6>
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003644:	2300      	movs	r3, #0
 8003646:	9301      	str	r3, [sp, #4]
 8003648:	68cb      	ldr	r3, [r1, #12]
 800364a:	9301      	str	r3, [sp, #4]
 800364c:	688b      	ldr	r3, [r1, #8]
 800364e:	9301      	str	r3, [sp, #4]
 8003650:	9b01      	ldr	r3, [sp, #4]
 8003652:	e7d9      	b.n	8003608 <HAL_I2S_Receive_DMA+0x7c>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003654:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003656:	f043 0308 	orr.w	r3, r3, #8
 800365a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800365c:	2301      	movs	r3, #1
 800365e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 8003662:	2300      	movs	r3, #0
 8003664:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8003668:	4628      	mov	r0, r5
 800366a:	e002      	b.n	8003672 <HAL_I2S_Receive_DMA+0xe6>
    return  HAL_ERROR;
 800366c:	2001      	movs	r0, #1
}
 800366e:	4770      	bx	lr
    return  HAL_ERROR;
 8003670:	2001      	movs	r0, #1
}
 8003672:	b003      	add	sp, #12
 8003674:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hi2s);
 8003676:	2002      	movs	r0, #2
 8003678:	e7fb      	b.n	8003672 <HAL_I2S_Receive_DMA+0xe6>
 800367a:	bf00      	nop
 800367c:	080036b7 	.word	0x080036b7
 8003680:	080036c1 	.word	0x080036c1
 8003684:	0800380d 	.word	0x0800380d

08003688 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003688:	b508      	push	{r3, lr}

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800368a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800368c:	f7fc ff2a 	bl	80004e4 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003690:	bd08      	pop	{r3, pc}

08003692 <I2S_DMATxCplt>:
{
 8003692:	b508      	push	{r3, lr}
 8003694:	4603      	mov	r3, r0
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003696:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	b94b      	cbnz	r3, 80036b0 <I2S_DMATxCplt+0x1e>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800369c:	6802      	ldr	r2, [r0, #0]
 800369e:	6853      	ldr	r3, [r2, #4]
 80036a0:	f023 0302 	bic.w	r3, r3, #2
 80036a4:	6053      	str	r3, [r2, #4]
    hi2s->TxXferCount = 0U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80036aa:	2301      	movs	r3, #1
 80036ac:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  HAL_I2S_TxCpltCallback(hi2s);
 80036b0:	f7fc ff0c 	bl	80004cc <HAL_I2S_TxCpltCallback>
}
 80036b4:	bd08      	pop	{r3, pc}

080036b6 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80036b6:	b508      	push	{r3, lr}

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80036b8:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80036ba:	f7fd f92f 	bl	800091c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80036be:	bd08      	pop	{r3, pc}

080036c0 <I2S_DMARxCplt>:
{
 80036c0:	b508      	push	{r3, lr}
 80036c2:	4603      	mov	r3, r0
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80036c4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	b94b      	cbnz	r3, 80036de <I2S_DMARxCplt+0x1e>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80036ca:	6802      	ldr	r2, [r0, #0]
 80036cc:	6853      	ldr	r3, [r2, #4]
 80036ce:	f023 0301 	bic.w	r3, r3, #1
 80036d2:	6053      	str	r3, [r2, #4]
    hi2s->RxXferCount = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	8643      	strh	r3, [r0, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 80036d8:	2301      	movs	r3, #1
 80036da:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  HAL_I2S_RxCpltCallback(hi2s);
 80036de:	f7fd f937 	bl	8000950 <HAL_I2S_RxCpltCallback>
}
 80036e2:	bd08      	pop	{r3, pc}

080036e4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036e4:	b510      	push	{r4, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	4604      	mov	r4, r0
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80036ea:	6802      	ldr	r2, [r0, #0]
 80036ec:	6893      	ldr	r3, [r2, #8]
 80036ee:	9303      	str	r3, [sp, #12]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80036f0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d006      	beq.n	8003708 <I2S_IRQHandler+0x24>
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80036fa:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b03      	cmp	r3, #3
 8003702:	d042      	beq.n	800378a <I2S_IRQHandler+0xa6>
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003704:	b004      	add	sp, #16
 8003706:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003708:	9b03      	ldr	r3, [sp, #12]
 800370a:	f013 0f01 	tst.w	r3, #1
 800370e:	d003      	beq.n	8003718 <I2S_IRQHandler+0x34>
 8003710:	6853      	ldr	r3, [r2, #4]
 8003712:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003716:	d11f      	bne.n	8003758 <I2S_IRQHandler+0x74>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003718:	9b03      	ldr	r3, [sp, #12]
 800371a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800371e:	d0ec      	beq.n	80036fa <I2S_IRQHandler+0x16>
 8003720:	6823      	ldr	r3, [r4, #0]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	f012 0f20 	tst.w	r2, #32
 8003728:	d0e7      	beq.n	80036fa <I2S_IRQHandler+0x16>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003730:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003732:	2300      	movs	r3, #0
 8003734:	9301      	str	r3, [sp, #4]
 8003736:	6823      	ldr	r3, [r4, #0]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	9201      	str	r2, [sp, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	9301      	str	r3, [sp, #4]
 8003740:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8003742:	2301      	movs	r3, #1
 8003744:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003748:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800374a:	f043 0302 	orr.w	r3, r3, #2
 800374e:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8003750:	4620      	mov	r0, r4
 8003752:	f7fc fed5 	bl	8000500 <HAL_I2S_ErrorCallback>
 8003756:	e7d0      	b.n	80036fa <I2S_IRQHandler+0x16>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003758:	68d2      	ldr	r2, [r2, #12]
 800375a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800375c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800375e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003760:	3302      	adds	r3, #2
 8003762:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003764:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8003766:	3b01      	subs	r3, #1
 8003768:	b29b      	uxth	r3, r3
 800376a:	8643      	strh	r3, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 800376c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800376e:	b29b      	uxth	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1d1      	bne.n	8003718 <I2S_IRQHandler+0x34>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003774:	6802      	ldr	r2, [r0, #0]
 8003776:	6853      	ldr	r3, [r2, #4]
 8003778:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800377c:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 800377e:	2301      	movs	r3, #1
 8003780:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8003784:	f7fd f8e4 	bl	8000950 <HAL_I2S_RxCpltCallback>
 8003788:	e7c6      	b.n	8003718 <I2S_IRQHandler+0x34>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800378a:	9b03      	ldr	r3, [sp, #12]
 800378c:	f013 0f02 	tst.w	r3, #2
 8003790:	d004      	beq.n	800379c <I2S_IRQHandler+0xb8>
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	f012 0f80 	tst.w	r2, #128	; 0x80
 800379a:	d11d      	bne.n	80037d8 <I2S_IRQHandler+0xf4>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800379c:	9b03      	ldr	r3, [sp, #12]
 800379e:	f013 0f08 	tst.w	r3, #8
 80037a2:	d0af      	beq.n	8003704 <I2S_IRQHandler+0x20>
 80037a4:	6823      	ldr	r3, [r4, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	f012 0f20 	tst.w	r2, #32
 80037ac:	d0aa      	beq.n	8003704 <I2S_IRQHandler+0x20>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037b4:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80037b6:	2300      	movs	r3, #0
 80037b8:	9302      	str	r3, [sp, #8]
 80037ba:	6823      	ldr	r3, [r4, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	9302      	str	r3, [sp, #8]
 80037c0:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 80037c2:	2301      	movs	r3, #1
 80037c4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80037ca:	f043 0304 	orr.w	r3, r3, #4
 80037ce:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80037d0:	4620      	mov	r0, r4
 80037d2:	f7fc fe95 	bl	8000500 <HAL_I2S_ErrorCallback>
}
 80037d6:	e795      	b.n	8003704 <I2S_IRQHandler+0x20>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80037d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80037da:	8812      	ldrh	r2, [r2, #0]
 80037dc:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80037de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037e0:	3302      	adds	r3, #2
 80037e2:	6263      	str	r3, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 80037e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 80037ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1d3      	bne.n	800379c <I2S_IRQHandler+0xb8>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037f4:	6822      	ldr	r2, [r4, #0]
 80037f6:	6853      	ldr	r3, [r2, #4]
 80037f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037fc:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80037fe:	2301      	movs	r3, #1
 8003800:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8003804:	4620      	mov	r0, r4
 8003806:	f7fc fe61 	bl	80004cc <HAL_I2S_TxCpltCallback>
 800380a:	e7c7      	b.n	800379c <I2S_IRQHandler+0xb8>

0800380c <I2S_DMAError>:
{
 800380c:	b508      	push	{r3, lr}
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800380e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003810:	6802      	ldr	r2, [r0, #0]
 8003812:	6853      	ldr	r3, [r2, #4]
 8003814:	f023 0303 	bic.w	r3, r3, #3
 8003818:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 800381a:	2300      	movs	r3, #0
 800381c:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800381e:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 8003820:	2301      	movs	r3, #1
 8003822:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003826:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003828:	f043 0308 	orr.w	r3, r3, #8
 800382c:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 800382e:	f7fc fe67 	bl	8000500 <HAL_I2S_ErrorCallback>
}
 8003832:	bd08      	pop	{r3, pc}

08003834 <HAL_I2SEx_TxRxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003834:	4770      	bx	lr
	...

08003838 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 8003838:	b510      	push	{r4, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800383e:	6802      	ldr	r2, [r0, #0]
 8003840:	6893      	ldr	r3, [r2, #8]
 8003842:	9305      	str	r3, [sp, #20]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003844:	499a      	ldr	r1, [pc, #616]	; (8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x278>)
 8003846:	4b9b      	ldr	r3, [pc, #620]	; (8003ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x27c>)
 8003848:	428a      	cmp	r2, r1
 800384a:	bf18      	it	ne
 800384c:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8003850:	6899      	ldr	r1, [r3, #8]
 8003852:	9104      	str	r1, [sp, #16]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003854:	6851      	ldr	r1, [r2, #4]
 8003856:	9103      	str	r1, [sp, #12]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003858:	6859      	ldr	r1, [r3, #4]
 800385a:	9102      	str	r1, [sp, #8]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800385c:	6841      	ldr	r1, [r0, #4]
 800385e:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 8003862:	f040 80ac 	bne.w	80039be <HAL_I2SEx_FullDuplex_IRQHandler+0x186>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003866:	9b05      	ldr	r3, [sp, #20]
 8003868:	f013 0f02 	tst.w	r3, #2
 800386c:	d003      	beq.n	8003876 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
 800386e:	9b03      	ldr	r3, [sp, #12]
 8003870:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003874:	d15b      	bne.n	800392e <HAL_I2SEx_FullDuplex_IRQHandler+0xf6>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003876:	9b04      	ldr	r3, [sp, #16]
 8003878:	f013 0f01 	tst.w	r3, #1
 800387c:	d003      	beq.n	8003886 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
 800387e:	9b02      	ldr	r3, [sp, #8]
 8003880:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003884:	d16f      	bne.n	8003966 <HAL_I2SEx_FullDuplex_IRQHandler+0x12e>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003886:	9b04      	ldr	r3, [sp, #16]
 8003888:	f013 0f40 	tst.w	r3, #64	; 0x40
 800388c:	d025      	beq.n	80038da <HAL_I2SEx_FullDuplex_IRQHandler+0xa2>
 800388e:	9b02      	ldr	r3, [sp, #8]
 8003890:	f013 0f20 	tst.w	r3, #32
 8003894:	d021      	beq.n	80038da <HAL_I2SEx_FullDuplex_IRQHandler+0xa2>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003896:	6821      	ldr	r1, [r4, #0]
 8003898:	4a85      	ldr	r2, [pc, #532]	; (8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x278>)
 800389a:	4b86      	ldr	r3, [pc, #536]	; (8003ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x27c>)
 800389c:	4291      	cmp	r1, r2
 800389e:	bf18      	it	ne
 80038a0:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038aa:	605a      	str	r2, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038ac:	6822      	ldr	r2, [r4, #0]
 80038ae:	6853      	ldr	r3, [r2, #4]
 80038b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038b4:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80038b6:	2300      	movs	r3, #0
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	6823      	ldr	r3, [r4, #0]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	9200      	str	r2, [sp, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	9b00      	ldr	r3, [sp, #0]
      hi2s->State = HAL_I2S_STATE_READY;
 80038c6:	2301      	movs	r3, #1
 80038c8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80038ce:	f043 0302 	orr.w	r3, r3, #2
 80038d2:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80038d4:	4620      	mov	r0, r4
 80038d6:	f7fc fe13 	bl	8000500 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038da:	9b05      	ldr	r3, [sp, #20]
 80038dc:	f013 0f08 	tst.w	r3, #8
 80038e0:	d023      	beq.n	800392a <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
 80038e2:	9b03      	ldr	r3, [sp, #12]
 80038e4:	f013 0f20 	tst.w	r3, #32
 80038e8:	d01f      	beq.n	800392a <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038ea:	6822      	ldr	r2, [r4, #0]
 80038ec:	6853      	ldr	r3, [r2, #4]
 80038ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038f2:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038f4:	6821      	ldr	r1, [r4, #0]
 80038f6:	4a6e      	ldr	r2, [pc, #440]	; (8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x278>)
 80038f8:	4b6e      	ldr	r3, [pc, #440]	; (8003ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x27c>)
 80038fa:	4291      	cmp	r1, r2
 80038fc:	bf18      	it	ne
 80038fe:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003908:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800390a:	2300      	movs	r3, #0
 800390c:	9301      	str	r3, [sp, #4]
 800390e:	6823      	ldr	r3, [r4, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	9301      	str	r3, [sp, #4]
 8003914:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8003916:	2301      	movs	r3, #1
 8003918:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800391c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800391e:	f043 0304 	orr.w	r3, r3, #4
 8003922:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8003924:	4620      	mov	r0, r4
 8003926:	f7fc fdeb 	bl	8000500 <HAL_I2S_ErrorCallback>
}
 800392a:	b006      	add	sp, #24
 800392c:	bd10      	pop	{r4, pc}
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800392e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003930:	1c99      	adds	r1, r3, #2
 8003932:	6241      	str	r1, [r0, #36]	; 0x24
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8003938:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800393a:	3b01      	subs	r3, #1
 800393c:	b29b      	uxth	r3, r3
 800393e:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003940:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	d196      	bne.n	8003876 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003948:	6802      	ldr	r2, [r0, #0]
 800394a:	6853      	ldr	r3, [r2, #4]
 800394c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003950:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8003952:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d18d      	bne.n	8003876 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800395a:	2301      	movs	r3, #1
 800395c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003960:	f7ff ff68 	bl	8003834 <HAL_I2SEx_TxRxCpltCallback>
 8003964:	e787      	b.n	8003876 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003966:	6821      	ldr	r1, [r4, #0]
 8003968:	4a51      	ldr	r2, [pc, #324]	; (8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x278>)
 800396a:	4b52      	ldr	r3, [pc, #328]	; (8003ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x27c>)
 800396c:	4291      	cmp	r1, r2
 800396e:	bf18      	it	ne
 8003970:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8003974:	68da      	ldr	r2, [r3, #12]
 8003976:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003978:	1c99      	adds	r1, r3, #2
 800397a:	62e1      	str	r1, [r4, #44]	; 0x2c
 800397c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800397e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8003980:	3b01      	subs	r3, #1
 8003982:	b29b      	uxth	r3, r3
 8003984:	8663      	strh	r3, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003986:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	f47f af7b 	bne.w	8003886 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003990:	6821      	ldr	r1, [r4, #0]
 8003992:	4a47      	ldr	r2, [pc, #284]	; (8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x278>)
 8003994:	4b47      	ldr	r3, [pc, #284]	; (8003ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x27c>)
 8003996:	4291      	cmp	r1, r2
 8003998:	bf18      	it	ne
 800399a:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039a4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f47f af6b 	bne.w	8003886 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039b0:	2301      	movs	r3, #1
 80039b2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039b6:	4620      	mov	r0, r4
 80039b8:	f7ff ff3c 	bl	8003834 <HAL_I2SEx_TxRxCpltCallback>
 80039bc:	e763      	b.n	8003886 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80039be:	9a04      	ldr	r2, [sp, #16]
 80039c0:	f012 0f02 	tst.w	r2, #2
 80039c4:	d003      	beq.n	80039ce <HAL_I2SEx_FullDuplex_IRQHandler+0x196>
 80039c6:	9a02      	ldr	r2, [sp, #8]
 80039c8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80039cc:	d14e      	bne.n	8003a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x234>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80039ce:	9b05      	ldr	r3, [sp, #20]
 80039d0:	f013 0f01 	tst.w	r3, #1
 80039d4:	d003      	beq.n	80039de <HAL_I2SEx_FullDuplex_IRQHandler+0x1a6>
 80039d6:	9b03      	ldr	r3, [sp, #12]
 80039d8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80039dc:	d16c      	bne.n	8003ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x280>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039de:	9b05      	ldr	r3, [sp, #20]
 80039e0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80039e4:	d01d      	beq.n	8003a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ea>
 80039e6:	9b03      	ldr	r3, [sp, #12]
 80039e8:	f013 0f20 	tst.w	r3, #32
 80039ec:	d019      	beq.n	8003a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ea>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039ee:	6822      	ldr	r2, [r4, #0]
 80039f0:	6853      	ldr	r3, [r2, #4]
 80039f2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80039f6:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039f8:	6821      	ldr	r1, [r4, #0]
 80039fa:	4a2d      	ldr	r2, [pc, #180]	; (8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x278>)
 80039fc:	4b2d      	ldr	r3, [pc, #180]	; (8003ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x27c>)
 80039fe:	4291      	cmp	r1, r2
 8003a00:	bf18      	it	ne
 8003a02:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a0c:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a14:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003a16:	f043 0302 	orr.w	r3, r3, #2
 8003a1a:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8003a1c:	4620      	mov	r0, r4
 8003a1e:	f7fc fd6f 	bl	8000500 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a22:	9b04      	ldr	r3, [sp, #16]
 8003a24:	f013 0f08 	tst.w	r3, #8
 8003a28:	f43f af7f 	beq.w	800392a <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
 8003a2c:	9b02      	ldr	r3, [sp, #8]
 8003a2e:	f013 0f20 	tst.w	r3, #32
 8003a32:	f43f af7a 	beq.w	800392a <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a36:	6821      	ldr	r1, [r4, #0]
 8003a38:	4a1d      	ldr	r2, [pc, #116]	; (8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x278>)
 8003a3a:	4b1e      	ldr	r3, [pc, #120]	; (8003ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x27c>)
 8003a3c:	4291      	cmp	r1, r2
 8003a3e:	bf18      	it	ne
 8003a40:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a4a:	605a      	str	r2, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a4c:	6822      	ldr	r2, [r4, #0]
 8003a4e:	6853      	ldr	r3, [r2, #4]
 8003a50:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003a54:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8003a56:	2301      	movs	r3, #1
 8003a58:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a5c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003a5e:	f043 0304 	orr.w	r3, r3, #4
 8003a62:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8003a64:	4620      	mov	r0, r4
 8003a66:	f7fc fd4b 	bl	8000500 <HAL_I2S_ErrorCallback>
}
 8003a6a:	e75e      	b.n	800392a <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003a6c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003a6e:	1c91      	adds	r1, r2, #2
 8003a70:	6241      	str	r1, [r0, #36]	; 0x24
 8003a72:	8812      	ldrh	r2, [r2, #0]
 8003a74:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a76:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8003a7e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1a3      	bne.n	80039ce <HAL_I2SEx_FullDuplex_IRQHandler+0x196>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a86:	6801      	ldr	r1, [r0, #0]
 8003a88:	4a09      	ldr	r2, [pc, #36]	; (8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x278>)
 8003a8a:	4b0a      	ldr	r3, [pc, #40]	; (8003ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x27c>)
 8003a8c:	4291      	cmp	r1, r2
 8003a8e:	bf18      	it	ne
 8003a90:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a9a:	605a      	str	r2, [r3, #4]
    if (hi2s->RxXferCount == 0U)
 8003a9c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d194      	bne.n	80039ce <HAL_I2SEx_FullDuplex_IRQHandler+0x196>
      hi2s->State = HAL_I2S_STATE_READY;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003aaa:	f7ff fec3 	bl	8003834 <HAL_I2SEx_TxRxCpltCallback>
 8003aae:	e78e      	b.n	80039ce <HAL_I2SEx_FullDuplex_IRQHandler+0x196>
 8003ab0:	40003800 	.word	0x40003800
 8003ab4:	40003400 	.word	0x40003400
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003ab8:	6823      	ldr	r3, [r4, #0]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003abe:	1c99      	adds	r1, r3, #2
 8003ac0:	62e1      	str	r1, [r4, #44]	; 0x2c
 8003ac2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ac4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	8663      	strh	r3, [r4, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8003acc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d184      	bne.n	80039de <HAL_I2SEx_FullDuplex_IRQHandler+0x1a6>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ad4:	6822      	ldr	r2, [r4, #0]
 8003ad6:	6853      	ldr	r3, [r2, #4]
 8003ad8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003adc:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 8003ade:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f47f af7b 	bne.w	80039de <HAL_I2SEx_FullDuplex_IRQHandler+0x1a6>
      hi2s->State = HAL_I2S_STATE_READY;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003aee:	4620      	mov	r0, r4
 8003af0:	f7ff fea0 	bl	8003834 <HAL_I2SEx_TxRxCpltCallback>
 8003af4:	e773      	b.n	80039de <HAL_I2SEx_FullDuplex_IRQHandler+0x1a6>
 8003af6:	bf00      	nop

08003af8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003af8:	2800      	cmp	r0, #0
 8003afa:	f000 81e1 	beq.w	8003ec0 <HAL_RCC_OscConfig+0x3c8>
{
 8003afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b06:	6803      	ldr	r3, [r0, #0]
 8003b08:	f013 0f01 	tst.w	r3, #1
 8003b0c:	d03b      	beq.n	8003b86 <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b0e:	4b9f      	ldr	r3, [pc, #636]	; (8003d8c <HAL_RCC_OscConfig+0x294>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 030c 	and.w	r3, r3, #12
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d02c      	beq.n	8003b74 <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b1a:	4b9c      	ldr	r3, [pc, #624]	; (8003d8c <HAL_RCC_OscConfig+0x294>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b22:	2b08      	cmp	r3, #8
 8003b24:	d021      	beq.n	8003b6a <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b26:	6863      	ldr	r3, [r4, #4]
 8003b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b2c:	d04f      	beq.n	8003bce <HAL_RCC_OscConfig+0xd6>
 8003b2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b32:	d052      	beq.n	8003bda <HAL_RCC_OscConfig+0xe2>
 8003b34:	4b95      	ldr	r3, [pc, #596]	; (8003d8c <HAL_RCC_OscConfig+0x294>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b3c:	601a      	str	r2, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b44:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b46:	6863      	ldr	r3, [r4, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d050      	beq.n	8003bee <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4c:	f7fd ff52 	bl	80019f4 <HAL_GetTick>
 8003b50:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b52:	4e8e      	ldr	r6, [pc, #568]	; (8003d8c <HAL_RCC_OscConfig+0x294>)
 8003b54:	6833      	ldr	r3, [r6, #0]
 8003b56:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003b5a:	d114      	bne.n	8003b86 <HAL_RCC_OscConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b5c:	f7fd ff4a 	bl	80019f4 <HAL_GetTick>
 8003b60:	1b40      	subs	r0, r0, r5
 8003b62:	2864      	cmp	r0, #100	; 0x64
 8003b64:	d9f6      	bls.n	8003b54 <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 8003b66:	2003      	movs	r0, #3
 8003b68:	e1b1      	b.n	8003ece <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b6a:	4b88      	ldr	r3, [pc, #544]	; (8003d8c <HAL_RCC_OscConfig+0x294>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003b72:	d0d8      	beq.n	8003b26 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b74:	4b85      	ldr	r3, [pc, #532]	; (8003d8c <HAL_RCC_OscConfig+0x294>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003b7c:	d003      	beq.n	8003b86 <HAL_RCC_OscConfig+0x8e>
 8003b7e:	6863      	ldr	r3, [r4, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 819f 	beq.w	8003ec4 <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	f013 0f02 	tst.w	r3, #2
 8003b8c:	d054      	beq.n	8003c38 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b8e:	4b7f      	ldr	r3, [pc, #508]	; (8003d8c <HAL_RCC_OscConfig+0x294>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f013 0f0c 	tst.w	r3, #12
 8003b96:	d03e      	beq.n	8003c16 <HAL_RCC_OscConfig+0x11e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b98:	4b7c      	ldr	r3, [pc, #496]	; (8003d8c <HAL_RCC_OscConfig+0x294>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d033      	beq.n	8003c0c <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ba4:	68e3      	ldr	r3, [r4, #12]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d068      	beq.n	8003c7c <HAL_RCC_OscConfig+0x184>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003baa:	4b79      	ldr	r3, [pc, #484]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003bac:	2201      	movs	r2, #1
 8003bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb0:	f7fd ff20 	bl	80019f4 <HAL_GetTick>
 8003bb4:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb6:	4e75      	ldr	r6, [pc, #468]	; (8003d8c <HAL_RCC_OscConfig+0x294>)
 8003bb8:	6833      	ldr	r3, [r6, #0]
 8003bba:	f013 0f02 	tst.w	r3, #2
 8003bbe:	d154      	bne.n	8003c6a <HAL_RCC_OscConfig+0x172>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bc0:	f7fd ff18 	bl	80019f4 <HAL_GetTick>
 8003bc4:	1b40      	subs	r0, r0, r5
 8003bc6:	2802      	cmp	r0, #2
 8003bc8:	d9f6      	bls.n	8003bb8 <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 8003bca:	2003      	movs	r0, #3
 8003bcc:	e17f      	b.n	8003ece <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bce:	4a6f      	ldr	r2, [pc, #444]	; (8003d8c <HAL_RCC_OscConfig+0x294>)
 8003bd0:	6813      	ldr	r3, [r2, #0]
 8003bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd6:	6013      	str	r3, [r2, #0]
 8003bd8:	e7b5      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e>
 8003bda:	4b6c      	ldr	r3, [pc, #432]	; (8003d8c <HAL_RCC_OscConfig+0x294>)
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	e7ab      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 8003bee:	f7fd ff01 	bl	80019f4 <HAL_GetTick>
 8003bf2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bf4:	4e65      	ldr	r6, [pc, #404]	; (8003d8c <HAL_RCC_OscConfig+0x294>)
 8003bf6:	6833      	ldr	r3, [r6, #0]
 8003bf8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003bfc:	d0c3      	beq.n	8003b86 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bfe:	f7fd fef9 	bl	80019f4 <HAL_GetTick>
 8003c02:	1b40      	subs	r0, r0, r5
 8003c04:	2864      	cmp	r0, #100	; 0x64
 8003c06:	d9f6      	bls.n	8003bf6 <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 8003c08:	2003      	movs	r0, #3
 8003c0a:	e160      	b.n	8003ece <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c0c:	4b5f      	ldr	r3, [pc, #380]	; (8003d8c <HAL_RCC_OscConfig+0x294>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003c14:	d1c6      	bne.n	8003ba4 <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c16:	4b5d      	ldr	r3, [pc, #372]	; (8003d8c <HAL_RCC_OscConfig+0x294>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f013 0f02 	tst.w	r3, #2
 8003c1e:	d003      	beq.n	8003c28 <HAL_RCC_OscConfig+0x130>
 8003c20:	68e3      	ldr	r3, [r4, #12]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	f040 8150 	bne.w	8003ec8 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c28:	4a58      	ldr	r2, [pc, #352]	; (8003d8c <HAL_RCC_OscConfig+0x294>)
 8003c2a:	6813      	ldr	r3, [r2, #0]
 8003c2c:	6921      	ldr	r1, [r4, #16]
 8003c2e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003c32:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003c36:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c38:	6823      	ldr	r3, [r4, #0]
 8003c3a:	f013 0f08 	tst.w	r3, #8
 8003c3e:	d042      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c40:	6963      	ldr	r3, [r4, #20]
 8003c42:	b36b      	cbz	r3, 8003ca0 <HAL_RCC_OscConfig+0x1a8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c44:	4b52      	ldr	r3, [pc, #328]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003c46:	2201      	movs	r2, #1
 8003c48:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4c:	f7fd fed2 	bl	80019f4 <HAL_GetTick>
 8003c50:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c52:	4e4e      	ldr	r6, [pc, #312]	; (8003d8c <HAL_RCC_OscConfig+0x294>)
 8003c54:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8003c56:	f013 0f02 	tst.w	r3, #2
 8003c5a:	d134      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c5c:	f7fd feca 	bl	80019f4 <HAL_GetTick>
 8003c60:	1b40      	subs	r0, r0, r5
 8003c62:	2802      	cmp	r0, #2
 8003c64:	d9f6      	bls.n	8003c54 <HAL_RCC_OscConfig+0x15c>
        {
          return HAL_TIMEOUT;
 8003c66:	2003      	movs	r0, #3
 8003c68:	e131      	b.n	8003ece <HAL_RCC_OscConfig+0x3d6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6a:	4a48      	ldr	r2, [pc, #288]	; (8003d8c <HAL_RCC_OscConfig+0x294>)
 8003c6c:	6813      	ldr	r3, [r2, #0]
 8003c6e:	6921      	ldr	r1, [r4, #16]
 8003c70:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003c74:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003c78:	6013      	str	r3, [r2, #0]
 8003c7a:	e7dd      	b.n	8003c38 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8003c7c:	4b44      	ldr	r3, [pc, #272]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003c82:	f7fd feb7 	bl	80019f4 <HAL_GetTick>
 8003c86:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c88:	4e40      	ldr	r6, [pc, #256]	; (8003d8c <HAL_RCC_OscConfig+0x294>)
 8003c8a:	6833      	ldr	r3, [r6, #0]
 8003c8c:	f013 0f02 	tst.w	r3, #2
 8003c90:	d0d2      	beq.n	8003c38 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c92:	f7fd feaf 	bl	80019f4 <HAL_GetTick>
 8003c96:	1b40      	subs	r0, r0, r5
 8003c98:	2802      	cmp	r0, #2
 8003c9a:	d9f6      	bls.n	8003c8a <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 8003c9c:	2003      	movs	r0, #3
 8003c9e:	e116      	b.n	8003ece <HAL_RCC_OscConfig+0x3d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ca0:	4b3b      	ldr	r3, [pc, #236]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca8:	f7fd fea4 	bl	80019f4 <HAL_GetTick>
 8003cac:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cae:	4e37      	ldr	r6, [pc, #220]	; (8003d8c <HAL_RCC_OscConfig+0x294>)
 8003cb0:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8003cb2:	f013 0f02 	tst.w	r3, #2
 8003cb6:	d006      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cb8:	f7fd fe9c 	bl	80019f4 <HAL_GetTick>
 8003cbc:	1b40      	subs	r0, r0, r5
 8003cbe:	2802      	cmp	r0, #2
 8003cc0:	d9f6      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x1b8>
        {
          return HAL_TIMEOUT;
 8003cc2:	2003      	movs	r0, #3
 8003cc4:	e103      	b.n	8003ece <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cc6:	6823      	ldr	r3, [r4, #0]
 8003cc8:	f013 0f04 	tst.w	r3, #4
 8003ccc:	d076      	beq.n	8003dbc <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cce:	4b2f      	ldr	r3, [pc, #188]	; (8003d8c <HAL_RCC_OscConfig+0x294>)
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003cd6:	d133      	bne.n	8003d40 <HAL_RCC_OscConfig+0x248>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cd8:	2300      	movs	r3, #0
 8003cda:	9301      	str	r3, [sp, #4]
 8003cdc:	4b2b      	ldr	r3, [pc, #172]	; (8003d8c <HAL_RCC_OscConfig+0x294>)
 8003cde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ce0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ce4:	641a      	str	r2, [r3, #64]	; 0x40
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cec:	9301      	str	r3, [sp, #4]
 8003cee:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003cf0:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf2:	4b28      	ldr	r3, [pc, #160]	; (8003d94 <HAL_RCC_OscConfig+0x29c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003cfa:	d023      	beq.n	8003d44 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cfc:	68a3      	ldr	r3, [r4, #8]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d034      	beq.n	8003d6c <HAL_RCC_OscConfig+0x274>
 8003d02:	2b05      	cmp	r3, #5
 8003d04:	d038      	beq.n	8003d78 <HAL_RCC_OscConfig+0x280>
 8003d06:	4b21      	ldr	r3, [pc, #132]	; (8003d8c <HAL_RCC_OscConfig+0x294>)
 8003d08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d0a:	f022 0201 	bic.w	r2, r2, #1
 8003d0e:	671a      	str	r2, [r3, #112]	; 0x70
 8003d10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d12:	f022 0204 	bic.w	r2, r2, #4
 8003d16:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d18:	68a3      	ldr	r3, [r4, #8]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d03c      	beq.n	8003d98 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1e:	f7fd fe69 	bl	80019f4 <HAL_GetTick>
 8003d22:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d24:	4f19      	ldr	r7, [pc, #100]	; (8003d8c <HAL_RCC_OscConfig+0x294>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d26:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d2c:	f013 0f02 	tst.w	r3, #2
 8003d30:	d143      	bne.n	8003dba <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d32:	f7fd fe5f 	bl	80019f4 <HAL_GetTick>
 8003d36:	1b80      	subs	r0, r0, r6
 8003d38:	4540      	cmp	r0, r8
 8003d3a:	d9f6      	bls.n	8003d2a <HAL_RCC_OscConfig+0x232>
        {
          return HAL_TIMEOUT;
 8003d3c:	2003      	movs	r0, #3
 8003d3e:	e0c6      	b.n	8003ece <HAL_RCC_OscConfig+0x3d6>
    FlagStatus       pwrclkchanged = RESET;
 8003d40:	2500      	movs	r5, #0
 8003d42:	e7d6      	b.n	8003cf2 <HAL_RCC_OscConfig+0x1fa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d44:	4a13      	ldr	r2, [pc, #76]	; (8003d94 <HAL_RCC_OscConfig+0x29c>)
 8003d46:	6813      	ldr	r3, [r2, #0]
 8003d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d4c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003d4e:	f7fd fe51 	bl	80019f4 <HAL_GetTick>
 8003d52:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d54:	4f0f      	ldr	r7, [pc, #60]	; (8003d94 <HAL_RCC_OscConfig+0x29c>)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003d5c:	d1ce      	bne.n	8003cfc <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d5e:	f7fd fe49 	bl	80019f4 <HAL_GetTick>
 8003d62:	1b80      	subs	r0, r0, r6
 8003d64:	2802      	cmp	r0, #2
 8003d66:	d9f6      	bls.n	8003d56 <HAL_RCC_OscConfig+0x25e>
          return HAL_TIMEOUT;
 8003d68:	2003      	movs	r0, #3
 8003d6a:	e0b0      	b.n	8003ece <HAL_RCC_OscConfig+0x3d6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d6c:	4a07      	ldr	r2, [pc, #28]	; (8003d8c <HAL_RCC_OscConfig+0x294>)
 8003d6e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003d70:	f043 0301 	orr.w	r3, r3, #1
 8003d74:	6713      	str	r3, [r2, #112]	; 0x70
 8003d76:	e7cf      	b.n	8003d18 <HAL_RCC_OscConfig+0x220>
 8003d78:	4b04      	ldr	r3, [pc, #16]	; (8003d8c <HAL_RCC_OscConfig+0x294>)
 8003d7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d7c:	f042 0204 	orr.w	r2, r2, #4
 8003d80:	671a      	str	r2, [r3, #112]	; 0x70
 8003d82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d84:	f042 0201 	orr.w	r2, r2, #1
 8003d88:	671a      	str	r2, [r3, #112]	; 0x70
 8003d8a:	e7c5      	b.n	8003d18 <HAL_RCC_OscConfig+0x220>
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	42470000 	.word	0x42470000
 8003d94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d98:	f7fd fe2c 	bl	80019f4 <HAL_GetTick>
 8003d9c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d9e:	4f52      	ldr	r7, [pc, #328]	; (8003ee8 <HAL_RCC_OscConfig+0x3f0>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003da0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003da4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003da6:	f013 0f02 	tst.w	r3, #2
 8003daa:	d006      	beq.n	8003dba <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dac:	f7fd fe22 	bl	80019f4 <HAL_GetTick>
 8003db0:	1b80      	subs	r0, r0, r6
 8003db2:	4540      	cmp	r0, r8
 8003db4:	d9f6      	bls.n	8003da4 <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 8003db6:	2003      	movs	r0, #3
 8003db8:	e089      	b.n	8003ece <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dba:	b9ed      	cbnz	r5, 8003df8 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dbc:	69a3      	ldr	r3, [r4, #24]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 8084 	beq.w	8003ecc <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dc4:	4a48      	ldr	r2, [pc, #288]	; (8003ee8 <HAL_RCC_OscConfig+0x3f0>)
 8003dc6:	6892      	ldr	r2, [r2, #8]
 8003dc8:	f002 020c 	and.w	r2, r2, #12
 8003dcc:	2a08      	cmp	r2, #8
 8003dce:	d051      	beq.n	8003e74 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d017      	beq.n	8003e04 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd4:	4b45      	ldr	r3, [pc, #276]	; (8003eec <HAL_RCC_OscConfig+0x3f4>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dda:	f7fd fe0b 	bl	80019f4 <HAL_GetTick>
 8003dde:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de0:	4d41      	ldr	r5, [pc, #260]	; (8003ee8 <HAL_RCC_OscConfig+0x3f0>)
 8003de2:	682b      	ldr	r3, [r5, #0]
 8003de4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003de8:	d042      	beq.n	8003e70 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dea:	f7fd fe03 	bl	80019f4 <HAL_GetTick>
 8003dee:	1b00      	subs	r0, r0, r4
 8003df0:	2802      	cmp	r0, #2
 8003df2:	d9f6      	bls.n	8003de2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8003df4:	2003      	movs	r0, #3
 8003df6:	e06a      	b.n	8003ece <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df8:	4a3b      	ldr	r2, [pc, #236]	; (8003ee8 <HAL_RCC_OscConfig+0x3f0>)
 8003dfa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e00:	6413      	str	r3, [r2, #64]	; 0x40
 8003e02:	e7db      	b.n	8003dbc <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8003e04:	4b39      	ldr	r3, [pc, #228]	; (8003eec <HAL_RCC_OscConfig+0x3f4>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003e0a:	f7fd fdf3 	bl	80019f4 <HAL_GetTick>
 8003e0e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e10:	4e35      	ldr	r6, [pc, #212]	; (8003ee8 <HAL_RCC_OscConfig+0x3f0>)
 8003e12:	6833      	ldr	r3, [r6, #0]
 8003e14:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003e18:	d006      	beq.n	8003e28 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e1a:	f7fd fdeb 	bl	80019f4 <HAL_GetTick>
 8003e1e:	1b40      	subs	r0, r0, r5
 8003e20:	2802      	cmp	r0, #2
 8003e22:	d9f6      	bls.n	8003e12 <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 8003e24:	2003      	movs	r0, #3
 8003e26:	e052      	b.n	8003ece <HAL_RCC_OscConfig+0x3d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e28:	69e3      	ldr	r3, [r4, #28]
 8003e2a:	6a22      	ldr	r2, [r4, #32]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003e30:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003e34:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003e36:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003e3a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003e3c:	0852      	lsrs	r2, r2, #1
 8003e3e:	3a01      	subs	r2, #1
 8003e40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e44:	4a28      	ldr	r2, [pc, #160]	; (8003ee8 <HAL_RCC_OscConfig+0x3f0>)
 8003e46:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8003e48:	4b28      	ldr	r3, [pc, #160]	; (8003eec <HAL_RCC_OscConfig+0x3f4>)
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003e4e:	f7fd fdd1 	bl	80019f4 <HAL_GetTick>
 8003e52:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e54:	4d24      	ldr	r5, [pc, #144]	; (8003ee8 <HAL_RCC_OscConfig+0x3f0>)
 8003e56:	682b      	ldr	r3, [r5, #0]
 8003e58:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003e5c:	d106      	bne.n	8003e6c <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e5e:	f7fd fdc9 	bl	80019f4 <HAL_GetTick>
 8003e62:	1b00      	subs	r0, r0, r4
 8003e64:	2802      	cmp	r0, #2
 8003e66:	d9f6      	bls.n	8003e56 <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 8003e68:	2003      	movs	r0, #3
 8003e6a:	e030      	b.n	8003ece <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003e6c:	2000      	movs	r0, #0
 8003e6e:	e02e      	b.n	8003ece <HAL_RCC_OscConfig+0x3d6>
 8003e70:	2000      	movs	r0, #0
 8003e72:	e02c      	b.n	8003ece <HAL_RCC_OscConfig+0x3d6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d02d      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 8003e78:	4b1b      	ldr	r3, [pc, #108]	; (8003ee8 <HAL_RCC_OscConfig+0x3f0>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e7c:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e80:	69e2      	ldr	r2, [r4, #28]
 8003e82:	4291      	cmp	r1, r2
 8003e84:	d128      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e8a:	6a21      	ldr	r1, [r4, #32]
 8003e8c:	428a      	cmp	r2, r1
 8003e8e:	d125      	bne.n	8003edc <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e90:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e92:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003e96:	401a      	ands	r2, r3
 8003e98:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003e9c:	d120      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e9e:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8003ea2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003ea4:	0852      	lsrs	r2, r2, #1
 8003ea6:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ea8:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003eac:	d11a      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x3ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003eae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003eb0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003eb4:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
        return HAL_ERROR;
 8003eb8:	bf14      	ite	ne
 8003eba:	2001      	movne	r0, #1
 8003ebc:	2000      	moveq	r0, #0
 8003ebe:	e006      	b.n	8003ece <HAL_RCC_OscConfig+0x3d6>
    return HAL_ERROR;
 8003ec0:	2001      	movs	r0, #1
}
 8003ec2:	4770      	bx	lr
        return HAL_ERROR;
 8003ec4:	2001      	movs	r0, #1
 8003ec6:	e002      	b.n	8003ece <HAL_RCC_OscConfig+0x3d6>
        return HAL_ERROR;
 8003ec8:	2001      	movs	r0, #1
 8003eca:	e000      	b.n	8003ece <HAL_RCC_OscConfig+0x3d6>
  return HAL_OK;
 8003ecc:	2000      	movs	r0, #0
}
 8003ece:	b002      	add	sp, #8
 8003ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8003ed4:	2001      	movs	r0, #1
 8003ed6:	e7fa      	b.n	8003ece <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
 8003ed8:	2001      	movs	r0, #1
 8003eda:	e7f8      	b.n	8003ece <HAL_RCC_OscConfig+0x3d6>
 8003edc:	2001      	movs	r0, #1
 8003ede:	e7f6      	b.n	8003ece <HAL_RCC_OscConfig+0x3d6>
 8003ee0:	2001      	movs	r0, #1
 8003ee2:	e7f4      	b.n	8003ece <HAL_RCC_OscConfig+0x3d6>
 8003ee4:	2001      	movs	r0, #1
 8003ee6:	e7f2      	b.n	8003ece <HAL_RCC_OscConfig+0x3d6>
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	42470000 	.word	0x42470000

08003ef0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ef0:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ef2:	4b31      	ldr	r3, [pc, #196]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d057      	beq.n	8003fae <HAL_RCC_GetSysClockFreq+0xbe>
 8003efe:	2b08      	cmp	r3, #8
 8003f00:	d157      	bne.n	8003fb2 <HAL_RCC_GetSysClockFreq+0xc2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f02:	4b2d      	ldr	r3, [pc, #180]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003f10:	d02a      	beq.n	8003f68 <HAL_RCC_GetSysClockFreq+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f12:	4b29      	ldr	r3, [pc, #164]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f14:	6859      	ldr	r1, [r3, #4]
 8003f16:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8003f1a:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8003f1e:	ebb1 000c 	subs.w	r0, r1, ip
 8003f22:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8003f26:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8003f2a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f2e:	0181      	lsls	r1, r0, #6
 8003f30:	1a09      	subs	r1, r1, r0
 8003f32:	eb63 030e 	sbc.w	r3, r3, lr
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f3c:	00c9      	lsls	r1, r1, #3
 8003f3e:	eb11 0c0c 	adds.w	ip, r1, ip
 8003f42:	f143 0300 	adc.w	r3, r3, #0
 8003f46:	0259      	lsls	r1, r3, #9
 8003f48:	2300      	movs	r3, #0
 8003f4a:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8003f4e:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8003f52:	f7fc f939 	bl	80001c8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f56:	4b18      	ldr	r3, [pc, #96]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003f5e:	3301      	adds	r3, #1
 8003f60:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003f62:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8003f66:	e025      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0xc4>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f68:	4b13      	ldr	r3, [pc, #76]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f6a:	6859      	ldr	r1, [r3, #4]
 8003f6c:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8003f70:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8003f74:	ebb1 000c 	subs.w	r0, r1, ip
 8003f78:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8003f7c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8003f80:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f84:	0181      	lsls	r1, r0, #6
 8003f86:	1a09      	subs	r1, r1, r0
 8003f88:	eb63 030e 	sbc.w	r3, r3, lr
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f92:	00c9      	lsls	r1, r1, #3
 8003f94:	eb11 0c0c 	adds.w	ip, r1, ip
 8003f98:	f143 0300 	adc.w	r3, r3, #0
 8003f9c:	0299      	lsls	r1, r3, #10
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8003fa4:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8003fa8:	f7fc f90e 	bl	80001c8 <__aeabi_uldivmod>
 8003fac:	e7d3      	b.n	8003f56 <HAL_RCC_GetSysClockFreq+0x66>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fae:	4803      	ldr	r0, [pc, #12]	; (8003fbc <HAL_RCC_GetSysClockFreq+0xcc>)
 8003fb0:	e000      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0xc4>
      sysclockfreq = HSI_VALUE;
 8003fb2:	4803      	ldr	r0, [pc, #12]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003fb4:	bd08      	pop	{r3, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	007a1200 	.word	0x007a1200
 8003fc0:	00f42400 	.word	0x00f42400

08003fc4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	f000 809d 	beq.w	8004104 <HAL_RCC_ClockConfig+0x140>
{
 8003fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fce:	460d      	mov	r5, r1
 8003fd0:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fd2:	4b50      	ldr	r3, [pc, #320]	; (8004114 <HAL_RCC_ClockConfig+0x150>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	428b      	cmp	r3, r1
 8003fdc:	d208      	bcs.n	8003ff0 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fde:	b2cb      	uxtb	r3, r1
 8003fe0:	4a4c      	ldr	r2, [pc, #304]	; (8004114 <HAL_RCC_ClockConfig+0x150>)
 8003fe2:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe4:	6813      	ldr	r3, [r2, #0]
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	428b      	cmp	r3, r1
 8003fec:	f040 808c 	bne.w	8004108 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff0:	6823      	ldr	r3, [r4, #0]
 8003ff2:	f013 0f02 	tst.w	r3, #2
 8003ff6:	d017      	beq.n	8004028 <HAL_RCC_ClockConfig+0x64>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff8:	f013 0f04 	tst.w	r3, #4
 8003ffc:	d004      	beq.n	8004008 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ffe:	4a46      	ldr	r2, [pc, #280]	; (8004118 <HAL_RCC_ClockConfig+0x154>)
 8004000:	6893      	ldr	r3, [r2, #8]
 8004002:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004006:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004008:	6823      	ldr	r3, [r4, #0]
 800400a:	f013 0f08 	tst.w	r3, #8
 800400e:	d004      	beq.n	800401a <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004010:	4a41      	ldr	r2, [pc, #260]	; (8004118 <HAL_RCC_ClockConfig+0x154>)
 8004012:	6893      	ldr	r3, [r2, #8]
 8004014:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004018:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800401a:	4a3f      	ldr	r2, [pc, #252]	; (8004118 <HAL_RCC_ClockConfig+0x154>)
 800401c:	6893      	ldr	r3, [r2, #8]
 800401e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004022:	68a1      	ldr	r1, [r4, #8]
 8004024:	430b      	orrs	r3, r1
 8004026:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004028:	6823      	ldr	r3, [r4, #0]
 800402a:	f013 0f01 	tst.w	r3, #1
 800402e:	d032      	beq.n	8004096 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004030:	6862      	ldr	r2, [r4, #4]
 8004032:	2a01      	cmp	r2, #1
 8004034:	d021      	beq.n	800407a <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004036:	1e93      	subs	r3, r2, #2
 8004038:	2b01      	cmp	r3, #1
 800403a:	d925      	bls.n	8004088 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800403c:	4b36      	ldr	r3, [pc, #216]	; (8004118 <HAL_RCC_ClockConfig+0x154>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f013 0f02 	tst.w	r3, #2
 8004044:	d062      	beq.n	800410c <HAL_RCC_ClockConfig+0x148>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004046:	4934      	ldr	r1, [pc, #208]	; (8004118 <HAL_RCC_ClockConfig+0x154>)
 8004048:	688b      	ldr	r3, [r1, #8]
 800404a:	f023 0303 	bic.w	r3, r3, #3
 800404e:	4313      	orrs	r3, r2
 8004050:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004052:	f7fd fccf 	bl	80019f4 <HAL_GetTick>
 8004056:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004058:	4f2f      	ldr	r7, [pc, #188]	; (8004118 <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800405a:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f003 030c 	and.w	r3, r3, #12
 8004064:	6862      	ldr	r2, [r4, #4]
 8004066:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800406a:	d014      	beq.n	8004096 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800406c:	f7fd fcc2 	bl	80019f4 <HAL_GetTick>
 8004070:	1b80      	subs	r0, r0, r6
 8004072:	4540      	cmp	r0, r8
 8004074:	d9f3      	bls.n	800405e <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 8004076:	2003      	movs	r0, #3
 8004078:	e042      	b.n	8004100 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800407a:	4b27      	ldr	r3, [pc, #156]	; (8004118 <HAL_RCC_ClockConfig+0x154>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004082:	d1e0      	bne.n	8004046 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8004084:	2001      	movs	r0, #1
 8004086:	e03b      	b.n	8004100 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004088:	4b23      	ldr	r3, [pc, #140]	; (8004118 <HAL_RCC_ClockConfig+0x154>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004090:	d1d9      	bne.n	8004046 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8004092:	2001      	movs	r0, #1
 8004094:	e034      	b.n	8004100 <HAL_RCC_ClockConfig+0x13c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004096:	4b1f      	ldr	r3, [pc, #124]	; (8004114 <HAL_RCC_ClockConfig+0x150>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	42ab      	cmp	r3, r5
 80040a0:	d907      	bls.n	80040b2 <HAL_RCC_ClockConfig+0xee>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a2:	b2ea      	uxtb	r2, r5
 80040a4:	4b1b      	ldr	r3, [pc, #108]	; (8004114 <HAL_RCC_ClockConfig+0x150>)
 80040a6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0307 	and.w	r3, r3, #7
 80040ae:	42ab      	cmp	r3, r5
 80040b0:	d12e      	bne.n	8004110 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	f013 0f04 	tst.w	r3, #4
 80040b8:	d006      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x104>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040ba:	4a17      	ldr	r2, [pc, #92]	; (8004118 <HAL_RCC_ClockConfig+0x154>)
 80040bc:	6893      	ldr	r3, [r2, #8]
 80040be:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80040c2:	68e1      	ldr	r1, [r4, #12]
 80040c4:	430b      	orrs	r3, r1
 80040c6:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c8:	6823      	ldr	r3, [r4, #0]
 80040ca:	f013 0f08 	tst.w	r3, #8
 80040ce:	d007      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x11c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040d0:	4a11      	ldr	r2, [pc, #68]	; (8004118 <HAL_RCC_ClockConfig+0x154>)
 80040d2:	6893      	ldr	r3, [r2, #8]
 80040d4:	6921      	ldr	r1, [r4, #16]
 80040d6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80040da:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80040de:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040e0:	f7ff ff06 	bl	8003ef0 <HAL_RCC_GetSysClockFreq>
 80040e4:	4b0c      	ldr	r3, [pc, #48]	; (8004118 <HAL_RCC_ClockConfig+0x154>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80040ec:	4a0b      	ldr	r2, [pc, #44]	; (800411c <HAL_RCC_ClockConfig+0x158>)
 80040ee:	5cd3      	ldrb	r3, [r2, r3]
 80040f0:	40d8      	lsrs	r0, r3
 80040f2:	4b0b      	ldr	r3, [pc, #44]	; (8004120 <HAL_RCC_ClockConfig+0x15c>)
 80040f4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80040f6:	4b0b      	ldr	r3, [pc, #44]	; (8004124 <HAL_RCC_ClockConfig+0x160>)
 80040f8:	6818      	ldr	r0, [r3, #0]
 80040fa:	f7fd fc2f 	bl	800195c <HAL_InitTick>
  return HAL_OK;
 80040fe:	2000      	movs	r0, #0
}
 8004100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8004104:	2001      	movs	r0, #1
}
 8004106:	4770      	bx	lr
      return HAL_ERROR;
 8004108:	2001      	movs	r0, #1
 800410a:	e7f9      	b.n	8004100 <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 800410c:	2001      	movs	r0, #1
 800410e:	e7f7      	b.n	8004100 <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 8004110:	2001      	movs	r0, #1
 8004112:	e7f5      	b.n	8004100 <HAL_RCC_ClockConfig+0x13c>
 8004114:	40023c00 	.word	0x40023c00
 8004118:	40023800 	.word	0x40023800
 800411c:	08007a48 	.word	0x08007a48
 8004120:	20000008 	.word	0x20000008
 8004124:	20000210 	.word	0x20000210

08004128 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004128:	4b04      	ldr	r3, [pc, #16]	; (800413c <HAL_RCC_GetPCLK1Freq+0x14>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004130:	4a03      	ldr	r2, [pc, #12]	; (8004140 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004132:	5cd3      	ldrb	r3, [r2, r3]
 8004134:	4a03      	ldr	r2, [pc, #12]	; (8004144 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004136:	6810      	ldr	r0, [r2, #0]
}
 8004138:	40d8      	lsrs	r0, r3
 800413a:	4770      	bx	lr
 800413c:	40023800 	.word	0x40023800
 8004140:	08007a58 	.word	0x08007a58
 8004144:	20000008 	.word	0x20000008

08004148 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004148:	4b04      	ldr	r3, [pc, #16]	; (800415c <HAL_RCC_GetPCLK2Freq+0x14>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004150:	4a03      	ldr	r2, [pc, #12]	; (8004160 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004152:	5cd3      	ldrb	r3, [r2, r3]
 8004154:	4a03      	ldr	r2, [pc, #12]	; (8004164 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004156:	6810      	ldr	r0, [r2, #0]
}
 8004158:	40d8      	lsrs	r0, r3
 800415a:	4770      	bx	lr
 800415c:	40023800 	.word	0x40023800
 8004160:	08007a58 	.word	0x08007a58
 8004164:	20000008 	.word	0x20000008

08004168 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800416a:	b083      	sub	sp, #12
 800416c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800416e:	6803      	ldr	r3, [r0, #0]
 8004170:	f013 0f05 	tst.w	r3, #5
 8004174:	d106      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004176:	6823      	ldr	r3, [r4, #0]
 8004178:	f013 0f02 	tst.w	r3, #2
 800417c:	d12e      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x74>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800417e:	2000      	movs	r0, #0
}
 8004180:	b003      	add	sp, #12
 8004182:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8004184:	4b4a      	ldr	r3, [pc, #296]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8004186:	2200      	movs	r2, #0
 8004188:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 800418a:	f7fd fc33 	bl	80019f4 <HAL_GetTick>
 800418e:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004190:	4e48      	ldr	r6, [pc, #288]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004192:	6833      	ldr	r3, [r6, #0]
 8004194:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004198:	d006      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800419a:	f7fd fc2b 	bl	80019f4 <HAL_GetTick>
 800419e:	1b43      	subs	r3, r0, r5
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d9f6      	bls.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x2a>
        return HAL_TIMEOUT;
 80041a4:	2003      	movs	r0, #3
 80041a6:	e7eb      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80041a8:	6862      	ldr	r2, [r4, #4]
 80041aa:	68a3      	ldr	r3, [r4, #8]
 80041ac:	071b      	lsls	r3, r3, #28
 80041ae:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80041b2:	4a40      	ldr	r2, [pc, #256]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80041b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80041b8:	4b3d      	ldr	r3, [pc, #244]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80041ba:	2201      	movs	r2, #1
 80041bc:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 80041be:	f7fd fc19 	bl	80019f4 <HAL_GetTick>
 80041c2:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041c4:	4e3b      	ldr	r6, [pc, #236]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80041c6:	6833      	ldr	r3, [r6, #0]
 80041c8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80041cc:	d1d3      	bne.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041ce:	f7fd fc11 	bl	80019f4 <HAL_GetTick>
 80041d2:	1b43      	subs	r3, r0, r5
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d9f6      	bls.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
        return HAL_TIMEOUT;
 80041d8:	2003      	movs	r0, #3
 80041da:	e7d1      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PWR_CLK_ENABLE();
 80041dc:	2300      	movs	r3, #0
 80041de:	9301      	str	r3, [sp, #4]
 80041e0:	4b34      	ldr	r3, [pc, #208]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80041e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041e4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80041e8:	641a      	str	r2, [r3, #64]	; 0x40
 80041ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f0:	9301      	str	r3, [sp, #4]
 80041f2:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80041f4:	4a30      	ldr	r2, [pc, #192]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80041f6:	6813      	ldr	r3, [r2, #0]
 80041f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041fc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80041fe:	f7fd fbf9 	bl	80019f4 <HAL_GetTick>
 8004202:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004204:	4e2c      	ldr	r6, [pc, #176]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004206:	6833      	ldr	r3, [r6, #0]
 8004208:	f413 7f80 	tst.w	r3, #256	; 0x100
 800420c:	d106      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xb4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800420e:	f7fd fbf1 	bl	80019f4 <HAL_GetTick>
 8004212:	1b43      	subs	r3, r0, r5
 8004214:	2b02      	cmp	r3, #2
 8004216:	d9f6      	bls.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        return HAL_TIMEOUT;
 8004218:	2003      	movs	r0, #3
 800421a:	e7b1      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x18>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800421c:	4b25      	ldr	r3, [pc, #148]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800421e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004220:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004224:	d014      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004226:	68e2      	ldr	r2, [r4, #12]
 8004228:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800422c:	429a      	cmp	r2, r3
 800422e:	d00f      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004230:	4b20      	ldr	r3, [pc, #128]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004232:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004234:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8004238:	491d      	ldr	r1, [pc, #116]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800423a:	2001      	movs	r0, #1
 800423c:	f8c1 0e40 	str.w	r0, [r1, #3648]	; 0xe40
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004240:	2000      	movs	r0, #0
 8004242:	f8c1 0e40 	str.w	r0, [r1, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 8004246:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424a:	f013 0f01 	tst.w	r3, #1
 800424e:	d113      	bne.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004250:	68e3      	ldr	r3, [r4, #12]
 8004252:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004256:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800425a:	d01e      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x132>
 800425c:	4a15      	ldr	r2, [pc, #84]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800425e:	6893      	ldr	r3, [r2, #8]
 8004260:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004264:	6093      	str	r3, [r2, #8]
 8004266:	4a13      	ldr	r2, [pc, #76]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004268:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800426a:	68e3      	ldr	r3, [r4, #12]
 800426c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004270:	430b      	orrs	r3, r1
 8004272:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 8004274:	2000      	movs	r0, #0
 8004276:	e783      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x18>
        tickstart = HAL_GetTick();
 8004278:	f7fd fbbc 	bl	80019f4 <HAL_GetTick>
 800427c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800427e:	4e0d      	ldr	r6, [pc, #52]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004280:	f241 3788 	movw	r7, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004284:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004286:	f013 0f02 	tst.w	r3, #2
 800428a:	d1e1      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800428c:	f7fd fbb2 	bl	80019f4 <HAL_GetTick>
 8004290:	1b40      	subs	r0, r0, r5
 8004292:	42b8      	cmp	r0, r7
 8004294:	d9f6      	bls.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x11c>
            return HAL_TIMEOUT;
 8004296:	2003      	movs	r0, #3
 8004298:	e772      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800429a:	4906      	ldr	r1, [pc, #24]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800429c:	688a      	ldr	r2, [r1, #8]
 800429e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80042a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80042a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042aa:	4313      	orrs	r3, r2
 80042ac:	608b      	str	r3, [r1, #8]
 80042ae:	e7da      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80042b0:	42470000 	.word	0x42470000
 80042b4:	40023800 	.word	0x40023800
 80042b8:	40007000 	.word	0x40007000

080042bc <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 80042bc:	2801      	cmp	r0, #1
 80042be:	d001      	beq.n	80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8>
  uint32_t frequency = 0U;
 80042c0:	2000      	movs	r0, #0
 80042c2:	4770      	bx	lr
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80042c4:	4b10      	ldr	r3, [pc, #64]	; (8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 80042c6:	689b      	ldr	r3, [r3, #8]
      switch (srcclk)
 80042c8:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80042cc:	d001      	beq.n	80042d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16>
 80042ce:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 80042d0:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80042d2:	4b0d      	ldr	r3, [pc, #52]	; (8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80042da:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80042e2:	bf14      	ite	ne
 80042e4:	4809      	ldrne	r0, [pc, #36]	; (800430c <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80042e6:	480a      	ldreq	r0, [pc, #40]	; (8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
 80042e8:	fbb0 f2f2 	udiv	r2, r0, r2
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80042ec:	4b06      	ldr	r3, [pc, #24]	; (8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 80042ee:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80042f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80042f6:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80042fa:	fb02 f000 	mul.w	r0, r2, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80042fe:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8004302:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 8004306:	4770      	bx	lr
 8004308:	40023800 	.word	0x40023800
 800430c:	007a1200 	.word	0x007a1200
 8004310:	00f42400 	.word	0x00f42400

08004314 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004314:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004316:	f102 030c 	add.w	r3, r2, #12
 800431a:	e853 3f00 	ldrex	r3, [r3]
 800431e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004322:	320c      	adds	r2, #12
 8004324:	e842 3100 	strex	r1, r3, [r2]
 8004328:	2900      	cmp	r1, #0
 800432a:	d1f3      	bne.n	8004314 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	f102 0314 	add.w	r3, r2, #20
 8004332:	e853 3f00 	ldrex	r3, [r3]
 8004336:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433a:	3214      	adds	r2, #20
 800433c:	e842 3100 	strex	r1, r3, [r2]
 8004340:	2900      	cmp	r1, #0
 8004342:	d1f3      	bne.n	800432c <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004344:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004346:	2b01      	cmp	r3, #1
 8004348:	d005      	beq.n	8004356 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800434a:	2320      	movs	r3, #32
 800434c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004350:	2300      	movs	r3, #0
 8004352:	6303      	str	r3, [r0, #48]	; 0x30
}
 8004354:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004356:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004358:	f102 030c 	add.w	r3, r2, #12
 800435c:	e853 3f00 	ldrex	r3, [r3]
 8004360:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004364:	320c      	adds	r2, #12
 8004366:	e842 3100 	strex	r1, r3, [r2]
 800436a:	2900      	cmp	r1, #0
 800436c:	d1f3      	bne.n	8004356 <UART_EndRxTransfer+0x42>
 800436e:	e7ec      	b.n	800434a <UART_EndRxTransfer+0x36>

08004370 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004370:	b538      	push	{r3, r4, r5, lr}
 8004372:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004374:	6802      	ldr	r2, [r0, #0]
 8004376:	6913      	ldr	r3, [r2, #16]
 8004378:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800437c:	68c1      	ldr	r1, [r0, #12]
 800437e:	430b      	orrs	r3, r1
 8004380:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 8004382:	6801      	ldr	r1, [r0, #0]
 8004384:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004386:	6883      	ldr	r3, [r0, #8]
 8004388:	6900      	ldr	r0, [r0, #16]
 800438a:	4303      	orrs	r3, r0
 800438c:	6960      	ldr	r0, [r4, #20]
 800438e:	4303      	orrs	r3, r0
 8004390:	69e0      	ldr	r0, [r4, #28]
 8004392:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8004394:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8004398:	f022 020c 	bic.w	r2, r2, #12
 800439c:	4313      	orrs	r3, r2
 800439e:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043a0:	6822      	ldr	r2, [r4, #0]
 80043a2:	6953      	ldr	r3, [r2, #20]
 80043a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043a8:	69a1      	ldr	r1, [r4, #24]
 80043aa:	430b      	orrs	r3, r1
 80043ac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043ae:	6823      	ldr	r3, [r4, #0]
 80043b0:	4a2e      	ldr	r2, [pc, #184]	; (800446c <UART_SetConfig+0xfc>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d006      	beq.n	80043c4 <UART_SetConfig+0x54>
 80043b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d002      	beq.n	80043c4 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043be:	f7ff feb3 	bl	8004128 <HAL_RCC_GetPCLK1Freq>
 80043c2:	e001      	b.n	80043c8 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 80043c4:	f7ff fec0 	bl	8004148 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043c8:	69e3      	ldr	r3, [r4, #28]
 80043ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ce:	d024      	beq.n	800441a <UART_SetConfig+0xaa>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043d0:	2100      	movs	r1, #0
 80043d2:	1803      	adds	r3, r0, r0
 80043d4:	4149      	adcs	r1, r1
 80043d6:	181b      	adds	r3, r3, r0
 80043d8:	f141 0100 	adc.w	r1, r1, #0
 80043dc:	00c9      	lsls	r1, r1, #3
 80043de:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	1818      	adds	r0, r3, r0
 80043e6:	6863      	ldr	r3, [r4, #4]
 80043e8:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80043ec:	ea4f 7393 	mov.w	r3, r3, lsr #30
 80043f0:	f141 0100 	adc.w	r1, r1, #0
 80043f4:	f7fb fee8 	bl	80001c8 <__aeabi_uldivmod>
 80043f8:	6821      	ldr	r1, [r4, #0]
 80043fa:	4a1d      	ldr	r2, [pc, #116]	; (8004470 <UART_SetConfig+0x100>)
 80043fc:	fba2 4300 	umull	r4, r3, r2, r0
 8004400:	095b      	lsrs	r3, r3, #5
 8004402:	2464      	movs	r4, #100	; 0x64
 8004404:	fb04 0013 	mls	r0, r4, r3, r0
 8004408:	0100      	lsls	r0, r0, #4
 800440a:	3032      	adds	r0, #50	; 0x32
 800440c:	fba2 2000 	umull	r2, r0, r2, r0
 8004410:	011b      	lsls	r3, r3, #4
 8004412:	eb03 1050 	add.w	r0, r3, r0, lsr #5
 8004416:	6088      	str	r0, [r1, #8]
  }
}
 8004418:	bd38      	pop	{r3, r4, r5, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800441a:	2300      	movs	r3, #0
 800441c:	1802      	adds	r2, r0, r0
 800441e:	eb43 0103 	adc.w	r1, r3, r3
 8004422:	1812      	adds	r2, r2, r0
 8004424:	f141 0100 	adc.w	r1, r1, #0
 8004428:	00c9      	lsls	r1, r1, #3
 800442a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800442e:	00d2      	lsls	r2, r2, #3
 8004430:	1810      	adds	r0, r2, r0
 8004432:	f141 0100 	adc.w	r1, r1, #0
 8004436:	6862      	ldr	r2, [r4, #4]
 8004438:	1892      	adds	r2, r2, r2
 800443a:	415b      	adcs	r3, r3
 800443c:	f7fb fec4 	bl	80001c8 <__aeabi_uldivmod>
 8004440:	4d0b      	ldr	r5, [pc, #44]	; (8004470 <UART_SetConfig+0x100>)
 8004442:	fba5 3200 	umull	r3, r2, r5, r0
 8004446:	0951      	lsrs	r1, r2, #5
 8004448:	2364      	movs	r3, #100	; 0x64
 800444a:	fb03 0311 	mls	r3, r3, r1, r0
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	3332      	adds	r3, #50	; 0x32
 8004452:	fba5 2303 	umull	r2, r3, r5, r3
 8004456:	6820      	ldr	r0, [r4, #0]
 8004458:	f3c3 1242 	ubfx	r2, r3, #5, #3
 800445c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004460:	091b      	lsrs	r3, r3, #4
 8004462:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004466:	4413      	add	r3, r2
 8004468:	6083      	str	r3, [r0, #8]
 800446a:	e7d5      	b.n	8004418 <UART_SetConfig+0xa8>
 800446c:	40011000 	.word	0x40011000
 8004470:	51eb851f 	.word	0x51eb851f

08004474 <UART_WaitOnFlagUntilTimeout>:
{
 8004474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004478:	4680      	mov	r8, r0
 800447a:	460e      	mov	r6, r1
 800447c:	4615      	mov	r5, r2
 800447e:	4699      	mov	r9, r3
 8004480:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004482:	f8d8 2000 	ldr.w	r2, [r8]
 8004486:	6814      	ldr	r4, [r2, #0]
 8004488:	ea36 0304 	bics.w	r3, r6, r4
 800448c:	bf0c      	ite	eq
 800448e:	f04f 0c01 	moveq.w	ip, #1
 8004492:	f04f 0c00 	movne.w	ip, #0
 8004496:	45ac      	cmp	ip, r5
 8004498:	d12d      	bne.n	80044f6 <UART_WaitOnFlagUntilTimeout+0x82>
    if (Timeout != HAL_MAX_DELAY)
 800449a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 800449e:	d0f2      	beq.n	8004486 <UART_WaitOnFlagUntilTimeout+0x12>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80044a0:	b12f      	cbz	r7, 80044ae <UART_WaitOnFlagUntilTimeout+0x3a>
 80044a2:	f7fd faa7 	bl	80019f4 <HAL_GetTick>
 80044a6:	eba0 0009 	sub.w	r0, r0, r9
 80044aa:	42b8      	cmp	r0, r7
 80044ac:	d9e9      	bls.n	8004482 <UART_WaitOnFlagUntilTimeout+0xe>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044ae:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b2:	f102 030c 	add.w	r3, r2, #12
 80044b6:	e853 3f00 	ldrex	r3, [r3]
 80044ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044be:	320c      	adds	r2, #12
 80044c0:	e842 3100 	strex	r1, r3, [r2]
 80044c4:	2900      	cmp	r1, #0
 80044c6:	d1f2      	bne.n	80044ae <UART_WaitOnFlagUntilTimeout+0x3a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c8:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044cc:	f102 0314 	add.w	r3, r2, #20
 80044d0:	e853 3f00 	ldrex	r3, [r3]
 80044d4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d8:	3214      	adds	r2, #20
 80044da:	e842 3100 	strex	r1, r3, [r2]
 80044de:	2900      	cmp	r1, #0
 80044e0:	d1f2      	bne.n	80044c8 <UART_WaitOnFlagUntilTimeout+0x54>
        huart->gState  = HAL_UART_STATE_READY;
 80044e2:	2320      	movs	r3, #32
 80044e4:	f888 303d 	strb.w	r3, [r8, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80044e8:	f888 303e 	strb.w	r3, [r8, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 80044ec:	2300      	movs	r3, #0
 80044ee:	f888 303c 	strb.w	r3, [r8, #60]	; 0x3c
        return HAL_TIMEOUT;
 80044f2:	2003      	movs	r0, #3
 80044f4:	e000      	b.n	80044f8 <UART_WaitOnFlagUntilTimeout+0x84>
  return HAL_OK;
 80044f6:	2000      	movs	r0, #0
}
 80044f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080044fc <HAL_UART_Init>:
  if (huart == NULL)
 80044fc:	b358      	cbz	r0, 8004556 <HAL_UART_Init+0x5a>
{
 80044fe:	b510      	push	{r4, lr}
 8004500:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004502:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004506:	b30b      	cbz	r3, 800454c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8004508:	2324      	movs	r3, #36	; 0x24
 800450a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800450e:	6822      	ldr	r2, [r4, #0]
 8004510:	68d3      	ldr	r3, [r2, #12]
 8004512:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004516:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004518:	4620      	mov	r0, r4
 800451a:	f7ff ff29 	bl	8004370 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800451e:	6822      	ldr	r2, [r4, #0]
 8004520:	6913      	ldr	r3, [r2, #16]
 8004522:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004526:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004528:	6822      	ldr	r2, [r4, #0]
 800452a:	6953      	ldr	r3, [r2, #20]
 800452c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004530:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004532:	6822      	ldr	r2, [r4, #0]
 8004534:	68d3      	ldr	r3, [r2, #12]
 8004536:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800453a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800453c:	2000      	movs	r0, #0
 800453e:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004540:	2320      	movs	r3, #32
 8004542:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004546:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800454a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800454c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8004550:	f7fc fdaa 	bl	80010a8 <HAL_UART_MspInit>
 8004554:	e7d8      	b.n	8004508 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8004556:	2001      	movs	r0, #1
}
 8004558:	4770      	bx	lr

0800455a <HAL_UART_Transmit>:
{
 800455a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004562:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b20      	cmp	r3, #32
 800456a:	d15a      	bne.n	8004622 <HAL_UART_Transmit+0xc8>
 800456c:	4604      	mov	r4, r0
 800456e:	460d      	mov	r5, r1
 8004570:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8004572:	2900      	cmp	r1, #0
 8004574:	d059      	beq.n	800462a <HAL_UART_Transmit+0xd0>
 8004576:	2a00      	cmp	r2, #0
 8004578:	d059      	beq.n	800462e <HAL_UART_Transmit+0xd4>
    __HAL_LOCK(huart);
 800457a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800457e:	2b01      	cmp	r3, #1
 8004580:	d057      	beq.n	8004632 <HAL_UART_Transmit+0xd8>
 8004582:	2301      	movs	r3, #1
 8004584:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004588:	2300      	movs	r3, #0
 800458a:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800458c:	2321      	movs	r3, #33	; 0x21
 800458e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8004592:	f7fd fa2f 	bl	80019f4 <HAL_GetTick>
 8004596:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8004598:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800459c:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045a0:	68a3      	ldr	r3, [r4, #8]
 80045a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a6:	d00c      	beq.n	80045c2 <HAL_UART_Transmit+0x68>
      pdata16bits = NULL;
 80045a8:	f04f 0a00 	mov.w	sl, #0
    __HAL_UNLOCK(huart);
 80045ac:	2300      	movs	r3, #0
 80045ae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 80045b2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	b343      	cbz	r3, 800460a <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045b8:	f04f 0900 	mov.w	r9, #0
 80045bc:	f04f 0880 	mov.w	r8, #128	; 0x80
 80045c0:	e014      	b.n	80045ec <HAL_UART_Transmit+0x92>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045c2:	6923      	ldr	r3, [r4, #16]
 80045c4:	b913      	cbnz	r3, 80045cc <HAL_UART_Transmit+0x72>
      pdata16bits = (const uint16_t *) pData;
 80045c6:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 80045c8:	2500      	movs	r5, #0
 80045ca:	e7ef      	b.n	80045ac <HAL_UART_Transmit+0x52>
      pdata16bits = NULL;
 80045cc:	f04f 0a00 	mov.w	sl, #0
 80045d0:	e7ec      	b.n	80045ac <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045d2:	6822      	ldr	r2, [r4, #0]
 80045d4:	f83a 3b02 	ldrh.w	r3, [sl], #2
 80045d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045dc:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80045de:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80045e0:	3a01      	subs	r2, #1
 80045e2:	b292      	uxth	r2, r2
 80045e4:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80045e6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	b173      	cbz	r3, 800460a <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045ec:	9600      	str	r6, [sp, #0]
 80045ee:	463b      	mov	r3, r7
 80045f0:	464a      	mov	r2, r9
 80045f2:	4641      	mov	r1, r8
 80045f4:	4620      	mov	r0, r4
 80045f6:	f7ff ff3d 	bl	8004474 <UART_WaitOnFlagUntilTimeout>
 80045fa:	b9e0      	cbnz	r0, 8004636 <HAL_UART_Transmit+0xdc>
      if (pdata8bits == NULL)
 80045fc:	2d00      	cmp	r5, #0
 80045fe:	d0e8      	beq.n	80045d2 <HAL_UART_Transmit+0x78>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004600:	6823      	ldr	r3, [r4, #0]
 8004602:	f815 2b01 	ldrb.w	r2, [r5], #1
 8004606:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004608:	e7e9      	b.n	80045de <HAL_UART_Transmit+0x84>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800460a:	9600      	str	r6, [sp, #0]
 800460c:	463b      	mov	r3, r7
 800460e:	2200      	movs	r2, #0
 8004610:	2140      	movs	r1, #64	; 0x40
 8004612:	4620      	mov	r0, r4
 8004614:	f7ff ff2e 	bl	8004474 <UART_WaitOnFlagUntilTimeout>
 8004618:	b978      	cbnz	r0, 800463a <HAL_UART_Transmit+0xe0>
    huart->gState = HAL_UART_STATE_READY;
 800461a:	2320      	movs	r3, #32
 800461c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8004620:	e000      	b.n	8004624 <HAL_UART_Transmit+0xca>
    return HAL_BUSY;
 8004622:	2002      	movs	r0, #2
}
 8004624:	b002      	add	sp, #8
 8004626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 800462a:	2001      	movs	r0, #1
 800462c:	e7fa      	b.n	8004624 <HAL_UART_Transmit+0xca>
 800462e:	2001      	movs	r0, #1
 8004630:	e7f8      	b.n	8004624 <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 8004632:	2002      	movs	r0, #2
 8004634:	e7f6      	b.n	8004624 <HAL_UART_Transmit+0xca>
        return HAL_TIMEOUT;
 8004636:	2003      	movs	r0, #3
 8004638:	e7f4      	b.n	8004624 <HAL_UART_Transmit+0xca>
      return HAL_TIMEOUT;
 800463a:	2003      	movs	r0, #3
 800463c:	e7f2      	b.n	8004624 <HAL_UART_Transmit+0xca>

0800463e <HAL_UART_ErrorCallback>:
}
 800463e:	4770      	bx	lr

08004640 <UART_DMAError>:
{
 8004640:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004642:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004644:	6823      	ldr	r3, [r4, #0]
 8004646:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004648:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b21      	cmp	r3, #33	; 0x21
 8004650:	d00e      	beq.n	8004670 <UART_DMAError+0x30>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	695a      	ldr	r2, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004656:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b22      	cmp	r3, #34	; 0x22
 800465e:	d01c      	beq.n	800469a <UART_DMAError+0x5a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004660:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004662:	f043 0310 	orr.w	r3, r3, #16
 8004666:	6423      	str	r3, [r4, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 8004668:	4620      	mov	r0, r4
 800466a:	f7ff ffe8 	bl	800463e <HAL_UART_ErrorCallback>
}
 800466e:	bd10      	pop	{r4, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004670:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004674:	d0ed      	beq.n	8004652 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8004676:	2300      	movs	r3, #0
 8004678:	84e3      	strh	r3, [r4, #38]	; 0x26
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800467a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467c:	f102 030c 	add.w	r3, r2, #12
 8004680:	e853 3f00 	ldrex	r3, [r3]
 8004684:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004688:	320c      	adds	r2, #12
 800468a:	e842 3100 	strex	r1, r3, [r2]
 800468e:	2900      	cmp	r1, #0
 8004690:	d1f3      	bne.n	800467a <UART_DMAError+0x3a>
  huart->gState = HAL_UART_STATE_READY;
 8004692:	2320      	movs	r3, #32
 8004694:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004698:	e7db      	b.n	8004652 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800469a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800469e:	d0df      	beq.n	8004660 <UART_DMAError+0x20>
    huart->RxXferCount = 0x00U;
 80046a0:	2300      	movs	r3, #0
 80046a2:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80046a4:	4620      	mov	r0, r4
 80046a6:	f7ff fe35 	bl	8004314 <UART_EndRxTransfer>
 80046aa:	e7d9      	b.n	8004660 <UART_DMAError+0x20>

080046ac <HAL_UARTEx_RxEventCallback>:
}
 80046ac:	4770      	bx	lr

080046ae <UART_DMARxHalfCplt>:
{
 80046ae:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046b0:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046b2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d002      	beq.n	80046be <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 80046b8:	f7fc f8e8 	bl	800088c <HAL_UART_RxHalfCpltCallback>
}
 80046bc:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80046be:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80046c0:	0849      	lsrs	r1, r1, #1
 80046c2:	f7ff fff3 	bl	80046ac <HAL_UARTEx_RxEventCallback>
 80046c6:	e7f9      	b.n	80046bc <UART_DMARxHalfCplt+0xe>

080046c8 <UART_DMAReceiveCplt>:
{
 80046c8:	b508      	push	{r3, lr}
 80046ca:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046cc:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80046d6:	d12b      	bne.n	8004730 <UART_DMAReceiveCplt+0x68>
    huart->RxXferCount = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	85c3      	strh	r3, [r0, #46]	; 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046dc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046de:	f102 030c 	add.w	r3, r2, #12
 80046e2:	e853 3f00 	ldrex	r3, [r3]
 80046e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ea:	320c      	adds	r2, #12
 80046ec:	e842 3100 	strex	r1, r3, [r2]
 80046f0:	2900      	cmp	r1, #0
 80046f2:	d1f3      	bne.n	80046dc <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f6:	f102 0314 	add.w	r3, r2, #20
 80046fa:	e853 3f00 	ldrex	r3, [r3]
 80046fe:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004702:	3214      	adds	r2, #20
 8004704:	e842 3100 	strex	r1, r3, [r2]
 8004708:	2900      	cmp	r1, #0
 800470a:	d1f3      	bne.n	80046f4 <UART_DMAReceiveCplt+0x2c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800470c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470e:	f102 0314 	add.w	r3, r2, #20
 8004712:	e853 3f00 	ldrex	r3, [r3]
 8004716:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471a:	3214      	adds	r2, #20
 800471c:	e842 3100 	strex	r1, r3, [r2]
 8004720:	2900      	cmp	r1, #0
 8004722:	d1f3      	bne.n	800470c <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 8004724:	2320      	movs	r3, #32
 8004726:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800472a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800472c:	2b01      	cmp	r3, #1
 800472e:	d005      	beq.n	800473c <UART_DMAReceiveCplt+0x74>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004730:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004732:	2b01      	cmp	r3, #1
 8004734:	d00f      	beq.n	8004756 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004736:	f7fc f8bb 	bl	80008b0 <HAL_UART_RxCpltCallback>
}
 800473a:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800473c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473e:	f102 030c 	add.w	r3, r2, #12
 8004742:	e853 3f00 	ldrex	r3, [r3]
 8004746:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474a:	320c      	adds	r2, #12
 800474c:	e842 3100 	strex	r1, r3, [r2]
 8004750:	2900      	cmp	r1, #0
 8004752:	d1f3      	bne.n	800473c <UART_DMAReceiveCplt+0x74>
 8004754:	e7ec      	b.n	8004730 <UART_DMAReceiveCplt+0x68>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004756:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004758:	f7ff ffa8 	bl	80046ac <HAL_UARTEx_RxEventCallback>
 800475c:	e7ed      	b.n	800473a <UART_DMAReceiveCplt+0x72>
	...

08004760 <UART_Start_Receive_DMA>:
{
 8004760:	b530      	push	{r4, r5, lr}
 8004762:	b083      	sub	sp, #12
 8004764:	4604      	mov	r4, r0
 8004766:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 8004768:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 800476a:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800476c:	2500      	movs	r5, #0
 800476e:	6405      	str	r5, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004770:	2222      	movs	r2, #34	; 0x22
 8004772:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004776:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004778:	4820      	ldr	r0, [pc, #128]	; (80047fc <UART_Start_Receive_DMA+0x9c>)
 800477a:	63d0      	str	r0, [r2, #60]	; 0x3c
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800477c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800477e:	4820      	ldr	r0, [pc, #128]	; (8004800 <UART_Start_Receive_DMA+0xa0>)
 8004780:	6410      	str	r0, [r2, #64]	; 0x40
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004782:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004784:	481f      	ldr	r0, [pc, #124]	; (8004804 <UART_Start_Receive_DMA+0xa4>)
 8004786:	64d0      	str	r0, [r2, #76]	; 0x4c
  huart->hdmarx->XferAbortCallback = NULL;
 8004788:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800478a:	6515      	str	r5, [r2, #80]	; 0x50
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800478c:	6820      	ldr	r0, [r4, #0]
 800478e:	460a      	mov	r2, r1
 8004790:	1d01      	adds	r1, r0, #4
 8004792:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004794:	f7fd fa6a 	bl	8001c6c <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004798:	9501      	str	r5, [sp, #4]
 800479a:	6823      	ldr	r3, [r4, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	9201      	str	r2, [sp, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	9301      	str	r3, [sp, #4]
 80047a4:	9b01      	ldr	r3, [sp, #4]
  __HAL_UNLOCK(huart);
 80047a6:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (huart->Init.Parity != UART_PARITY_NONE)
 80047aa:	6923      	ldr	r3, [r4, #16]
 80047ac:	b15b      	cbz	r3, 80047c6 <UART_Start_Receive_DMA+0x66>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047ae:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b0:	f102 030c 	add.w	r3, r2, #12
 80047b4:	e853 3f00 	ldrex	r3, [r3]
 80047b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047bc:	320c      	adds	r2, #12
 80047be:	e842 3100 	strex	r1, r3, [r2]
 80047c2:	2900      	cmp	r1, #0
 80047c4:	d1f3      	bne.n	80047ae <UART_Start_Receive_DMA+0x4e>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047c6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c8:	f102 0314 	add.w	r3, r2, #20
 80047cc:	e853 3f00 	ldrex	r3, [r3]
 80047d0:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d4:	3214      	adds	r2, #20
 80047d6:	e842 3100 	strex	r1, r3, [r2]
 80047da:	2900      	cmp	r1, #0
 80047dc:	d1f3      	bne.n	80047c6 <UART_Start_Receive_DMA+0x66>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047de:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e0:	f102 0314 	add.w	r3, r2, #20
 80047e4:	e853 3f00 	ldrex	r3, [r3]
 80047e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ec:	3214      	adds	r2, #20
 80047ee:	e842 3100 	strex	r1, r3, [r2]
 80047f2:	2900      	cmp	r1, #0
 80047f4:	d1f3      	bne.n	80047de <UART_Start_Receive_DMA+0x7e>
}
 80047f6:	2000      	movs	r0, #0
 80047f8:	b003      	add	sp, #12
 80047fa:	bd30      	pop	{r4, r5, pc}
 80047fc:	080046c9 	.word	0x080046c9
 8004800:	080046af 	.word	0x080046af
 8004804:	08004641 	.word	0x08004641

08004808 <HAL_UART_Receive_DMA>:
{
 8004808:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800480a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b20      	cmp	r3, #32
 8004812:	d10d      	bne.n	8004830 <HAL_UART_Receive_DMA+0x28>
    if ((pData == NULL) || (Size == 0U))
 8004814:	b171      	cbz	r1, 8004834 <HAL_UART_Receive_DMA+0x2c>
 8004816:	b17a      	cbz	r2, 8004838 <HAL_UART_Receive_DMA+0x30>
    __HAL_LOCK(huart);
 8004818:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800481c:	2b01      	cmp	r3, #1
 800481e:	d00d      	beq.n	800483c <HAL_UART_Receive_DMA+0x34>
 8004820:	2301      	movs	r3, #1
 8004822:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004826:	2300      	movs	r3, #0
 8004828:	6303      	str	r3, [r0, #48]	; 0x30
    return (UART_Start_Receive_DMA(huart, pData, Size));
 800482a:	f7ff ff99 	bl	8004760 <UART_Start_Receive_DMA>
 800482e:	e000      	b.n	8004832 <HAL_UART_Receive_DMA+0x2a>
    return HAL_BUSY;
 8004830:	2002      	movs	r0, #2
}
 8004832:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 8004834:	2001      	movs	r0, #1
 8004836:	e7fc      	b.n	8004832 <HAL_UART_Receive_DMA+0x2a>
 8004838:	2001      	movs	r0, #1
 800483a:	e7fa      	b.n	8004832 <HAL_UART_Receive_DMA+0x2a>
    __HAL_LOCK(huart);
 800483c:	2002      	movs	r0, #2
 800483e:	e7f8      	b.n	8004832 <HAL_UART_Receive_DMA+0x2a>

08004840 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004840:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8004842:	2300      	movs	r3, #0
 8004844:	9301      	str	r3, [sp, #4]
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 8004846:	4a11      	ldr	r2, [pc, #68]	; (800488c <USB_CoreReset+0x4c>)
    count++;
 8004848:	9b01      	ldr	r3, [sp, #4]
 800484a:	3301      	adds	r3, #1
 800484c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800484e:	9b01      	ldr	r3, [sp, #4]
 8004850:	4293      	cmp	r3, r2
 8004852:	d815      	bhi.n	8004880 <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004854:	6903      	ldr	r3, [r0, #16]
 8004856:	2b00      	cmp	r3, #0
 8004858:	daf6      	bge.n	8004848 <USB_CoreReset+0x8>

  /* Core Soft Reset */
  count = 0U;
 800485a:	2300      	movs	r3, #0
 800485c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800485e:	6903      	ldr	r3, [r0, #16]
 8004860:	f043 0301 	orr.w	r3, r3, #1
 8004864:	6103      	str	r3, [r0, #16]

  do
  {
    count++;

    if (count > 200000U)
 8004866:	4a09      	ldr	r2, [pc, #36]	; (800488c <USB_CoreReset+0x4c>)
    count++;
 8004868:	9b01      	ldr	r3, [sp, #4]
 800486a:	3301      	adds	r3, #1
 800486c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800486e:	9b01      	ldr	r3, [sp, #4]
 8004870:	4293      	cmp	r3, r2
 8004872:	d808      	bhi.n	8004886 <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004874:	6903      	ldr	r3, [r0, #16]
 8004876:	f013 0f01 	tst.w	r3, #1
 800487a:	d1f5      	bne.n	8004868 <USB_CoreReset+0x28>

  return HAL_OK;
 800487c:	2000      	movs	r0, #0
 800487e:	e000      	b.n	8004882 <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 8004880:	2003      	movs	r0, #3
}
 8004882:	b002      	add	sp, #8
 8004884:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004886:	2003      	movs	r0, #3
 8004888:	e7fb      	b.n	8004882 <USB_CoreReset+0x42>
 800488a:	bf00      	nop
 800488c:	00030d40 	.word	0x00030d40

08004890 <USB_CoreInit>:
{
 8004890:	b084      	sub	sp, #16
 8004892:	b510      	push	{r4, lr}
 8004894:	4604      	mov	r4, r0
 8004896:	a803      	add	r0, sp, #12
 8004898:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800489c:	9b08      	ldr	r3, [sp, #32]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d11f      	bne.n	80048e2 <USB_CoreInit+0x52>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80048a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048a8:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80048aa:	68e3      	ldr	r3, [r4, #12]
 80048ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80048b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048b4:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80048b6:	68e3      	ldr	r3, [r4, #12]
 80048b8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80048bc:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 80048be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d009      	beq.n	80048d8 <USB_CoreInit+0x48>
    ret = USB_CoreReset(USBx);
 80048c4:	4620      	mov	r0, r4
 80048c6:	f7ff ffbb 	bl	8004840 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80048ca:	9b06      	ldr	r3, [sp, #24]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d01b      	beq.n	8004908 <USB_CoreInit+0x78>
}
 80048d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048d4:	b004      	add	sp, #16
 80048d6:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80048d8:	68e3      	ldr	r3, [r4, #12]
 80048da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048de:	60e3      	str	r3, [r4, #12]
 80048e0:	e7f0      	b.n	80048c4 <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80048e2:	68e3      	ldr	r3, [r4, #12]
 80048e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048e8:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 80048ea:	4620      	mov	r0, r4
 80048ec:	f7ff ffa8 	bl	8004840 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 80048f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80048f2:	b923      	cbnz	r3, 80048fe <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80048f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80048f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048fa:	63a3      	str	r3, [r4, #56]	; 0x38
 80048fc:	e7e5      	b.n	80048ca <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004900:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004904:	63a3      	str	r3, [r4, #56]	; 0x38
 8004906:	e7e0      	b.n	80048ca <USB_CoreInit+0x3a>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004908:	68a3      	ldr	r3, [r4, #8]
 800490a:	f043 0306 	orr.w	r3, r3, #6
 800490e:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004910:	68a3      	ldr	r3, [r4, #8]
 8004912:	f043 0320 	orr.w	r3, r3, #32
 8004916:	60a3      	str	r3, [r4, #8]
 8004918:	e7da      	b.n	80048d0 <USB_CoreInit+0x40>

0800491a <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800491a:	6883      	ldr	r3, [r0, #8]
 800491c:	f043 0301 	orr.w	r3, r3, #1
 8004920:	6083      	str	r3, [r0, #8]
}
 8004922:	2000      	movs	r0, #0
 8004924:	4770      	bx	lr

08004926 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004926:	6883      	ldr	r3, [r0, #8]
 8004928:	f023 0301 	bic.w	r3, r3, #1
 800492c:	6083      	str	r3, [r0, #8]
}
 800492e:	2000      	movs	r0, #0
 8004930:	4770      	bx	lr

08004932 <USB_SetCurrentMode>:
{
 8004932:	b570      	push	{r4, r5, r6, lr}
 8004934:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004936:	68c3      	ldr	r3, [r0, #12]
 8004938:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800493c:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800493e:	2901      	cmp	r1, #1
 8004940:	d015      	beq.n	800496e <USB_SetCurrentMode+0x3c>
  else if (mode == USB_DEVICE_MODE)
 8004942:	bb29      	cbnz	r1, 8004990 <USB_SetCurrentMode+0x5e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004944:	68c3      	ldr	r3, [r0, #12]
 8004946:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800494a:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 800494c:	2400      	movs	r4, #0
      HAL_Delay(1U);
 800494e:	2601      	movs	r6, #1
 8004950:	4630      	mov	r0, r6
 8004952:	f7fd f855 	bl	8001a00 <HAL_Delay>
      ms++;
 8004956:	3401      	adds	r4, #1
  return ((USBx->GINTSTS) & 0x1U);
 8004958:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800495a:	f013 0f01 	tst.w	r3, #1
 800495e:	d001      	beq.n	8004964 <USB_SetCurrentMode+0x32>
 8004960:	2c32      	cmp	r4, #50	; 0x32
 8004962:	d1f5      	bne.n	8004950 <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 8004964:	2c32      	cmp	r4, #50	; 0x32
 8004966:	bf14      	ite	ne
 8004968:	2000      	movne	r0, #0
 800496a:	2001      	moveq	r0, #1
}
 800496c:	bd70      	pop	{r4, r5, r6, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800496e:	68c3      	ldr	r3, [r0, #12]
 8004970:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004974:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8004976:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8004978:	2601      	movs	r6, #1
 800497a:	4630      	mov	r0, r6
 800497c:	f7fd f840 	bl	8001a00 <HAL_Delay>
      ms++;
 8004980:	3401      	adds	r4, #1
  return ((USBx->GINTSTS) & 0x1U);
 8004982:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004984:	f013 0f01 	tst.w	r3, #1
 8004988:	d1ec      	bne.n	8004964 <USB_SetCurrentMode+0x32>
 800498a:	2c32      	cmp	r4, #50	; 0x32
 800498c:	d1f5      	bne.n	800497a <USB_SetCurrentMode+0x48>
 800498e:	e7e9      	b.n	8004964 <USB_SetCurrentMode+0x32>
    return HAL_ERROR;
 8004990:	2001      	movs	r0, #1
 8004992:	e7eb      	b.n	800496c <USB_SetCurrentMode+0x3a>

08004994 <USB_FlushTxFifo>:
{
 8004994:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8004996:	2300      	movs	r3, #0
 8004998:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800499a:	4a11      	ldr	r2, [pc, #68]	; (80049e0 <USB_FlushTxFifo+0x4c>)
    count++;
 800499c:	9b01      	ldr	r3, [sp, #4]
 800499e:	3301      	adds	r3, #1
 80049a0:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80049a2:	9b01      	ldr	r3, [sp, #4]
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d815      	bhi.n	80049d4 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049a8:	6903      	ldr	r3, [r0, #16]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	daf6      	bge.n	800499c <USB_FlushTxFifo+0x8>
  count = 0U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80049b2:	0189      	lsls	r1, r1, #6
 80049b4:	f041 0120 	orr.w	r1, r1, #32
 80049b8:	6101      	str	r1, [r0, #16]
    if (count > 200000U)
 80049ba:	4a09      	ldr	r2, [pc, #36]	; (80049e0 <USB_FlushTxFifo+0x4c>)
    count++;
 80049bc:	9b01      	ldr	r3, [sp, #4]
 80049be:	3301      	adds	r3, #1
 80049c0:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80049c2:	9b01      	ldr	r3, [sp, #4]
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d808      	bhi.n	80049da <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80049c8:	6903      	ldr	r3, [r0, #16]
 80049ca:	f013 0f20 	tst.w	r3, #32
 80049ce:	d1f5      	bne.n	80049bc <USB_FlushTxFifo+0x28>
  return HAL_OK;
 80049d0:	2000      	movs	r0, #0
 80049d2:	e000      	b.n	80049d6 <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 80049d4:	2003      	movs	r0, #3
}
 80049d6:	b002      	add	sp, #8
 80049d8:	4770      	bx	lr
      return HAL_TIMEOUT;
 80049da:	2003      	movs	r0, #3
 80049dc:	e7fb      	b.n	80049d6 <USB_FlushTxFifo+0x42>
 80049de:	bf00      	nop
 80049e0:	00030d40 	.word	0x00030d40

080049e4 <USB_FlushRxFifo>:
{
 80049e4:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80049ea:	4a10      	ldr	r2, [pc, #64]	; (8004a2c <USB_FlushRxFifo+0x48>)
    count++;
 80049ec:	9b01      	ldr	r3, [sp, #4]
 80049ee:	3301      	adds	r3, #1
 80049f0:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80049f2:	9b01      	ldr	r3, [sp, #4]
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d813      	bhi.n	8004a20 <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049f8:	6903      	ldr	r3, [r0, #16]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	daf6      	bge.n	80049ec <USB_FlushRxFifo+0x8>
  count = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a02:	2310      	movs	r3, #16
 8004a04:	6103      	str	r3, [r0, #16]
    if (count > 200000U)
 8004a06:	4a09      	ldr	r2, [pc, #36]	; (8004a2c <USB_FlushRxFifo+0x48>)
    count++;
 8004a08:	9b01      	ldr	r3, [sp, #4]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8004a0e:	9b01      	ldr	r3, [sp, #4]
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d808      	bhi.n	8004a26 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a14:	6903      	ldr	r3, [r0, #16]
 8004a16:	f013 0f10 	tst.w	r3, #16
 8004a1a:	d1f5      	bne.n	8004a08 <USB_FlushRxFifo+0x24>
  return HAL_OK;
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	e000      	b.n	8004a22 <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 8004a20:	2003      	movs	r0, #3
}
 8004a22:	b002      	add	sp, #8
 8004a24:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004a26:	2003      	movs	r0, #3
 8004a28:	e7fb      	b.n	8004a22 <USB_FlushRxFifo+0x3e>
 8004a2a:	bf00      	nop
 8004a2c:	00030d40 	.word	0x00030d40

08004a30 <USB_WritePacket>:
{
 8004a30:	b410      	push	{r4}
 8004a32:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 8004a36:	b974      	cbnz	r4, 8004a56 <USB_WritePacket+0x26>
    count32b = ((uint32_t)len + 3U) / 4U;
 8004a38:	3303      	adds	r3, #3
 8004a3a:	ea4f 0c93 	mov.w	ip, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 8004a3e:	2b03      	cmp	r3, #3
 8004a40:	d909      	bls.n	8004a56 <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004a42:	3201      	adds	r2, #1
 8004a44:	eb00 3002 	add.w	r0, r0, r2, lsl #12
    for (i = 0U; i < count32b; i++)
 8004a48:	2300      	movs	r3, #0
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004a4a:	f851 2b04 	ldr.w	r2, [r1], #4
 8004a4e:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8004a50:	3301      	adds	r3, #1
 8004a52:	459c      	cmp	ip, r3
 8004a54:	d8f9      	bhi.n	8004a4a <USB_WritePacket+0x1a>
}
 8004a56:	2000      	movs	r0, #0
 8004a58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <USB_ReadPacket>:
{
 8004a5e:	b570      	push	{r4, r5, r6, lr}
 8004a60:	4606      	mov	r6, r0
  uint16_t remaining_bytes = len % 4U;
 8004a62:	f002 0503 	and.w	r5, r2, #3
  for (i = 0U; i < count32b; i++)
 8004a66:	ea5f 0c92 	movs.w	ip, r2, lsr #2
 8004a6a:	d01b      	beq.n	8004aa4 <USB_ReadPacket+0x46>
  uint8_t *pDest = dest;
 8004a6c:	460a      	mov	r2, r1
  for (i = 0U; i < count32b; i++)
 8004a6e:	2300      	movs	r3, #0
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004a70:	f500 5e80 	add.w	lr, r0, #4096	; 0x1000
 8004a74:	f8de 4000 	ldr.w	r4, [lr]
 8004a78:	f842 4b04 	str.w	r4, [r2], #4
  for (i = 0U; i < count32b; i++)
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	459c      	cmp	ip, r3
 8004a80:	d1f8      	bne.n	8004a74 <USB_ReadPacket+0x16>
    pDest++;
 8004a82:	eb01 0083 	add.w	r0, r1, r3, lsl #2
  if (remaining_bytes != 0U)
 8004a86:	b165      	cbz	r5, 8004aa2 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004a88:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 8004a8c:	6834      	ldr	r4, [r6, #0]
 8004a8e:	1941      	adds	r1, r0, r5
 8004a90:	2300      	movs	r3, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004a92:	fa24 f203 	lsr.w	r2, r4, r3
 8004a96:	f800 2b01 	strb.w	r2, [r0], #1
    } while (remaining_bytes != 0U);
 8004a9a:	3308      	adds	r3, #8
 8004a9c:	4288      	cmp	r0, r1
 8004a9e:	d1f8      	bne.n	8004a92 <USB_ReadPacket+0x34>
      pDest++;
 8004aa0:	4608      	mov	r0, r1
}
 8004aa2:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 8004aa4:	4608      	mov	r0, r1
 8004aa6:	e7ee      	b.n	8004a86 <USB_ReadPacket+0x28>

08004aa8 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8004aa8:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8004aaa:	6980      	ldr	r0, [r0, #24]
}
 8004aac:	4010      	ands	r0, r2
 8004aae:	4770      	bx	lr

08004ab0 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8004ab0:	6940      	ldr	r0, [r0, #20]
}
 8004ab2:	f000 0001 	and.w	r0, r0, #1
 8004ab6:	4770      	bx	lr

08004ab8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ab8:	b084      	sub	sp, #16
 8004aba:	b570      	push	{r4, r5, r6, lr}
 8004abc:	4604      	mov	r4, r0
 8004abe:	a805      	add	r0, sp, #20
 8004ac0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8004ac4:	4615      	mov	r5, r2
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004acc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ace:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ad2:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004ad4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ad6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004ada:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004adc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ae2:	63a3      	str	r3, [r4, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004ae4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004ae6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004aea:	d045      	beq.n	8004b78 <USB_HostInit+0xc0>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004aec:	9b07      	ldr	r3, [sp, #28]
 8004aee:	2b01      	cmp	r3, #1
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004af0:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8004af4:	bf0c      	ite	eq
 8004af6:	f043 0304 	orreq.w	r3, r3, #4
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004afa:	f023 0304 	bicne.w	r3, r3, #4
 8004afe:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b02:	2110      	movs	r1, #16
 8004b04:	4620      	mov	r0, r4
 8004b06:	f7ff ff45 	bl	8004994 <USB_FlushTxFifo>
 8004b0a:	4606      	mov	r6, r0
  {
    ret = HAL_ERROR;
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	f7ff ff69 	bl	80049e4 <USB_FlushRxFifo>
 8004b12:	4306      	orrs	r6, r0
 8004b14:	f016 0fff 	tst.w	r6, #255	; 0xff
  {
    ret = HAL_ERROR;
 8004b18:	bf14      	ite	ne
 8004b1a:	2001      	movne	r0, #1
 8004b1c:	2000      	moveq	r0, #0
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004b1e:	b15d      	cbz	r5, 8004b38 <USB_HostInit+0x80>
 8004b20:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 8004b24:	2200      	movs	r2, #0
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004b26:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    USBx_HC(i)->HCINTMSK = 0U;
 8004b2a:	4611      	mov	r1, r2
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004b2c:	609e      	str	r6, [r3, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004b2e:	60d9      	str	r1, [r3, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004b30:	3201      	adds	r2, #1
 8004b32:	3320      	adds	r3, #32
 8004b34:	4295      	cmp	r5, r2
 8004b36:	d1f9      	bne.n	8004b2c <USB_HostInit+0x74>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	61a3      	str	r3, [r4, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004b3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b40:	6163      	str	r3, [r4, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004b42:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004b44:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004b48:	d01d      	beq.n	8004b86 <USB_HostInit+0xce>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004b4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b4e:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004b50:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8004b54:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004b56:	4b10      	ldr	r3, [pc, #64]	; (8004b98 <USB_HostInit+0xe0>)
 8004b58:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b5c:	9b08      	ldr	r3, [sp, #32]
 8004b5e:	b91b      	cbnz	r3, 8004b68 <USB_HostInit+0xb0>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b60:	69a3      	ldr	r3, [r4, #24]
 8004b62:	f043 0310 	orr.w	r3, r3, #16
 8004b66:	61a3      	str	r3, [r4, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004b68:	69a2      	ldr	r2, [r4, #24]
 8004b6a:	4b0c      	ldr	r3, [pc, #48]	; (8004b9c <USB_HostInit+0xe4>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
}
 8004b70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004b74:	b004      	add	sp, #16
 8004b76:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004b78:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8004b7c:	f023 0304 	bic.w	r3, r3, #4
 8004b80:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 8004b84:	e7bd      	b.n	8004b02 <USB_HostInit+0x4a>
    USBx->GRXFSIZ  = 0x80U;
 8004b86:	2380      	movs	r3, #128	; 0x80
 8004b88:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004b8a:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8004b8e:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004b90:	4b03      	ldr	r3, [pc, #12]	; (8004ba0 <USB_HostInit+0xe8>)
 8004b92:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004b96:	e7e1      	b.n	8004b5c <USB_HostInit+0xa4>
 8004b98:	00e00300 	.word	0x00e00300
 8004b9c:	a3200008 	.word	0xa3200008
 8004ba0:	004000e0 	.word	0x004000e0

08004ba4 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004ba4:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 8004ba8:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8004bac:	f023 0303 	bic.w	r3, r3, #3
 8004bb0:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004bb4:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
 8004bb8:	f001 0303 	and.w	r3, r1, #3
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400

  if (freq == HCFG_48_MHZ)
 8004bc2:	2901      	cmp	r1, #1
 8004bc4:	d007      	beq.n	8004bd6 <USB_InitFSLSPClkSel+0x32>
  {
    USBx_HOST->HFIR = 48000U;
  }
  else if (freq == HCFG_6_MHZ)
 8004bc6:	2902      	cmp	r1, #2
  {
    USBx_HOST->HFIR = 6000U;
 8004bc8:	bf04      	itt	eq
 8004bca:	f241 7370 	movweq	r3, #6000	; 0x1770
 8004bce:	f8cc 3004 	streq.w	r3, [ip, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 8004bd2:	2000      	movs	r0, #0
 8004bd4:	4770      	bx	lr
    USBx_HOST->HFIR = 48000U;
 8004bd6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004bda:	f8cc 3004 	str.w	r3, [ip, #4]
 8004bde:	e7f8      	b.n	8004bd2 <USB_InitFSLSPClkSel+0x2e>

08004be0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004be0:	b530      	push	{r4, r5, lr}
 8004be2:	b083      	sub	sp, #12
 8004be4:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 8004be6:	2500      	movs	r5, #0
 8004be8:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 8004bea:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8004bee:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004bf0:	9b01      	ldr	r3, [sp, #4]
 8004bf2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004bf6:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004bf8:	9b01      	ldr	r3, [sp, #4]
 8004bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bfe:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 8004c02:	2064      	movs	r0, #100	; 0x64
 8004c04:	f7fc fefc 	bl	8001a00 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004c08:	9b01      	ldr	r3, [sp, #4]
 8004c0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c0e:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 8004c12:	200a      	movs	r0, #10
 8004c14:	f7fc fef4 	bl	8001a00 <HAL_Delay>

  return HAL_OK;
}
 8004c18:	4628      	mov	r0, r5
 8004c1a:	b003      	add	sp, #12
 8004c1c:	bd30      	pop	{r4, r5, pc}

08004c1e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004c1e:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8004c20:	2300      	movs	r3, #0
 8004c22:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8004c24:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8004c28:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004c2a:	9b01      	ldr	r3, [sp, #4]
 8004c2c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c30:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004c32:	9b01      	ldr	r3, [sp, #4]
 8004c34:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004c38:	d101      	bne.n	8004c3e <USB_DriveVbus+0x20>
 8004c3a:	2901      	cmp	r1, #1
 8004c3c:	d00c      	beq.n	8004c58 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004c3e:	9b01      	ldr	r3, [sp, #4]
 8004c40:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004c44:	d005      	beq.n	8004c52 <USB_DriveVbus+0x34>
 8004c46:	b921      	cbnz	r1, 8004c52 <USB_DriveVbus+0x34>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004c48:	9b01      	ldr	r3, [sp, #4]
 8004c4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c4e:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8004c52:	2000      	movs	r0, #0
 8004c54:	b002      	add	sp, #8
 8004c56:	4770      	bx	lr
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004c58:	9b01      	ldr	r3, [sp, #4]
 8004c5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c5e:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004c62:	9b01      	ldr	r3, [sp, #4]
 8004c64:	e7f5      	b.n	8004c52 <USB_DriveVbus+0x34>

08004c66 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004c66:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8004c6c:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8004c70:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004c72:	9801      	ldr	r0, [sp, #4]
}
 8004c74:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8004c78:	b002      	add	sp, #8
 8004c7a:	4770      	bx	lr

08004c7c <USB_GetCurrentFrame>:
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004c7c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004c80:	6880      	ldr	r0, [r0, #8]
}
 8004c82:	b280      	uxth	r0, r0
 8004c84:	4770      	bx	lr

08004c86 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004c86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c8a:	4691      	mov	r9, r2
 8004c8c:	461c      	mov	r4, r3
 8004c8e:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004c92:	eb00 1641 	add.w	r6, r0, r1, lsl #5
 8004c96:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 8004c9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c9e:	609a      	str	r2, [r3, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004ca0:	2d03      	cmp	r5, #3
 8004ca2:	d87a      	bhi.n	8004d9a <USB_HC_Init+0x114>
 8004ca4:	e8df f005 	tbb	[pc, r5]
 8004ca8:	2a026e02 	.word	0x2a026e02
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004cac:	f240 429d 	movw	r2, #1181	; 0x49d
 8004cb0:	60da      	str	r2, [r3, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004cb2:	f019 0f80 	tst.w	r9, #128	; 0x80
 8004cb6:	d108      	bne.n	8004cca <USB_HC_Init+0x44>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
      }
      else
      {
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004cb8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004cba:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004cbe:	d023      	beq.n	8004d08 <USB_HC_Init+0x82>
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004cc0:	68da      	ldr	r2, [r3, #12]
 8004cc2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004cc6:	60da      	str	r2, [r3, #12]
 8004cc8:	e01e      	b.n	8004d08 <USB_HC_Init+0x82>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004cca:	68da      	ldr	r2, [r3, #12]
 8004ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cd0:	60da      	str	r2, [r3, #12]
      ret = HAL_ERROR;
      break;
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004cd2:	68da      	ldr	r2, [r3, #12]
 8004cd4:	f042 0202 	orr.w	r2, r2, #2
 8004cd8:	60da      	str	r2, [r3, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004cda:	f8d0 2418 	ldr.w	r2, [r0, #1048]	; 0x418
 8004cde:	f001 070f 	and.w	r7, r1, #15
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	40b9      	lsls	r1, r7
 8004ce6:	4311      	orrs	r1, r2
 8004ce8:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004cec:	6983      	ldr	r3, [r0, #24]
 8004cee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004cf2:	6183      	str	r3, [r0, #24]
 8004cf4:	2700      	movs	r7, #0

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004cf6:	f44f 4800 	mov.w	r8, #32768	; 0x8000
 8004cfa:	e019      	b.n	8004d30 <USB_HC_Init+0xaa>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004cfc:	f240 629d 	movw	r2, #1693	; 0x69d
 8004d00:	60da      	str	r2, [r3, #12]
      if ((epnum & 0x80U) == 0x80U)
 8004d02:	f019 0f80 	tst.w	r9, #128	; 0x80
 8004d06:	d138      	bne.n	8004d7a <USB_HC_Init+0xf4>
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004d08:	68da      	ldr	r2, [r3, #12]
 8004d0a:	f042 0202 	orr.w	r2, r2, #2
 8004d0e:	60da      	str	r2, [r3, #12]
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004d10:	f8d0 7418 	ldr.w	r7, [r0, #1048]	; 0x418
 8004d14:	f001 010f 	and.w	r1, r1, #15
 8004d18:	2301      	movs	r3, #1
 8004d1a:	fa03 f101 	lsl.w	r1, r3, r1
 8004d1e:	4339      	orrs	r1, r7
 8004d20:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004d24:	6983      	ldr	r3, [r0, #24]
 8004d26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004d2a:	6183      	str	r3, [r0, #24]
 8004d2c:	2700      	movs	r7, #0
  }
  else
  {
    HCcharEpDir = 0U;
 8004d2e:	46b8      	mov	r8, r7
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004d30:	f7ff ff99 	bl	8004c66 <USB_GetHostSpeed>

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004d34:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d048      	beq.n	8004dce <USB_HC_Init+0x148>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004d3c:	2100      	movs	r1, #0
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004d3e:	05a3      	lsls	r3, r4, #22
 8004d40:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004d44:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
 8004d48:	f3c4 040a 	ubfx	r4, r4, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004d4c:	4323      	orrs	r3, r4
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004d4e:	ea4f 29c9 	mov.w	r9, r9, lsl #11
 8004d52:	f409 49f0 	and.w	r9, r9, #30720	; 0x7800
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004d56:	ea43 0309 	orr.w	r3, r3, r9
 8004d5a:	04aa      	lsls	r2, r5, #18
 8004d5c:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8004d60:	4313      	orrs	r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004d62:	ea43 0308 	orr.w	r3, r3, r8
 8004d66:	430b      	orrs	r3, r1
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004d68:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004d6c:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 8004d70:	2d01      	cmp	r5, #1
 8004d72:	d032      	beq.n	8004dda <USB_HC_Init+0x154>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
  }

  return ret;
}
 8004d74:	4638      	mov	r0, r7
 8004d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d80:	60da      	str	r2, [r3, #12]
 8004d82:	e7a6      	b.n	8004cd2 <USB_HC_Init+0x4c>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d84:	f240 2225 	movw	r2, #549	; 0x225
 8004d88:	60da      	str	r2, [r3, #12]
      if ((epnum & 0x80U) == 0x80U)
 8004d8a:	f019 0f80 	tst.w	r9, #128	; 0x80
 8004d8e:	d0bb      	beq.n	8004d08 <USB_HC_Init+0x82>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004d90:	68da      	ldr	r2, [r3, #12]
 8004d92:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004d96:	60da      	str	r2, [r3, #12]
 8004d98:	e79b      	b.n	8004cd2 <USB_HC_Init+0x4c>
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004d9a:	68da      	ldr	r2, [r3, #12]
 8004d9c:	f042 0202 	orr.w	r2, r2, #2
 8004da0:	60da      	str	r2, [r3, #12]
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004da2:	f8d0 7418 	ldr.w	r7, [r0, #1048]	; 0x418
 8004da6:	f001 010f 	and.w	r1, r1, #15
 8004daa:	2301      	movs	r3, #1
 8004dac:	408b      	lsls	r3, r1
 8004dae:	433b      	orrs	r3, r7
 8004db0:	f8c0 3418 	str.w	r3, [r0, #1048]	; 0x418
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004db4:	6983      	ldr	r3, [r0, #24]
 8004db6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004dba:	6183      	str	r3, [r0, #24]
      ret = HAL_ERROR;
 8004dbc:	2701      	movs	r7, #1
 8004dbe:	f019 0f80 	tst.w	r9, #128	; 0x80
 8004dc2:	bf14      	ite	ne
 8004dc4:	f44f 4800 	movne.w	r8, #32768	; 0x8000
 8004dc8:	f04f 0800 	moveq.w	r8, #0
 8004dcc:	e7b0      	b.n	8004d30 <USB_HC_Init+0xaa>
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004dce:	2802      	cmp	r0, #2
 8004dd0:	bf0c      	ite	eq
 8004dd2:	2100      	moveq	r1, #0
 8004dd4:	f44f 3100 	movne.w	r1, #131072	; 0x20000
 8004dd8:	e7b1      	b.n	8004d3e <USB_HC_Init+0xb8>
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004dda:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
 8004dde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004de2:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
  return ret;
 8004de6:	e7c5      	b.n	8004d74 <USB_HC_Init+0xee>

08004de8 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004de8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004dec:	6940      	ldr	r0, [r0, #20]
}
 8004dee:	b280      	uxth	r0, r0
 8004df0:	4770      	bx	lr

08004df2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004df2:	b430      	push	{r4, r5}
 8004df4:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  __IO uint32_t count = 0U;
 8004df6:	2300      	movs	r3, #0
 8004df8:	9301      	str	r3, [sp, #4]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004dfa:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8004dfe:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 8004e02:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004e06:	0c9b      	lsrs	r3, r3, #18
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004e08:	f8d1 5500 	ldr.w	r5, [r1, #1280]	; 0x500

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8004e0c:	6884      	ldr	r4, [r0, #8]
 8004e0e:	f014 0f20 	tst.w	r4, #32
 8004e12:	d001      	beq.n	8004e18 <USB_HC_Halt+0x26>
 8004e14:	2d00      	cmp	r5, #0
 8004e16:	da2d      	bge.n	8004e74 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004e18:	f013 0f01 	tst.w	r3, #1
 8004e1c:	d12e      	bne.n	8004e7c <USB_HC_Halt+0x8a>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004e1e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004e22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e26:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004e2a:	6883      	ldr	r3, [r0, #8]
 8004e2c:	f013 0f20 	tst.w	r3, #32
 8004e30:	d120      	bne.n	8004e74 <USB_HC_Halt+0x82>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004e32:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004e34:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 8004e38:	d116      	bne.n	8004e68 <USB_HC_Halt+0x76>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004e3a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004e3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e42:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004e46:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004e4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e4e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        do
        {
          count++;
 8004e52:	9b01      	ldr	r3, [sp, #4]
 8004e54:	3301      	adds	r3, #1
 8004e56:	9301      	str	r3, [sp, #4]

          if (count > 1000U)
 8004e58:	9b01      	ldr	r3, [sp, #4]
 8004e5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e5e:	d809      	bhi.n	8004e74 <USB_HC_Halt+0x82>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004e60:	6813      	ldr	r3, [r2, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	dbf5      	blt.n	8004e52 <USB_HC_Halt+0x60>
 8004e66:	e005      	b.n	8004e74 <USB_HC_Halt+0x82>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004e68:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004e6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e70:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8004e74:	2000      	movs	r0, #0
 8004e76:	b002      	add	sp, #8
 8004e78:	bc30      	pop	{r4, r5}
 8004e7a:	4770      	bx	lr
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004e7c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004e80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e84:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004e88:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8004e8c:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 8004e90:	d116      	bne.n	8004ec0 <USB_HC_Halt+0xce>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004e92:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004e96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e9a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004e9e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004ea2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ea6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        count++;
 8004eaa:	9b01      	ldr	r3, [sp, #4]
 8004eac:	3301      	adds	r3, #1
 8004eae:	9301      	str	r3, [sp, #4]
        if (count > 1000U)
 8004eb0:	9b01      	ldr	r3, [sp, #4]
 8004eb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004eb6:	d8dd      	bhi.n	8004e74 <USB_HC_Halt+0x82>
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004eb8:	6813      	ldr	r3, [r2, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	dbf5      	blt.n	8004eaa <USB_HC_Halt+0xb8>
 8004ebe:	e7d9      	b.n	8004e74 <USB_HC_Halt+0x82>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004ec0:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004ec4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ec8:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8004ecc:	e7d2      	b.n	8004e74 <USB_HC_Halt+0x82>
	...

08004ed0 <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004ed0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8004ed4:	4a06      	ldr	r2, [pc, #24]	; (8004ef0 <USB_DoPing+0x20>)
 8004ed6:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8004eda:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ede:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ee2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8004ee6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

  return HAL_OK;
}
 8004eea:	2000      	movs	r0, #0
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	80080000 	.word	0x80080000

08004ef4 <USB_HC_StartXfer>:
{
 8004ef4:	b530      	push	{r4, r5, lr}
 8004ef6:	b085      	sub	sp, #20
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004ef8:	784b      	ldrb	r3, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004efa:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004efc:	f414 7f80 	tst.w	r4, #256	; 0x100
 8004f00:	d007      	beq.n	8004f12 <USB_HC_StartXfer+0x1e>
 8004f02:	790c      	ldrb	r4, [r1, #4]
 8004f04:	b92c      	cbnz	r4, 8004f12 <USB_HC_StartXfer+0x1e>
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004f06:	2a01      	cmp	r2, #1
 8004f08:	d064      	beq.n	8004fd4 <USB_HC_StartXfer+0xe0>
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004f0a:	b912      	cbnz	r2, 8004f12 <USB_HC_StartXfer+0x1e>
 8004f0c:	794c      	ldrb	r4, [r1, #5]
 8004f0e:	2c01      	cmp	r4, #1
 8004f10:	d06d      	beq.n	8004fee <USB_HC_StartXfer+0xfa>
  if (hc->xfer_len > 0U)
 8004f12:	694d      	ldr	r5, [r1, #20]
 8004f14:	2d00      	cmp	r5, #0
 8004f16:	d06e      	beq.n	8004ff6 <USB_HC_StartXfer+0x102>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004f18:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8004f1c:	1e6c      	subs	r4, r5, #1
 8004f1e:	4464      	add	r4, ip
 8004f20:	fbb4 f4fc 	udiv	r4, r4, ip
 8004f24:	b2a4      	uxth	r4, r4
 8004f26:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8004f2a:	bf28      	it	cs
 8004f2c:	f44f 7480 	movcs.w	r4, #256	; 0x100
 8004f30:	46a4      	mov	ip, r4
  if (hc->ep_is_in != 0U)
 8004f32:	78cc      	ldrb	r4, [r1, #3]
 8004f34:	b114      	cbz	r4, 8004f3c <USB_HC_StartXfer+0x48>
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004f36:	890d      	ldrh	r5, [r1, #8]
 8004f38:	fb0c f505 	mul.w	r5, ip, r5
 8004f3c:	610d      	str	r5, [r1, #16]
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f3e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8004f42:	f503 6ea0 	add.w	lr, r3, #1280	; 0x500
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004f46:	7a8c      	ldrb	r4, [r1, #10]
 8004f48:	0764      	lsls	r4, r4, #29
 8004f4a:	f004 44c0 	and.w	r4, r4, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004f4e:	ea44 44cc 	orr.w	r4, r4, ip, lsl #19
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f52:	f3c5 0512 	ubfx	r5, r5, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004f56:	432c      	orrs	r4, r5
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f58:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
  if (dma != 0U)
 8004f5c:	b112      	cbz	r2, 8004f64 <USB_HC_StartXfer+0x70>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004f5e:	68cc      	ldr	r4, [r1, #12]
 8004f60:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004f64:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 8004f68:	f8dc 4008 	ldr.w	r4, [ip, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004f6c:	f8d3 5500 	ldr.w	r5, [r3, #1280]	; 0x500
 8004f70:	f025 5500 	bic.w	r5, r5, #536870912	; 0x20000000
 8004f74:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004f78:	f8d3 5500 	ldr.w	r5, [r3, #1280]	; 0x500
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004f7c:	f084 0401 	eor.w	r4, r4, #1
 8004f80:	f004 0401 	and.w	r4, r4, #1
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004f84:	ea45 7444 	orr.w	r4, r5, r4, lsl #29
 8004f88:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f8c:	f8d3 4500 	ldr.w	r4, [r3, #1280]	; 0x500
 8004f90:	9403      	str	r4, [sp, #12]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f92:	9c03      	ldr	r4, [sp, #12]
 8004f94:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
 8004f98:	9403      	str	r4, [sp, #12]
  if (hc->ep_is_in != 0U)
 8004f9a:	78cc      	ldrb	r4, [r1, #3]
 8004f9c:	2c00      	cmp	r4, #0
 8004f9e:	d02d      	beq.n	8004ffc <USB_HC_StartXfer+0x108>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004fa0:	9c03      	ldr	r4, [sp, #12]
 8004fa2:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8004fa6:	9403      	str	r4, [sp, #12]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004fa8:	9c03      	ldr	r4, [sp, #12]
 8004faa:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8004fae:	9403      	str	r4, [sp, #12]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004fb0:	9c03      	ldr	r4, [sp, #12]
 8004fb2:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  if (dma != 0U) /* dma mode */
 8004fb6:	2a00      	cmp	r2, #0
 8004fb8:	d137      	bne.n	800502a <USB_HC_StartXfer+0x136>
  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004fba:	78cb      	ldrb	r3, [r1, #3]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d134      	bne.n	800502a <USB_HC_StartXfer+0x136>
 8004fc0:	694b      	ldr	r3, [r1, #20]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d031      	beq.n	800502a <USB_HC_StartXfer+0x136>
    switch (hc->ep_type)
 8004fc6:	79ca      	ldrb	r2, [r1, #7]
 8004fc8:	2a03      	cmp	r2, #3
 8004fca:	d827      	bhi.n	800501c <USB_HC_StartXfer+0x128>
 8004fcc:	e8df f002 	tbb	[pc, r2]
 8004fd0:	301b301b 	.word	0x301b301b
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004fd4:	79cc      	ldrb	r4, [r1, #7]
 8004fd6:	f014 0ffd 	tst.w	r4, #253	; 0xfd
 8004fda:	d19a      	bne.n	8004f12 <USB_HC_StartXfer+0x1e>
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004fdc:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8004fe0:	f8d4 550c 	ldr.w	r5, [r4, #1292]	; 0x50c
 8004fe4:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 8004fe8:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
 8004fec:	e791      	b.n	8004f12 <USB_HC_StartXfer+0x1e>
      (void)USB_DoPing(USBx, hc->ch_num);
 8004fee:	4619      	mov	r1, r3
 8004ff0:	f7ff ff6e 	bl	8004ed0 <USB_DoPing>
      return HAL_OK;
 8004ff4:	e019      	b.n	800502a <USB_HC_StartXfer+0x136>
    num_packets = 1U;
 8004ff6:	f04f 0c01 	mov.w	ip, #1
 8004ffa:	e79a      	b.n	8004f32 <USB_HC_StartXfer+0x3e>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004ffc:	9c03      	ldr	r4, [sp, #12]
 8004ffe:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
 8005002:	9403      	str	r4, [sp, #12]
 8005004:	e7d0      	b.n	8004fa8 <USB_HC_StartXfer+0xb4>
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005006:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8005008:	b292      	uxth	r2, r2
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800500a:	3303      	adds	r3, #3
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800500c:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8005010:	429a      	cmp	r2, r3
 8005012:	d203      	bcs.n	800501c <USB_HC_StartXfer+0x128>
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005014:	6983      	ldr	r3, [r0, #24]
 8005016:	f043 0320 	orr.w	r3, r3, #32
 800501a:	6183      	str	r3, [r0, #24]
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800501c:	2300      	movs	r3, #0
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	8a8b      	ldrh	r3, [r1, #20]
 8005022:	784a      	ldrb	r2, [r1, #1]
 8005024:	68c9      	ldr	r1, [r1, #12]
 8005026:	f7ff fd03 	bl	8004a30 <USB_WritePacket>
}
 800502a:	2000      	movs	r0, #0
 800502c:	b005      	add	sp, #20
 800502e:	bd30      	pop	{r4, r5, pc}
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005030:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8005034:	b292      	uxth	r2, r2
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005036:	3303      	adds	r3, #3
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005038:	f3c3 038f 	ubfx	r3, r3, #2, #16
 800503c:	429a      	cmp	r2, r3
 800503e:	d2ed      	bcs.n	800501c <USB_HC_StartXfer+0x128>
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005040:	6983      	ldr	r3, [r0, #24]
 8005042:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005046:	6183      	str	r3, [r0, #24]
 8005048:	e7e8      	b.n	800501c <USB_HC_StartXfer+0x128>

0800504a <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800504a:	b530      	push	{r4, r5, lr}
 800504c:	b083      	sub	sp, #12
 800504e:	4604      	mov	r4, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t count = 0U;
 8005050:	2300      	movs	r3, #0
 8005052:	9301      	str	r3, [sp, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005054:	6883      	ldr	r3, [r0, #8]
 8005056:	f023 0301 	bic.w	r3, r3, #1
 800505a:	6083      	str	r3, [r0, #8]
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800505c:	2110      	movs	r1, #16
 800505e:	f7ff fc99 	bl	8004994 <USB_FlushTxFifo>
 8005062:	4605      	mov	r5, r0
  {
    ret = HAL_ERROR;
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005064:	4620      	mov	r0, r4
 8005066:	f7ff fcbd 	bl	80049e4 <USB_FlushRxFifo>
 800506a:	4305      	orrs	r5, r0
 800506c:	f015 0fff 	tst.w	r5, #255	; 0xff
  {
    ret = HAL_ERROR;
 8005070:	bf14      	ite	ne
 8005072:	2001      	movne	r0, #1
 8005074:	2000      	moveq	r0, #0
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005076:	f504 61a0 	add.w	r1, r4, #1280	; 0x500
 800507a:	f504 6ce0 	add.w	ip, r4, #1792	; 0x700
    ret = HAL_ERROR;
 800507e:	460a      	mov	r2, r1
  {
    value = USBx_HC(i)->HCCHAR;
 8005080:	6813      	ldr	r3, [r2, #0]
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005082:	f023 2380 	bic.w	r3, r3, #2147516416	; 0x80008000
 8005086:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800508a:	f842 3b20 	str.w	r3, [r2], #32
  for (i = 0U; i <= 15U; i++)
 800508e:	4562      	cmp	r2, ip
 8005090:	d1f6      	bne.n	8005080 <USB_StopHost+0x36>
 8005092:	e002      	b.n	800509a <USB_StopHost+0x50>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005094:	3120      	adds	r1, #32
 8005096:	4561      	cmp	r1, ip
 8005098:	d011      	beq.n	80050be <USB_StopHost+0x74>
  {
    value = USBx_HC(i)->HCCHAR;
 800509a:	460a      	mov	r2, r1
 800509c:	680b      	ldr	r3, [r1, #0]
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800509e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 80050a6:	600b      	str	r3, [r1, #0]

    do
    {
      count++;
 80050a8:	9b01      	ldr	r3, [sp, #4]
 80050aa:	3301      	adds	r3, #1
 80050ac:	9301      	str	r3, [sp, #4]

      if (count > 1000U)
 80050ae:	9b01      	ldr	r3, [sp, #4]
 80050b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050b4:	d8ee      	bhi.n	8005094 <USB_StopHost+0x4a>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80050b6:	6813      	ldr	r3, [r2, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	dbf5      	blt.n	80050a8 <USB_StopHost+0x5e>
 80050bc:	e7ea      	b.n	8005094 <USB_StopHost+0x4a>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80050be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050c2:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 80050c6:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80050c8:	68a3      	ldr	r3, [r4, #8]
 80050ca:	f043 0301 	orr.w	r3, r3, #1
 80050ce:	60a3      	str	r3, [r4, #8]

  (void)USB_EnableGlobalInt(USBx);

  return ret;
}
 80050d0:	b003      	add	sp, #12
 80050d2:	bd30      	pop	{r4, r5, pc}

080050d4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80050d4:	b508      	push	{r3, lr}
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80050d6:	4903      	ldr	r1, [pc, #12]	; (80050e4 <MX_FATFS_Init+0x10>)
 80050d8:	4803      	ldr	r0, [pc, #12]	; (80050e8 <MX_FATFS_Init+0x14>)
 80050da:	f002 f941 	bl	8007360 <FATFS_LinkDriver>
 80050de:	4b03      	ldr	r3, [pc, #12]	; (80050ec <MX_FATFS_Init+0x18>)
 80050e0:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80050e2:	bd08      	pop	{r3, pc}
 80050e4:	200027c8 	.word	0x200027c8
 80050e8:	08007a68 	.word	0x08007a68
 80050ec:	200027cc 	.word	0x200027cc

080050f0 <USBH_initialize>:
DSTATUS USBH_initialize(BYTE lun)
{
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
}
 80050f0:	2000      	movs	r0, #0
 80050f2:	4770      	bx	lr

080050f4 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80050f4:	b508      	push	{r3, lr}
 80050f6:	4601      	mov	r1, r0
  DRESULT res = RES_ERROR;

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80050f8:	4803      	ldr	r0, [pc, #12]	; (8005108 <USBH_status+0x14>)
 80050fa:	f000 fb45 	bl	8005788 <USBH_MSC_UnitIsReady>
  {
    res = RES_ERROR;
  }

  return res;
}
 80050fe:	fab0 f080 	clz	r0, r0
 8005102:	0940      	lsrs	r0, r0, #5
 8005104:	bd08      	pop	{r3, pc}
 8005106:	bf00      	nop
 8005108:	20002808 	.word	0x20002808

0800510c <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800510c:	b510      	push	{r4, lr}
 800510e:	b090      	sub	sp, #64	; 0x40
 8005110:	4604      	mov	r4, r0
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8005112:	9300      	str	r3, [sp, #0]
 8005114:	460b      	mov	r3, r1
 8005116:	4601      	mov	r1, r0
 8005118:	480c      	ldr	r0, [pc, #48]	; (800514c <USBH_read+0x40>)
 800511a:	f000 fb6c 	bl	80057f6 <USBH_MSC_Read>
 800511e:	b908      	cbnz	r0, 8005124 <USBH_read+0x18>
      break;
    }
  }

  return res;
}
 8005120:	b010      	add	sp, #64	; 0x40
 8005122:	bd10      	pop	{r4, pc}
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005124:	aa03      	add	r2, sp, #12
 8005126:	4621      	mov	r1, r4
 8005128:	4808      	ldr	r0, [pc, #32]	; (800514c <USBH_read+0x40>)
 800512a:	f000 fb3f 	bl	80057ac <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 800512e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8005132:	2b28      	cmp	r3, #40	; 0x28
 8005134:	d006      	beq.n	8005144 <USBH_read+0x38>
 8005136:	2b3a      	cmp	r3, #58	; 0x3a
 8005138:	d006      	beq.n	8005148 <USBH_read+0x3c>
      res = RES_NOTRDY;
 800513a:	2b04      	cmp	r3, #4
 800513c:	bf14      	ite	ne
 800513e:	2001      	movne	r0, #1
 8005140:	2003      	moveq	r0, #3
 8005142:	e7ed      	b.n	8005120 <USBH_read+0x14>
 8005144:	2003      	movs	r0, #3
 8005146:	e7eb      	b.n	8005120 <USBH_read+0x14>
 8005148:	2003      	movs	r0, #3
 800514a:	e7e9      	b.n	8005120 <USBH_read+0x14>
 800514c:	20002808 	.word	0x20002808

08005150 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005150:	b530      	push	{r4, r5, lr}
 8005152:	b08f      	sub	sp, #60	; 0x3c
 8005154:	460c      	mov	r4, r1
 8005156:	4615      	mov	r5, r2
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  switch (cmd)
 8005158:	2903      	cmp	r1, #3
 800515a:	d803      	bhi.n	8005164 <USBH_ioctl+0x14>
 800515c:	e8df f001 	tbb	[pc, r1]
 8005160:	170d0422 	.word	0x170d0422
 8005164:	2004      	movs	r0, #4
 8005166:	e01e      	b.n	80051a6 <USBH_ioctl+0x56>
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005168:	aa01      	add	r2, sp, #4
 800516a:	4601      	mov	r1, r0
 800516c:	4812      	ldr	r0, [pc, #72]	; (80051b8 <USBH_ioctl+0x68>)
 800516e:	f000 fb1d 	bl	80057ac <USBH_MSC_GetLUNInfo>
 8005172:	b9d0      	cbnz	r0, 80051aa <USBH_ioctl+0x5a>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8005174:	9b02      	ldr	r3, [sp, #8]
 8005176:	602b      	str	r3, [r5, #0]
      res = RES_OK;
 8005178:	e015      	b.n	80051a6 <USBH_ioctl+0x56>
    }
    break;

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800517a:	aa01      	add	r2, sp, #4
 800517c:	4601      	mov	r1, r0
 800517e:	480e      	ldr	r0, [pc, #56]	; (80051b8 <USBH_ioctl+0x68>)
 8005180:	f000 fb14 	bl	80057ac <USBH_MSC_GetLUNInfo>
 8005184:	b998      	cbnz	r0, 80051ae <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8005186:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800518a:	602b      	str	r3, [r5, #0]
      res = RES_OK;
 800518c:	e00b      	b.n	80051a6 <USBH_ioctl+0x56>
    break;

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800518e:	aa01      	add	r2, sp, #4
 8005190:	4601      	mov	r1, r0
 8005192:	4809      	ldr	r0, [pc, #36]	; (80051b8 <USBH_ioctl+0x68>)
 8005194:	f000 fb0a 	bl	80057ac <USBH_MSC_GetLUNInfo>
 8005198:	b958      	cbnz	r0, 80051b2 <USBH_ioctl+0x62>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800519a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800519e:	0a5b      	lsrs	r3, r3, #9
 80051a0:	602b      	str	r3, [r5, #0]
      res = RES_OK;
 80051a2:	e000      	b.n	80051a6 <USBH_ioctl+0x56>
    res = RES_OK;
 80051a4:	4608      	mov	r0, r1
  default:
    res = RES_PARERR;
  }

  return res;
}
 80051a6:	b00f      	add	sp, #60	; 0x3c
 80051a8:	bd30      	pop	{r4, r5, pc}
      res = RES_ERROR;
 80051aa:	4620      	mov	r0, r4
 80051ac:	e7fb      	b.n	80051a6 <USBH_ioctl+0x56>
      res = RES_ERROR;
 80051ae:	2001      	movs	r0, #1
 80051b0:	e7f9      	b.n	80051a6 <USBH_ioctl+0x56>
      res = RES_ERROR;
 80051b2:	2001      	movs	r0, #1
 80051b4:	e7f7      	b.n	80051a6 <USBH_ioctl+0x56>
 80051b6:	bf00      	nop
 80051b8:	20002808 	.word	0x20002808

080051bc <USBH_write>:
{
 80051bc:	b510      	push	{r4, lr}
 80051be:	b090      	sub	sp, #64	; 0x40
 80051c0:	4604      	mov	r4, r0
  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	460b      	mov	r3, r1
 80051c6:	4601      	mov	r1, r0
 80051c8:	480f      	ldr	r0, [pc, #60]	; (8005208 <USBH_write+0x4c>)
 80051ca:	f000 fb64 	bl	8005896 <USBH_MSC_Write>
 80051ce:	b908      	cbnz	r0, 80051d4 <USBH_write+0x18>
}
 80051d0:	b010      	add	sp, #64	; 0x40
 80051d2:	bd10      	pop	{r4, pc}
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80051d4:	aa03      	add	r2, sp, #12
 80051d6:	4621      	mov	r1, r4
 80051d8:	480b      	ldr	r0, [pc, #44]	; (8005208 <USBH_write+0x4c>)
 80051da:	f000 fae7 	bl	80057ac <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 80051de:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80051e2:	2b27      	cmp	r3, #39	; 0x27
 80051e4:	d00c      	beq.n	8005200 <USBH_write+0x44>
 80051e6:	d906      	bls.n	80051f6 <USBH_write+0x3a>
 80051e8:	2b28      	cmp	r3, #40	; 0x28
 80051ea:	d00b      	beq.n	8005204 <USBH_write+0x48>
 80051ec:	2b3a      	cmp	r3, #58	; 0x3a
 80051ee:	bf14      	ite	ne
 80051f0:	2001      	movne	r0, #1
 80051f2:	2003      	moveq	r0, #3
 80051f4:	e7ec      	b.n	80051d0 <USBH_write+0x14>
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	bf14      	ite	ne
 80051fa:	2001      	movne	r0, #1
 80051fc:	2003      	moveq	r0, #3
 80051fe:	e7e7      	b.n	80051d0 <USBH_write+0x14>
      res = RES_WRPRT;
 8005200:	2002      	movs	r0, #2
 8005202:	e7e5      	b.n	80051d0 <USBH_write+0x14>
    switch (info.sense.asc)
 8005204:	2003      	movs	r0, #3
 8005206:	e7e3      	b.n	80051d0 <USBH_write+0x14>
 8005208:	20002808 	.word	0x20002808

0800520c <USBH_MSC_SOFProcess>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
}
 800520c:	2000      	movs	r0, #0
 800520e:	4770      	bx	lr

08005210 <USBH_MSC_Process>:
{
 8005210:	b570      	push	{r4, r5, r6, lr}
 8005212:	4605      	mov	r5, r0
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005214:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8005218:	69de      	ldr	r6, [r3, #28]
  switch (MSC_Handle->state)
 800521a:	7b30      	ldrb	r0, [r6, #12]
 800521c:	b118      	cbz	r0, 8005226 <USBH_MSC_Process+0x16>
  USBH_StatusTypeDef error = USBH_BUSY;
 800521e:	3801      	subs	r0, #1
 8005220:	bf18      	it	ne
 8005222:	2001      	movne	r0, #1
}
 8005224:	bd70      	pop	{r4, r5, r6, pc}
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8005226:	f8b6 10f8 	ldrh.w	r1, [r6, #248]	; 0xf8
 800522a:	7833      	ldrb	r3, [r6, #0]
 800522c:	428b      	cmp	r3, r1
 800522e:	f240 8118 	bls.w	8005462 <USBH_MSC_Process+0x252>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8005232:	2334      	movs	r3, #52	; 0x34
 8005234:	fb03 6301 	mla	r3, r3, r1, r6
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800523e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8005242:	2b08      	cmp	r3, #8
 8005244:	f200 8119 	bhi.w	800547a <USBH_MSC_Process+0x26a>
 8005248:	e8df f013 	tbh	[pc, r3, lsl #1]
 800524c:	01170009 	.word	0x01170009
 8005250:	00870044 	.word	0x00870044
 8005254:	00bc0015 	.word	0x00bc0015
 8005258:	01170117 	.word	0x01170117
 800525c:	0106      	.short	0x0106
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800525e:	2334      	movs	r3, #52	; 0x34
 8005260:	fb03 6101 	mla	r1, r3, r1, r6
 8005264:	2304      	movs	r3, #4
 8005266:	f881 3090 	strb.w	r3, [r1, #144]	; 0x90
            MSC_Handle->timer = phost->Timer;
 800526a:	f8d5 33c4 	ldr.w	r3, [r5, #964]	; 0x3c4
 800526e:	f8c6 30fc 	str.w	r3, [r6, #252]	; 0xfc
  USBH_StatusTypeDef error = USBH_BUSY;
 8005272:	2001      	movs	r0, #1
            break;
 8005274:	e7d6      	b.n	8005224 <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8005276:	2234      	movs	r2, #52	; 0x34
 8005278:	fb02 6201 	mla	r2, r2, r1, r6
 800527c:	329f      	adds	r2, #159	; 0x9f
 800527e:	b2c9      	uxtb	r1, r1
 8005280:	4628      	mov	r0, r5
 8005282:	f000 fd29 	bl	8005cd8 <USBH_MSC_SCSI_Inquiry>
            if (scsi_status == USBH_OK)
 8005286:	b948      	cbnz	r0, 800529c <USBH_MSC_Process+0x8c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8005288:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 800528c:	2234      	movs	r2, #52	; 0x34
 800528e:	fb02 6603 	mla	r6, r2, r3, r6
 8005292:	2302      	movs	r3, #2
 8005294:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY;
 8005298:	2001      	movs	r0, #1
 800529a:	e7c3      	b.n	8005224 <USBH_MSC_Process+0x14>
            if (scsi_status == USBH_FAIL)
 800529c:	2802      	cmp	r0, #2
 800529e:	d109      	bne.n	80052b4 <USBH_MSC_Process+0xa4>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80052a0:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 80052a4:	2234      	movs	r2, #52	; 0x34
 80052a6:	fb02 6603 	mla	r6, r2, r3, r6
 80052aa:	2305      	movs	r3, #5
 80052ac:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY;
 80052b0:	2001      	movs	r0, #1
 80052b2:	e7b7      	b.n	8005224 <USBH_MSC_Process+0x14>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80052b4:	2804      	cmp	r0, #4
 80052b6:	f040 80e2 	bne.w	800547e <USBH_MSC_Process+0x26e>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80052ba:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 80052be:	2234      	movs	r2, #52	; 0x34
 80052c0:	fb02 6603 	mla	r6, r2, r3, r6
 80052c4:	2301      	movs	r3, #1
 80052c6:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80052ca:	2202      	movs	r2, #2
 80052cc:	f886 2091 	strb.w	r2, [r6, #145]	; 0x91
  USBH_StatusTypeDef error = USBH_BUSY;
 80052d0:	4618      	mov	r0, r3
 80052d2:	e7a7      	b.n	8005224 <USBH_MSC_Process+0x14>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80052d4:	b2c9      	uxtb	r1, r1
 80052d6:	4628      	mov	r0, r5
 80052d8:	f000 fc90 	bl	8005bfc <USBH_MSC_SCSI_TestUnitReady>
            if (ready_status == USBH_OK)
 80052dc:	b9a8      	cbnz	r0, 800530a <USBH_MSC_Process+0xfa>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80052de:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 80052e2:	2234      	movs	r2, #52	; 0x34
 80052e4:	fb02 6603 	mla	r6, r2, r3, r6
 80052e8:	f896 3092 	ldrb.w	r3, [r6, #146]	; 0x92
 80052ec:	3b00      	subs	r3, #0
 80052ee:	bf18      	it	ne
 80052f0:	2301      	movne	r3, #1
 80052f2:	f886 30c1 	strb.w	r3, [r6, #193]	; 0xc1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80052f6:	2303      	movs	r3, #3
 80052f8:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80052fc:	2300      	movs	r3, #0
 80052fe:	f886 3091 	strb.w	r3, [r6, #145]	; 0x91
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8005302:	f886 3092 	strb.w	r3, [r6, #146]	; 0x92
  USBH_StatusTypeDef error = USBH_BUSY;
 8005306:	2001      	movs	r0, #1
 8005308:	e78c      	b.n	8005224 <USBH_MSC_Process+0x14>
            if (ready_status == USBH_FAIL)
 800530a:	2802      	cmp	r0, #2
 800530c:	d115      	bne.n	800533a <USBH_MSC_Process+0x12a>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800530e:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8005312:	2234      	movs	r2, #52	; 0x34
 8005314:	fb02 6603 	mla	r6, r2, r3, r6
 8005318:	f896 3092 	ldrb.w	r3, [r6, #146]	; 0x92
 800531c:	3b02      	subs	r3, #2
 800531e:	bf18      	it	ne
 8005320:	2301      	movne	r3, #1
 8005322:	f886 30c1 	strb.w	r3, [r6, #193]	; 0xc1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005326:	2305      	movs	r3, #5
 8005328:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800532c:	2001      	movs	r0, #1
 800532e:	f886 0091 	strb.w	r0, [r6, #145]	; 0x91
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8005332:	2302      	movs	r3, #2
 8005334:	f886 3092 	strb.w	r3, [r6, #146]	; 0x92
 8005338:	e774      	b.n	8005224 <USBH_MSC_Process+0x14>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800533a:	2804      	cmp	r0, #4
 800533c:	f040 80a1 	bne.w	8005482 <USBH_MSC_Process+0x272>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005340:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8005344:	2234      	movs	r2, #52	; 0x34
 8005346:	fb02 6603 	mla	r6, r2, r3, r6
 800534a:	2301      	movs	r3, #1
 800534c:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005350:	2202      	movs	r2, #2
 8005352:	f886 2091 	strb.w	r2, [r6, #145]	; 0x91
  USBH_StatusTypeDef error = USBH_BUSY;
 8005356:	4618      	mov	r0, r3
 8005358:	e764      	b.n	8005224 <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800535a:	2234      	movs	r2, #52	; 0x34
 800535c:	fb02 6201 	mla	r2, r2, r1, r6
 8005360:	3294      	adds	r2, #148	; 0x94
 8005362:	b2c9      	uxtb	r1, r1
 8005364:	4628      	mov	r0, r5
 8005366:	f000 fc70 	bl	8005c4a <USBH_MSC_SCSI_ReadCapacity>
            if (scsi_status == USBH_OK)
 800536a:	b970      	cbnz	r0, 800538a <USBH_MSC_Process+0x17a>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 800536c:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005370:	2234      	movs	r2, #52	; 0x34
 8005372:	fb02 6203 	mla	r2, r2, r3, r6
 8005376:	2001      	movs	r0, #1
 8005378:	f882 0090 	strb.w	r0, [r2, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800537c:	2100      	movs	r1, #0
 800537e:	f882 1091 	strb.w	r1, [r2, #145]	; 0x91
              MSC_Handle->current_lun++;
 8005382:	4403      	add	r3, r0
 8005384:	f8a6 30f8 	strh.w	r3, [r6, #248]	; 0xf8
 8005388:	e74c      	b.n	8005224 <USBH_MSC_Process+0x14>
            else if (scsi_status == USBH_FAIL)
 800538a:	2802      	cmp	r0, #2
 800538c:	d003      	beq.n	8005396 <USBH_MSC_Process+0x186>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800538e:	2804      	cmp	r0, #4
 8005390:	d00b      	beq.n	80053aa <USBH_MSC_Process+0x19a>
  USBH_StatusTypeDef error = USBH_BUSY;
 8005392:	2001      	movs	r0, #1
 8005394:	e746      	b.n	8005224 <USBH_MSC_Process+0x14>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005396:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 800539a:	2234      	movs	r2, #52	; 0x34
 800539c:	fb02 6603 	mla	r6, r2, r3, r6
 80053a0:	2305      	movs	r3, #5
 80053a2:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY;
 80053a6:	2001      	movs	r0, #1
 80053a8:	e73c      	b.n	8005224 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80053aa:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 80053ae:	2234      	movs	r2, #52	; 0x34
 80053b0:	fb02 6603 	mla	r6, r2, r3, r6
 80053b4:	2301      	movs	r3, #1
 80053b6:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80053ba:	2202      	movs	r2, #2
 80053bc:	f886 2091 	strb.w	r2, [r6, #145]	; 0x91
  USBH_StatusTypeDef error = USBH_BUSY;
 80053c0:	4618      	mov	r0, r3
 80053c2:	e72f      	b.n	8005224 <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80053c4:	2234      	movs	r2, #52	; 0x34
 80053c6:	fb02 6201 	mla	r2, r2, r1, r6
 80053ca:	329c      	adds	r2, #156	; 0x9c
 80053cc:	b2c9      	uxtb	r1, r1
 80053ce:	4628      	mov	r0, r5
 80053d0:	f000 fce7 	bl	8005da2 <USBH_MSC_SCSI_RequestSense>
            if (scsi_status == USBH_OK)
 80053d4:	bb28      	cbnz	r0, 8005422 <USBH_MSC_Process+0x212>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80053d6:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 80053da:	2234      	movs	r2, #52	; 0x34
 80053dc:	fb02 6203 	mla	r2, r2, r3, r6
 80053e0:	f892 209c 	ldrb.w	r2, [r2, #156]	; 0x9c
 80053e4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 80053e8:	2a02      	cmp	r2, #2
 80053ea:	d009      	beq.n	8005400 <USBH_MSC_Process+0x1f0>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80053ec:	2234      	movs	r2, #52	; 0x34
 80053ee:	fb02 6203 	mla	r2, r2, r3, r6
 80053f2:	2001      	movs	r0, #1
 80053f4:	f882 0090 	strb.w	r0, [r2, #144]	; 0x90
              MSC_Handle->current_lun++;
 80053f8:	4403      	add	r3, r0
 80053fa:	f8a6 30f8 	strh.w	r3, [r6, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 80053fe:	e711      	b.n	8005224 <USBH_MSC_Process+0x14>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8005400:	f8d5 23c4 	ldr.w	r2, [r5, #964]	; 0x3c4
 8005404:	f8d6 10fc 	ldr.w	r1, [r6, #252]	; 0xfc
 8005408:	1a52      	subs	r2, r2, r1
 800540a:	f242 710f 	movw	r1, #9999	; 0x270f
 800540e:	428a      	cmp	r2, r1
 8005410:	d8ec      	bhi.n	80053ec <USBH_MSC_Process+0x1dc>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8005412:	2234      	movs	r2, #52	; 0x34
 8005414:	fb02 6303 	mla	r3, r2, r3, r6
 8005418:	2202      	movs	r2, #2
 800541a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY;
 800541e:	2001      	movs	r0, #1
                  break;
 8005420:	e700      	b.n	8005224 <USBH_MSC_Process+0x14>
            if (scsi_status == USBH_FAIL)
 8005422:	2802      	cmp	r0, #2
 8005424:	d109      	bne.n	800543a <USBH_MSC_Process+0x22a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8005426:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 800542a:	2234      	movs	r2, #52	; 0x34
 800542c:	fb02 6603 	mla	r6, r2, r3, r6
 8005430:	2308      	movs	r3, #8
 8005432:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY;
 8005436:	2001      	movs	r0, #1
 8005438:	e6f4      	b.n	8005224 <USBH_MSC_Process+0x14>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800543a:	2804      	cmp	r0, #4
 800543c:	d123      	bne.n	8005486 <USBH_MSC_Process+0x276>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800543e:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8005442:	2234      	movs	r2, #52	; 0x34
 8005444:	fb02 6603 	mla	r6, r2, r3, r6
 8005448:	2301      	movs	r3, #1
 800544a:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800544e:	2202      	movs	r2, #2
 8005450:	f886 2091 	strb.w	r2, [r6, #145]	; 0x91
  USBH_StatusTypeDef error = USBH_BUSY;
 8005454:	4618      	mov	r0, r3
 8005456:	e6e5      	b.n	8005224 <USBH_MSC_Process+0x14>
            MSC_Handle->current_lun++;
 8005458:	3101      	adds	r1, #1
 800545a:	f8a6 10f8 	strh.w	r1, [r6, #248]	; 0xf8
  USBH_StatusTypeDef error = USBH_BUSY;
 800545e:	2001      	movs	r0, #1
            break;
 8005460:	e6e0      	b.n	8005224 <USBH_MSC_Process+0x14>
        MSC_Handle->current_lun = 0U;
 8005462:	2300      	movs	r3, #0
 8005464:	f8a6 30f8 	strh.w	r3, [r6, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8005468:	2401      	movs	r4, #1
 800546a:	7334      	strb	r4, [r6, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800546c:	f8d5 33d4 	ldr.w	r3, [r5, #980]	; 0x3d4
 8005470:	2102      	movs	r1, #2
 8005472:	4628      	mov	r0, r5
 8005474:	4798      	blx	r3
  USBH_StatusTypeDef error = USBH_BUSY;
 8005476:	4620      	mov	r0, r4
 8005478:	e6d4      	b.n	8005224 <USBH_MSC_Process+0x14>
 800547a:	2001      	movs	r0, #1
 800547c:	e6d2      	b.n	8005224 <USBH_MSC_Process+0x14>
 800547e:	2001      	movs	r0, #1
 8005480:	e6d0      	b.n	8005224 <USBH_MSC_Process+0x14>
 8005482:	2001      	movs	r0, #1
 8005484:	e6ce      	b.n	8005224 <USBH_MSC_Process+0x14>
 8005486:	2001      	movs	r0, #1
 8005488:	e6cc      	b.n	8005224 <USBH_MSC_Process+0x14>

0800548a <USBH_MSC_ClassRequest>:
{
 800548a:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800548c:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8005490:	69dc      	ldr	r4, [r3, #28]
  switch (MSC_Handle->req_state)
 8005492:	7ba3      	ldrb	r3, [r4, #14]
 8005494:	2b02      	cmp	r3, #2
 8005496:	d004      	beq.n	80054a2 <USBH_MSC_ClassRequest+0x18>
 8005498:	2b03      	cmp	r3, #3
 800549a:	d028      	beq.n	80054ee <USBH_MSC_ClassRequest+0x64>
 800549c:	b10b      	cbz	r3, 80054a2 <USBH_MSC_ClassRequest+0x18>
 800549e:	2001      	movs	r0, #1
}
 80054a0:	bd10      	pop	{r4, pc}
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80054a2:	4621      	mov	r1, r4
 80054a4:	f000 fa54 	bl	8005950 <USBH_MSC_BOT_REQ_GetMaxLUN>
      if (status == USBH_NOT_SUPPORTED)
 80054a8:	2803      	cmp	r0, #3
 80054aa:	d013      	beq.n	80054d4 <USBH_MSC_ClassRequest+0x4a>
      if (status == USBH_OK)
 80054ac:	2800      	cmp	r0, #0
 80054ae:	d1f7      	bne.n	80054a0 <USBH_MSC_ClassRequest+0x16>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80054b0:	7823      	ldrb	r3, [r4, #0]
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d90f      	bls.n	80054d6 <USBH_MSC_ClassRequest+0x4c>
 80054b6:	2302      	movs	r3, #2
 80054b8:	7023      	strb	r3, [r4, #0]
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80054ba:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
          MSC_Handle->unit[i].state_changed = 0U;
 80054be:	2300      	movs	r3, #0
 80054c0:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80054c4:	2302      	movs	r3, #2
 80054c6:	f884 30c6 	strb.w	r3, [r4, #198]	; 0xc6
          MSC_Handle->unit[i].state_changed = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
  USBH_StatusTypeDef status = USBH_BUSY;
 80054d0:	2000      	movs	r0, #0
 80054d2:	e7e5      	b.n	80054a0 <USBH_MSC_ClassRequest+0x16>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80054d4:	2300      	movs	r3, #0
 80054d6:	3301      	adds	r3, #1
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	7023      	strb	r3, [r4, #0]
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80054dc:	2202      	movs	r2, #2
 80054de:	f884 2092 	strb.w	r2, [r4, #146]	; 0x92
          MSC_Handle->unit[i].state_changed = 0U;
 80054e2:	2200      	movs	r2, #0
 80054e4:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d9f1      	bls.n	80054d0 <USBH_MSC_ClassRequest+0x46>
 80054ec:	e7ea      	b.n	80054c4 <USBH_MSC_ClassRequest+0x3a>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 80054ee:	2100      	movs	r1, #0
 80054f0:	f001 fb39 	bl	8006b66 <USBH_ClrFeature>
 80054f4:	b918      	cbnz	r0, 80054fe <USBH_MSC_ClassRequest+0x74>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80054f6:	7be3      	ldrb	r3, [r4, #15]
 80054f8:	73a3      	strb	r3, [r4, #14]
  USBH_StatusTypeDef status = USBH_BUSY;
 80054fa:	2001      	movs	r0, #1
 80054fc:	e7d0      	b.n	80054a0 <USBH_MSC_ClassRequest+0x16>
 80054fe:	2001      	movs	r0, #1
  return status;
 8005500:	e7ce      	b.n	80054a0 <USBH_MSC_ClassRequest+0x16>

08005502 <USBH_MSC_InterfaceDeInit>:
{
 8005502:	b538      	push	{r3, r4, r5, lr}
 8005504:	4604      	mov	r4, r0
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005506:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 800550a:	69dd      	ldr	r5, [r3, #28]
  if ((MSC_Handle->OutPipe) != 0U)
 800550c:	7969      	ldrb	r1, [r5, #5]
 800550e:	b951      	cbnz	r1, 8005526 <USBH_MSC_InterfaceDeInit+0x24>
  if ((MSC_Handle->InPipe != 0U))
 8005510:	7929      	ldrb	r1, [r5, #4]
 8005512:	b991      	cbnz	r1, 800553a <USBH_MSC_InterfaceDeInit+0x38>
    USBH_free(phost->pActiveClass->pData);
 8005514:	4628      	mov	r0, r5
 8005516:	f002 f8df 	bl	80076d8 <free>
    phost->pActiveClass->pData = 0U;
 800551a:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 800551e:	2200      	movs	r2, #0
 8005520:	61da      	str	r2, [r3, #28]
}
 8005522:	2000      	movs	r0, #0
 8005524:	bd38      	pop	{r3, r4, r5, pc}
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8005526:	f001 fba1 	bl	8006c6c <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800552a:	7969      	ldrb	r1, [r5, #5]
 800552c:	4620      	mov	r0, r4
 800552e:	f001 fbc1 	bl	8006cb4 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8005532:	2300      	movs	r3, #0
 8005534:	716b      	strb	r3, [r5, #5]
  if ((MSC_Handle->InPipe != 0U))
 8005536:	7929      	ldrb	r1, [r5, #4]
 8005538:	b141      	cbz	r1, 800554c <USBH_MSC_InterfaceDeInit+0x4a>
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800553a:	4620      	mov	r0, r4
 800553c:	f001 fb96 	bl	8006c6c <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8005540:	7929      	ldrb	r1, [r5, #4]
 8005542:	4620      	mov	r0, r4
 8005544:	f001 fbb6 	bl	8006cb4 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8005548:	2300      	movs	r3, #0
 800554a:	712b      	strb	r3, [r5, #4]
  if ((phost->pActiveClass->pData) != NULL)
 800554c:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8005550:	69dd      	ldr	r5, [r3, #28]
 8005552:	2d00      	cmp	r5, #0
 8005554:	d0e5      	beq.n	8005522 <USBH_MSC_InterfaceDeInit+0x20>
 8005556:	e7dd      	b.n	8005514 <USBH_MSC_InterfaceDeInit+0x12>

08005558 <USBH_MSC_InterfaceInit>:
{
 8005558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800555a:	b085      	sub	sp, #20
 800555c:	4604      	mov	r4, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800555e:	f8d0 137c 	ldr.w	r1, [r0, #892]	; 0x37c
 8005562:	2350      	movs	r3, #80	; 0x50
 8005564:	2206      	movs	r2, #6
 8005566:	7909      	ldrb	r1, [r1, #4]
 8005568:	f000 fd51 	bl	800600e <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800556c:	2801      	cmp	r0, #1
 800556e:	f200 8084 	bhi.w	800567a <USBH_MSC_InterfaceInit+0x122>
 8005572:	4605      	mov	r5, r0
  status = USBH_SelectInterface(phost, interface);
 8005574:	4601      	mov	r1, r0
 8005576:	4620      	mov	r0, r4
 8005578:	f000 fd40 	bl	8005ffc <USBH_SelectInterface>
  if (status != USBH_OK)
 800557c:	4607      	mov	r7, r0
 800557e:	2800      	cmp	r0, #0
 8005580:	d17f      	bne.n	8005682 <USBH_MSC_InterfaceInit+0x12a>
  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8005582:	f8d4 637c 	ldr.w	r6, [r4, #892]	; 0x37c
 8005586:	f44f 7080 	mov.w	r0, #256	; 0x100
 800558a:	f002 f89d 	bl	80076c8 <malloc>
 800558e:	61f0      	str	r0, [r6, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005590:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8005594:	69de      	ldr	r6, [r3, #28]
  if (MSC_Handle == NULL)
 8005596:	2e00      	cmp	r6, #0
 8005598:	d075      	beq.n	8005686 <USBH_MSC_InterfaceInit+0x12e>
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800559a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800559e:	2100      	movs	r1, #0
 80055a0:	4630      	mov	r0, r6
 80055a2:	f002 f8af 	bl	8007704 <memset>
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80055a6:	231a      	movs	r3, #26
 80055a8:	fb03 4305 	mla	r3, r3, r5, r4
 80055ac:	f893 234e 	ldrb.w	r2, [r3, #846]	; 0x34e
 80055b0:	f993 334e 	ldrsb.w	r3, [r3, #846]	; 0x34e
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	db50      	blt.n	800565a <USBH_MSC_InterfaceInit+0x102>
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80055b8:	71b2      	strb	r2, [r6, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80055ba:	231a      	movs	r3, #26
 80055bc:	fb03 4305 	mla	r3, r3, r5, r4
 80055c0:	f8b3 3350 	ldrh.w	r3, [r3, #848]	; 0x350
 80055c4:	8133      	strh	r3, [r6, #8]
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80055c6:	231a      	movs	r3, #26
 80055c8:	fb03 4305 	mla	r3, r3, r5, r4
 80055cc:	f893 2356 	ldrb.w	r2, [r3, #854]	; 0x356
 80055d0:	f993 3356 	ldrsb.w	r3, [r3, #854]	; 0x356
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	db48      	blt.n	800566a <USBH_MSC_InterfaceInit+0x112>
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80055d8:	71b2      	strb	r2, [r6, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80055da:	201a      	movs	r0, #26
 80055dc:	fb00 4505 	mla	r5, r0, r5, r4
 80055e0:	f8b5 3358 	ldrh.w	r3, [r5, #856]	; 0x358
 80055e4:	8133      	strh	r3, [r6, #8]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80055e6:	79b1      	ldrb	r1, [r6, #6]
 80055e8:	4620      	mov	r0, r4
 80055ea:	f001 fb44 	bl	8006c76 <USBH_AllocPipe>
 80055ee:	7170      	strb	r0, [r6, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80055f0:	79f1      	ldrb	r1, [r6, #7]
 80055f2:	4620      	mov	r0, r4
 80055f4:	f001 fb3f 	bl	8006c76 <USBH_AllocPipe>
 80055f8:	7130      	strb	r0, [r6, #4]
  (void)USBH_MSC_BOT_Init(phost);
 80055fa:	4620      	mov	r0, r4
 80055fc:	f000 f9b6 	bl	800596c <USBH_MSC_BOT_Init>
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8005600:	79b2      	ldrb	r2, [r6, #6]
 8005602:	2a00      	cmp	r2, #0
 8005604:	d041      	beq.n	800568a <USBH_MSC_InterfaceInit+0x132>
 8005606:	8933      	ldrh	r3, [r6, #8]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d040      	beq.n	800568e <USBH_MSC_InterfaceInit+0x136>
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800560c:	7971      	ldrb	r1, [r6, #5]
 800560e:	9302      	str	r3, [sp, #8]
 8005610:	2302      	movs	r3, #2
 8005612:	9301      	str	r3, [sp, #4]
 8005614:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800561e:	4620      	mov	r0, r4
 8005620:	f001 fb14 	bl	8006c4c <USBH_OpenPipe>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8005624:	79f2      	ldrb	r2, [r6, #7]
 8005626:	b3a2      	cbz	r2, 8005692 <USBH_MSC_InterfaceInit+0x13a>
 8005628:	8973      	ldrh	r3, [r6, #10]
 800562a:	b3a3      	cbz	r3, 8005696 <USBH_MSC_InterfaceInit+0x13e>
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800562c:	7931      	ldrb	r1, [r6, #4]
 800562e:	9302      	str	r3, [sp, #8]
 8005630:	2302      	movs	r3, #2
 8005632:	9301      	str	r3, [sp, #4]
 8005634:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800563e:	4620      	mov	r0, r4
 8005640:	f001 fb04 	bl	8006c4c <USBH_OpenPipe>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8005644:	2200      	movs	r2, #0
 8005646:	7931      	ldrb	r1, [r6, #4]
 8005648:	4620      	mov	r0, r4
 800564a:	f001 ff8a 	bl	8007562 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800564e:	2200      	movs	r2, #0
 8005650:	7971      	ldrb	r1, [r6, #5]
 8005652:	4620      	mov	r0, r4
 8005654:	f001 ff85 	bl	8007562 <USBH_LL_SetToggle>
  return USBH_OK;
 8005658:	e010      	b.n	800567c <USBH_MSC_InterfaceInit+0x124>
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800565a:	71f2      	strb	r2, [r6, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800565c:	231a      	movs	r3, #26
 800565e:	fb03 4305 	mla	r3, r3, r5, r4
 8005662:	f8b3 3350 	ldrh.w	r3, [r3, #848]	; 0x350
 8005666:	8173      	strh	r3, [r6, #10]
 8005668:	e7ad      	b.n	80055c6 <USBH_MSC_InterfaceInit+0x6e>
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800566a:	71f2      	strb	r2, [r6, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800566c:	201a      	movs	r0, #26
 800566e:	fb00 4505 	mla	r5, r0, r5, r4
 8005672:	f8b5 3358 	ldrh.w	r3, [r5, #856]	; 0x358
 8005676:	8173      	strh	r3, [r6, #10]
 8005678:	e7b5      	b.n	80055e6 <USBH_MSC_InterfaceInit+0x8e>
    return USBH_FAIL;
 800567a:	2702      	movs	r7, #2
}
 800567c:	4638      	mov	r0, r7
 800567e:	b005      	add	sp, #20
 8005680:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return USBH_FAIL;
 8005682:	2702      	movs	r7, #2
 8005684:	e7fa      	b.n	800567c <USBH_MSC_InterfaceInit+0x124>
    return USBH_FAIL;
 8005686:	2702      	movs	r7, #2
 8005688:	e7f8      	b.n	800567c <USBH_MSC_InterfaceInit+0x124>
    return USBH_NOT_SUPPORTED;
 800568a:	2703      	movs	r7, #3
 800568c:	e7f6      	b.n	800567c <USBH_MSC_InterfaceInit+0x124>
 800568e:	2703      	movs	r7, #3
 8005690:	e7f4      	b.n	800567c <USBH_MSC_InterfaceInit+0x124>
    return USBH_NOT_SUPPORTED;
 8005692:	2703      	movs	r7, #3
 8005694:	e7f2      	b.n	800567c <USBH_MSC_InterfaceInit+0x124>
 8005696:	2703      	movs	r7, #3
 8005698:	e7f0      	b.n	800567c <USBH_MSC_InterfaceInit+0x124>

0800569a <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800569a:	b530      	push	{r4, r5, lr}
 800569c:	b083      	sub	sp, #12
 800569e:	460c      	mov	r4, r1
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80056a0:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80056a4:	69dd      	ldr	r5, [r3, #28]
  USBH_StatusTypeDef error = USBH_BUSY ;
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80056a6:	2334      	movs	r3, #52	; 0x34
 80056a8:	fb03 5301 	mla	r3, r3, r1, r5
 80056ac:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80056b0:	2b06      	cmp	r3, #6
 80056b2:	d006      	beq.n	80056c2 <USBH_MSC_RdWrProcess+0x28>
 80056b4:	2b07      	cmp	r3, #7
 80056b6:	d027      	beq.n	8005708 <USBH_MSC_RdWrProcess+0x6e>
 80056b8:	2b05      	cmp	r3, #5
 80056ba:	d048      	beq.n	800574e <USBH_MSC_RdWrProcess+0xb4>
 80056bc:	2001      	movs	r0, #1
    default:
      break;

  }
  return error;
}
 80056be:	b003      	add	sp, #12
 80056c0:	bd30      	pop	{r4, r5, pc}
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80056c2:	2200      	movs	r2, #0
 80056c4:	9200      	str	r2, [sp, #0]
 80056c6:	4613      	mov	r3, r2
 80056c8:	f000 fbf7 	bl	8005eba <USBH_MSC_SCSI_Read>
      if (scsi_status == USBH_OK)
 80056cc:	b930      	cbnz	r0, 80056dc <USBH_MSC_RdWrProcess+0x42>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80056ce:	2134      	movs	r1, #52	; 0x34
 80056d0:	fb01 5404 	mla	r4, r1, r4, r5
 80056d4:	2301      	movs	r3, #1
 80056d6:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        error = USBH_OK;
 80056da:	e7f0      	b.n	80056be <USBH_MSC_RdWrProcess+0x24>
      else if (scsi_status == USBH_FAIL)
 80056dc:	2802      	cmp	r0, #2
 80056de:	d003      	beq.n	80056e8 <USBH_MSC_RdWrProcess+0x4e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80056e0:	2804      	cmp	r0, #4
 80056e2:	d009      	beq.n	80056f8 <USBH_MSC_RdWrProcess+0x5e>
  USBH_StatusTypeDef error = USBH_BUSY ;
 80056e4:	2001      	movs	r0, #1
 80056e6:	e7ea      	b.n	80056be <USBH_MSC_RdWrProcess+0x24>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80056e8:	2334      	movs	r3, #52	; 0x34
 80056ea:	fb03 5404 	mla	r4, r3, r4, r5
 80056ee:	2305      	movs	r3, #5
 80056f0:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY ;
 80056f4:	2001      	movs	r0, #1
 80056f6:	e7e2      	b.n	80056be <USBH_MSC_RdWrProcess+0x24>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80056f8:	2334      	movs	r3, #52	; 0x34
 80056fa:	fb03 5404 	mla	r4, r3, r4, r5
 80056fe:	2308      	movs	r3, #8
 8005700:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
          error = USBH_FAIL;
 8005704:	2002      	movs	r0, #2
 8005706:	e7da      	b.n	80056be <USBH_MSC_RdWrProcess+0x24>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8005708:	2200      	movs	r2, #0
 800570a:	9200      	str	r2, [sp, #0]
 800570c:	4613      	mov	r3, r2
 800570e:	f000 fb8e 	bl	8005e2e <USBH_MSC_SCSI_Write>
      if (scsi_status == USBH_OK)
 8005712:	b930      	cbnz	r0, 8005722 <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8005714:	2134      	movs	r1, #52	; 0x34
 8005716:	fb01 5404 	mla	r4, r1, r4, r5
 800571a:	2301      	movs	r3, #1
 800571c:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        error = USBH_OK;
 8005720:	e7cd      	b.n	80056be <USBH_MSC_RdWrProcess+0x24>
      else if (scsi_status == USBH_FAIL)
 8005722:	2802      	cmp	r0, #2
 8005724:	d003      	beq.n	800572e <USBH_MSC_RdWrProcess+0x94>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005726:	2804      	cmp	r0, #4
 8005728:	d009      	beq.n	800573e <USBH_MSC_RdWrProcess+0xa4>
  USBH_StatusTypeDef error = USBH_BUSY ;
 800572a:	2001      	movs	r0, #1
 800572c:	e7c7      	b.n	80056be <USBH_MSC_RdWrProcess+0x24>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800572e:	2334      	movs	r3, #52	; 0x34
 8005730:	fb03 5404 	mla	r4, r3, r4, r5
 8005734:	2305      	movs	r3, #5
 8005736:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY ;
 800573a:	2001      	movs	r0, #1
 800573c:	e7bf      	b.n	80056be <USBH_MSC_RdWrProcess+0x24>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800573e:	2334      	movs	r3, #52	; 0x34
 8005740:	fb03 5404 	mla	r4, r3, r4, r5
 8005744:	2308      	movs	r3, #8
 8005746:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
          error = USBH_FAIL;
 800574a:	2002      	movs	r0, #2
 800574c:	e7b7      	b.n	80056be <USBH_MSC_RdWrProcess+0x24>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800574e:	2234      	movs	r2, #52	; 0x34
 8005750:	fb02 5201 	mla	r2, r2, r1, r5
 8005754:	329c      	adds	r2, #156	; 0x9c
 8005756:	f000 fb24 	bl	8005da2 <USBH_MSC_SCSI_RequestSense>
      if (scsi_status == USBH_OK)
 800575a:	b948      	cbnz	r0, 8005770 <USBH_MSC_RdWrProcess+0xd6>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800575c:	2134      	movs	r1, #52	; 0x34
 800575e:	fb01 5404 	mla	r4, r1, r4, r5
 8005762:	2301      	movs	r3, #1
 8005764:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8005768:	2002      	movs	r0, #2
 800576a:	f884 0091 	strb.w	r0, [r4, #145]	; 0x91
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800576e:	e7a6      	b.n	80056be <USBH_MSC_RdWrProcess+0x24>
 8005770:	2804      	cmp	r0, #4
 8005772:	d001      	beq.n	8005778 <USBH_MSC_RdWrProcess+0xde>
  USBH_StatusTypeDef error = USBH_BUSY ;
 8005774:	2001      	movs	r0, #1
 8005776:	e7a2      	b.n	80056be <USBH_MSC_RdWrProcess+0x24>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8005778:	2334      	movs	r3, #52	; 0x34
 800577a:	fb03 5404 	mla	r4, r3, r4, r5
 800577e:	2308      	movs	r3, #8
 8005780:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
          error = USBH_FAIL;
 8005784:	2002      	movs	r0, #2
 8005786:	e79a      	b.n	80056be <USBH_MSC_RdWrProcess+0x24>

08005788 <USBH_MSC_UnitIsReady>:
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8005788:	7803      	ldrb	r3, [r0, #0]
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b0b      	cmp	r3, #11
 800578e:	d001      	beq.n	8005794 <USBH_MSC_UnitIsReady+0xc>
  {
    res = 1U;
  }
  else
  {
    res = 0U;
 8005790:	2000      	movs	r0, #0
  }

  return res;
}
 8005792:	4770      	bx	lr
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005794:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	2234      	movs	r2, #52	; 0x34
 800579c:	fb02 3101 	mla	r1, r2, r1, r3
 80057a0:	f891 0091 	ldrb.w	r0, [r1, #145]	; 0x91
    res = 0U;
 80057a4:	fab0 f080 	clz	r0, r0
 80057a8:	0940      	lsrs	r0, r0, #5
 80057aa:	4770      	bx	lr

080057ac <USBH_MSC_GetLUNInfo>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  if (phost->gState == HOST_CLASS)
 80057ac:	7803      	ldrb	r3, [r0, #0]
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b0b      	cmp	r3, #11
 80057b2:	d001      	beq.n	80057b8 <USBH_MSC_GetLUNInfo+0xc>
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
    return USBH_OK;
  }
  else
  {
    return USBH_FAIL;
 80057b4:	2002      	movs	r0, #2
  }
}
 80057b6:	4770      	bx	lr
{
 80057b8:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80057ba:	f8d0 037c 	ldr.w	r0, [r0, #892]	; 0x37c
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80057be:	2334      	movs	r3, #52	; 0x34
 80057c0:	fb03 f101 	mul.w	r1, r3, r1
 80057c4:	3190      	adds	r1, #144	; 0x90
 80057c6:	69c3      	ldr	r3, [r0, #28]
 80057c8:	440b      	add	r3, r1
 80057ca:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80057ce:	f8d3 e000 	ldr.w	lr, [r3]
 80057d2:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80057d6:	6898      	ldr	r0, [r3, #8]
 80057d8:	68d9      	ldr	r1, [r3, #12]
 80057da:	f8c2 e000 	str.w	lr, [r2]
 80057de:	f8c2 c004 	str.w	ip, [r2, #4]
 80057e2:	6090      	str	r0, [r2, #8]
 80057e4:	60d1      	str	r1, [r2, #12]
 80057e6:	3310      	adds	r3, #16
 80057e8:	3210      	adds	r2, #16
 80057ea:	42a3      	cmp	r3, r4
 80057ec:	d1ef      	bne.n	80057ce <USBH_MSC_GetLUNInfo+0x22>
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6013      	str	r3, [r2, #0]
    return USBH_OK;
 80057f2:	2000      	movs	r0, #0
}
 80057f4:	bd10      	pop	{r4, pc}

080057f6 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80057f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	460d      	mov	r5, r1
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
 80057fe:	f890 1320 	ldrb.w	r1, [r0, #800]	; 0x320
 8005802:	2900      	cmp	r1, #0
 8005804:	d041      	beq.n	800588a <USBH_MSC_Read+0x94>
 8005806:	4604      	mov	r4, r0
      (phost->gState != HOST_CLASS) ||
 8005808:	7801      	ldrb	r1, [r0, #0]
 800580a:	b2c9      	uxtb	r1, r1
  if ((phost->device.is_connected == 0U) ||
 800580c:	290b      	cmp	r1, #11
 800580e:	d13e      	bne.n	800588e <USBH_MSC_Read+0x98>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005810:	f8d0 137c 	ldr.w	r1, [r0, #892]	; 0x37c
 8005814:	f8d1 801c 	ldr.w	r8, [r1, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8005818:	2134      	movs	r1, #52	; 0x34
 800581a:	fb01 8105 	mla	r1, r1, r5, r8
      (phost->gState != HOST_CLASS) ||
 800581e:	f891 1090 	ldrb.w	r1, [r1, #144]	; 0x90
 8005822:	2901      	cmp	r1, #1
 8005824:	d001      	beq.n	800582a <USBH_MSC_Read+0x34>
  {
    return  USBH_FAIL;
 8005826:	2002      	movs	r0, #2
 8005828:	e032      	b.n	8005890 <USBH_MSC_Read+0x9a>
  }

  MSC_Handle->state = MSC_READ;
 800582a:	2006      	movs	r0, #6
 800582c:	f888 000c 	strb.w	r0, [r8, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8005830:	2134      	movs	r1, #52	; 0x34
 8005832:	fb01 8105 	mla	r1, r1, r5, r8
 8005836:	f881 0090 	strb.w	r0, [r1, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 800583a:	f8a8 50fa 	strh.w	r5, [r8, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800583e:	9908      	ldr	r1, [sp, #32]
 8005840:	9100      	str	r1, [sp, #0]
 8005842:	4629      	mov	r1, r5
 8005844:	4620      	mov	r0, r4
 8005846:	f000 fb38 	bl	8005eba <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800584a:	f8d4 73c4 	ldr.w	r7, [r4, #964]	; 0x3c4

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800584e:	f242 7610 	movw	r6, #10000	; 0x2710
 8005852:	9b08      	ldr	r3, [sp, #32]
 8005854:	fb03 f606 	mul.w	r6, r3, r6
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8005858:	4629      	mov	r1, r5
 800585a:	4620      	mov	r0, r4
 800585c:	f7ff ff1d 	bl	800569a <USBH_MSC_RdWrProcess>
 8005860:	2801      	cmp	r0, #1
 8005862:	d10d      	bne.n	8005880 <USBH_MSC_Read+0x8a>
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8005864:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8005868:	1bdb      	subs	r3, r3, r7
 800586a:	42b3      	cmp	r3, r6
 800586c:	d803      	bhi.n	8005876 <USBH_MSC_Read+0x80>
 800586e:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1f0      	bne.n	8005858 <USBH_MSC_Read+0x62>
    {
      MSC_Handle->state = MSC_IDLE;
 8005876:	2301      	movs	r3, #1
 8005878:	f888 300c 	strb.w	r3, [r8, #12]
      return USBH_FAIL;
 800587c:	2002      	movs	r0, #2
 800587e:	e007      	b.n	8005890 <USBH_MSC_Read+0x9a>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8005880:	2301      	movs	r3, #1
 8005882:	f888 300c 	strb.w	r3, [r8, #12]

  return USBH_OK;
 8005886:	2000      	movs	r0, #0
 8005888:	e002      	b.n	8005890 <USBH_MSC_Read+0x9a>
    return  USBH_FAIL;
 800588a:	2002      	movs	r0, #2
 800588c:	e000      	b.n	8005890 <USBH_MSC_Read+0x9a>
 800588e:	2002      	movs	r0, #2
}
 8005890:	b002      	add	sp, #8
 8005892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005896 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8005896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	460d      	mov	r5, r1
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
 800589e:	f890 1320 	ldrb.w	r1, [r0, #800]	; 0x320
 80058a2:	2900      	cmp	r1, #0
 80058a4:	d041      	beq.n	800592a <USBH_MSC_Write+0x94>
 80058a6:	4604      	mov	r4, r0
      (phost->gState != HOST_CLASS) ||
 80058a8:	7801      	ldrb	r1, [r0, #0]
 80058aa:	b2c9      	uxtb	r1, r1
  if ((phost->device.is_connected == 0U) ||
 80058ac:	290b      	cmp	r1, #11
 80058ae:	d13e      	bne.n	800592e <USBH_MSC_Write+0x98>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80058b0:	f8d0 137c 	ldr.w	r1, [r0, #892]	; 0x37c
 80058b4:	f8d1 801c 	ldr.w	r8, [r1, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80058b8:	2134      	movs	r1, #52	; 0x34
 80058ba:	fb01 8105 	mla	r1, r1, r5, r8
      (phost->gState != HOST_CLASS) ||
 80058be:	f891 1090 	ldrb.w	r1, [r1, #144]	; 0x90
 80058c2:	2901      	cmp	r1, #1
 80058c4:	d001      	beq.n	80058ca <USBH_MSC_Write+0x34>
  {
    return  USBH_FAIL;
 80058c6:	2002      	movs	r0, #2
 80058c8:	e032      	b.n	8005930 <USBH_MSC_Write+0x9a>
  }

  MSC_Handle->state = MSC_WRITE;
 80058ca:	2007      	movs	r0, #7
 80058cc:	f888 000c 	strb.w	r0, [r8, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80058d0:	2134      	movs	r1, #52	; 0x34
 80058d2:	fb01 8105 	mla	r1, r1, r5, r8
 80058d6:	f881 0090 	strb.w	r0, [r1, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 80058da:	f8a8 50fa 	strh.w	r5, [r8, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80058de:	9908      	ldr	r1, [sp, #32]
 80058e0:	9100      	str	r1, [sp, #0]
 80058e2:	4629      	mov	r1, r5
 80058e4:	4620      	mov	r0, r4
 80058e6:	f000 faa2 	bl	8005e2e <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80058ea:	f8d4 73c4 	ldr.w	r7, [r4, #964]	; 0x3c4
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80058ee:	f242 7610 	movw	r6, #10000	; 0x2710
 80058f2:	9b08      	ldr	r3, [sp, #32]
 80058f4:	fb03 f606 	mul.w	r6, r3, r6
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80058f8:	4629      	mov	r1, r5
 80058fa:	4620      	mov	r0, r4
 80058fc:	f7ff fecd 	bl	800569a <USBH_MSC_RdWrProcess>
 8005900:	2801      	cmp	r0, #1
 8005902:	d10d      	bne.n	8005920 <USBH_MSC_Write+0x8a>
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8005904:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8005908:	1bdb      	subs	r3, r3, r7
 800590a:	42b3      	cmp	r3, r6
 800590c:	d803      	bhi.n	8005916 <USBH_MSC_Write+0x80>
 800590e:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1f0      	bne.n	80058f8 <USBH_MSC_Write+0x62>
    {
      MSC_Handle->state = MSC_IDLE;
 8005916:	2301      	movs	r3, #1
 8005918:	f888 300c 	strb.w	r3, [r8, #12]
      return USBH_FAIL;
 800591c:	2002      	movs	r0, #2
 800591e:	e007      	b.n	8005930 <USBH_MSC_Write+0x9a>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8005920:	2301      	movs	r3, #1
 8005922:	f888 300c 	strb.w	r3, [r8, #12]
  return USBH_OK;
 8005926:	2000      	movs	r0, #0
 8005928:	e002      	b.n	8005930 <USBH_MSC_Write+0x9a>
    return  USBH_FAIL;
 800592a:	2002      	movs	r0, #2
 800592c:	e000      	b.n	8005930 <USBH_MSC_Write+0x9a>
 800592e:	2002      	movs	r0, #2
}
 8005930:	b002      	add	sp, #8
 8005932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005936 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8005936:	b508      	push	{r3, lr}

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8005938:	2221      	movs	r2, #33	; 0x21
 800593a:	7402      	strb	r2, [r0, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800593c:	22ff      	movs	r2, #255	; 0xff
 800593e:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005940:	2100      	movs	r1, #0
 8005942:	8241      	strh	r1, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005944:	8281      	strh	r1, [r0, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8005946:	82c1      	strh	r1, [r0, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8005948:	460a      	mov	r2, r1
 800594a:	f000 fe2c 	bl	80065a6 <USBH_CtlReq>
}
 800594e:	bd08      	pop	{r3, pc}

08005950 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8005950:	b508      	push	{r3, lr}
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8005952:	22a1      	movs	r2, #161	; 0xa1
 8005954:	7402      	strb	r2, [r0, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8005956:	22fe      	movs	r2, #254	; 0xfe
 8005958:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800595a:	2200      	movs	r2, #0
 800595c:	8242      	strh	r2, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800595e:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8005960:	2201      	movs	r2, #1
 8005962:	82c2      	strh	r2, [r0, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8005964:	f000 fe1f 	bl	80065a6 <USBH_CtlReq>
}
 8005968:	bd08      	pop	{r3, pc}
	...

0800596c <USBH_MSC_BOT_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800596c:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8005970:	69db      	ldr	r3, [r3, #28]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8005972:	4a05      	ldr	r2, [pc, #20]	; (8005988 <USBH_MSC_BOT_Init+0x1c>)
 8005974:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8005976:	4a05      	ldr	r2, [pc, #20]	; (800598c <USBH_MSC_BOT_Init+0x20>)
 8005978:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8005980:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
}
 8005984:	2000      	movs	r0, #0
 8005986:	4770      	bx	lr
 8005988:	43425355 	.word	0x43425355
 800598c:	20304050 	.word	0x20304050

08005990 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8005990:	b570      	push	{r4, r5, r6, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	4605      	mov	r5, r0
  USBH_StatusTypeDef   status = USBH_BUSY;
  USBH_StatusTypeDef   error  = USBH_BUSY;
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005996:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 800599a:	69de      	ldr	r6, [r3, #28]
  uint8_t toggle = 0U;

  switch (MSC_Handle->hbot.state)
 800599c:	f896 4050 	ldrb.w	r4, [r6, #80]	; 0x50
 80059a0:	1e63      	subs	r3, r4, #1
 80059a2:	2b0a      	cmp	r3, #10
 80059a4:	f200 8126 	bhi.w	8005bf4 <USBH_MSC_BOT_Process+0x264>
 80059a8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80059ac:	001b000b 	.word	0x001b000b
 80059b0:	004a003f 	.word	0x004a003f
 80059b4:	007c0070 	.word	0x007c0070
 80059b8:	00b600ab 	.word	0x00b600ab
 80059bc:	00f800e6 	.word	0x00f800e6
 80059c0:	011a      	.short	0x011a
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80059c2:	f886 1061 	strb.w	r1, [r6, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80059c6:	2302      	movs	r3, #2
 80059c8:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80059cc:	7973      	ldrb	r3, [r6, #5]
 80059ce:	2201      	movs	r2, #1
 80059d0:	9200      	str	r2, [sp, #0]
 80059d2:	221f      	movs	r2, #31
 80059d4:	f106 0154 	add.w	r1, r6, #84	; 0x54
 80059d8:	f001 f910 	bl	8006bfc <USBH_BulkSendData>

    default:
      break;
  }
  return status;
}
 80059dc:	4620      	mov	r0, r4
 80059de:	b002      	add	sp, #8
 80059e0:	bd70      	pop	{r4, r5, r6, pc}
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80059e2:	7971      	ldrb	r1, [r6, #5]
 80059e4:	f001 fda9 	bl	800753a <USBH_LL_GetURBState>
 80059e8:	4604      	mov	r4, r0
      if (URB_Status == USBH_URB_DONE)
 80059ea:	2801      	cmp	r0, #1
 80059ec:	d005      	beq.n	80059fa <USBH_MSC_BOT_Process+0x6a>
      else if (URB_Status == USBH_URB_NOTREADY)
 80059ee:	2802      	cmp	r0, #2
 80059f0:	d012      	beq.n	8005a18 <USBH_MSC_BOT_Process+0x88>
        if (URB_Status == USBH_URB_STALL)
 80059f2:	2805      	cmp	r0, #5
 80059f4:	d014      	beq.n	8005a20 <USBH_MSC_BOT_Process+0x90>
  USBH_StatusTypeDef   status = USBH_BUSY;
 80059f6:	2401      	movs	r4, #1
 80059f8:	e7f0      	b.n	80059dc <USBH_MSC_BOT_Process+0x4c>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80059fa:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 80059fc:	b143      	cbz	r3, 8005a10 <USBH_MSC_BOT_Process+0x80>
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80059fe:	f996 3060 	ldrsb.w	r3, [r6, #96]	; 0x60
 8005a02:	2b00      	cmp	r3, #0
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8005a04:	bfb4      	ite	lt
 8005a06:	2303      	movlt	r3, #3
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8005a08:	2305      	movge	r3, #5
 8005a0a:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8005a0e:	e7e5      	b.n	80059dc <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8005a10:	2307      	movs	r3, #7
 8005a12:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8005a16:	e7e1      	b.n	80059dc <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005a18:	2401      	movs	r4, #1
 8005a1a:	f886 4050 	strb.w	r4, [r6, #80]	; 0x50
 8005a1e:	e7dd      	b.n	80059dc <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8005a20:	230a      	movs	r3, #10
 8005a22:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005a26:	2401      	movs	r4, #1
 8005a28:	e7d8      	b.n	80059dc <USBH_MSC_BOT_Process+0x4c>
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8005a2a:	7933      	ldrb	r3, [r6, #4]
 8005a2c:	8972      	ldrh	r2, [r6, #10]
 8005a2e:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8005a32:	f001 f8fb 	bl	8006c2c <USBH_BulkReceiveData>
      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8005a36:	2304      	movs	r3, #4
 8005a38:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005a3c:	2401      	movs	r4, #1
      break;
 8005a3e:	e7cd      	b.n	80059dc <USBH_MSC_BOT_Process+0x4c>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8005a40:	7931      	ldrb	r1, [r6, #4]
 8005a42:	f001 fd7a 	bl	800753a <USBH_LL_GetURBState>
 8005a46:	4604      	mov	r4, r0
      if (URB_Status == USBH_URB_DONE)
 8005a48:	2801      	cmp	r0, #1
 8005a4a:	d003      	beq.n	8005a54 <USBH_MSC_BOT_Process+0xc4>
      else if (URB_Status == USBH_URB_STALL)
 8005a4c:	2805      	cmp	r0, #5
 8005a4e:	d018      	beq.n	8005a82 <USBH_MSC_BOT_Process+0xf2>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005a50:	2401      	movs	r4, #1
 8005a52:	e7c3      	b.n	80059dc <USBH_MSC_BOT_Process+0x4c>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8005a54:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8005a56:	8972      	ldrh	r2, [r6, #10]
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d90c      	bls.n	8005a76 <USBH_MSC_BOT_Process+0xe6>
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8005a5c:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8005a60:	4411      	add	r1, r2
 8005a62:	f8c6 108c 	str.w	r1, [r6, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8005a66:	1a9b      	subs	r3, r3, r2
 8005a68:	65f3      	str	r3, [r6, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8005a6a:	b133      	cbz	r3, 8005a7a <USBH_MSC_BOT_Process+0xea>
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8005a6c:	7933      	ldrb	r3, [r6, #4]
 8005a6e:	4628      	mov	r0, r5
 8005a70:	f001 f8dc 	bl	8006c2c <USBH_BulkReceiveData>
 8005a74:	e7b2      	b.n	80059dc <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	65f3      	str	r3, [r6, #92]	; 0x5c
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8005a7a:	2307      	movs	r3, #7
 8005a7c:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8005a80:	e7ac      	b.n	80059dc <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8005a82:	2309      	movs	r3, #9
 8005a84:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005a88:	2401      	movs	r4, #1
 8005a8a:	e7a7      	b.n	80059dc <USBH_MSC_BOT_Process+0x4c>
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8005a8c:	7973      	ldrb	r3, [r6, #5]
 8005a8e:	8932      	ldrh	r2, [r6, #8]
 8005a90:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8005a94:	2401      	movs	r4, #1
 8005a96:	9400      	str	r4, [sp, #0]
 8005a98:	f001 f8b0 	bl	8006bfc <USBH_BulkSendData>
      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8005a9c:	2306      	movs	r3, #6
 8005a9e:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      break;
 8005aa2:	e79b      	b.n	80059dc <USBH_MSC_BOT_Process+0x4c>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8005aa4:	7971      	ldrb	r1, [r6, #5]
 8005aa6:	f001 fd48 	bl	800753a <USBH_LL_GetURBState>
 8005aaa:	4604      	mov	r4, r0
      if (URB_Status == USBH_URB_DONE)
 8005aac:	2801      	cmp	r0, #1
 8005aae:	d005      	beq.n	8005abc <USBH_MSC_BOT_Process+0x12c>
      else if (URB_Status == USBH_URB_NOTREADY)
 8005ab0:	2802      	cmp	r0, #2
 8005ab2:	d01c      	beq.n	8005aee <USBH_MSC_BOT_Process+0x15e>
      else if (URB_Status == USBH_URB_STALL)
 8005ab4:	2805      	cmp	r0, #5
 8005ab6:	d01f      	beq.n	8005af8 <USBH_MSC_BOT_Process+0x168>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005ab8:	2401      	movs	r4, #1
 8005aba:	e78f      	b.n	80059dc <USBH_MSC_BOT_Process+0x4c>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8005abc:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8005abe:	8932      	ldrh	r2, [r6, #8]
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d90e      	bls.n	8005ae2 <USBH_MSC_BOT_Process+0x152>
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8005ac4:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8005ac8:	4411      	add	r1, r2
 8005aca:	f8c6 108c 	str.w	r1, [r6, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8005ace:	1a9b      	subs	r3, r3, r2
 8005ad0:	65f3      	str	r3, [r6, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8005ad2:	b143      	cbz	r3, 8005ae6 <USBH_MSC_BOT_Process+0x156>
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8005ad4:	7973      	ldrb	r3, [r6, #5]
 8005ad6:	2001      	movs	r0, #1
 8005ad8:	9000      	str	r0, [sp, #0]
 8005ada:	4628      	mov	r0, r5
 8005adc:	f001 f88e 	bl	8006bfc <USBH_BulkSendData>
 8005ae0:	e77c      	b.n	80059dc <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	65f3      	str	r3, [r6, #92]	; 0x5c
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8005ae6:	2307      	movs	r3, #7
 8005ae8:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8005aec:	e776      	b.n	80059dc <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8005aee:	2305      	movs	r3, #5
 8005af0:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005af4:	2401      	movs	r4, #1
 8005af6:	e771      	b.n	80059dc <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8005af8:	230a      	movs	r3, #10
 8005afa:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005afe:	2401      	movs	r4, #1
 8005b00:	e76c      	b.n	80059dc <USBH_MSC_BOT_Process+0x4c>
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8005b02:	7933      	ldrb	r3, [r6, #4]
 8005b04:	220d      	movs	r2, #13
 8005b06:	f106 0178 	add.w	r1, r6, #120	; 0x78
 8005b0a:	f001 f88f 	bl	8006c2c <USBH_BulkReceiveData>
      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8005b0e:	2308      	movs	r3, #8
 8005b10:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005b14:	2401      	movs	r4, #1
      break;
 8005b16:	e761      	b.n	80059dc <USBH_MSC_BOT_Process+0x4c>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8005b18:	7931      	ldrb	r1, [r6, #4]
 8005b1a:	f001 fd0e 	bl	800753a <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8005b1e:	2801      	cmp	r0, #1
 8005b20:	d003      	beq.n	8005b2a <USBH_MSC_BOT_Process+0x19a>
      else if (URB_Status == USBH_URB_STALL)
 8005b22:	2805      	cmp	r0, #5
 8005b24:	d023      	beq.n	8005b6e <USBH_MSC_BOT_Process+0x1de>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005b26:	2401      	movs	r4, #1
 8005b28:	e758      	b.n	80059dc <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8005b30:	f886 3052 	strb.w	r3, [r6, #82]	; 0x52
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005b34:	f8d5 337c 	ldr.w	r3, [r5, #892]	; 0x37c
 8005b38:	69dc      	ldr	r4, [r3, #28]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8005b3a:	7921      	ldrb	r1, [r4, #4]
 8005b3c:	4628      	mov	r0, r5
 8005b3e:	f001 fcf6 	bl	800752e <USBH_LL_GetLastXferSize>
 8005b42:	280d      	cmp	r0, #13
 8005b44:	d001      	beq.n	8005b4a <USBH_MSC_BOT_Process+0x1ba>
          status = USBH_FAIL;
 8005b46:	2402      	movs	r4, #2
 8005b48:	e748      	b.n	80059dc <USBH_MSC_BOT_Process+0x4c>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8005b4a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8005b4c:	4b2a      	ldr	r3, [pc, #168]	; (8005bf8 <USBH_MSC_BOT_Process+0x268>)
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d001      	beq.n	8005b56 <USBH_MSC_BOT_Process+0x1c6>
          status = USBH_FAIL;
 8005b52:	2402      	movs	r4, #2
 8005b54:	e742      	b.n	80059dc <USBH_MSC_BOT_Process+0x4c>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8005b56:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005b58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d001      	beq.n	8005b62 <USBH_MSC_BOT_Process+0x1d2>
          status = USBH_FAIL;
 8005b5e:	2402      	movs	r4, #2
 8005b60:	e73c      	b.n	80059dc <USBH_MSC_BOT_Process+0x4c>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8005b62:	f894 4084 	ldrb.w	r4, [r4, #132]	; 0x84
          status = USBH_FAIL;
 8005b66:	2c00      	cmp	r4, #0
 8005b68:	bf18      	it	ne
 8005b6a:	2402      	movne	r4, #2
 8005b6c:	e736      	b.n	80059dc <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8005b6e:	2309      	movs	r3, #9
 8005b70:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005b74:	2401      	movs	r4, #1
 8005b76:	e731      	b.n	80059dc <USBH_MSC_BOT_Process+0x4c>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8005b78:	79f1      	ldrb	r1, [r6, #7]
 8005b7a:	f000 fff4 	bl	8006b66 <USBH_ClrFeature>
      if (error == USBH_OK)
 8005b7e:	b920      	cbnz	r0, 8005b8a <USBH_MSC_BOT_Process+0x1fa>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8005b80:	2307      	movs	r3, #7
 8005b82:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005b86:	2401      	movs	r4, #1
 8005b88:	e728      	b.n	80059dc <USBH_MSC_BOT_Process+0x4c>
      else if (error == USBH_UNRECOVERED_ERROR)
 8005b8a:	2804      	cmp	r0, #4
 8005b8c:	d001      	beq.n	8005b92 <USBH_MSC_BOT_Process+0x202>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005b8e:	2401      	movs	r4, #1
 8005b90:	e724      	b.n	80059dc <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8005b92:	230b      	movs	r3, #11
 8005b94:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005b98:	2401      	movs	r4, #1
 8005b9a:	e71f      	b.n	80059dc <USBH_MSC_BOT_Process+0x4c>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8005b9c:	79b1      	ldrb	r1, [r6, #6]
 8005b9e:	f000 ffe2 	bl	8006b66 <USBH_ClrFeature>
      if (error == USBH_OK)
 8005ba2:	b118      	cbz	r0, 8005bac <USBH_MSC_BOT_Process+0x21c>
        if (error == USBH_UNRECOVERED_ERROR)
 8005ba4:	2804      	cmp	r0, #4
 8005ba6:	d016      	beq.n	8005bd6 <USBH_MSC_BOT_Process+0x246>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005ba8:	2401      	movs	r4, #1
 8005baa:	e717      	b.n	80059dc <USBH_MSC_BOT_Process+0x4c>
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8005bac:	7971      	ldrb	r1, [r6, #5]
 8005bae:	4628      	mov	r0, r5
 8005bb0:	f001 fcec 	bl	800758c <USBH_LL_GetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8005bb4:	f1c0 0201 	rsb	r2, r0, #1
 8005bb8:	b2d2      	uxtb	r2, r2
 8005bba:	7971      	ldrb	r1, [r6, #5]
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	f001 fcd0 	bl	8007562 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	7931      	ldrb	r1, [r6, #4]
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	f001 fccb 	bl	8007562 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8005bcc:	2309      	movs	r3, #9
 8005bce:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005bd2:	2401      	movs	r4, #1
 8005bd4:	e702      	b.n	80059dc <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8005bd6:	230b      	movs	r3, #11
 8005bd8:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005bdc:	2401      	movs	r4, #1
 8005bde:	e6fd      	b.n	80059dc <USBH_MSC_BOT_Process+0x4c>
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8005be0:	f7ff fea9 	bl	8005936 <USBH_MSC_BOT_REQ_Reset>
      if (status == USBH_OK)
 8005be4:	4604      	mov	r4, r0
 8005be6:	2800      	cmp	r0, #0
 8005be8:	f47f aef8 	bne.w	80059dc <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005bec:	2301      	movs	r3, #1
 8005bee:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8005bf2:	e6f3      	b.n	80059dc <USBH_MSC_BOT_Process+0x4c>
  switch (MSC_Handle->hbot.state)
 8005bf4:	2401      	movs	r4, #1
 8005bf6:	e6f1      	b.n	80059dc <USBH_MSC_BOT_Process+0x4c>
 8005bf8:	53425355 	.word	0x53425355

08005bfc <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8005bfc:	b508      	push	{r3, lr}
 8005bfe:	4602      	mov	r2, r0
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c00:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8005c04:	69db      	ldr	r3, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8005c06:	f893 0052 	ldrb.w	r0, [r3, #82]	; 0x52
 8005c0a:	2801      	cmp	r0, #1
 8005c0c:	d003      	beq.n	8005c16 <USBH_MSC_SCSI_TestUnitReady+0x1a>
 8005c0e:	2802      	cmp	r0, #2
 8005c10:	d017      	beq.n	8005c42 <USBH_MSC_SCSI_TestUnitReady+0x46>
 8005c12:	2002      	movs	r0, #2
    default:
      break;
  }

  return error;
}
 8005c14:	bd08      	pop	{r3, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8005c16:	2200      	movs	r2, #0
 8005c18:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8005c1a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005c1e:	210a      	movs	r1, #10
 8005c20:	f883 1062 	strb.w	r1, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005c24:	f8c3 2063 	str.w	r2, [r3, #99]	; 0x63
 8005c28:	f8c3 2067 	str.w	r2, [r3, #103]	; 0x67
 8005c2c:	f8c3 206b 	str.w	r2, [r3, #107]	; 0x6b
 8005c30:	f8c3 206f 	str.w	r2, [r3, #111]	; 0x6f
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      break;
 8005c40:	e7e8      	b.n	8005c14 <USBH_MSC_SCSI_TestUnitReady+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005c42:	4610      	mov	r0, r2
 8005c44:	f7ff fea4 	bl	8005990 <USBH_MSC_BOT_Process>
      break;
 8005c48:	e7e4      	b.n	8005c14 <USBH_MSC_SCSI_TestUnitReady+0x18>

08005c4a <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8005c4a:	b538      	push	{r3, r4, r5, lr}
 8005c4c:	4603      	mov	r3, r0
  USBH_StatusTypeDef    error = USBH_BUSY ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c4e:	f8d0 037c 	ldr.w	r0, [r0, #892]	; 0x37c
 8005c52:	69c4      	ldr	r4, [r0, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8005c54:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
 8005c58:	2801      	cmp	r0, #1
 8005c5a:	d004      	beq.n	8005c66 <USBH_MSC_SCSI_ReadCapacity+0x1c>
 8005c5c:	4615      	mov	r5, r2
 8005c5e:	2802      	cmp	r0, #2
 8005c60:	d020      	beq.n	8005ca4 <USBH_MSC_SCSI_ReadCapacity+0x5a>
 8005c62:	2001      	movs	r0, #1
    default:
      break;
  }

  return error;
}
 8005c64:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8005c66:	2308      	movs	r3, #8
 8005c68:	65e3      	str	r3, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8005c6a:	2380      	movs	r3, #128	; 0x80
 8005c6c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005c70:	230a      	movs	r3, #10
 8005c72:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005c76:	2300      	movs	r3, #0
 8005c78:	f8c4 3063 	str.w	r3, [r4, #99]	; 0x63
 8005c7c:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 8005c80:	f8c4 306b 	str.w	r3, [r4, #107]	; 0x6b
 8005c84:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8005c88:	2325      	movs	r3, #37	; 0x25
 8005c8a:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005c94:	2302      	movs	r3, #2
 8005c96:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8005c9a:	f104 0310 	add.w	r3, r4, #16
 8005c9e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 8005ca2:	e7df      	b.n	8005c64 <USBH_MSC_SCSI_ReadCapacity+0x1a>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7ff fe73 	bl	8005990 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8005caa:	2800      	cmp	r0, #0
 8005cac:	d1da      	bne.n	8005c64 <USBH_MSC_SCSI_ReadCapacity+0x1a>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8005cae:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005cb2:	7891      	ldrb	r1, [r2, #2]
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8005cb4:	7853      	ldrb	r3, [r2, #1]
 8005cb6:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8005cb8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005cbc:	78d1      	ldrb	r1, [r2, #3]
 8005cbe:	430b      	orrs	r3, r1
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8005cc0:	7812      	ldrb	r2, [r2, #0]
 8005cc2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8005cc6:	602b      	str	r3, [r5, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8005cc8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005ccc:	7991      	ldrb	r1, [r2, #6]
 8005cce:	79d3      	ldrb	r3, [r2, #7]
 8005cd0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005cd4:	80ab      	strh	r3, [r5, #4]
 8005cd6:	e7c5      	b.n	8005c64 <USBH_MSC_SCSI_ReadCapacity+0x1a>

08005cd8 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8005cd8:	b570      	push	{r4, r5, r6, lr}
  USBH_StatusTypeDef error = USBH_FAIL;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005cda:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8005cde:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8005ce0:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8005ce4:	2d01      	cmp	r5, #1
 8005ce6:	d005      	beq.n	8005cf4 <USBH_MSC_SCSI_Inquiry+0x1c>
 8005ce8:	4616      	mov	r6, r2
 8005cea:	2d02      	cmp	r5, #2
 8005cec:	d024      	beq.n	8005d38 <USBH_MSC_SCSI_Inquiry+0x60>
 8005cee:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	bd70      	pop	{r4, r5, r6, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8005cf4:	2224      	movs	r2, #36	; 0x24
 8005cf6:	65e2      	str	r2, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8005cf8:	2380      	movs	r3, #128	; 0x80
 8005cfa:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005cfe:	230a      	movs	r3, #10
 8005d00:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8005d04:	2300      	movs	r3, #0
 8005d06:	f8c4 3063 	str.w	r3, [r4, #99]	; 0x63
 8005d0a:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 8005d0e:	f8a4 306b 	strh.w	r3, [r4, #107]	; 0x6b
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8005d12:	2312      	movs	r3, #18
 8005d14:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8005d18:	0149      	lsls	r1, r1, #5
 8005d1a:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8005d1e:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005d22:	2301      	movs	r3, #1
 8005d24:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005d28:	2302      	movs	r3, #2
 8005d2a:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8005d2e:	f104 0310 	add.w	r3, r4, #16
 8005d32:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 8005d36:	e7db      	b.n	8005cf0 <USBH_MSC_SCSI_Inquiry+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005d38:	f7ff fe2a 	bl	8005990 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8005d3c:	4605      	mov	r5, r0
 8005d3e:	2800      	cmp	r0, #0
 8005d40:	d1d6      	bne.n	8005cf0 <USBH_MSC_SCSI_Inquiry+0x18>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8005d42:	2222      	movs	r2, #34	; 0x22
 8005d44:	2100      	movs	r1, #0
 8005d46:	4630      	mov	r0, r6
 8005d48:	f001 fcdc 	bl	8007704 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8005d4c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	f003 031f 	and.w	r3, r3, #31
 8005d56:	7073      	strb	r3, [r6, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8005d58:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	095b      	lsrs	r3, r3, #5
 8005d60:	7033      	strb	r3, [r6, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8005d62:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005d66:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005d6a:	2b00      	cmp	r3, #0
          inquiry->RemovableMedia = 1U;
 8005d6c:	bfbc      	itt	lt
 8005d6e:	2301      	movlt	r3, #1
 8005d70:	70b3      	strblt	r3, [r6, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8005d72:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005d76:	689a      	ldr	r2, [r3, #8]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	f8c6 2003 	str.w	r2, [r6, #3]
 8005d7e:	f8c6 3007 	str.w	r3, [r6, #7]
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8005d82:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005d86:	6918      	ldr	r0, [r3, #16]
 8005d88:	6959      	ldr	r1, [r3, #20]
 8005d8a:	699a      	ldr	r2, [r3, #24]
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	60f0      	str	r0, [r6, #12]
 8005d90:	6131      	str	r1, [r6, #16]
 8005d92:	6172      	str	r2, [r6, #20]
 8005d94:	61b3      	str	r3, [r6, #24]
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8005d96:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005d9a:	6a1b      	ldr	r3, [r3, #32]
 8005d9c:	f8c6 301d 	str.w	r3, [r6, #29]
 8005da0:	e7a6      	b.n	8005cf0 <USBH_MSC_SCSI_Inquiry+0x18>

08005da2 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8005da2:	b538      	push	{r3, r4, r5, lr}
 8005da4:	4603      	mov	r3, r0
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005da6:	f8d0 037c 	ldr.w	r0, [r0, #892]	; 0x37c
 8005daa:	69c4      	ldr	r4, [r0, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8005dac:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
 8005db0:	2801      	cmp	r0, #1
 8005db2:	d004      	beq.n	8005dbe <USBH_MSC_SCSI_RequestSense+0x1c>
 8005db4:	4615      	mov	r5, r2
 8005db6:	2802      	cmp	r0, #2
 8005db8:	d025      	beq.n	8005e06 <USBH_MSC_SCSI_RequestSense+0x64>
 8005dba:	2002      	movs	r0, #2
    default:
      break;
  }

  return error;
}
 8005dbc:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8005dbe:	220e      	movs	r2, #14
 8005dc0:	65e2      	str	r2, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8005dc2:	2380      	movs	r3, #128	; 0x80
 8005dc4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005dc8:	230a      	movs	r3, #10
 8005dca:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005dce:	2300      	movs	r3, #0
 8005dd0:	f8c4 3063 	str.w	r3, [r4, #99]	; 0x63
 8005dd4:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 8005dd8:	f8c4 306b 	str.w	r3, [r4, #107]	; 0x6b
 8005ddc:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8005de0:	2303      	movs	r3, #3
 8005de2:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8005de6:	0149      	lsls	r1, r1, #5
 8005de8:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8005dec:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005df0:	2301      	movs	r3, #1
 8005df2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005df6:	2302      	movs	r3, #2
 8005df8:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8005dfc:	f104 0310 	add.w	r3, r4, #16
 8005e00:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 8005e04:	e7da      	b.n	8005dbc <USBH_MSC_SCSI_RequestSense+0x1a>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7ff fdc2 	bl	8005990 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	d1d5      	bne.n	8005dbc <USBH_MSC_SCSI_RequestSense+0x1a>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8005e10:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005e14:	789b      	ldrb	r3, [r3, #2]
 8005e16:	f003 030f 	and.w	r3, r3, #15
 8005e1a:	702b      	strb	r3, [r5, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8005e1c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005e20:	7b1b      	ldrb	r3, [r3, #12]
 8005e22:	706b      	strb	r3, [r5, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8005e24:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005e28:	7b5b      	ldrb	r3, [r3, #13]
 8005e2a:	70ab      	strb	r3, [r5, #2]
 8005e2c:	e7c6      	b.n	8005dbc <USBH_MSC_SCSI_RequestSense+0x1a>

08005e2e <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8005e2e:	b538      	push	{r3, r4, r5, lr}
 8005e30:	4684      	mov	ip, r0
  USBH_StatusTypeDef    error = USBH_FAIL ;

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e32:	f8d0 037c 	ldr.w	r0, [r0, #892]	; 0x37c
 8005e36:	69c4      	ldr	r4, [r0, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8005e38:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
 8005e3c:	2801      	cmp	r0, #1
 8005e3e:	d003      	beq.n	8005e48 <USBH_MSC_SCSI_Write+0x1a>
 8005e40:	2802      	cmp	r0, #2
 8005e42:	d036      	beq.n	8005eb2 <USBH_MSC_SCSI_Write+0x84>
 8005e44:	2002      	movs	r0, #2
    default:
      break;
  }

  return error;
}
 8005e46:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8005e48:	f8b4 1098 	ldrh.w	r1, [r4, #152]	; 0x98
 8005e4c:	9d04      	ldr	r5, [sp, #16]
 8005e4e:	fb05 f101 	mul.w	r1, r5, r1
 8005e52:	65e1      	str	r1, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8005e54:	2100      	movs	r1, #0
 8005e56:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005e5a:	f04f 0c0a 	mov.w	ip, #10
 8005e5e:	f884 c062 	strb.w	ip, [r4, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005e62:	f8c4 1063 	str.w	r1, [r4, #99]	; 0x63
 8005e66:	f8c4 1067 	str.w	r1, [r4, #103]	; 0x67
 8005e6a:	f8c4 106b 	str.w	r1, [r4, #107]	; 0x6b
 8005e6e:	f8c4 106f 	str.w	r1, [r4, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8005e72:	212a      	movs	r1, #42	; 0x2a
 8005e74:	f884 1063 	strb.w	r1, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8005e78:	f3c2 6107 	ubfx	r1, r2, #24, #8
 8005e7c:	f884 1065 	strb.w	r1, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8005e80:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8005e84:	f884 1066 	strb.w	r1, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8005e88:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005e8c:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8005e90:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8005e94:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8005e98:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8005e9c:	f884 506b 	strb.w	r5, [r4, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8005eac:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 8005eb0:	e7c9      	b.n	8005e46 <USBH_MSC_SCSI_Write+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005eb2:	4660      	mov	r0, ip
 8005eb4:	f7ff fd6c 	bl	8005990 <USBH_MSC_BOT_Process>
      break;
 8005eb8:	e7c5      	b.n	8005e46 <USBH_MSC_SCSI_Write+0x18>

08005eba <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8005eba:	b538      	push	{r3, r4, r5, lr}
 8005ebc:	4684      	mov	ip, r0
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ebe:	f8d0 037c 	ldr.w	r0, [r0, #892]	; 0x37c
 8005ec2:	69c4      	ldr	r4, [r0, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8005ec4:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
 8005ec8:	2801      	cmp	r0, #1
 8005eca:	d003      	beq.n	8005ed4 <USBH_MSC_SCSI_Read+0x1a>
 8005ecc:	2802      	cmp	r0, #2
 8005ece:	d036      	beq.n	8005f3e <USBH_MSC_SCSI_Read+0x84>
 8005ed0:	2002      	movs	r0, #2
    default:
      break;
  }

  return error;
}
 8005ed2:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8005ed4:	f8b4 1098 	ldrh.w	r1, [r4, #152]	; 0x98
 8005ed8:	9d04      	ldr	r5, [sp, #16]
 8005eda:	fb05 f101 	mul.w	r1, r5, r1
 8005ede:	65e1      	str	r1, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8005ee0:	2180      	movs	r1, #128	; 0x80
 8005ee2:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005ee6:	210a      	movs	r1, #10
 8005ee8:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005eec:	2100      	movs	r1, #0
 8005eee:	f8c4 1063 	str.w	r1, [r4, #99]	; 0x63
 8005ef2:	f8c4 1067 	str.w	r1, [r4, #103]	; 0x67
 8005ef6:	f8c4 106b 	str.w	r1, [r4, #107]	; 0x6b
 8005efa:	f8c4 106f 	str.w	r1, [r4, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8005efe:	2128      	movs	r1, #40	; 0x28
 8005f00:	f884 1063 	strb.w	r1, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8005f04:	f3c2 6107 	ubfx	r1, r2, #24, #8
 8005f08:	f884 1065 	strb.w	r1, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8005f0c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8005f10:	f884 1066 	strb.w	r1, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8005f14:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005f18:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8005f1c:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8005f20:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8005f24:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8005f28:	f884 506b 	strb.w	r5, [r4, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005f32:	2202      	movs	r2, #2
 8005f34:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8005f38:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 8005f3c:	e7c9      	b.n	8005ed2 <USBH_MSC_SCSI_Read+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005f3e:	4660      	mov	r0, ip
 8005f40:	f7ff fd26 	bl	8005990 <USBH_MSC_BOT_Process>
      break;
 8005f44:	e7c5      	b.n	8005ed2 <USBH_MSC_SCSI_Read+0x18>

08005f46 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005f46:	4684      	mov	ip, r0
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005f48:	f500 7360 	add.w	r3, r0, #896	; 0x380
 8005f4c:	f500 7170 	add.w	r1, r0, #960	; 0x3c0
  {
    phost->Pipes[i] = 0U;
 8005f50:	2200      	movs	r2, #0
 8005f52:	f843 2f04 	str.w	r2, [r3, #4]!
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005f56:	428b      	cmp	r3, r1
 8005f58:	d1fb      	bne.n	8005f52 <DeInitStateMachine+0xc>
 8005f5a:	f20c 131b 	addw	r3, ip, #283	; 0x11b
 8005f5e:	f20c 311b 	addw	r1, ip, #795	; 0x31b
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 8005f62:	2200      	movs	r2, #0
 8005f64:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005f68:	428b      	cmp	r3, r1
 8005f6a:	d1fb      	bne.n	8005f64 <DeInitStateMachine+0x1e>
  }

  phost->gState = HOST_IDLE;
 8005f6c:	2000      	movs	r0, #0
 8005f6e:	f88c 0000 	strb.w	r0, [ip]
  phost->EnumState = ENUM_IDLE;
 8005f72:	f88c 0001 	strb.w	r0, [ip, #1]
  phost->RequestState = CMD_SEND;
 8005f76:	2301      	movs	r3, #1
 8005f78:	f88c 3002 	strb.w	r3, [ip, #2]
  phost->Timer = 0U;
 8005f7c:	f8cc 03c4 	str.w	r0, [ip, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005f80:	f88c 3018 	strb.w	r3, [ip, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005f84:	2240      	movs	r2, #64	; 0x40
 8005f86:	f88c 2006 	strb.w	r2, [ip, #6]
  phost->Control.errorcount = 0U;
 8005f8a:	f88c 0019 	strb.w	r0, [ip, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005f8e:	f88c 031c 	strb.w	r0, [ip, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8005f92:	f88c 331d 	strb.w	r3, [ip, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005f96:	f88c 031f 	strb.w	r0, [ip, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005f9a:	f88c 031e 	strb.w	r0, [ip, #798]	; 0x31e

  return USBH_OK;
}
 8005f9e:	4770      	bx	lr

08005fa0 <USBH_Init>:
  if (phost == NULL)
 8005fa0:	b1d8      	cbz	r0, 8005fda <USBH_Init+0x3a>
{
 8005fa2:	b570      	push	{r4, r5, r6, lr}
 8005fa4:	460e      	mov	r6, r1
 8005fa6:	4604      	mov	r4, r0
  phost->id = id;
 8005fa8:	f880 23cc 	strb.w	r2, [r0, #972]	; 0x3cc
  phost->pActiveClass = NULL;
 8005fac:	2500      	movs	r5, #0
 8005fae:	f8c0 537c 	str.w	r5, [r0, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005fb2:	f8c0 5380 	str.w	r5, [r0, #896]	; 0x380
  (void)DeInitStateMachine(phost);
 8005fb6:	f7ff ffc6 	bl	8005f46 <DeInitStateMachine>
  phost->device.PortEnabled = 0U;
 8005fba:	f884 5323 	strb.w	r5, [r4, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005fbe:	f884 5320 	strb.w	r5, [r4, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005fc2:	f884 5321 	strb.w	r5, [r4, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005fc6:	f884 5322 	strb.w	r5, [r4, #802]	; 0x322
  if (pUsrFunc != NULL)
 8005fca:	b10e      	cbz	r6, 8005fd0 <USBH_Init+0x30>
    phost->pUser = pUsrFunc;
 8005fcc:	f8c4 63d4 	str.w	r6, [r4, #980]	; 0x3d4
  (void)USBH_LL_Init(phost);
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f001 fa75 	bl	80074c0 <USBH_LL_Init>
  return USBH_OK;
 8005fd6:	2000      	movs	r0, #0
}
 8005fd8:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL;
 8005fda:	2002      	movs	r0, #2
}
 8005fdc:	4770      	bx	lr

08005fde <USBH_RegisterClass>:
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef status = USBH_OK;

  if (pclass != NULL)
 8005fde:	b149      	cbz	r1, 8005ff4 <USBH_RegisterClass+0x16>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005fe0:	f8d0 3380 	ldr.w	r3, [r0, #896]	; 0x380
 8005fe4:	b943      	cbnz	r3, 8005ff8 <USBH_RegisterClass+0x1a>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	f8c0 3380 	str.w	r3, [r0, #896]	; 0x380
 8005fec:	f8c0 1378 	str.w	r1, [r0, #888]	; 0x378
      status = USBH_OK;
 8005ff0:	2000      	movs	r0, #0
 8005ff2:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005ff4:	2002      	movs	r0, #2
 8005ff6:	4770      	bx	lr
      status = USBH_FAIL;
 8005ff8:	2002      	movs	r0, #2
  }

  return status;
}
 8005ffa:	4770      	bx	lr

08005ffc <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef status = USBH_OK;

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005ffc:	f890 333c 	ldrb.w	r3, [r0, #828]	; 0x33c
 8006000:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 8006002:	bf86      	itte	hi
 8006004:	f880 1324 	strbhi.w	r1, [r0, #804]	; 0x324
  USBH_StatusTypeDef status = USBH_OK;
 8006008:	2000      	movhi	r0, #0
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800600a:	2002      	movls	r0, #2
  }

  return status;
}
 800600c:	4770      	bx	lr

0800600e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800600e:	b530      	push	{r4, r5, lr}
  uint8_t if_ix = 0U;

  pif = (USBH_InterfaceDescTypeDef *)NULL;
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006010:	4684      	mov	ip, r0
{
 8006012:	f04f 0e00 	mov.w	lr, #0
 8006016:	e00c      	b.n	8006032 <USBH_FindInterface+0x24>
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006018:	f895 4349 	ldrb.w	r4, [r5, #841]	; 0x349
 800601c:	429c      	cmp	r4, r3
 800601e:	d019      	beq.n	8006054 <USBH_FindInterface+0x46>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006020:	2bff      	cmp	r3, #255	; 0xff
 8006022:	d017      	beq.n	8006054 <USBH_FindInterface+0x46>
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006024:	f10e 0e01 	add.w	lr, lr, #1
 8006028:	f10c 0c1a 	add.w	ip, ip, #26
 800602c:	f1be 0f02 	cmp.w	lr, #2
 8006030:	d00f      	beq.n	8006052 <USBH_FindInterface+0x44>
 8006032:	fa5f f08e 	uxtb.w	r0, lr
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006036:	4665      	mov	r5, ip
 8006038:	f89c 4347 	ldrb.w	r4, [ip, #839]	; 0x347
 800603c:	428c      	cmp	r4, r1
 800603e:	d001      	beq.n	8006044 <USBH_FindInterface+0x36>
 8006040:	29ff      	cmp	r1, #255	; 0xff
 8006042:	d1ef      	bne.n	8006024 <USBH_FindInterface+0x16>
 8006044:	f895 4348 	ldrb.w	r4, [r5, #840]	; 0x348
 8006048:	4294      	cmp	r4, r2
 800604a:	d0e5      	beq.n	8006018 <USBH_FindInterface+0xa>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800604c:	2aff      	cmp	r2, #255	; 0xff
 800604e:	d1e9      	bne.n	8006024 <USBH_FindInterface+0x16>
 8006050:	e7e2      	b.n	8006018 <USBH_FindInterface+0xa>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 8006052:	20ff      	movs	r0, #255	; 0xff
}
 8006054:	bd30      	pop	{r4, r5, pc}

08006056 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006056:	b510      	push	{r4, lr}
 8006058:	4604      	mov	r4, r0
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800605a:	f001 fab6 	bl	80075ca <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800605e:	2101      	movs	r1, #1
 8006060:	4620      	mov	r0, r4
 8006062:	f001 fa70 	bl	8007546 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 8006066:	2000      	movs	r0, #0
 8006068:	bd10      	pop	{r4, pc}

0800606a <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800606a:	b570      	push	{r4, r5, r6, lr}
 800606c:	b086      	sub	sp, #24
 800606e:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006070:	2302      	movs	r3, #2
 8006072:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t idx = 0U;

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006076:	f890 3321 	ldrb.w	r3, [r0, #801]	; 0x321
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b01      	cmp	r3, #1
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800607e:	bf04      	itt	eq
 8006080:	2303      	moveq	r3, #3
 8006082:	7003      	strbeq	r3, [r0, #0]
  }

  switch (phost->gState)
 8006084:	7803      	ldrb	r3, [r0, #0]
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2b0b      	cmp	r3, #11
 800608a:	d875      	bhi.n	8006178 <USBH_Process+0x10e>
 800608c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006090:	001e000c 	.word	0x001e000c
 8006094:	022a0040 	.word	0x022a0040
 8006098:	00770074 	.word	0x00770074
 800609c:	01b70209 	.word	0x01b70209
 80060a0:	01cb01c1 	.word	0x01cb01c1
 80060a4:	022201e7 	.word	0x022201e7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80060a8:	f890 3320 	ldrb.w	r3, [r0, #800]	; 0x320
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d063      	beq.n	8006178 <USBH_Process+0x10e>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80060b0:	2301      	movs	r3, #1
 80060b2:	7003      	strb	r3, [r0, #0]
        USBH_Delay(200U);
 80060b4:	20c8      	movs	r0, #200	; 0xc8
 80060b6:	f001 fa7d 	bl	80075b4 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80060ba:	4620      	mov	r0, r4
 80060bc:	f001 fa95 	bl	80075ea <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80060c0:	2300      	movs	r3, #0
 80060c2:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
        phost->Timeout = 0U;
 80060c6:	f8c4 33c8 	str.w	r3, [r4, #968]	; 0x3c8
 80060ca:	e055      	b.n	8006178 <USBH_Process+0x10e>
      }
      break;

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80060cc:	f890 3323 	ldrb.w	r3, [r0, #803]	; 0x323
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d010      	beq.n	80060f6 <USBH_Process+0x8c>
        phost->device.RstCnt = 0U;
        phost->gState = HOST_DEV_ATTACHED;
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80060d4:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 80060d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060dc:	d911      	bls.n	8006102 <USBH_Process+0x98>
        {
          phost->device.RstCnt++;
 80060de:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
 80060e2:	3301      	adds	r3, #1
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80060ea:	2b03      	cmp	r3, #3
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80060ec:	bf8c      	ite	hi
 80060ee:	230d      	movhi	r3, #13
          }
          else
          {
            phost->gState = HOST_IDLE;
 80060f0:	2300      	movls	r3, #0
 80060f2:	7003      	strb	r3, [r0, #0]
 80060f4:	e040      	b.n	8006178 <USBH_Process+0x10e>
        phost->device.RstCnt = 0U;
 80060f6:	2300      	movs	r3, #0
 80060f8:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80060fc:	2302      	movs	r3, #2
 80060fe:	7003      	strb	r3, [r0, #0]
 8006100:	e03a      	b.n	8006178 <USBH_Process+0x10e>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8006102:	330a      	adds	r3, #10
 8006104:	f8c0 33c8 	str.w	r3, [r0, #968]	; 0x3c8
          USBH_Delay(10U);
 8006108:	200a      	movs	r0, #10
 800610a:	f001 fa53 	bl	80075b4 <USBH_Delay>
 800610e:	e033      	b.n	8006178 <USBH_Process+0x10e>
#endif
      break;

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006110:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 8006114:	b10b      	cbz	r3, 800611a <USBH_Process+0xb0>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006116:	2104      	movs	r1, #4
 8006118:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800611a:	2064      	movs	r0, #100	; 0x64
 800611c:	f001 fa4a 	bl	80075b4 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006120:	4620      	mov	r0, r4
 8006122:	f001 f9f7 	bl	8007514 <USBH_LL_GetSpeed>
 8006126:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800612a:	2305      	movs	r3, #5
 800612c:	7023      	strb	r3, [r4, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800612e:	2100      	movs	r1, #0
 8006130:	4620      	mov	r0, r4
 8006132:	f000 fda0 	bl	8006c76 <USBH_AllocPipe>
 8006136:	7160      	strb	r0, [r4, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006138:	2180      	movs	r1, #128	; 0x80
 800613a:	4620      	mov	r0, r4
 800613c:	f000 fd9b 	bl	8006c76 <USBH_AllocPipe>
 8006140:	4601      	mov	r1, r0
 8006142:	7120      	strb	r0, [r4, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006144:	79a3      	ldrb	r3, [r4, #6]
 8006146:	9302      	str	r3, [sp, #8]
 8006148:	2500      	movs	r5, #0
 800614a:	9501      	str	r5, [sp, #4]
 800614c:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8006150:	9300      	str	r3, [sp, #0]
 8006152:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8006156:	2280      	movs	r2, #128	; 0x80
 8006158:	4620      	mov	r0, r4
 800615a:	f000 fd77 	bl	8006c4c <USBH_OpenPipe>
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800615e:	79a3      	ldrb	r3, [r4, #6]
 8006160:	9302      	str	r3, [sp, #8]
 8006162:	9501      	str	r5, [sp, #4]
 8006164:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800616e:	462a      	mov	r2, r5
 8006170:	7961      	ldrb	r1, [r4, #5]
 8006172:	4620      	mov	r0, r4
 8006174:	f000 fd6a 	bl	8006c4c <USBH_OpenPipe>
    case HOST_ABORT_STATE:
    default :
      break;
  }
  return USBH_OK;
}
 8006178:	2000      	movs	r0, #0
 800617a:	b006      	add	sp, #24
 800617c:	bd70      	pop	{r4, r5, r6, pc}
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;

  switch (phost->EnumState)
 800617e:	7845      	ldrb	r5, [r0, #1]
 8006180:	2d07      	cmp	r5, #7
 8006182:	f200 813a 	bhi.w	80063fa <USBH_Process+0x390>
 8006186:	e8df f015 	tbh	[pc, r5, lsl #1]
 800618a:	0008      	.short	0x0008
 800618c:	00690048 	.word	0x00690048
 8006190:	00bf009a 	.word	0x00bf009a
 8006194:	010e00e5 	.word	0x010e00e5
 8006198:	0127      	.short	0x0127
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800619a:	2108      	movs	r1, #8
 800619c:	f000 fafd 	bl	800679a <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 80061a0:	b118      	cbz	r0, 80061aa <USBH_Process+0x140>
        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
      }
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80061a2:	2803      	cmp	r0, #3
 80061a4:	d021      	beq.n	80061ea <USBH_Process+0x180>
  USBH_StatusTypeDef Status = USBH_BUSY;
 80061a6:	2501      	movs	r5, #1
 80061a8:	e0da      	b.n	8006360 <USBH_Process+0x2f6>
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80061aa:	f894 332d 	ldrb.w	r3, [r4, #813]	; 0x32d
 80061ae:	71a3      	strb	r3, [r4, #6]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80061b0:	2501      	movs	r5, #1
 80061b2:	7065      	strb	r5, [r4, #1]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80061b4:	9302      	str	r3, [sp, #8]
 80061b6:	2600      	movs	r6, #0
 80061b8:	9601      	str	r6, [sp, #4]
 80061ba:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80061c4:	2280      	movs	r2, #128	; 0x80
 80061c6:	7921      	ldrb	r1, [r4, #4]
 80061c8:	4620      	mov	r0, r4
 80061ca:	f000 fd3f 	bl	8006c4c <USBH_OpenPipe>
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80061ce:	79a3      	ldrb	r3, [r4, #6]
 80061d0:	9302      	str	r3, [sp, #8]
 80061d2:	9601      	str	r6, [sp, #4]
 80061d4:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80061de:	4632      	mov	r2, r6
 80061e0:	7961      	ldrb	r1, [r4, #5]
 80061e2:	4620      	mov	r0, r4
 80061e4:	f000 fd32 	bl	8006c4c <USBH_OpenPipe>
 80061e8:	e0ba      	b.n	8006360 <USBH_Process+0x2f6>
      {
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
        phost->device.EnumCnt++;
 80061ea:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 80061ee:	3301      	adds	r3, #1
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80061f6:	2b03      	cmp	r3, #3
 80061f8:	d903      	bls.n	8006202 <USBH_Process+0x198>
        {
          /* Buggy Device can't complete get device desc request */
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
          phost->gState = HOST_ABORT_STATE;
 80061fa:	230d      	movs	r3, #13
 80061fc:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80061fe:	2501      	movs	r5, #1
 8006200:	e0ae      	b.n	8006360 <USBH_Process+0x2f6>
        }
        else
        {
          /* free control pipes */
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006202:	7961      	ldrb	r1, [r4, #5]
 8006204:	4620      	mov	r0, r4
 8006206:	f000 fd55 	bl	8006cb4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800620a:	7921      	ldrb	r1, [r4, #4]
 800620c:	4620      	mov	r0, r4
 800620e:	f000 fd51 	bl	8006cb4 <USBH_FreePipe>

          /* Reset the USB Device */
          phost->gState = HOST_IDLE;
 8006212:	2300      	movs	r3, #0
 8006214:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006216:	2501      	movs	r5, #1
 8006218:	e0a2      	b.n	8006360 <USBH_Process+0x2f6>
      }
      break;

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800621a:	2112      	movs	r1, #18
 800621c:	f000 fabd 	bl	800679a <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 8006220:	b910      	cbnz	r0, 8006228 <USBH_Process+0x1be>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006222:	2302      	movs	r3, #2
 8006224:	7063      	strb	r3, [r4, #1]
 8006226:	e09b      	b.n	8006360 <USBH_Process+0x2f6>
      }
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006228:	2803      	cmp	r0, #3
 800622a:	f040 8099 	bne.w	8006360 <USBH_Process+0x2f6>
      {
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
        phost->device.EnumCnt++;
 800622e:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8006232:	3301      	adds	r3, #1
 8006234:	b2db      	uxtb	r3, r3
 8006236:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800623a:	2b03      	cmp	r3, #3
 800623c:	d902      	bls.n	8006244 <USBH_Process+0x1da>
        {
          /* Buggy Device can't complete get device desc request */
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
          phost->gState = HOST_ABORT_STATE;
 800623e:	230d      	movs	r3, #13
 8006240:	7023      	strb	r3, [r4, #0]
 8006242:	e08d      	b.n	8006360 <USBH_Process+0x2f6>
        }
        else
        {
          /* Free control pipes */
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006244:	7961      	ldrb	r1, [r4, #5]
 8006246:	4620      	mov	r0, r4
 8006248:	f000 fd34 	bl	8006cb4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800624c:	7921      	ldrb	r1, [r4, #4]
 800624e:	4620      	mov	r0, r4
 8006250:	f000 fd30 	bl	8006cb4 <USBH_FreePipe>

          /* Reset the USB Device */
          phost->EnumState = ENUM_IDLE;
 8006254:	2300      	movs	r3, #0
 8006256:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 8006258:	7023      	strb	r3, [r4, #0]
 800625a:	e081      	b.n	8006360 <USBH_Process+0x2f6>
      }
      break;

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800625c:	2101      	movs	r1, #1
 800625e:	f000 fc4f 	bl	8006b00 <USBH_SetAddress>
      if (ReqStatus == USBH_OK)
 8006262:	b118      	cbz	r0, 800626c <USBH_Process+0x202>
        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
      }
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006264:	2803      	cmp	r0, #3
 8006266:	d024      	beq.n	80062b2 <USBH_Process+0x248>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006268:	2501      	movs	r5, #1
 800626a:	e079      	b.n	8006360 <USBH_Process+0x2f6>
        USBH_Delay(2U);
 800626c:	2002      	movs	r0, #2
 800626e:	f001 f9a1 	bl	80075b4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006272:	2501      	movs	r5, #1
 8006274:	f884 531c 	strb.w	r5, [r4, #796]	; 0x31c
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006278:	2303      	movs	r3, #3
 800627a:	7063      	strb	r3, [r4, #1]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800627c:	79a3      	ldrb	r3, [r4, #6]
 800627e:	9302      	str	r3, [sp, #8]
 8006280:	2600      	movs	r6, #0
 8006282:	9601      	str	r6, [sp, #4]
 8006284:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	462b      	mov	r3, r5
 800628c:	2280      	movs	r2, #128	; 0x80
 800628e:	7921      	ldrb	r1, [r4, #4]
 8006290:	4620      	mov	r0, r4
 8006292:	f000 fcdb 	bl	8006c4c <USBH_OpenPipe>
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006296:	79a3      	ldrb	r3, [r4, #6]
 8006298:	9302      	str	r3, [sp, #8]
 800629a:	9601      	str	r6, [sp, #4]
 800629c:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80062a6:	4632      	mov	r2, r6
 80062a8:	7961      	ldrb	r1, [r4, #5]
 80062aa:	4620      	mov	r0, r4
 80062ac:	f000 fcce 	bl	8006c4c <USBH_OpenPipe>
 80062b0:	e056      	b.n	8006360 <USBH_Process+0x2f6>
      {
        USBH_ErrLog("Control error: Device Set Address request failed");

        /* Buggy Device can't complete get device desc request */
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
        phost->gState = HOST_ABORT_STATE;
 80062b2:	230d      	movs	r3, #13
 80062b4:	7023      	strb	r3, [r4, #0]
        phost->EnumState = ENUM_IDLE;
 80062b6:	2300      	movs	r3, #0
 80062b8:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80062ba:	2501      	movs	r5, #1
 80062bc:	e050      	b.n	8006360 <USBH_Process+0x2f6>
      }
      break;

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80062be:	2109      	movs	r1, #9
 80062c0:	f000 fad9 	bl	8006876 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 80062c4:	b918      	cbnz	r0, 80062ce <USBH_Process+0x264>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80062c6:	2304      	movs	r3, #4
 80062c8:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80062ca:	2501      	movs	r5, #1
 80062cc:	e048      	b.n	8006360 <USBH_Process+0x2f6>
      }
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80062ce:	2803      	cmp	r0, #3
 80062d0:	d001      	beq.n	80062d6 <USBH_Process+0x26c>
  USBH_StatusTypeDef Status = USBH_BUSY;
 80062d2:	2501      	movs	r5, #1
 80062d4:	e044      	b.n	8006360 <USBH_Process+0x2f6>
      {
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
        phost->device.EnumCnt++;
 80062d6:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 80062da:	3301      	adds	r3, #1
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80062e2:	2b03      	cmp	r3, #3
 80062e4:	d903      	bls.n	80062ee <USBH_Process+0x284>
        {
          /* Buggy Device can't complete get device desc request */
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
          phost->gState = HOST_ABORT_STATE;
 80062e6:	230d      	movs	r3, #13
 80062e8:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80062ea:	2501      	movs	r5, #1
 80062ec:	e038      	b.n	8006360 <USBH_Process+0x2f6>
        }
        else
        {
          /* Free control pipes */
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80062ee:	7961      	ldrb	r1, [r4, #5]
 80062f0:	4620      	mov	r0, r4
 80062f2:	f000 fcdf 	bl	8006cb4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80062f6:	7921      	ldrb	r1, [r4, #4]
 80062f8:	4620      	mov	r0, r4
 80062fa:	f000 fcdb 	bl	8006cb4 <USBH_FreePipe>

          /* Reset the USB Device */
          phost->EnumState = ENUM_IDLE;
 80062fe:	2300      	movs	r3, #0
 8006300:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 8006302:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006304:	2501      	movs	r5, #1
 8006306:	e02b      	b.n	8006360 <USBH_Process+0x2f6>
      }
      break;

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006308:	f8b0 133a 	ldrh.w	r1, [r0, #826]	; 0x33a
 800630c:	f000 fab3 	bl	8006876 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 8006310:	b918      	cbnz	r0, 800631a <USBH_Process+0x2b0>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006312:	2305      	movs	r3, #5
 8006314:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006316:	2501      	movs	r5, #1
 8006318:	e022      	b.n	8006360 <USBH_Process+0x2f6>
      }
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800631a:	2803      	cmp	r0, #3
 800631c:	d001      	beq.n	8006322 <USBH_Process+0x2b8>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800631e:	2501      	movs	r5, #1
 8006320:	e01e      	b.n	8006360 <USBH_Process+0x2f6>
      {
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
        phost->device.EnumCnt++;
 8006322:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8006326:	3301      	adds	r3, #1
 8006328:	b2db      	uxtb	r3, r3
 800632a:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800632e:	2b03      	cmp	r3, #3
 8006330:	d903      	bls.n	800633a <USBH_Process+0x2d0>
        {
          /* Buggy Device can't complete get device desc request */
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
          phost->gState = HOST_ABORT_STATE;
 8006332:	230d      	movs	r3, #13
 8006334:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006336:	2501      	movs	r5, #1
 8006338:	e012      	b.n	8006360 <USBH_Process+0x2f6>
        }
        else
        {
          /* Free control pipes */
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800633a:	7961      	ldrb	r1, [r4, #5]
 800633c:	4620      	mov	r0, r4
 800633e:	f000 fcb9 	bl	8006cb4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006342:	7921      	ldrb	r1, [r4, #4]
 8006344:	4620      	mov	r0, r4
 8006346:	f000 fcb5 	bl	8006cb4 <USBH_FreePipe>

          /* Reset the USB Device */
          phost->EnumState = ENUM_IDLE;
 800634a:	2300      	movs	r3, #0
 800634c:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 800634e:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006350:	2501      	movs	r5, #1
 8006352:	e005      	b.n	8006360 <USBH_Process+0x2f6>
        /* .. */
      }
      break;

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006354:	f890 1334 	ldrb.w	r1, [r0, #820]	; 0x334
 8006358:	b999      	cbnz	r1, 8006382 <USBH_Process+0x318>
        }
      }
      else
      {
        USBH_UsrLog("Manufacturer : N/A");
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800635a:	2306      	movs	r3, #6
 800635c:	7043      	strb	r3, [r0, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800635e:	2501      	movs	r5, #1
      status = USBH_HandleEnum(phost);
 8006360:	f88d 5017 	strb.w	r5, [sp, #23]
      if (status == USBH_OK)
 8006364:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8006368:	2b00      	cmp	r3, #0
 800636a:	f47f af05 	bne.w	8006178 <USBH_Process+0x10e>
        phost->device.current_interface = 0U;
 800636e:	f884 3324 	strb.w	r3, [r4, #804]	; 0x324
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006372:	f894 3337 	ldrb.w	r3, [r4, #823]	; 0x337
 8006376:	2b01      	cmp	r3, #1
          phost->gState = HOST_SET_CONFIGURATION;
 8006378:	bf0c      	ite	eq
 800637a:	2308      	moveq	r3, #8
          phost->gState = HOST_INPUT;
 800637c:	2307      	movne	r3, #7
 800637e:	7023      	strb	r3, [r4, #0]
 8006380:	e6fa      	b.n	8006178 <USBH_Process+0x10e>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006382:	23ff      	movs	r3, #255	; 0xff
 8006384:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8006388:	f000 fb91 	bl	8006aae <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 800638c:	b918      	cbnz	r0, 8006396 <USBH_Process+0x32c>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800638e:	2306      	movs	r3, #6
 8006390:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006392:	2501      	movs	r5, #1
 8006394:	e7e4      	b.n	8006360 <USBH_Process+0x2f6>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006396:	2803      	cmp	r0, #3
 8006398:	d001      	beq.n	800639e <USBH_Process+0x334>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800639a:	2501      	movs	r5, #1
 800639c:	e7e0      	b.n	8006360 <USBH_Process+0x2f6>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800639e:	2306      	movs	r3, #6
 80063a0:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80063a2:	2501      	movs	r5, #1
 80063a4:	e7dc      	b.n	8006360 <USBH_Process+0x2f6>
#endif
      }
      break;

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80063a6:	f890 1335 	ldrb.w	r1, [r0, #821]	; 0x335
 80063aa:	b919      	cbnz	r1, 80063b4 <USBH_Process+0x34a>
        }
      }
      else
      {
        USBH_UsrLog("Product : N/A");
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80063ac:	2307      	movs	r3, #7
 80063ae:	7043      	strb	r3, [r0, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80063b0:	2501      	movs	r5, #1
 80063b2:	e7d5      	b.n	8006360 <USBH_Process+0x2f6>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80063b4:	23ff      	movs	r3, #255	; 0xff
 80063b6:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 80063ba:	f000 fb78 	bl	8006aae <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 80063be:	b918      	cbnz	r0, 80063c8 <USBH_Process+0x35e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80063c0:	2307      	movs	r3, #7
 80063c2:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80063c4:	2501      	movs	r5, #1
 80063c6:	e7cb      	b.n	8006360 <USBH_Process+0x2f6>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80063c8:	2803      	cmp	r0, #3
 80063ca:	d001      	beq.n	80063d0 <USBH_Process+0x366>
  USBH_StatusTypeDef Status = USBH_BUSY;
 80063cc:	2501      	movs	r5, #1
 80063ce:	e7c7      	b.n	8006360 <USBH_Process+0x2f6>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80063d0:	2307      	movs	r3, #7
 80063d2:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80063d4:	2501      	movs	r5, #1
 80063d6:	e7c3      	b.n	8006360 <USBH_Process+0x2f6>
#endif
      }
      break;

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80063d8:	f890 5336 	ldrb.w	r5, [r0, #822]	; 0x336
 80063dc:	2d00      	cmp	r5, #0
 80063de:	d0bf      	beq.n	8006360 <USBH_Process+0x2f6>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80063e0:	23ff      	movs	r3, #255	; 0xff
 80063e2:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 80063e6:	4629      	mov	r1, r5
 80063e8:	f000 fb61 	bl	8006aae <USBH_Get_StringDesc>
                                        phost->device.Data, 0xFFU);
        if (ReqStatus == USBH_OK)
 80063ec:	4605      	mov	r5, r0
 80063ee:	2800      	cmp	r0, #0
 80063f0:	d0b6      	beq.n	8006360 <USBH_Process+0x2f6>
  USBH_StatusTypeDef Status = USBH_BUSY;
 80063f2:	1ec5      	subs	r5, r0, #3
 80063f4:	bf18      	it	ne
 80063f6:	2501      	movne	r5, #1
 80063f8:	e7b2      	b.n	8006360 <USBH_Process+0x2f6>
  switch (phost->EnumState)
 80063fa:	2501      	movs	r5, #1
 80063fc:	e7b0      	b.n	8006360 <USBH_Process+0x2f6>
      if (phost->pUser != NULL)
 80063fe:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 8006402:	2b00      	cmp	r3, #0
 8006404:	f43f aeb8 	beq.w	8006178 <USBH_Process+0x10e>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006408:	2101      	movs	r1, #1
 800640a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800640c:	2308      	movs	r3, #8
 800640e:	7023      	strb	r3, [r4, #0]
 8006410:	e6b2      	b.n	8006178 <USBH_Process+0x10e>
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006412:	f890 133d 	ldrb.w	r1, [r0, #829]	; 0x33d
 8006416:	f000 fb84 	bl	8006b22 <USBH_SetCfg>
 800641a:	2800      	cmp	r0, #0
 800641c:	f47f aeac 	bne.w	8006178 <USBH_Process+0x10e>
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006420:	2309      	movs	r3, #9
 8006422:	7023      	strb	r3, [r4, #0]
 8006424:	e6a8      	b.n	8006178 <USBH_Process+0x10e>
      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006426:	f890 333f 	ldrb.w	r3, [r0, #831]	; 0x33f
 800642a:	f013 0f20 	tst.w	r3, #32
 800642e:	d102      	bne.n	8006436 <USBH_Process+0x3cc>
        phost->gState = HOST_CHECK_CLASS;
 8006430:	230a      	movs	r3, #10
 8006432:	7003      	strb	r3, [r0, #0]
 8006434:	e6a0      	b.n	8006178 <USBH_Process+0x10e>
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006436:	2101      	movs	r1, #1
 8006438:	f000 fb84 	bl	8006b44 <USBH_SetFeature>
 800643c:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 8006440:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8006444:	b913      	cbnz	r3, 800644c <USBH_Process+0x3e2>
          phost->gState = HOST_CHECK_CLASS;
 8006446:	230a      	movs	r3, #10
 8006448:	7023      	strb	r3, [r4, #0]
 800644a:	e695      	b.n	8006178 <USBH_Process+0x10e>
        else if (status == USBH_NOT_SUPPORTED)
 800644c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b03      	cmp	r3, #3
 8006454:	f47f ae90 	bne.w	8006178 <USBH_Process+0x10e>
          phost->gState = HOST_CHECK_CLASS;
 8006458:	230a      	movs	r3, #10
 800645a:	7023      	strb	r3, [r4, #0]
 800645c:	e68c      	b.n	8006178 <USBH_Process+0x10e>
      if (phost->ClassNumber == 0U)
 800645e:	f8d0 3380 	ldr.w	r3, [r0, #896]	; 0x380
 8006462:	2b00      	cmp	r3, #0
 8006464:	f43f ae88 	beq.w	8006178 <USBH_Process+0x10e>
        phost->pActiveClass = NULL;
 8006468:	2300      	movs	r3, #0
 800646a:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800646e:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8006472:	7919      	ldrb	r1, [r3, #4]
 8006474:	f890 2347 	ldrb.w	r2, [r0, #839]	; 0x347
 8006478:	4291      	cmp	r1, r2
 800647a:	d002      	beq.n	8006482 <USBH_Process+0x418>
          phost->gState = HOST_ABORT_STATE;
 800647c:	230d      	movs	r3, #13
 800647e:	7003      	strb	r3, [r0, #0]
 8006480:	e67a      	b.n	8006178 <USBH_Process+0x10e>
            phost->pActiveClass = phost->pClass[idx];
 8006482:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	4798      	blx	r3
 800648a:	b938      	cbnz	r0, 800649c <USBH_Process+0x432>
            phost->gState = HOST_CLASS_REQUEST;
 800648c:	2306      	movs	r3, #6
 800648e:	7023      	strb	r3, [r4, #0]
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006490:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8006494:	2103      	movs	r1, #3
 8006496:	4620      	mov	r0, r4
 8006498:	4798      	blx	r3
 800649a:	e66d      	b.n	8006178 <USBH_Process+0x10e>
            phost->gState = HOST_ABORT_STATE;
 800649c:	230d      	movs	r3, #13
 800649e:	7023      	strb	r3, [r4, #0]
 80064a0:	e66a      	b.n	8006178 <USBH_Process+0x10e>
      if (phost->pActiveClass != NULL)
 80064a2:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80064a6:	b193      	cbz	r3, 80064ce <USBH_Process+0x464>
        status = phost->pActiveClass->Requests(phost);
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	4798      	blx	r3
 80064ac:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 80064b0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80064b4:	b913      	cbnz	r3, 80064bc <USBH_Process+0x452>
          phost->gState = HOST_CLASS;
 80064b6:	230b      	movs	r3, #11
 80064b8:	7023      	strb	r3, [r4, #0]
 80064ba:	e65d      	b.n	8006178 <USBH_Process+0x10e>
        else if (status == USBH_FAIL)
 80064bc:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	f47f ae58 	bne.w	8006178 <USBH_Process+0x10e>
          phost->gState = HOST_ABORT_STATE;
 80064c8:	230d      	movs	r3, #13
 80064ca:	7023      	strb	r3, [r4, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 80064cc:	e654      	b.n	8006178 <USBH_Process+0x10e>
        phost->gState = HOST_ABORT_STATE;
 80064ce:	230d      	movs	r3, #13
 80064d0:	7003      	strb	r3, [r0, #0]
 80064d2:	e651      	b.n	8006178 <USBH_Process+0x10e>
      if (phost->pActiveClass != NULL)
 80064d4:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f43f ae4d 	beq.w	8006178 <USBH_Process+0x10e>
        phost->pActiveClass->BgndProcess(phost);
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	4798      	blx	r3
 80064e2:	e649      	b.n	8006178 <USBH_Process+0x10e>
      phost->device.is_disconnected = 0U;
 80064e4:	2300      	movs	r3, #0
 80064e6:	f880 3321 	strb.w	r3, [r0, #801]	; 0x321
      (void)DeInitStateMachine(phost);
 80064ea:	f7ff fd2c 	bl	8005f46 <DeInitStateMachine>
      if (phost->pActiveClass != NULL)
 80064ee:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80064f2:	b12b      	cbz	r3, 8006500 <USBH_Process+0x496>
        phost->pActiveClass->DeInit(phost);
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	4620      	mov	r0, r4
 80064f8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80064fa:	2300      	movs	r3, #0
 80064fc:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
      if (phost->pUser != NULL)
 8006500:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8006504:	b113      	cbz	r3, 800650c <USBH_Process+0x4a2>
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006506:	2105      	movs	r1, #5
 8006508:	4620      	mov	r0, r4
 800650a:	4798      	blx	r3
      if (phost->device.is_ReEnumerated == 1U)
 800650c:	f894 3322 	ldrb.w	r3, [r4, #802]	; 0x322
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b01      	cmp	r3, #1
 8006514:	d003      	beq.n	800651e <USBH_Process+0x4b4>
        (void)USBH_LL_Start(phost);
 8006516:	4620      	mov	r0, r4
 8006518:	f001 f857 	bl	80075ca <USBH_LL_Start>
  return USBH_OK;
 800651c:	e62c      	b.n	8006178 <USBH_Process+0x10e>
        phost->device.is_ReEnumerated = 0U;
 800651e:	2300      	movs	r3, #0
 8006520:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
        (void)USBH_Start(phost);
 8006524:	4620      	mov	r0, r4
 8006526:	f7ff fd96 	bl	8006056 <USBH_Start>
 800652a:	e625      	b.n	8006178 <USBH_Process+0x10e>

0800652c <USBH_LL_SetTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
  phost->Timer = time;
 800652c:	f8c0 13c4 	str.w	r1, [r0, #964]	; 0x3c4
}
 8006530:	4770      	bx	lr

08006532 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006532:	b508      	push	{r3, lr}
  phost->Timer++;
 8006534:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8006538:	3301      	adds	r3, #1
 800653a:	f8c0 33c4 	str.w	r3, [r0, #964]	; 0x3c4
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800653e:	7803      	ldrb	r3, [r0, #0]
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b0b      	cmp	r3, #11
 8006544:	d000      	beq.n	8006548 <USBH_LL_IncTimer+0x16>
}
 8006546:	bd08      	pop	{r3, pc}
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006548:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 800654c:	2b00      	cmp	r3, #0
 800654e:	d0fa      	beq.n	8006546 <USBH_LL_IncTimer+0x14>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	4798      	blx	r3
}
 8006554:	e7f7      	b.n	8006546 <USBH_LL_IncTimer+0x14>

08006556 <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
 8006556:	2301      	movs	r3, #1
 8006558:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
}
 800655c:	4770      	bx	lr

0800655e <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
 800655e:	2300      	movs	r3, #0
 8006560:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323

  return;
}
 8006564:	4770      	bx	lr

08006566 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006566:	4603      	mov	r3, r0
  phost->device.is_connected = 1U;
 8006568:	2201      	movs	r2, #1
 800656a:	f880 2320 	strb.w	r2, [r0, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800656e:	2000      	movs	r0, #0
 8006570:	f883 0321 	strb.w	r0, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006574:	f883 0322 	strb.w	r0, [r3, #802]	; 0x322
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
}
 8006578:	4770      	bx	lr

0800657a <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800657a:	b538      	push	{r3, r4, r5, lr}
 800657c:	4604      	mov	r4, r0
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800657e:	2301      	movs	r3, #1
 8006580:	f880 3321 	strb.w	r3, [r0, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006584:	2500      	movs	r5, #0
 8006586:	f880 5320 	strb.w	r5, [r0, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800658a:	f880 5323 	strb.w	r5, [r0, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800658e:	f001 f824 	bl	80075da <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006592:	7921      	ldrb	r1, [r4, #4]
 8006594:	4620      	mov	r0, r4
 8006596:	f000 fb8d 	bl	8006cb4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800659a:	7961      	ldrb	r1, [r4, #5]
 800659c:	4620      	mov	r0, r4
 800659e:	f000 fb89 	bl	8006cb4 <USBH_FreePipe>
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
}
 80065a2:	4628      	mov	r0, r5
 80065a4:	bd38      	pop	{r3, r4, r5, pc}

080065a6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80065a6:	b570      	push	{r4, r5, r6, lr}
 80065a8:	b082      	sub	sp, #8
 80065aa:	4604      	mov	r4, r0
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 80065ac:	7885      	ldrb	r5, [r0, #2]
 80065ae:	2d01      	cmp	r5, #1
 80065b0:	d005      	beq.n	80065be <USBH_CtlReq+0x18>
 80065b2:	2d02      	cmp	r5, #2
 80065b4:	d00a      	beq.n	80065cc <USBH_CtlReq+0x26>
 80065b6:	2501      	movs	r5, #1

    default:
      break;
  }
  return status;
}
 80065b8:	4628      	mov	r0, r5
 80065ba:	b002      	add	sp, #8
 80065bc:	bd70      	pop	{r4, r5, r6, pc}
      phost->Control.buff = buff;
 80065be:	6081      	str	r1, [r0, #8]
      phost->Control.length = length;
 80065c0:	8182      	strh	r2, [r0, #12]
      phost->Control.state = CTRL_SETUP;
 80065c2:	2301      	movs	r3, #1
 80065c4:	7603      	strb	r3, [r0, #24]
      phost->RequestState = CMD_WAIT;
 80065c6:	2302      	movs	r3, #2
 80065c8:	7083      	strb	r3, [r0, #2]
      break;
 80065ca:	e7f5      	b.n	80065b8 <USBH_CtlReq+0x12>
{
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 80065cc:	7e03      	ldrb	r3, [r0, #24]
 80065ce:	3b01      	subs	r3, #1
 80065d0:	2b0a      	cmp	r3, #10
 80065d2:	f200 80bb 	bhi.w	800674c <USBH_CtlReq+0x1a6>
 80065d6:	e8df f003 	tbb	[pc, r3]
 80065da:	0f06      	.short	0x0f06
 80065dc:	5346372c 	.word	0x5346372c
 80065e0:	8d807267 	.word	0x8d807267
 80065e4:	9d          	.byte	0x9d
 80065e5:	00          	.byte	0x00
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80065e6:	7942      	ldrb	r2, [r0, #5]
 80065e8:	f100 0110 	add.w	r1, r0, #16
 80065ec:	f000 facd 	bl	8006b8a <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80065f0:	2302      	movs	r3, #2
 80065f2:	7623      	strb	r3, [r4, #24]
  switch (phost->RequestState)
 80065f4:	2501      	movs	r5, #1
  return status;
 80065f6:	e7df      	b.n	80065b8 <USBH_CtlReq+0x12>
      break;

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80065f8:	7941      	ldrb	r1, [r0, #5]
 80065fa:	f000 ff9e 	bl	800753a <USBH_LL_GetURBState>
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80065fe:	2801      	cmp	r0, #1
 8006600:	d006      	beq.n	8006610 <USBH_CtlReq+0x6a>
#endif
#endif
      }
      else
      {
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006602:	2804      	cmp	r0, #4
 8006604:	d001      	beq.n	800660a <USBH_CtlReq+0x64>
 8006606:	2802      	cmp	r0, #2
 8006608:	d1f4      	bne.n	80065f4 <USBH_CtlReq+0x4e>
        {
          phost->Control.state = CTRL_ERROR;
 800660a:	230b      	movs	r3, #11
 800660c:	7623      	strb	r3, [r4, #24]
 800660e:	e7f1      	b.n	80065f4 <USBH_CtlReq+0x4e>
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006610:	7c22      	ldrb	r2, [r4, #16]
        if (phost->Control.setup.b.wLength.w != 0U)
 8006612:	8ae3      	ldrh	r3, [r4, #22]
 8006614:	b133      	cbz	r3, 8006624 <USBH_CtlReq+0x7e>
          if (direction == USB_D2H)
 8006616:	f012 0f80 	tst.w	r2, #128	; 0x80
            phost->Control.state = CTRL_DATA_IN;
 800661a:	bf14      	ite	ne
 800661c:	2303      	movne	r3, #3
            phost->Control.state = CTRL_DATA_OUT;
 800661e:	2305      	moveq	r3, #5
 8006620:	7623      	strb	r3, [r4, #24]
 8006622:	e7e7      	b.n	80065f4 <USBH_CtlReq+0x4e>
          if (direction == USB_D2H)
 8006624:	f012 0f80 	tst.w	r2, #128	; 0x80
            phost->Control.state = CTRL_STATUS_OUT;
 8006628:	bf14      	ite	ne
 800662a:	2309      	movne	r3, #9
            phost->Control.state = CTRL_STATUS_IN;
 800662c:	2307      	moveq	r3, #7
 800662e:	7623      	strb	r3, [r4, #24]
 8006630:	e7e0      	b.n	80065f4 <USBH_CtlReq+0x4e>
      }
      break;

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006632:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8006636:	81c3      	strh	r3, [r0, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8006638:	7903      	ldrb	r3, [r0, #4]
 800663a:	8982      	ldrh	r2, [r0, #12]
 800663c:	6881      	ldr	r1, [r0, #8]
 800663e:	f000 facd 	bl	8006bdc <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006642:	2304      	movs	r3, #4
 8006644:	7623      	strb	r3, [r4, #24]
      break;
 8006646:	e7d5      	b.n	80065f4 <USBH_CtlReq+0x4e>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006648:	7901      	ldrb	r1, [r0, #4]
 800664a:	f000 ff76 	bl	800753a <USBH_LL_GetURBState>

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800664e:	2801      	cmp	r0, #1
 8006650:	d006      	beq.n	8006660 <USBH_CtlReq+0xba>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006652:	2805      	cmp	r0, #5
 8006654:	d03c      	beq.n	80066d0 <USBH_CtlReq+0x12a>
#endif
#endif
      }
      else
      {
        if (URB_Status == USBH_URB_ERROR)
 8006656:	2804      	cmp	r0, #4
 8006658:	d1cc      	bne.n	80065f4 <USBH_CtlReq+0x4e>
        {
          /* Device error */
          phost->Control.state = CTRL_ERROR;
 800665a:	230b      	movs	r3, #11
 800665c:	7623      	strb	r3, [r4, #24]
 800665e:	e7c9      	b.n	80065f4 <USBH_CtlReq+0x4e>
        phost->Control.state = CTRL_STATUS_OUT;
 8006660:	2309      	movs	r3, #9
 8006662:	7623      	strb	r3, [r4, #24]
      if (URB_Status == USBH_URB_STALL)
 8006664:	e7c6      	b.n	80065f4 <USBH_CtlReq+0x4e>
      }
      break;

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006666:	2301      	movs	r3, #1
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	7943      	ldrb	r3, [r0, #5]
 800666c:	8982      	ldrh	r2, [r0, #12]
 800666e:	6881      	ldr	r1, [r0, #8]
 8006670:	f000 fa9c 	bl	8006bac <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006674:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8006678:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800667a:	2306      	movs	r3, #6
 800667c:	7623      	strb	r3, [r4, #24]
      break;
 800667e:	e7b9      	b.n	80065f4 <USBH_CtlReq+0x4e>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006680:	7941      	ldrb	r1, [r0, #5]
 8006682:	f000 ff5a 	bl	800753a <USBH_LL_GetURBState>

      if (URB_Status == USBH_URB_DONE)
 8006686:	2801      	cmp	r0, #1
 8006688:	d008      	beq.n	800669c <USBH_CtlReq+0xf6>
#endif
#endif
      }

      /* handle error cases */
      else if (URB_Status == USBH_URB_STALL)
 800668a:	2805      	cmp	r0, #5
 800668c:	d020      	beq.n	80066d0 <USBH_CtlReq+0x12a>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      else if (URB_Status == USBH_URB_NOTREADY)
 800668e:	2802      	cmp	r0, #2
 8006690:	d007      	beq.n	80066a2 <USBH_CtlReq+0xfc>
#endif
#endif
      }
      else
      {
        if (URB_Status == USBH_URB_ERROR)
 8006692:	2804      	cmp	r0, #4
 8006694:	d1ae      	bne.n	80065f4 <USBH_CtlReq+0x4e>
        {
          /* device error */
          phost->Control.state = CTRL_ERROR;
 8006696:	230b      	movs	r3, #11
 8006698:	7623      	strb	r3, [r4, #24]
          status = USBH_FAIL;
 800669a:	e054      	b.n	8006746 <USBH_CtlReq+0x1a0>
        phost->Control.state = CTRL_STATUS_IN;
 800669c:	2307      	movs	r3, #7
 800669e:	7623      	strb	r3, [r4, #24]
 80066a0:	e7a8      	b.n	80065f4 <USBH_CtlReq+0x4e>
        phost->Control.state = CTRL_DATA_OUT;
 80066a2:	2305      	movs	r3, #5
 80066a4:	7623      	strb	r3, [r4, #24]
 80066a6:	e7a5      	b.n	80065f4 <USBH_CtlReq+0x4e>
      }
      break;

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80066a8:	7903      	ldrb	r3, [r0, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	4611      	mov	r1, r2
 80066ae:	f000 fa95 	bl	8006bdc <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80066b2:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 80066b6:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80066b8:	2308      	movs	r3, #8
 80066ba:	7623      	strb	r3, [r4, #24]

      break;
 80066bc:	e79a      	b.n	80065f4 <USBH_CtlReq+0x4e>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80066be:	7901      	ldrb	r1, [r0, #4]
 80066c0:	f000 ff3b 	bl	800753a <USBH_LL_GetURBState>

      if (URB_Status == USBH_URB_DONE)
 80066c4:	2801      	cmp	r0, #1
 80066c6:	d043      	beq.n	8006750 <USBH_CtlReq+0x1aa>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      else if (URB_Status == USBH_URB_ERROR)
 80066c8:	2804      	cmp	r0, #4
 80066ca:	d003      	beq.n	80066d4 <USBH_CtlReq+0x12e>
#endif
#endif
      }
      else
      {
        if (URB_Status == USBH_URB_STALL)
 80066cc:	2805      	cmp	r0, #5
 80066ce:	d191      	bne.n	80065f4 <USBH_CtlReq+0x4e>
{
 80066d0:	2503      	movs	r5, #3
 80066d2:	e03e      	b.n	8006752 <USBH_CtlReq+0x1ac>
        phost->Control.state = CTRL_ERROR;
 80066d4:	230b      	movs	r3, #11
 80066d6:	7623      	strb	r3, [r4, #24]
 80066d8:	e78c      	b.n	80065f4 <USBH_CtlReq+0x4e>
        }
      }
      break;

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80066da:	2301      	movs	r3, #1
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	7943      	ldrb	r3, [r0, #5]
 80066e0:	2200      	movs	r2, #0
 80066e2:	4611      	mov	r1, r2
 80066e4:	f000 fa62 	bl	8006bac <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80066e8:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 80066ec:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80066ee:	230a      	movs	r3, #10
 80066f0:	7623      	strb	r3, [r4, #24]
      break;
 80066f2:	e77f      	b.n	80065f4 <USBH_CtlReq+0x4e>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80066f4:	7941      	ldrb	r1, [r0, #5]
 80066f6:	f000 ff20 	bl	800753a <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80066fa:	2801      	cmp	r0, #1
 80066fc:	d028      	beq.n	8006750 <USBH_CtlReq+0x1aa>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      else if (URB_Status == USBH_URB_NOTREADY)
 80066fe:	2802      	cmp	r0, #2
 8006700:	d005      	beq.n	800670e <USBH_CtlReq+0x168>
#endif
#endif
      }
      else
      {
        if (URB_Status == USBH_URB_ERROR)
 8006702:	2804      	cmp	r0, #4
 8006704:	f47f af76 	bne.w	80065f4 <USBH_CtlReq+0x4e>
        {
          phost->Control.state = CTRL_ERROR;
 8006708:	230b      	movs	r3, #11
 800670a:	7623      	strb	r3, [r4, #24]
 800670c:	e772      	b.n	80065f4 <USBH_CtlReq+0x4e>
        phost->Control.state = CTRL_STATUS_OUT;
 800670e:	2309      	movs	r3, #9
 8006710:	7623      	strb	r3, [r4, #24]
 8006712:	e76f      	b.n	80065f4 <USBH_CtlReq+0x4e>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006714:	7e43      	ldrb	r3, [r0, #25]
 8006716:	3301      	adds	r3, #1
 8006718:	b2db      	uxtb	r3, r3
 800671a:	7643      	strb	r3, [r0, #25]
 800671c:	2b02      	cmp	r3, #2
 800671e:	d803      	bhi.n	8006728 <USBH_CtlReq+0x182>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006720:	2301      	movs	r3, #1
 8006722:	7603      	strb	r3, [r0, #24]
        phost->RequestState = CMD_SEND;
 8006724:	7083      	strb	r3, [r0, #2]
 8006726:	e765      	b.n	80065f4 <USBH_CtlReq+0x4e>
      }
      else
      {
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006728:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 800672c:	2106      	movs	r1, #6
 800672e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006730:	2600      	movs	r6, #0
 8006732:	7666      	strb	r6, [r4, #25]
        USBH_ErrLog("Control error: Device not responding");

        /* Free control pipes */
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006734:	7961      	ldrb	r1, [r4, #5]
 8006736:	4620      	mov	r0, r4
 8006738:	f000 fabc 	bl	8006cb4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800673c:	7921      	ldrb	r1, [r4, #4]
 800673e:	4620      	mov	r0, r4
 8006740:	f000 fab8 	bl	8006cb4 <USBH_FreePipe>

        phost->gState = HOST_IDLE;
 8006744:	7026      	strb	r6, [r4, #0]
        phost->RequestState = CMD_SEND;
 8006746:	2301      	movs	r3, #1
 8006748:	70a3      	strb	r3, [r4, #2]
 800674a:	e735      	b.n	80065b8 <USBH_CtlReq+0x12>
  switch (phost->Control.state)
 800674c:	2501      	movs	r5, #1
 800674e:	e733      	b.n	80065b8 <USBH_CtlReq+0x12>
{
 8006750:	2500      	movs	r5, #0
        phost->RequestState = CMD_SEND;
 8006752:	2301      	movs	r3, #1
 8006754:	70a3      	strb	r3, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 8006756:	2300      	movs	r3, #0
 8006758:	7623      	strb	r3, [r4, #24]
 800675a:	e72d      	b.n	80065b8 <USBH_CtlReq+0x12>

0800675c <USBH_GetDescriptor>:
{
 800675c:	b508      	push	{r3, lr}
 800675e:	468e      	mov	lr, r1
 8006760:	4694      	mov	ip, r2
 8006762:	4619      	mov	r1, r3
 8006764:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  if (phost->RequestState == CMD_SEND)
 8006768:	7883      	ldrb	r3, [r0, #2]
 800676a:	2b01      	cmp	r3, #1
 800676c:	d002      	beq.n	8006774 <USBH_GetDescriptor+0x18>
  return USBH_CtlReq(phost, buff, length);
 800676e:	f7ff ff1a 	bl	80065a6 <USBH_CtlReq>
}
 8006772:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006774:	f06e 0e7f 	orn	lr, lr, #127	; 0x7f
 8006778:	f880 e010 	strb.w	lr, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800677c:	2306      	movs	r3, #6
 800677e:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006780:	f8a0 c012 	strh.w	ip, [r0, #18]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006784:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
      phost->Control.setup.b.wIndex.w = 0U;
 8006788:	f5bc 7f40 	cmp.w	ip, #768	; 0x300
 800678c:	f240 4309 	movw	r3, #1033	; 0x409
 8006790:	bf18      	it	ne
 8006792:	2300      	movne	r3, #0
 8006794:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 8006796:	82c2      	strh	r2, [r0, #22]
 8006798:	e7e9      	b.n	800676e <USBH_GetDescriptor+0x12>

0800679a <USBH_Get_DevDesc>:
{
 800679a:	b530      	push	{r4, r5, lr}
 800679c:	b083      	sub	sp, #12
 800679e:	4604      	mov	r4, r0
  status = USBH_GetDescriptor(phost,
 80067a0:	460d      	mov	r5, r1
 80067a2:	9100      	str	r1, [sp, #0]
 80067a4:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 80067a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067ac:	2100      	movs	r1, #0
 80067ae:	f7ff ffd5 	bl	800675c <USBH_GetDescriptor>
  if (status == USBH_OK)
 80067b2:	b108      	cbz	r0, 80067b8 <USBH_Get_DevDesc+0x1e>
}
 80067b4:	b003      	add	sp, #12
 80067b6:	bd30      	pop	{r4, r5, pc}
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80067b8:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 80067bc:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80067c0:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 80067c4:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  dev_desc->bcdUSB             = LE16(buf +  2);
 80067c8:	f894 211f 	ldrb.w	r2, [r4, #287]	; 0x11f
 80067cc:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 80067d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80067d4:	f8a4 3328 	strh.w	r3, [r4, #808]	; 0x328
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80067d8:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 80067dc:	f884 332a 	strb.w	r3, [r4, #810]	; 0x32a
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80067e0:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 80067e4:	f884 332b 	strb.w	r3, [r4, #811]	; 0x32b
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80067e8:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 80067ec:	f884 332c 	strb.w	r3, [r4, #812]	; 0x32c
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80067f0:	f894 2123 	ldrb.w	r2, [r4, #291]	; 0x123
  switch (dev_desc->bMaxPacketSize)
 80067f4:	2a20      	cmp	r2, #32
 80067f6:	d80f      	bhi.n	8006818 <USBH_Get_DevDesc+0x7e>
 80067f8:	2a07      	cmp	r2, #7
 80067fa:	d909      	bls.n	8006810 <USBH_Get_DevDesc+0x76>
 80067fc:	f1a2 0308 	sub.w	r3, r2, #8
 8006800:	b2d9      	uxtb	r1, r3
 8006802:	2301      	movs	r3, #1
 8006804:	408b      	lsls	r3, r1
 8006806:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800680a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800680e:	b92b      	cbnz	r3, 800681c <USBH_Get_DevDesc+0x82>
      dev_desc->bMaxPacketSize = 64U;
 8006810:	2340      	movs	r3, #64	; 0x40
 8006812:	f884 332d 	strb.w	r3, [r4, #813]	; 0x32d
      break;
 8006816:	e003      	b.n	8006820 <USBH_Get_DevDesc+0x86>
  switch (dev_desc->bMaxPacketSize)
 8006818:	2a40      	cmp	r2, #64	; 0x40
 800681a:	d1f9      	bne.n	8006810 <USBH_Get_DevDesc+0x76>
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800681c:	f884 232d 	strb.w	r2, [r4, #813]	; 0x32d
  if (length > 8U)
 8006820:	2d08      	cmp	r5, #8
 8006822:	d9c7      	bls.n	80067b4 <USBH_Get_DevDesc+0x1a>
    dev_desc->idVendor           = LE16(buf +  8);
 8006824:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
 8006828:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
 800682c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006830:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    dev_desc->idProduct          = LE16(buf + 10);
 8006834:	f894 2127 	ldrb.w	r2, [r4, #295]	; 0x127
 8006838:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
 800683c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006840:	f8a4 3330 	strh.w	r3, [r4, #816]	; 0x330
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006844:	f894 2129 	ldrb.w	r2, [r4, #297]	; 0x129
 8006848:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 800684c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006850:	f8a4 3332 	strh.w	r3, [r4, #818]	; 0x332
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006854:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 8006858:	f884 3334 	strb.w	r3, [r4, #820]	; 0x334
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800685c:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 8006860:	f884 3335 	strb.w	r3, [r4, #821]	; 0x335
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006864:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8006868:	f884 3336 	strb.w	r3, [r4, #822]	; 0x336
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800686c:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8006870:	f884 3337 	strb.w	r3, [r4, #823]	; 0x337
 8006874:	e79e      	b.n	80067b4 <USBH_Get_DevDesc+0x1a>

08006876 <USBH_Get_CfgDesc>:
{
 8006876:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800687a:	b085      	sub	sp, #20
 800687c:	4605      	mov	r5, r0
 800687e:	460e      	mov	r6, r1
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006880:	f100 041c 	add.w	r4, r0, #28
  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006884:	9100      	str	r1, [sp, #0]
 8006886:	4623      	mov	r3, r4
 8006888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800688c:	2100      	movs	r1, #0
 800688e:	f7ff ff65 	bl	800675c <USBH_GetDescriptor>
  if (status == USBH_OK)
 8006892:	b110      	cbz	r0, 800689a <USBH_Get_CfgDesc+0x24>
}
 8006894:	b005      	add	sp, #20
 8006896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800689a:	7f2a      	ldrb	r2, [r5, #28]
 800689c:	f885 2338 	strb.w	r2, [r5, #824]	; 0x338
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80068a0:	7f6b      	ldrb	r3, [r5, #29]
 80068a2:	f885 3339 	strb.w	r3, [r5, #825]	; 0x339
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80068a6:	7fe9      	ldrb	r1, [r5, #31]
 80068a8:	7fab      	ldrb	r3, [r5, #30]
 80068aa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80068ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068b2:	bf28      	it	cs
 80068b4:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80068b8:	f8a5 333a 	strh.w	r3, [r5, #826]	; 0x33a
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80068bc:	f895 3020 	ldrb.w	r3, [r5, #32]
 80068c0:	f885 333c 	strb.w	r3, [r5, #828]	; 0x33c
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80068c4:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 80068c8:	f885 333d 	strb.w	r3, [r5, #829]	; 0x33d
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80068cc:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 80068d0:	f885 333e 	strb.w	r3, [r5, #830]	; 0x33e
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80068d4:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 80068d8:	f885 333f 	strb.w	r3, [r5, #831]	; 0x33f
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80068dc:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80068e0:	f885 3340 	strb.w	r3, [r5, #832]	; 0x340
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80068e4:	2a09      	cmp	r2, #9
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80068e6:	bf1c      	itt	ne
 80068e8:	2309      	movne	r3, #9
 80068ea:	f885 3338 	strbne.w	r3, [r5, #824]	; 0x338
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80068ee:	2e09      	cmp	r6, #9
 80068f0:	d9d0      	bls.n	8006894 <USBH_Get_CfgDesc+0x1e>
 80068f2:	46ab      	mov	fp, r5
  USBH_StatusTypeDef           status = USBH_OK;
 80068f4:	4606      	mov	r6, r0
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80068f6:	2200      	movs	r2, #0
    ptr = USB_LEN_CFG_DESC;
 80068f8:	2309      	movs	r3, #9
        ep_ix = 0U;
 80068fa:	9003      	str	r0, [sp, #12]
 80068fc:	9002      	str	r0, [sp, #8]
 80068fe:	b2d7      	uxtb	r7, r2
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006900:	2a02      	cmp	r2, #2
 8006902:	f000 80c8 	beq.w	8006a96 <USBH_Get_CfgDesc+0x220>
 8006906:	f8b5 133a 	ldrh.w	r1, [r5, #826]	; 0x33a
 800690a:	4299      	cmp	r1, r3
 800690c:	f240 80c3 	bls.w	8006a96 <USBH_Get_CfgDesc+0x220>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006910:	7821      	ldrb	r1, [r4, #0]
 8006912:	440b      	add	r3, r1
 8006914:	b29b      	uxth	r3, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006916:	440c      	add	r4, r1
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8006918:	7861      	ldrb	r1, [r4, #1]
 800691a:	2904      	cmp	r1, #4
 800691c:	d1f0      	bne.n	8006900 <USBH_Get_CfgDesc+0x8a>
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800691e:	7821      	ldrb	r1, [r4, #0]
 8006920:	2909      	cmp	r1, #9
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8006922:	bf1c      	itt	ne
 8006924:	2109      	movne	r1, #9
 8006926:	7021      	strbne	r1, [r4, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006928:	7821      	ldrb	r1, [r4, #0]
 800692a:	465f      	mov	r7, fp
 800692c:	f88b 1342 	strb.w	r1, [fp, #834]	; 0x342
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006930:	7861      	ldrb	r1, [r4, #1]
 8006932:	f88b 1343 	strb.w	r1, [fp, #835]	; 0x343
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006936:	78a1      	ldrb	r1, [r4, #2]
 8006938:	f88b 1344 	strb.w	r1, [fp, #836]	; 0x344
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800693c:	78e1      	ldrb	r1, [r4, #3]
 800693e:	f88b 1345 	strb.w	r1, [fp, #837]	; 0x345
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006942:	7920      	ldrb	r0, [r4, #4]
 8006944:	f88b 0346 	strb.w	r0, [fp, #838]	; 0x346
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006948:	7961      	ldrb	r1, [r4, #5]
 800694a:	f88b 1347 	strb.w	r1, [fp, #839]	; 0x347
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800694e:	79a1      	ldrb	r1, [r4, #6]
 8006950:	f88b 1348 	strb.w	r1, [fp, #840]	; 0x348
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006954:	79e1      	ldrb	r1, [r4, #7]
 8006956:	f88b 1349 	strb.w	r1, [fp, #841]	; 0x349
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800695a:	7a21      	ldrb	r1, [r4, #8]
 800695c:	f88b 134a 	strb.w	r1, [fp, #842]	; 0x34a
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006960:	2800      	cmp	r0, #0
 8006962:	f000 8094 	beq.w	8006a8e <USBH_Get_CfgDesc+0x218>
        ep_ix = 0U;
 8006966:	9903      	ldr	r1, [sp, #12]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006968:	f04f 0c1a 	mov.w	ip, #26
 800696c:	fb0c f902 	mul.w	r9, ip, r2
 8006970:	e01b      	b.n	80069aa <USBH_Get_CfgDesc+0x134>
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8006972:	f897 0348 	ldrb.w	r0, [r7, #840]	; 0x348
 8006976:	2802      	cmp	r0, #2
 8006978:	d126      	bne.n	80069c8 <USBH_Get_CfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800697a:	f897 0349 	ldrb.w	r0, [r7, #841]	; 0x349
 800697e:	bb40      	cbnz	r0, 80069d2 <USBH_Get_CfgDesc+0x15c>
 8006980:	7820      	ldrb	r0, [r4, #0]
 8006982:	2809      	cmp	r0, #9
 8006984:	d025      	beq.n	80069d2 <USBH_Get_CfgDesc+0x15c>
                pdesc->bLength = 0x09U;
 8006986:	f04f 0009 	mov.w	r0, #9
 800698a:	7020      	strb	r0, [r4, #0]
 800698c:	e021      	b.n	80069d2 <USBH_Get_CfgDesc+0x15c>
    status = USBH_NOT_SUPPORTED;
 800698e:	2603      	movs	r6, #3
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8006990:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8006994:	2800      	cmp	r0, #0
 8006996:	d162      	bne.n	8006a5e <USBH_Get_CfgDesc+0x1e8>
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006998:	f01e 0f01 	tst.w	lr, #1
 800699c:	d156      	bne.n	8006a4c <USBH_Get_CfgDesc+0x1d6>
            ep_ix++;
 800699e:	3101      	adds	r1, #1
 80069a0:	b2c9      	uxtb	r1, r1
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80069a2:	f897 0346 	ldrb.w	r0, [r7, #838]	; 0x346
 80069a6:	4281      	cmp	r1, r0
 80069a8:	d271      	bcs.n	8006a8e <USBH_Get_CfgDesc+0x218>
 80069aa:	f8b5 c33a 	ldrh.w	ip, [r5, #826]	; 0x33a
 80069ae:	459c      	cmp	ip, r3
 80069b0:	d96b      	bls.n	8006a8a <USBH_Get_CfgDesc+0x214>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80069b2:	7820      	ldrb	r0, [r4, #0]
 80069b4:	4403      	add	r3, r0
 80069b6:	b29b      	uxth	r3, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80069b8:	4404      	add	r4, r0
          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80069ba:	7860      	ldrb	r0, [r4, #1]
 80069bc:	2805      	cmp	r0, #5
 80069be:	d1f0      	bne.n	80069a2 <USBH_Get_CfgDesc+0x12c>
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80069c0:	f897 0347 	ldrb.w	r0, [r7, #839]	; 0x347
 80069c4:	2801      	cmp	r0, #1
 80069c6:	d0d4      	beq.n	8006972 <USBH_Get_CfgDesc+0xfc>
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80069c8:	7820      	ldrb	r0, [r4, #0]
 80069ca:	2807      	cmp	r0, #7
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80069cc:	bf1c      	itt	ne
 80069ce:	2007      	movne	r0, #7
 80069d0:	7020      	strbne	r0, [r4, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80069d2:	7826      	ldrb	r6, [r4, #0]
 80069d4:	1c48      	adds	r0, r1, #1
 80069d6:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
 80069da:	4428      	add	r0, r5
 80069dc:	f880 6344 	strb.w	r6, [r0, #836]	; 0x344
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80069e0:	7866      	ldrb	r6, [r4, #1]
 80069e2:	f880 6345 	strb.w	r6, [r0, #837]	; 0x345
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80069e6:	78a6      	ldrb	r6, [r4, #2]
 80069e8:	f880 6346 	strb.w	r6, [r0, #838]	; 0x346
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80069ec:	f894 e003 	ldrb.w	lr, [r4, #3]
 80069f0:	f880 e347 	strb.w	lr, [r0, #839]	; 0x347
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80069f4:	f894 8005 	ldrb.w	r8, [r4, #5]
 80069f8:	7926      	ldrb	r6, [r4, #4]
 80069fa:	ea46 2608 	orr.w	r6, r6, r8, lsl #8
 80069fe:	f8a0 6348 	strh.w	r6, [r0, #840]	; 0x348
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006a02:	f894 8006 	ldrb.w	r8, [r4, #6]
 8006a06:	f880 834a 	strb.w	r8, [r0, #842]	; 0x34a
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8006a0a:	2e00      	cmp	r6, #0
 8006a0c:	d0bf      	beq.n	800698e <USBH_Get_CfgDesc+0x118>
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8006a0e:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8006a12:	1c48      	adds	r0, r1, #1
 8006a14:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
 8006a18:	4428      	add	r0, r5
 8006a1a:	f8a0 6348 	strh.w	r6, [r0, #840]	; 0x348
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8006a1e:	b236      	sxth	r6, r6
 8006a20:	7960      	ldrb	r0, [r4, #5]
 8006a22:	f894 a004 	ldrb.w	sl, [r4, #4]
 8006a26:	ea4a 2a00 	orr.w	sl, sl, r0, lsl #8
 8006a2a:	f41a 6fc0 	tst.w	sl, #1536	; 0x600
 8006a2e:	bf0c      	ite	eq
 8006a30:	f3ca 0a0a 	ubfxeq	sl, sl, #0, #11
 8006a34:	f44f 7a00 	movne.w	sl, #512	; 0x200
 8006a38:	1c48      	adds	r0, r1, #1
 8006a3a:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
 8006a3e:	4428      	add	r0, r5
 8006a40:	ea46 060a 	orr.w	r6, r6, sl
 8006a44:	f8a0 6348 	strh.w	r6, [r0, #840]	; 0x348
  USBH_StatusTypeDef status = USBH_OK;
 8006a48:	9e02      	ldr	r6, [sp, #8]
 8006a4a:	e7a1      	b.n	8006990 <USBH_Get_CfgDesc+0x11a>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006a4c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006a50:	fa5f f888 	uxtb.w	r8, r8
        status = USBH_NOT_SUPPORTED;
 8006a54:	f1b8 0f10 	cmp.w	r8, #16
 8006a58:	bf28      	it	cs
 8006a5a:	2603      	movcs	r6, #3
 8006a5c:	e79f      	b.n	800699e <USBH_Get_CfgDesc+0x128>
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8006a5e:	f00e 0e03 	and.w	lr, lr, #3
 8006a62:	f1be 0f01 	cmp.w	lr, #1
 8006a66:	d007      	beq.n	8006a78 <USBH_Get_CfgDesc+0x202>
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8006a68:	f1be 0f03 	cmp.w	lr, #3
 8006a6c:	d197      	bne.n	800699e <USBH_Get_CfgDesc+0x128>
        status = USBH_NOT_SUPPORTED;
 8006a6e:	f1b8 0f00 	cmp.w	r8, #0
 8006a72:	bf08      	it	eq
 8006a74:	4676      	moveq	r6, lr
 8006a76:	e792      	b.n	800699e <USBH_Get_CfgDesc+0x128>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006a78:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006a7c:	fa5f f888 	uxtb.w	r8, r8
        status = USBH_NOT_SUPPORTED;
 8006a80:	f1b8 0f10 	cmp.w	r8, #16
 8006a84:	bf28      	it	cs
 8006a86:	2603      	movcs	r6, #3
 8006a88:	e789      	b.n	800699e <USBH_Get_CfgDesc+0x128>
        if (ep_ix < pif->bNumEndpoints)
 8006a8a:	4288      	cmp	r0, r1
 8006a8c:	d80d      	bhi.n	8006aaa <USBH_Get_CfgDesc+0x234>
        if_ix++;
 8006a8e:	3201      	adds	r2, #1
 8006a90:	f10b 0b1a 	add.w	fp, fp, #26
 8006a94:	e733      	b.n	80068fe <USBH_Get_CfgDesc+0x88>
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8006a96:	f895 333c 	ldrb.w	r3, [r5, #828]	; 0x33c
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	bf28      	it	cs
 8006a9e:	2302      	movcs	r3, #2
      return USBH_NOT_SUPPORTED;
 8006aa0:	42bb      	cmp	r3, r7
 8006aa2:	bf94      	ite	ls
 8006aa4:	4630      	movls	r0, r6
 8006aa6:	2003      	movhi	r0, #3
 8006aa8:	e6f4      	b.n	8006894 <USBH_Get_CfgDesc+0x1e>
          return USBH_NOT_SUPPORTED;
 8006aaa:	2003      	movs	r0, #3
 8006aac:	e6f2      	b.n	8006894 <USBH_Get_CfgDesc+0x1e>

08006aae <USBH_Get_StringDesc>:
{
 8006aae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ab0:	b083      	sub	sp, #12
 8006ab2:	4605      	mov	r5, r0
 8006ab4:	4614      	mov	r4, r2
 8006ab6:	461e      	mov	r6, r3
                              phost->device.Data, length);
 8006ab8:	f500 778e 	add.w	r7, r0, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006abc:	9300      	str	r3, [sp, #0]
 8006abe:	463b      	mov	r3, r7
 8006ac0:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	f7ff fe49 	bl	800675c <USBH_GetDescriptor>
  if (status == USBH_OK)
 8006aca:	b108      	cbz	r0, 8006ad0 <USBH_Get_StringDesc+0x22>
}
 8006acc:	b003      	add	sp, #12
 8006ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006ad0:	f895 311d 	ldrb.w	r3, [r5, #285]	; 0x11d
 8006ad4:	2b03      	cmp	r3, #3
 8006ad6:	d1f9      	bne.n	8006acc <USBH_Get_StringDesc+0x1e>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006ad8:	f895 311c 	ldrb.w	r3, [r5, #284]	; 0x11c
 8006adc:	3b02      	subs	r3, #2
 8006ade:	429e      	cmp	r6, r3
 8006ae0:	bf28      	it	cs
 8006ae2:	461e      	movcs	r6, r3
 8006ae4:	b2b6      	uxth	r6, r6
    for (idx = 0U; idx < strlength; idx += 2U)
 8006ae6:	b146      	cbz	r6, 8006afa <USBH_Get_StringDesc+0x4c>
 8006ae8:	2300      	movs	r3, #0
      *pdest =  psrc[idx];
 8006aea:	18fa      	adds	r2, r7, r3
 8006aec:	7892      	ldrb	r2, [r2, #2]
 8006aee:	f804 2b01 	strb.w	r2, [r4], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 8006af2:	3302      	adds	r3, #2
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	429e      	cmp	r6, r3
 8006af8:	d8f7      	bhi.n	8006aea <USBH_Get_StringDesc+0x3c>
    *pdest = 0U; /* mark end of string */
 8006afa:	2300      	movs	r3, #0
 8006afc:	7023      	strb	r3, [r4, #0]
 8006afe:	e7e5      	b.n	8006acc <USBH_Get_StringDesc+0x1e>

08006b00 <USBH_SetAddress>:
{
 8006b00:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8006b02:	7883      	ldrb	r3, [r0, #2]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d004      	beq.n	8006b12 <USBH_SetAddress+0x12>
  return USBH_CtlReq(phost, NULL, 0U);
 8006b08:	2200      	movs	r2, #0
 8006b0a:	4611      	mov	r1, r2
 8006b0c:	f7ff fd4b 	bl	80065a6 <USBH_CtlReq>
}
 8006b10:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006b12:	2300      	movs	r3, #0
 8006b14:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006b16:	2205      	movs	r2, #5
 8006b18:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006b1a:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006b1c:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006b1e:	82c3      	strh	r3, [r0, #22]
 8006b20:	e7f2      	b.n	8006b08 <USBH_SetAddress+0x8>

08006b22 <USBH_SetCfg>:
{
 8006b22:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8006b24:	7883      	ldrb	r3, [r0, #2]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d004      	beq.n	8006b34 <USBH_SetCfg+0x12>
  return USBH_CtlReq(phost, NULL, 0U);
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	4611      	mov	r1, r2
 8006b2e:	f7ff fd3a 	bl	80065a6 <USBH_CtlReq>
}
 8006b32:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006b34:	2300      	movs	r3, #0
 8006b36:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006b38:	2209      	movs	r2, #9
 8006b3a:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006b3c:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006b3e:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006b40:	82c3      	strh	r3, [r0, #22]
 8006b42:	e7f2      	b.n	8006b2a <USBH_SetCfg+0x8>

08006b44 <USBH_SetFeature>:
{
 8006b44:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8006b46:	7883      	ldrb	r3, [r0, #2]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d004      	beq.n	8006b56 <USBH_SetFeature+0x12>
  return USBH_CtlReq(phost, NULL, 0U);
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	4611      	mov	r1, r2
 8006b50:	f7ff fd29 	bl	80065a6 <USBH_CtlReq>
}
 8006b54:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006b56:	2300      	movs	r3, #0
 8006b58:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006b5a:	2203      	movs	r2, #3
 8006b5c:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006b5e:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006b60:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006b62:	82c3      	strh	r3, [r0, #22]
 8006b64:	e7f2      	b.n	8006b4c <USBH_SetFeature+0x8>

08006b66 <USBH_ClrFeature>:
{
 8006b66:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8006b68:	7883      	ldrb	r3, [r0, #2]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d004      	beq.n	8006b78 <USBH_ClrFeature+0x12>
  return USBH_CtlReq(phost, NULL, 0U);
 8006b6e:	2200      	movs	r2, #0
 8006b70:	4611      	mov	r1, r2
 8006b72:	f7ff fd18 	bl	80065a6 <USBH_CtlReq>
}
 8006b76:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006b78:	2302      	movs	r3, #2
 8006b7a:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006b80:	2300      	movs	r3, #0
 8006b82:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006b84:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006b86:	82c3      	strh	r3, [r0, #22]
 8006b88:	e7f1      	b.n	8006b6e <USBH_ClrFeature+0x8>

08006b8a <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006b8a:	b510      	push	{r4, lr}
 8006b8c:	b084      	sub	sp, #16
 8006b8e:	460b      	mov	r3, r1
 8006b90:	4611      	mov	r1, r2

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006b92:	2400      	movs	r4, #0
 8006b94:	9403      	str	r4, [sp, #12]
 8006b96:	2208      	movs	r2, #8
 8006b98:	9202      	str	r2, [sp, #8]
 8006b9a:	9301      	str	r3, [sp, #4]
 8006b9c:	9400      	str	r4, [sp, #0]
 8006b9e:	4623      	mov	r3, r4
 8006ba0:	4622      	mov	r2, r4
 8006ba2:	f000 fd45 	bl	8007630 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	b004      	add	sp, #16
 8006baa:	bd10      	pop	{r4, pc}

08006bac <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006bac:	b510      	push	{r4, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	460c      	mov	r4, r1
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	f89d 3018 	ldrb.w	r3, [sp, #24]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006bb8:	f890 c31d 	ldrb.w	ip, [r0, #797]	; 0x31d
  {
    do_ping = 0U;
 8006bbc:	f1bc 0f00 	cmp.w	ip, #0
 8006bc0:	bf18      	it	ne
 8006bc2:	2300      	movne	r3, #0
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006bc4:	9303      	str	r3, [sp, #12]
 8006bc6:	9202      	str	r2, [sp, #8]
 8006bc8:	9401      	str	r4, [sp, #4]
 8006bca:	2301      	movs	r3, #1
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	2300      	movs	r3, #0
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	f000 fd2d 	bl	8007630 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8006bd6:	2000      	movs	r0, #0
 8006bd8:	b004      	add	sp, #16
 8006bda:	bd10      	pop	{r4, pc}

08006bdc <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006bdc:	b530      	push	{r4, r5, lr}
 8006bde:	b085      	sub	sp, #20
 8006be0:	460d      	mov	r5, r1
 8006be2:	4619      	mov	r1, r3
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006be4:	2400      	movs	r4, #0
 8006be6:	9403      	str	r4, [sp, #12]
 8006be8:	9202      	str	r2, [sp, #8]
 8006bea:	9501      	str	r5, [sp, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	9200      	str	r2, [sp, #0]
 8006bf0:	4623      	mov	r3, r4
 8006bf2:	f000 fd1d 	bl	8007630 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	b005      	add	sp, #20
 8006bfa:	bd30      	pop	{r4, r5, pc}

08006bfc <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8006bfc:	b510      	push	{r4, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	460c      	mov	r4, r1
 8006c02:	4619      	mov	r1, r3
 8006c04:	f89d 3018 	ldrb.w	r3, [sp, #24]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006c08:	f890 c31d 	ldrb.w	ip, [r0, #797]	; 0x31d
  {
    do_ping = 0U;
 8006c0c:	f1bc 0f00 	cmp.w	ip, #0
 8006c10:	bf18      	it	ne
 8006c12:	2300      	movne	r3, #0
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006c14:	9303      	str	r3, [sp, #12]
 8006c16:	9202      	str	r2, [sp, #8]
 8006c18:	9401      	str	r4, [sp, #4]
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	2302      	movs	r3, #2
 8006c20:	2200      	movs	r2, #0
 8006c22:	f000 fd05 	bl	8007630 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8006c26:	2000      	movs	r0, #0
 8006c28:	b004      	add	sp, #16
 8006c2a:	bd10      	pop	{r4, pc}

08006c2c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8006c2c:	b530      	push	{r4, r5, lr}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	460d      	mov	r5, r1
 8006c32:	4619      	mov	r1, r3
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006c34:	2400      	movs	r4, #0
 8006c36:	9403      	str	r4, [sp, #12]
 8006c38:	9202      	str	r2, [sp, #8]
 8006c3a:	9501      	str	r5, [sp, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	9200      	str	r2, [sp, #0]
 8006c40:	2302      	movs	r3, #2
 8006c42:	f000 fcf5 	bl	8007630 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 8006c46:	4620      	mov	r0, r4
 8006c48:	b005      	add	sp, #20
 8006c4a:	bd30      	pop	{r4, r5, pc}

08006c4c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006c4c:	b510      	push	{r4, lr}
 8006c4e:	b084      	sub	sp, #16
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006c50:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8006c54:	9402      	str	r4, [sp, #8]
 8006c56:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8006c5a:	9401      	str	r4, [sp, #4]
 8006c5c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8006c60:	9400      	str	r4, [sp, #0]
 8006c62:	f000 fcca 	bl	80075fa <USBH_LL_OpenPipe>

  return USBH_OK;
}
 8006c66:	2000      	movs	r0, #0
 8006c68:	b004      	add	sp, #16
 8006c6a:	bd10      	pop	{r4, pc}

08006c6c <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006c6c:	b508      	push	{r3, lr}
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8006c6e:	f000 fcd7 	bl	8007620 <USBH_LL_ClosePipe>

  return USBH_OK;
}
 8006c72:	2000      	movs	r0, #0
 8006c74:	bd08      	pop	{r3, pc}

08006c76 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006c76:	b410      	push	{r4}
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8006c78:	f500 7260 	add.w	r2, r0, #896	; 0x380
{
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	fa5f fc83 	uxtb.w	ip, r3
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006c82:	f852 4f04 	ldr.w	r4, [r2, #4]!
 8006c86:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8006c8a:	d005      	beq.n	8006c98 <USBH_AllocPipe+0x22>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	2b10      	cmp	r3, #16
 8006c90:	d1f5      	bne.n	8006c7e <USBH_AllocPipe+0x8>
    {
      return (uint16_t)idx;
    }
  }

  return 0xFFFFU;
 8006c92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c96:	e009      	b.n	8006cac <USBH_AllocPipe+0x36>
      return (uint16_t)idx;
 8006c98:	fa1f f38c 	uxth.w	r3, ip
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8006c9c:	f00c 0c0f 	and.w	ip, ip, #15
 8006ca0:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8006ca4:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8006ca8:	f8cc 1384 	str.w	r1, [ip, #900]	; 0x384
}
 8006cac:	b2d8      	uxtb	r0, r3
 8006cae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <USBH_FreePipe>:
  if (idx < USBH_MAX_PIPES_NBR)
 8006cb4:	290f      	cmp	r1, #15
 8006cb6:	d807      	bhi.n	8006cc8 <USBH_FreePipe+0x14>
    phost->Pipes[idx] &= 0x7FFFU;
 8006cb8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8006cbc:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 8006cc0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006cc4:	f8c0 3384 	str.w	r3, [r0, #900]	; 0x384
}
 8006cc8:	2000      	movs	r0, #0
 8006cca:	4770      	bx	lr

08006ccc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006ccc:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006cce:	4b04      	ldr	r3, [pc, #16]	; (8006ce0 <disk_status+0x14>)
 8006cd0:	181a      	adds	r2, r3, r0
 8006cd2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	7a10      	ldrb	r0, [r2, #8]
 8006cdc:	4798      	blx	r3
  return stat;
}
 8006cde:	bd08      	pop	{r3, pc}
 8006ce0:	200027f8 	.word	0x200027f8

08006ce4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006ce4:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8006ce6:	4b08      	ldr	r3, [pc, #32]	; (8006d08 <disk_initialize+0x24>)
 8006ce8:	5c1b      	ldrb	r3, [r3, r0]
 8006cea:	b953      	cbnz	r3, 8006d02 <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
 8006cec:	4b06      	ldr	r3, [pc, #24]	; (8006d08 <disk_initialize+0x24>)
 8006cee:	2201      	movs	r2, #1
 8006cf0:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006cf2:	181a      	adds	r2, r3, r0
 8006cf4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006cf8:	6843      	ldr	r3, [r0, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	7a10      	ldrb	r0, [r2, #8]
 8006cfe:	4798      	blx	r3
  }
  return stat;
}
 8006d00:	bd08      	pop	{r3, pc}
  DSTATUS stat = RES_OK;
 8006d02:	2000      	movs	r0, #0
 8006d04:	e7fc      	b.n	8006d00 <disk_initialize+0x1c>
 8006d06:	bf00      	nop
 8006d08:	200027f8 	.word	0x200027f8

08006d0c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006d0c:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006d0e:	4c05      	ldr	r4, [pc, #20]	; (8006d24 <disk_read+0x18>)
 8006d10:	eb04 0c00 	add.w	ip, r4, r0
 8006d14:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8006d18:	6860      	ldr	r0, [r4, #4]
 8006d1a:	6884      	ldr	r4, [r0, #8]
 8006d1c:	f89c 0008 	ldrb.w	r0, [ip, #8]
 8006d20:	47a0      	blx	r4
  return res;
}
 8006d22:	bd10      	pop	{r4, pc}
 8006d24:	200027f8 	.word	0x200027f8

08006d28 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006d28:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006d2a:	4c05      	ldr	r4, [pc, #20]	; (8006d40 <disk_write+0x18>)
 8006d2c:	eb04 0c00 	add.w	ip, r4, r0
 8006d30:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8006d34:	6860      	ldr	r0, [r4, #4]
 8006d36:	68c4      	ldr	r4, [r0, #12]
 8006d38:	f89c 0008 	ldrb.w	r0, [ip, #8]
 8006d3c:	47a0      	blx	r4
  return res;
}
 8006d3e:	bd10      	pop	{r4, pc}
 8006d40:	200027f8 	.word	0x200027f8

08006d44 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006d44:	b508      	push	{r3, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006d46:	4b05      	ldr	r3, [pc, #20]	; (8006d5c <disk_ioctl+0x18>)
 8006d48:	eb03 0c00 	add.w	ip, r3, r0
 8006d4c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	f89c 0008 	ldrb.w	r0, [ip, #8]
 8006d58:	4798      	blx	r3
  return res;
}
 8006d5a:	bd08      	pop	{r3, pc}
 8006d5c:	200027f8 	.word	0x200027f8

08006d60 <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 8006d60:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 8006d62:	7883      	ldrb	r3, [r0, #2]
 8006d64:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 8006d68:	7843      	ldrb	r3, [r0, #1]
 8006d6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8006d6e:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8006d70:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8006d74:	4770      	bx	lr
	...

08006d78 <clear_lock>:
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006d78:	4b08      	ldr	r3, [pc, #32]	; (8006d9c <clear_lock+0x24>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4298      	cmp	r0, r3
 8006d7e:	d004      	beq.n	8006d8a <clear_lock+0x12>
 8006d80:	4b06      	ldr	r3, [pc, #24]	; (8006d9c <clear_lock+0x24>)
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	4283      	cmp	r3, r0
 8006d86:	d004      	beq.n	8006d92 <clear_lock+0x1a>
	}
}
 8006d88:	4770      	bx	lr
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006d8a:	4b04      	ldr	r3, [pc, #16]	; (8006d9c <clear_lock+0x24>)
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	601a      	str	r2, [r3, #0]
 8006d90:	e7f6      	b.n	8006d80 <clear_lock+0x8>
 8006d92:	4b02      	ldr	r3, [pc, #8]	; (8006d9c <clear_lock+0x24>)
 8006d94:	2200      	movs	r2, #0
 8006d96:	611a      	str	r2, [r3, #16]
}
 8006d98:	e7f6      	b.n	8006d88 <clear_lock+0x10>
 8006d9a:	bf00      	nop
 8006d9c:	200027d4 	.word	0x200027d4

08006da0 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006da0:	6801      	ldr	r1, [r0, #0]
 8006da2:	b309      	cbz	r1, 8006de8 <get_ldnumber+0x48>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006da4:	f891 c000 	ldrb.w	ip, [r1]
 8006da8:	f1bc 0f20 	cmp.w	ip, #32
 8006dac:	d909      	bls.n	8006dc2 <get_ldnumber+0x22>
 8006dae:	460a      	mov	r2, r1
 8006db0:	4663      	mov	r3, ip
 8006db2:	2b3a      	cmp	r3, #58	; 0x3a
 8006db4:	d00b      	beq.n	8006dce <get_ldnumber+0x2e>
 8006db6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8006dba:	2b20      	cmp	r3, #32
 8006dbc:	d8f9      	bhi.n	8006db2 <get_ldnumber+0x12>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006dbe:	2000      	movs	r0, #0
 8006dc0:	4770      	bx	lr
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006dc2:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
 8006dc6:	d001      	beq.n	8006dcc <get_ldnumber+0x2c>
		vol = 0;		/* Drive 0 */
 8006dc8:	2000      	movs	r0, #0
 8006dca:	4770      	bx	lr
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006dcc:	460a      	mov	r2, r1
			i = *tp++ - '0';
 8006dce:	3101      	adds	r1, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006dd0:	428a      	cmp	r2, r1
 8006dd2:	d002      	beq.n	8006dda <get_ldnumber+0x3a>
	int vol = -1;
 8006dd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dd8:	4770      	bx	lr
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006dda:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8006dde:	d106      	bne.n	8006dee <get_ldnumber+0x4e>
					*path = ++tt;
 8006de0:	3201      	adds	r2, #1
 8006de2:	6002      	str	r2, [r0, #0]
					vol = (int)i;
 8006de4:	2000      	movs	r0, #0
 8006de6:	4770      	bx	lr
	int vol = -1;
 8006de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dec:	4770      	bx	lr
 8006dee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#endif
	}
	return vol;
}
 8006df2:	4770      	bx	lr

08006df4 <sync_window>:
{
 8006df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006df8:	78c5      	ldrb	r5, [r0, #3]
 8006dfa:	b915      	cbnz	r5, 8006e02 <sync_window+0xe>
}
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e02:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 8006e04:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006e06:	f100 0834 	add.w	r8, r0, #52	; 0x34
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	4632      	mov	r2, r6
 8006e0e:	4641      	mov	r1, r8
 8006e10:	7840      	ldrb	r0, [r0, #1]
 8006e12:	f7ff ff89 	bl	8006d28 <disk_write>
 8006e16:	4605      	mov	r5, r0
 8006e18:	b9b8      	cbnz	r0, 8006e4a <sync_window+0x56>
			fs->wflag = 0;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006e1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e20:	1af3      	subs	r3, r6, r3
 8006e22:	69e2      	ldr	r2, [r4, #28]
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d2e9      	bcs.n	8006dfc <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006e28:	78a7      	ldrb	r7, [r4, #2]
 8006e2a:	2f01      	cmp	r7, #1
 8006e2c:	d9e6      	bls.n	8006dfc <sync_window+0x8>
					disk_write(fs->drv, fs->win, wsect, 1);
 8006e2e:	f04f 0901 	mov.w	r9, #1
					wsect += fs->fsize;
 8006e32:	69e3      	ldr	r3, [r4, #28]
 8006e34:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8006e36:	464b      	mov	r3, r9
 8006e38:	4632      	mov	r2, r6
 8006e3a:	4641      	mov	r1, r8
 8006e3c:	7860      	ldrb	r0, [r4, #1]
 8006e3e:	f7ff ff73 	bl	8006d28 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006e42:	3f01      	subs	r7, #1
 8006e44:	2f01      	cmp	r7, #1
 8006e46:	d1f4      	bne.n	8006e32 <sync_window+0x3e>
 8006e48:	e7d8      	b.n	8006dfc <sync_window+0x8>
			res = FR_DISK_ERR;
 8006e4a:	2501      	movs	r5, #1
 8006e4c:	e7d6      	b.n	8006dfc <sync_window+0x8>

08006e4e <move_window>:
{
 8006e4e:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006e50:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006e52:	428b      	cmp	r3, r1
 8006e54:	d101      	bne.n	8006e5a <move_window+0xc>
	FRESULT res = FR_OK;
 8006e56:	2000      	movs	r0, #0
}
 8006e58:	bd38      	pop	{r3, r4, r5, pc}
 8006e5a:	4604      	mov	r4, r0
 8006e5c:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 8006e5e:	f7ff ffc9 	bl	8006df4 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006e62:	2800      	cmp	r0, #0
 8006e64:	d1f8      	bne.n	8006e58 <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006e66:	2301      	movs	r3, #1
 8006e68:	462a      	mov	r2, r5
 8006e6a:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8006e6e:	7860      	ldrb	r0, [r4, #1]
 8006e70:	f7ff ff4c 	bl	8006d0c <disk_read>
				res = FR_DISK_ERR;
 8006e74:	2800      	cmp	r0, #0
 8006e76:	bf1c      	itt	ne
 8006e78:	2001      	movne	r0, #1
 8006e7a:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
			fs->winsect = sector;
 8006e7e:	6325      	str	r5, [r4, #48]	; 0x30
 8006e80:	e7ea      	b.n	8006e58 <move_window+0xa>
	...

08006e84 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006e84:	b538      	push	{r3, r4, r5, lr}
 8006e86:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006e88:	2300      	movs	r3, #0
 8006e8a:	70c3      	strb	r3, [r0, #3]
 8006e8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e90:	6303      	str	r3, [r0, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006e92:	f7ff ffdc 	bl	8006e4e <move_window>
 8006e96:	bb40      	cbnz	r0, 8006eea <check_fs+0x66>
 8006e98:	4605      	mov	r5, r0
	rv = rv << 8 | ptr[0];
 8006e9a:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 8006e9e:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 8006ea2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006ea6:	b21b      	sxth	r3, r3
 8006ea8:	4a12      	ldr	r2, [pc, #72]	; (8006ef4 <check_fs+0x70>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d11f      	bne.n	8006eee <check_fs+0x6a>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006eae:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8006eb2:	2be9      	cmp	r3, #233	; 0xe9
 8006eb4:	d007      	beq.n	8006ec6 <check_fs+0x42>
 8006eb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006eb8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8006ebc:	4a0e      	ldr	r2, [pc, #56]	; (8006ef8 <check_fs+0x74>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d001      	beq.n	8006ec6 <check_fs+0x42>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006ec2:	2502      	movs	r5, #2
 8006ec4:	e014      	b.n	8006ef0 <check_fs+0x6c>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006ec6:	f104 006a 	add.w	r0, r4, #106	; 0x6a
 8006eca:	f7ff ff49 	bl	8006d60 <ld_dword>
 8006ece:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8006ed2:	4b0a      	ldr	r3, [pc, #40]	; (8006efc <check_fs+0x78>)
 8006ed4:	4298      	cmp	r0, r3
 8006ed6:	d00b      	beq.n	8006ef0 <check_fs+0x6c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006ed8:	f104 0086 	add.w	r0, r4, #134	; 0x86
 8006edc:	f7ff ff40 	bl	8006d60 <ld_dword>
	return 2;
 8006ee0:	4b07      	ldr	r3, [pc, #28]	; (8006f00 <check_fs+0x7c>)
 8006ee2:	4298      	cmp	r0, r3
 8006ee4:	bf18      	it	ne
 8006ee6:	2502      	movne	r5, #2
 8006ee8:	e002      	b.n	8006ef0 <check_fs+0x6c>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006eea:	2504      	movs	r5, #4
 8006eec:	e000      	b.n	8006ef0 <check_fs+0x6c>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006eee:	2503      	movs	r5, #3
}
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	bd38      	pop	{r3, r4, r5, pc}
 8006ef4:	ffffaa55 	.word	0xffffaa55
 8006ef8:	009000eb 	.word	0x009000eb
 8006efc:	00544146 	.word	0x00544146
 8006f00:	33544146 	.word	0x33544146

08006f04 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f08:	b087      	sub	sp, #28
 8006f0a:	460e      	mov	r6, r1
 8006f0c:	4614      	mov	r4, r2
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 8006f12:	f7ff ff45 	bl	8006da0 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8006f16:	1e07      	subs	r7, r0, #0
 8006f18:	f2c0 8196 	blt.w	8007248 <find_volume+0x344>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006f1c:	4bc5      	ldr	r3, [pc, #788]	; (8007234 <find_volume+0x330>)
 8006f1e:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006f22:	2d00      	cmp	r5, #0
 8006f24:	f000 8195 	beq.w	8007252 <find_volume+0x34e>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006f28:	6035      	str	r5, [r6, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006f2a:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006f2e:	782b      	ldrb	r3, [r5, #0]
 8006f30:	b16b      	cbz	r3, 8006f4e <find_volume+0x4a>
		stat = disk_status(fs->drv);
 8006f32:	7868      	ldrb	r0, [r5, #1]
 8006f34:	f7ff feca 	bl	8006ccc <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006f38:	f010 0f01 	tst.w	r0, #1
 8006f3c:	d107      	bne.n	8006f4e <find_volume+0x4a>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006f3e:	2c00      	cmp	r4, #0
 8006f40:	f000 8183 	beq.w	800724a <find_volume+0x346>
				return FR_WRITE_PROTECTED;
 8006f44:	f010 0404 	ands.w	r4, r0, #4
 8006f48:	bf18      	it	ne
 8006f4a:	240a      	movne	r4, #10
 8006f4c:	e17d      	b.n	800724a <find_volume+0x346>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006f4e:	2300      	movs	r3, #0
 8006f50:	702b      	strb	r3, [r5, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006f52:	b2f8      	uxtb	r0, r7
 8006f54:	7068      	strb	r0, [r5, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006f56:	f7ff fec5 	bl	8006ce4 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006f5a:	f010 0f01 	tst.w	r0, #1
 8006f5e:	f040 817a 	bne.w	8007256 <find_volume+0x352>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006f62:	b11c      	cbz	r4, 8006f6c <find_volume+0x68>
 8006f64:	f010 0f04 	tst.w	r0, #4
 8006f68:	f040 8177 	bne.w	800725a <find_volume+0x356>
		return FR_WRITE_PROTECTED;
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006f6c:	f105 020c 	add.w	r2, r5, #12
 8006f70:	2102      	movs	r1, #2
 8006f72:	7868      	ldrb	r0, [r5, #1]
 8006f74:	f7ff fee6 	bl	8006d44 <disk_ioctl>
 8006f78:	4604      	mov	r4, r0
 8006f7a:	2800      	cmp	r0, #0
 8006f7c:	f040 816f 	bne.w	800725e <find_volume+0x35a>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006f80:	89aa      	ldrh	r2, [r5, #12]
 8006f82:	f5a2 7300 	sub.w	r3, r2, #512	; 0x200
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8006f8c:	f200 8169 	bhi.w	8007262 <find_volume+0x35e>
 8006f90:	1e53      	subs	r3, r2, #1
 8006f92:	4213      	tst	r3, r2
 8006f94:	d001      	beq.n	8006f9a <find_volume+0x96>
 8006f96:	2401      	movs	r4, #1
 8006f98:	e157      	b.n	800724a <find_volume+0x346>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	4628      	mov	r0, r5
 8006f9e:	f7ff ff71 	bl	8006e84 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006fa2:	2802      	cmp	r0, #2
 8006fa4:	f000 80ac 	beq.w	8007100 <find_volume+0x1fc>
	bsect = 0;
 8006fa8:	2600      	movs	r6, #0
		do {							/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006faa:	2804      	cmp	r0, #4
 8006fac:	f000 815b 	beq.w	8007266 <find_volume+0x362>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006fb0:	2801      	cmp	r0, #1
 8006fb2:	f200 815a 	bhi.w	800726a <find_volume+0x366>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006fb6:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
	rv = rv << 8 | ptr[0];
 8006fba:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
 8006fbe:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006fc2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006fc6:	459a      	cmp	sl, r3
 8006fc8:	f040 8151 	bne.w	800726e <find_volume+0x36a>
	rv = rv << 8 | ptr[0];
 8006fcc:	f895 004b 	ldrb.w	r0, [r5, #75]	; 0x4b
 8006fd0:	f895 704a 	ldrb.w	r7, [r5, #74]	; 0x4a

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006fd4:	ea57 2700 	orrs.w	r7, r7, r0, lsl #8
 8006fd8:	d104      	bne.n	8006fe4 <find_volume+0xe0>
 8006fda:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8006fde:	f7ff febf 	bl	8006d60 <ld_dword>
 8006fe2:	4607      	mov	r7, r0
		fs->fsize = fasize;
 8006fe4:	61ef      	str	r7, [r5, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006fe6:	f895 9044 	ldrb.w	r9, [r5, #68]	; 0x44
 8006fea:	f885 9002 	strb.w	r9, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006fee:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	f200 813c 	bhi.w	8007272 <find_volume+0x36e>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006ffa:	f895 b041 	ldrb.w	fp, [r5, #65]	; 0x41
 8006ffe:	fa1f f38b 	uxth.w	r3, fp
 8007002:	816b      	strh	r3, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007004:	2b00      	cmp	r3, #0
 8007006:	f000 8136 	beq.w	8007276 <find_volume+0x372>
 800700a:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800700e:	ea13 0f0b 	tst.w	r3, fp
 8007012:	f040 8132 	bne.w	800727a <find_volume+0x376>
	rv = rv << 8 | ptr[0];
 8007016:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 800701a:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 800701e:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
 8007022:	fa0f f388 	sxth.w	r3, r8
 8007026:	9301      	str	r3, [sp, #4]

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007028:	f8a5 8008 	strh.w	r8, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800702c:	ea4f 125a 	mov.w	r2, sl, lsr #5
 8007030:	9200      	str	r2, [sp, #0]
 8007032:	fbb8 f3f2 	udiv	r3, r8, r2
 8007036:	fb02 8313 	mls	r3, r2, r3, r8
 800703a:	b29b      	uxth	r3, r3
 800703c:	2b00      	cmp	r3, #0
 800703e:	f040 811e 	bne.w	800727e <find_volume+0x37a>
	rv = rv << 8 | ptr[0];
 8007042:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 8007046:	f895 0047 	ldrb.w	r0, [r5, #71]	; 0x47

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800704a:	ea50 2003 	orrs.w	r0, r0, r3, lsl #8
 800704e:	d103      	bne.n	8007058 <find_volume+0x154>
 8007050:	f105 0054 	add.w	r0, r5, #84	; 0x54
 8007054:	f7ff fe84 	bl	8006d60 <ld_dword>
	rv = rv << 8 | ptr[0];
 8007058:	f895 3043 	ldrb.w	r3, [r5, #67]	; 0x43
 800705c:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007060:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
 8007064:	f000 810d 	beq.w	8007282 <find_volume+0x37e>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007068:	fb07 f109 	mul.w	r1, r7, r9

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800706c:	9b00      	ldr	r3, [sp, #0]
 800706e:	fbb8 f3f3 	udiv	r3, r8, r3
 8007072:	4413      	add	r3, r2
 8007074:	440b      	add	r3, r1
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007076:	4298      	cmp	r0, r3
 8007078:	f0c0 8105 	bcc.w	8007286 <find_volume+0x382>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800707c:	1ac0      	subs	r0, r0, r3
 800707e:	fbb0 fcfb 	udiv	ip, r0, fp
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007082:	4558      	cmp	r0, fp
 8007084:	f0c0 8101 	bcc.w	800728a <find_volume+0x386>
		fmt = FS_FAT32;
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007088:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 800708c:	4584      	cmp	ip, r0
 800708e:	d863      	bhi.n	8007158 <find_volume+0x254>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007090:	f640 70f5 	movw	r0, #4085	; 0xff5
 8007094:	4584      	cmp	ip, r0
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007096:	bf88      	it	hi
 8007098:	f04f 0902 	movhi.w	r9, #2
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800709c:	d85e      	bhi.n	800715c <find_volume+0x258>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800709e:	f10c 0b02 	add.w	fp, ip, #2
 80070a2:	f8c5 b018 	str.w	fp, [r5, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80070a6:	622e      	str	r6, [r5, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80070a8:	4432      	add	r2, r6
 80070aa:	626a      	str	r2, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80070ac:	4433      	add	r3, r6
 80070ae:	62eb      	str	r3, [r5, #44]	; 0x2c
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80070b0:	f1b8 0f00 	cmp.w	r8, #0
 80070b4:	f000 80f3 	beq.w	800729e <find_volume+0x39a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80070b8:	440a      	add	r2, r1
 80070ba:	62aa      	str	r2, [r5, #40]	; 0x28
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80070bc:	f04f 0901 	mov.w	r9, #1
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80070c0:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 80070c4:	f00b 0b01 	and.w	fp, fp, #1
 80070c8:	eb0b 0b53 	add.w	fp, fp, r3, lsr #1
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80070cc:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80070d0:	445b      	add	r3, fp
 80070d2:	fbb3 fafa 	udiv	sl, r3, sl
 80070d6:	45ba      	cmp	sl, r7
 80070d8:	f200 80df 	bhi.w	800729a <find_volume+0x396>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80070dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070e0:	616b      	str	r3, [r5, #20]
 80070e2:	612b      	str	r3, [r5, #16]
		fs->fsi_flag = 0x80;
 80070e4:	2380      	movs	r3, #128	; 0x80
 80070e6:	712b      	strb	r3, [r5, #4]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80070e8:	f885 9000 	strb.w	r9, [r5]
	fs->id = ++Fsid;		/* File system mount ID */
 80070ec:	4a52      	ldr	r2, [pc, #328]	; (8007238 <find_volume+0x334>)
 80070ee:	8813      	ldrh	r3, [r2, #0]
 80070f0:	3301      	adds	r3, #1
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	8013      	strh	r3, [r2, #0]
 80070f6:	80eb      	strh	r3, [r5, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80070f8:	4628      	mov	r0, r5
 80070fa:	f7ff fe3d 	bl	8006d78 <clear_lock>
#endif
	return FR_OK;
 80070fe:	e0a4      	b.n	800724a <find_volume+0x346>
 8007100:	af02      	add	r7, sp, #8
 8007102:	f505 76fd 	add.w	r6, r5, #506	; 0x1fa
 8007106:	f205 293a 	addw	r9, r5, #570	; 0x23a
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800710a:	46b8      	mov	r8, r7
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800710c:	f04f 0a00 	mov.w	sl, #0
 8007110:	e005      	b.n	800711e <find_volume+0x21a>
 8007112:	4650      	mov	r0, sl
 8007114:	f848 0b04 	str.w	r0, [r8], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007118:	3610      	adds	r6, #16
 800711a:	454e      	cmp	r6, r9
 800711c:	d007      	beq.n	800712e <find_volume+0x22a>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800711e:	f816 3c04 	ldrb.w	r3, [r6, #-4]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d0f5      	beq.n	8007112 <find_volume+0x20e>
 8007126:	4630      	mov	r0, r6
 8007128:	f7ff fe1a 	bl	8006d60 <ld_dword>
 800712c:	e7f2      	b.n	8007114 <find_volume+0x210>
 800712e:	f107 0810 	add.w	r8, r7, #16
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007132:	f04f 0903 	mov.w	r9, #3
 8007136:	e009      	b.n	800714c <find_volume+0x248>
 8007138:	4631      	mov	r1, r6
 800713a:	4628      	mov	r0, r5
 800713c:	f7ff fea2 	bl	8006e84 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007140:	2801      	cmp	r0, #1
 8007142:	f67f af38 	bls.w	8006fb6 <find_volume+0xb2>
 8007146:	45b8      	cmp	r8, r7
 8007148:	f43f af2f 	beq.w	8006faa <find_volume+0xa6>
			bsect = br[i];
 800714c:	f857 6b04 	ldr.w	r6, [r7], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007150:	2e00      	cmp	r6, #0
 8007152:	d1f1      	bne.n	8007138 <find_volume+0x234>
 8007154:	4648      	mov	r0, r9
 8007156:	e7f6      	b.n	8007146 <find_volume+0x242>
		fmt = FS_FAT32;
 8007158:	f04f 0903 	mov.w	r9, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800715c:	f10c 0b02 	add.w	fp, ip, #2
 8007160:	f8c5 b018 	str.w	fp, [r5, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007164:	622e      	str	r6, [r5, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007166:	4432      	add	r2, r6
 8007168:	626a      	str	r2, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800716a:	4433      	add	r3, r6
 800716c:	62eb      	str	r3, [r5, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800716e:	f1b9 0f03 	cmp.w	r9, #3
 8007172:	d153      	bne.n	800721c <find_volume+0x318>
	rv = rv << 8 | ptr[0];
 8007174:	f895 305f 	ldrb.w	r3, [r5, #95]	; 0x5f
 8007178:	f895 205e 	ldrb.w	r2, [r5, #94]	; 0x5e
 800717c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007180:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007184:	4313      	orrs	r3, r2
 8007186:	f040 8082 	bne.w	800728e <find_volume+0x38a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800718a:	f105 0060 	add.w	r0, r5, #96	; 0x60
 800718e:	f7ff fde7 	bl	8006d60 <ld_dword>
 8007192:	62a8      	str	r0, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007194:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007198:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 800719c:	fbbb fafa 	udiv	sl, fp, sl
 80071a0:	4557      	cmp	r7, sl
 80071a2:	d376      	bcc.n	8007292 <find_volume+0x38e>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80071a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071a8:	616b      	str	r3, [r5, #20]
 80071aa:	612b      	str	r3, [r5, #16]
		fs->fsi_flag = 0x80;
 80071ac:	2380      	movs	r3, #128	; 0x80
 80071ae:	712b      	strb	r3, [r5, #4]
	rv = rv << 8 | ptr[0];
 80071b0:	f895 2065 	ldrb.w	r2, [r5, #101]	; 0x65
 80071b4:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
 80071b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80071bc:	b21b      	sxth	r3, r3
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d192      	bne.n	80070e8 <find_volume+0x1e4>
			&& move_window(fs, bsect + 1) == FR_OK)
 80071c2:	1c71      	adds	r1, r6, #1
 80071c4:	4628      	mov	r0, r5
 80071c6:	f7ff fe42 	bl	8006e4e <move_window>
 80071ca:	2800      	cmp	r0, #0
 80071cc:	d18c      	bne.n	80070e8 <find_volume+0x1e4>
			fs->fsi_flag = 0;
 80071ce:	2300      	movs	r3, #0
 80071d0:	712b      	strb	r3, [r5, #4]
	rv = rv << 8 | ptr[0];
 80071d2:	f895 2233 	ldrb.w	r2, [r5, #563]	; 0x233
 80071d6:	f895 3232 	ldrb.w	r3, [r5, #562]	; 0x232
 80071da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80071de:	b21b      	sxth	r3, r3
 80071e0:	4a16      	ldr	r2, [pc, #88]	; (800723c <find_volume+0x338>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d180      	bne.n	80070e8 <find_volume+0x1e4>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80071e6:	f105 0034 	add.w	r0, r5, #52	; 0x34
 80071ea:	f7ff fdb9 	bl	8006d60 <ld_dword>
 80071ee:	4b14      	ldr	r3, [pc, #80]	; (8007240 <find_volume+0x33c>)
 80071f0:	4298      	cmp	r0, r3
 80071f2:	f47f af79 	bne.w	80070e8 <find_volume+0x1e4>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80071f6:	f505 7006 	add.w	r0, r5, #536	; 0x218
 80071fa:	f7ff fdb1 	bl	8006d60 <ld_dword>
 80071fe:	4b11      	ldr	r3, [pc, #68]	; (8007244 <find_volume+0x340>)
 8007200:	4298      	cmp	r0, r3
 8007202:	f47f af71 	bne.w	80070e8 <find_volume+0x1e4>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007206:	f505 7007 	add.w	r0, r5, #540	; 0x21c
 800720a:	f7ff fda9 	bl	8006d60 <ld_dword>
 800720e:	6168      	str	r0, [r5, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007210:	f505 7008 	add.w	r0, r5, #544	; 0x220
 8007214:	f7ff fda4 	bl	8006d60 <ld_dword>
 8007218:	6128      	str	r0, [r5, #16]
 800721a:	e765      	b.n	80070e8 <find_volume+0x1e4>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800721c:	f1b8 0f00 	cmp.w	r8, #0
 8007220:	d039      	beq.n	8007296 <find_volume+0x392>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007222:	440a      	add	r2, r1
 8007224:	62aa      	str	r2, [r5, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007226:	f1b9 0f02 	cmp.w	r9, #2
 800722a:	f47f af49 	bne.w	80070c0 <find_volume+0x1bc>
 800722e:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8007232:	e74b      	b.n	80070cc <find_volume+0x1c8>
 8007234:	200027d0 	.word	0x200027d0
 8007238:	200027f4 	.word	0x200027f4
 800723c:	ffffaa55 	.word	0xffffaa55
 8007240:	41615252 	.word	0x41615252
 8007244:	61417272 	.word	0x61417272
	if (vol < 0) return FR_INVALID_DRIVE;
 8007248:	240b      	movs	r4, #11
}
 800724a:	4620      	mov	r0, r4
 800724c:	b007      	add	sp, #28
 800724e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007252:	240c      	movs	r4, #12
 8007254:	e7f9      	b.n	800724a <find_volume+0x346>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007256:	2403      	movs	r4, #3
 8007258:	e7f7      	b.n	800724a <find_volume+0x346>
		return FR_WRITE_PROTECTED;
 800725a:	240a      	movs	r4, #10
 800725c:	e7f5      	b.n	800724a <find_volume+0x346>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800725e:	2401      	movs	r4, #1
 8007260:	e7f3      	b.n	800724a <find_volume+0x346>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007262:	2401      	movs	r4, #1
 8007264:	e7f1      	b.n	800724a <find_volume+0x346>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007266:	2401      	movs	r4, #1
 8007268:	e7ef      	b.n	800724a <find_volume+0x346>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800726a:	240d      	movs	r4, #13
 800726c:	e7ed      	b.n	800724a <find_volume+0x346>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800726e:	240d      	movs	r4, #13
 8007270:	e7eb      	b.n	800724a <find_volume+0x346>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007272:	240d      	movs	r4, #13
 8007274:	e7e9      	b.n	800724a <find_volume+0x346>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007276:	240d      	movs	r4, #13
 8007278:	e7e7      	b.n	800724a <find_volume+0x346>
 800727a:	240d      	movs	r4, #13
 800727c:	e7e5      	b.n	800724a <find_volume+0x346>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800727e:	240d      	movs	r4, #13
 8007280:	e7e3      	b.n	800724a <find_volume+0x346>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007282:	240d      	movs	r4, #13
 8007284:	e7e1      	b.n	800724a <find_volume+0x346>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007286:	240d      	movs	r4, #13
 8007288:	e7df      	b.n	800724a <find_volume+0x346>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800728a:	240d      	movs	r4, #13
 800728c:	e7dd      	b.n	800724a <find_volume+0x346>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800728e:	240d      	movs	r4, #13
 8007290:	e7db      	b.n	800724a <find_volume+0x346>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007292:	240d      	movs	r4, #13
 8007294:	e7d9      	b.n	800724a <find_volume+0x346>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007296:	240d      	movs	r4, #13
 8007298:	e7d7      	b.n	800724a <find_volume+0x346>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800729a:	240d      	movs	r4, #13
 800729c:	e7d5      	b.n	800724a <find_volume+0x346>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800729e:	240d      	movs	r4, #13
 80072a0:	e7d3      	b.n	800724a <find_volume+0x346>
 80072a2:	bf00      	nop

080072a4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80072a4:	b570      	push	{r4, r5, r6, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	9001      	str	r0, [sp, #4]
 80072aa:	9100      	str	r1, [sp, #0]
 80072ac:	4616      	mov	r6, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80072ae:	9103      	str	r1, [sp, #12]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80072b0:	a803      	add	r0, sp, #12
 80072b2:	f7ff fd75 	bl	8006da0 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80072b6:	1e04      	subs	r4, r0, #0
 80072b8:	db1c      	blt.n	80072f4 <f_mount+0x50>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80072ba:	4b13      	ldr	r3, [pc, #76]	; (8007308 <f_mount+0x64>)
 80072bc:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]

	if (cfs) {
 80072c0:	b125      	cbz	r5, 80072cc <f_mount+0x28>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80072c2:	4628      	mov	r0, r5
 80072c4:	f7ff fd58 	bl	8006d78 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80072c8:	2300      	movs	r3, #0
 80072ca:	702b      	strb	r3, [r5, #0]
	}

	if (fs) {
 80072cc:	9b01      	ldr	r3, [sp, #4]
 80072ce:	b1ab      	cbz	r3, 80072fc <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 80072d0:	2200      	movs	r2, #0
 80072d2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80072d4:	9b01      	ldr	r3, [sp, #4]
 80072d6:	4a0c      	ldr	r2, [pc, #48]	; (8007308 <f_mount+0x64>)
 80072d8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80072dc:	b163      	cbz	r3, 80072f8 <f_mount+0x54>
 80072de:	2e01      	cmp	r6, #1
 80072e0:	d002      	beq.n	80072e8 <f_mount+0x44>
 80072e2:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 80072e4:	b004      	add	sp, #16
 80072e6:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80072e8:	2200      	movs	r2, #0
 80072ea:	a901      	add	r1, sp, #4
 80072ec:	4668      	mov	r0, sp
 80072ee:	f7ff fe09 	bl	8006f04 <find_volume>
	LEAVE_FF(fs, res);
 80072f2:	e7f7      	b.n	80072e4 <f_mount+0x40>
	if (vol < 0) return FR_INVALID_DRIVE;
 80072f4:	200b      	movs	r0, #11
 80072f6:	e7f5      	b.n	80072e4 <f_mount+0x40>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80072f8:	2000      	movs	r0, #0
 80072fa:	e7f3      	b.n	80072e4 <f_mount+0x40>
	FatFs[vol] = fs;					/* Register new fs object */
 80072fc:	2000      	movs	r0, #0
 80072fe:	4b02      	ldr	r3, [pc, #8]	; (8007308 <f_mount+0x64>)
 8007300:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007304:	e7ee      	b.n	80072e4 <f_mount+0x40>
 8007306:	bf00      	nop
 8007308:	200027d0 	.word	0x200027d0

0800730c <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800730c:	4b13      	ldr	r3, [pc, #76]	; (800735c <FATFS_LinkDriverEx+0x50>)
 800730e:	7a5b      	ldrb	r3, [r3, #9]
 8007310:	bb13      	cbnz	r3, 8007358 <FATFS_LinkDriverEx+0x4c>
{
 8007312:	b510      	push	{r4, lr}
 8007314:	4604      	mov	r4, r0
 8007316:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 800731a:	4b10      	ldr	r3, [pc, #64]	; (800735c <FATFS_LinkDriverEx+0x50>)
 800731c:	f893 c009 	ldrb.w	ip, [r3, #9]
 8007320:	fa5f fc8c 	uxtb.w	ip, ip
 8007324:	f04f 0e00 	mov.w	lr, #0
 8007328:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 800732c:	f893 c009 	ldrb.w	ip, [r3, #9]
 8007330:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8007334:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 8007338:	7a5c      	ldrb	r4, [r3, #9]
 800733a:	441c      	add	r4, r3
 800733c:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 800733e:	7a5a      	ldrb	r2, [r3, #9]
 8007340:	1c54      	adds	r4, r2, #1
 8007342:	b2e4      	uxtb	r4, r4
 8007344:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 8007346:	3230      	adds	r2, #48	; 0x30
 8007348:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800734a:	233a      	movs	r3, #58	; 0x3a
 800734c:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800734e:	232f      	movs	r3, #47	; 0x2f
 8007350:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8007352:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 8007356:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 8007358:	2001      	movs	r0, #1
}
 800735a:	4770      	bx	lr
 800735c:	200027f8 	.word	0x200027f8

08007360 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007360:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8007362:	2200      	movs	r2, #0
 8007364:	f7ff ffd2 	bl	800730c <FATFS_LinkDriverEx>
}
 8007368:	bd08      	pop	{r3, pc}
	...

0800736c <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800736c:	2904      	cmp	r1, #4
 800736e:	d00c      	beq.n	800738a <USBH_UserProcess+0x1e>
 8007370:	2905      	cmp	r1, #5
 8007372:	d002      	beq.n	800737a <USBH_UserProcess+0xe>
 8007374:	2902      	cmp	r1, #2
 8007376:	d004      	beq.n	8007382 <USBH_UserProcess+0x16>

  default:
  break;
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007378:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 800737a:	4b06      	ldr	r3, [pc, #24]	; (8007394 <USBH_UserProcess+0x28>)
 800737c:	2203      	movs	r2, #3
 800737e:	701a      	strb	r2, [r3, #0]
  break;
 8007380:	4770      	bx	lr
  Appli_state = APPLICATION_READY;
 8007382:	4b04      	ldr	r3, [pc, #16]	; (8007394 <USBH_UserProcess+0x28>)
 8007384:	2202      	movs	r2, #2
 8007386:	701a      	strb	r2, [r3, #0]
  break;
 8007388:	4770      	bx	lr
  Appli_state = APPLICATION_START;
 800738a:	4b02      	ldr	r3, [pc, #8]	; (8007394 <USBH_UserProcess+0x28>)
 800738c:	2201      	movs	r2, #1
 800738e:	701a      	strb	r2, [r3, #0]
}
 8007390:	e7f2      	b.n	8007378 <USBH_UserProcess+0xc>
 8007392:	bf00      	nop
 8007394:	20002804 	.word	0x20002804

08007398 <MX_USB_HOST_Init>:
{
 8007398:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800739a:	2201      	movs	r2, #1
 800739c:	490b      	ldr	r1, [pc, #44]	; (80073cc <MX_USB_HOST_Init+0x34>)
 800739e:	480c      	ldr	r0, [pc, #48]	; (80073d0 <MX_USB_HOST_Init+0x38>)
 80073a0:	f7fe fdfe 	bl	8005fa0 <USBH_Init>
 80073a4:	b948      	cbnz	r0, 80073ba <MX_USB_HOST_Init+0x22>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 80073a6:	490b      	ldr	r1, [pc, #44]	; (80073d4 <MX_USB_HOST_Init+0x3c>)
 80073a8:	4809      	ldr	r0, [pc, #36]	; (80073d0 <MX_USB_HOST_Init+0x38>)
 80073aa:	f7fe fe18 	bl	8005fde <USBH_RegisterClass>
 80073ae:	b938      	cbnz	r0, 80073c0 <MX_USB_HOST_Init+0x28>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80073b0:	4807      	ldr	r0, [pc, #28]	; (80073d0 <MX_USB_HOST_Init+0x38>)
 80073b2:	f7fe fe50 	bl	8006056 <USBH_Start>
 80073b6:	b930      	cbnz	r0, 80073c6 <MX_USB_HOST_Init+0x2e>
}
 80073b8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80073ba:	f7f9 fd2f 	bl	8000e1c <Error_Handler>
 80073be:	e7f2      	b.n	80073a6 <MX_USB_HOST_Init+0xe>
    Error_Handler();
 80073c0:	f7f9 fd2c 	bl	8000e1c <Error_Handler>
 80073c4:	e7f4      	b.n	80073b0 <MX_USB_HOST_Init+0x18>
    Error_Handler();
 80073c6:	f7f9 fd29 	bl	8000e1c <Error_Handler>
}
 80073ca:	e7f5      	b.n	80073b8 <MX_USB_HOST_Init+0x20>
 80073cc:	0800736d 	.word	0x0800736d
 80073d0:	20002808 	.word	0x20002808
 80073d4:	20000214 	.word	0x20000214

080073d8 <MX_USB_HOST_Process>:
{
 80073d8:	b508      	push	{r3, lr}
  USBH_Process(&hUsbHostFS);
 80073da:	4802      	ldr	r0, [pc, #8]	; (80073e4 <MX_USB_HOST_Process+0xc>)
 80073dc:	f7fe fe45 	bl	800606a <USBH_Process>
}
 80073e0:	bd08      	pop	{r3, pc}
 80073e2:	bf00      	nop
 80073e4:	20002808 	.word	0x20002808

080073e8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80073e8:	b570      	push	{r4, r5, r6, lr}
 80073ea:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073ec:	2300      	movs	r3, #0
 80073ee:	9303      	str	r3, [sp, #12]
 80073f0:	9304      	str	r3, [sp, #16]
 80073f2:	9305      	str	r3, [sp, #20]
 80073f4:	9306      	str	r3, [sp, #24]
 80073f6:	9307      	str	r3, [sp, #28]
  if(hcdHandle->Instance==USB_OTG_FS)
 80073f8:	6803      	ldr	r3, [r0, #0]
 80073fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073fe:	d001      	beq.n	8007404 <HAL_HCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007400:	b008      	add	sp, #32
 8007402:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007404:	2500      	movs	r5, #0
 8007406:	9501      	str	r5, [sp, #4]
 8007408:	4c1b      	ldr	r4, [pc, #108]	; (8007478 <HAL_HCD_MspInit+0x90>)
 800740a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800740c:	f043 0301 	orr.w	r3, r3, #1
 8007410:	6323      	str	r3, [r4, #48]	; 0x30
 8007412:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007414:	f003 0301 	and.w	r3, r3, #1
 8007418:	9301      	str	r3, [sp, #4]
 800741a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800741c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007420:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007422:	4e16      	ldr	r6, [pc, #88]	; (800747c <HAL_HCD_MspInit+0x94>)
 8007424:	a903      	add	r1, sp, #12
 8007426:	4630      	mov	r0, r6
 8007428:	f7fa fd58 	bl	8001edc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800742c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007430:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007432:	2302      	movs	r3, #2
 8007434:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007436:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007438:	2303      	movs	r3, #3
 800743a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800743c:	230a      	movs	r3, #10
 800743e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007440:	a903      	add	r1, sp, #12
 8007442:	4630      	mov	r0, r6
 8007444:	f7fa fd4a 	bl	8001edc <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007448:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800744a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800744e:	6363      	str	r3, [r4, #52]	; 0x34
 8007450:	9502      	str	r5, [sp, #8]
 8007452:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007458:	6463      	str	r3, [r4, #68]	; 0x44
 800745a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800745c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007460:	9302      	str	r3, [sp, #8]
 8007462:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007464:	462a      	mov	r2, r5
 8007466:	4629      	mov	r1, r5
 8007468:	2043      	movs	r0, #67	; 0x43
 800746a:	f7fa faef 	bl	8001a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800746e:	2043      	movs	r0, #67	; 0x43
 8007470:	f7fa fb22 	bl	8001ab8 <HAL_NVIC_EnableIRQ>
}
 8007474:	e7c4      	b.n	8007400 <HAL_HCD_MspInit+0x18>
 8007476:	bf00      	nop
 8007478:	40023800 	.word	0x40023800
 800747c:	40020000 	.word	0x40020000

08007480 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007480:	b508      	push	{r3, lr}
  USBH_LL_IncTimer(hhcd->pData);
 8007482:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8007486:	f7ff f854 	bl	8006532 <USBH_LL_IncTimer>
}
 800748a:	bd08      	pop	{r3, pc}

0800748c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800748c:	b508      	push	{r3, lr}
  USBH_LL_Connect(hhcd->pData);
 800748e:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8007492:	f7ff f868 	bl	8006566 <USBH_LL_Connect>
}
 8007496:	bd08      	pop	{r3, pc}

08007498 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007498:	b508      	push	{r3, lr}
  USBH_LL_Disconnect(hhcd->pData);
 800749a:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 800749e:	f7ff f86c 	bl	800657a <USBH_LL_Disconnect>
}
 80074a2:	bd08      	pop	{r3, pc}

080074a4 <HAL_HCD_HC_NotifyURBChange_Callback>:
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80074a4:	4770      	bx	lr

080074a6 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80074a6:	b508      	push	{r3, lr}
  USBH_LL_PortEnabled(hhcd->pData);
 80074a8:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 80074ac:	f7ff f853 	bl	8006556 <USBH_LL_PortEnabled>
}
 80074b0:	bd08      	pop	{r3, pc}

080074b2 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80074b2:	b508      	push	{r3, lr}
  USBH_LL_PortDisabled(hhcd->pData);
 80074b4:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 80074b8:	f7ff f851 	bl	800655e <USBH_LL_PortDisabled>
}
 80074bc:	bd08      	pop	{r3, pc}
	...

080074c0 <USBH_LL_Init>:
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80074c0:	f890 33cc 	ldrb.w	r3, [r0, #972]	; 0x3cc
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d001      	beq.n	80074cc <USBH_LL_Init+0xc>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
  }
  return USBH_OK;
}
 80074c8:	2000      	movs	r0, #0
 80074ca:	4770      	bx	lr
{
 80074cc:	b510      	push	{r4, lr}
 80074ce:	4604      	mov	r4, r0
  hhcd_USB_OTG_FS.pData = phost;
 80074d0:	480f      	ldr	r0, [pc, #60]	; (8007510 <USBH_LL_Init+0x50>)
 80074d2:	f8c0 4300 	str.w	r4, [r0, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80074d6:	f8c4 03d0 	str.w	r0, [r4, #976]	; 0x3d0
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80074da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80074de:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80074e0:	2308      	movs	r3, #8
 80074e2:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80074e4:	2301      	movs	r3, #1
 80074e6:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80074e8:	2300      	movs	r3, #0
 80074ea:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80074ec:	2202      	movs	r2, #2
 80074ee:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80074f0:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80074f2:	f7fa fef2 	bl	80022da <HAL_HCD_Init>
 80074f6:	b940      	cbnz	r0, 800750a <USBH_LL_Init+0x4a>
  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80074f8:	4805      	ldr	r0, [pc, #20]	; (8007510 <USBH_LL_Init+0x50>)
 80074fa:	f7fb fc11 	bl	8002d20 <HAL_HCD_GetCurrentFrame>
 80074fe:	4601      	mov	r1, r0
 8007500:	4620      	mov	r0, r4
 8007502:	f7ff f813 	bl	800652c <USBH_LL_SetTimer>
}
 8007506:	2000      	movs	r0, #0
 8007508:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800750a:	f7f9 fc87 	bl	8000e1c <Error_Handler>
 800750e:	e7f3      	b.n	80074f8 <USBH_LL_Init+0x38>
 8007510:	20002be0 	.word	0x20002be0

08007514 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007514:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007516:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800751a:	f7fb fc06 	bl	8002d2a <HAL_HCD_GetCurrentSpeed>
 800751e:	b120      	cbz	r0, 800752a <USBH_LL_GetSpeed+0x16>
  case 1 :
    speed = USBH_SPEED_FULL;
    break;

  case 2 :
    speed = USBH_SPEED_LOW;
 8007520:	2802      	cmp	r0, #2
 8007522:	bf14      	ite	ne
 8007524:	2001      	movne	r0, #1
 8007526:	2002      	moveq	r0, #2
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 8007528:	bd08      	pop	{r3, pc}
    speed = USBH_SPEED_HIGH;
 800752a:	2000      	movs	r0, #0
 800752c:	e7fc      	b.n	8007528 <USBH_LL_GetSpeed+0x14>

0800752e <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800752e:	b508      	push	{r3, lr}
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007530:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8007534:	f7fb fbef 	bl	8002d16 <HAL_HCD_HC_GetXferCount>
}
 8007538:	bd08      	pop	{r3, pc}

0800753a <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800753a:	b508      	push	{r3, lr}
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800753c:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8007540:	f7fb fbe3 	bl	8002d0a <HAL_HCD_HC_GetURBState>
}
 8007544:	bd08      	pop	{r3, pc}

08007546 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007546:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 8007548:	f890 33cc 	ldrb.w	r3, [r0, #972]	; 0x3cc
 800754c:	2b01      	cmp	r3, #1
 800754e:	d004      	beq.n	800755a <USBH_LL_DriverVBUS+0x14>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007550:	20c8      	movs	r0, #200	; 0xc8
 8007552:	f7fa fa55 	bl	8001a00 <HAL_Delay>
  return USBH_OK;
}
 8007556:	2000      	movs	r0, #0
 8007558:	bd08      	pop	{r3, pc}
    MX_DriverVbusFS(state);
 800755a:	4608      	mov	r0, r1
 800755c:	f000 f87e 	bl	800765c <MX_DriverVbusFS>
 8007560:	e7f6      	b.n	8007550 <USBH_LL_DriverVBUS+0xa>

08007562 <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007562:	f8d0 33d0 	ldr.w	r3, [r0, #976]	; 0x3d0

  if(pHandle->hc[pipe].ep_is_in)
 8007566:	202c      	movs	r0, #44	; 0x2c
 8007568:	fb00 3001 	mla	r0, r0, r1, r3
 800756c:	f890 003b 	ldrb.w	r0, [r0, #59]	; 0x3b
 8007570:	b130      	cbz	r0, 8007580 <USBH_LL_SetToggle+0x1e>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007572:	202c      	movs	r0, #44	; 0x2c
 8007574:	fb00 3301 	mla	r3, r0, r1, r3
 8007578:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 800757c:	2000      	movs	r0, #0
 800757e:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 8007580:	202c      	movs	r0, #44	; 0x2c
 8007582:	fb00 3301 	mla	r3, r0, r1, r3
 8007586:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 800758a:	e7f7      	b.n	800757c <USBH_LL_SetToggle+0x1a>

0800758c <USBH_LL_GetToggle>:
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  uint8_t toggle = 0;
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800758c:	f8d0 33d0 	ldr.w	r3, [r0, #976]	; 0x3d0

  if(pHandle->hc[pipe].ep_is_in)
 8007590:	222c      	movs	r2, #44	; 0x2c
 8007592:	fb02 3201 	mla	r2, r2, r1, r3
 8007596:	f892 203b 	ldrb.w	r2, [r2, #59]	; 0x3b
 800759a:	b12a      	cbz	r2, 80075a8 <USBH_LL_GetToggle+0x1c>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800759c:	222c      	movs	r2, #44	; 0x2c
 800759e:	fb02 3301 	mla	r3, r2, r1, r3
 80075a2:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 80075a6:	4770      	bx	lr
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 80075a8:	222c      	movs	r2, #44	; 0x2c
 80075aa:	fb02 3301 	mla	r3, r2, r1, r3
 80075ae:	f893 0055 	ldrb.w	r0, [r3, #85]	; 0x55
  }
  return toggle;
}
 80075b2:	4770      	bx	lr

080075b4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80075b4:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 80075b6:	f7fa fa23 	bl	8001a00 <HAL_Delay>
}
 80075ba:	bd08      	pop	{r3, pc}

080075bc <USBH_Get_USB_Status>:
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBH_StatusTypeDef usb_status = USBH_OK;

  switch (hal_status)
 80075bc:	b120      	cbz	r0, 80075c8 <USBH_Get_USB_Status+0xc>
    break;
    case HAL_ERROR :
      usb_status = USBH_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80075be:	2802      	cmp	r0, #2
 80075c0:	bf14      	ite	ne
 80075c2:	2002      	movne	r0, #2
 80075c4:	2001      	moveq	r0, #1
 80075c6:	4770      	bx	lr
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 80075c8:	4770      	bx	lr

080075ca <USBH_LL_Start>:
{
 80075ca:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Start(phost->pData);
 80075cc:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80075d0:	f7fb fb6f 	bl	8002cb2 <HAL_HCD_Start>
  usb_status = USBH_Get_USB_Status(hal_status);
 80075d4:	f7ff fff2 	bl	80075bc <USBH_Get_USB_Status>
}
 80075d8:	bd08      	pop	{r3, pc}

080075da <USBH_LL_Stop>:
{
 80075da:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Stop(phost->pData);
 80075dc:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80075e0:	f7fb fb7c 	bl	8002cdc <HAL_HCD_Stop>
  usb_status = USBH_Get_USB_Status(hal_status);
 80075e4:	f7ff ffea 	bl	80075bc <USBH_Get_USB_Status>
}
 80075e8:	bd08      	pop	{r3, pc}

080075ea <USBH_LL_ResetPort>:
{
 80075ea:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_ResetPort(phost->pData);
 80075ec:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80075f0:	f7fb fb86 	bl	8002d00 <HAL_HCD_ResetPort>
  usb_status = USBH_Get_USB_Status(hal_status);
 80075f4:	f7ff ffe2 	bl	80075bc <USBH_Get_USB_Status>
}
 80075f8:	bd08      	pop	{r3, pc}

080075fa <USBH_LL_OpenPipe>:
{
 80075fa:	b510      	push	{r4, lr}
 80075fc:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80075fe:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8007602:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8007606:	9402      	str	r4, [sp, #8]
 8007608:	f89d 401c 	ldrb.w	r4, [sp, #28]
 800760c:	9401      	str	r4, [sp, #4]
 800760e:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8007612:	9400      	str	r4, [sp, #0]
 8007614:	f7fa fe1a 	bl	800224c <HAL_HCD_HC_Init>
  usb_status = USBH_Get_USB_Status(hal_status);
 8007618:	f7ff ffd0 	bl	80075bc <USBH_Get_USB_Status>
}
 800761c:	b004      	add	sp, #16
 800761e:	bd10      	pop	{r4, pc}

08007620 <USBH_LL_ClosePipe>:
{
 8007620:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007622:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8007626:	f7fa fe46 	bl	80022b6 <HAL_HCD_HC_Halt>
  usb_status = USBH_Get_USB_Status(hal_status);
 800762a:	f7ff ffc7 	bl	80075bc <USBH_Get_USB_Status>
}
 800762e:	bd08      	pop	{r3, pc}

08007630 <USBH_LL_SubmitURB>:
{
 8007630:	b510      	push	{r4, lr}
 8007632:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007634:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8007638:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 800763c:	9403      	str	r4, [sp, #12]
 800763e:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8007642:	9402      	str	r4, [sp, #8]
 8007644:	9c07      	ldr	r4, [sp, #28]
 8007646:	9401      	str	r4, [sp, #4]
 8007648:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800764c:	9400      	str	r4, [sp, #0]
 800764e:	f7fa fe96 	bl	800237e <HAL_HCD_HC_SubmitRequest>
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007652:	f7ff ffb3 	bl	80075bc <USBH_Get_USB_Status>
}
 8007656:	b004      	add	sp, #16
 8007658:	bd10      	pop	{r4, pc}
	...

0800765c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800765c:	b508      	push	{r3, lr}
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 800765e:	1e02      	subs	r2, r0, #0
 8007660:	bf18      	it	ne
 8007662:	2201      	movne	r2, #1
 8007664:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007668:	4801      	ldr	r0, [pc, #4]	; (8007670 <MX_DriverVbusFS+0x14>)
 800766a:	f7fa fde9 	bl	8002240 <HAL_GPIO_WritePin>
}
 800766e:	bd08      	pop	{r3, pc}
 8007670:	40020800 	.word	0x40020800

08007674 <__errno>:
 8007674:	4b01      	ldr	r3, [pc, #4]	; (800767c <__errno+0x8>)
 8007676:	6818      	ldr	r0, [r3, #0]
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	20000234 	.word	0x20000234

08007680 <__libc_init_array>:
 8007680:	b570      	push	{r4, r5, r6, lr}
 8007682:	4d0d      	ldr	r5, [pc, #52]	; (80076b8 <__libc_init_array+0x38>)
 8007684:	4c0d      	ldr	r4, [pc, #52]	; (80076bc <__libc_init_array+0x3c>)
 8007686:	1b64      	subs	r4, r4, r5
 8007688:	10a4      	asrs	r4, r4, #2
 800768a:	2600      	movs	r6, #0
 800768c:	42a6      	cmp	r6, r4
 800768e:	d109      	bne.n	80076a4 <__libc_init_array+0x24>
 8007690:	4d0b      	ldr	r5, [pc, #44]	; (80076c0 <__libc_init_array+0x40>)
 8007692:	4c0c      	ldr	r4, [pc, #48]	; (80076c4 <__libc_init_array+0x44>)
 8007694:	f000 f93c 	bl	8007910 <_init>
 8007698:	1b64      	subs	r4, r4, r5
 800769a:	10a4      	asrs	r4, r4, #2
 800769c:	2600      	movs	r6, #0
 800769e:	42a6      	cmp	r6, r4
 80076a0:	d105      	bne.n	80076ae <__libc_init_array+0x2e>
 80076a2:	bd70      	pop	{r4, r5, r6, pc}
 80076a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80076a8:	4798      	blx	r3
 80076aa:	3601      	adds	r6, #1
 80076ac:	e7ee      	b.n	800768c <__libc_init_array+0xc>
 80076ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80076b2:	4798      	blx	r3
 80076b4:	3601      	adds	r6, #1
 80076b6:	e7f2      	b.n	800769e <__libc_init_array+0x1e>
 80076b8:	08007a88 	.word	0x08007a88
 80076bc:	08007a88 	.word	0x08007a88
 80076c0:	08007a88 	.word	0x08007a88
 80076c4:	08007a8c 	.word	0x08007a8c

080076c8 <malloc>:
 80076c8:	4b02      	ldr	r3, [pc, #8]	; (80076d4 <malloc+0xc>)
 80076ca:	4601      	mov	r1, r0
 80076cc:	6818      	ldr	r0, [r3, #0]
 80076ce:	f000 b88d 	b.w	80077ec <_malloc_r>
 80076d2:	bf00      	nop
 80076d4:	20000234 	.word	0x20000234

080076d8 <free>:
 80076d8:	4b02      	ldr	r3, [pc, #8]	; (80076e4 <free+0xc>)
 80076da:	4601      	mov	r1, r0
 80076dc:	6818      	ldr	r0, [r3, #0]
 80076de:	f000 b819 	b.w	8007714 <_free_r>
 80076e2:	bf00      	nop
 80076e4:	20000234 	.word	0x20000234

080076e8 <memcpy>:
 80076e8:	440a      	add	r2, r1
 80076ea:	4291      	cmp	r1, r2
 80076ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80076f0:	d100      	bne.n	80076f4 <memcpy+0xc>
 80076f2:	4770      	bx	lr
 80076f4:	b510      	push	{r4, lr}
 80076f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076fe:	4291      	cmp	r1, r2
 8007700:	d1f9      	bne.n	80076f6 <memcpy+0xe>
 8007702:	bd10      	pop	{r4, pc}

08007704 <memset>:
 8007704:	4402      	add	r2, r0
 8007706:	4603      	mov	r3, r0
 8007708:	4293      	cmp	r3, r2
 800770a:	d100      	bne.n	800770e <memset+0xa>
 800770c:	4770      	bx	lr
 800770e:	f803 1b01 	strb.w	r1, [r3], #1
 8007712:	e7f9      	b.n	8007708 <memset+0x4>

08007714 <_free_r>:
 8007714:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007716:	2900      	cmp	r1, #0
 8007718:	d044      	beq.n	80077a4 <_free_r+0x90>
 800771a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800771e:	9001      	str	r0, [sp, #4]
 8007720:	2b00      	cmp	r3, #0
 8007722:	f1a1 0404 	sub.w	r4, r1, #4
 8007726:	bfb8      	it	lt
 8007728:	18e4      	addlt	r4, r4, r3
 800772a:	f000 f8e3 	bl	80078f4 <__malloc_lock>
 800772e:	4a1e      	ldr	r2, [pc, #120]	; (80077a8 <_free_r+0x94>)
 8007730:	9801      	ldr	r0, [sp, #4]
 8007732:	6813      	ldr	r3, [r2, #0]
 8007734:	b933      	cbnz	r3, 8007744 <_free_r+0x30>
 8007736:	6063      	str	r3, [r4, #4]
 8007738:	6014      	str	r4, [r2, #0]
 800773a:	b003      	add	sp, #12
 800773c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007740:	f000 b8de 	b.w	8007900 <__malloc_unlock>
 8007744:	42a3      	cmp	r3, r4
 8007746:	d908      	bls.n	800775a <_free_r+0x46>
 8007748:	6825      	ldr	r5, [r4, #0]
 800774a:	1961      	adds	r1, r4, r5
 800774c:	428b      	cmp	r3, r1
 800774e:	bf01      	itttt	eq
 8007750:	6819      	ldreq	r1, [r3, #0]
 8007752:	685b      	ldreq	r3, [r3, #4]
 8007754:	1949      	addeq	r1, r1, r5
 8007756:	6021      	streq	r1, [r4, #0]
 8007758:	e7ed      	b.n	8007736 <_free_r+0x22>
 800775a:	461a      	mov	r2, r3
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	b10b      	cbz	r3, 8007764 <_free_r+0x50>
 8007760:	42a3      	cmp	r3, r4
 8007762:	d9fa      	bls.n	800775a <_free_r+0x46>
 8007764:	6811      	ldr	r1, [r2, #0]
 8007766:	1855      	adds	r5, r2, r1
 8007768:	42a5      	cmp	r5, r4
 800776a:	d10b      	bne.n	8007784 <_free_r+0x70>
 800776c:	6824      	ldr	r4, [r4, #0]
 800776e:	4421      	add	r1, r4
 8007770:	1854      	adds	r4, r2, r1
 8007772:	42a3      	cmp	r3, r4
 8007774:	6011      	str	r1, [r2, #0]
 8007776:	d1e0      	bne.n	800773a <_free_r+0x26>
 8007778:	681c      	ldr	r4, [r3, #0]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	6053      	str	r3, [r2, #4]
 800777e:	4421      	add	r1, r4
 8007780:	6011      	str	r1, [r2, #0]
 8007782:	e7da      	b.n	800773a <_free_r+0x26>
 8007784:	d902      	bls.n	800778c <_free_r+0x78>
 8007786:	230c      	movs	r3, #12
 8007788:	6003      	str	r3, [r0, #0]
 800778a:	e7d6      	b.n	800773a <_free_r+0x26>
 800778c:	6825      	ldr	r5, [r4, #0]
 800778e:	1961      	adds	r1, r4, r5
 8007790:	428b      	cmp	r3, r1
 8007792:	bf04      	itt	eq
 8007794:	6819      	ldreq	r1, [r3, #0]
 8007796:	685b      	ldreq	r3, [r3, #4]
 8007798:	6063      	str	r3, [r4, #4]
 800779a:	bf04      	itt	eq
 800779c:	1949      	addeq	r1, r1, r5
 800779e:	6021      	streq	r1, [r4, #0]
 80077a0:	6054      	str	r4, [r2, #4]
 80077a2:	e7ca      	b.n	800773a <_free_r+0x26>
 80077a4:	b003      	add	sp, #12
 80077a6:	bd30      	pop	{r4, r5, pc}
 80077a8:	20002ee4 	.word	0x20002ee4

080077ac <sbrk_aligned>:
 80077ac:	b570      	push	{r4, r5, r6, lr}
 80077ae:	4e0e      	ldr	r6, [pc, #56]	; (80077e8 <sbrk_aligned+0x3c>)
 80077b0:	460c      	mov	r4, r1
 80077b2:	6831      	ldr	r1, [r6, #0]
 80077b4:	4605      	mov	r5, r0
 80077b6:	b911      	cbnz	r1, 80077be <sbrk_aligned+0x12>
 80077b8:	f000 f88c 	bl	80078d4 <_sbrk_r>
 80077bc:	6030      	str	r0, [r6, #0]
 80077be:	4621      	mov	r1, r4
 80077c0:	4628      	mov	r0, r5
 80077c2:	f000 f887 	bl	80078d4 <_sbrk_r>
 80077c6:	1c43      	adds	r3, r0, #1
 80077c8:	d00a      	beq.n	80077e0 <sbrk_aligned+0x34>
 80077ca:	1cc4      	adds	r4, r0, #3
 80077cc:	f024 0403 	bic.w	r4, r4, #3
 80077d0:	42a0      	cmp	r0, r4
 80077d2:	d007      	beq.n	80077e4 <sbrk_aligned+0x38>
 80077d4:	1a21      	subs	r1, r4, r0
 80077d6:	4628      	mov	r0, r5
 80077d8:	f000 f87c 	bl	80078d4 <_sbrk_r>
 80077dc:	3001      	adds	r0, #1
 80077de:	d101      	bne.n	80077e4 <sbrk_aligned+0x38>
 80077e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80077e4:	4620      	mov	r0, r4
 80077e6:	bd70      	pop	{r4, r5, r6, pc}
 80077e8:	20002ee8 	.word	0x20002ee8

080077ec <_malloc_r>:
 80077ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077f0:	1ccd      	adds	r5, r1, #3
 80077f2:	f025 0503 	bic.w	r5, r5, #3
 80077f6:	3508      	adds	r5, #8
 80077f8:	2d0c      	cmp	r5, #12
 80077fa:	bf38      	it	cc
 80077fc:	250c      	movcc	r5, #12
 80077fe:	2d00      	cmp	r5, #0
 8007800:	4607      	mov	r7, r0
 8007802:	db01      	blt.n	8007808 <_malloc_r+0x1c>
 8007804:	42a9      	cmp	r1, r5
 8007806:	d905      	bls.n	8007814 <_malloc_r+0x28>
 8007808:	230c      	movs	r3, #12
 800780a:	603b      	str	r3, [r7, #0]
 800780c:	2600      	movs	r6, #0
 800780e:	4630      	mov	r0, r6
 8007810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007814:	4e2e      	ldr	r6, [pc, #184]	; (80078d0 <_malloc_r+0xe4>)
 8007816:	f000 f86d 	bl	80078f4 <__malloc_lock>
 800781a:	6833      	ldr	r3, [r6, #0]
 800781c:	461c      	mov	r4, r3
 800781e:	bb34      	cbnz	r4, 800786e <_malloc_r+0x82>
 8007820:	4629      	mov	r1, r5
 8007822:	4638      	mov	r0, r7
 8007824:	f7ff ffc2 	bl	80077ac <sbrk_aligned>
 8007828:	1c43      	adds	r3, r0, #1
 800782a:	4604      	mov	r4, r0
 800782c:	d14d      	bne.n	80078ca <_malloc_r+0xde>
 800782e:	6834      	ldr	r4, [r6, #0]
 8007830:	4626      	mov	r6, r4
 8007832:	2e00      	cmp	r6, #0
 8007834:	d140      	bne.n	80078b8 <_malloc_r+0xcc>
 8007836:	6823      	ldr	r3, [r4, #0]
 8007838:	4631      	mov	r1, r6
 800783a:	4638      	mov	r0, r7
 800783c:	eb04 0803 	add.w	r8, r4, r3
 8007840:	f000 f848 	bl	80078d4 <_sbrk_r>
 8007844:	4580      	cmp	r8, r0
 8007846:	d13a      	bne.n	80078be <_malloc_r+0xd2>
 8007848:	6821      	ldr	r1, [r4, #0]
 800784a:	3503      	adds	r5, #3
 800784c:	1a6d      	subs	r5, r5, r1
 800784e:	f025 0503 	bic.w	r5, r5, #3
 8007852:	3508      	adds	r5, #8
 8007854:	2d0c      	cmp	r5, #12
 8007856:	bf38      	it	cc
 8007858:	250c      	movcc	r5, #12
 800785a:	4629      	mov	r1, r5
 800785c:	4638      	mov	r0, r7
 800785e:	f7ff ffa5 	bl	80077ac <sbrk_aligned>
 8007862:	3001      	adds	r0, #1
 8007864:	d02b      	beq.n	80078be <_malloc_r+0xd2>
 8007866:	6823      	ldr	r3, [r4, #0]
 8007868:	442b      	add	r3, r5
 800786a:	6023      	str	r3, [r4, #0]
 800786c:	e00e      	b.n	800788c <_malloc_r+0xa0>
 800786e:	6822      	ldr	r2, [r4, #0]
 8007870:	1b52      	subs	r2, r2, r5
 8007872:	d41e      	bmi.n	80078b2 <_malloc_r+0xc6>
 8007874:	2a0b      	cmp	r2, #11
 8007876:	d916      	bls.n	80078a6 <_malloc_r+0xba>
 8007878:	1961      	adds	r1, r4, r5
 800787a:	42a3      	cmp	r3, r4
 800787c:	6025      	str	r5, [r4, #0]
 800787e:	bf18      	it	ne
 8007880:	6059      	strne	r1, [r3, #4]
 8007882:	6863      	ldr	r3, [r4, #4]
 8007884:	bf08      	it	eq
 8007886:	6031      	streq	r1, [r6, #0]
 8007888:	5162      	str	r2, [r4, r5]
 800788a:	604b      	str	r3, [r1, #4]
 800788c:	4638      	mov	r0, r7
 800788e:	f104 060b 	add.w	r6, r4, #11
 8007892:	f000 f835 	bl	8007900 <__malloc_unlock>
 8007896:	f026 0607 	bic.w	r6, r6, #7
 800789a:	1d23      	adds	r3, r4, #4
 800789c:	1af2      	subs	r2, r6, r3
 800789e:	d0b6      	beq.n	800780e <_malloc_r+0x22>
 80078a0:	1b9b      	subs	r3, r3, r6
 80078a2:	50a3      	str	r3, [r4, r2]
 80078a4:	e7b3      	b.n	800780e <_malloc_r+0x22>
 80078a6:	6862      	ldr	r2, [r4, #4]
 80078a8:	42a3      	cmp	r3, r4
 80078aa:	bf0c      	ite	eq
 80078ac:	6032      	streq	r2, [r6, #0]
 80078ae:	605a      	strne	r2, [r3, #4]
 80078b0:	e7ec      	b.n	800788c <_malloc_r+0xa0>
 80078b2:	4623      	mov	r3, r4
 80078b4:	6864      	ldr	r4, [r4, #4]
 80078b6:	e7b2      	b.n	800781e <_malloc_r+0x32>
 80078b8:	4634      	mov	r4, r6
 80078ba:	6876      	ldr	r6, [r6, #4]
 80078bc:	e7b9      	b.n	8007832 <_malloc_r+0x46>
 80078be:	230c      	movs	r3, #12
 80078c0:	603b      	str	r3, [r7, #0]
 80078c2:	4638      	mov	r0, r7
 80078c4:	f000 f81c 	bl	8007900 <__malloc_unlock>
 80078c8:	e7a1      	b.n	800780e <_malloc_r+0x22>
 80078ca:	6025      	str	r5, [r4, #0]
 80078cc:	e7de      	b.n	800788c <_malloc_r+0xa0>
 80078ce:	bf00      	nop
 80078d0:	20002ee4 	.word	0x20002ee4

080078d4 <_sbrk_r>:
 80078d4:	b538      	push	{r3, r4, r5, lr}
 80078d6:	4d06      	ldr	r5, [pc, #24]	; (80078f0 <_sbrk_r+0x1c>)
 80078d8:	2300      	movs	r3, #0
 80078da:	4604      	mov	r4, r0
 80078dc:	4608      	mov	r0, r1
 80078de:	602b      	str	r3, [r5, #0]
 80078e0:	f7f9 fc66 	bl	80011b0 <_sbrk>
 80078e4:	1c43      	adds	r3, r0, #1
 80078e6:	d102      	bne.n	80078ee <_sbrk_r+0x1a>
 80078e8:	682b      	ldr	r3, [r5, #0]
 80078ea:	b103      	cbz	r3, 80078ee <_sbrk_r+0x1a>
 80078ec:	6023      	str	r3, [r4, #0]
 80078ee:	bd38      	pop	{r3, r4, r5, pc}
 80078f0:	20002eec 	.word	0x20002eec

080078f4 <__malloc_lock>:
 80078f4:	4801      	ldr	r0, [pc, #4]	; (80078fc <__malloc_lock+0x8>)
 80078f6:	f000 b809 	b.w	800790c <__retarget_lock_acquire_recursive>
 80078fa:	bf00      	nop
 80078fc:	20002ef0 	.word	0x20002ef0

08007900 <__malloc_unlock>:
 8007900:	4801      	ldr	r0, [pc, #4]	; (8007908 <__malloc_unlock+0x8>)
 8007902:	f000 b804 	b.w	800790e <__retarget_lock_release_recursive>
 8007906:	bf00      	nop
 8007908:	20002ef0 	.word	0x20002ef0

0800790c <__retarget_lock_acquire_recursive>:
 800790c:	4770      	bx	lr

0800790e <__retarget_lock_release_recursive>:
 800790e:	4770      	bx	lr

08007910 <_init>:
 8007910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007912:	bf00      	nop
 8007914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007916:	bc08      	pop	{r3}
 8007918:	469e      	mov	lr, r3
 800791a:	4770      	bx	lr

0800791c <_fini>:
 800791c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791e:	bf00      	nop
 8007920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007922:	bc08      	pop	{r3}
 8007924:	469e      	mov	lr, r3
 8007926:	4770      	bx	lr
