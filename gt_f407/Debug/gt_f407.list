
gt_f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b750  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800b8d8  0800b8d8  0001b8d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b970  0800b970  000202c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b970  0800b970  0001b970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b978  0800b978  000202c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b978  0800b978  0001b978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b97c  0800b97c  0001b97c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c8  20000000  0800b980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202c8  2**0
                  CONTENTS
 10 .bss          00003688  200002c8  200002c8  000202c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003950  20003950  000202c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fba2  00000000  00000000  000202f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004fb6  00000000  00000000  0003fe9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001530  00000000  00000000  00044e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001350  00000000  00000000  00046380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002691e  00000000  00000000  000476d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f8ad  00000000  00000000  0006dfee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdd42  00000000  00000000  0008d89b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015b5dd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005804  00000000  00000000  0015b630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200002c8 	.word	0x200002c8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b8c0 	.word	0x0800b8c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200002cc 	.word	0x200002cc
 80001c4:	0800b8c0 	.word	0x0800b8c0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	603a      	str	r2, [r7, #0]
 80004d6:	80fb      	strh	r3, [r7, #6]
 80004d8:	460b      	mov	r3, r1
 80004da:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 80004dc:	2300      	movs	r3, #0
 80004de:	73fb      	strb	r3, [r7, #15]
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 80004e0:	2200      	movs	r2, #0
 80004e2:	6839      	ldr	r1, [r7, #0]
 80004e4:	481c      	ldr	r0, [pc, #112]	; (8000558 <AUDIO_OUT_Init+0x8c>)
 80004e6:	f000 f863 	bl	80005b0 <AUDIO_OUT_ClockConfig>
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  hAudioOutI2s.Instance = I2S3;
 80004ea:	4b1b      	ldr	r3, [pc, #108]	; (8000558 <AUDIO_OUT_Init+0x8c>)
 80004ec:	4a1b      	ldr	r2, [pc, #108]	; (800055c <AUDIO_OUT_Init+0x90>)
 80004ee:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 80004f0:	4819      	ldr	r0, [pc, #100]	; (8000558 <AUDIO_OUT_Init+0x8c>)
 80004f2:	f005 fd15 	bl	8005f20 <HAL_I2S_GetState>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d103      	bne.n	8000504 <AUDIO_OUT_Init+0x38>
  {
    /* Init the I2S MSP: this __weak function can be redefined by the application*/
    AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 80004fc:	2100      	movs	r1, #0
 80004fe:	4816      	ldr	r0, [pc, #88]	; (8000558 <AUDIO_OUT_Init+0x8c>)
 8000500:	f000 f8b0 	bl	8000664 <AUDIO_OUT_MspInit>
  }

  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  /* Configure the I2S peripheral */
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 8000504:	6838      	ldr	r0, [r7, #0]
 8000506:	f000 f977 	bl	80007f8 <I2S3_Init>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 8000510:	2301      	movs	r3, #1
 8000512:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 8000514:	7bfb      	ldrb	r3, [r7, #15]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d10e      	bne.n	8000538 <AUDIO_OUT_Init+0x6c>
  {
    /* Retieve audio codec identifier */
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 800051a:	4b11      	ldr	r3, [pc, #68]	; (8000560 <AUDIO_OUT_Init+0x94>)
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	2094      	movs	r0, #148	; 0x94
 8000520:	4798      	blx	r3
 8000522:	4603      	mov	r3, r0
 8000524:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8000528:	2be0      	cmp	r3, #224	; 0xe0
 800052a:	d103      	bne.n	8000534 <AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv; 
 800052c:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <AUDIO_OUT_Init+0x98>)
 800052e:	4a0c      	ldr	r2, [pc, #48]	; (8000560 <AUDIO_OUT_Init+0x94>)
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	e001      	b.n	8000538 <AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 8000534:	2301      	movs	r3, #1
 8000536:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 8000538:	7bfb      	ldrb	r3, [r7, #15]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d107      	bne.n	800054e <AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <AUDIO_OUT_Init+0x98>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	681c      	ldr	r4, [r3, #0]
 8000544:	797a      	ldrb	r2, [r7, #5]
 8000546:	88f9      	ldrh	r1, [r7, #6]
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	2094      	movs	r0, #148	; 0x94
 800054c:	47a0      	blx	r4
  }
  
  return ret;
 800054e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000550:	4618      	mov	r0, r3
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	bd90      	pop	{r4, r7, pc}
 8000558:	200002e8 	.word	0x200002e8
 800055c:	40003c00 	.word	0x40003c00
 8000560:	20000004 	.word	0x20000004
 8000564:	200002e4 	.word	0x200002e4

08000568 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a04      	ldr	r2, [pc, #16]	; (8000588 <HAL_I2S_TxCpltCallback+0x20>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d101      	bne.n	800057e <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    AUDIO_OUT_TransferComplete_CallBack();
 800057a:	f000 ffad 	bl	80014d8 <AUDIO_OUT_TransferComplete_CallBack>
  }
}
 800057e:	bf00      	nop
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40003c00 	.word	0x40003c00

0800058c <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a04      	ldr	r2, [pc, #16]	; (80005ac <HAL_I2S_TxHalfCpltCallback+0x20>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d101      	bne.n	80005a2 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    AUDIO_OUT_HalfTransfer_CallBack();
 800059e:	f000 ff85 	bl	80014ac <AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40003c00 	.word	0x40003c00

080005b0 <AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	; 0x28
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 80005bc:	2300      	movs	r3, #0
 80005be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80005c2:	23ff      	movs	r3, #255	; 0xff
 80005c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
  for(index = 0; index < 8; index++)
 80005c8:	2300      	movs	r3, #0
 80005ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80005ce:	e010      	b.n	80005f2 <AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 80005d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005d4:	4a20      	ldr	r2, [pc, #128]	; (8000658 <AUDIO_OUT_ClockConfig+0xa8>)
 80005d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d103      	bne.n	80005e8 <AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 80005e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  for(index = 0; index < 8; index++)
 80005e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005ec:	3301      	adds	r3, #1
 80005ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80005f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005f6:	2b07      	cmp	r3, #7
 80005f8:	d9ea      	bls.n	80005d0 <AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4618      	mov	r0, r3
 8000600:	f006 fddc 	bl	80071bc <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8000604:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000608:	f003 0307 	and.w	r3, r3, #7
 800060c:	2b00      	cmp	r3, #0
 800060e:	d113      	bne.n	8000638 <AUDIO_OUT_ClockConfig+0x88>
  {
    /* I2S clock config 
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000610:	2301      	movs	r3, #1
 8000612:	617b      	str	r3, [r7, #20]
//    rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8000614:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000618:	4a10      	ldr	r2, [pc, #64]	; (800065c <AUDIO_OUT_ClockConfig+0xac>)
 800061a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800061e:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8000620:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000624:	4a0e      	ldr	r2, [pc, #56]	; (8000660 <AUDIO_OUT_ClockConfig+0xb0>)
 8000626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800062a:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4618      	mov	r0, r3
 8000632:	f006 fce1 	bl	8006ff8 <HAL_RCCEx_PeriphCLKConfig>
//    rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 8000636:	e00b      	b.n	8000650 <AUDIO_OUT_ClockConfig+0xa0>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000638:	2301      	movs	r3, #1
 800063a:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 800063c:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000640:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8000642:	2303      	movs	r3, #3
 8000644:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4618      	mov	r0, r3
 800064c:	f006 fcd4 	bl	8006ff8 <HAL_RCCEx_PeriphCLKConfig>
}
 8000650:	bf00      	nop
 8000652:	3728      	adds	r7, #40	; 0x28
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	0800b8dc 	.word	0x0800b8dc
 800065c:	0800b8fc 	.word	0x0800b8fc
 8000660:	0800b91c 	.word	0x0800b91c

08000664 <AUDIO_OUT_MspInit>:
  * @brief  AUDIO OUT I2S MSP Init.
  * @param  hi2s: might be required to set audio peripheral predivider if any.
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08c      	sub	sp, #48	; 0x30
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	61bb      	str	r3, [r7, #24]
 8000672:	4b57      	ldr	r3, [pc, #348]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 8000674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000676:	4a56      	ldr	r2, [pc, #344]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 8000678:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800067c:	6413      	str	r3, [r2, #64]	; 0x40
 800067e:	4b54      	ldr	r3, [pc, #336]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 8000680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000682:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000686:	61bb      	str	r3, [r7, #24]
 8000688:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/  
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
 800068e:	4b50      	ldr	r3, [pc, #320]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a4f      	ldr	r2, [pc, #316]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b4d      	ldr	r3, [pc, #308]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	617b      	str	r3, [r7, #20]
 80006a4:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
 80006aa:	4b49      	ldr	r3, [pc, #292]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a48      	ldr	r2, [pc, #288]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b46      	ldr	r3, [pc, #280]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]

  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 80006c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 80006c8:	2302      	movs	r3, #2
 80006ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 80006d0:	2302      	movs	r3, #2
 80006d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 80006d4:	2306      	movs	r3, #6
 80006d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4619      	mov	r1, r3
 80006de:	483d      	ldr	r0, [pc, #244]	; (80007d4 <AUDIO_OUT_MspInit+0x170>)
 80006e0:	f002 fadc 	bl	8002c9c <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 80006e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	4619      	mov	r1, r3
 80006f0:	4839      	ldr	r0, [pc, #228]	; (80007d8 <AUDIO_OUT_MspInit+0x174>)
 80006f2:	f002 fad3 	bl	8002c9c <HAL_GPIO_Init>

  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	4b35      	ldr	r3, [pc, #212]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a34      	ldr	r2, [pc, #208]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b32      	ldr	r3, [pc, #200]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 8000712:	2380      	movs	r3, #128	; 0x80
 8000714:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	4619      	mov	r1, r3
 800071c:	482d      	ldr	r0, [pc, #180]	; (80007d4 <AUDIO_OUT_MspInit+0x170>)
 800071e:	f002 fabd 	bl	8002c9c <HAL_GPIO_Init>

  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE(); 
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a29      	ldr	r2, [pc, #164]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 800072c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b27      	ldr	r3, [pc, #156]	; (80007d0 <AUDIO_OUT_MspInit+0x16c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a26      	ldr	r2, [pc, #152]	; (80007dc <AUDIO_OUT_MspInit+0x178>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d136      	bne.n	80007b6 <AUDIO_OUT_MspInit+0x152>
  {
    /* Configure the hdma_i2sTx handle parameters */   
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 8000748:	4b25      	ldr	r3, [pc, #148]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 800074a:	2200      	movs	r2, #0
 800074c:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800074e:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 8000750:	2240      	movs	r2, #64	; 0x40
 8000752:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000754:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 800075a:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 800075c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000760:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 8000762:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 8000764:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000768:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 800076a:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 800076c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000770:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 8000772:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 8000774:	2200      	movs	r2, #0
 8000776:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000778:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 800077a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800077e:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8000780:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 8000782:	2204      	movs	r2, #4
 8000784:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 8000788:	2203      	movs	r2, #3
 800078a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 800078e:	2200      	movs	r2, #0
 8000790:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 8000794:	2200      	movs	r2, #0
 8000796:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 800079a:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <AUDIO_OUT_MspInit+0x180>)
 800079c:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 80007a2:	639a      	str	r2, [r3, #56]	; 0x38
 80007a4:	4a0e      	ldr	r2, [pc, #56]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 80007aa:	480d      	ldr	r0, [pc, #52]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 80007ac:	f001 ff56 	bl	800265c <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 80007b0:	480b      	ldr	r0, [pc, #44]	; (80007e0 <AUDIO_OUT_MspInit+0x17c>)
 80007b2:	f001 fea5 	bl	8002500 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	210e      	movs	r1, #14
 80007ba:	202f      	movs	r0, #47	; 0x2f
 80007bc:	f001 fe69 	bl	8002492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);  
 80007c0:	202f      	movs	r0, #47	; 0x2f
 80007c2:	f001 fe82 	bl	80024ca <HAL_NVIC_EnableIRQ>
}
 80007c6:	bf00      	nop
 80007c8:	3730      	adds	r7, #48	; 0x30
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020800 	.word	0x40020800
 80007d8:	40020000 	.word	0x40020000
 80007dc:	40003c00 	.word	0x40003c00
 80007e0:	20000330 	.word	0x20000330
 80007e4:	400260b8 	.word	0x400260b8

080007e8 <AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void AUDIO_OUT_Error_CallBack(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
	...

080007f8 <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 8000800:	4b17      	ldr	r3, [pc, #92]	; (8000860 <I2S3_Init+0x68>)
 8000802:	4a18      	ldr	r2, [pc, #96]	; (8000864 <I2S3_Init+0x6c>)
 8000804:	601a      	str	r2, [r3, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <I2S3_Init+0x68>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	69da      	ldr	r2, [r3, #28]
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <I2S3_Init+0x68>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000814:	61da      	str	r2, [r3, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 8000816:	4a12      	ldr	r2, [pc, #72]	; (8000860 <I2S3_Init+0x68>)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 800081c:	4b10      	ldr	r3, [pc, #64]	; (8000860 <I2S3_Init+0x68>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <I2S3_Init+0x68>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000828:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <I2S3_Init+0x68>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <I2S3_Init+0x68>)
 8000830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000834:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 8000836:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <I2S3_Init+0x68>)
 8000838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800083c:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <I2S3_Init+0x68>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 8000844:	4806      	ldr	r0, [pc, #24]	; (8000860 <I2S3_Init+0x68>)
 8000846:	f005 f8c7 	bl	80059d8 <HAL_I2S_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <I2S3_Init+0x5c>
  {
    return AUDIO_ERROR;
 8000850:	2301      	movs	r3, #1
 8000852:	e000      	b.n	8000856 <I2S3_Init+0x5e>
  }
  else
  {
    return AUDIO_OK;
 8000854:	2300      	movs	r3, #0
  }
}
 8000856:	4618      	mov	r0, r3
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200002e8 	.word	0x200002e8
 8000864:	40003c00 	.word	0x40003c00

08000868 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a04      	ldr	r2, [pc, #16]	; (8000888 <HAL_I2S_ErrorCallback+0x20>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d101      	bne.n	800087e <HAL_I2S_ErrorCallback+0x16>
  {
    AUDIO_OUT_Error_CallBack();
 800087a:	f7ff ffb5 	bl	80007e8 <AUDIO_OUT_Error_CallBack>
  }
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40003c00 	.word	0x40003c00

0800088c <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8000890:	4814      	ldr	r0, [pc, #80]	; (80008e4 <I2Cx_Init+0x58>)
 8000892:	f004 fd37 	bl	8005304 <HAL_I2C_GetState>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d121      	bne.n	80008e0 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = AUDIO_I2Cx;
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <I2Cx_Init+0x58>)
 800089e:	4a12      	ldr	r2, [pc, #72]	; (80008e8 <I2Cx_Init+0x5c>)
 80008a0:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <I2Cx_Init+0x58>)
 80008a4:	2243      	movs	r2, #67	; 0x43
 80008a6:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 80008a8:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <I2Cx_Init+0x58>)
 80008aa:	4a10      	ldr	r2, [pc, #64]	; (80008ec <I2Cx_Init+0x60>)
 80008ac:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008ae:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <I2Cx_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b4:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <I2Cx_Init+0x58>)
 80008b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008ba:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <I2Cx_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <I2Cx_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <I2Cx_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 80008ce:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <I2Cx_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80008d4:	4803      	ldr	r0, [pc, #12]	; (80008e4 <I2Cx_Init+0x58>)
 80008d6:	f000 f86b 	bl	80009b0 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80008da:	4802      	ldr	r0, [pc, #8]	; (80008e4 <I2Cx_Init+0x58>)
 80008dc:	f004 f87e 	bl	80049dc <HAL_I2C_Init>
  }
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000390 	.word	0x20000390
 80008e8:	40005400 	.word	0x40005400
 80008ec:	000186a0 	.word	0x000186a0

080008f0 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b088      	sub	sp, #32
 80008f4:	af04      	add	r7, sp, #16
 80008f6:	4603      	mov	r3, r0
 80008f8:	80fb      	strh	r3, [r7, #6]
 80008fa:	460b      	mov	r3, r1
 80008fc:	717b      	strb	r3, [r7, #5]
 80008fe:	4613      	mov	r3, r2
 8000900:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000902:	2300      	movs	r3, #0
 8000904:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8000906:	797b      	ldrb	r3, [r7, #5]
 8000908:	b29a      	uxth	r2, r3
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <I2Cx_WriteData+0x48>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	88f9      	ldrh	r1, [r7, #6]
 8000910:	9302      	str	r3, [sp, #8]
 8000912:	2301      	movs	r3, #1
 8000914:	9301      	str	r3, [sp, #4]
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	9300      	str	r3, [sp, #0]
 800091a:	2301      	movs	r3, #1
 800091c:	4807      	ldr	r0, [pc, #28]	; (800093c <I2Cx_WriteData+0x4c>)
 800091e:	f004 f9d1 	bl	8004cc4 <HAL_I2C_Mem_Write>
 8000922:	4603      	mov	r3, r0
 8000924:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 800092c:	f000 f834 	bl	8000998 <I2Cx_Error>
  }
}
 8000930:	bf00      	nop
 8000932:	3710      	adds	r7, #16
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000000 	.word	0x20000000
 800093c:	20000390 	.word	0x20000390

08000940 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af04      	add	r7, sp, #16
 8000946:	4603      	mov	r3, r0
 8000948:	460a      	mov	r2, r1
 800094a:	80fb      	strh	r3, [r7, #6]
 800094c:	4613      	mov	r3, r2
 800094e:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8000950:	2300      	movs	r3, #0
 8000952:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8000958:	797b      	ldrb	r3, [r7, #5]
 800095a:	b29a      	uxth	r2, r3
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <I2Cx_ReadData+0x50>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	88f9      	ldrh	r1, [r7, #6]
 8000962:	9302      	str	r3, [sp, #8]
 8000964:	2301      	movs	r3, #1
 8000966:	9301      	str	r3, [sp, #4]
 8000968:	f107 030e 	add.w	r3, r7, #14
 800096c:	9300      	str	r3, [sp, #0]
 800096e:	2301      	movs	r3, #1
 8000970:	4808      	ldr	r0, [pc, #32]	; (8000994 <I2Cx_ReadData+0x54>)
 8000972:	f004 faa1 	bl	8004eb8 <HAL_I2C_Mem_Read>
 8000976:	4603      	mov	r3, r0
 8000978:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800097a:	7bfb      	ldrb	r3, [r7, #15]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000980:	f000 f80a 	bl	8000998 <I2Cx_Error>
  }
  return value;
 8000984:	7bbb      	ldrb	r3, [r7, #14]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000000 	.word	0x20000000
 8000994:	20000390 	.word	0x20000390

08000998 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 800099c:	4803      	ldr	r0, [pc, #12]	; (80009ac <I2Cx_Error+0x14>)
 800099e:	f004 f961 	bl	8004c64 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 80009a2:	f7ff ff73 	bl	800088c <I2Cx_Init>
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000390 	.word	0x20000390

080009b0 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the I2C peripheral */
  AUDIO_I2Cx_CLOCK_ENABLE();
 80009b8:	2300      	movs	r3, #0
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	4b25      	ldr	r3, [pc, #148]	; (8000a54 <I2Cx_MspInit+0xa4>)
 80009be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c0:	4a24      	ldr	r2, [pc, #144]	; (8000a54 <I2Cx_MspInit+0xa4>)
 80009c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009c6:	6413      	str	r3, [r2, #64]	; 0x40
 80009c8:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <I2Cx_MspInit+0xa4>)
 80009ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <I2Cx_MspInit+0xa4>)
 80009da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009dc:	4a1d      	ldr	r2, [pc, #116]	; (8000a54 <I2Cx_MspInit+0xa4>)
 80009de:	f043 0302 	orr.w	r3, r3, #2
 80009e2:	6313      	str	r3, [r2, #48]	; 0x30
 80009e4:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <I2Cx_MspInit+0xa4>)
 80009e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e8:	f003 0302 	and.w	r3, r3, #2
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 80009f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 80009f6:	2312      	movs	r3, #18
 80009f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80009fe:	2302      	movs	r3, #2
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 8000a02:	2304      	movs	r3, #4
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4812      	ldr	r0, [pc, #72]	; (8000a58 <I2Cx_MspInit+0xa8>)
 8000a0e:	f002 f945 	bl	8002c9c <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  AUDIO_I2Cx_FORCE_RESET();
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <I2Cx_MspInit+0xa4>)
 8000a14:	6a1b      	ldr	r3, [r3, #32]
 8000a16:	4a0f      	ldr	r2, [pc, #60]	; (8000a54 <I2Cx_MspInit+0xa4>)
 8000a18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a1c:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  AUDIO_I2Cx_RELEASE_RESET();
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <I2Cx_MspInit+0xa4>)
 8000a20:	6a1b      	ldr	r3, [r3, #32]
 8000a22:	4a0c      	ldr	r2, [pc, #48]	; (8000a54 <I2Cx_MspInit+0xa4>)
 8000a24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000a28:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	210f      	movs	r1, #15
 8000a2e:	201f      	movs	r0, #31
 8000a30:	f001 fd2f 	bl	8002492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 8000a34:	201f      	movs	r0, #31
 8000a36:	f001 fd48 	bl	80024ca <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	210f      	movs	r1, #15
 8000a3e:	2020      	movs	r0, #32
 8000a40:	f001 fd27 	bl	8002492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 8000a44:	2020      	movs	r0, #32
 8000a46:	f001 fd40 	bl	80024ca <HAL_NVIC_EnableIRQ>
}
 8000a4a:	bf00      	nop
 8000a4c:	3728      	adds	r7, #40	; 0x28
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40020400 	.word	0x40020400

08000a5c <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	4b19      	ldr	r3, [pc, #100]	; (8000acc <AUDIO_IO_Init+0x70>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a18      	ldr	r2, [pc, #96]	; (8000acc <AUDIO_IO_Init+0x70>)
 8000a6c:	f043 0308 	orr.w	r3, r3, #8
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b16      	ldr	r3, [pc, #88]	; (8000acc <AUDIO_IO_Init+0x70>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0308 	and.w	r3, r3, #8
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8000a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	4619      	mov	r1, r3
 8000a94:	480e      	ldr	r0, [pc, #56]	; (8000ad0 <AUDIO_IO_Init+0x74>)
 8000a96:	f002 f901 	bl	8002c9c <HAL_GPIO_Init>
  
  I2Cx_Init();
 8000a9a:	f7ff fef7 	bl	800088c <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa4:	480a      	ldr	r0, [pc, #40]	; (8000ad0 <AUDIO_IO_Init+0x74>)
 8000aa6:	f002 fb91 	bl	80031cc <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000aaa:	2005      	movs	r0, #5
 8000aac:	f001 fbf2 	bl	8002294 <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab6:	4806      	ldr	r0, [pc, #24]	; (8000ad0 <AUDIO_IO_Init+0x74>)
 8000ab8:	f002 fb88 	bl	80031cc <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000abc:	2005      	movs	r0, #5
 8000abe:	f001 fbe9 	bl	8002294 <HAL_Delay>
}
 8000ac2:	bf00      	nop
 8000ac4:	3718      	adds	r7, #24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020800 	.word	0x40020800

08000ad4 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	4603      	mov	r3, r0
 8000aea:	71fb      	strb	r3, [r7, #7]
 8000aec:	460b      	mov	r3, r1
 8000aee:	71bb      	strb	r3, [r7, #6]
 8000af0:	4613      	mov	r3, r2
 8000af2:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	797a      	ldrb	r2, [r7, #5]
 8000afa:	79b9      	ldrb	r1, [r7, #6]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fef7 	bl	80008f0 <I2Cx_WriteData>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b082      	sub	sp, #8
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	4603      	mov	r3, r0
 8000b12:	460a      	mov	r2, r1
 8000b14:	71fb      	strb	r3, [r7, #7]
 8000b16:	4613      	mov	r3, r2
 8000b18:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	79ba      	ldrb	r2, [r7, #6]
 8000b20:	4611      	mov	r1, r2
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff ff0c 	bl	8000940 <I2Cx_ReadData>
 8000b28:	4603      	mov	r3, r0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	81fb      	strh	r3, [r7, #14]
 8000b40:	460b      	mov	r3, r1
 8000b42:	81bb      	strh	r3, [r7, #12]
 8000b44:	4613      	mov	r3, r2
 8000b46:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 8000b4c:	f7ff ff86 	bl	8000a5c <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000b50:	89fb      	ldrh	r3, [r7, #14]
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	2201      	movs	r2, #1
 8000b56:	2102      	movs	r1, #2
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 fb6b 	bl	8001234 <CODEC_IO_Write>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	461a      	mov	r2, r3
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	4413      	add	r3, r2
 8000b66:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8000b68:	89bb      	ldrh	r3, [r7, #12]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	2b03      	cmp	r3, #3
 8000b6e:	d81b      	bhi.n	8000ba8 <cs43l22_Init+0x74>
 8000b70:	a201      	add	r2, pc, #4	; (adr r2, 8000b78 <cs43l22_Init+0x44>)
 8000b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b76:	bf00      	nop
 8000b78:	08000b89 	.word	0x08000b89
 8000b7c:	08000b91 	.word	0x08000b91
 8000b80:	08000b99 	.word	0x08000b99
 8000b84:	08000ba1 	.word	0x08000ba1
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8000b88:	4b67      	ldr	r3, [pc, #412]	; (8000d28 <cs43l22_Init+0x1f4>)
 8000b8a:	22fa      	movs	r2, #250	; 0xfa
 8000b8c:	701a      	strb	r2, [r3, #0]
    break;
 8000b8e:	e00f      	b.n	8000bb0 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8000b90:	4b65      	ldr	r3, [pc, #404]	; (8000d28 <cs43l22_Init+0x1f4>)
 8000b92:	22af      	movs	r2, #175	; 0xaf
 8000b94:	701a      	strb	r2, [r3, #0]
    break;
 8000b96:	e00b      	b.n	8000bb0 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8000b98:	4b63      	ldr	r3, [pc, #396]	; (8000d28 <cs43l22_Init+0x1f4>)
 8000b9a:	22aa      	movs	r2, #170	; 0xaa
 8000b9c:	701a      	strb	r2, [r3, #0]
    break;
 8000b9e:	e007      	b.n	8000bb0 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8000ba0:	4b61      	ldr	r3, [pc, #388]	; (8000d28 <cs43l22_Init+0x1f4>)
 8000ba2:	2205      	movs	r2, #5
 8000ba4:	701a      	strb	r2, [r3, #0]
    break;    
 8000ba6:	e003      	b.n	8000bb0 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8000ba8:	4b5f      	ldr	r3, [pc, #380]	; (8000d28 <cs43l22_Init+0x1f4>)
 8000baa:	2205      	movs	r2, #5
 8000bac:	701a      	strb	r2, [r3, #0]
    break;    
 8000bae:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000bb0:	89fb      	ldrh	r3, [r7, #14]
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	4a5c      	ldr	r2, [pc, #368]	; (8000d28 <cs43l22_Init+0x1f4>)
 8000bb6:	7812      	ldrb	r2, [r2, #0]
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	2104      	movs	r1, #4
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f000 fb39 	bl	8001234 <CODEC_IO_Write>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	4413      	add	r3, r2
 8000bca:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8000bcc:	89fb      	ldrh	r3, [r7, #14]
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	2281      	movs	r2, #129	; 0x81
 8000bd2:	2105      	movs	r1, #5
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 fb2d 	bl	8001234 <CODEC_IO_Write>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	461a      	mov	r2, r3
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	4413      	add	r3, r2
 8000be2:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8000be4:	89fb      	ldrh	r3, [r7, #14]
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	2204      	movs	r2, #4
 8000bea:	2106      	movs	r1, #6
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 fb21 	bl	8001234 <CODEC_IO_Write>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000bfc:	7afa      	ldrb	r2, [r7, #11]
 8000bfe:	89fb      	ldrh	r3, [r7, #14]
 8000c00:	4611      	mov	r1, r2
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 f97c 	bl	8000f00 <cs43l22_SetVolume>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000c10:	89bb      	ldrh	r3, [r7, #12]
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d023      	beq.n	8000c5e <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8000c16:	89fb      	ldrh	r3, [r7, #14]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	2206      	movs	r2, #6
 8000c1c:	210f      	movs	r1, #15
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 fb08 	bl	8001234 <CODEC_IO_Write>
 8000c24:	4603      	mov	r3, r0
 8000c26:	461a      	mov	r2, r3
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8000c2e:	89fb      	ldrh	r3, [r7, #14]
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	2200      	movs	r2, #0
 8000c34:	2124      	movs	r1, #36	; 0x24
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 fafc 	bl	8001234 <CODEC_IO_Write>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	461a      	mov	r2, r3
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	4413      	add	r3, r2
 8000c44:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8000c46:	89fb      	ldrh	r3, [r7, #14]
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2125      	movs	r1, #37	; 0x25
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 faf0 	bl	8001234 <CODEC_IO_Write>
 8000c54:	4603      	mov	r3, r0
 8000c56:	461a      	mov	r2, r3
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8000c5e:	89fb      	ldrh	r3, [r7, #14]
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	2200      	movs	r2, #0
 8000c64:	210a      	movs	r1, #10
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 fae4 	bl	8001234 <CODEC_IO_Write>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	461a      	mov	r2, r3
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	4413      	add	r3, r2
 8000c74:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000c76:	89fb      	ldrh	r3, [r7, #14]
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	2204      	movs	r2, #4
 8000c7c:	210e      	movs	r1, #14
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 fad8 	bl	8001234 <CODEC_IO_Write>
 8000c84:	4603      	mov	r3, r0
 8000c86:	461a      	mov	r2, r3
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8000c8e:	89fb      	ldrh	r3, [r7, #14]
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	2200      	movs	r2, #0
 8000c94:	2127      	movs	r1, #39	; 0x27
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 facc 	bl	8001234 <CODEC_IO_Write>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8000ca6:	89fb      	ldrh	r3, [r7, #14]
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	220f      	movs	r2, #15
 8000cac:	211f      	movs	r1, #31
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 fac0 	bl	8001234 <CODEC_IO_Write>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	4413      	add	r3, r2
 8000cbc:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8000cbe:	89fb      	ldrh	r3, [r7, #14]
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	220a      	movs	r2, #10
 8000cc4:	211a      	movs	r1, #26
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 fab4 	bl	8001234 <CODEC_IO_Write>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	461a      	mov	r2, r3
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8000cd6:	89fb      	ldrh	r3, [r7, #14]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	220a      	movs	r2, #10
 8000cdc:	211b      	movs	r1, #27
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 faa8 	bl	8001234 <CODEC_IO_Write>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	4413      	add	r3, r2
 8000cec:	617b      	str	r3, [r7, #20]
  
  /* Disable pass-through channels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PASSTHR_A_SELECT, 0x00);
 8000cee:	89fb      	ldrh	r3, [r7, #14]
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2108      	movs	r1, #8
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 fa9c 	bl	8001234 <CODEC_IO_Write>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	461a      	mov	r2, r3
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	4413      	add	r3, r2
 8000d04:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PASSTHR_A_SELECT, 0x00);
 8000d06:	89fb      	ldrh	r3, [r7, #14]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2108      	movs	r1, #8
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 fa90 	bl	8001234 <CODEC_IO_Write>
 8000d14:	4603      	mov	r3, r0
 8000d16:	461a      	mov	r2, r3
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	617b      	str	r3, [r7, #20]

  /* Return communication control value */
  return counter;  
 8000d1e:	697b      	ldr	r3, [r7, #20]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	200003e4 	.word	0x200003e4

08000d2c <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8000d30:	f7ff fed0 	bl	8000ad4 <AUDIO_IO_DeInit>
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 8000d42:	f7ff fe8b 	bl	8000a5c <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8000d46:	88fb      	ldrh	r3, [r7, #6]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fedc 	bl	8000b0a <AUDIO_IO_Read>
 8000d52:	4603      	mov	r3, r0
 8000d54:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
 8000d58:	f023 0307 	bic.w	r3, r3, #7
 8000d5c:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	80fb      	strh	r3, [r7, #6]
 8000d74:	4613      	mov	r3, r2
 8000d76:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 8000d7c:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <cs43l22_Play+0x70>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d123      	bne.n	8000dcc <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0b00000110);
 8000d84:	88fb      	ldrh	r3, [r7, #6]
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	2206      	movs	r2, #6
 8000d8a:	210e      	movs	r1, #14
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f000 fa51 	bl	8001234 <CODEC_IO_Write>
 8000d92:	4603      	mov	r3, r0
 8000d94:	461a      	mov	r2, r3
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	4413      	add	r3, r2
 8000d9a:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000d9c:	88fb      	ldrh	r3, [r7, #6]
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f000 f907 	bl	8000fb4 <cs43l22_SetMute>
 8000da6:	4602      	mov	r2, r0
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	4413      	add	r3, r2
 8000dac:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 8000dae:	88fb      	ldrh	r3, [r7, #6]
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	229e      	movs	r2, #158	; 0x9e
 8000db4:	2102      	movs	r1, #2
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 fa3c 	bl	8001234 <CODEC_IO_Write>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <cs43l22_Play+0x70>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8000dcc:	68fb      	ldr	r3, [r7, #12]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000034 	.word	0x20000034

08000ddc <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000dea:	88fb      	ldrh	r3, [r7, #6]
 8000dec:	2101      	movs	r1, #1
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 f8e0 	bl	8000fb4 <cs43l22_SetMute>
 8000df4:	4602      	mov	r2, r0
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	4413      	add	r3, r2
 8000dfa:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8000dfc:	88fb      	ldrh	r3, [r7, #6]
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	2201      	movs	r2, #1
 8000e02:	2102      	movs	r1, #2
 8000e04:	4618      	mov	r0, r3
 8000e06:	f000 fa15 	bl	8001234 <CODEC_IO_Write>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	4413      	add	r3, r2
 8000e12:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8000e14:	68fb      	ldr	r3, [r7, #12]
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 f8bc 	bl	8000fb4 <cs43l22_SetMute>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	4413      	add	r3, r2
 8000e42:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 8000e44:	2300      	movs	r3, #0
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	e002      	b.n	8000e50 <cs43l22_Resume+0x30>
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	2bfe      	cmp	r3, #254	; 0xfe
 8000e54:	d9f9      	bls.n	8000e4a <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000e56:	88fb      	ldrh	r3, [r7, #6]
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <cs43l22_Resume+0x74>)
 8000e5c:	7812      	ldrb	r2, [r2, #0]
 8000e5e:	b2d2      	uxtb	r2, r2
 8000e60:	2104      	movs	r1, #4
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f9e6 	bl	8001234 <CODEC_IO_Write>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4413      	add	r3, r2
 8000e70:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	229e      	movs	r2, #158	; 0x9e
 8000e78:	2102      	movs	r1, #2
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 f9da 	bl	8001234 <CODEC_IO_Write>
 8000e80:	4603      	mov	r3, r0
 8000e82:	461a      	mov	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4413      	add	r3, r2
 8000e88:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	200003e4 	.word	0x200003e4

08000e98 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000ea8:	88fb      	ldrh	r3, [r7, #6]
 8000eaa:	2101      	movs	r1, #1
 8000eac:	4618      	mov	r0, r3
 8000eae:	f000 f881 	bl	8000fb4 <cs43l22_SetMute>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000eba:	88fb      	ldrh	r3, [r7, #6]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2204      	movs	r2, #4
 8000ec0:	210e      	movs	r1, #14
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 f9b6 	bl	8001234 <CODEC_IO_Write>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	461a      	mov	r2, r3
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	4413      	add	r3, r2
 8000ed0:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 8000ed2:	88fb      	ldrh	r3, [r7, #6]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	229f      	movs	r2, #159	; 0x9f
 8000ed8:	2102      	movs	r1, #2
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f9aa 	bl	8001234 <CODEC_IO_Write>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 8000eea:	4b04      	ldr	r3, [pc, #16]	; (8000efc <cs43l22_Stop+0x64>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	701a      	strb	r2, [r3, #0]
  return counter;    
 8000ef0:	68fb      	ldr	r3, [r7, #12]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000034 	.word	0x20000034

08000f00 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	460a      	mov	r2, r1
 8000f0a:	80fb      	strh	r3, [r7, #6]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = Volume;//VOLUME_CONVERT(Volume);
 8000f14:	797b      	ldrb	r3, [r7, #5]
 8000f16:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 8000f18:	7afb      	ldrb	r3, [r7, #11]
 8000f1a:	2be6      	cmp	r3, #230	; 0xe6
 8000f1c:	d91c      	bls.n	8000f58 <cs43l22_SetVolume+0x58>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	b2d8      	uxtb	r0, r3
 8000f22:	7afb      	ldrb	r3, [r7, #11]
 8000f24:	3319      	adds	r3, #25
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	461a      	mov	r2, r3
 8000f2a:	2120      	movs	r1, #32
 8000f2c:	f000 f982 	bl	8001234 <CODEC_IO_Write>
 8000f30:	4603      	mov	r3, r0
 8000f32:	461a      	mov	r2, r3
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	b2d8      	uxtb	r0, r3
 8000f3e:	7afb      	ldrb	r3, [r7, #11]
 8000f40:	3319      	adds	r3, #25
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	461a      	mov	r2, r3
 8000f46:	2121      	movs	r1, #33	; 0x21
 8000f48:	f000 f974 	bl	8001234 <CODEC_IO_Write>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4413      	add	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	e01b      	b.n	8000f90 <cs43l22_SetVolume+0x90>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 8000f58:	88fb      	ldrh	r3, [r7, #6]
 8000f5a:	b2d8      	uxtb	r0, r3
 8000f5c:	7afb      	ldrb	r3, [r7, #11]
 8000f5e:	3319      	adds	r3, #25
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	461a      	mov	r2, r3
 8000f64:	2120      	movs	r1, #32
 8000f66:	f000 f965 	bl	8001234 <CODEC_IO_Write>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	4413      	add	r3, r2
 8000f72:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 8000f74:	88fb      	ldrh	r3, [r7, #6]
 8000f76:	b2d8      	uxtb	r0, r3
 8000f78:	7afb      	ldrb	r3, [r7, #11]
 8000f7a:	3319      	adds	r3, #25
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	461a      	mov	r2, r3
 8000f80:	2121      	movs	r1, #33	; 0x21
 8000f82:	f000 f957 	bl	8001234 <CODEC_IO_Write>
 8000f86:	4603      	mov	r3, r0
 8000f88:	461a      	mov	r2, r3
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8000f90:	68fb      	ldr	r3, [r7, #12]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	6039      	str	r1, [r7, #0]
 8000fa4:	80fb      	strh	r3, [r7, #6]
  return 0;
 8000fa6:	2300      	movs	r3, #0
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d124      	bne.n	8001014 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	22ff      	movs	r2, #255	; 0xff
 8000fd0:	2104      	movs	r1, #4
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 f92e 	bl	8001234 <CODEC_IO_Write>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	461a      	mov	r2, r3
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4413      	add	r3, r2
 8000fe0:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	2122      	movs	r1, #34	; 0x22
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 f922 	bl	8001234 <CODEC_IO_Write>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2201      	movs	r2, #1
 8001000:	2123      	movs	r1, #35	; 0x23
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f916 	bl	8001234 <CODEC_IO_Write>
 8001008:	4603      	mov	r3, r0
 800100a:	461a      	mov	r2, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4413      	add	r3, r2
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	e025      	b.n	8001060 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 8001014:	88fb      	ldrh	r3, [r7, #6]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2200      	movs	r2, #0
 800101a:	2122      	movs	r1, #34	; 0x22
 800101c:	4618      	mov	r0, r3
 800101e:	f000 f909 	bl	8001234 <CODEC_IO_Write>
 8001022:	4603      	mov	r3, r0
 8001024:	461a      	mov	r2, r3
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4413      	add	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 800102c:	88fb      	ldrh	r3, [r7, #6]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	2200      	movs	r2, #0
 8001032:	2123      	movs	r1, #35	; 0x23
 8001034:	4618      	mov	r0, r3
 8001036:	f000 f8fd 	bl	8001234 <CODEC_IO_Write>
 800103a:	4603      	mov	r3, r0
 800103c:	461a      	mov	r2, r3
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	4413      	add	r3, r2
 8001042:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	4a08      	ldr	r2, [pc, #32]	; (800106c <cs43l22_SetMute+0xb8>)
 800104a:	7812      	ldrb	r2, [r2, #0]
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	2104      	movs	r1, #4
 8001050:	4618      	mov	r0, r3
 8001052:	f000 f8ef 	bl	8001234 <CODEC_IO_Write>
 8001056:	4603      	mov	r3, r0
 8001058:	461a      	mov	r2, r3
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4413      	add	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8001060:	68fb      	ldr	r3, [r7, #12]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200003e4 	.word	0x200003e4

08001070 <cs43l22_SetPassThrough>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetPassThrough(uint16_t DeviceAddr, uint8_t CH, uint8_t vol)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	80fb      	strh	r3, [r7, #6]
 800107a:	460b      	mov	r3, r1
 800107c:	717b      	strb	r3, [r7, #5]
 800107e:	4613      	mov	r3, r2
 8001080:	713b      	strb	r3, [r7, #4]
  uint32_t counter = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]


	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, 0x00);
 8001086:	88fb      	ldrh	r3, [r7, #6]
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2200      	movs	r2, #0
 800108c:	2120      	movs	r1, #32
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f8d0 	bl	8001234 <CODEC_IO_Write>
 8001094:	4603      	mov	r3, r0
 8001096:	461a      	mov	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4413      	add	r3, r2
 800109c:	60fb      	str	r3, [r7, #12]
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, 0x00);
 800109e:	88fb      	ldrh	r3, [r7, #6]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2200      	movs	r2, #0
 80010a4:	2121      	movs	r1, #33	; 0x21
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f8c4 	bl	8001234 <CODEC_IO_Write>
 80010ac:	4603      	mov	r3, r0
 80010ae:	461a      	mov	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4413      	add	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]
//	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
//	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
//	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
//	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);

	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PASSTHR_A_SELECT, 0b11100);
 80010b6:	88fb      	ldrh	r3, [r7, #6]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	221c      	movs	r2, #28
 80010bc:	2108      	movs	r1, #8
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 f8b8 	bl	8001234 <CODEC_IO_Write>
 80010c4:	4603      	mov	r3, r0
 80010c6:	461a      	mov	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4413      	add	r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PASSTHR_B_SELECT, 0b11100);
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	221c      	movs	r2, #28
 80010d4:	2109      	movs	r1, #9
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 f8ac 	bl	8001234 <CODEC_IO_Write>
 80010dc:	4603      	mov	r3, r0
 80010de:	461a      	mov	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4413      	add	r3, r2
 80010e4:	60fb      	str	r3, [r7, #12]
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PASSTHR_A_VOL, 0x00);
 80010e6:	88fb      	ldrh	r3, [r7, #6]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2200      	movs	r2, #0
 80010ec:	2114      	movs	r1, #20
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 f8a0 	bl	8001234 <CODEC_IO_Write>
 80010f4:	4603      	mov	r3, r0
 80010f6:	461a      	mov	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4413      	add	r3, r2
 80010fc:	60fb      	str	r3, [r7, #12]
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PASSTHR_B_VOL, 0x00);
 80010fe:	88fb      	ldrh	r3, [r7, #6]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2200      	movs	r2, #0
 8001104:	2115      	movs	r1, #21
 8001106:	4618      	mov	r0, r3
 8001108:	f000 f894 	bl	8001234 <CODEC_IO_Write>
 800110c:	4603      	mov	r3, r0
 800110e:	461a      	mov	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	60fb      	str	r3, [r7, #12]

//	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL1, 0x70);
	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0xC6);
 8001116:	88fb      	ldrh	r3, [r7, #6]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	22c6      	movs	r2, #198	; 0xc6
 800111c:	210e      	movs	r1, #14
 800111e:	4618      	mov	r0, r3
 8001120:	f000 f888 	bl	8001234 <CODEC_IO_Write>
 8001124:	4603      	mov	r3, r0
 8001126:	461a      	mov	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4413      	add	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]
//	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x05);
//
//
//	counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0xC0);

  return counter;
 800112e:	68fb      	ldr	r3, [r7, #12]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	460a      	mov	r2, r1
 8001142:	80fb      	strh	r3, [r7, #6]
 8001144:	4613      	mov	r3, r2
 8001146:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 800114c:	797b      	ldrb	r3, [r7, #5]
 800114e:	3b01      	subs	r3, #1
 8001150:	2b03      	cmp	r3, #3
 8001152:	d84b      	bhi.n	80011ec <cs43l22_SetOutputMode+0xb4>
 8001154:	a201      	add	r2, pc, #4	; (adr r2, 800115c <cs43l22_SetOutputMode+0x24>)
 8001156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800115a:	bf00      	nop
 800115c:	0800116d 	.word	0x0800116d
 8001160:	0800118d 	.word	0x0800118d
 8001164:	080011ad 	.word	0x080011ad
 8001168:	080011cd 	.word	0x080011cd
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	22fa      	movs	r2, #250	; 0xfa
 8001172:	2104      	movs	r1, #4
 8001174:	4618      	mov	r0, r3
 8001176:	f000 f85d 	bl	8001234 <CODEC_IO_Write>
 800117a:	4603      	mov	r3, r0
 800117c:	461a      	mov	r2, r3
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	4413      	add	r3, r2
 8001182:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8001184:	4b24      	ldr	r3, [pc, #144]	; (8001218 <cs43l22_SetOutputMode+0xe0>)
 8001186:	22fa      	movs	r2, #250	; 0xfa
 8001188:	701a      	strb	r2, [r3, #0]
      break;
 800118a:	e03f      	b.n	800120c <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	22af      	movs	r2, #175	; 0xaf
 8001192:	2104      	movs	r1, #4
 8001194:	4618      	mov	r0, r3
 8001196:	f000 f84d 	bl	8001234 <CODEC_IO_Write>
 800119a:	4603      	mov	r3, r0
 800119c:	461a      	mov	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4413      	add	r3, r2
 80011a2:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 80011a4:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <cs43l22_SetOutputMode+0xe0>)
 80011a6:	22af      	movs	r2, #175	; 0xaf
 80011a8:	701a      	strb	r2, [r3, #0]
      break;
 80011aa:	e02f      	b.n	800120c <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 80011ac:	88fb      	ldrh	r3, [r7, #6]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	22aa      	movs	r2, #170	; 0xaa
 80011b2:	2104      	movs	r1, #4
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 f83d 	bl	8001234 <CODEC_IO_Write>
 80011ba:	4603      	mov	r3, r0
 80011bc:	461a      	mov	r2, r3
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	4413      	add	r3, r2
 80011c2:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <cs43l22_SetOutputMode+0xe0>)
 80011c6:	22aa      	movs	r2, #170	; 0xaa
 80011c8:	701a      	strb	r2, [r3, #0]
      break;
 80011ca:	e01f      	b.n	800120c <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80011cc:	88fb      	ldrh	r3, [r7, #6]
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2205      	movs	r2, #5
 80011d2:	2104      	movs	r1, #4
 80011d4:	4618      	mov	r0, r3
 80011d6:	f000 f82d 	bl	8001234 <CODEC_IO_Write>
 80011da:	4603      	mov	r3, r0
 80011dc:	461a      	mov	r2, r3
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	4413      	add	r3, r2
 80011e2:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <cs43l22_SetOutputMode+0xe0>)
 80011e6:	2205      	movs	r2, #5
 80011e8:	701a      	strb	r2, [r3, #0]
      break;    
 80011ea:	e00f      	b.n	800120c <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80011ec:	88fb      	ldrh	r3, [r7, #6]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2205      	movs	r2, #5
 80011f2:	2104      	movs	r1, #4
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 f81d 	bl	8001234 <CODEC_IO_Write>
 80011fa:	4603      	mov	r3, r0
 80011fc:	461a      	mov	r2, r3
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	4413      	add	r3, r2
 8001202:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001204:	4b04      	ldr	r3, [pc, #16]	; (8001218 <cs43l22_SetOutputMode+0xe0>)
 8001206:	2205      	movs	r2, #5
 8001208:	701a      	strb	r2, [r3, #0]
      break;
 800120a:	bf00      	nop
  }  
  return counter;
 800120c:	68fb      	ldr	r3, [r7, #12]
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200003e4 	.word	0x200003e4

0800121c <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
 800123e:	460b      	mov	r3, r1
 8001240:	71bb      	strb	r3, [r7, #6]
 8001242:	4613      	mov	r3, r2
 8001244:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 800124a:	797a      	ldrb	r2, [r7, #5]
 800124c:	79b9      	ldrb	r1, [r7, #6]
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fc46 	bl	8000ae2 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	b2db      	uxtb	r3, r3
}
 800125a:	4618      	mov	r0, r3
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <HAL_UART_RxHalfCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b0a4      	sub	sp, #144	; 0x90
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	Command command;
	memcpy(&command, hcommander.uart_rx_buffer, COMMAND_BYTESIZE);
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	2282      	movs	r2, #130	; 0x82
 8001272:	4907      	ldr	r1, [pc, #28]	; (8001290 <HAL_UART_RxHalfCpltCallback+0x2c>)
 8001274:	4618      	mov	r0, r3
 8001276:	f00a fa0f 	bl	800b698 <memcpy>
	Commander_Enqueue(&hcommander, &command);
 800127a:	f107 030c 	add.w	r3, r7, #12
 800127e:	4619      	mov	r1, r3
 8001280:	4804      	ldr	r0, [pc, #16]	; (8001294 <HAL_UART_RxHalfCpltCallback+0x30>)
 8001282:	f000 ff3a 	bl	80020fa <Commander_Enqueue>
}
 8001286:	bf00      	nop
 8001288:	3790      	adds	r7, #144	; 0x90
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000638 	.word	0x20000638
 8001294:	20000630 	.word	0x20000630

08001298 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b0a4      	sub	sp, #144	; 0x90
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	Command command;
	memcpy(&command, hcommander.uart_rx_buffer + COMMAND_BYTESIZE, COMMAND_BYTESIZE);
 80012a0:	4908      	ldr	r1, [pc, #32]	; (80012c4 <HAL_UART_RxCpltCallback+0x2c>)
 80012a2:	f107 030c 	add.w	r3, r7, #12
 80012a6:	2282      	movs	r2, #130	; 0x82
 80012a8:	4618      	mov	r0, r3
 80012aa:	f00a f9f5 	bl	800b698 <memcpy>
	Commander_Enqueue(&hcommander, &command);
 80012ae:	f107 030c 	add.w	r3, r7, #12
 80012b2:	4619      	mov	r1, r3
 80012b4:	4804      	ldr	r0, [pc, #16]	; (80012c8 <HAL_UART_RxCpltCallback+0x30>)
 80012b6:	f000 ff20 	bl	80020fa <Commander_Enqueue>
}
 80012ba:	bf00      	nop
 80012bc:	3790      	adds	r7, #144	; 0x90
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200006ba 	.word	0x200006ba
 80012c8:	20000630 	.word	0x20000630

080012cc <command_callback>:

void command_callback(Command command) {
 80012cc:	b084      	sub	sp, #16
 80012ce:	b490      	push	{r4, r7}
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	f107 0408 	add.w	r4, r7, #8
 80012d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//states[0] = states[0] == GPIO_PIN_RESET ? GPIO_PIN_SET : GPIO_PIN_RESET;
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc90      	pop	{r4, r7}
 80012e0:	b004      	add	sp, #16
 80012e2:	4770      	bx	lr

080012e4 <wave_gen>:

float wave_gen(char t, u_int32_t i, float tone) {
 80012e4:	b480      	push	{r7}
 80012e6:	b089      	sub	sp, #36	; 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	ed87 0a01 	vstr	s0, [r7, #4]
 80012f2:	73fb      	strb	r3, [r7, #15]

	static float sin_table[128] = { 0.000000F, 0.024541F, 0.049068F, 0.073565F, 0.098017F, 0.122411F, 0.146730F, 0.170962F, 0.195090F, 0.219101F, 0.242980F, 0.266713F, 0.290284F, 0.313681F, 0.336890F, 0.359895F, 0.382683F, 0.405241F, 0.427555F, 0.449611F, 0.471396F, 0.492898F, 0.514102F, 0.534997F, 0.555570F, 0.575808F, 0.595699F, 0.615231F, 0.634393F, 0.653172F, 0.671559F, 0.689540F, 0.707106F, 0.724247F, 0.740951F, 0.757208F, 0.773010F, 0.788346F, 0.803207F, 0.817584F, 0.831469F, 0.844853F, 0.857728F, 0.870087F, 0.881921F, 0.893224F, 0.903989F, 0.914209F, 0.923879F, 0.932992F, 0.941544F, 0.949528F, 0.956940F, 0.963776F, 0.970031F, 0.975702F, 0.980785F, 0.985277F, 0.989176F, 0.992479F, 0.995185F, 0.997290F, 0.998795F, 0.999699F, 1.000000F, 0.999699F, 0.998796F, 0.997291F, 0.995185F, 0.992480F, 0.989177F, 0.985278F, 0.980786F, 0.975702F, 0.970032F, 0.963776F, 0.956941F, 0.949529F, 0.941545F, 0.932993F, 0.923880F, 0.914210F, 0.903990F, 0.893225F, 0.881922F, 0.870088F, 0.857729F, 0.844855F, 0.831471F, 0.817586F, 0.803209F, 0.788348F, 0.773012F, 0.757210F, 0.740952F, 0.724248F, 0.707108F, 0.689542F, 0.671560F, 0.653174F, 0.634395F, 0.615233F, 0.595701F, 0.575810F, 0.555572F, 0.534999F, 0.514105F, 0.492900F, 0.471399F, 0.449613F, 0.427557F, 0.405243F, 0.382685F, 0.359897F, 0.336892F, 0.313684F, 0.290287F, 0.266715F, 0.242982F, 0.219104F, 0.195093F, 0.170964F, 0.146733F, 0.122413F, 0.098019F, 0.073567F, 0.049070F, 0.024544F };
	float period_f = 48000.F / tone;
 80012f4:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001378 <wave_gen+0x94>
 80012f8:	ed97 7a01 	vldr	s14, [r7, #4]
 80012fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001300:	edc7 7a07 	vstr	s15, [r7, #28]
	u_int32_t period_i = period_f;
 8001304:	edd7 7a07 	vldr	s15, [r7, #28]
 8001308:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800130c:	ee17 3a90 	vmov	r3, s15
 8001310:	61bb      	str	r3, [r7, #24]
	u_int32_t table_index = (i * 256 / period_i) % 256;
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	021a      	lsls	r2, r3, #8
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	fbb2 f3f3 	udiv	r3, r2, r3
 800131c:	b2db      	uxtb	r3, r3
 800131e:	617b      	str	r3, [r7, #20]

	if (t == 's') {
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	2b73      	cmp	r3, #115	; 0x73
 8001324:	d113      	bne.n	800134e <wave_gen+0x6a>
		if (table_index <= 127) {
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	2b7f      	cmp	r3, #127	; 0x7f
 800132a:	d806      	bhi.n	800133a <wave_gen+0x56>
			return sin_table[table_index];
 800132c:	4a13      	ldr	r2, [pc, #76]	; (800137c <wave_gen+0x98>)
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	edd3 7a00 	vldr	s15, [r3]
 8001338:	e017      	b.n	800136a <wave_gen+0x86>
		} else {
			return -sin_table[table_index - 128];
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	3b80      	subs	r3, #128	; 0x80
 800133e:	4a0f      	ldr	r2, [pc, #60]	; (800137c <wave_gen+0x98>)
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	edd3 7a00 	vldr	s15, [r3]
 8001348:	eef1 7a67 	vneg.f32	s15, s15
 800134c:	e00d      	b.n	800136a <wave_gen+0x86>
		}
	} else if (t == 'q') {
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	2b71      	cmp	r3, #113	; 0x71
 8001352:	d108      	bne.n	8001366 <wave_gen+0x82>
		if (table_index <= 127) {
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	2b7f      	cmp	r3, #127	; 0x7f
 8001358:	d802      	bhi.n	8001360 <wave_gen+0x7c>
			return -1.F;
 800135a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800135e:	e004      	b.n	800136a <wave_gen+0x86>
		} else {
			return 1.F;
 8001360:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001364:	e001      	b.n	800136a <wave_gen+0x86>
		}
	} else {
		return 0;
 8001366:	eddf 7a06 	vldr	s15, [pc, #24]	; 8001380 <wave_gen+0x9c>
	}
}
 800136a:	eeb0 0a67 	vmov.f32	s0, s15
 800136e:	3724      	adds	r7, #36	; 0x24
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	473b8000 	.word	0x473b8000
 800137c:	20000038 	.word	0x20000038
 8001380:	00000000 	.word	0x00000000

08001384 <Conv_ADC>:


void Conv_ADC(uint8_t * buf, int32_t *result){
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
	*result = 0xFF000000 * ((buf[1]>>7)&1) + (buf[1]<<16) + (buf[0]<<8) + buf[3];
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3301      	adds	r3, #1
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	09db      	lsrs	r3, r3, #7
 8001396:	b2db      	uxtb	r3, r3
 8001398:	f003 0201 	and.w	r2, r3, #1
 800139c:	4613      	mov	r3, r2
 800139e:	021b      	lsls	r3, r3, #8
 80013a0:	1a9b      	subs	r3, r3, r2
 80013a2:	061b      	lsls	r3, r3, #24
 80013a4:	461a      	mov	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3301      	adds	r3, #1
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	041b      	lsls	r3, r3, #16
 80013ae:	4413      	add	r3, r2
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	7812      	ldrb	r2, [r2, #0]
 80013b4:	0212      	lsls	r2, r2, #8
 80013b6:	4413      	add	r3, r2
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	3203      	adds	r2, #3
 80013bc:	7812      	ldrb	r2, [r2, #0]
 80013be:	4413      	add	r3, r2
 80013c0:	461a      	mov	r2, r3
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	601a      	str	r2, [r3, #0]

}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <HAL_I2S_RxHalfCpltCallback>:

uint32_t counter = 0;
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	if (hi2s->Instance == SPI2) {
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a0e      	ldr	r2, [pc, #56]	; (800141c <HAL_I2S_RxHalfCpltCallback+0x48>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d116      	bne.n	8001414 <HAL_I2S_RxHalfCpltCallback+0x40>
		Conv_ADC(&ADC_BUFF.ADC8[0], &BUFF_CONV[0]);
 80013e6:	490e      	ldr	r1, [pc, #56]	; (8001420 <HAL_I2S_RxHalfCpltCallback+0x4c>)
 80013e8:	480e      	ldr	r0, [pc, #56]	; (8001424 <HAL_I2S_RxHalfCpltCallback+0x50>)
 80013ea:	f7ff ffcb 	bl	8001384 <Conv_ADC>
		Conv_ADC(&ADC_BUFF.ADC8[4], &BUFF_CONV[1]);
 80013ee:	490e      	ldr	r1, [pc, #56]	; (8001428 <HAL_I2S_RxHalfCpltCallback+0x54>)
 80013f0:	480e      	ldr	r0, [pc, #56]	; (800142c <HAL_I2S_RxHalfCpltCallback+0x58>)
 80013f2:	f7ff ffc7 	bl	8001384 <Conv_ADC>
		DSP_BUFF[0] = BUFF_CONV[0];
 80013f6:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <HAL_I2S_RxHalfCpltCallback+0x4c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	b21a      	sxth	r2, r3
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <HAL_I2S_RxHalfCpltCallback+0x5c>)
 80013fe:	801a      	strh	r2, [r3, #0]
		DSP_BUFF[1] = BUFF_CONV[1];
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <HAL_I2S_RxHalfCpltCallback+0x4c>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	b21a      	sxth	r2, r3
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <HAL_I2S_RxHalfCpltCallback+0x5c>)
 8001408:	805a      	strh	r2, [r3, #2]
		//if (samples_count < 128) {
		//	int16_t temp = BUFF_CONV[0] / 128 + 127;
		//	debug_samples[samples_count] = temp;
		//	samples_count++;
		//}
		counter++;
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <HAL_I2S_RxHalfCpltCallback+0x60>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	3301      	adds	r3, #1
 8001410:	4a08      	ldr	r2, [pc, #32]	; (8001434 <HAL_I2S_RxHalfCpltCallback+0x60>)
 8001412:	6013      	str	r3, [r2, #0]
	}
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40003800 	.word	0x40003800
 8001420:	20003230 	.word	0x20003230
 8001424:	20003220 	.word	0x20003220
 8001428:	20003234 	.word	0x20003234
 800142c:	20003224 	.word	0x20003224
 8001430:	20003218 	.word	0x20003218
 8001434:	20003240 	.word	0x20003240

08001438 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	if (hi2s->Instance == SPI2) {
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a11      	ldr	r2, [pc, #68]	; (800148c <HAL_I2S_RxCpltCallback+0x54>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d11c      	bne.n	8001484 <HAL_I2S_RxCpltCallback+0x4c>
		Conv_ADC(&ADC_BUFF.ADC8[ 8], &BUFF_CONV[2]);
 800144a:	4911      	ldr	r1, [pc, #68]	; (8001490 <HAL_I2S_RxCpltCallback+0x58>)
 800144c:	4811      	ldr	r0, [pc, #68]	; (8001494 <HAL_I2S_RxCpltCallback+0x5c>)
 800144e:	f7ff ff99 	bl	8001384 <Conv_ADC>
		Conv_ADC(&ADC_BUFF.ADC8[12], &BUFF_CONV[3]);
 8001452:	4911      	ldr	r1, [pc, #68]	; (8001498 <HAL_I2S_RxCpltCallback+0x60>)
 8001454:	4811      	ldr	r0, [pc, #68]	; (800149c <HAL_I2S_RxCpltCallback+0x64>)
 8001456:	f7ff ff95 	bl	8001384 <Conv_ADC>
		DSP_BUFF[2] = ADC_BUFF.ADC8[ 8]*256+ADC_BUFF.ADC8[ 9]*0; //BUFF_CONV[2];
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <HAL_I2S_RxCpltCallback+0x68>)
 800145c:	7a1b      	ldrb	r3, [r3, #8]
 800145e:	b29b      	uxth	r3, r3
 8001460:	021b      	lsls	r3, r3, #8
 8001462:	b29b      	uxth	r3, r3
 8001464:	b21a      	sxth	r2, r3
 8001466:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <HAL_I2S_RxCpltCallback+0x6c>)
 8001468:	809a      	strh	r2, [r3, #4]
		DSP_BUFF[3] = ADC_BUFF.ADC8[12]*256+ADC_BUFF.ADC8[13]*0;//BUFF_CONV[3];
 800146a:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <HAL_I2S_RxCpltCallback+0x68>)
 800146c:	7b1b      	ldrb	r3, [r3, #12]
 800146e:	b29b      	uxth	r3, r3
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	b29b      	uxth	r3, r3
 8001474:	b21a      	sxth	r2, r3
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <HAL_I2S_RxCpltCallback+0x6c>)
 8001478:	80da      	strh	r2, [r3, #6]
		//if (samples_count < 128) {
		//	int16_t temp = BUFF_CONV[2] / 128 + 127;
		//	debug_samples[samples_count] = temp;
		//	samples_count++;
		//}
		counter++;
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <HAL_I2S_RxCpltCallback+0x70>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	3301      	adds	r3, #1
 8001480:	4a09      	ldr	r2, [pc, #36]	; (80014a8 <HAL_I2S_RxCpltCallback+0x70>)
 8001482:	6013      	str	r3, [r2, #0]
	}
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40003800 	.word	0x40003800
 8001490:	20003238 	.word	0x20003238
 8001494:	20003228 	.word	0x20003228
 8001498:	2000323c 	.word	0x2000323c
 800149c:	2000322c 	.word	0x2000322c
 80014a0:	20003220 	.word	0x20003220
 80014a4:	20003218 	.word	0x20003218
 80014a8:	20003240 	.word	0x20003240

080014ac <AUDIO_OUT_HalfTransfer_CallBack>:

void AUDIO_OUT_HalfTransfer_CallBack() {
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

	DAC_BUFF[0] = DSP_BUFF[0];
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 80014b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80014b6:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <AUDIO_OUT_HalfTransfer_CallBack+0x28>)
 80014b8:	801a      	strh	r2, [r3, #0]
	DAC_BUFF[1] = DSP_BUFF[1];
 80014ba:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 80014bc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <AUDIO_OUT_HalfTransfer_CallBack+0x28>)
 80014c2:	805a      	strh	r2, [r3, #2]
	//DAC_BUFF[2] = DSP_BUFF[2];
	//DAC_BUFF[3] = DSP_BUFF[3];

}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	20003218 	.word	0x20003218
 80014d4:	20003198 	.word	0x20003198

080014d8 <AUDIO_OUT_TransferComplete_CallBack>:

void AUDIO_OUT_TransferComplete_CallBack() {
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0

	//DAC_BUFF[0] = DSP_BUFF[0];
	//DAC_BUFF[1] = DSP_BUFF[1];
	DAC_BUFF[2] = DSP_BUFF[2];
 80014dc:	4b07      	ldr	r3, [pc, #28]	; (80014fc <AUDIO_OUT_TransferComplete_CallBack+0x24>)
 80014de:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80014e2:	4b07      	ldr	r3, [pc, #28]	; (8001500 <AUDIO_OUT_TransferComplete_CallBack+0x28>)
 80014e4:	809a      	strh	r2, [r3, #4]
	DAC_BUFF[3] = DSP_BUFF[3];
 80014e6:	4b05      	ldr	r3, [pc, #20]	; (80014fc <AUDIO_OUT_TransferComplete_CallBack+0x24>)
 80014e8:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <AUDIO_OUT_TransferComplete_CallBack+0x28>)
 80014ee:	80da      	strh	r2, [r3, #6]

}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	20003218 	.word	0x20003218
 8001500:	20003198 	.word	0x20003198

08001504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b0a4      	sub	sp, #144	; 0x90
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800150a:	f000 fe51 	bl	80021b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800150e:	f000 f8a3 	bl	8001658 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001512:	f000 f90b 	bl	800172c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001516:	f000 fa17 	bl	8001948 <MX_GPIO_Init>
  MX_DMA_Init();
 800151a:	f000 f9d7 	bl	80018cc <MX_DMA_Init>
  MX_USART1_UART_Init();
 800151e:	f000 f9ab 	bl	8001878 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001522:	f007 fbbb 	bl	8008c9c <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001526:	f009 fd9d 	bl	800b064 <MX_USB_HOST_Init>
  MX_I2S3_Init();
 800152a:	f000 f977 	bl	800181c <MX_I2S3_Init>
  MX_I2C1_Init();
 800152e:	f000 f919 	bl	8001764 <MX_I2C1_Init>
  MX_I2S2_Init();
 8001532:	f000 f945 	bl	80017c0 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */

	// COMMANDER
	Commander_Init(&hcommander, &huart1, &hdma_usart1_rx, command_callback);
 8001536:	4b3a      	ldr	r3, [pc, #232]	; (8001620 <main+0x11c>)
 8001538:	4a3a      	ldr	r2, [pc, #232]	; (8001624 <main+0x120>)
 800153a:	493b      	ldr	r1, [pc, #236]	; (8001628 <main+0x124>)
 800153c:	483b      	ldr	r0, [pc, #236]	; (800162c <main+0x128>)
 800153e:	f000 fda4 	bl	800208a <Commander_Init>
	Commander_Start(&hcommander);
 8001542:	483a      	ldr	r0, [pc, #232]	; (800162c <main+0x128>)
 8001544:	f000 fdc8 	bl	80020d8 <Commander_Start>



	// DAC

	for(int i = 1;i < 2180; i+=2) {
 8001548:	2301      	movs	r3, #1
 800154a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800154e:	e030      	b.n	80015b2 <main+0xae>
		float temp = wave_gen('s', i/2, 220.) * 16000;
 8001550:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001554:	0fda      	lsrs	r2, r3, #31
 8001556:	4413      	add	r3, r2
 8001558:	105b      	asrs	r3, r3, #1
 800155a:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8001630 <main+0x12c>
 800155e:	4619      	mov	r1, r3
 8001560:	2073      	movs	r0, #115	; 0x73
 8001562:	f7ff febf 	bl	80012e4 <wave_gen>
 8001566:	eef0 7a40 	vmov.f32	s15, s0
 800156a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001634 <main+0x130>
 800156e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001572:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		AUDIO_OUT[i] = temp;
 8001576:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800157a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800157e:	ee17 3a90 	vmov	r3, s15
 8001582:	b219      	sxth	r1, r3
 8001584:	4a2c      	ldr	r2, [pc, #176]	; (8001638 <main+0x134>)
 8001586:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800158a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		AUDIO_OUT[i-1] = temp;
 800158e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001592:	3b01      	subs	r3, #1
 8001594:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001598:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800159c:	ee17 2a90 	vmov	r2, s15
 80015a0:	b211      	sxth	r1, r2
 80015a2:	4a25      	ldr	r2, [pc, #148]	; (8001638 <main+0x134>)
 80015a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 1;i < 2180; i+=2) {
 80015a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015ac:	3302      	adds	r3, #2
 80015ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80015b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015b6:	f640 0283 	movw	r2, #2179	; 0x883
 80015ba:	4293      	cmp	r3, r2
 80015bc:	ddc8      	ble.n	8001550 <main+0x4c>
	}

	HAL_GPIO_WritePin(SPKRPower_GPIO_Port, SPKRPower_Pin, RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015c4:	481d      	ldr	r0, [pc, #116]	; (800163c <main+0x138>)
 80015c6:	f001 fe01 	bl	80031cc <HAL_GPIO_WritePin>

	AUDIO_OUT_Init(3, 0,  AUDIO_FREQUENCY_48K);
 80015ca:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80015ce:	2100      	movs	r1, #0
 80015d0:	2003      	movs	r0, #3
 80015d2:	f7fe ff7b 	bl	80004cc <AUDIO_OUT_Init>
	cs43l22_SetOutputMode(AUDIO_I2C_ADDRESS,OUTPUT_DEVICE_HEADPHONE ); //OUTPUT_DEVICE_BOTH
 80015d6:	2102      	movs	r1, #2
 80015d8:	2094      	movs	r0, #148	; 0x94
 80015da:	f7ff fdad 	bl	8001138 <cs43l22_SetOutputMode>
	cs43l22_SetPassThrough(AUDIO_I2C_ADDRESS,0,0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2100      	movs	r1, #0
 80015e2:	2094      	movs	r0, #148	; 0x94
 80015e4:	f7ff fd44 	bl	8001070 <cs43l22_SetPassThrough>

	//cs43l22_drv.Play(AUDIO_I2C_ADDRESS, (uint16_t *)AUDIO_OUT, 2180);
	//cs43l22_SetVolume(AUDIO_I2C_ADDRESS, 200);
	//HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)AUDIO_OUT, 2180);

	cs43l22_drv.Play(AUDIO_I2C_ADDRESS, (uint16_t *)DAC_BUFF, 4);
 80015e8:	4b15      	ldr	r3, [pc, #84]	; (8001640 <main+0x13c>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	2204      	movs	r2, #4
 80015ee:	4915      	ldr	r1, [pc, #84]	; (8001644 <main+0x140>)
 80015f0:	2094      	movs	r0, #148	; 0x94
 80015f2:	4798      	blx	r3
	cs43l22_SetVolume(AUDIO_I2C_ADDRESS, 150);
 80015f4:	2196      	movs	r1, #150	; 0x96
 80015f6:	2094      	movs	r0, #148	; 0x94
 80015f8:	f7ff fc82 	bl	8000f00 <cs43l22_SetVolume>
	HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)DAC_BUFF, 4);
 80015fc:	2204      	movs	r2, #4
 80015fe:	4911      	ldr	r1, [pc, #68]	; (8001644 <main+0x140>)
 8001600:	4811      	ldr	r0, [pc, #68]	; (8001648 <main+0x144>)
 8001602:	f004 fb29 	bl	8005c58 <HAL_I2S_Transmit_DMA>

	// ADC
	HAL_I2S_Receive_DMA(&hi2s2, ADC_BUFF.ADC16, 4);
 8001606:	2204      	movs	r2, #4
 8001608:	4910      	ldr	r1, [pc, #64]	; (800164c <main+0x148>)
 800160a:	4811      	ldr	r0, [pc, #68]	; (8001650 <main+0x14c>)
 800160c:	f004 fbcc 	bl	8005da8 <HAL_I2S_Receive_DMA>

	while(1){
		HAL_Delay(1000);
 8001610:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001614:	f000 fe3e 	bl	8002294 <HAL_Delay>
		counter = 0;
 8001618:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <main+0x150>)
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
		HAL_Delay(1000);
 800161e:	e7f7      	b.n	8001610 <main+0x10c>
 8001620:	080012cd 	.word	0x080012cd
 8001624:	200005d0 	.word	0x200005d0
 8001628:	2000058c 	.word	0x2000058c
 800162c:	20000630 	.word	0x20000630
 8001630:	435c0000 	.word	0x435c0000
 8001634:	467a0000 	.word	0x467a0000
 8001638:	20000f88 	.word	0x20000f88
 800163c:	40020400 	.word	0x40020400
 8001640:	20000004 	.word	0x20000004
 8001644:	20003198 	.word	0x20003198
 8001648:	20000484 	.word	0x20000484
 800164c:	20003220 	.word	0x20003220
 8001650:	2000043c 	.word	0x2000043c
 8001654:	20003240 	.word	0x20003240

08001658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b094      	sub	sp, #80	; 0x50
 800165c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800165e:	f107 0320 	add.w	r3, r7, #32
 8001662:	2230      	movs	r2, #48	; 0x30
 8001664:	2100      	movs	r1, #0
 8001666:	4618      	mov	r0, r3
 8001668:	f00a f824 	bl	800b6b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800166c:	f107 030c 	add.w	r3, r7, #12
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800167c:	2300      	movs	r3, #0
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	4b28      	ldr	r3, [pc, #160]	; (8001724 <SystemClock_Config+0xcc>)
 8001682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001684:	4a27      	ldr	r2, [pc, #156]	; (8001724 <SystemClock_Config+0xcc>)
 8001686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168a:	6413      	str	r3, [r2, #64]	; 0x40
 800168c:	4b25      	ldr	r3, [pc, #148]	; (8001724 <SystemClock_Config+0xcc>)
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001698:	2300      	movs	r3, #0
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	4b22      	ldr	r3, [pc, #136]	; (8001728 <SystemClock_Config+0xd0>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a21      	ldr	r2, [pc, #132]	; (8001728 <SystemClock_Config+0xd0>)
 80016a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <SystemClock_Config+0xd0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016b4:	2301      	movs	r3, #1
 80016b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016be:	2302      	movs	r3, #2
 80016c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016c8:	2304      	movs	r3, #4
 80016ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016cc:	23a8      	movs	r3, #168	; 0xa8
 80016ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016d0:	2302      	movs	r3, #2
 80016d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016d4:	2307      	movs	r3, #7
 80016d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d8:	f107 0320 	add.w	r3, r7, #32
 80016dc:	4618      	mov	r0, r3
 80016de:	f004 fff3 	bl	80066c8 <HAL_RCC_OscConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016e8:	f000 f9c8 	bl	8001a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ec:	230f      	movs	r3, #15
 80016ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f0:	2302      	movs	r3, #2
 80016f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001702:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	2105      	movs	r1, #5
 800170a:	4618      	mov	r0, r3
 800170c:	f005 fa54 	bl	8006bb8 <HAL_RCC_ClockConfig>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001716:	f000 f9b1 	bl	8001a7c <Error_Handler>
  }
}
 800171a:	bf00      	nop
 800171c:	3750      	adds	r7, #80	; 0x50
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800
 8001728:	40007000 	.word	0x40007000

0800172c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001732:	463b      	mov	r3, r7
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800173e:	2301      	movs	r3, #1
 8001740:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 196;
 8001742:	23c4      	movs	r3, #196	; 0xc4
 8001744:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 4;
 8001746:	2304      	movs	r3, #4
 8001748:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800174a:	463b      	mov	r3, r7
 800174c:	4618      	mov	r0, r3
 800174e:	f005 fc53 	bl	8006ff8 <HAL_RCCEx_PeriphCLKConfig>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 8001758:	f000 f990 	bl	8001a7c <Error_Handler>
  }
}
 800175c:	bf00      	nop
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <MX_I2C1_Init+0x50>)
 800176a:	4a13      	ldr	r2, [pc, #76]	; (80017b8 <MX_I2C1_Init+0x54>)
 800176c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_I2C1_Init+0x50>)
 8001770:	4a12      	ldr	r2, [pc, #72]	; (80017bc <MX_I2C1_Init+0x58>)
 8001772:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <MX_I2C1_Init+0x50>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_I2C1_Init+0x50>)
 800177c:	2200      	movs	r2, #0
 800177e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MX_I2C1_Init+0x50>)
 8001782:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001786:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001788:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <MX_I2C1_Init+0x50>)
 800178a:	2200      	movs	r2, #0
 800178c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_I2C1_Init+0x50>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001794:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <MX_I2C1_Init+0x50>)
 8001796:	2200      	movs	r2, #0
 8001798:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_I2C1_Init+0x50>)
 800179c:	2200      	movs	r2, #0
 800179e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017a0:	4804      	ldr	r0, [pc, #16]	; (80017b4 <MX_I2C1_Init+0x50>)
 80017a2:	f003 f91b 	bl	80049dc <HAL_I2C_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017ac:	f000 f966 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	200003e8 	.word	0x200003e8
 80017b8:	40005400 	.word	0x40005400
 80017bc:	000186a0 	.word	0x000186a0

080017c0 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80017c4:	4b13      	ldr	r3, [pc, #76]	; (8001814 <MX_I2S2_Init+0x54>)
 80017c6:	4a14      	ldr	r2, [pc, #80]	; (8001818 <MX_I2S2_Init+0x58>)
 80017c8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80017ca:	4b12      	ldr	r3, [pc, #72]	; (8001814 <MX_I2S2_Init+0x54>)
 80017cc:	f44f 7240 	mov.w	r2, #768	; 0x300
 80017d0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <MX_I2S2_Init+0x54>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80017d8:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <MX_I2S2_Init+0x54>)
 80017da:	2203      	movs	r2, #3
 80017dc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80017de:	4b0d      	ldr	r3, [pc, #52]	; (8001814 <MX_I2S2_Init+0x54>)
 80017e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e4:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80017e6:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <MX_I2S2_Init+0x54>)
 80017e8:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80017ec:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <MX_I2S2_Init+0x54>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80017f4:	4b07      	ldr	r3, [pc, #28]	; (8001814 <MX_I2S2_Init+0x54>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <MX_I2S2_Init+0x54>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001800:	4804      	ldr	r0, [pc, #16]	; (8001814 <MX_I2S2_Init+0x54>)
 8001802:	f004 f8e9 	bl	80059d8 <HAL_I2S_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 800180c:	f000 f936 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	2000043c 	.word	0x2000043c
 8001818:	40003800 	.word	0x40003800

0800181c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001820:	4b13      	ldr	r3, [pc, #76]	; (8001870 <MX_I2S3_Init+0x54>)
 8001822:	4a14      	ldr	r2, [pc, #80]	; (8001874 <MX_I2S3_Init+0x58>)
 8001824:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001826:	4b12      	ldr	r3, [pc, #72]	; (8001870 <MX_I2S3_Init+0x54>)
 8001828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800182c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_MSB;
 800182e:	4b10      	ldr	r3, [pc, #64]	; (8001870 <MX_I2S3_Init+0x54>)
 8001830:	2210      	movs	r2, #16
 8001832:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001834:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <MX_I2S3_Init+0x54>)
 8001836:	2200      	movs	r2, #0
 8001838:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800183a:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <MX_I2S3_Init+0x54>)
 800183c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001840:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001842:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <MX_I2S3_Init+0x54>)
 8001844:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001848:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <MX_I2S3_Init+0x54>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001850:	4b07      	ldr	r3, [pc, #28]	; (8001870 <MX_I2S3_Init+0x54>)
 8001852:	2200      	movs	r2, #0
 8001854:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <MX_I2S3_Init+0x54>)
 8001858:	2200      	movs	r2, #0
 800185a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800185c:	4804      	ldr	r0, [pc, #16]	; (8001870 <MX_I2S3_Init+0x54>)
 800185e:	f004 f8bb 	bl	80059d8 <HAL_I2S_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001868:	f000 f908 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000484 	.word	0x20000484
 8001874:	40003c00 	.word	0x40003c00

08001878 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <MX_USART1_UART_Init+0x4c>)
 800187e:	4a12      	ldr	r2, [pc, #72]	; (80018c8 <MX_USART1_UART_Init+0x50>)
 8001880:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <MX_USART1_UART_Init+0x4c>)
 8001884:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001888:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <MX_USART1_UART_Init+0x4c>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <MX_USART1_UART_Init+0x4c>)
 8001892:	2200      	movs	r2, #0
 8001894:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <MX_USART1_UART_Init+0x4c>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800189c:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <MX_USART1_UART_Init+0x4c>)
 800189e:	220c      	movs	r2, #12
 80018a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018a2:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <MX_USART1_UART_Init+0x4c>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <MX_USART1_UART_Init+0x4c>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018ae:	4805      	ldr	r0, [pc, #20]	; (80018c4 <MX_USART1_UART_Init+0x4c>)
 80018b0:	f005 fd0e 	bl	80072d0 <HAL_UART_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018ba:	f000 f8df 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	2000058c 	.word	0x2000058c
 80018c8:	40011000 	.word	0x40011000

080018cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	4b1b      	ldr	r3, [pc, #108]	; (8001944 <MX_DMA_Init+0x78>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a1a      	ldr	r2, [pc, #104]	; (8001944 <MX_DMA_Init+0x78>)
 80018dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b18      	ldr	r3, [pc, #96]	; (8001944 <MX_DMA_Init+0x78>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	603b      	str	r3, [r7, #0]
 80018f2:	4b14      	ldr	r3, [pc, #80]	; (8001944 <MX_DMA_Init+0x78>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a13      	ldr	r2, [pc, #76]	; (8001944 <MX_DMA_Init+0x78>)
 80018f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b11      	ldr	r3, [pc, #68]	; (8001944 <MX_DMA_Init+0x78>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	200e      	movs	r0, #14
 8001910:	f000 fdbf 	bl	8002492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001914:	200e      	movs	r0, #14
 8001916:	f000 fdd8 	bl	80024ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	2100      	movs	r1, #0
 800191e:	2010      	movs	r0, #16
 8001920:	f000 fdb7 	bl	8002492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001924:	2010      	movs	r0, #16
 8001926:	f000 fdd0 	bl	80024ca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800192a:	2200      	movs	r2, #0
 800192c:	2100      	movs	r1, #0
 800192e:	203a      	movs	r0, #58	; 0x3a
 8001930:	f000 fdaf 	bl	8002492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001934:	203a      	movs	r0, #58	; 0x3a
 8001936:	f000 fdc8 	bl	80024ca <HAL_NVIC_EnableIRQ>

}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800

08001948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	; 0x28
 800194c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
 800195c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	4b42      	ldr	r3, [pc, #264]	; (8001a6c <MX_GPIO_Init+0x124>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a41      	ldr	r2, [pc, #260]	; (8001a6c <MX_GPIO_Init+0x124>)
 8001968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b3f      	ldr	r3, [pc, #252]	; (8001a6c <MX_GPIO_Init+0x124>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b3b      	ldr	r3, [pc, #236]	; (8001a6c <MX_GPIO_Init+0x124>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a3a      	ldr	r2, [pc, #232]	; (8001a6c <MX_GPIO_Init+0x124>)
 8001984:	f043 0302 	orr.w	r3, r3, #2
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b38      	ldr	r3, [pc, #224]	; (8001a6c <MX_GPIO_Init+0x124>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	4b34      	ldr	r3, [pc, #208]	; (8001a6c <MX_GPIO_Init+0x124>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a33      	ldr	r2, [pc, #204]	; (8001a6c <MX_GPIO_Init+0x124>)
 80019a0:	f043 0304 	orr.w	r3, r3, #4
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b31      	ldr	r3, [pc, #196]	; (8001a6c <MX_GPIO_Init+0x124>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	4b2d      	ldr	r3, [pc, #180]	; (8001a6c <MX_GPIO_Init+0x124>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a2c      	ldr	r2, [pc, #176]	; (8001a6c <MX_GPIO_Init+0x124>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b2a      	ldr	r3, [pc, #168]	; (8001a6c <MX_GPIO_Init+0x124>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	603b      	str	r3, [r7, #0]
 80019d2:	4b26      	ldr	r3, [pc, #152]	; (8001a6c <MX_GPIO_Init+0x124>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a25      	ldr	r2, [pc, #148]	; (8001a6c <MX_GPIO_Init+0x124>)
 80019d8:	f043 0308 	orr.w	r3, r3, #8
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b23      	ldr	r3, [pc, #140]	; (8001a6c <MX_GPIO_Init+0x124>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPKRPower_GPIO_Port, SPKRPower_Pin, GPIO_PIN_RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019f0:	481f      	ldr	r0, [pc, #124]	; (8001a70 <MX_GPIO_Init+0x128>)
 80019f2:	f001 fbeb 	bl	80031cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 80019f6:	2200      	movs	r2, #0
 80019f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019fc:	481d      	ldr	r0, [pc, #116]	; (8001a74 <MX_GPIO_Init+0x12c>)
 80019fe:	f001 fbe5 	bl	80031cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2118      	movs	r1, #24
 8001a06:	481c      	ldr	r0, [pc, #112]	; (8001a78 <MX_GPIO_Init+0x130>)
 8001a08:	f001 fbe0 	bl	80031cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPKRPower_Pin */
  GPIO_InitStruct.Pin = SPKRPower_Pin;
 8001a0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a12:	2301      	movs	r3, #1
 8001a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPKRPower_GPIO_Port, &GPIO_InitStruct);
 8001a1e:	f107 0314 	add.w	r3, r7, #20
 8001a22:	4619      	mov	r1, r3
 8001a24:	4812      	ldr	r0, [pc, #72]	; (8001a70 <MX_GPIO_Init+0x128>)
 8001a26:	f001 f939 	bl	8002c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OtgPower_Pin */
  GPIO_InitStruct.Pin = OtgPower_Pin;
 8001a2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a30:	2301      	movs	r3, #1
 8001a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OtgPower_GPIO_Port, &GPIO_InitStruct);
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	4619      	mov	r1, r3
 8001a42:	480c      	ldr	r0, [pc, #48]	; (8001a74 <MX_GPIO_Init+0x12c>)
 8001a44:	f001 f92a 	bl	8002c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 8001a48:	2318      	movs	r3, #24
 8001a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	2300      	movs	r3, #0
 8001a56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4806      	ldr	r0, [pc, #24]	; (8001a78 <MX_GPIO_Init+0x130>)
 8001a60:	f001 f91c 	bl	8002c9c <HAL_GPIO_Init>

}
 8001a64:	bf00      	nop
 8001a66:	3728      	adds	r7, #40	; 0x28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40020400 	.word	0x40020400
 8001a74:	40020800 	.word	0x40020800
 8001a78:	40020c00 	.word	0x40020c00

08001a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a80:	b672      	cpsid	i
}
 8001a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001a84:	e7fe      	b.n	8001a84 <Error_Handler+0x8>
	...

08001a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <HAL_MspInit+0x4c>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	4a0f      	ldr	r2, [pc, #60]	; (8001ad4 <HAL_MspInit+0x4c>)
 8001a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <HAL_MspInit+0x4c>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	603b      	str	r3, [r7, #0]
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <HAL_MspInit+0x4c>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	4a08      	ldr	r2, [pc, #32]	; (8001ad4 <HAL_MspInit+0x4c>)
 8001ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_MspInit+0x4c>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800

08001ad8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	; 0x28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a19      	ldr	r2, [pc, #100]	; (8001b5c <HAL_I2C_MspInit+0x84>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d12c      	bne.n	8001b54 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <HAL_I2C_MspInit+0x88>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a17      	ldr	r2, [pc, #92]	; (8001b60 <HAL_I2C_MspInit+0x88>)
 8001b04:	f043 0302 	orr.w	r3, r3, #2
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <HAL_I2C_MspInit+0x88>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b1c:	2312      	movs	r3, #18
 8001b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b24:	2303      	movs	r3, #3
 8001b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b28:	2304      	movs	r3, #4
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	4619      	mov	r1, r3
 8001b32:	480c      	ldr	r0, [pc, #48]	; (8001b64 <HAL_I2C_MspInit+0x8c>)
 8001b34:	f001 f8b2 	bl	8002c9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <HAL_I2C_MspInit+0x88>)
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <HAL_I2C_MspInit+0x88>)
 8001b42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b46:	6413      	str	r3, [r2, #64]	; 0x40
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <HAL_I2C_MspInit+0x88>)
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b54:	bf00      	nop
 8001b56:	3728      	adds	r7, #40	; 0x28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40005400 	.word	0x40005400
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40020400 	.word	0x40020400

08001b68 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a0b      	ldr	r2, [pc, #44]	; (8001ba4 <HAL_I2C_MspDeInit+0x3c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d10f      	bne.n	8001b9a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <HAL_I2C_MspDeInit+0x40>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <HAL_I2C_MspDeInit+0x40>)
 8001b80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b84:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001b86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b8a:	4808      	ldr	r0, [pc, #32]	; (8001bac <HAL_I2C_MspDeInit+0x44>)
 8001b8c:	f001 fa22 	bl	8002fd4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001b90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b94:	4805      	ldr	r0, [pc, #20]	; (8001bac <HAL_I2C_MspDeInit+0x44>)
 8001b96:	f001 fa1d 	bl	8002fd4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40005400 	.word	0x40005400
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40020400 	.word	0x40020400

08001bb0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08e      	sub	sp, #56	; 0x38
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a86      	ldr	r2, [pc, #536]	; (8001de8 <HAL_I2S_MspInit+0x238>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	f040 8085 	bne.w	8001cde <HAL_I2S_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	623b      	str	r3, [r7, #32]
 8001bd8:	4b84      	ldr	r3, [pc, #528]	; (8001dec <HAL_I2S_MspInit+0x23c>)
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	4a83      	ldr	r2, [pc, #524]	; (8001dec <HAL_I2S_MspInit+0x23c>)
 8001bde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be2:	6413      	str	r3, [r2, #64]	; 0x40
 8001be4:	4b81      	ldr	r3, [pc, #516]	; (8001dec <HAL_I2S_MspInit+0x23c>)
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bec:	623b      	str	r3, [r7, #32]
 8001bee:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61fb      	str	r3, [r7, #28]
 8001bf4:	4b7d      	ldr	r3, [pc, #500]	; (8001dec <HAL_I2S_MspInit+0x23c>)
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf8:	4a7c      	ldr	r2, [pc, #496]	; (8001dec <HAL_I2S_MspInit+0x23c>)
 8001bfa:	f043 0302 	orr.w	r3, r3, #2
 8001bfe:	6313      	str	r3, [r2, #48]	; 0x30
 8001c00:	4b7a      	ldr	r3, [pc, #488]	; (8001dec <HAL_I2S_MspInit+0x23c>)
 8001c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	61fb      	str	r3, [r7, #28]
 8001c0a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61bb      	str	r3, [r7, #24]
 8001c10:	4b76      	ldr	r3, [pc, #472]	; (8001dec <HAL_I2S_MspInit+0x23c>)
 8001c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c14:	4a75      	ldr	r2, [pc, #468]	; (8001dec <HAL_I2S_MspInit+0x23c>)
 8001c16:	f043 0304 	orr.w	r3, r3, #4
 8001c1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1c:	4b73      	ldr	r3, [pc, #460]	; (8001dec <HAL_I2S_MspInit+0x23c>)
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	61bb      	str	r3, [r7, #24]
 8001c26:	69bb      	ldr	r3, [r7, #24]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001c28:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c36:	2300      	movs	r3, #0
 8001c38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c3a:	2305      	movs	r3, #5
 8001c3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c42:	4619      	mov	r1, r3
 8001c44:	486a      	ldr	r0, [pc, #424]	; (8001df0 <HAL_I2S_MspInit+0x240>)
 8001c46:	f001 f829 	bl	8002c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c4a:	2340      	movs	r3, #64	; 0x40
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c56:	2300      	movs	r3, #0
 8001c58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c5a:	2305      	movs	r3, #5
 8001c5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c62:	4619      	mov	r1, r3
 8001c64:	4863      	ldr	r0, [pc, #396]	; (8001df4 <HAL_I2S_MspInit+0x244>)
 8001c66:	f001 f819 	bl	8002c9c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001c6a:	4b63      	ldr	r3, [pc, #396]	; (8001df8 <HAL_I2S_MspInit+0x248>)
 8001c6c:	4a63      	ldr	r2, [pc, #396]	; (8001dfc <HAL_I2S_MspInit+0x24c>)
 8001c6e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001c70:	4b61      	ldr	r3, [pc, #388]	; (8001df8 <HAL_I2S_MspInit+0x248>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c76:	4b60      	ldr	r3, [pc, #384]	; (8001df8 <HAL_I2S_MspInit+0x248>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c7c:	4b5e      	ldr	r3, [pc, #376]	; (8001df8 <HAL_I2S_MspInit+0x248>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c82:	4b5d      	ldr	r3, [pc, #372]	; (8001df8 <HAL_I2S_MspInit+0x248>)
 8001c84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c88:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c8a:	4b5b      	ldr	r3, [pc, #364]	; (8001df8 <HAL_I2S_MspInit+0x248>)
 8001c8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c90:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c92:	4b59      	ldr	r3, [pc, #356]	; (8001df8 <HAL_I2S_MspInit+0x248>)
 8001c94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c98:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001c9a:	4b57      	ldr	r3, [pc, #348]	; (8001df8 <HAL_I2S_MspInit+0x248>)
 8001c9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ca0:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ca2:	4b55      	ldr	r3, [pc, #340]	; (8001df8 <HAL_I2S_MspInit+0x248>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001ca8:	4b53      	ldr	r3, [pc, #332]	; (8001df8 <HAL_I2S_MspInit+0x248>)
 8001caa:	2204      	movs	r2, #4
 8001cac:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001cae:	4b52      	ldr	r3, [pc, #328]	; (8001df8 <HAL_I2S_MspInit+0x248>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001cb4:	4b50      	ldr	r3, [pc, #320]	; (8001df8 <HAL_I2S_MspInit+0x248>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001cba:	4b4f      	ldr	r3, [pc, #316]	; (8001df8 <HAL_I2S_MspInit+0x248>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001cc0:	484d      	ldr	r0, [pc, #308]	; (8001df8 <HAL_I2S_MspInit+0x248>)
 8001cc2:	f000 fc1d 	bl	8002500 <HAL_DMA_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <HAL_I2S_MspInit+0x120>
    {
      Error_Handler();
 8001ccc:	f7ff fed6 	bl	8001a7c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a49      	ldr	r2, [pc, #292]	; (8001df8 <HAL_I2S_MspInit+0x248>)
 8001cd4:	63da      	str	r2, [r3, #60]	; 0x3c
 8001cd6:	4a48      	ldr	r2, [pc, #288]	; (8001df8 <HAL_I2S_MspInit+0x248>)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001cdc:	e080      	b.n	8001de0 <HAL_I2S_MspInit+0x230>
  else if(hi2s->Instance==SPI3)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a47      	ldr	r2, [pc, #284]	; (8001e00 <HAL_I2S_MspInit+0x250>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d17b      	bne.n	8001de0 <HAL_I2S_MspInit+0x230>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	4b3f      	ldr	r3, [pc, #252]	; (8001dec <HAL_I2S_MspInit+0x23c>)
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	4a3e      	ldr	r2, [pc, #248]	; (8001dec <HAL_I2S_MspInit+0x23c>)
 8001cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf8:	4b3c      	ldr	r3, [pc, #240]	; (8001dec <HAL_I2S_MspInit+0x23c>)
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d04:	2300      	movs	r3, #0
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	4b38      	ldr	r3, [pc, #224]	; (8001dec <HAL_I2S_MspInit+0x23c>)
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0c:	4a37      	ldr	r2, [pc, #220]	; (8001dec <HAL_I2S_MspInit+0x23c>)
 8001d0e:	f043 0304 	orr.w	r3, r3, #4
 8001d12:	6313      	str	r3, [r2, #48]	; 0x30
 8001d14:	4b35      	ldr	r3, [pc, #212]	; (8001dec <HAL_I2S_MspInit+0x23c>)
 8001d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d20:	2300      	movs	r3, #0
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	4b31      	ldr	r3, [pc, #196]	; (8001dec <HAL_I2S_MspInit+0x23c>)
 8001d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d28:	4a30      	ldr	r2, [pc, #192]	; (8001dec <HAL_I2S_MspInit+0x23c>)
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d30:	4b2e      	ldr	r3, [pc, #184]	; (8001dec <HAL_I2S_MspInit+0x23c>)
 8001d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001d3c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d4e:	2306      	movs	r3, #6
 8001d50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d56:	4619      	mov	r1, r3
 8001d58:	4826      	ldr	r0, [pc, #152]	; (8001df4 <HAL_I2S_MspInit+0x244>)
 8001d5a:	f000 ff9f 	bl	8002c9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d70:	2306      	movs	r3, #6
 8001d72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4822      	ldr	r0, [pc, #136]	; (8001e04 <HAL_I2S_MspInit+0x254>)
 8001d7c:	f000 ff8e 	bl	8002c9c <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001d80:	4b21      	ldr	r3, [pc, #132]	; (8001e08 <HAL_I2S_MspInit+0x258>)
 8001d82:	4a22      	ldr	r2, [pc, #136]	; (8001e0c <HAL_I2S_MspInit+0x25c>)
 8001d84:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001d86:	4b20      	ldr	r3, [pc, #128]	; (8001e08 <HAL_I2S_MspInit+0x258>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d8c:	4b1e      	ldr	r3, [pc, #120]	; (8001e08 <HAL_I2S_MspInit+0x258>)
 8001d8e:	2240      	movs	r2, #64	; 0x40
 8001d90:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d92:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <HAL_I2S_MspInit+0x258>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d98:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <HAL_I2S_MspInit+0x258>)
 8001d9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d9e:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001da0:	4b19      	ldr	r3, [pc, #100]	; (8001e08 <HAL_I2S_MspInit+0x258>)
 8001da2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001da6:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001da8:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <HAL_I2S_MspInit+0x258>)
 8001daa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dae:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001db0:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <HAL_I2S_MspInit+0x258>)
 8001db2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001db6:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001db8:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <HAL_I2S_MspInit+0x258>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dbe:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <HAL_I2S_MspInit+0x258>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001dc4:	4810      	ldr	r0, [pc, #64]	; (8001e08 <HAL_I2S_MspInit+0x258>)
 8001dc6:	f000 fb9b 	bl	8002500 <HAL_DMA_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <HAL_I2S_MspInit+0x224>
      Error_Handler();
 8001dd0:	f7ff fe54 	bl	8001a7c <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a0c      	ldr	r2, [pc, #48]	; (8001e08 <HAL_I2S_MspInit+0x258>)
 8001dd8:	639a      	str	r2, [r3, #56]	; 0x38
 8001dda:	4a0b      	ldr	r2, [pc, #44]	; (8001e08 <HAL_I2S_MspInit+0x258>)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001de0:	bf00      	nop
 8001de2:	3738      	adds	r7, #56	; 0x38
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40003800 	.word	0x40003800
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40020400 	.word	0x40020400
 8001df4:	40020800 	.word	0x40020800
 8001df8:	200004cc 	.word	0x200004cc
 8001dfc:	40026058 	.word	0x40026058
 8001e00:	40003c00 	.word	0x40003c00
 8001e04:	40020000 	.word	0x40020000
 8001e08:	2000052c 	.word	0x2000052c
 8001e0c:	40026088 	.word	0x40026088

08001e10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08a      	sub	sp, #40	; 0x28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a30      	ldr	r2, [pc, #192]	; (8001ef0 <HAL_UART_MspInit+0xe0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d15a      	bne.n	8001ee8 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	4b2f      	ldr	r3, [pc, #188]	; (8001ef4 <HAL_UART_MspInit+0xe4>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3a:	4a2e      	ldr	r2, [pc, #184]	; (8001ef4 <HAL_UART_MspInit+0xe4>)
 8001e3c:	f043 0310 	orr.w	r3, r3, #16
 8001e40:	6453      	str	r3, [r2, #68]	; 0x44
 8001e42:	4b2c      	ldr	r3, [pc, #176]	; (8001ef4 <HAL_UART_MspInit+0xe4>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	f003 0310 	and.w	r3, r3, #16
 8001e4a:	613b      	str	r3, [r7, #16]
 8001e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	4b28      	ldr	r3, [pc, #160]	; (8001ef4 <HAL_UART_MspInit+0xe4>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	4a27      	ldr	r2, [pc, #156]	; (8001ef4 <HAL_UART_MspInit+0xe4>)
 8001e58:	f043 0302 	orr.w	r3, r3, #2
 8001e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5e:	4b25      	ldr	r3, [pc, #148]	; (8001ef4 <HAL_UART_MspInit+0xe4>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e6a:	23c0      	movs	r3, #192	; 0xc0
 8001e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e76:	2303      	movs	r3, #3
 8001e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e7a:	2307      	movs	r3, #7
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7e:	f107 0314 	add.w	r3, r7, #20
 8001e82:	4619      	mov	r1, r3
 8001e84:	481c      	ldr	r0, [pc, #112]	; (8001ef8 <HAL_UART_MspInit+0xe8>)
 8001e86:	f000 ff09 	bl	8002c9c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001e8a:	4b1c      	ldr	r3, [pc, #112]	; (8001efc <HAL_UART_MspInit+0xec>)
 8001e8c:	4a1c      	ldr	r2, [pc, #112]	; (8001f00 <HAL_UART_MspInit+0xf0>)
 8001e8e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001e90:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <HAL_UART_MspInit+0xec>)
 8001e92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e96:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e98:	4b18      	ldr	r3, [pc, #96]	; (8001efc <HAL_UART_MspInit+0xec>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e9e:	4b17      	ldr	r3, [pc, #92]	; (8001efc <HAL_UART_MspInit+0xec>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ea4:	4b15      	ldr	r3, [pc, #84]	; (8001efc <HAL_UART_MspInit+0xec>)
 8001ea6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eaa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eac:	4b13      	ldr	r3, [pc, #76]	; (8001efc <HAL_UART_MspInit+0xec>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001eb2:	4b12      	ldr	r3, [pc, #72]	; (8001efc <HAL_UART_MspInit+0xec>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001eb8:	4b10      	ldr	r3, [pc, #64]	; (8001efc <HAL_UART_MspInit+0xec>)
 8001eba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ebe:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ec0:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <HAL_UART_MspInit+0xec>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ec6:	4b0d      	ldr	r3, [pc, #52]	; (8001efc <HAL_UART_MspInit+0xec>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001ecc:	480b      	ldr	r0, [pc, #44]	; (8001efc <HAL_UART_MspInit+0xec>)
 8001ece:	f000 fb17 	bl	8002500 <HAL_DMA_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001ed8:	f7ff fdd0 	bl	8001a7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a07      	ldr	r2, [pc, #28]	; (8001efc <HAL_UART_MspInit+0xec>)
 8001ee0:	639a      	str	r2, [r3, #56]	; 0x38
 8001ee2:	4a06      	ldr	r2, [pc, #24]	; (8001efc <HAL_UART_MspInit+0xec>)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ee8:	bf00      	nop
 8001eea:	3728      	adds	r7, #40	; 0x28
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40011000 	.word	0x40011000
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40020400 	.word	0x40020400
 8001efc:	200005d0 	.word	0x200005d0
 8001f00:	40026440 	.word	0x40026440

08001f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <NMI_Handler+0x4>

08001f0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f0e:	e7fe      	b.n	8001f0e <HardFault_Handler+0x4>

08001f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f14:	e7fe      	b.n	8001f14 <MemManage_Handler+0x4>

08001f16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f1a:	e7fe      	b.n	8001f1a <BusFault_Handler+0x4>

08001f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f20:	e7fe      	b.n	8001f20 <UsageFault_Handler+0x4>

08001f22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f50:	f000 f980 	bl	8002254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001f5c:	4802      	ldr	r0, [pc, #8]	; (8001f68 <DMA1_Stream3_IRQHandler+0x10>)
 8001f5e:	f000 fc33 	bl	80027c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	200004cc 	.word	0x200004cc

08001f6c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001f70:	4802      	ldr	r0, [pc, #8]	; (8001f7c <DMA1_Stream5_IRQHandler+0x10>)
 8001f72:	f000 fc29 	bl	80027c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	2000052c 	.word	0x2000052c

08001f80 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001f84:	4802      	ldr	r0, [pc, #8]	; (8001f90 <DMA2_Stream2_IRQHandler+0x10>)
 8001f86:	f000 fc1f 	bl	80027c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	200005d0 	.word	0x200005d0

08001f94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001f98:	4802      	ldr	r0, [pc, #8]	; (8001fa4 <OTG_FS_IRQHandler+0x10>)
 8001f9a:	f001 fb9b 	bl	80036d4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	2000363c 	.word	0x2000363c

08001fa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fb0:	4a14      	ldr	r2, [pc, #80]	; (8002004 <_sbrk+0x5c>)
 8001fb2:	4b15      	ldr	r3, [pc, #84]	; (8002008 <_sbrk+0x60>)
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fbc:	4b13      	ldr	r3, [pc, #76]	; (800200c <_sbrk+0x64>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d102      	bne.n	8001fca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fc4:	4b11      	ldr	r3, [pc, #68]	; (800200c <_sbrk+0x64>)
 8001fc6:	4a12      	ldr	r2, [pc, #72]	; (8002010 <_sbrk+0x68>)
 8001fc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fca:	4b10      	ldr	r3, [pc, #64]	; (800200c <_sbrk+0x64>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d207      	bcs.n	8001fe8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fd8:	f009 fb24 	bl	800b624 <__errno>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	220c      	movs	r2, #12
 8001fe0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fe2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fe6:	e009      	b.n	8001ffc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fe8:	4b08      	ldr	r3, [pc, #32]	; (800200c <_sbrk+0x64>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fee:	4b07      	ldr	r3, [pc, #28]	; (800200c <_sbrk+0x64>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	4a05      	ldr	r2, [pc, #20]	; (800200c <_sbrk+0x64>)
 8001ff8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20020000 	.word	0x20020000
 8002008:	00000400 	.word	0x00000400
 800200c:	20003244 	.word	0x20003244
 8002010:	20003950 	.word	0x20003950

08002014 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002018:	4b06      	ldr	r3, [pc, #24]	; (8002034 <SystemInit+0x20>)
 800201a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201e:	4a05      	ldr	r2, [pc, #20]	; (8002034 <SystemInit+0x20>)
 8002020:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002024:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002038:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002070 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800203c:	480d      	ldr	r0, [pc, #52]	; (8002074 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800203e:	490e      	ldr	r1, [pc, #56]	; (8002078 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002040:	4a0e      	ldr	r2, [pc, #56]	; (800207c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002042:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002044:	e002      	b.n	800204c <LoopCopyDataInit>

08002046 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002046:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002048:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800204a:	3304      	adds	r3, #4

0800204c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800204c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800204e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002050:	d3f9      	bcc.n	8002046 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002052:	4a0b      	ldr	r2, [pc, #44]	; (8002080 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002054:	4c0b      	ldr	r4, [pc, #44]	; (8002084 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002056:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002058:	e001      	b.n	800205e <LoopFillZerobss>

0800205a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800205a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800205c:	3204      	adds	r2, #4

0800205e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800205e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002060:	d3fb      	bcc.n	800205a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002062:	f7ff ffd7 	bl	8002014 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002066:	f009 fae3 	bl	800b630 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800206a:	f7ff fa4b 	bl	8001504 <main>
  bx  lr    
 800206e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002070:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002074:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002078:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 800207c:	0800b980 	.word	0x0800b980
  ldr r2, =_sbss
 8002080:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8002084:	20003950 	.word	0x20003950

08002088 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002088:	e7fe      	b.n	8002088 <ADC_IRQHandler>

0800208a <Commander_Init>:

#include "stm32f4xx_hal.h"
#include "commander.h"
#include <string.h>

void Commander_Init(Commander_HandleTypeDef *hcommander, UART_HandleTypeDef *huart, DMA_HandleTypeDef *hdma_uart_rx, void (*command_callback)(Command command)) {
 800208a:	b480      	push	{r7}
 800208c:	b085      	sub	sp, #20
 800208e:	af00      	add	r7, sp, #0
 8002090:	60f8      	str	r0, [r7, #12]
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	607a      	str	r2, [r7, #4]
 8002096:	603b      	str	r3, [r7, #0]
	hcommander->huart = huart;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	601a      	str	r2, [r3, #0]
	hcommander->hdma_uart_rx = hdma_uart_rx;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	605a      	str	r2, [r3, #4]
	hcommander->rear = -1;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	22ff      	movs	r2, #255	; 0xff
 80020a8:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
	hcommander->front = -1;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	22ff      	movs	r2, #255	; 0xff
 80020b0:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
	hcommander->commands_to_handle = 0;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
	hcommander->counter = 0;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	f8c3 2950 	str.w	r2, [r3, #2384]	; 0x950
	hcommander->command_callback = command_callback;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	f8c3 2954 	str.w	r2, [r3, #2388]	; 0x954
}
 80020cc:	bf00      	nop
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <Commander_Start>:

void Commander_Start(Commander_HandleTypeDef *hcommander) {
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(hcommander->huart, hcommander->uart_rx_buffer, COMMAND_BYTESIZE * 2);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6818      	ldr	r0, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3308      	adds	r3, #8
 80020e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020ec:	4619      	mov	r1, r3
 80020ee:	f005 f93c 	bl	800736a <HAL_UART_Receive_DMA>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <Commander_Enqueue>:
			else hcommander->front++;
		}
	}
}

void Commander_Enqueue(Commander_HandleTypeDef *hcommander, Command *command) {
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	6039      	str	r1, [r7, #0]


	if((hcommander->front == 0 && hcommander->rear == COMMANDS_COUNT-1) || (hcommander->front == hcommander->rear+1)) {
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f993 394d 	ldrsb.w	r3, [r3, #2381]	; 0x94d
 800210a:	2b00      	cmp	r3, #0
 800210c:	d104      	bne.n	8002118 <Commander_Enqueue+0x1e>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f993 394c 	ldrsb.w	r3, [r3, #2380]	; 0x94c
 8002114:	2b0f      	cmp	r3, #15
 8002116:	d046      	beq.n	80021a6 <Commander_Enqueue+0xac>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f993 394d 	ldrsb.w	r3, [r3, #2381]	; 0x94d
 800211e:	461a      	mov	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f993 394c 	ldrsb.w	r3, [r3, #2380]	; 0x94c
 8002126:	3301      	adds	r3, #1
 8002128:	429a      	cmp	r2, r3
 800212a:	d03c      	beq.n	80021a6 <Commander_Enqueue+0xac>
		// overflow
	} else {
		if(hcommander->front == -1) {
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f993 394d 	ldrsb.w	r3, [r3, #2381]	; 0x94d
 8002132:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002136:	d108      	bne.n	800214a <Commander_Enqueue+0x50>
			hcommander->front = 0;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
			hcommander->rear = 0;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
 8002148:	e013      	b.n	8002172 <Commander_Enqueue+0x78>
		} else {
			if(hcommander->rear == COMMANDS_COUNT-1) hcommander->rear = 0;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f993 394c 	ldrsb.w	r3, [r3, #2380]	; 0x94c
 8002150:	2b0f      	cmp	r3, #15
 8002152:	d104      	bne.n	800215e <Commander_Enqueue+0x64>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
 800215c:	e009      	b.n	8002172 <Commander_Enqueue+0x78>
			else hcommander->rear++;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f993 394c 	ldrsb.w	r3, [r3, #2380]	; 0x94c
 8002164:	b2db      	uxtb	r3, r3
 8002166:	3301      	adds	r3, #1
 8002168:	b2db      	uxtb	r3, r3
 800216a:	b25a      	sxtb	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
		}
		memcpy(hcommander->command_buffer + hcommander->rear, command, COMMAND_BYTESIZE);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f503 7286 	add.w	r2, r3, #268	; 0x10c
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f993 394c 	ldrsb.w	r3, [r3, #2380]	; 0x94c
 800217e:	4619      	mov	r1, r3
 8002180:	460b      	mov	r3, r1
 8002182:	015b      	lsls	r3, r3, #5
 8002184:	440b      	add	r3, r1
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	2282      	movs	r2, #130	; 0x82
 800218c:	6839      	ldr	r1, [r7, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f009 fa82 	bl	800b698 <memcpy>
		hcommander->commands_to_handle++;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 394e 	ldrb.w	r3, [r3, #2382]	; 0x94e
 800219a:	3301      	adds	r3, #1
 800219c:	b2da      	uxtb	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
	}


}
 80021a4:	e7ff      	b.n	80021a6 <Commander_Enqueue+0xac>
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021b4:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <HAL_Init+0x40>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a0d      	ldr	r2, [pc, #52]	; (80021f0 <HAL_Init+0x40>)
 80021ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021c0:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <HAL_Init+0x40>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a0a      	ldr	r2, [pc, #40]	; (80021f0 <HAL_Init+0x40>)
 80021c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021cc:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <HAL_Init+0x40>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a07      	ldr	r2, [pc, #28]	; (80021f0 <HAL_Init+0x40>)
 80021d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d8:	2003      	movs	r0, #3
 80021da:	f000 f94f 	bl	800247c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021de:	200f      	movs	r0, #15
 80021e0:	f000 f808 	bl	80021f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021e4:	f7ff fc50 	bl	8001a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40023c00 	.word	0x40023c00

080021f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021fc:	4b12      	ldr	r3, [pc, #72]	; (8002248 <HAL_InitTick+0x54>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	4b12      	ldr	r3, [pc, #72]	; (800224c <HAL_InitTick+0x58>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	4619      	mov	r1, r3
 8002206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800220a:	fbb3 f3f1 	udiv	r3, r3, r1
 800220e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002212:	4618      	mov	r0, r3
 8002214:	f000 f967 	bl	80024e6 <HAL_SYSTICK_Config>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e00e      	b.n	8002240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b0f      	cmp	r3, #15
 8002226:	d80a      	bhi.n	800223e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002228:	2200      	movs	r2, #0
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002230:	f000 f92f 	bl	8002492 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002234:	4a06      	ldr	r2, [pc, #24]	; (8002250 <HAL_InitTick+0x5c>)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	e000      	b.n	8002240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
}
 8002240:	4618      	mov	r0, r3
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20000238 	.word	0x20000238
 800224c:	20000240 	.word	0x20000240
 8002250:	2000023c 	.word	0x2000023c

08002254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_IncTick+0x20>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	461a      	mov	r2, r3
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <HAL_IncTick+0x24>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4413      	add	r3, r2
 8002264:	4a04      	ldr	r2, [pc, #16]	; (8002278 <HAL_IncTick+0x24>)
 8002266:	6013      	str	r3, [r2, #0]
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	20000240 	.word	0x20000240
 8002278:	20003248 	.word	0x20003248

0800227c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  return uwTick;
 8002280:	4b03      	ldr	r3, [pc, #12]	; (8002290 <HAL_GetTick+0x14>)
 8002282:	681b      	ldr	r3, [r3, #0]
}
 8002284:	4618      	mov	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	20003248 	.word	0x20003248

08002294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800229c:	f7ff ffee 	bl	800227c <HAL_GetTick>
 80022a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022ac:	d005      	beq.n	80022ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ae:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <HAL_Delay+0x44>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	461a      	mov	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4413      	add	r3, r2
 80022b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022ba:	bf00      	nop
 80022bc:	f7ff ffde 	bl	800227c <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d8f7      	bhi.n	80022bc <HAL_Delay+0x28>
  {
  }
}
 80022cc:	bf00      	nop
 80022ce:	bf00      	nop
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000240 	.word	0x20000240

080022dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022ec:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <__NVIC_SetPriorityGrouping+0x44>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022f8:	4013      	ands	r3, r2
 80022fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002304:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800230c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800230e:	4a04      	ldr	r2, [pc, #16]	; (8002320 <__NVIC_SetPriorityGrouping+0x44>)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	60d3      	str	r3, [r2, #12]
}
 8002314:	bf00      	nop
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002328:	4b04      	ldr	r3, [pc, #16]	; (800233c <__NVIC_GetPriorityGrouping+0x18>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	0a1b      	lsrs	r3, r3, #8
 800232e:	f003 0307 	and.w	r3, r3, #7
}
 8002332:	4618      	mov	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234e:	2b00      	cmp	r3, #0
 8002350:	db0b      	blt.n	800236a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	f003 021f 	and.w	r2, r3, #31
 8002358:	4907      	ldr	r1, [pc, #28]	; (8002378 <__NVIC_EnableIRQ+0x38>)
 800235a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235e:	095b      	lsrs	r3, r3, #5
 8002360:	2001      	movs	r0, #1
 8002362:	fa00 f202 	lsl.w	r2, r0, r2
 8002366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	e000e100 	.word	0xe000e100

0800237c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	6039      	str	r1, [r7, #0]
 8002386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238c:	2b00      	cmp	r3, #0
 800238e:	db0a      	blt.n	80023a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	b2da      	uxtb	r2, r3
 8002394:	490c      	ldr	r1, [pc, #48]	; (80023c8 <__NVIC_SetPriority+0x4c>)
 8002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239a:	0112      	lsls	r2, r2, #4
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	440b      	add	r3, r1
 80023a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023a4:	e00a      	b.n	80023bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	4908      	ldr	r1, [pc, #32]	; (80023cc <__NVIC_SetPriority+0x50>)
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	3b04      	subs	r3, #4
 80023b4:	0112      	lsls	r2, r2, #4
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	440b      	add	r3, r1
 80023ba:	761a      	strb	r2, [r3, #24]
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	e000e100 	.word	0xe000e100
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b089      	sub	sp, #36	; 0x24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f1c3 0307 	rsb	r3, r3, #7
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	bf28      	it	cs
 80023ee:	2304      	movcs	r3, #4
 80023f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	3304      	adds	r3, #4
 80023f6:	2b06      	cmp	r3, #6
 80023f8:	d902      	bls.n	8002400 <NVIC_EncodePriority+0x30>
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	3b03      	subs	r3, #3
 80023fe:	e000      	b.n	8002402 <NVIC_EncodePriority+0x32>
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43da      	mvns	r2, r3
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	401a      	ands	r2, r3
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002418:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	fa01 f303 	lsl.w	r3, r1, r3
 8002422:	43d9      	mvns	r1, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002428:	4313      	orrs	r3, r2
         );
}
 800242a:	4618      	mov	r0, r3
 800242c:	3724      	adds	r7, #36	; 0x24
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
	...

08002438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3b01      	subs	r3, #1
 8002444:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002448:	d301      	bcc.n	800244e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800244a:	2301      	movs	r3, #1
 800244c:	e00f      	b.n	800246e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800244e:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <SysTick_Config+0x40>)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3b01      	subs	r3, #1
 8002454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002456:	210f      	movs	r1, #15
 8002458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800245c:	f7ff ff8e 	bl	800237c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002460:	4b05      	ldr	r3, [pc, #20]	; (8002478 <SysTick_Config+0x40>)
 8002462:	2200      	movs	r2, #0
 8002464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002466:	4b04      	ldr	r3, [pc, #16]	; (8002478 <SysTick_Config+0x40>)
 8002468:	2207      	movs	r2, #7
 800246a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	e000e010 	.word	0xe000e010

0800247c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f7ff ff29 	bl	80022dc <__NVIC_SetPriorityGrouping>
}
 800248a:	bf00      	nop
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002492:	b580      	push	{r7, lr}
 8002494:	b086      	sub	sp, #24
 8002496:	af00      	add	r7, sp, #0
 8002498:	4603      	mov	r3, r0
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	607a      	str	r2, [r7, #4]
 800249e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024a4:	f7ff ff3e 	bl	8002324 <__NVIC_GetPriorityGrouping>
 80024a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	68b9      	ldr	r1, [r7, #8]
 80024ae:	6978      	ldr	r0, [r7, #20]
 80024b0:	f7ff ff8e 	bl	80023d0 <NVIC_EncodePriority>
 80024b4:	4602      	mov	r2, r0
 80024b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ba:	4611      	mov	r1, r2
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff ff5d 	bl	800237c <__NVIC_SetPriority>
}
 80024c2:	bf00      	nop
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	4603      	mov	r3, r0
 80024d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff ff31 	bl	8002340 <__NVIC_EnableIRQ>
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff ffa2 	bl	8002438 <SysTick_Config>
 80024f4:	4603      	mov	r3, r0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800250c:	f7ff feb6 	bl	800227c <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e099      	b.n	8002650 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2202      	movs	r2, #2
 8002520:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0201 	bic.w	r2, r2, #1
 800253a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800253c:	e00f      	b.n	800255e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800253e:	f7ff fe9d 	bl	800227c <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b05      	cmp	r3, #5
 800254a:	d908      	bls.n	800255e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2220      	movs	r2, #32
 8002550:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2203      	movs	r2, #3
 8002556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e078      	b.n	8002650 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1e8      	bne.n	800253e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	4b38      	ldr	r3, [pc, #224]	; (8002658 <HAL_DMA_Init+0x158>)
 8002578:	4013      	ands	r3, r2
 800257a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800258a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002596:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	2b04      	cmp	r3, #4
 80025b6:	d107      	bne.n	80025c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c0:	4313      	orrs	r3, r2
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f023 0307 	bic.w	r3, r3, #7
 80025de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	d117      	bne.n	8002622 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00e      	beq.n	8002622 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 facd 	bl	8002ba4 <DMA_CheckFifoParam>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d008      	beq.n	8002622 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2240      	movs	r2, #64	; 0x40
 8002614:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800261e:	2301      	movs	r3, #1
 8002620:	e016      	b.n	8002650 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 fa84 	bl	8002b38 <DMA_CalcBaseAndBitshift>
 8002630:	4603      	mov	r3, r0
 8002632:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002638:	223f      	movs	r2, #63	; 0x3f
 800263a:	409a      	lsls	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	f010803f 	.word	0xf010803f

0800265c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e050      	b.n	8002710 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d101      	bne.n	800267e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800267a:	2302      	movs	r3, #2
 800267c:	e048      	b.n	8002710 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0201 	bic.w	r2, r2, #1
 800268c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2200      	movs	r2, #0
 800269c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2200      	movs	r2, #0
 80026a4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2200      	movs	r2, #0
 80026ac:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2200      	movs	r2, #0
 80026b4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2221      	movs	r2, #33	; 0x21
 80026bc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 fa3a 	bl	8002b38 <DMA_CalcBaseAndBitshift>
 80026c4:	4603      	mov	r3, r0
 80026c6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f0:	223f      	movs	r2, #63	; 0x3f
 80026f2:	409a      	lsls	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
 8002724:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002736:	2b01      	cmp	r3, #1
 8002738:	d101      	bne.n	800273e <HAL_DMA_Start_IT+0x26>
 800273a:	2302      	movs	r3, #2
 800273c:	e040      	b.n	80027c0 <HAL_DMA_Start_IT+0xa8>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b01      	cmp	r3, #1
 8002750:	d12f      	bne.n	80027b2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2202      	movs	r2, #2
 8002756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	68b9      	ldr	r1, [r7, #8]
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 f9b8 	bl	8002adc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002770:	223f      	movs	r2, #63	; 0x3f
 8002772:	409a      	lsls	r2, r3
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0216 	orr.w	r2, r2, #22
 8002786:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	2b00      	cmp	r3, #0
 800278e:	d007      	beq.n	80027a0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0208 	orr.w	r2, r2, #8
 800279e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0201 	orr.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	e005      	b.n	80027be <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027ba:	2302      	movs	r3, #2
 80027bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027be:	7dfb      	ldrb	r3, [r7, #23]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027d4:	4b8e      	ldr	r3, [pc, #568]	; (8002a10 <HAL_DMA_IRQHandler+0x248>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a8e      	ldr	r2, [pc, #568]	; (8002a14 <HAL_DMA_IRQHandler+0x24c>)
 80027da:	fba2 2303 	umull	r2, r3, r2, r3
 80027de:	0a9b      	lsrs	r3, r3, #10
 80027e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f2:	2208      	movs	r2, #8
 80027f4:	409a      	lsls	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d01a      	beq.n	8002834 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d013      	beq.n	8002834 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0204 	bic.w	r2, r2, #4
 800281a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002820:	2208      	movs	r2, #8
 8002822:	409a      	lsls	r2, r3
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282c:	f043 0201 	orr.w	r2, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002838:	2201      	movs	r2, #1
 800283a:	409a      	lsls	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4013      	ands	r3, r2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d012      	beq.n	800286a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00b      	beq.n	800286a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002856:	2201      	movs	r2, #1
 8002858:	409a      	lsls	r2, r3
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002862:	f043 0202 	orr.w	r2, r3, #2
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286e:	2204      	movs	r2, #4
 8002870:	409a      	lsls	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	4013      	ands	r3, r2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d012      	beq.n	80028a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00b      	beq.n	80028a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288c:	2204      	movs	r2, #4
 800288e:	409a      	lsls	r2, r3
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002898:	f043 0204 	orr.w	r2, r3, #4
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a4:	2210      	movs	r2, #16
 80028a6:	409a      	lsls	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d043      	beq.n	8002938 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d03c      	beq.n	8002938 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c2:	2210      	movs	r2, #16
 80028c4:	409a      	lsls	r2, r3
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d018      	beq.n	800290a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d108      	bne.n	80028f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d024      	beq.n	8002938 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	4798      	blx	r3
 80028f6:	e01f      	b.n	8002938 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d01b      	beq.n	8002938 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	4798      	blx	r3
 8002908:	e016      	b.n	8002938 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002914:	2b00      	cmp	r3, #0
 8002916:	d107      	bne.n	8002928 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0208 	bic.w	r2, r2, #8
 8002926:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293c:	2220      	movs	r2, #32
 800293e:	409a      	lsls	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 808f 	beq.w	8002a68 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0310 	and.w	r3, r3, #16
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 8087 	beq.w	8002a68 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295e:	2220      	movs	r2, #32
 8002960:	409a      	lsls	r2, r3
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b05      	cmp	r3, #5
 8002970:	d136      	bne.n	80029e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0216 	bic.w	r2, r2, #22
 8002980:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695a      	ldr	r2, [r3, #20]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002990:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	2b00      	cmp	r3, #0
 8002998:	d103      	bne.n	80029a2 <HAL_DMA_IRQHandler+0x1da>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d007      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 0208 	bic.w	r2, r2, #8
 80029b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b6:	223f      	movs	r2, #63	; 0x3f
 80029b8:	409a      	lsls	r2, r3
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d07e      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	4798      	blx	r3
        }
        return;
 80029de:	e079      	b.n	8002ad4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d01d      	beq.n	8002a2a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10d      	bne.n	8002a18 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d031      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	4798      	blx	r3
 8002a0c:	e02c      	b.n	8002a68 <HAL_DMA_IRQHandler+0x2a0>
 8002a0e:	bf00      	nop
 8002a10:	20000238 	.word	0x20000238
 8002a14:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d023      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	4798      	blx	r3
 8002a28:	e01e      	b.n	8002a68 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10f      	bne.n	8002a58 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0210 	bic.w	r2, r2, #16
 8002a46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d032      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d022      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2205      	movs	r2, #5
 8002a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0201 	bic.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	3301      	adds	r3, #1
 8002a98:	60bb      	str	r3, [r7, #8]
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d307      	bcc.n	8002ab0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f2      	bne.n	8002a94 <HAL_DMA_IRQHandler+0x2cc>
 8002aae:	e000      	b.n	8002ab2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ab0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d005      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	4798      	blx	r3
 8002ad2:	e000      	b.n	8002ad6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ad4:	bf00      	nop
    }
  }
}
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002af8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	2b40      	cmp	r3, #64	; 0x40
 8002b08:	d108      	bne.n	8002b1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b1a:	e007      	b.n	8002b2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	60da      	str	r2, [r3, #12]
}
 8002b2c:	bf00      	nop
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	3b10      	subs	r3, #16
 8002b48:	4a14      	ldr	r2, [pc, #80]	; (8002b9c <DMA_CalcBaseAndBitshift+0x64>)
 8002b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4e:	091b      	lsrs	r3, r3, #4
 8002b50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b52:	4a13      	ldr	r2, [pc, #76]	; (8002ba0 <DMA_CalcBaseAndBitshift+0x68>)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4413      	add	r3, r2
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	d909      	bls.n	8002b7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b6e:	f023 0303 	bic.w	r3, r3, #3
 8002b72:	1d1a      	adds	r2, r3, #4
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	659a      	str	r2, [r3, #88]	; 0x58
 8002b78:	e007      	b.n	8002b8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b82:	f023 0303 	bic.w	r3, r3, #3
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	aaaaaaab 	.word	0xaaaaaaab
 8002ba0:	0800b954 	.word	0x0800b954

08002ba4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d11f      	bne.n	8002bfe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	2b03      	cmp	r3, #3
 8002bc2:	d856      	bhi.n	8002c72 <DMA_CheckFifoParam+0xce>
 8002bc4:	a201      	add	r2, pc, #4	; (adr r2, 8002bcc <DMA_CheckFifoParam+0x28>)
 8002bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bca:	bf00      	nop
 8002bcc:	08002bdd 	.word	0x08002bdd
 8002bd0:	08002bef 	.word	0x08002bef
 8002bd4:	08002bdd 	.word	0x08002bdd
 8002bd8:	08002c73 	.word	0x08002c73
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d046      	beq.n	8002c76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bec:	e043      	b.n	8002c76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bf6:	d140      	bne.n	8002c7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bfc:	e03d      	b.n	8002c7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c06:	d121      	bne.n	8002c4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d837      	bhi.n	8002c7e <DMA_CheckFifoParam+0xda>
 8002c0e:	a201      	add	r2, pc, #4	; (adr r2, 8002c14 <DMA_CheckFifoParam+0x70>)
 8002c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c14:	08002c25 	.word	0x08002c25
 8002c18:	08002c2b 	.word	0x08002c2b
 8002c1c:	08002c25 	.word	0x08002c25
 8002c20:	08002c3d 	.word	0x08002c3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
      break;
 8002c28:	e030      	b.n	8002c8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d025      	beq.n	8002c82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c3a:	e022      	b.n	8002c82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c44:	d11f      	bne.n	8002c86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c4a:	e01c      	b.n	8002c86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d903      	bls.n	8002c5a <DMA_CheckFifoParam+0xb6>
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d003      	beq.n	8002c60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c58:	e018      	b.n	8002c8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c5e:	e015      	b.n	8002c8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00e      	beq.n	8002c8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c70:	e00b      	b.n	8002c8a <DMA_CheckFifoParam+0xe6>
      break;
 8002c72:	bf00      	nop
 8002c74:	e00a      	b.n	8002c8c <DMA_CheckFifoParam+0xe8>
      break;
 8002c76:	bf00      	nop
 8002c78:	e008      	b.n	8002c8c <DMA_CheckFifoParam+0xe8>
      break;
 8002c7a:	bf00      	nop
 8002c7c:	e006      	b.n	8002c8c <DMA_CheckFifoParam+0xe8>
      break;
 8002c7e:	bf00      	nop
 8002c80:	e004      	b.n	8002c8c <DMA_CheckFifoParam+0xe8>
      break;
 8002c82:	bf00      	nop
 8002c84:	e002      	b.n	8002c8c <DMA_CheckFifoParam+0xe8>
      break;   
 8002c86:	bf00      	nop
 8002c88:	e000      	b.n	8002c8c <DMA_CheckFifoParam+0xe8>
      break;
 8002c8a:	bf00      	nop
    }
  } 
  
  return status; 
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop

08002c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b089      	sub	sp, #36	; 0x24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]
 8002cb6:	e16b      	b.n	8002f90 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cb8:	2201      	movs	r2, #1
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	f040 815a 	bne.w	8002f8a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d005      	beq.n	8002cee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d130      	bne.n	8002d50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	2203      	movs	r2, #3
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4013      	ands	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d24:	2201      	movs	r2, #1
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4013      	ands	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	091b      	lsrs	r3, r3, #4
 8002d3a:	f003 0201 	and.w	r2, r3, #1
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d017      	beq.n	8002d8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	2203      	movs	r2, #3
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 0303 	and.w	r3, r3, #3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d123      	bne.n	8002de0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	08da      	lsrs	r2, r3, #3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3208      	adds	r2, #8
 8002da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	220f      	movs	r2, #15
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	691a      	ldr	r2, [r3, #16]
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	08da      	lsrs	r2, r3, #3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	3208      	adds	r2, #8
 8002dda:	69b9      	ldr	r1, [r7, #24]
 8002ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	2203      	movs	r2, #3
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43db      	mvns	r3, r3
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4013      	ands	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 0203 	and.w	r2, r3, #3
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 80b4 	beq.w	8002f8a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	4b60      	ldr	r3, [pc, #384]	; (8002fa8 <HAL_GPIO_Init+0x30c>)
 8002e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2a:	4a5f      	ldr	r2, [pc, #380]	; (8002fa8 <HAL_GPIO_Init+0x30c>)
 8002e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e30:	6453      	str	r3, [r2, #68]	; 0x44
 8002e32:	4b5d      	ldr	r3, [pc, #372]	; (8002fa8 <HAL_GPIO_Init+0x30c>)
 8002e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e3e:	4a5b      	ldr	r2, [pc, #364]	; (8002fac <HAL_GPIO_Init+0x310>)
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	089b      	lsrs	r3, r3, #2
 8002e44:	3302      	adds	r3, #2
 8002e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	220f      	movs	r2, #15
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a52      	ldr	r2, [pc, #328]	; (8002fb0 <HAL_GPIO_Init+0x314>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d02b      	beq.n	8002ec2 <HAL_GPIO_Init+0x226>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a51      	ldr	r2, [pc, #324]	; (8002fb4 <HAL_GPIO_Init+0x318>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d025      	beq.n	8002ebe <HAL_GPIO_Init+0x222>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a50      	ldr	r2, [pc, #320]	; (8002fb8 <HAL_GPIO_Init+0x31c>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d01f      	beq.n	8002eba <HAL_GPIO_Init+0x21e>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a4f      	ldr	r2, [pc, #316]	; (8002fbc <HAL_GPIO_Init+0x320>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d019      	beq.n	8002eb6 <HAL_GPIO_Init+0x21a>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a4e      	ldr	r2, [pc, #312]	; (8002fc0 <HAL_GPIO_Init+0x324>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d013      	beq.n	8002eb2 <HAL_GPIO_Init+0x216>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a4d      	ldr	r2, [pc, #308]	; (8002fc4 <HAL_GPIO_Init+0x328>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d00d      	beq.n	8002eae <HAL_GPIO_Init+0x212>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a4c      	ldr	r2, [pc, #304]	; (8002fc8 <HAL_GPIO_Init+0x32c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d007      	beq.n	8002eaa <HAL_GPIO_Init+0x20e>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a4b      	ldr	r2, [pc, #300]	; (8002fcc <HAL_GPIO_Init+0x330>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d101      	bne.n	8002ea6 <HAL_GPIO_Init+0x20a>
 8002ea2:	2307      	movs	r3, #7
 8002ea4:	e00e      	b.n	8002ec4 <HAL_GPIO_Init+0x228>
 8002ea6:	2308      	movs	r3, #8
 8002ea8:	e00c      	b.n	8002ec4 <HAL_GPIO_Init+0x228>
 8002eaa:	2306      	movs	r3, #6
 8002eac:	e00a      	b.n	8002ec4 <HAL_GPIO_Init+0x228>
 8002eae:	2305      	movs	r3, #5
 8002eb0:	e008      	b.n	8002ec4 <HAL_GPIO_Init+0x228>
 8002eb2:	2304      	movs	r3, #4
 8002eb4:	e006      	b.n	8002ec4 <HAL_GPIO_Init+0x228>
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e004      	b.n	8002ec4 <HAL_GPIO_Init+0x228>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e002      	b.n	8002ec4 <HAL_GPIO_Init+0x228>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <HAL_GPIO_Init+0x228>
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	69fa      	ldr	r2, [r7, #28]
 8002ec6:	f002 0203 	and.w	r2, r2, #3
 8002eca:	0092      	lsls	r2, r2, #2
 8002ecc:	4093      	lsls	r3, r2
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ed4:	4935      	ldr	r1, [pc, #212]	; (8002fac <HAL_GPIO_Init+0x310>)
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	089b      	lsrs	r3, r3, #2
 8002eda:	3302      	adds	r3, #2
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ee2:	4b3b      	ldr	r3, [pc, #236]	; (8002fd0 <HAL_GPIO_Init+0x334>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	43db      	mvns	r3, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f06:	4a32      	ldr	r2, [pc, #200]	; (8002fd0 <HAL_GPIO_Init+0x334>)
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f0c:	4b30      	ldr	r3, [pc, #192]	; (8002fd0 <HAL_GPIO_Init+0x334>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	43db      	mvns	r3, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f30:	4a27      	ldr	r2, [pc, #156]	; (8002fd0 <HAL_GPIO_Init+0x334>)
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f36:	4b26      	ldr	r3, [pc, #152]	; (8002fd0 <HAL_GPIO_Init+0x334>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4013      	ands	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f5a:	4a1d      	ldr	r2, [pc, #116]	; (8002fd0 <HAL_GPIO_Init+0x334>)
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f60:	4b1b      	ldr	r3, [pc, #108]	; (8002fd0 <HAL_GPIO_Init+0x334>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f84:	4a12      	ldr	r2, [pc, #72]	; (8002fd0 <HAL_GPIO_Init+0x334>)
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	61fb      	str	r3, [r7, #28]
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	2b0f      	cmp	r3, #15
 8002f94:	f67f ae90 	bls.w	8002cb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f98:	bf00      	nop
 8002f9a:	bf00      	nop
 8002f9c:	3724      	adds	r7, #36	; 0x24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	40013800 	.word	0x40013800
 8002fb0:	40020000 	.word	0x40020000
 8002fb4:	40020400 	.word	0x40020400
 8002fb8:	40020800 	.word	0x40020800
 8002fbc:	40020c00 	.word	0x40020c00
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	40021400 	.word	0x40021400
 8002fc8:	40021800 	.word	0x40021800
 8002fcc:	40021c00 	.word	0x40021c00
 8002fd0:	40013c00 	.word	0x40013c00

08002fd4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fea:	2300      	movs	r3, #0
 8002fec:	617b      	str	r3, [r7, #20]
 8002fee:	e0cd      	b.n	800318c <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	4013      	ands	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	429a      	cmp	r2, r3
 8003008:	f040 80bd 	bne.w	8003186 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800300c:	4a65      	ldr	r2, [pc, #404]	; (80031a4 <HAL_GPIO_DeInit+0x1d0>)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	089b      	lsrs	r3, r3, #2
 8003012:	3302      	adds	r3, #2
 8003014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003018:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	220f      	movs	r2, #15
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	4013      	ands	r3, r2
 800302c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a5d      	ldr	r2, [pc, #372]	; (80031a8 <HAL_GPIO_DeInit+0x1d4>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d02b      	beq.n	800308e <HAL_GPIO_DeInit+0xba>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a5c      	ldr	r2, [pc, #368]	; (80031ac <HAL_GPIO_DeInit+0x1d8>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d025      	beq.n	800308a <HAL_GPIO_DeInit+0xb6>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a5b      	ldr	r2, [pc, #364]	; (80031b0 <HAL_GPIO_DeInit+0x1dc>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d01f      	beq.n	8003086 <HAL_GPIO_DeInit+0xb2>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a5a      	ldr	r2, [pc, #360]	; (80031b4 <HAL_GPIO_DeInit+0x1e0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d019      	beq.n	8003082 <HAL_GPIO_DeInit+0xae>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a59      	ldr	r2, [pc, #356]	; (80031b8 <HAL_GPIO_DeInit+0x1e4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d013      	beq.n	800307e <HAL_GPIO_DeInit+0xaa>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a58      	ldr	r2, [pc, #352]	; (80031bc <HAL_GPIO_DeInit+0x1e8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d00d      	beq.n	800307a <HAL_GPIO_DeInit+0xa6>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a57      	ldr	r2, [pc, #348]	; (80031c0 <HAL_GPIO_DeInit+0x1ec>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d007      	beq.n	8003076 <HAL_GPIO_DeInit+0xa2>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a56      	ldr	r2, [pc, #344]	; (80031c4 <HAL_GPIO_DeInit+0x1f0>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d101      	bne.n	8003072 <HAL_GPIO_DeInit+0x9e>
 800306e:	2307      	movs	r3, #7
 8003070:	e00e      	b.n	8003090 <HAL_GPIO_DeInit+0xbc>
 8003072:	2308      	movs	r3, #8
 8003074:	e00c      	b.n	8003090 <HAL_GPIO_DeInit+0xbc>
 8003076:	2306      	movs	r3, #6
 8003078:	e00a      	b.n	8003090 <HAL_GPIO_DeInit+0xbc>
 800307a:	2305      	movs	r3, #5
 800307c:	e008      	b.n	8003090 <HAL_GPIO_DeInit+0xbc>
 800307e:	2304      	movs	r3, #4
 8003080:	e006      	b.n	8003090 <HAL_GPIO_DeInit+0xbc>
 8003082:	2303      	movs	r3, #3
 8003084:	e004      	b.n	8003090 <HAL_GPIO_DeInit+0xbc>
 8003086:	2302      	movs	r3, #2
 8003088:	e002      	b.n	8003090 <HAL_GPIO_DeInit+0xbc>
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <HAL_GPIO_DeInit+0xbc>
 800308e:	2300      	movs	r3, #0
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	f002 0203 	and.w	r2, r2, #3
 8003096:	0092      	lsls	r2, r2, #2
 8003098:	4093      	lsls	r3, r2
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	429a      	cmp	r2, r3
 800309e:	d132      	bne.n	8003106 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80030a0:	4b49      	ldr	r3, [pc, #292]	; (80031c8 <HAL_GPIO_DeInit+0x1f4>)
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	43db      	mvns	r3, r3
 80030a8:	4947      	ldr	r1, [pc, #284]	; (80031c8 <HAL_GPIO_DeInit+0x1f4>)
 80030aa:	4013      	ands	r3, r2
 80030ac:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80030ae:	4b46      	ldr	r3, [pc, #280]	; (80031c8 <HAL_GPIO_DeInit+0x1f4>)
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	43db      	mvns	r3, r3
 80030b6:	4944      	ldr	r1, [pc, #272]	; (80031c8 <HAL_GPIO_DeInit+0x1f4>)
 80030b8:	4013      	ands	r3, r2
 80030ba:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80030bc:	4b42      	ldr	r3, [pc, #264]	; (80031c8 <HAL_GPIO_DeInit+0x1f4>)
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	43db      	mvns	r3, r3
 80030c4:	4940      	ldr	r1, [pc, #256]	; (80031c8 <HAL_GPIO_DeInit+0x1f4>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80030ca:	4b3f      	ldr	r3, [pc, #252]	; (80031c8 <HAL_GPIO_DeInit+0x1f4>)
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	43db      	mvns	r3, r3
 80030d2:	493d      	ldr	r1, [pc, #244]	; (80031c8 <HAL_GPIO_DeInit+0x1f4>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	220f      	movs	r2, #15
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80030e8:	4a2e      	ldr	r2, [pc, #184]	; (80031a4 <HAL_GPIO_DeInit+0x1d0>)
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	089b      	lsrs	r3, r3, #2
 80030ee:	3302      	adds	r3, #2
 80030f0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	43da      	mvns	r2, r3
 80030f8:	482a      	ldr	r0, [pc, #168]	; (80031a4 <HAL_GPIO_DeInit+0x1d0>)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	089b      	lsrs	r3, r3, #2
 80030fe:	400a      	ands	r2, r1
 8003100:	3302      	adds	r3, #2
 8003102:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	2103      	movs	r1, #3
 8003110:	fa01 f303 	lsl.w	r3, r1, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	401a      	ands	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	08da      	lsrs	r2, r3, #3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3208      	adds	r2, #8
 8003124:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	220f      	movs	r2, #15
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43db      	mvns	r3, r3
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	08d2      	lsrs	r2, r2, #3
 800313c:	4019      	ands	r1, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	3208      	adds	r2, #8
 8003142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	2103      	movs	r1, #3
 8003150:	fa01 f303 	lsl.w	r3, r1, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	401a      	ands	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	2101      	movs	r1, #1
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	fa01 f303 	lsl.w	r3, r1, r3
 8003168:	43db      	mvns	r3, r3
 800316a:	401a      	ands	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	2103      	movs	r1, #3
 800317a:	fa01 f303 	lsl.w	r3, r1, r3
 800317e:	43db      	mvns	r3, r3
 8003180:	401a      	ands	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	3301      	adds	r3, #1
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	2b0f      	cmp	r3, #15
 8003190:	f67f af2e 	bls.w	8002ff0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003194:	bf00      	nop
 8003196:	bf00      	nop
 8003198:	371c      	adds	r7, #28
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40013800 	.word	0x40013800
 80031a8:	40020000 	.word	0x40020000
 80031ac:	40020400 	.word	0x40020400
 80031b0:	40020800 	.word	0x40020800
 80031b4:	40020c00 	.word	0x40020c00
 80031b8:	40021000 	.word	0x40021000
 80031bc:	40021400 	.word	0x40021400
 80031c0:	40021800 	.word	0x40021800
 80031c4:	40021c00 	.word	0x40021c00
 80031c8:	40013c00 	.word	0x40013c00

080031cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	460b      	mov	r3, r1
 80031d6:	807b      	strh	r3, [r7, #2]
 80031d8:	4613      	mov	r3, r2
 80031da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031dc:	787b      	ldrb	r3, [r7, #1]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031e2:	887a      	ldrh	r2, [r7, #2]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031e8:	e003      	b.n	80031f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031ea:	887b      	ldrh	r3, [r7, #2]
 80031ec:	041a      	lsls	r2, r3, #16
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	619a      	str	r2, [r3, #24]
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80031fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003200:	b08f      	sub	sp, #60	; 0x3c
 8003202:	af0a      	add	r7, sp, #40	; 0x28
 8003204:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e054      	b.n	80032ba <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d106      	bne.n	8003230 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f007 ff6e 	bl	800b10c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2203      	movs	r2, #3
 8003234:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003240:	2b00      	cmp	r3, #0
 8003242:	d102      	bne.n	800324a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f004 fdda 	bl	8007e08 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	603b      	str	r3, [r7, #0]
 800325a:	687e      	ldr	r6, [r7, #4]
 800325c:	466d      	mov	r5, sp
 800325e:	f106 0410 	add.w	r4, r6, #16
 8003262:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003264:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003266:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800326a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800326e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003272:	1d33      	adds	r3, r6, #4
 8003274:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003276:	6838      	ldr	r0, [r7, #0]
 8003278:	f004 fd54 	bl	8007d24 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2101      	movs	r1, #1
 8003282:	4618      	mov	r0, r3
 8003284:	f004 fdd1 	bl	8007e2a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	603b      	str	r3, [r7, #0]
 800328e:	687e      	ldr	r6, [r7, #4]
 8003290:	466d      	mov	r5, sp
 8003292:	f106 0410 	add.w	r4, r6, #16
 8003296:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003298:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800329a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800329c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800329e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80032a6:	1d33      	adds	r3, r6, #4
 80032a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032aa:	6838      	ldr	r0, [r7, #0]
 80032ac:	f004 ff5a 	bl	8008164 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032c2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80032c2:	b590      	push	{r4, r7, lr}
 80032c4:	b089      	sub	sp, #36	; 0x24
 80032c6:	af04      	add	r7, sp, #16
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	4608      	mov	r0, r1
 80032cc:	4611      	mov	r1, r2
 80032ce:	461a      	mov	r2, r3
 80032d0:	4603      	mov	r3, r0
 80032d2:	70fb      	strb	r3, [r7, #3]
 80032d4:	460b      	mov	r3, r1
 80032d6:	70bb      	strb	r3, [r7, #2]
 80032d8:	4613      	mov	r3, r2
 80032da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <HAL_HCD_HC_Init+0x28>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e076      	b.n	80033d8 <HAL_HCD_HC_Init+0x116>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80032f2:	78fb      	ldrb	r3, [r7, #3]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	212c      	movs	r1, #44	; 0x2c
 80032f8:	fb01 f303 	mul.w	r3, r1, r3
 80032fc:	4413      	add	r3, r2
 80032fe:	333d      	adds	r3, #61	; 0x3d
 8003300:	2200      	movs	r2, #0
 8003302:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003304:	78fb      	ldrb	r3, [r7, #3]
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	212c      	movs	r1, #44	; 0x2c
 800330a:	fb01 f303 	mul.w	r3, r1, r3
 800330e:	4413      	add	r3, r2
 8003310:	3338      	adds	r3, #56	; 0x38
 8003312:	787a      	ldrb	r2, [r7, #1]
 8003314:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003316:	78fb      	ldrb	r3, [r7, #3]
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	212c      	movs	r1, #44	; 0x2c
 800331c:	fb01 f303 	mul.w	r3, r1, r3
 8003320:	4413      	add	r3, r2
 8003322:	3340      	adds	r3, #64	; 0x40
 8003324:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003326:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003328:	78fb      	ldrb	r3, [r7, #3]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	212c      	movs	r1, #44	; 0x2c
 800332e:	fb01 f303 	mul.w	r3, r1, r3
 8003332:	4413      	add	r3, r2
 8003334:	3339      	adds	r3, #57	; 0x39
 8003336:	78fa      	ldrb	r2, [r7, #3]
 8003338:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800333a:	78fb      	ldrb	r3, [r7, #3]
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	212c      	movs	r1, #44	; 0x2c
 8003340:	fb01 f303 	mul.w	r3, r1, r3
 8003344:	4413      	add	r3, r2
 8003346:	333f      	adds	r3, #63	; 0x3f
 8003348:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800334c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800334e:	78fb      	ldrb	r3, [r7, #3]
 8003350:	78ba      	ldrb	r2, [r7, #2]
 8003352:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003356:	b2d0      	uxtb	r0, r2
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	212c      	movs	r1, #44	; 0x2c
 800335c:	fb01 f303 	mul.w	r3, r1, r3
 8003360:	4413      	add	r3, r2
 8003362:	333a      	adds	r3, #58	; 0x3a
 8003364:	4602      	mov	r2, r0
 8003366:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003368:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800336c:	2b00      	cmp	r3, #0
 800336e:	da09      	bge.n	8003384 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003370:	78fb      	ldrb	r3, [r7, #3]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	212c      	movs	r1, #44	; 0x2c
 8003376:	fb01 f303 	mul.w	r3, r1, r3
 800337a:	4413      	add	r3, r2
 800337c:	333b      	adds	r3, #59	; 0x3b
 800337e:	2201      	movs	r2, #1
 8003380:	701a      	strb	r2, [r3, #0]
 8003382:	e008      	b.n	8003396 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	212c      	movs	r1, #44	; 0x2c
 800338a:	fb01 f303 	mul.w	r3, r1, r3
 800338e:	4413      	add	r3, r2
 8003390:	333b      	adds	r3, #59	; 0x3b
 8003392:	2200      	movs	r2, #0
 8003394:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003396:	78fb      	ldrb	r3, [r7, #3]
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	212c      	movs	r1, #44	; 0x2c
 800339c:	fb01 f303 	mul.w	r3, r1, r3
 80033a0:	4413      	add	r3, r2
 80033a2:	333c      	adds	r3, #60	; 0x3c
 80033a4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80033a8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	787c      	ldrb	r4, [r7, #1]
 80033b0:	78ba      	ldrb	r2, [r7, #2]
 80033b2:	78f9      	ldrb	r1, [r7, #3]
 80033b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80033b6:	9302      	str	r3, [sp, #8]
 80033b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80033bc:	9301      	str	r3, [sp, #4]
 80033be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	4623      	mov	r3, r4
 80033c6:	f005 f829 	bl	800841c <USB_HC_Init>
 80033ca:	4603      	mov	r3, r0
 80033cc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd90      	pop	{r4, r7, pc}

080033e0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80033ec:	2300      	movs	r3, #0
 80033ee:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d101      	bne.n	80033fe <HAL_HCD_HC_Halt+0x1e>
 80033fa:	2302      	movs	r3, #2
 80033fc:	e00f      	b.n	800341e <HAL_HCD_HC_Halt+0x3e>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	78fa      	ldrb	r2, [r7, #3]
 800340c:	4611      	mov	r1, r2
 800340e:	4618      	mov	r0, r3
 8003410:	f005 fa79 	bl	8008906 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800341c:	7bfb      	ldrb	r3, [r7, #15]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	4608      	mov	r0, r1
 8003432:	4611      	mov	r1, r2
 8003434:	461a      	mov	r2, r3
 8003436:	4603      	mov	r3, r0
 8003438:	70fb      	strb	r3, [r7, #3]
 800343a:	460b      	mov	r3, r1
 800343c:	70bb      	strb	r3, [r7, #2]
 800343e:	4613      	mov	r3, r2
 8003440:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003442:	78fb      	ldrb	r3, [r7, #3]
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	212c      	movs	r1, #44	; 0x2c
 8003448:	fb01 f303 	mul.w	r3, r1, r3
 800344c:	4413      	add	r3, r2
 800344e:	333b      	adds	r3, #59	; 0x3b
 8003450:	78ba      	ldrb	r2, [r7, #2]
 8003452:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003454:	78fb      	ldrb	r3, [r7, #3]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	212c      	movs	r1, #44	; 0x2c
 800345a:	fb01 f303 	mul.w	r3, r1, r3
 800345e:	4413      	add	r3, r2
 8003460:	333f      	adds	r3, #63	; 0x3f
 8003462:	787a      	ldrb	r2, [r7, #1]
 8003464:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003466:	7c3b      	ldrb	r3, [r7, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d112      	bne.n	8003492 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800346c:	78fb      	ldrb	r3, [r7, #3]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	212c      	movs	r1, #44	; 0x2c
 8003472:	fb01 f303 	mul.w	r3, r1, r3
 8003476:	4413      	add	r3, r2
 8003478:	3342      	adds	r3, #66	; 0x42
 800347a:	2203      	movs	r2, #3
 800347c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800347e:	78fb      	ldrb	r3, [r7, #3]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	212c      	movs	r1, #44	; 0x2c
 8003484:	fb01 f303 	mul.w	r3, r1, r3
 8003488:	4413      	add	r3, r2
 800348a:	333d      	adds	r3, #61	; 0x3d
 800348c:	7f3a      	ldrb	r2, [r7, #28]
 800348e:	701a      	strb	r2, [r3, #0]
 8003490:	e008      	b.n	80034a4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003492:	78fb      	ldrb	r3, [r7, #3]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	212c      	movs	r1, #44	; 0x2c
 8003498:	fb01 f303 	mul.w	r3, r1, r3
 800349c:	4413      	add	r3, r2
 800349e:	3342      	adds	r3, #66	; 0x42
 80034a0:	2202      	movs	r2, #2
 80034a2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80034a4:	787b      	ldrb	r3, [r7, #1]
 80034a6:	2b03      	cmp	r3, #3
 80034a8:	f200 80c6 	bhi.w	8003638 <HAL_HCD_HC_SubmitRequest+0x210>
 80034ac:	a201      	add	r2, pc, #4	; (adr r2, 80034b4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80034ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b2:	bf00      	nop
 80034b4:	080034c5 	.word	0x080034c5
 80034b8:	08003625 	.word	0x08003625
 80034bc:	08003529 	.word	0x08003529
 80034c0:	080035a7 	.word	0x080035a7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80034c4:	7c3b      	ldrb	r3, [r7, #16]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	f040 80b8 	bne.w	800363c <HAL_HCD_HC_SubmitRequest+0x214>
 80034cc:	78bb      	ldrb	r3, [r7, #2]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f040 80b4 	bne.w	800363c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80034d4:	8b3b      	ldrh	r3, [r7, #24]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d108      	bne.n	80034ec <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80034da:	78fb      	ldrb	r3, [r7, #3]
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	212c      	movs	r1, #44	; 0x2c
 80034e0:	fb01 f303 	mul.w	r3, r1, r3
 80034e4:	4413      	add	r3, r2
 80034e6:	3355      	adds	r3, #85	; 0x55
 80034e8:	2201      	movs	r2, #1
 80034ea:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80034ec:	78fb      	ldrb	r3, [r7, #3]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	212c      	movs	r1, #44	; 0x2c
 80034f2:	fb01 f303 	mul.w	r3, r1, r3
 80034f6:	4413      	add	r3, r2
 80034f8:	3355      	adds	r3, #85	; 0x55
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d109      	bne.n	8003514 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	212c      	movs	r1, #44	; 0x2c
 8003506:	fb01 f303 	mul.w	r3, r1, r3
 800350a:	4413      	add	r3, r2
 800350c:	3342      	adds	r3, #66	; 0x42
 800350e:	2200      	movs	r2, #0
 8003510:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003512:	e093      	b.n	800363c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003514:	78fb      	ldrb	r3, [r7, #3]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	212c      	movs	r1, #44	; 0x2c
 800351a:	fb01 f303 	mul.w	r3, r1, r3
 800351e:	4413      	add	r3, r2
 8003520:	3342      	adds	r3, #66	; 0x42
 8003522:	2202      	movs	r2, #2
 8003524:	701a      	strb	r2, [r3, #0]
      break;
 8003526:	e089      	b.n	800363c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003528:	78bb      	ldrb	r3, [r7, #2]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d11d      	bne.n	800356a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800352e:	78fb      	ldrb	r3, [r7, #3]
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	212c      	movs	r1, #44	; 0x2c
 8003534:	fb01 f303 	mul.w	r3, r1, r3
 8003538:	4413      	add	r3, r2
 800353a:	3355      	adds	r3, #85	; 0x55
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d109      	bne.n	8003556 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003542:	78fb      	ldrb	r3, [r7, #3]
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	212c      	movs	r1, #44	; 0x2c
 8003548:	fb01 f303 	mul.w	r3, r1, r3
 800354c:	4413      	add	r3, r2
 800354e:	3342      	adds	r3, #66	; 0x42
 8003550:	2200      	movs	r2, #0
 8003552:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003554:	e073      	b.n	800363e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003556:	78fb      	ldrb	r3, [r7, #3]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	212c      	movs	r1, #44	; 0x2c
 800355c:	fb01 f303 	mul.w	r3, r1, r3
 8003560:	4413      	add	r3, r2
 8003562:	3342      	adds	r3, #66	; 0x42
 8003564:	2202      	movs	r2, #2
 8003566:	701a      	strb	r2, [r3, #0]
      break;
 8003568:	e069      	b.n	800363e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800356a:	78fb      	ldrb	r3, [r7, #3]
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	212c      	movs	r1, #44	; 0x2c
 8003570:	fb01 f303 	mul.w	r3, r1, r3
 8003574:	4413      	add	r3, r2
 8003576:	3354      	adds	r3, #84	; 0x54
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d109      	bne.n	8003592 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800357e:	78fb      	ldrb	r3, [r7, #3]
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	212c      	movs	r1, #44	; 0x2c
 8003584:	fb01 f303 	mul.w	r3, r1, r3
 8003588:	4413      	add	r3, r2
 800358a:	3342      	adds	r3, #66	; 0x42
 800358c:	2200      	movs	r2, #0
 800358e:	701a      	strb	r2, [r3, #0]
      break;
 8003590:	e055      	b.n	800363e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003592:	78fb      	ldrb	r3, [r7, #3]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	212c      	movs	r1, #44	; 0x2c
 8003598:	fb01 f303 	mul.w	r3, r1, r3
 800359c:	4413      	add	r3, r2
 800359e:	3342      	adds	r3, #66	; 0x42
 80035a0:	2202      	movs	r2, #2
 80035a2:	701a      	strb	r2, [r3, #0]
      break;
 80035a4:	e04b      	b.n	800363e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80035a6:	78bb      	ldrb	r3, [r7, #2]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d11d      	bne.n	80035e8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80035ac:	78fb      	ldrb	r3, [r7, #3]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	212c      	movs	r1, #44	; 0x2c
 80035b2:	fb01 f303 	mul.w	r3, r1, r3
 80035b6:	4413      	add	r3, r2
 80035b8:	3355      	adds	r3, #85	; 0x55
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d109      	bne.n	80035d4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	212c      	movs	r1, #44	; 0x2c
 80035c6:	fb01 f303 	mul.w	r3, r1, r3
 80035ca:	4413      	add	r3, r2
 80035cc:	3342      	adds	r3, #66	; 0x42
 80035ce:	2200      	movs	r2, #0
 80035d0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80035d2:	e034      	b.n	800363e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80035d4:	78fb      	ldrb	r3, [r7, #3]
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	212c      	movs	r1, #44	; 0x2c
 80035da:	fb01 f303 	mul.w	r3, r1, r3
 80035de:	4413      	add	r3, r2
 80035e0:	3342      	adds	r3, #66	; 0x42
 80035e2:	2202      	movs	r2, #2
 80035e4:	701a      	strb	r2, [r3, #0]
      break;
 80035e6:	e02a      	b.n	800363e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	212c      	movs	r1, #44	; 0x2c
 80035ee:	fb01 f303 	mul.w	r3, r1, r3
 80035f2:	4413      	add	r3, r2
 80035f4:	3354      	adds	r3, #84	; 0x54
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d109      	bne.n	8003610 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80035fc:	78fb      	ldrb	r3, [r7, #3]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	212c      	movs	r1, #44	; 0x2c
 8003602:	fb01 f303 	mul.w	r3, r1, r3
 8003606:	4413      	add	r3, r2
 8003608:	3342      	adds	r3, #66	; 0x42
 800360a:	2200      	movs	r2, #0
 800360c:	701a      	strb	r2, [r3, #0]
      break;
 800360e:	e016      	b.n	800363e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003610:	78fb      	ldrb	r3, [r7, #3]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	212c      	movs	r1, #44	; 0x2c
 8003616:	fb01 f303 	mul.w	r3, r1, r3
 800361a:	4413      	add	r3, r2
 800361c:	3342      	adds	r3, #66	; 0x42
 800361e:	2202      	movs	r2, #2
 8003620:	701a      	strb	r2, [r3, #0]
      break;
 8003622:	e00c      	b.n	800363e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003624:	78fb      	ldrb	r3, [r7, #3]
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	212c      	movs	r1, #44	; 0x2c
 800362a:	fb01 f303 	mul.w	r3, r1, r3
 800362e:	4413      	add	r3, r2
 8003630:	3342      	adds	r3, #66	; 0x42
 8003632:	2200      	movs	r2, #0
 8003634:	701a      	strb	r2, [r3, #0]
      break;
 8003636:	e002      	b.n	800363e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003638:	bf00      	nop
 800363a:	e000      	b.n	800363e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800363c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800363e:	78fb      	ldrb	r3, [r7, #3]
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	212c      	movs	r1, #44	; 0x2c
 8003644:	fb01 f303 	mul.w	r3, r1, r3
 8003648:	4413      	add	r3, r2
 800364a:	3344      	adds	r3, #68	; 0x44
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003650:	78fb      	ldrb	r3, [r7, #3]
 8003652:	8b3a      	ldrh	r2, [r7, #24]
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	202c      	movs	r0, #44	; 0x2c
 8003658:	fb00 f303 	mul.w	r3, r0, r3
 800365c:	440b      	add	r3, r1
 800365e:	334c      	adds	r3, #76	; 0x4c
 8003660:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003662:	78fb      	ldrb	r3, [r7, #3]
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	212c      	movs	r1, #44	; 0x2c
 8003668:	fb01 f303 	mul.w	r3, r1, r3
 800366c:	4413      	add	r3, r2
 800366e:	3360      	adds	r3, #96	; 0x60
 8003670:	2200      	movs	r2, #0
 8003672:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003674:	78fb      	ldrb	r3, [r7, #3]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	212c      	movs	r1, #44	; 0x2c
 800367a:	fb01 f303 	mul.w	r3, r1, r3
 800367e:	4413      	add	r3, r2
 8003680:	3350      	adds	r3, #80	; 0x50
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003686:	78fb      	ldrb	r3, [r7, #3]
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	212c      	movs	r1, #44	; 0x2c
 800368c:	fb01 f303 	mul.w	r3, r1, r3
 8003690:	4413      	add	r3, r2
 8003692:	3339      	adds	r3, #57	; 0x39
 8003694:	78fa      	ldrb	r2, [r7, #3]
 8003696:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003698:	78fb      	ldrb	r3, [r7, #3]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	212c      	movs	r1, #44	; 0x2c
 800369e:	fb01 f303 	mul.w	r3, r1, r3
 80036a2:	4413      	add	r3, r2
 80036a4:	3361      	adds	r3, #97	; 0x61
 80036a6:	2200      	movs	r2, #0
 80036a8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6818      	ldr	r0, [r3, #0]
 80036ae:	78fb      	ldrb	r3, [r7, #3]
 80036b0:	222c      	movs	r2, #44	; 0x2c
 80036b2:	fb02 f303 	mul.w	r3, r2, r3
 80036b6:	3338      	adds	r3, #56	; 0x38
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	18d1      	adds	r1, r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	461a      	mov	r2, r3
 80036c4:	f004 ffcc 	bl	8008660 <USB_HC_StartXfer>
 80036c8:	4603      	mov	r3, r0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop

080036d4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f004 fcf7 	bl	80080de <USB_GetMode>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	f040 80f6 	bne.w	80038e4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f004 fcdb 	bl	80080b8 <USB_ReadInterrupts>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 80ec 	beq.w	80038e2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f004 fcd2 	bl	80080b8 <USB_ReadInterrupts>
 8003714:	4603      	mov	r3, r0
 8003716:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800371a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800371e:	d104      	bne.n	800372a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003728:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f004 fcc2 	bl	80080b8 <USB_ReadInterrupts>
 8003734:	4603      	mov	r3, r0
 8003736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800373a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800373e:	d104      	bne.n	800374a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003748:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f004 fcb2 	bl	80080b8 <USB_ReadInterrupts>
 8003754:	4603      	mov	r3, r0
 8003756:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800375a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800375e:	d104      	bne.n	800376a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003768:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f004 fca2 	bl	80080b8 <USB_ReadInterrupts>
 8003774:	4603      	mov	r3, r0
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b02      	cmp	r3, #2
 800377c:	d103      	bne.n	8003786 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2202      	movs	r2, #2
 8003784:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f004 fc94 	bl	80080b8 <USB_ReadInterrupts>
 8003790:	4603      	mov	r3, r0
 8003792:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003796:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800379a:	d11c      	bne.n	80037d6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80037a4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10f      	bne.n	80037d6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80037b6:	2110      	movs	r1, #16
 80037b8:	6938      	ldr	r0, [r7, #16]
 80037ba:	f004 fb83 	bl	8007ec4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80037be:	6938      	ldr	r0, [r7, #16]
 80037c0:	f004 fbb4 	bl	8007f2c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2101      	movs	r1, #1
 80037ca:	4618      	mov	r0, r3
 80037cc:	f004 fd8a 	bl	80082e4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f007 fd19 	bl	800b208 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f004 fc6c 	bl	80080b8 <USB_ReadInterrupts>
 80037e0:	4603      	mov	r3, r0
 80037e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037ea:	d102      	bne.n	80037f2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f001 f882 	bl	80048f6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f004 fc5e 	bl	80080b8 <USB_ReadInterrupts>
 80037fc:	4603      	mov	r3, r0
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b08      	cmp	r3, #8
 8003804:	d106      	bne.n	8003814 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f007 fce2 	bl	800b1d0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2208      	movs	r2, #8
 8003812:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4618      	mov	r0, r3
 800381a:	f004 fc4d 	bl	80080b8 <USB_ReadInterrupts>
 800381e:	4603      	mov	r3, r0
 8003820:	f003 0310 	and.w	r3, r3, #16
 8003824:	2b10      	cmp	r3, #16
 8003826:	d101      	bne.n	800382c <HAL_HCD_IRQHandler+0x158>
 8003828:	2301      	movs	r3, #1
 800382a:	e000      	b.n	800382e <HAL_HCD_IRQHandler+0x15a>
 800382c:	2300      	movs	r3, #0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d012      	beq.n	8003858 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	699a      	ldr	r2, [r3, #24]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0210 	bic.w	r2, r2, #16
 8003840:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 ff85 	bl	8004752 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699a      	ldr	r2, [r3, #24]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0210 	orr.w	r2, r2, #16
 8003856:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f004 fc2b 	bl	80080b8 <USB_ReadInterrupts>
 8003862:	4603      	mov	r3, r0
 8003864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003868:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800386c:	d13a      	bne.n	80038e4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f005 f836 	bl	80088e4 <USB_HC_ReadInterrupt>
 8003878:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800387a:	2300      	movs	r3, #0
 800387c:	617b      	str	r3, [r7, #20]
 800387e:	e025      	b.n	80038cc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	fa22 f303 	lsr.w	r3, r2, r3
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d018      	beq.n	80038c6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4413      	add	r3, r2
 800389c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038aa:	d106      	bne.n	80038ba <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	4619      	mov	r1, r3
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f88f 	bl	80039d6 <HCD_HC_IN_IRQHandler>
 80038b8:	e005      	b.n	80038c6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	4619      	mov	r1, r3
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 fbdd 	bl	8004080 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	3301      	adds	r3, #1
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d3d4      	bcc.n	8003880 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038de:	615a      	str	r2, [r3, #20]
 80038e0:	e000      	b.n	80038e4 <HAL_HCD_IRQHandler+0x210>
      return;
 80038e2:	bf00      	nop
    }
  }
}
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b082      	sub	sp, #8
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_HCD_Start+0x16>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e013      	b.n	8003928 <HAL_HCD_Start+0x3e>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2101      	movs	r1, #1
 800390e:	4618      	mov	r0, r3
 8003910:	f004 fd22 	bl	8008358 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4618      	mov	r0, r3
 800391a:	f004 fa64 	bl	8007de6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800393e:	2b01      	cmp	r3, #1
 8003940:	d101      	bne.n	8003946 <HAL_HCD_Stop+0x16>
 8003942:	2302      	movs	r3, #2
 8003944:	e00d      	b.n	8003962 <HAL_HCD_Stop+0x32>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f005 f910 	bl	8008b78 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
 8003972:	460b      	mov	r3, r1
 8003974:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003976:	78fb      	ldrb	r3, [r7, #3]
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	212c      	movs	r1, #44	; 0x2c
 800397c:	fb01 f303 	mul.w	r3, r1, r3
 8003980:	4413      	add	r3, r2
 8003982:	3360      	adds	r3, #96	; 0x60
 8003984:	781b      	ldrb	r3, [r3, #0]
}
 8003986:	4618      	mov	r0, r3
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
 800399a:	460b      	mov	r3, r1
 800399c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800399e:	78fb      	ldrb	r3, [r7, #3]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	212c      	movs	r1, #44	; 0x2c
 80039a4:	fb01 f303 	mul.w	r3, r1, r3
 80039a8:	4413      	add	r3, r2
 80039aa:	3350      	adds	r3, #80	; 0x50
 80039ac:	681b      	ldr	r3, [r3, #0]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f004 fd16 	bl	80083f8 <USB_GetCurrentFrame>
 80039cc:	4603      	mov	r3, r0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b086      	sub	sp, #24
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
 80039de:	460b      	mov	r3, r1
 80039e0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80039ec:	78fb      	ldrb	r3, [r7, #3]
 80039ee:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f003 0304 	and.w	r3, r3, #4
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d11a      	bne.n	8003a3c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	015a      	lsls	r2, r3, #5
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a12:	461a      	mov	r2, r3
 8003a14:	2304      	movs	r3, #4
 8003a16:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	212c      	movs	r1, #44	; 0x2c
 8003a1e:	fb01 f303 	mul.w	r3, r1, r3
 8003a22:	4413      	add	r3, r2
 8003a24:	3361      	adds	r3, #97	; 0x61
 8003a26:	2206      	movs	r2, #6
 8003a28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	4611      	mov	r1, r2
 8003a34:	4618      	mov	r0, r3
 8003a36:	f004 ff66 	bl	8008906 <USB_HC_Halt>
 8003a3a:	e0af      	b.n	8003b9c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a52:	d11b      	bne.n	8003a8c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a60:	461a      	mov	r2, r3
 8003a62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a66:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	212c      	movs	r1, #44	; 0x2c
 8003a6e:	fb01 f303 	mul.w	r3, r1, r3
 8003a72:	4413      	add	r3, r2
 8003a74:	3361      	adds	r3, #97	; 0x61
 8003a76:	2207      	movs	r2, #7
 8003a78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	b2d2      	uxtb	r2, r2
 8003a82:	4611      	mov	r1, r2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f004 ff3e 	bl	8008906 <USB_HC_Halt>
 8003a8a:	e087      	b.n	8003b9c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	015a      	lsls	r2, r3, #5
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 0320 	and.w	r3, r3, #32
 8003a9e:	2b20      	cmp	r3, #32
 8003aa0:	d109      	bne.n	8003ab6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aae:	461a      	mov	r2, r3
 8003ab0:	2320      	movs	r3, #32
 8003ab2:	6093      	str	r3, [r2, #8]
 8003ab4:	e072      	b.n	8003b9c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	015a      	lsls	r2, r3, #5
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	4413      	add	r3, r2
 8003abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d11a      	bne.n	8003b02 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad8:	461a      	mov	r2, r3
 8003ada:	2308      	movs	r3, #8
 8003adc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	212c      	movs	r1, #44	; 0x2c
 8003ae4:	fb01 f303 	mul.w	r3, r1, r3
 8003ae8:	4413      	add	r3, r2
 8003aea:	3361      	adds	r3, #97	; 0x61
 8003aec:	2205      	movs	r2, #5
 8003aee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	4611      	mov	r1, r2
 8003afa:	4618      	mov	r0, r3
 8003afc:	f004 ff03 	bl	8008906 <USB_HC_Halt>
 8003b00:	e04c      	b.n	8003b9c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b18:	d11b      	bne.n	8003b52 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	015a      	lsls	r2, r3, #5
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b26:	461a      	mov	r2, r3
 8003b28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	212c      	movs	r1, #44	; 0x2c
 8003b34:	fb01 f303 	mul.w	r3, r1, r3
 8003b38:	4413      	add	r3, r2
 8003b3a:	3361      	adds	r3, #97	; 0x61
 8003b3c:	2208      	movs	r2, #8
 8003b3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	4611      	mov	r1, r2
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f004 fedb 	bl	8008906 <USB_HC_Halt>
 8003b50:	e024      	b.n	8003b9c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	015a      	lsls	r2, r3, #5
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	4413      	add	r3, r2
 8003b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b64:	2b80      	cmp	r3, #128	; 0x80
 8003b66:	d119      	bne.n	8003b9c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	015a      	lsls	r2, r3, #5
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b74:	461a      	mov	r2, r3
 8003b76:	2380      	movs	r3, #128	; 0x80
 8003b78:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	212c      	movs	r1, #44	; 0x2c
 8003b80:	fb01 f303 	mul.w	r3, r1, r3
 8003b84:	4413      	add	r3, r2
 8003b86:	3361      	adds	r3, #97	; 0x61
 8003b88:	2206      	movs	r2, #6
 8003b8a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	4611      	mov	r1, r2
 8003b96:	4618      	mov	r0, r3
 8003b98:	f004 feb5 	bl	8008906 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bb2:	d112      	bne.n	8003bda <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	4611      	mov	r1, r2
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f004 fea1 	bl	8008906 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bd6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003bd8:	e24e      	b.n	8004078 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	015a      	lsls	r2, r3, #5
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	4413      	add	r3, r2
 8003be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	f040 80df 	bne.w	8003db0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d019      	beq.n	8003c2e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	212c      	movs	r1, #44	; 0x2c
 8003c00:	fb01 f303 	mul.w	r3, r1, r3
 8003c04:	4413      	add	r3, r2
 8003c06:	3348      	adds	r3, #72	; 0x48
 8003c08:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	0159      	lsls	r1, r3, #5
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	440b      	add	r3, r1
 8003c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003c1c:	1ad2      	subs	r2, r2, r3
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	202c      	movs	r0, #44	; 0x2c
 8003c24:	fb00 f303 	mul.w	r3, r0, r3
 8003c28:	440b      	add	r3, r1
 8003c2a:	3350      	adds	r3, #80	; 0x50
 8003c2c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	212c      	movs	r1, #44	; 0x2c
 8003c34:	fb01 f303 	mul.w	r3, r1, r3
 8003c38:	4413      	add	r3, r2
 8003c3a:	3361      	adds	r3, #97	; 0x61
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	212c      	movs	r1, #44	; 0x2c
 8003c46:	fb01 f303 	mul.w	r3, r1, r3
 8003c4a:	4413      	add	r3, r2
 8003c4c:	335c      	adds	r3, #92	; 0x5c
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	015a      	lsls	r2, r3, #5
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c5e:	461a      	mov	r2, r3
 8003c60:	2301      	movs	r3, #1
 8003c62:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	212c      	movs	r1, #44	; 0x2c
 8003c6a:	fb01 f303 	mul.w	r3, r1, r3
 8003c6e:	4413      	add	r3, r2
 8003c70:	333f      	adds	r3, #63	; 0x3f
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d009      	beq.n	8003c8c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	212c      	movs	r1, #44	; 0x2c
 8003c7e:	fb01 f303 	mul.w	r3, r1, r3
 8003c82:	4413      	add	r3, r2
 8003c84:	333f      	adds	r3, #63	; 0x3f
 8003c86:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d111      	bne.n	8003cb0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	4611      	mov	r1, r2
 8003c96:	4618      	mov	r0, r3
 8003c98:	f004 fe35 	bl	8008906 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca8:	461a      	mov	r2, r3
 8003caa:	2310      	movs	r3, #16
 8003cac:	6093      	str	r3, [r2, #8]
 8003cae:	e03a      	b.n	8003d26 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	212c      	movs	r1, #44	; 0x2c
 8003cb6:	fb01 f303 	mul.w	r3, r1, r3
 8003cba:	4413      	add	r3, r2
 8003cbc:	333f      	adds	r3, #63	; 0x3f
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d009      	beq.n	8003cd8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	212c      	movs	r1, #44	; 0x2c
 8003cca:	fb01 f303 	mul.w	r3, r1, r3
 8003cce:	4413      	add	r3, r2
 8003cd0:	333f      	adds	r3, #63	; 0x3f
 8003cd2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d126      	bne.n	8003d26 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	0151      	lsls	r1, r2, #5
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	440a      	add	r2, r1
 8003cee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cf2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003cf6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	212c      	movs	r1, #44	; 0x2c
 8003cfe:	fb01 f303 	mul.w	r3, r1, r3
 8003d02:	4413      	add	r3, r2
 8003d04:	3360      	adds	r3, #96	; 0x60
 8003d06:	2201      	movs	r2, #1
 8003d08:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	b2d9      	uxtb	r1, r3
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	202c      	movs	r0, #44	; 0x2c
 8003d14:	fb00 f303 	mul.w	r3, r0, r3
 8003d18:	4413      	add	r3, r2
 8003d1a:	3360      	adds	r3, #96	; 0x60
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f007 fa7f 	bl	800b224 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d12b      	bne.n	8003d86 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	212c      	movs	r1, #44	; 0x2c
 8003d34:	fb01 f303 	mul.w	r3, r1, r3
 8003d38:	4413      	add	r3, r2
 8003d3a:	3348      	adds	r3, #72	; 0x48
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	202c      	movs	r0, #44	; 0x2c
 8003d44:	fb00 f202 	mul.w	r2, r0, r2
 8003d48:	440a      	add	r2, r1
 8003d4a:	3240      	adds	r2, #64	; 0x40
 8003d4c:	8812      	ldrh	r2, [r2, #0]
 8003d4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 818e 	beq.w	8004078 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	212c      	movs	r1, #44	; 0x2c
 8003d62:	fb01 f303 	mul.w	r3, r1, r3
 8003d66:	4413      	add	r3, r2
 8003d68:	3354      	adds	r3, #84	; 0x54
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	f083 0301 	eor.w	r3, r3, #1
 8003d70:	b2d8      	uxtb	r0, r3
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	212c      	movs	r1, #44	; 0x2c
 8003d78:	fb01 f303 	mul.w	r3, r1, r3
 8003d7c:	4413      	add	r3, r2
 8003d7e:	3354      	adds	r3, #84	; 0x54
 8003d80:	4602      	mov	r2, r0
 8003d82:	701a      	strb	r2, [r3, #0]
}
 8003d84:	e178      	b.n	8004078 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	212c      	movs	r1, #44	; 0x2c
 8003d8c:	fb01 f303 	mul.w	r3, r1, r3
 8003d90:	4413      	add	r3, r2
 8003d92:	3354      	adds	r3, #84	; 0x54
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	f083 0301 	eor.w	r3, r3, #1
 8003d9a:	b2d8      	uxtb	r0, r3
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	212c      	movs	r1, #44	; 0x2c
 8003da2:	fb01 f303 	mul.w	r3, r1, r3
 8003da6:	4413      	add	r3, r2
 8003da8:	3354      	adds	r3, #84	; 0x54
 8003daa:	4602      	mov	r2, r0
 8003dac:	701a      	strb	r2, [r3, #0]
}
 8003dae:	e163      	b.n	8004078 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	015a      	lsls	r2, r3, #5
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	4413      	add	r3, r2
 8003db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	f040 80f6 	bne.w	8003fb4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	212c      	movs	r1, #44	; 0x2c
 8003dce:	fb01 f303 	mul.w	r3, r1, r3
 8003dd2:	4413      	add	r3, r2
 8003dd4:	3361      	adds	r3, #97	; 0x61
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d109      	bne.n	8003df0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	212c      	movs	r1, #44	; 0x2c
 8003de2:	fb01 f303 	mul.w	r3, r1, r3
 8003de6:	4413      	add	r3, r2
 8003de8:	3360      	adds	r3, #96	; 0x60
 8003dea:	2201      	movs	r2, #1
 8003dec:	701a      	strb	r2, [r3, #0]
 8003dee:	e0c9      	b.n	8003f84 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	212c      	movs	r1, #44	; 0x2c
 8003df6:	fb01 f303 	mul.w	r3, r1, r3
 8003dfa:	4413      	add	r3, r2
 8003dfc:	3361      	adds	r3, #97	; 0x61
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	2b05      	cmp	r3, #5
 8003e02:	d109      	bne.n	8003e18 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	212c      	movs	r1, #44	; 0x2c
 8003e0a:	fb01 f303 	mul.w	r3, r1, r3
 8003e0e:	4413      	add	r3, r2
 8003e10:	3360      	adds	r3, #96	; 0x60
 8003e12:	2205      	movs	r2, #5
 8003e14:	701a      	strb	r2, [r3, #0]
 8003e16:	e0b5      	b.n	8003f84 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	212c      	movs	r1, #44	; 0x2c
 8003e1e:	fb01 f303 	mul.w	r3, r1, r3
 8003e22:	4413      	add	r3, r2
 8003e24:	3361      	adds	r3, #97	; 0x61
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	2b06      	cmp	r3, #6
 8003e2a:	d009      	beq.n	8003e40 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	212c      	movs	r1, #44	; 0x2c
 8003e32:	fb01 f303 	mul.w	r3, r1, r3
 8003e36:	4413      	add	r3, r2
 8003e38:	3361      	adds	r3, #97	; 0x61
 8003e3a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d150      	bne.n	8003ee2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	212c      	movs	r1, #44	; 0x2c
 8003e46:	fb01 f303 	mul.w	r3, r1, r3
 8003e4a:	4413      	add	r3, r2
 8003e4c:	335c      	adds	r3, #92	; 0x5c
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	202c      	movs	r0, #44	; 0x2c
 8003e58:	fb00 f303 	mul.w	r3, r0, r3
 8003e5c:	440b      	add	r3, r1
 8003e5e:	335c      	adds	r3, #92	; 0x5c
 8003e60:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	212c      	movs	r1, #44	; 0x2c
 8003e68:	fb01 f303 	mul.w	r3, r1, r3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	335c      	adds	r3, #92	; 0x5c
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d912      	bls.n	8003e9c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	212c      	movs	r1, #44	; 0x2c
 8003e7c:	fb01 f303 	mul.w	r3, r1, r3
 8003e80:	4413      	add	r3, r2
 8003e82:	335c      	adds	r3, #92	; 0x5c
 8003e84:	2200      	movs	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	212c      	movs	r1, #44	; 0x2c
 8003e8e:	fb01 f303 	mul.w	r3, r1, r3
 8003e92:	4413      	add	r3, r2
 8003e94:	3360      	adds	r3, #96	; 0x60
 8003e96:	2204      	movs	r2, #4
 8003e98:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e9a:	e073      	b.n	8003f84 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	212c      	movs	r1, #44	; 0x2c
 8003ea2:	fb01 f303 	mul.w	r3, r1, r3
 8003ea6:	4413      	add	r3, r2
 8003ea8:	3360      	adds	r3, #96	; 0x60
 8003eaa:	2202      	movs	r2, #2
 8003eac:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ec4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ecc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	015a      	lsls	r2, r3, #5
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eda:	461a      	mov	r2, r3
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003ee0:	e050      	b.n	8003f84 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	212c      	movs	r1, #44	; 0x2c
 8003ee8:	fb01 f303 	mul.w	r3, r1, r3
 8003eec:	4413      	add	r3, r2
 8003eee:	3361      	adds	r3, #97	; 0x61
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	2b03      	cmp	r3, #3
 8003ef4:	d122      	bne.n	8003f3c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	212c      	movs	r1, #44	; 0x2c
 8003efc:	fb01 f303 	mul.w	r3, r1, r3
 8003f00:	4413      	add	r3, r2
 8003f02:	3360      	adds	r3, #96	; 0x60
 8003f04:	2202      	movs	r2, #2
 8003f06:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f1e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f26:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f34:	461a      	mov	r2, r3
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	e023      	b.n	8003f84 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	212c      	movs	r1, #44	; 0x2c
 8003f42:	fb01 f303 	mul.w	r3, r1, r3
 8003f46:	4413      	add	r3, r2
 8003f48:	3361      	adds	r3, #97	; 0x61
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2b07      	cmp	r3, #7
 8003f4e:	d119      	bne.n	8003f84 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	212c      	movs	r1, #44	; 0x2c
 8003f56:	fb01 f303 	mul.w	r3, r1, r3
 8003f5a:	4413      	add	r3, r2
 8003f5c:	335c      	adds	r3, #92	; 0x5c
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	202c      	movs	r0, #44	; 0x2c
 8003f68:	fb00 f303 	mul.w	r3, r0, r3
 8003f6c:	440b      	add	r3, r1
 8003f6e:	335c      	adds	r3, #92	; 0x5c
 8003f70:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	212c      	movs	r1, #44	; 0x2c
 8003f78:	fb01 f303 	mul.w	r3, r1, r3
 8003f7c:	4413      	add	r3, r2
 8003f7e:	3360      	adds	r3, #96	; 0x60
 8003f80:	2204      	movs	r2, #4
 8003f82:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f90:	461a      	mov	r2, r3
 8003f92:	2302      	movs	r3, #2
 8003f94:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	b2d9      	uxtb	r1, r3
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	202c      	movs	r0, #44	; 0x2c
 8003fa0:	fb00 f303 	mul.w	r3, r0, r3
 8003fa4:	4413      	add	r3, r2
 8003fa6:	3360      	adds	r3, #96	; 0x60
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	461a      	mov	r2, r3
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f007 f939 	bl	800b224 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003fb2:	e061      	b.n	8004078 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	015a      	lsls	r2, r3, #5
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 0310 	and.w	r3, r3, #16
 8003fc6:	2b10      	cmp	r3, #16
 8003fc8:	d156      	bne.n	8004078 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	212c      	movs	r1, #44	; 0x2c
 8003fd0:	fb01 f303 	mul.w	r3, r1, r3
 8003fd4:	4413      	add	r3, r2
 8003fd6:	333f      	adds	r3, #63	; 0x3f
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	2b03      	cmp	r3, #3
 8003fdc:	d111      	bne.n	8004002 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	212c      	movs	r1, #44	; 0x2c
 8003fe4:	fb01 f303 	mul.w	r3, r1, r3
 8003fe8:	4413      	add	r3, r2
 8003fea:	335c      	adds	r3, #92	; 0x5c
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	4611      	mov	r1, r2
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f004 fc83 	bl	8008906 <USB_HC_Halt>
 8004000:	e031      	b.n	8004066 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	212c      	movs	r1, #44	; 0x2c
 8004008:	fb01 f303 	mul.w	r3, r1, r3
 800400c:	4413      	add	r3, r2
 800400e:	333f      	adds	r3, #63	; 0x3f
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d009      	beq.n	800402a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	212c      	movs	r1, #44	; 0x2c
 800401c:	fb01 f303 	mul.w	r3, r1, r3
 8004020:	4413      	add	r3, r2
 8004022:	333f      	adds	r3, #63	; 0x3f
 8004024:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004026:	2b02      	cmp	r3, #2
 8004028:	d11d      	bne.n	8004066 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	212c      	movs	r1, #44	; 0x2c
 8004030:	fb01 f303 	mul.w	r3, r1, r3
 8004034:	4413      	add	r3, r2
 8004036:	335c      	adds	r3, #92	; 0x5c
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d110      	bne.n	8004066 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	212c      	movs	r1, #44	; 0x2c
 800404a:	fb01 f303 	mul.w	r3, r1, r3
 800404e:	4413      	add	r3, r2
 8004050:	3361      	adds	r3, #97	; 0x61
 8004052:	2203      	movs	r2, #3
 8004054:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	b2d2      	uxtb	r2, r2
 800405e:	4611      	mov	r1, r2
 8004060:	4618      	mov	r0, r3
 8004062:	f004 fc50 	bl	8008906 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	4413      	add	r3, r2
 800406e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004072:	461a      	mov	r2, r3
 8004074:	2310      	movs	r3, #16
 8004076:	6093      	str	r3, [r2, #8]
}
 8004078:	bf00      	nop
 800407a:	3718      	adds	r7, #24
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	460b      	mov	r3, r1
 800408a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004096:	78fb      	ldrb	r3, [r7, #3]
 8004098:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b04      	cmp	r3, #4
 80040ae:	d11a      	bne.n	80040e6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040bc:	461a      	mov	r2, r3
 80040be:	2304      	movs	r3, #4
 80040c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	212c      	movs	r1, #44	; 0x2c
 80040c8:	fb01 f303 	mul.w	r3, r1, r3
 80040cc:	4413      	add	r3, r2
 80040ce:	3361      	adds	r3, #97	; 0x61
 80040d0:	2206      	movs	r2, #6
 80040d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	4611      	mov	r1, r2
 80040de:	4618      	mov	r0, r3
 80040e0:	f004 fc11 	bl	8008906 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80040e4:	e331      	b.n	800474a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	015a      	lsls	r2, r3, #5
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b20      	cmp	r3, #32
 80040fa:	d12e      	bne.n	800415a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	015a      	lsls	r2, r3, #5
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	4413      	add	r3, r2
 8004104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004108:	461a      	mov	r2, r3
 800410a:	2320      	movs	r3, #32
 800410c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	212c      	movs	r1, #44	; 0x2c
 8004114:	fb01 f303 	mul.w	r3, r1, r3
 8004118:	4413      	add	r3, r2
 800411a:	333d      	adds	r3, #61	; 0x3d
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	2b01      	cmp	r3, #1
 8004120:	f040 8313 	bne.w	800474a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	212c      	movs	r1, #44	; 0x2c
 800412a:	fb01 f303 	mul.w	r3, r1, r3
 800412e:	4413      	add	r3, r2
 8004130:	333d      	adds	r3, #61	; 0x3d
 8004132:	2200      	movs	r2, #0
 8004134:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	212c      	movs	r1, #44	; 0x2c
 800413c:	fb01 f303 	mul.w	r3, r1, r3
 8004140:	4413      	add	r3, r2
 8004142:	3360      	adds	r3, #96	; 0x60
 8004144:	2202      	movs	r2, #2
 8004146:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	4611      	mov	r1, r2
 8004152:	4618      	mov	r0, r3
 8004154:	f004 fbd7 	bl	8008906 <USB_HC_Halt>
}
 8004158:	e2f7      	b.n	800474a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	4413      	add	r3, r2
 8004162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800416c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004170:	d112      	bne.n	8004198 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	4413      	add	r3, r2
 800417a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800417e:	461a      	mov	r2, r3
 8004180:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004184:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	b2d2      	uxtb	r2, r2
 800418e:	4611      	mov	r1, r2
 8004190:	4618      	mov	r0, r3
 8004192:	f004 fbb8 	bl	8008906 <USB_HC_Halt>
}
 8004196:	e2d8      	b.n	800474a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	015a      	lsls	r2, r3, #5
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	4413      	add	r3, r2
 80041a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d140      	bne.n	8004230 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	212c      	movs	r1, #44	; 0x2c
 80041b4:	fb01 f303 	mul.w	r3, r1, r3
 80041b8:	4413      	add	r3, r2
 80041ba:	335c      	adds	r3, #92	; 0x5c
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d2:	2b40      	cmp	r3, #64	; 0x40
 80041d4:	d111      	bne.n	80041fa <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	212c      	movs	r1, #44	; 0x2c
 80041dc:	fb01 f303 	mul.w	r3, r1, r3
 80041e0:	4413      	add	r3, r2
 80041e2:	333d      	adds	r3, #61	; 0x3d
 80041e4:	2201      	movs	r2, #1
 80041e6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f4:	461a      	mov	r2, r3
 80041f6:	2340      	movs	r3, #64	; 0x40
 80041f8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	015a      	lsls	r2, r3, #5
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	4413      	add	r3, r2
 8004202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004206:	461a      	mov	r2, r3
 8004208:	2301      	movs	r3, #1
 800420a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	212c      	movs	r1, #44	; 0x2c
 8004212:	fb01 f303 	mul.w	r3, r1, r3
 8004216:	4413      	add	r3, r2
 8004218:	3361      	adds	r3, #97	; 0x61
 800421a:	2201      	movs	r2, #1
 800421c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	4611      	mov	r1, r2
 8004228:	4618      	mov	r0, r3
 800422a:	f004 fb6c 	bl	8008906 <USB_HC_Halt>
}
 800422e:	e28c      	b.n	800474a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	4413      	add	r3, r2
 8004238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004242:	2b40      	cmp	r3, #64	; 0x40
 8004244:	d12c      	bne.n	80042a0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	212c      	movs	r1, #44	; 0x2c
 800424c:	fb01 f303 	mul.w	r3, r1, r3
 8004250:	4413      	add	r3, r2
 8004252:	3361      	adds	r3, #97	; 0x61
 8004254:	2204      	movs	r2, #4
 8004256:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	212c      	movs	r1, #44	; 0x2c
 800425e:	fb01 f303 	mul.w	r3, r1, r3
 8004262:	4413      	add	r3, r2
 8004264:	333d      	adds	r3, #61	; 0x3d
 8004266:	2201      	movs	r2, #1
 8004268:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	212c      	movs	r1, #44	; 0x2c
 8004270:	fb01 f303 	mul.w	r3, r1, r3
 8004274:	4413      	add	r3, r2
 8004276:	335c      	adds	r3, #92	; 0x5c
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	4611      	mov	r1, r2
 8004286:	4618      	mov	r0, r3
 8004288:	f004 fb3d 	bl	8008906 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	4413      	add	r3, r2
 8004294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004298:	461a      	mov	r2, r3
 800429a:	2340      	movs	r3, #64	; 0x40
 800429c:	6093      	str	r3, [r2, #8]
}
 800429e:	e254      	b.n	800474a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	015a      	lsls	r2, r3, #5
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	4413      	add	r3, r2
 80042a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 0308 	and.w	r3, r3, #8
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d11a      	bne.n	80042ec <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	015a      	lsls	r2, r3, #5
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c2:	461a      	mov	r2, r3
 80042c4:	2308      	movs	r3, #8
 80042c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	212c      	movs	r1, #44	; 0x2c
 80042ce:	fb01 f303 	mul.w	r3, r1, r3
 80042d2:	4413      	add	r3, r2
 80042d4:	3361      	adds	r3, #97	; 0x61
 80042d6:	2205      	movs	r2, #5
 80042d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	4611      	mov	r1, r2
 80042e4:	4618      	mov	r0, r3
 80042e6:	f004 fb0e 	bl	8008906 <USB_HC_Halt>
}
 80042ea:	e22e      	b.n	800474a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	015a      	lsls	r2, r3, #5
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	4413      	add	r3, r2
 80042f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 0310 	and.w	r3, r3, #16
 80042fe:	2b10      	cmp	r3, #16
 8004300:	d140      	bne.n	8004384 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	212c      	movs	r1, #44	; 0x2c
 8004308:	fb01 f303 	mul.w	r3, r1, r3
 800430c:	4413      	add	r3, r2
 800430e:	335c      	adds	r3, #92	; 0x5c
 8004310:	2200      	movs	r2, #0
 8004312:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	212c      	movs	r1, #44	; 0x2c
 800431a:	fb01 f303 	mul.w	r3, r1, r3
 800431e:	4413      	add	r3, r2
 8004320:	3361      	adds	r3, #97	; 0x61
 8004322:	2203      	movs	r2, #3
 8004324:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	212c      	movs	r1, #44	; 0x2c
 800432c:	fb01 f303 	mul.w	r3, r1, r3
 8004330:	4413      	add	r3, r2
 8004332:	333d      	adds	r3, #61	; 0x3d
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d112      	bne.n	8004360 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	212c      	movs	r1, #44	; 0x2c
 8004340:	fb01 f303 	mul.w	r3, r1, r3
 8004344:	4413      	add	r3, r2
 8004346:	333c      	adds	r3, #60	; 0x3c
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d108      	bne.n	8004360 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	212c      	movs	r1, #44	; 0x2c
 8004354:	fb01 f303 	mul.w	r3, r1, r3
 8004358:	4413      	add	r3, r2
 800435a:	333d      	adds	r3, #61	; 0x3d
 800435c:	2201      	movs	r2, #1
 800435e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	4611      	mov	r1, r2
 800436a:	4618      	mov	r0, r3
 800436c:	f004 facb 	bl	8008906 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	4413      	add	r3, r2
 8004378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800437c:	461a      	mov	r2, r3
 800437e:	2310      	movs	r3, #16
 8004380:	6093      	str	r3, [r2, #8]
}
 8004382:	e1e2      	b.n	800474a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	4413      	add	r3, r2
 800438c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004396:	2b80      	cmp	r3, #128	; 0x80
 8004398:	d164      	bne.n	8004464 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d111      	bne.n	80043c6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	212c      	movs	r1, #44	; 0x2c
 80043a8:	fb01 f303 	mul.w	r3, r1, r3
 80043ac:	4413      	add	r3, r2
 80043ae:	3361      	adds	r3, #97	; 0x61
 80043b0:	2206      	movs	r2, #6
 80043b2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	4611      	mov	r1, r2
 80043be:	4618      	mov	r0, r3
 80043c0:	f004 faa1 	bl	8008906 <USB_HC_Halt>
 80043c4:	e044      	b.n	8004450 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	212c      	movs	r1, #44	; 0x2c
 80043cc:	fb01 f303 	mul.w	r3, r1, r3
 80043d0:	4413      	add	r3, r2
 80043d2:	335c      	adds	r3, #92	; 0x5c
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	1c5a      	adds	r2, r3, #1
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	202c      	movs	r0, #44	; 0x2c
 80043de:	fb00 f303 	mul.w	r3, r0, r3
 80043e2:	440b      	add	r3, r1
 80043e4:	335c      	adds	r3, #92	; 0x5c
 80043e6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	212c      	movs	r1, #44	; 0x2c
 80043ee:	fb01 f303 	mul.w	r3, r1, r3
 80043f2:	4413      	add	r3, r2
 80043f4:	335c      	adds	r3, #92	; 0x5c
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d920      	bls.n	800443e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	212c      	movs	r1, #44	; 0x2c
 8004402:	fb01 f303 	mul.w	r3, r1, r3
 8004406:	4413      	add	r3, r2
 8004408:	335c      	adds	r3, #92	; 0x5c
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	212c      	movs	r1, #44	; 0x2c
 8004414:	fb01 f303 	mul.w	r3, r1, r3
 8004418:	4413      	add	r3, r2
 800441a:	3360      	adds	r3, #96	; 0x60
 800441c:	2204      	movs	r2, #4
 800441e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	b2d9      	uxtb	r1, r3
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	202c      	movs	r0, #44	; 0x2c
 800442a:	fb00 f303 	mul.w	r3, r0, r3
 800442e:	4413      	add	r3, r2
 8004430:	3360      	adds	r3, #96	; 0x60
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	461a      	mov	r2, r3
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f006 fef4 	bl	800b224 <HAL_HCD_HC_NotifyURBChange_Callback>
 800443c:	e008      	b.n	8004450 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	212c      	movs	r1, #44	; 0x2c
 8004444:	fb01 f303 	mul.w	r3, r1, r3
 8004448:	4413      	add	r3, r2
 800444a:	3360      	adds	r3, #96	; 0x60
 800444c:	2202      	movs	r2, #2
 800444e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	4413      	add	r3, r2
 8004458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800445c:	461a      	mov	r2, r3
 800445e:	2380      	movs	r3, #128	; 0x80
 8004460:	6093      	str	r3, [r2, #8]
}
 8004462:	e172      	b.n	800474a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	4413      	add	r3, r2
 800446c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800447a:	d11b      	bne.n	80044b4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	212c      	movs	r1, #44	; 0x2c
 8004482:	fb01 f303 	mul.w	r3, r1, r3
 8004486:	4413      	add	r3, r2
 8004488:	3361      	adds	r3, #97	; 0x61
 800448a:	2208      	movs	r2, #8
 800448c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	4611      	mov	r1, r2
 8004498:	4618      	mov	r0, r3
 800449a:	f004 fa34 	bl	8008906 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044aa:	461a      	mov	r2, r3
 80044ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044b0:	6093      	str	r3, [r2, #8]
}
 80044b2:	e14a      	b.n	800474a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	f040 813f 	bne.w	800474a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	212c      	movs	r1, #44	; 0x2c
 80044d2:	fb01 f303 	mul.w	r3, r1, r3
 80044d6:	4413      	add	r3, r2
 80044d8:	3361      	adds	r3, #97	; 0x61
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d17d      	bne.n	80045dc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	212c      	movs	r1, #44	; 0x2c
 80044e6:	fb01 f303 	mul.w	r3, r1, r3
 80044ea:	4413      	add	r3, r2
 80044ec:	3360      	adds	r3, #96	; 0x60
 80044ee:	2201      	movs	r2, #1
 80044f0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	212c      	movs	r1, #44	; 0x2c
 80044f8:	fb01 f303 	mul.w	r3, r1, r3
 80044fc:	4413      	add	r3, r2
 80044fe:	333f      	adds	r3, #63	; 0x3f
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	2b02      	cmp	r3, #2
 8004504:	d00a      	beq.n	800451c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	212c      	movs	r1, #44	; 0x2c
 800450c:	fb01 f303 	mul.w	r3, r1, r3
 8004510:	4413      	add	r3, r2
 8004512:	333f      	adds	r3, #63	; 0x3f
 8004514:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004516:	2b03      	cmp	r3, #3
 8004518:	f040 8100 	bne.w	800471c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d113      	bne.n	800454c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	212c      	movs	r1, #44	; 0x2c
 800452a:	fb01 f303 	mul.w	r3, r1, r3
 800452e:	4413      	add	r3, r2
 8004530:	3355      	adds	r3, #85	; 0x55
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	f083 0301 	eor.w	r3, r3, #1
 8004538:	b2d8      	uxtb	r0, r3
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	212c      	movs	r1, #44	; 0x2c
 8004540:	fb01 f303 	mul.w	r3, r1, r3
 8004544:	4413      	add	r3, r2
 8004546:	3355      	adds	r3, #85	; 0x55
 8004548:	4602      	mov	r2, r0
 800454a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	2b01      	cmp	r3, #1
 8004552:	f040 80e3 	bne.w	800471c <HCD_HC_OUT_IRQHandler+0x69c>
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	212c      	movs	r1, #44	; 0x2c
 800455c:	fb01 f303 	mul.w	r3, r1, r3
 8004560:	4413      	add	r3, r2
 8004562:	334c      	adds	r3, #76	; 0x4c
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 80d8 	beq.w	800471c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	212c      	movs	r1, #44	; 0x2c
 8004572:	fb01 f303 	mul.w	r3, r1, r3
 8004576:	4413      	add	r3, r2
 8004578:	334c      	adds	r3, #76	; 0x4c
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6879      	ldr	r1, [r7, #4]
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	202c      	movs	r0, #44	; 0x2c
 8004582:	fb00 f202 	mul.w	r2, r0, r2
 8004586:	440a      	add	r2, r1
 8004588:	3240      	adds	r2, #64	; 0x40
 800458a:	8812      	ldrh	r2, [r2, #0]
 800458c:	4413      	add	r3, r2
 800458e:	3b01      	subs	r3, #1
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	202c      	movs	r0, #44	; 0x2c
 8004596:	fb00 f202 	mul.w	r2, r0, r2
 800459a:	440a      	add	r2, r1
 800459c:	3240      	adds	r2, #64	; 0x40
 800459e:	8812      	ldrh	r2, [r2, #0]
 80045a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 80b5 	beq.w	800471c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	212c      	movs	r1, #44	; 0x2c
 80045b8:	fb01 f303 	mul.w	r3, r1, r3
 80045bc:	4413      	add	r3, r2
 80045be:	3355      	adds	r3, #85	; 0x55
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	f083 0301 	eor.w	r3, r3, #1
 80045c6:	b2d8      	uxtb	r0, r3
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	212c      	movs	r1, #44	; 0x2c
 80045ce:	fb01 f303 	mul.w	r3, r1, r3
 80045d2:	4413      	add	r3, r2
 80045d4:	3355      	adds	r3, #85	; 0x55
 80045d6:	4602      	mov	r2, r0
 80045d8:	701a      	strb	r2, [r3, #0]
 80045da:	e09f      	b.n	800471c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	212c      	movs	r1, #44	; 0x2c
 80045e2:	fb01 f303 	mul.w	r3, r1, r3
 80045e6:	4413      	add	r3, r2
 80045e8:	3361      	adds	r3, #97	; 0x61
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	2b03      	cmp	r3, #3
 80045ee:	d109      	bne.n	8004604 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	212c      	movs	r1, #44	; 0x2c
 80045f6:	fb01 f303 	mul.w	r3, r1, r3
 80045fa:	4413      	add	r3, r2
 80045fc:	3360      	adds	r3, #96	; 0x60
 80045fe:	2202      	movs	r2, #2
 8004600:	701a      	strb	r2, [r3, #0]
 8004602:	e08b      	b.n	800471c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	212c      	movs	r1, #44	; 0x2c
 800460a:	fb01 f303 	mul.w	r3, r1, r3
 800460e:	4413      	add	r3, r2
 8004610:	3361      	adds	r3, #97	; 0x61
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	2b04      	cmp	r3, #4
 8004616:	d109      	bne.n	800462c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	212c      	movs	r1, #44	; 0x2c
 800461e:	fb01 f303 	mul.w	r3, r1, r3
 8004622:	4413      	add	r3, r2
 8004624:	3360      	adds	r3, #96	; 0x60
 8004626:	2202      	movs	r2, #2
 8004628:	701a      	strb	r2, [r3, #0]
 800462a:	e077      	b.n	800471c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	212c      	movs	r1, #44	; 0x2c
 8004632:	fb01 f303 	mul.w	r3, r1, r3
 8004636:	4413      	add	r3, r2
 8004638:	3361      	adds	r3, #97	; 0x61
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	2b05      	cmp	r3, #5
 800463e:	d109      	bne.n	8004654 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	212c      	movs	r1, #44	; 0x2c
 8004646:	fb01 f303 	mul.w	r3, r1, r3
 800464a:	4413      	add	r3, r2
 800464c:	3360      	adds	r3, #96	; 0x60
 800464e:	2205      	movs	r2, #5
 8004650:	701a      	strb	r2, [r3, #0]
 8004652:	e063      	b.n	800471c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	212c      	movs	r1, #44	; 0x2c
 800465a:	fb01 f303 	mul.w	r3, r1, r3
 800465e:	4413      	add	r3, r2
 8004660:	3361      	adds	r3, #97	; 0x61
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2b06      	cmp	r3, #6
 8004666:	d009      	beq.n	800467c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	212c      	movs	r1, #44	; 0x2c
 800466e:	fb01 f303 	mul.w	r3, r1, r3
 8004672:	4413      	add	r3, r2
 8004674:	3361      	adds	r3, #97	; 0x61
 8004676:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004678:	2b08      	cmp	r3, #8
 800467a:	d14f      	bne.n	800471c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	212c      	movs	r1, #44	; 0x2c
 8004682:	fb01 f303 	mul.w	r3, r1, r3
 8004686:	4413      	add	r3, r2
 8004688:	335c      	adds	r3, #92	; 0x5c
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	1c5a      	adds	r2, r3, #1
 800468e:	6879      	ldr	r1, [r7, #4]
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	202c      	movs	r0, #44	; 0x2c
 8004694:	fb00 f303 	mul.w	r3, r0, r3
 8004698:	440b      	add	r3, r1
 800469a:	335c      	adds	r3, #92	; 0x5c
 800469c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	212c      	movs	r1, #44	; 0x2c
 80046a4:	fb01 f303 	mul.w	r3, r1, r3
 80046a8:	4413      	add	r3, r2
 80046aa:	335c      	adds	r3, #92	; 0x5c
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d912      	bls.n	80046d8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	212c      	movs	r1, #44	; 0x2c
 80046b8:	fb01 f303 	mul.w	r3, r1, r3
 80046bc:	4413      	add	r3, r2
 80046be:	335c      	adds	r3, #92	; 0x5c
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	212c      	movs	r1, #44	; 0x2c
 80046ca:	fb01 f303 	mul.w	r3, r1, r3
 80046ce:	4413      	add	r3, r2
 80046d0:	3360      	adds	r3, #96	; 0x60
 80046d2:	2204      	movs	r2, #4
 80046d4:	701a      	strb	r2, [r3, #0]
 80046d6:	e021      	b.n	800471c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	212c      	movs	r1, #44	; 0x2c
 80046de:	fb01 f303 	mul.w	r3, r1, r3
 80046e2:	4413      	add	r3, r2
 80046e4:	3360      	adds	r3, #96	; 0x60
 80046e6:	2202      	movs	r2, #2
 80046e8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	015a      	lsls	r2, r3, #5
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	4413      	add	r3, r2
 80046f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004700:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004708:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	4413      	add	r3, r2
 8004712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004716:	461a      	mov	r2, r3
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	4413      	add	r3, r2
 8004724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004728:	461a      	mov	r2, r3
 800472a:	2302      	movs	r3, #2
 800472c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	b2d9      	uxtb	r1, r3
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	202c      	movs	r0, #44	; 0x2c
 8004738:	fb00 f303 	mul.w	r3, r0, r3
 800473c:	4413      	add	r3, r2
 800473e:	3360      	adds	r3, #96	; 0x60
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f006 fd6d 	bl	800b224 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800474a:	bf00      	nop
 800474c:	3720      	adds	r7, #32
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b08a      	sub	sp, #40	; 0x28
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	f003 030f 	and.w	r3, r3, #15
 8004772:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	0c5b      	lsrs	r3, r3, #17
 8004778:	f003 030f 	and.w	r3, r3, #15
 800477c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	091b      	lsrs	r3, r3, #4
 8004782:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004786:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	2b02      	cmp	r3, #2
 800478c:	d004      	beq.n	8004798 <HCD_RXQLVL_IRQHandler+0x46>
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b05      	cmp	r3, #5
 8004792:	f000 80a9 	beq.w	80048e8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004796:	e0aa      	b.n	80048ee <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 80a6 	beq.w	80048ec <HCD_RXQLVL_IRQHandler+0x19a>
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	212c      	movs	r1, #44	; 0x2c
 80047a6:	fb01 f303 	mul.w	r3, r1, r3
 80047aa:	4413      	add	r3, r2
 80047ac:	3344      	adds	r3, #68	; 0x44
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 809b 	beq.w	80048ec <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	212c      	movs	r1, #44	; 0x2c
 80047bc:	fb01 f303 	mul.w	r3, r1, r3
 80047c0:	4413      	add	r3, r2
 80047c2:	3350      	adds	r3, #80	; 0x50
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	441a      	add	r2, r3
 80047ca:	6879      	ldr	r1, [r7, #4]
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	202c      	movs	r0, #44	; 0x2c
 80047d0:	fb00 f303 	mul.w	r3, r0, r3
 80047d4:	440b      	add	r3, r1
 80047d6:	334c      	adds	r3, #76	; 0x4c
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d87a      	bhi.n	80048d4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6818      	ldr	r0, [r3, #0]
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	212c      	movs	r1, #44	; 0x2c
 80047e8:	fb01 f303 	mul.w	r3, r1, r3
 80047ec:	4413      	add	r3, r2
 80047ee:	3344      	adds	r3, #68	; 0x44
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	b292      	uxth	r2, r2
 80047f6:	4619      	mov	r1, r3
 80047f8:	f003 fc06 	bl	8008008 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	212c      	movs	r1, #44	; 0x2c
 8004802:	fb01 f303 	mul.w	r3, r1, r3
 8004806:	4413      	add	r3, r2
 8004808:	3344      	adds	r3, #68	; 0x44
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	441a      	add	r2, r3
 8004810:	6879      	ldr	r1, [r7, #4]
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	202c      	movs	r0, #44	; 0x2c
 8004816:	fb00 f303 	mul.w	r3, r0, r3
 800481a:	440b      	add	r3, r1
 800481c:	3344      	adds	r3, #68	; 0x44
 800481e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	212c      	movs	r1, #44	; 0x2c
 8004826:	fb01 f303 	mul.w	r3, r1, r3
 800482a:	4413      	add	r3, r2
 800482c:	3350      	adds	r3, #80	; 0x50
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	441a      	add	r2, r3
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	202c      	movs	r0, #44	; 0x2c
 800483a:	fb00 f303 	mul.w	r3, r0, r3
 800483e:	440b      	add	r3, r1
 8004840:	3350      	adds	r3, #80	; 0x50
 8004842:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	015a      	lsls	r2, r3, #5
 8004848:	6a3b      	ldr	r3, [r7, #32]
 800484a:	4413      	add	r3, r2
 800484c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	0cdb      	lsrs	r3, r3, #19
 8004854:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004858:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	212c      	movs	r1, #44	; 0x2c
 8004860:	fb01 f303 	mul.w	r3, r1, r3
 8004864:	4413      	add	r3, r2
 8004866:	3340      	adds	r3, #64	; 0x40
 8004868:	881b      	ldrh	r3, [r3, #0]
 800486a:	461a      	mov	r2, r3
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	4293      	cmp	r3, r2
 8004870:	d13c      	bne.n	80048ec <HCD_RXQLVL_IRQHandler+0x19a>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d039      	beq.n	80048ec <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	4413      	add	r3, r2
 8004880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800488e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004896:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	6a3b      	ldr	r3, [r7, #32]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048a4:	461a      	mov	r2, r3
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	212c      	movs	r1, #44	; 0x2c
 80048b0:	fb01 f303 	mul.w	r3, r1, r3
 80048b4:	4413      	add	r3, r2
 80048b6:	3354      	adds	r3, #84	; 0x54
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	f083 0301 	eor.w	r3, r3, #1
 80048be:	b2d8      	uxtb	r0, r3
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	212c      	movs	r1, #44	; 0x2c
 80048c6:	fb01 f303 	mul.w	r3, r1, r3
 80048ca:	4413      	add	r3, r2
 80048cc:	3354      	adds	r3, #84	; 0x54
 80048ce:	4602      	mov	r2, r0
 80048d0:	701a      	strb	r2, [r3, #0]
      break;
 80048d2:	e00b      	b.n	80048ec <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	212c      	movs	r1, #44	; 0x2c
 80048da:	fb01 f303 	mul.w	r3, r1, r3
 80048de:	4413      	add	r3, r2
 80048e0:	3360      	adds	r3, #96	; 0x60
 80048e2:	2204      	movs	r2, #4
 80048e4:	701a      	strb	r2, [r3, #0]
      break;
 80048e6:	e001      	b.n	80048ec <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80048e8:	bf00      	nop
 80048ea:	e000      	b.n	80048ee <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80048ec:	bf00      	nop
  }
}
 80048ee:	bf00      	nop
 80048f0:	3728      	adds	r7, #40	; 0x28
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b086      	sub	sp, #24
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004922:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b02      	cmp	r3, #2
 800492c:	d10b      	bne.n	8004946 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b01      	cmp	r3, #1
 8004936:	d102      	bne.n	800493e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f006 fc57 	bl	800b1ec <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	f043 0302 	orr.w	r3, r3, #2
 8004944:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f003 0308 	and.w	r3, r3, #8
 800494c:	2b08      	cmp	r3, #8
 800494e:	d132      	bne.n	80049b6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	f043 0308 	orr.w	r3, r3, #8
 8004956:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f003 0304 	and.w	r3, r3, #4
 800495e:	2b04      	cmp	r3, #4
 8004960:	d126      	bne.n	80049b0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	2b02      	cmp	r3, #2
 8004968:	d113      	bne.n	8004992 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004970:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004974:	d106      	bne.n	8004984 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2102      	movs	r1, #2
 800497c:	4618      	mov	r0, r3
 800497e:	f003 fcb1 	bl	80082e4 <USB_InitFSLSPClkSel>
 8004982:	e011      	b.n	80049a8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2101      	movs	r1, #1
 800498a:	4618      	mov	r0, r3
 800498c:	f003 fcaa 	bl	80082e4 <USB_InitFSLSPClkSel>
 8004990:	e00a      	b.n	80049a8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d106      	bne.n	80049a8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049a0:	461a      	mov	r2, r3
 80049a2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80049a6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f006 fc49 	bl	800b240 <HAL_HCD_PortEnabled_Callback>
 80049ae:	e002      	b.n	80049b6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f006 fc53 	bl	800b25c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f003 0320 	and.w	r3, r3, #32
 80049bc:	2b20      	cmp	r3, #32
 80049be:	d103      	bne.n	80049c8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	f043 0320 	orr.w	r3, r3, #32
 80049c6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80049ce:	461a      	mov	r2, r3
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	6013      	str	r3, [r2, #0]
}
 80049d4:	bf00      	nop
 80049d6:	3718      	adds	r7, #24
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e12b      	b.n	8004c46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7fd f868 	bl	8001ad8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2224      	movs	r2, #36	; 0x24
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 0201 	bic.w	r2, r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a40:	f002 fab2 	bl	8006fa8 <HAL_RCC_GetPCLK1Freq>
 8004a44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	4a81      	ldr	r2, [pc, #516]	; (8004c50 <HAL_I2C_Init+0x274>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d807      	bhi.n	8004a60 <HAL_I2C_Init+0x84>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4a80      	ldr	r2, [pc, #512]	; (8004c54 <HAL_I2C_Init+0x278>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	bf94      	ite	ls
 8004a58:	2301      	movls	r3, #1
 8004a5a:	2300      	movhi	r3, #0
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	e006      	b.n	8004a6e <HAL_I2C_Init+0x92>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4a7d      	ldr	r2, [pc, #500]	; (8004c58 <HAL_I2C_Init+0x27c>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	bf94      	ite	ls
 8004a68:	2301      	movls	r3, #1
 8004a6a:	2300      	movhi	r3, #0
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e0e7      	b.n	8004c46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4a78      	ldr	r2, [pc, #480]	; (8004c5c <HAL_I2C_Init+0x280>)
 8004a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7e:	0c9b      	lsrs	r3, r3, #18
 8004a80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	4a6a      	ldr	r2, [pc, #424]	; (8004c50 <HAL_I2C_Init+0x274>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d802      	bhi.n	8004ab0 <HAL_I2C_Init+0xd4>
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	3301      	adds	r3, #1
 8004aae:	e009      	b.n	8004ac4 <HAL_I2C_Init+0xe8>
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ab6:	fb02 f303 	mul.w	r3, r2, r3
 8004aba:	4a69      	ldr	r2, [pc, #420]	; (8004c60 <HAL_I2C_Init+0x284>)
 8004abc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac0:	099b      	lsrs	r3, r3, #6
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6812      	ldr	r2, [r2, #0]
 8004ac8:	430b      	orrs	r3, r1
 8004aca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004ad6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	495c      	ldr	r1, [pc, #368]	; (8004c50 <HAL_I2C_Init+0x274>)
 8004ae0:	428b      	cmp	r3, r1
 8004ae2:	d819      	bhi.n	8004b18 <HAL_I2C_Init+0x13c>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	1e59      	subs	r1, r3, #1
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	fbb1 f3f3 	udiv	r3, r1, r3
 8004af2:	1c59      	adds	r1, r3, #1
 8004af4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004af8:	400b      	ands	r3, r1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00a      	beq.n	8004b14 <HAL_I2C_Init+0x138>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	1e59      	subs	r1, r3, #1
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	005b      	lsls	r3, r3, #1
 8004b08:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b12:	e051      	b.n	8004bb8 <HAL_I2C_Init+0x1dc>
 8004b14:	2304      	movs	r3, #4
 8004b16:	e04f      	b.n	8004bb8 <HAL_I2C_Init+0x1dc>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d111      	bne.n	8004b44 <HAL_I2C_Init+0x168>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	1e58      	subs	r0, r3, #1
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6859      	ldr	r1, [r3, #4]
 8004b28:	460b      	mov	r3, r1
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	440b      	add	r3, r1
 8004b2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b32:	3301      	adds	r3, #1
 8004b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	bf0c      	ite	eq
 8004b3c:	2301      	moveq	r3, #1
 8004b3e:	2300      	movne	r3, #0
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	e012      	b.n	8004b6a <HAL_I2C_Init+0x18e>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	1e58      	subs	r0, r3, #1
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6859      	ldr	r1, [r3, #4]
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	440b      	add	r3, r1
 8004b52:	0099      	lsls	r1, r3, #2
 8004b54:	440b      	add	r3, r1
 8004b56:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	bf0c      	ite	eq
 8004b64:	2301      	moveq	r3, #1
 8004b66:	2300      	movne	r3, #0
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <HAL_I2C_Init+0x196>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e022      	b.n	8004bb8 <HAL_I2C_Init+0x1dc>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10e      	bne.n	8004b98 <HAL_I2C_Init+0x1bc>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	1e58      	subs	r0, r3, #1
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6859      	ldr	r1, [r3, #4]
 8004b82:	460b      	mov	r3, r1
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	440b      	add	r3, r1
 8004b88:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b96:	e00f      	b.n	8004bb8 <HAL_I2C_Init+0x1dc>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	1e58      	subs	r0, r3, #1
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6859      	ldr	r1, [r3, #4]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	440b      	add	r3, r1
 8004ba6:	0099      	lsls	r1, r3, #2
 8004ba8:	440b      	add	r3, r1
 8004baa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bae:	3301      	adds	r3, #1
 8004bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bb8:	6879      	ldr	r1, [r7, #4]
 8004bba:	6809      	ldr	r1, [r1, #0]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	69da      	ldr	r2, [r3, #28]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004be6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	6911      	ldr	r1, [r2, #16]
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	68d2      	ldr	r2, [r2, #12]
 8004bf2:	4311      	orrs	r1, r2
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	6812      	ldr	r2, [r2, #0]
 8004bf8:	430b      	orrs	r3, r1
 8004bfa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	695a      	ldr	r2, [r3, #20]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0201 	orr.w	r2, r2, #1
 8004c26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2220      	movs	r2, #32
 8004c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	000186a0 	.word	0x000186a0
 8004c54:	001e847f 	.word	0x001e847f
 8004c58:	003d08ff 	.word	0x003d08ff
 8004c5c:	431bde83 	.word	0x431bde83
 8004c60:	10624dd3 	.word	0x10624dd3

08004c64 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e021      	b.n	8004cba <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2224      	movs	r2, #36	; 0x24
 8004c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 0201 	bic.w	r2, r2, #1
 8004c8c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7fc ff6a 	bl	8001b68 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
	...

08004cc4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b088      	sub	sp, #32
 8004cc8:	af02      	add	r7, sp, #8
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	4608      	mov	r0, r1
 8004cce:	4611      	mov	r1, r2
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	817b      	strh	r3, [r7, #10]
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	813b      	strh	r3, [r7, #8]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cde:	f7fd facd 	bl	800227c <HAL_GetTick>
 8004ce2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b20      	cmp	r3, #32
 8004cee:	f040 80d9 	bne.w	8004ea4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	2319      	movs	r3, #25
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	496d      	ldr	r1, [pc, #436]	; (8004eb0 <HAL_I2C_Mem_Write+0x1ec>)
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 fc8d 	bl	800561c <I2C_WaitOnFlagUntilTimeout>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d001      	beq.n	8004d0c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004d08:	2302      	movs	r3, #2
 8004d0a:	e0cc      	b.n	8004ea6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d101      	bne.n	8004d1a <HAL_I2C_Mem_Write+0x56>
 8004d16:	2302      	movs	r3, #2
 8004d18:	e0c5      	b.n	8004ea6 <HAL_I2C_Mem_Write+0x1e2>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d007      	beq.n	8004d40 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0201 	orr.w	r2, r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2221      	movs	r2, #33	; 0x21
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2240      	movs	r2, #64	; 0x40
 8004d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6a3a      	ldr	r2, [r7, #32]
 8004d6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4a4d      	ldr	r2, [pc, #308]	; (8004eb4 <HAL_I2C_Mem_Write+0x1f0>)
 8004d80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d82:	88f8      	ldrh	r0, [r7, #6]
 8004d84:	893a      	ldrh	r2, [r7, #8]
 8004d86:	8979      	ldrh	r1, [r7, #10]
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	9301      	str	r3, [sp, #4]
 8004d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	4603      	mov	r3, r0
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f000 fac4 	bl	8005320 <I2C_RequestMemoryWrite>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d052      	beq.n	8004e44 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e081      	b.n	8004ea6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 fd0e 	bl	80057c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00d      	beq.n	8004dce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	2b04      	cmp	r3, #4
 8004db8:	d107      	bne.n	8004dca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e06b      	b.n	8004ea6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	781a      	ldrb	r2, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	3b01      	subs	r3, #1
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	2b04      	cmp	r3, #4
 8004e0a:	d11b      	bne.n	8004e44 <HAL_I2C_Mem_Write+0x180>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d017      	beq.n	8004e44 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	781a      	ldrb	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	1c5a      	adds	r2, r3, #1
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1aa      	bne.n	8004da2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 fcfa 	bl	800584a <I2C_WaitOnBTFFlagUntilTimeout>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00d      	beq.n	8004e78 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e60:	2b04      	cmp	r3, #4
 8004e62:	d107      	bne.n	8004e74 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e016      	b.n	8004ea6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	e000      	b.n	8004ea6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004ea4:	2302      	movs	r3, #2
  }
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	00100002 	.word	0x00100002
 8004eb4:	ffff0000 	.word	0xffff0000

08004eb8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b08c      	sub	sp, #48	; 0x30
 8004ebc:	af02      	add	r7, sp, #8
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	4608      	mov	r0, r1
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	817b      	strh	r3, [r7, #10]
 8004eca:	460b      	mov	r3, r1
 8004ecc:	813b      	strh	r3, [r7, #8]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ed2:	f7fd f9d3 	bl	800227c <HAL_GetTick>
 8004ed6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b20      	cmp	r3, #32
 8004ee2:	f040 8208 	bne.w	80052f6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	2319      	movs	r3, #25
 8004eec:	2201      	movs	r2, #1
 8004eee:	497b      	ldr	r1, [pc, #492]	; (80050dc <HAL_I2C_Mem_Read+0x224>)
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f000 fb93 	bl	800561c <I2C_WaitOnFlagUntilTimeout>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d001      	beq.n	8004f00 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004efc:	2302      	movs	r3, #2
 8004efe:	e1fb      	b.n	80052f8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d101      	bne.n	8004f0e <HAL_I2C_Mem_Read+0x56>
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	e1f4      	b.n	80052f8 <HAL_I2C_Mem_Read+0x440>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d007      	beq.n	8004f34 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0201 	orr.w	r2, r2, #1
 8004f32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2222      	movs	r2, #34	; 0x22
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2240      	movs	r2, #64	; 0x40
 8004f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004f64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	4a5b      	ldr	r2, [pc, #364]	; (80050e0 <HAL_I2C_Mem_Read+0x228>)
 8004f74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f76:	88f8      	ldrh	r0, [r7, #6]
 8004f78:	893a      	ldrh	r2, [r7, #8]
 8004f7a:	8979      	ldrh	r1, [r7, #10]
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	9301      	str	r3, [sp, #4]
 8004f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	4603      	mov	r3, r0
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f000 fa60 	bl	800544c <I2C_RequestMemoryRead>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e1b0      	b.n	80052f8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d113      	bne.n	8004fc6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	623b      	str	r3, [r7, #32]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	623b      	str	r3, [r7, #32]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	623b      	str	r3, [r7, #32]
 8004fb2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	e184      	b.n	80052d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d11b      	bne.n	8005006 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fdc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fde:	2300      	movs	r3, #0
 8004fe0:	61fb      	str	r3, [r7, #28]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	61fb      	str	r3, [r7, #28]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	61fb      	str	r3, [r7, #28]
 8004ff2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	e164      	b.n	80052d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800500a:	2b02      	cmp	r3, #2
 800500c:	d11b      	bne.n	8005046 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800501c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800502c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800502e:	2300      	movs	r3, #0
 8005030:	61bb      	str	r3, [r7, #24]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	61bb      	str	r3, [r7, #24]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	61bb      	str	r3, [r7, #24]
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	e144      	b.n	80052d0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005046:	2300      	movs	r3, #0
 8005048:	617b      	str	r3, [r7, #20]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	617b      	str	r3, [r7, #20]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	617b      	str	r3, [r7, #20]
 800505a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800505c:	e138      	b.n	80052d0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005062:	2b03      	cmp	r3, #3
 8005064:	f200 80f1 	bhi.w	800524a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800506c:	2b01      	cmp	r3, #1
 800506e:	d123      	bne.n	80050b8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005072:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 fc29 	bl	80058cc <I2C_WaitOnRXNEFlagUntilTimeout>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d001      	beq.n	8005084 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e139      	b.n	80052f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	691a      	ldr	r2, [r3, #16]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	b2d2      	uxtb	r2, r2
 8005090:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	1c5a      	adds	r2, r3, #1
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a0:	3b01      	subs	r3, #1
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	3b01      	subs	r3, #1
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050b6:	e10b      	b.n	80052d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d14e      	bne.n	800515e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c6:	2200      	movs	r2, #0
 80050c8:	4906      	ldr	r1, [pc, #24]	; (80050e4 <HAL_I2C_Mem_Read+0x22c>)
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f000 faa6 	bl	800561c <I2C_WaitOnFlagUntilTimeout>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d008      	beq.n	80050e8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e10e      	b.n	80052f8 <HAL_I2C_Mem_Read+0x440>
 80050da:	bf00      	nop
 80050dc:	00100002 	.word	0x00100002
 80050e0:	ffff0000 	.word	0xffff0000
 80050e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	691a      	ldr	r2, [r3, #16]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	b2d2      	uxtb	r2, r2
 8005104:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510a:	1c5a      	adds	r2, r3, #1
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005114:	3b01      	subs	r3, #1
 8005116:	b29a      	uxth	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005120:	b29b      	uxth	r3, r3
 8005122:	3b01      	subs	r3, #1
 8005124:	b29a      	uxth	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	691a      	ldr	r2, [r3, #16]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	b2d2      	uxtb	r2, r2
 8005136:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513c:	1c5a      	adds	r2, r3, #1
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005146:	3b01      	subs	r3, #1
 8005148:	b29a      	uxth	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005152:	b29b      	uxth	r3, r3
 8005154:	3b01      	subs	r3, #1
 8005156:	b29a      	uxth	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800515c:	e0b8      	b.n	80052d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005164:	2200      	movs	r2, #0
 8005166:	4966      	ldr	r1, [pc, #408]	; (8005300 <HAL_I2C_Mem_Read+0x448>)
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f000 fa57 	bl	800561c <I2C_WaitOnFlagUntilTimeout>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e0bf      	b.n	80052f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005186:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	691a      	ldr	r2, [r3, #16]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005192:	b2d2      	uxtb	r2, r2
 8005194:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	1c5a      	adds	r2, r3, #1
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a4:	3b01      	subs	r3, #1
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c0:	2200      	movs	r2, #0
 80051c2:	494f      	ldr	r1, [pc, #316]	; (8005300 <HAL_I2C_Mem_Read+0x448>)
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 fa29 	bl	800561c <I2C_WaitOnFlagUntilTimeout>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d001      	beq.n	80051d4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e091      	b.n	80052f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	691a      	ldr	r2, [r3, #16]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005200:	3b01      	subs	r3, #1
 8005202:	b29a      	uxth	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520c:	b29b      	uxth	r3, r3
 800520e:	3b01      	subs	r3, #1
 8005210:	b29a      	uxth	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	691a      	ldr	r2, [r3, #16]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	b2d2      	uxtb	r2, r2
 8005222:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	1c5a      	adds	r2, r3, #1
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005232:	3b01      	subs	r3, #1
 8005234:	b29a      	uxth	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800523e:	b29b      	uxth	r3, r3
 8005240:	3b01      	subs	r3, #1
 8005242:	b29a      	uxth	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005248:	e042      	b.n	80052d0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800524a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800524c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 fb3c 	bl	80058cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e04c      	b.n	80052f8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	691a      	ldr	r2, [r3, #16]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005268:	b2d2      	uxtb	r2, r2
 800526a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005270:	1c5a      	adds	r2, r3, #1
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800527a:	3b01      	subs	r3, #1
 800527c:	b29a      	uxth	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005286:	b29b      	uxth	r3, r3
 8005288:	3b01      	subs	r3, #1
 800528a:	b29a      	uxth	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	f003 0304 	and.w	r3, r3, #4
 800529a:	2b04      	cmp	r3, #4
 800529c:	d118      	bne.n	80052d0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	691a      	ldr	r2, [r3, #16]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a8:	b2d2      	uxtb	r2, r2
 80052aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	1c5a      	adds	r2, r3, #1
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ba:	3b01      	subs	r3, #1
 80052bc:	b29a      	uxth	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	3b01      	subs	r3, #1
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f47f aec2 	bne.w	800505e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2220      	movs	r2, #32
 80052de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052f2:	2300      	movs	r3, #0
 80052f4:	e000      	b.n	80052f8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80052f6:	2302      	movs	r3, #2
  }
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3728      	adds	r7, #40	; 0x28
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	00010004 	.word	0x00010004

08005304 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005312:	b2db      	uxtb	r3, r3
}
 8005314:	4618      	mov	r0, r3
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b088      	sub	sp, #32
 8005324:	af02      	add	r7, sp, #8
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	4608      	mov	r0, r1
 800532a:	4611      	mov	r1, r2
 800532c:	461a      	mov	r2, r3
 800532e:	4603      	mov	r3, r0
 8005330:	817b      	strh	r3, [r7, #10]
 8005332:	460b      	mov	r3, r1
 8005334:	813b      	strh	r3, [r7, #8]
 8005336:	4613      	mov	r3, r2
 8005338:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005348:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	6a3b      	ldr	r3, [r7, #32]
 8005350:	2200      	movs	r2, #0
 8005352:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 f960 	bl	800561c <I2C_WaitOnFlagUntilTimeout>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00d      	beq.n	800537e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005370:	d103      	bne.n	800537a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005378:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e05f      	b.n	800543e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800537e:	897b      	ldrh	r3, [r7, #10]
 8005380:	b2db      	uxtb	r3, r3
 8005382:	461a      	mov	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800538c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	6a3a      	ldr	r2, [r7, #32]
 8005392:	492d      	ldr	r1, [pc, #180]	; (8005448 <I2C_RequestMemoryWrite+0x128>)
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f000 f998 	bl	80056ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e04c      	b.n	800543e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053a4:	2300      	movs	r3, #0
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053bc:	6a39      	ldr	r1, [r7, #32]
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 fa02 	bl	80057c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00d      	beq.n	80053e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	d107      	bne.n	80053e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e02b      	b.n	800543e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053e6:	88fb      	ldrh	r3, [r7, #6]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d105      	bne.n	80053f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053ec:	893b      	ldrh	r3, [r7, #8]
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	611a      	str	r2, [r3, #16]
 80053f6:	e021      	b.n	800543c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053f8:	893b      	ldrh	r3, [r7, #8]
 80053fa:	0a1b      	lsrs	r3, r3, #8
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005408:	6a39      	ldr	r1, [r7, #32]
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 f9dc 	bl	80057c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00d      	beq.n	8005432 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541a:	2b04      	cmp	r3, #4
 800541c:	d107      	bne.n	800542e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800542c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e005      	b.n	800543e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005432:	893b      	ldrh	r3, [r7, #8]
 8005434:	b2da      	uxtb	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3718      	adds	r7, #24
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	00010002 	.word	0x00010002

0800544c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b088      	sub	sp, #32
 8005450:	af02      	add	r7, sp, #8
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	4608      	mov	r0, r1
 8005456:	4611      	mov	r1, r2
 8005458:	461a      	mov	r2, r3
 800545a:	4603      	mov	r3, r0
 800545c:	817b      	strh	r3, [r7, #10]
 800545e:	460b      	mov	r3, r1
 8005460:	813b      	strh	r3, [r7, #8]
 8005462:	4613      	mov	r3, r2
 8005464:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005474:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005484:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	2200      	movs	r2, #0
 800548e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f000 f8c2 	bl	800561c <I2C_WaitOnFlagUntilTimeout>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00d      	beq.n	80054ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ac:	d103      	bne.n	80054b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e0aa      	b.n	8005610 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054ba:	897b      	ldrh	r3, [r7, #10]
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	461a      	mov	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	6a3a      	ldr	r2, [r7, #32]
 80054ce:	4952      	ldr	r1, [pc, #328]	; (8005618 <I2C_RequestMemoryRead+0x1cc>)
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 f8fa 	bl	80056ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d001      	beq.n	80054e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e097      	b.n	8005610 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054e0:	2300      	movs	r3, #0
 80054e2:	617b      	str	r3, [r7, #20]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	617b      	str	r3, [r7, #20]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	617b      	str	r3, [r7, #20]
 80054f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054f8:	6a39      	ldr	r1, [r7, #32]
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 f964 	bl	80057c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00d      	beq.n	8005522 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550a:	2b04      	cmp	r3, #4
 800550c:	d107      	bne.n	800551e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800551c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e076      	b.n	8005610 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005522:	88fb      	ldrh	r3, [r7, #6]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d105      	bne.n	8005534 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005528:	893b      	ldrh	r3, [r7, #8]
 800552a:	b2da      	uxtb	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	611a      	str	r2, [r3, #16]
 8005532:	e021      	b.n	8005578 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005534:	893b      	ldrh	r3, [r7, #8]
 8005536:	0a1b      	lsrs	r3, r3, #8
 8005538:	b29b      	uxth	r3, r3
 800553a:	b2da      	uxtb	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005544:	6a39      	ldr	r1, [r7, #32]
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 f93e 	bl	80057c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00d      	beq.n	800556e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005556:	2b04      	cmp	r3, #4
 8005558:	d107      	bne.n	800556a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005568:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e050      	b.n	8005610 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800556e:	893b      	ldrh	r3, [r7, #8]
 8005570:	b2da      	uxtb	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800557a:	6a39      	ldr	r1, [r7, #32]
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 f923 	bl	80057c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00d      	beq.n	80055a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558c:	2b04      	cmp	r3, #4
 800558e:	d107      	bne.n	80055a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800559e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e035      	b.n	8005610 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f000 f82b 	bl	800561c <I2C_WaitOnFlagUntilTimeout>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00d      	beq.n	80055e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055da:	d103      	bne.n	80055e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e013      	b.n	8005610 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80055e8:	897b      	ldrh	r3, [r7, #10]
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	f043 0301 	orr.w	r3, r3, #1
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	6a3a      	ldr	r2, [r7, #32]
 80055fc:	4906      	ldr	r1, [pc, #24]	; (8005618 <I2C_RequestMemoryRead+0x1cc>)
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f000 f863 	bl	80056ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e000      	b.n	8005610 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3718      	adds	r7, #24
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	00010002 	.word	0x00010002

0800561c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	603b      	str	r3, [r7, #0]
 8005628:	4613      	mov	r3, r2
 800562a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800562c:	e025      	b.n	800567a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005634:	d021      	beq.n	800567a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005636:	f7fc fe21 	bl	800227c <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	683a      	ldr	r2, [r7, #0]
 8005642:	429a      	cmp	r2, r3
 8005644:	d302      	bcc.n	800564c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d116      	bne.n	800567a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2220      	movs	r2, #32
 8005656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005666:	f043 0220 	orr.w	r2, r3, #32
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e023      	b.n	80056c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	0c1b      	lsrs	r3, r3, #16
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b01      	cmp	r3, #1
 8005682:	d10d      	bne.n	80056a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	43da      	mvns	r2, r3
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	4013      	ands	r3, r2
 8005690:	b29b      	uxth	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	bf0c      	ite	eq
 8005696:	2301      	moveq	r3, #1
 8005698:	2300      	movne	r3, #0
 800569a:	b2db      	uxtb	r3, r3
 800569c:	461a      	mov	r2, r3
 800569e:	e00c      	b.n	80056ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	43da      	mvns	r2, r3
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	4013      	ands	r3, r2
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	bf0c      	ite	eq
 80056b2:	2301      	moveq	r3, #1
 80056b4:	2300      	movne	r3, #0
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	461a      	mov	r2, r3
 80056ba:	79fb      	ldrb	r3, [r7, #7]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d0b6      	beq.n	800562e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b084      	sub	sp, #16
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	60f8      	str	r0, [r7, #12]
 80056d2:	60b9      	str	r1, [r7, #8]
 80056d4:	607a      	str	r2, [r7, #4]
 80056d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056d8:	e051      	b.n	800577e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056e8:	d123      	bne.n	8005732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005702:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2220      	movs	r2, #32
 800570e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	f043 0204 	orr.w	r2, r3, #4
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e046      	b.n	80057c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005738:	d021      	beq.n	800577e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800573a:	f7fc fd9f 	bl	800227c <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	429a      	cmp	r2, r3
 8005748:	d302      	bcc.n	8005750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d116      	bne.n	800577e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2220      	movs	r2, #32
 800575a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576a:	f043 0220 	orr.w	r2, r3, #32
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e020      	b.n	80057c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	0c1b      	lsrs	r3, r3, #16
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b01      	cmp	r3, #1
 8005786:	d10c      	bne.n	80057a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	43da      	mvns	r2, r3
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	4013      	ands	r3, r2
 8005794:	b29b      	uxth	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	bf14      	ite	ne
 800579a:	2301      	movne	r3, #1
 800579c:	2300      	moveq	r3, #0
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	e00b      	b.n	80057ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	43da      	mvns	r2, r3
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	4013      	ands	r3, r2
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	bf14      	ite	ne
 80057b4:	2301      	movne	r3, #1
 80057b6:	2300      	moveq	r3, #0
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d18d      	bne.n	80056da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057d4:	e02d      	b.n	8005832 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f000 f8ce 	bl	8005978 <I2C_IsAcknowledgeFailed>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e02d      	b.n	8005842 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057ec:	d021      	beq.n	8005832 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ee:	f7fc fd45 	bl	800227c <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d302      	bcc.n	8005804 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d116      	bne.n	8005832 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2220      	movs	r2, #32
 800580e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581e:	f043 0220 	orr.w	r2, r3, #32
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e007      	b.n	8005842 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800583c:	2b80      	cmp	r3, #128	; 0x80
 800583e:	d1ca      	bne.n	80057d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b084      	sub	sp, #16
 800584e:	af00      	add	r7, sp, #0
 8005850:	60f8      	str	r0, [r7, #12]
 8005852:	60b9      	str	r1, [r7, #8]
 8005854:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005856:	e02d      	b.n	80058b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 f88d 	bl	8005978 <I2C_IsAcknowledgeFailed>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d001      	beq.n	8005868 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e02d      	b.n	80058c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800586e:	d021      	beq.n	80058b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005870:	f7fc fd04 	bl	800227c <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	429a      	cmp	r2, r3
 800587e:	d302      	bcc.n	8005886 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d116      	bne.n	80058b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2220      	movs	r2, #32
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a0:	f043 0220 	orr.w	r2, r3, #32
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e007      	b.n	80058c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	f003 0304 	and.w	r3, r3, #4
 80058be:	2b04      	cmp	r3, #4
 80058c0:	d1ca      	bne.n	8005858 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058d8:	e042      	b.n	8005960 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	f003 0310 	and.w	r3, r3, #16
 80058e4:	2b10      	cmp	r3, #16
 80058e6:	d119      	bne.n	800591c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f06f 0210 	mvn.w	r2, #16
 80058f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2220      	movs	r2, #32
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e029      	b.n	8005970 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800591c:	f7fc fcae 	bl	800227c <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	429a      	cmp	r2, r3
 800592a:	d302      	bcc.n	8005932 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d116      	bne.n	8005960 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2220      	movs	r2, #32
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594c:	f043 0220 	orr.w	r2, r3, #32
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e007      	b.n	8005970 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596a:	2b40      	cmp	r3, #64	; 0x40
 800596c:	d1b5      	bne.n	80058da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800598a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800598e:	d11b      	bne.n	80059c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005998:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2220      	movs	r2, #32
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b4:	f043 0204 	orr.w	r2, r3, #4
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e000      	b.n	80059ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
	...

080059d8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b088      	sub	sp, #32
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e128      	b.n	8005c3c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d109      	bne.n	8005a0a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a90      	ldr	r2, [pc, #576]	; (8005c44 <HAL_I2S_Init+0x26c>)
 8005a02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f7fc f8d3 	bl	8001bb0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	69db      	ldr	r3, [r3, #28]
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6812      	ldr	r2, [r2, #0]
 8005a1c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005a20:	f023 030f 	bic.w	r3, r3, #15
 8005a24:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d060      	beq.n	8005af8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d102      	bne.n	8005a44 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005a3e:	2310      	movs	r3, #16
 8005a40:	617b      	str	r3, [r7, #20]
 8005a42:	e001      	b.n	8005a48 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005a44:	2320      	movs	r3, #32
 8005a46:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	2b20      	cmp	r3, #32
 8005a4e:	d802      	bhi.n	8005a56 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005a56:	2001      	movs	r0, #1
 8005a58:	f001 fbdc 	bl	8007214 <HAL_RCCEx_GetPeriphCLKFreq>
 8005a5c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a66:	d125      	bne.n	8005ab4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d010      	beq.n	8005a92 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	4413      	add	r3, r2
 8005a80:	005b      	lsls	r3, r3, #1
 8005a82:	461a      	mov	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a8c:	3305      	adds	r3, #5
 8005a8e:	613b      	str	r3, [r7, #16]
 8005a90:	e01f      	b.n	8005ad2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	00db      	lsls	r3, r3, #3
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	005b      	lsls	r3, r3, #1
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aae:	3305      	adds	r3, #5
 8005ab0:	613b      	str	r3, [r7, #16]
 8005ab2:	e00e      	b.n	8005ad2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005abc:	4613      	mov	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	005b      	lsls	r3, r3, #1
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ace:	3305      	adds	r3, #5
 8005ad0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	4a5c      	ldr	r2, [pc, #368]	; (8005c48 <HAL_I2S_Init+0x270>)
 8005ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8005ada:	08db      	lsrs	r3, r3, #3
 8005adc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	085b      	lsrs	r3, r3, #1
 8005aee:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	021b      	lsls	r3, r3, #8
 8005af4:	61bb      	str	r3, [r7, #24]
 8005af6:	e003      	b.n	8005b00 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005af8:	2302      	movs	r3, #2
 8005afa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005afc:	2300      	movs	r3, #0
 8005afe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d902      	bls.n	8005b0c <HAL_I2S_Init+0x134>
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	2bff      	cmp	r3, #255	; 0xff
 8005b0a:	d907      	bls.n	8005b1c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b10:	f043 0210 	orr.w	r2, r3, #16
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e08f      	b.n	8005c3c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	691a      	ldr	r2, [r3, #16]
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	ea42 0103 	orr.w	r1, r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69fa      	ldr	r2, [r7, #28]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005b3a:	f023 030f 	bic.w	r3, r3, #15
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6851      	ldr	r1, [r2, #4]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	6892      	ldr	r2, [r2, #8]
 8005b46:	4311      	orrs	r1, r2
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	68d2      	ldr	r2, [r2, #12]
 8005b4c:	4311      	orrs	r1, r2
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	6992      	ldr	r2, [r2, #24]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	431a      	orrs	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b5e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d161      	bne.n	8005c2c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a38      	ldr	r2, [pc, #224]	; (8005c4c <HAL_I2S_Init+0x274>)
 8005b6c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a37      	ldr	r2, [pc, #220]	; (8005c50 <HAL_I2S_Init+0x278>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d101      	bne.n	8005b7c <HAL_I2S_Init+0x1a4>
 8005b78:	4b36      	ldr	r3, [pc, #216]	; (8005c54 <HAL_I2S_Init+0x27c>)
 8005b7a:	e001      	b.n	8005b80 <HAL_I2S_Init+0x1a8>
 8005b7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	6812      	ldr	r2, [r2, #0]
 8005b86:	4932      	ldr	r1, [pc, #200]	; (8005c50 <HAL_I2S_Init+0x278>)
 8005b88:	428a      	cmp	r2, r1
 8005b8a:	d101      	bne.n	8005b90 <HAL_I2S_Init+0x1b8>
 8005b8c:	4a31      	ldr	r2, [pc, #196]	; (8005c54 <HAL_I2S_Init+0x27c>)
 8005b8e:	e001      	b.n	8005b94 <HAL_I2S_Init+0x1bc>
 8005b90:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005b94:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005b98:	f023 030f 	bic.w	r3, r3, #15
 8005b9c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a2b      	ldr	r2, [pc, #172]	; (8005c50 <HAL_I2S_Init+0x278>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d101      	bne.n	8005bac <HAL_I2S_Init+0x1d4>
 8005ba8:	4b2a      	ldr	r3, [pc, #168]	; (8005c54 <HAL_I2S_Init+0x27c>)
 8005baa:	e001      	b.n	8005bb0 <HAL_I2S_Init+0x1d8>
 8005bac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bb0:	2202      	movs	r2, #2
 8005bb2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a25      	ldr	r2, [pc, #148]	; (8005c50 <HAL_I2S_Init+0x278>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d101      	bne.n	8005bc2 <HAL_I2S_Init+0x1ea>
 8005bbe:	4b25      	ldr	r3, [pc, #148]	; (8005c54 <HAL_I2S_Init+0x27c>)
 8005bc0:	e001      	b.n	8005bc6 <HAL_I2S_Init+0x1ee>
 8005bc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bc6:	69db      	ldr	r3, [r3, #28]
 8005bc8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bd2:	d003      	beq.n	8005bdc <HAL_I2S_Init+0x204>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d103      	bne.n	8005be4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005be0:	613b      	str	r3, [r7, #16]
 8005be2:	e001      	b.n	8005be8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005be4:	2300      	movs	r3, #0
 8005be6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005c06:	4313      	orrs	r3, r2
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	897b      	ldrh	r3, [r7, #10]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005c14:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a0d      	ldr	r2, [pc, #52]	; (8005c50 <HAL_I2S_Init+0x278>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d101      	bne.n	8005c24 <HAL_I2S_Init+0x24c>
 8005c20:	4b0c      	ldr	r3, [pc, #48]	; (8005c54 <HAL_I2S_Init+0x27c>)
 8005c22:	e001      	b.n	8005c28 <HAL_I2S_Init+0x250>
 8005c24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c28:	897a      	ldrh	r2, [r7, #10]
 8005c2a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3720      	adds	r7, #32
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	080060ff 	.word	0x080060ff
 8005c48:	cccccccd 	.word	0xcccccccd
 8005c4c:	08006215 	.word	0x08006215
 8005c50:	40003800 	.word	0x40003800
 8005c54:	40003400 	.word	0x40003400

08005c58 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	4613      	mov	r3, r2
 8005c64:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d002      	beq.n	8005c72 <HAL_I2S_Transmit_DMA+0x1a>
 8005c6c:	88fb      	ldrh	r3, [r7, #6]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e08e      	b.n	8005d94 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d101      	bne.n	8005c86 <HAL_I2S_Transmit_DMA+0x2e>
 8005c82:	2302      	movs	r3, #2
 8005c84:	e086      	b.n	8005d94 <HAL_I2S_Transmit_DMA+0x13c>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d005      	beq.n	8005ca6 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	e076      	b.n	8005d94 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2203      	movs	r2, #3
 8005caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	69db      	ldr	r3, [r3, #28]
 8005cc0:	f003 0307 	and.w	r3, r3, #7
 8005cc4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2b03      	cmp	r3, #3
 8005cca:	d002      	beq.n	8005cd2 <HAL_I2S_Transmit_DMA+0x7a>
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	2b05      	cmp	r3, #5
 8005cd0:	d10a      	bne.n	8005ce8 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005cd2:	88fb      	ldrh	r3, [r7, #6]
 8005cd4:	005b      	lsls	r3, r3, #1
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005cdc:	88fb      	ldrh	r3, [r7, #6]
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ce6:	e005      	b.n	8005cf4 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	88fa      	ldrh	r2, [r7, #6]
 8005cec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	88fa      	ldrh	r2, [r7, #6]
 8005cf2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf8:	4a28      	ldr	r2, [pc, #160]	; (8005d9c <HAL_I2S_Transmit_DMA+0x144>)
 8005cfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d00:	4a27      	ldr	r2, [pc, #156]	; (8005da0 <HAL_I2S_Transmit_DMA+0x148>)
 8005d02:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d08:	4a26      	ldr	r2, [pc, #152]	; (8005da4 <HAL_I2S_Transmit_DMA+0x14c>)
 8005d0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005d14:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005d1c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d22:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005d24:	f7fc fcf8 	bl	8002718 <HAL_DMA_Start_IT>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00f      	beq.n	8005d4e <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d32:	f043 0208 	orr.w	r2, r3, #8
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e022      	b.n	8005d94 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	69db      	ldr	r3, [r3, #28]
 8005d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d107      	bne.n	8005d6c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	69da      	ldr	r2, [r3, #28]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d6a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d107      	bne.n	8005d8a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f042 0202 	orr.w	r2, r2, #2
 8005d88:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3718      	adds	r7, #24
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	08005f7f 	.word	0x08005f7f
 8005da0:	08005f3d 	.word	0x08005f3d
 8005da4:	08005ff9 	.word	0x08005ff9

08005da8 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	4613      	mov	r3, r2
 8005db4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d002      	beq.n	8005dc2 <HAL_I2S_Receive_DMA+0x1a>
 8005dbc:	88fb      	ldrh	r3, [r7, #6]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e0a1      	b.n	8005f0a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d101      	bne.n	8005dd6 <HAL_I2S_Receive_DMA+0x2e>
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	e099      	b.n	8005f0a <HAL_I2S_Receive_DMA+0x162>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d005      	beq.n	8005df6 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8005df2:	2302      	movs	r3, #2
 8005df4:	e089      	b.n	8005f0a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2204      	movs	r2, #4
 8005dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	69db      	ldr	r3, [r3, #28]
 8005e10:	f003 0307 	and.w	r3, r3, #7
 8005e14:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	2b03      	cmp	r3, #3
 8005e1a:	d002      	beq.n	8005e22 <HAL_I2S_Receive_DMA+0x7a>
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	2b05      	cmp	r3, #5
 8005e20:	d10a      	bne.n	8005e38 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8005e22:	88fb      	ldrh	r3, [r7, #6]
 8005e24:	005b      	lsls	r3, r3, #1
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8005e2c:	88fb      	ldrh	r3, [r7, #6]
 8005e2e:	005b      	lsls	r3, r3, #1
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	865a      	strh	r2, [r3, #50]	; 0x32
 8005e36:	e005      	b.n	8005e44 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	88fa      	ldrh	r2, [r7, #6]
 8005e3c:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	88fa      	ldrh	r2, [r7, #6]
 8005e42:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e48:	4a32      	ldr	r2, [pc, #200]	; (8005f14 <HAL_I2S_Receive_DMA+0x16c>)
 8005e4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e50:	4a31      	ldr	r2, [pc, #196]	; (8005f18 <HAL_I2S_Receive_DMA+0x170>)
 8005e52:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e58:	4a30      	ldr	r2, [pc, #192]	; (8005f1c <HAL_I2S_Receive_DMA+0x174>)
 8005e5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e6a:	d10a      	bne.n	8005e82 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	613b      	str	r3, [r7, #16]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	613b      	str	r3, [r7, #16]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	613b      	str	r3, [r7, #16]
 8005e80:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	330c      	adds	r3, #12
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e92:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8005e98:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8005e9a:	f7fc fc3d 	bl	8002718 <HAL_DMA_Start_IT>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00f      	beq.n	8005ec4 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea8:	f043 0208 	orr.w	r2, r3, #8
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e022      	b.n	8005f0a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d107      	bne.n	8005ee2 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	69da      	ldr	r2, [r3, #28]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ee0:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f003 0301 	and.w	r3, r3, #1
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d107      	bne.n	8005f00 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f042 0201 	orr.w	r2, r2, #1
 8005efe:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3718      	adds	r7, #24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	08005fdd 	.word	0x08005fdd
 8005f18:	08005f9b 	.word	0x08005f9b
 8005f1c:	08005ff9 	.word	0x08005ff9

08005f20 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f2e:	b2db      	uxtb	r3, r3
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f48:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	69db      	ldr	r3, [r3, #28]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10e      	bne.n	8005f70 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	685a      	ldr	r2, [r3, #4]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 0202 	bic.w	r2, r2, #2
 8005f60:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f7fa faf9 	bl	8000568 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005f76:	bf00      	nop
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b084      	sub	sp, #16
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f7fa fafd 	bl	800058c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005f92:	bf00      	nop
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b084      	sub	sp, #16
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	69db      	ldr	r3, [r3, #28]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d10e      	bne.n	8005fce <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f022 0201 	bic.w	r2, r2, #1
 8005fbe:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f7fb fa32 	bl	8001438 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005fd4:	bf00      	nop
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f7fb f9f2 	bl	80013d4 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005ff0:	bf00      	nop
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006004:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 0203 	bic.w	r2, r2, #3
 8006014:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800602e:	f043 0208 	orr.w	r2, r3, #8
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f7fa fc16 	bl	8000868 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800603c:	bf00      	nop
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	881a      	ldrh	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605c:	1c9a      	adds	r2, r3, #2
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006066:	b29b      	uxth	r3, r3
 8006068:	3b01      	subs	r3, #1
 800606a:	b29a      	uxth	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006074:	b29b      	uxth	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10e      	bne.n	8006098 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006088:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7fa fa68 	bl	8000568 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006098:	bf00      	nop
 800609a:	3708      	adds	r7, #8
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68da      	ldr	r2, [r3, #12]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b2:	b292      	uxth	r2, r2
 80060b4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ba:	1c9a      	adds	r2, r3, #2
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	3b01      	subs	r3, #1
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10e      	bne.n	80060f6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80060e6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f7fb f9a1 	bl	8001438 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80060f6:	bf00      	nop
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b086      	sub	sp, #24
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b04      	cmp	r3, #4
 8006118:	d13a      	bne.n	8006190 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f003 0301 	and.w	r3, r3, #1
 8006120:	2b01      	cmp	r3, #1
 8006122:	d109      	bne.n	8006138 <I2S_IRQHandler+0x3a>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612e:	2b40      	cmp	r3, #64	; 0x40
 8006130:	d102      	bne.n	8006138 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7ff ffb4 	bl	80060a0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613e:	2b40      	cmp	r3, #64	; 0x40
 8006140:	d126      	bne.n	8006190 <I2S_IRQHandler+0x92>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	f003 0320 	and.w	r3, r3, #32
 800614c:	2b20      	cmp	r3, #32
 800614e:	d11f      	bne.n	8006190 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800615e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006160:	2300      	movs	r3, #0
 8006162:	613b      	str	r3, [r7, #16]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	613b      	str	r3, [r7, #16]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	613b      	str	r3, [r7, #16]
 8006174:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006182:	f043 0202 	orr.w	r2, r3, #2
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f7fa fb6c 	bl	8000868 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2b03      	cmp	r3, #3
 800619a:	d136      	bne.n	800620a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d109      	bne.n	80061ba <I2S_IRQHandler+0xbc>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b0:	2b80      	cmp	r3, #128	; 0x80
 80061b2:	d102      	bne.n	80061ba <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f7ff ff45 	bl	8006044 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f003 0308 	and.w	r3, r3, #8
 80061c0:	2b08      	cmp	r3, #8
 80061c2:	d122      	bne.n	800620a <I2S_IRQHandler+0x10c>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	f003 0320 	and.w	r3, r3, #32
 80061ce:	2b20      	cmp	r3, #32
 80061d0:	d11b      	bne.n	800620a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061e0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80061e2:	2300      	movs	r3, #0
 80061e4:	60fb      	str	r3, [r7, #12]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	60fb      	str	r3, [r7, #12]
 80061ee:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061fc:	f043 0204 	orr.w	r2, r3, #4
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7fa fb2f 	bl	8000868 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800620a:	bf00      	nop
 800620c:	3718      	adds	r7, #24
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
	...

08006214 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b088      	sub	sp, #32
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a92      	ldr	r2, [pc, #584]	; (8006474 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d101      	bne.n	8006232 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800622e:	4b92      	ldr	r3, [pc, #584]	; (8006478 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006230:	e001      	b.n	8006236 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006232:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a8b      	ldr	r2, [pc, #556]	; (8006474 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d101      	bne.n	8006250 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800624c:	4b8a      	ldr	r3, [pc, #552]	; (8006478 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800624e:	e001      	b.n	8006254 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006250:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006260:	d004      	beq.n	800626c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	f040 8099 	bne.w	800639e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	f003 0302 	and.w	r3, r3, #2
 8006272:	2b02      	cmp	r3, #2
 8006274:	d107      	bne.n	8006286 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800627c:	2b00      	cmp	r3, #0
 800627e:	d002      	beq.n	8006286 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f925 	bl	80064d0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	2b01      	cmp	r3, #1
 800628e:	d107      	bne.n	80062a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006296:	2b00      	cmp	r3, #0
 8006298:	d002      	beq.n	80062a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 f9c8 	bl	8006630 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a6:	2b40      	cmp	r3, #64	; 0x40
 80062a8:	d13a      	bne.n	8006320 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	f003 0320 	and.w	r3, r3, #32
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d035      	beq.n	8006320 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a6e      	ldr	r2, [pc, #440]	; (8006474 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d101      	bne.n	80062c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80062be:	4b6e      	ldr	r3, [pc, #440]	; (8006478 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80062c0:	e001      	b.n	80062c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80062c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4969      	ldr	r1, [pc, #420]	; (8006474 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80062ce:	428b      	cmp	r3, r1
 80062d0:	d101      	bne.n	80062d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80062d2:	4b69      	ldr	r3, [pc, #420]	; (8006478 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80062d4:	e001      	b.n	80062da <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80062d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80062de:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80062ee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80062f0:	2300      	movs	r3, #0
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	60fb      	str	r3, [r7, #12]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	60fb      	str	r3, [r7, #12]
 8006304:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006312:	f043 0202 	orr.w	r2, r3, #2
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7fa faa4 	bl	8000868 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	f003 0308 	and.w	r3, r3, #8
 8006326:	2b08      	cmp	r3, #8
 8006328:	f040 80c3 	bne.w	80064b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	f003 0320 	and.w	r3, r3, #32
 8006332:	2b00      	cmp	r3, #0
 8006334:	f000 80bd 	beq.w	80064b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006346:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a49      	ldr	r2, [pc, #292]	; (8006474 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d101      	bne.n	8006356 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006352:	4b49      	ldr	r3, [pc, #292]	; (8006478 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006354:	e001      	b.n	800635a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006356:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4944      	ldr	r1, [pc, #272]	; (8006474 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006362:	428b      	cmp	r3, r1
 8006364:	d101      	bne.n	800636a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006366:	4b44      	ldr	r3, [pc, #272]	; (8006478 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006368:	e001      	b.n	800636e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800636a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800636e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006372:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006374:	2300      	movs	r3, #0
 8006376:	60bb      	str	r3, [r7, #8]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	60bb      	str	r3, [r7, #8]
 8006380:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800638e:	f043 0204 	orr.w	r2, r3, #4
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f7fa fa66 	bl	8000868 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800639c:	e089      	b.n	80064b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	f003 0302 	and.w	r3, r3, #2
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d107      	bne.n	80063b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d002      	beq.n	80063b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f8be 	bl	8006534 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d107      	bne.n	80063d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d002      	beq.n	80063d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f8fd 	bl	80065cc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d8:	2b40      	cmp	r3, #64	; 0x40
 80063da:	d12f      	bne.n	800643c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f003 0320 	and.w	r3, r3, #32
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d02a      	beq.n	800643c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80063f4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a1e      	ldr	r2, [pc, #120]	; (8006474 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d101      	bne.n	8006404 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006400:	4b1d      	ldr	r3, [pc, #116]	; (8006478 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006402:	e001      	b.n	8006408 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006404:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4919      	ldr	r1, [pc, #100]	; (8006474 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006410:	428b      	cmp	r3, r1
 8006412:	d101      	bne.n	8006418 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006414:	4b18      	ldr	r3, [pc, #96]	; (8006478 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006416:	e001      	b.n	800641c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006418:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800641c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006420:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800642e:	f043 0202 	orr.w	r2, r3, #2
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f7fa fa16 	bl	8000868 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	f003 0308 	and.w	r3, r3, #8
 8006442:	2b08      	cmp	r3, #8
 8006444:	d136      	bne.n	80064b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	f003 0320 	and.w	r3, r3, #32
 800644c:	2b00      	cmp	r3, #0
 800644e:	d031      	beq.n	80064b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a07      	ldr	r2, [pc, #28]	; (8006474 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d101      	bne.n	800645e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800645a:	4b07      	ldr	r3, [pc, #28]	; (8006478 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800645c:	e001      	b.n	8006462 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800645e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006462:	685a      	ldr	r2, [r3, #4]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4902      	ldr	r1, [pc, #8]	; (8006474 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800646a:	428b      	cmp	r3, r1
 800646c:	d106      	bne.n	800647c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800646e:	4b02      	ldr	r3, [pc, #8]	; (8006478 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006470:	e006      	b.n	8006480 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006472:	bf00      	nop
 8006474:	40003800 	.word	0x40003800
 8006478:	40003400 	.word	0x40003400
 800647c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006480:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006484:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006494:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a2:	f043 0204 	orr.w	r2, r3, #4
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7fa f9dc 	bl	8000868 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80064b0:	e000      	b.n	80064b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80064b2:	bf00      	nop
}
 80064b4:	bf00      	nop
 80064b6:	3720      	adds	r7, #32
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80064c4:	bf00      	nop
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064dc:	1c99      	adds	r1, r3, #2
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	6251      	str	r1, [r2, #36]	; 0x24
 80064e2:	881a      	ldrh	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	3b01      	subs	r3, #1
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d113      	bne.n	800652a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006510:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006516:	b29b      	uxth	r3, r3
 8006518:	2b00      	cmp	r3, #0
 800651a:	d106      	bne.n	800652a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7ff ffc9 	bl	80064bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800652a:	bf00      	nop
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
	...

08006534 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006540:	1c99      	adds	r1, r3, #2
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	6251      	str	r1, [r2, #36]	; 0x24
 8006546:	8819      	ldrh	r1, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a1d      	ldr	r2, [pc, #116]	; (80065c4 <I2SEx_TxISR_I2SExt+0x90>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d101      	bne.n	8006556 <I2SEx_TxISR_I2SExt+0x22>
 8006552:	4b1d      	ldr	r3, [pc, #116]	; (80065c8 <I2SEx_TxISR_I2SExt+0x94>)
 8006554:	e001      	b.n	800655a <I2SEx_TxISR_I2SExt+0x26>
 8006556:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800655a:	460a      	mov	r2, r1
 800655c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006562:	b29b      	uxth	r3, r3
 8006564:	3b01      	subs	r3, #1
 8006566:	b29a      	uxth	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006570:	b29b      	uxth	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d121      	bne.n	80065ba <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a12      	ldr	r2, [pc, #72]	; (80065c4 <I2SEx_TxISR_I2SExt+0x90>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d101      	bne.n	8006584 <I2SEx_TxISR_I2SExt+0x50>
 8006580:	4b11      	ldr	r3, [pc, #68]	; (80065c8 <I2SEx_TxISR_I2SExt+0x94>)
 8006582:	e001      	b.n	8006588 <I2SEx_TxISR_I2SExt+0x54>
 8006584:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	490d      	ldr	r1, [pc, #52]	; (80065c4 <I2SEx_TxISR_I2SExt+0x90>)
 8006590:	428b      	cmp	r3, r1
 8006592:	d101      	bne.n	8006598 <I2SEx_TxISR_I2SExt+0x64>
 8006594:	4b0c      	ldr	r3, [pc, #48]	; (80065c8 <I2SEx_TxISR_I2SExt+0x94>)
 8006596:	e001      	b.n	800659c <I2SEx_TxISR_I2SExt+0x68>
 8006598:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800659c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065a0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d106      	bne.n	80065ba <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f7ff ff81 	bl	80064bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80065ba:	bf00      	nop
 80065bc:	3708      	adds	r7, #8
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	40003800 	.word	0x40003800
 80065c8:	40003400 	.word	0x40003400

080065cc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68d8      	ldr	r0, [r3, #12]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065de:	1c99      	adds	r1, r3, #2
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80065e4:	b282      	uxth	r2, r0
 80065e6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	3b01      	subs	r3, #1
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d113      	bne.n	8006628 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800660e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006614:	b29b      	uxth	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d106      	bne.n	8006628 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f7ff ff4a 	bl	80064bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006628:	bf00      	nop
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a20      	ldr	r2, [pc, #128]	; (80066c0 <I2SEx_RxISR_I2SExt+0x90>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d101      	bne.n	8006646 <I2SEx_RxISR_I2SExt+0x16>
 8006642:	4b20      	ldr	r3, [pc, #128]	; (80066c4 <I2SEx_RxISR_I2SExt+0x94>)
 8006644:	e001      	b.n	800664a <I2SEx_RxISR_I2SExt+0x1a>
 8006646:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800664a:	68d8      	ldr	r0, [r3, #12]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006650:	1c99      	adds	r1, r3, #2
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006656:	b282      	uxth	r2, r0
 8006658:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800665e:	b29b      	uxth	r3, r3
 8006660:	3b01      	subs	r3, #1
 8006662:	b29a      	uxth	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800666c:	b29b      	uxth	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d121      	bne.n	80066b6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a12      	ldr	r2, [pc, #72]	; (80066c0 <I2SEx_RxISR_I2SExt+0x90>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d101      	bne.n	8006680 <I2SEx_RxISR_I2SExt+0x50>
 800667c:	4b11      	ldr	r3, [pc, #68]	; (80066c4 <I2SEx_RxISR_I2SExt+0x94>)
 800667e:	e001      	b.n	8006684 <I2SEx_RxISR_I2SExt+0x54>
 8006680:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	490d      	ldr	r1, [pc, #52]	; (80066c0 <I2SEx_RxISR_I2SExt+0x90>)
 800668c:	428b      	cmp	r3, r1
 800668e:	d101      	bne.n	8006694 <I2SEx_RxISR_I2SExt+0x64>
 8006690:	4b0c      	ldr	r3, [pc, #48]	; (80066c4 <I2SEx_RxISR_I2SExt+0x94>)
 8006692:	e001      	b.n	8006698 <I2SEx_RxISR_I2SExt+0x68>
 8006694:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006698:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800669c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d106      	bne.n	80066b6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f7ff ff03 	bl	80064bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80066b6:	bf00      	nop
 80066b8:	3708      	adds	r7, #8
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	40003800 	.word	0x40003800
 80066c4:	40003400 	.word	0x40003400

080066c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e267      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d075      	beq.n	80067d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80066e6:	4b88      	ldr	r3, [pc, #544]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f003 030c 	and.w	r3, r3, #12
 80066ee:	2b04      	cmp	r3, #4
 80066f0:	d00c      	beq.n	800670c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066f2:	4b85      	ldr	r3, [pc, #532]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80066fa:	2b08      	cmp	r3, #8
 80066fc:	d112      	bne.n	8006724 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066fe:	4b82      	ldr	r3, [pc, #520]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006706:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800670a:	d10b      	bne.n	8006724 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800670c:	4b7e      	ldr	r3, [pc, #504]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d05b      	beq.n	80067d0 <HAL_RCC_OscConfig+0x108>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d157      	bne.n	80067d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e242      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800672c:	d106      	bne.n	800673c <HAL_RCC_OscConfig+0x74>
 800672e:	4b76      	ldr	r3, [pc, #472]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a75      	ldr	r2, [pc, #468]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 8006734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006738:	6013      	str	r3, [r2, #0]
 800673a:	e01d      	b.n	8006778 <HAL_RCC_OscConfig+0xb0>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006744:	d10c      	bne.n	8006760 <HAL_RCC_OscConfig+0x98>
 8006746:	4b70      	ldr	r3, [pc, #448]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a6f      	ldr	r2, [pc, #444]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 800674c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006750:	6013      	str	r3, [r2, #0]
 8006752:	4b6d      	ldr	r3, [pc, #436]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a6c      	ldr	r2, [pc, #432]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 8006758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800675c:	6013      	str	r3, [r2, #0]
 800675e:	e00b      	b.n	8006778 <HAL_RCC_OscConfig+0xb0>
 8006760:	4b69      	ldr	r3, [pc, #420]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a68      	ldr	r2, [pc, #416]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 8006766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800676a:	6013      	str	r3, [r2, #0]
 800676c:	4b66      	ldr	r3, [pc, #408]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a65      	ldr	r2, [pc, #404]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 8006772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d013      	beq.n	80067a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006780:	f7fb fd7c 	bl	800227c <HAL_GetTick>
 8006784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006786:	e008      	b.n	800679a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006788:	f7fb fd78 	bl	800227c <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	2b64      	cmp	r3, #100	; 0x64
 8006794:	d901      	bls.n	800679a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e207      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800679a:	4b5b      	ldr	r3, [pc, #364]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d0f0      	beq.n	8006788 <HAL_RCC_OscConfig+0xc0>
 80067a6:	e014      	b.n	80067d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067a8:	f7fb fd68 	bl	800227c <HAL_GetTick>
 80067ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067ae:	e008      	b.n	80067c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067b0:	f7fb fd64 	bl	800227c <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	2b64      	cmp	r3, #100	; 0x64
 80067bc:	d901      	bls.n	80067c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e1f3      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067c2:	4b51      	ldr	r3, [pc, #324]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1f0      	bne.n	80067b0 <HAL_RCC_OscConfig+0xe8>
 80067ce:	e000      	b.n	80067d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0302 	and.w	r3, r3, #2
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d063      	beq.n	80068a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067de:	4b4a      	ldr	r3, [pc, #296]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f003 030c 	and.w	r3, r3, #12
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00b      	beq.n	8006802 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067ea:	4b47      	ldr	r3, [pc, #284]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067f2:	2b08      	cmp	r3, #8
 80067f4:	d11c      	bne.n	8006830 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067f6:	4b44      	ldr	r3, [pc, #272]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d116      	bne.n	8006830 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006802:	4b41      	ldr	r3, [pc, #260]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d005      	beq.n	800681a <HAL_RCC_OscConfig+0x152>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d001      	beq.n	800681a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e1c7      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800681a:	4b3b      	ldr	r3, [pc, #236]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	00db      	lsls	r3, r3, #3
 8006828:	4937      	ldr	r1, [pc, #220]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 800682a:	4313      	orrs	r3, r2
 800682c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800682e:	e03a      	b.n	80068a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d020      	beq.n	800687a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006838:	4b34      	ldr	r3, [pc, #208]	; (800690c <HAL_RCC_OscConfig+0x244>)
 800683a:	2201      	movs	r2, #1
 800683c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800683e:	f7fb fd1d 	bl	800227c <HAL_GetTick>
 8006842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006844:	e008      	b.n	8006858 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006846:	f7fb fd19 	bl	800227c <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	2b02      	cmp	r3, #2
 8006852:	d901      	bls.n	8006858 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006854:	2303      	movs	r3, #3
 8006856:	e1a8      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006858:	4b2b      	ldr	r3, [pc, #172]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0302 	and.w	r3, r3, #2
 8006860:	2b00      	cmp	r3, #0
 8006862:	d0f0      	beq.n	8006846 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006864:	4b28      	ldr	r3, [pc, #160]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	00db      	lsls	r3, r3, #3
 8006872:	4925      	ldr	r1, [pc, #148]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 8006874:	4313      	orrs	r3, r2
 8006876:	600b      	str	r3, [r1, #0]
 8006878:	e015      	b.n	80068a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800687a:	4b24      	ldr	r3, [pc, #144]	; (800690c <HAL_RCC_OscConfig+0x244>)
 800687c:	2200      	movs	r2, #0
 800687e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006880:	f7fb fcfc 	bl	800227c <HAL_GetTick>
 8006884:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006886:	e008      	b.n	800689a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006888:	f7fb fcf8 	bl	800227c <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b02      	cmp	r3, #2
 8006894:	d901      	bls.n	800689a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e187      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800689a:	4b1b      	ldr	r3, [pc, #108]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0302 	and.w	r3, r3, #2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1f0      	bne.n	8006888 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0308 	and.w	r3, r3, #8
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d036      	beq.n	8006920 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d016      	beq.n	80068e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068ba:	4b15      	ldr	r3, [pc, #84]	; (8006910 <HAL_RCC_OscConfig+0x248>)
 80068bc:	2201      	movs	r2, #1
 80068be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068c0:	f7fb fcdc 	bl	800227c <HAL_GetTick>
 80068c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068c6:	e008      	b.n	80068da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068c8:	f7fb fcd8 	bl	800227c <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d901      	bls.n	80068da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e167      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068da:	4b0b      	ldr	r3, [pc, #44]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 80068dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d0f0      	beq.n	80068c8 <HAL_RCC_OscConfig+0x200>
 80068e6:	e01b      	b.n	8006920 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068e8:	4b09      	ldr	r3, [pc, #36]	; (8006910 <HAL_RCC_OscConfig+0x248>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068ee:	f7fb fcc5 	bl	800227c <HAL_GetTick>
 80068f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068f4:	e00e      	b.n	8006914 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068f6:	f7fb fcc1 	bl	800227c <HAL_GetTick>
 80068fa:	4602      	mov	r2, r0
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	2b02      	cmp	r3, #2
 8006902:	d907      	bls.n	8006914 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e150      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
 8006908:	40023800 	.word	0x40023800
 800690c:	42470000 	.word	0x42470000
 8006910:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006914:	4b88      	ldr	r3, [pc, #544]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006918:	f003 0302 	and.w	r3, r3, #2
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1ea      	bne.n	80068f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0304 	and.w	r3, r3, #4
 8006928:	2b00      	cmp	r3, #0
 800692a:	f000 8097 	beq.w	8006a5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800692e:	2300      	movs	r3, #0
 8006930:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006932:	4b81      	ldr	r3, [pc, #516]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10f      	bne.n	800695e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800693e:	2300      	movs	r3, #0
 8006940:	60bb      	str	r3, [r7, #8]
 8006942:	4b7d      	ldr	r3, [pc, #500]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006946:	4a7c      	ldr	r2, [pc, #496]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800694c:	6413      	str	r3, [r2, #64]	; 0x40
 800694e:	4b7a      	ldr	r3, [pc, #488]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006956:	60bb      	str	r3, [r7, #8]
 8006958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800695a:	2301      	movs	r3, #1
 800695c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800695e:	4b77      	ldr	r3, [pc, #476]	; (8006b3c <HAL_RCC_OscConfig+0x474>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006966:	2b00      	cmp	r3, #0
 8006968:	d118      	bne.n	800699c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800696a:	4b74      	ldr	r3, [pc, #464]	; (8006b3c <HAL_RCC_OscConfig+0x474>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a73      	ldr	r2, [pc, #460]	; (8006b3c <HAL_RCC_OscConfig+0x474>)
 8006970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006976:	f7fb fc81 	bl	800227c <HAL_GetTick>
 800697a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800697c:	e008      	b.n	8006990 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800697e:	f7fb fc7d 	bl	800227c <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	2b02      	cmp	r3, #2
 800698a:	d901      	bls.n	8006990 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	e10c      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006990:	4b6a      	ldr	r3, [pc, #424]	; (8006b3c <HAL_RCC_OscConfig+0x474>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006998:	2b00      	cmp	r3, #0
 800699a:	d0f0      	beq.n	800697e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d106      	bne.n	80069b2 <HAL_RCC_OscConfig+0x2ea>
 80069a4:	4b64      	ldr	r3, [pc, #400]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a8:	4a63      	ldr	r2, [pc, #396]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069aa:	f043 0301 	orr.w	r3, r3, #1
 80069ae:	6713      	str	r3, [r2, #112]	; 0x70
 80069b0:	e01c      	b.n	80069ec <HAL_RCC_OscConfig+0x324>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	2b05      	cmp	r3, #5
 80069b8:	d10c      	bne.n	80069d4 <HAL_RCC_OscConfig+0x30c>
 80069ba:	4b5f      	ldr	r3, [pc, #380]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069be:	4a5e      	ldr	r2, [pc, #376]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069c0:	f043 0304 	orr.w	r3, r3, #4
 80069c4:	6713      	str	r3, [r2, #112]	; 0x70
 80069c6:	4b5c      	ldr	r3, [pc, #368]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ca:	4a5b      	ldr	r2, [pc, #364]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069cc:	f043 0301 	orr.w	r3, r3, #1
 80069d0:	6713      	str	r3, [r2, #112]	; 0x70
 80069d2:	e00b      	b.n	80069ec <HAL_RCC_OscConfig+0x324>
 80069d4:	4b58      	ldr	r3, [pc, #352]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d8:	4a57      	ldr	r2, [pc, #348]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069da:	f023 0301 	bic.w	r3, r3, #1
 80069de:	6713      	str	r3, [r2, #112]	; 0x70
 80069e0:	4b55      	ldr	r3, [pc, #340]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e4:	4a54      	ldr	r2, [pc, #336]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069e6:	f023 0304 	bic.w	r3, r3, #4
 80069ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d015      	beq.n	8006a20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069f4:	f7fb fc42 	bl	800227c <HAL_GetTick>
 80069f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069fa:	e00a      	b.n	8006a12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069fc:	f7fb fc3e 	bl	800227c <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d901      	bls.n	8006a12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e0cb      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a12:	4b49      	ldr	r3, [pc, #292]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d0ee      	beq.n	80069fc <HAL_RCC_OscConfig+0x334>
 8006a1e:	e014      	b.n	8006a4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a20:	f7fb fc2c 	bl	800227c <HAL_GetTick>
 8006a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a26:	e00a      	b.n	8006a3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a28:	f7fb fc28 	bl	800227c <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d901      	bls.n	8006a3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e0b5      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a3e:	4b3e      	ldr	r3, [pc, #248]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a42:	f003 0302 	and.w	r3, r3, #2
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1ee      	bne.n	8006a28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a4a:	7dfb      	ldrb	r3, [r7, #23]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d105      	bne.n	8006a5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a50:	4b39      	ldr	r3, [pc, #228]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a54:	4a38      	ldr	r2, [pc, #224]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006a56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 80a1 	beq.w	8006ba8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a66:	4b34      	ldr	r3, [pc, #208]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f003 030c 	and.w	r3, r3, #12
 8006a6e:	2b08      	cmp	r3, #8
 8006a70:	d05c      	beq.n	8006b2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d141      	bne.n	8006afe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a7a:	4b31      	ldr	r3, [pc, #196]	; (8006b40 <HAL_RCC_OscConfig+0x478>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a80:	f7fb fbfc 	bl	800227c <HAL_GetTick>
 8006a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a86:	e008      	b.n	8006a9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a88:	f7fb fbf8 	bl	800227c <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d901      	bls.n	8006a9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e087      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a9a:	4b27      	ldr	r3, [pc, #156]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1f0      	bne.n	8006a88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	69da      	ldr	r2, [r3, #28]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a1b      	ldr	r3, [r3, #32]
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab4:	019b      	lsls	r3, r3, #6
 8006ab6:	431a      	orrs	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006abc:	085b      	lsrs	r3, r3, #1
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	041b      	lsls	r3, r3, #16
 8006ac2:	431a      	orrs	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac8:	061b      	lsls	r3, r3, #24
 8006aca:	491b      	ldr	r1, [pc, #108]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006acc:	4313      	orrs	r3, r2
 8006ace:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ad0:	4b1b      	ldr	r3, [pc, #108]	; (8006b40 <HAL_RCC_OscConfig+0x478>)
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ad6:	f7fb fbd1 	bl	800227c <HAL_GetTick>
 8006ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006adc:	e008      	b.n	8006af0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ade:	f7fb fbcd 	bl	800227c <HAL_GetTick>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d901      	bls.n	8006af0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e05c      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006af0:	4b11      	ldr	r3, [pc, #68]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d0f0      	beq.n	8006ade <HAL_RCC_OscConfig+0x416>
 8006afc:	e054      	b.n	8006ba8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006afe:	4b10      	ldr	r3, [pc, #64]	; (8006b40 <HAL_RCC_OscConfig+0x478>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b04:	f7fb fbba 	bl	800227c <HAL_GetTick>
 8006b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b0a:	e008      	b.n	8006b1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b0c:	f7fb fbb6 	bl	800227c <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d901      	bls.n	8006b1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e045      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b1e:	4b06      	ldr	r3, [pc, #24]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1f0      	bne.n	8006b0c <HAL_RCC_OscConfig+0x444>
 8006b2a:	e03d      	b.n	8006ba8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d107      	bne.n	8006b44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e038      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
 8006b38:	40023800 	.word	0x40023800
 8006b3c:	40007000 	.word	0x40007000
 8006b40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b44:	4b1b      	ldr	r3, [pc, #108]	; (8006bb4 <HAL_RCC_OscConfig+0x4ec>)
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d028      	beq.n	8006ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d121      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d11a      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b74:	4013      	ands	r3, r2
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d111      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8a:	085b      	lsrs	r3, r3, #1
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d107      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d001      	beq.n	8006ba8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e000      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3718      	adds	r7, #24
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	40023800 	.word	0x40023800

08006bb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e0cc      	b.n	8006d66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006bcc:	4b68      	ldr	r3, [pc, #416]	; (8006d70 <HAL_RCC_ClockConfig+0x1b8>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0307 	and.w	r3, r3, #7
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d90c      	bls.n	8006bf4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bda:	4b65      	ldr	r3, [pc, #404]	; (8006d70 <HAL_RCC_ClockConfig+0x1b8>)
 8006bdc:	683a      	ldr	r2, [r7, #0]
 8006bde:	b2d2      	uxtb	r2, r2
 8006be0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006be2:	4b63      	ldr	r3, [pc, #396]	; (8006d70 <HAL_RCC_ClockConfig+0x1b8>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0307 	and.w	r3, r3, #7
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d001      	beq.n	8006bf4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e0b8      	b.n	8006d66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0302 	and.w	r3, r3, #2
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d020      	beq.n	8006c42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0304 	and.w	r3, r3, #4
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d005      	beq.n	8006c18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c0c:	4b59      	ldr	r3, [pc, #356]	; (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	4a58      	ldr	r2, [pc, #352]	; (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0308 	and.w	r3, r3, #8
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d005      	beq.n	8006c30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c24:	4b53      	ldr	r3, [pc, #332]	; (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	4a52      	ldr	r2, [pc, #328]	; (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c30:	4b50      	ldr	r3, [pc, #320]	; (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	494d      	ldr	r1, [pc, #308]	; (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0301 	and.w	r3, r3, #1
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d044      	beq.n	8006cd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d107      	bne.n	8006c66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c56:	4b47      	ldr	r3, [pc, #284]	; (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d119      	bne.n	8006c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e07f      	b.n	8006d66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d003      	beq.n	8006c76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	d107      	bne.n	8006c86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c76:	4b3f      	ldr	r3, [pc, #252]	; (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d109      	bne.n	8006c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e06f      	b.n	8006d66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c86:	4b3b      	ldr	r3, [pc, #236]	; (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0302 	and.w	r3, r3, #2
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d101      	bne.n	8006c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e067      	b.n	8006d66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c96:	4b37      	ldr	r3, [pc, #220]	; (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f023 0203 	bic.w	r2, r3, #3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	4934      	ldr	r1, [pc, #208]	; (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ca8:	f7fb fae8 	bl	800227c <HAL_GetTick>
 8006cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cae:	e00a      	b.n	8006cc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cb0:	f7fb fae4 	bl	800227c <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d901      	bls.n	8006cc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e04f      	b.n	8006d66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cc6:	4b2b      	ldr	r3, [pc, #172]	; (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f003 020c 	and.w	r2, r3, #12
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d1eb      	bne.n	8006cb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006cd8:	4b25      	ldr	r3, [pc, #148]	; (8006d70 <HAL_RCC_ClockConfig+0x1b8>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0307 	and.w	r3, r3, #7
 8006ce0:	683a      	ldr	r2, [r7, #0]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d20c      	bcs.n	8006d00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ce6:	4b22      	ldr	r3, [pc, #136]	; (8006d70 <HAL_RCC_ClockConfig+0x1b8>)
 8006ce8:	683a      	ldr	r2, [r7, #0]
 8006cea:	b2d2      	uxtb	r2, r2
 8006cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cee:	4b20      	ldr	r3, [pc, #128]	; (8006d70 <HAL_RCC_ClockConfig+0x1b8>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0307 	and.w	r3, r3, #7
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d001      	beq.n	8006d00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e032      	b.n	8006d66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0304 	and.w	r3, r3, #4
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d008      	beq.n	8006d1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d0c:	4b19      	ldr	r3, [pc, #100]	; (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	4916      	ldr	r1, [pc, #88]	; (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 0308 	and.w	r3, r3, #8
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d009      	beq.n	8006d3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d2a:	4b12      	ldr	r3, [pc, #72]	; (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	00db      	lsls	r3, r3, #3
 8006d38:	490e      	ldr	r1, [pc, #56]	; (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d3e:	f000 f821 	bl	8006d84 <HAL_RCC_GetSysClockFreq>
 8006d42:	4602      	mov	r2, r0
 8006d44:	4b0b      	ldr	r3, [pc, #44]	; (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	091b      	lsrs	r3, r3, #4
 8006d4a:	f003 030f 	and.w	r3, r3, #15
 8006d4e:	490a      	ldr	r1, [pc, #40]	; (8006d78 <HAL_RCC_ClockConfig+0x1c0>)
 8006d50:	5ccb      	ldrb	r3, [r1, r3]
 8006d52:	fa22 f303 	lsr.w	r3, r2, r3
 8006d56:	4a09      	ldr	r2, [pc, #36]	; (8006d7c <HAL_RCC_ClockConfig+0x1c4>)
 8006d58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d5a:	4b09      	ldr	r3, [pc, #36]	; (8006d80 <HAL_RCC_ClockConfig+0x1c8>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7fb fa48 	bl	80021f4 <HAL_InitTick>

  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	40023c00 	.word	0x40023c00
 8006d74:	40023800 	.word	0x40023800
 8006d78:	0800b93c 	.word	0x0800b93c
 8006d7c:	20000238 	.word	0x20000238
 8006d80:	2000023c 	.word	0x2000023c

08006d84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d88:	b094      	sub	sp, #80	; 0x50
 8006d8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	647b      	str	r3, [r7, #68]	; 0x44
 8006d90:	2300      	movs	r3, #0
 8006d92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d94:	2300      	movs	r3, #0
 8006d96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d9c:	4b79      	ldr	r3, [pc, #484]	; (8006f84 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f003 030c 	and.w	r3, r3, #12
 8006da4:	2b08      	cmp	r3, #8
 8006da6:	d00d      	beq.n	8006dc4 <HAL_RCC_GetSysClockFreq+0x40>
 8006da8:	2b08      	cmp	r3, #8
 8006daa:	f200 80e1 	bhi.w	8006f70 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d002      	beq.n	8006db8 <HAL_RCC_GetSysClockFreq+0x34>
 8006db2:	2b04      	cmp	r3, #4
 8006db4:	d003      	beq.n	8006dbe <HAL_RCC_GetSysClockFreq+0x3a>
 8006db6:	e0db      	b.n	8006f70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006db8:	4b73      	ldr	r3, [pc, #460]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x204>)
 8006dba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006dbc:	e0db      	b.n	8006f76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006dbe:	4b73      	ldr	r3, [pc, #460]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x208>)
 8006dc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006dc2:	e0d8      	b.n	8006f76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006dc4:	4b6f      	ldr	r3, [pc, #444]	; (8006f84 <HAL_RCC_GetSysClockFreq+0x200>)
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dcc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006dce:	4b6d      	ldr	r3, [pc, #436]	; (8006f84 <HAL_RCC_GetSysClockFreq+0x200>)
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d063      	beq.n	8006ea2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dda:	4b6a      	ldr	r3, [pc, #424]	; (8006f84 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	099b      	lsrs	r3, r3, #6
 8006de0:	2200      	movs	r2, #0
 8006de2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006de4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dec:	633b      	str	r3, [r7, #48]	; 0x30
 8006dee:	2300      	movs	r3, #0
 8006df0:	637b      	str	r3, [r7, #52]	; 0x34
 8006df2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006df6:	4622      	mov	r2, r4
 8006df8:	462b      	mov	r3, r5
 8006dfa:	f04f 0000 	mov.w	r0, #0
 8006dfe:	f04f 0100 	mov.w	r1, #0
 8006e02:	0159      	lsls	r1, r3, #5
 8006e04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e08:	0150      	lsls	r0, r2, #5
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	4621      	mov	r1, r4
 8006e10:	1a51      	subs	r1, r2, r1
 8006e12:	6139      	str	r1, [r7, #16]
 8006e14:	4629      	mov	r1, r5
 8006e16:	eb63 0301 	sbc.w	r3, r3, r1
 8006e1a:	617b      	str	r3, [r7, #20]
 8006e1c:	f04f 0200 	mov.w	r2, #0
 8006e20:	f04f 0300 	mov.w	r3, #0
 8006e24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e28:	4659      	mov	r1, fp
 8006e2a:	018b      	lsls	r3, r1, #6
 8006e2c:	4651      	mov	r1, sl
 8006e2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e32:	4651      	mov	r1, sl
 8006e34:	018a      	lsls	r2, r1, #6
 8006e36:	4651      	mov	r1, sl
 8006e38:	ebb2 0801 	subs.w	r8, r2, r1
 8006e3c:	4659      	mov	r1, fp
 8006e3e:	eb63 0901 	sbc.w	r9, r3, r1
 8006e42:	f04f 0200 	mov.w	r2, #0
 8006e46:	f04f 0300 	mov.w	r3, #0
 8006e4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e56:	4690      	mov	r8, r2
 8006e58:	4699      	mov	r9, r3
 8006e5a:	4623      	mov	r3, r4
 8006e5c:	eb18 0303 	adds.w	r3, r8, r3
 8006e60:	60bb      	str	r3, [r7, #8]
 8006e62:	462b      	mov	r3, r5
 8006e64:	eb49 0303 	adc.w	r3, r9, r3
 8006e68:	60fb      	str	r3, [r7, #12]
 8006e6a:	f04f 0200 	mov.w	r2, #0
 8006e6e:	f04f 0300 	mov.w	r3, #0
 8006e72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006e76:	4629      	mov	r1, r5
 8006e78:	024b      	lsls	r3, r1, #9
 8006e7a:	4621      	mov	r1, r4
 8006e7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006e80:	4621      	mov	r1, r4
 8006e82:	024a      	lsls	r2, r1, #9
 8006e84:	4610      	mov	r0, r2
 8006e86:	4619      	mov	r1, r3
 8006e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e94:	f7f9 f998 	bl	80001c8 <__aeabi_uldivmod>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ea0:	e058      	b.n	8006f54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ea2:	4b38      	ldr	r3, [pc, #224]	; (8006f84 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	099b      	lsrs	r3, r3, #6
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	4618      	mov	r0, r3
 8006eac:	4611      	mov	r1, r2
 8006eae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006eb2:	623b      	str	r3, [r7, #32]
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8006eb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006ebc:	4642      	mov	r2, r8
 8006ebe:	464b      	mov	r3, r9
 8006ec0:	f04f 0000 	mov.w	r0, #0
 8006ec4:	f04f 0100 	mov.w	r1, #0
 8006ec8:	0159      	lsls	r1, r3, #5
 8006eca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ece:	0150      	lsls	r0, r2, #5
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	4641      	mov	r1, r8
 8006ed6:	ebb2 0a01 	subs.w	sl, r2, r1
 8006eda:	4649      	mov	r1, r9
 8006edc:	eb63 0b01 	sbc.w	fp, r3, r1
 8006ee0:	f04f 0200 	mov.w	r2, #0
 8006ee4:	f04f 0300 	mov.w	r3, #0
 8006ee8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006eec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006ef0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006ef4:	ebb2 040a 	subs.w	r4, r2, sl
 8006ef8:	eb63 050b 	sbc.w	r5, r3, fp
 8006efc:	f04f 0200 	mov.w	r2, #0
 8006f00:	f04f 0300 	mov.w	r3, #0
 8006f04:	00eb      	lsls	r3, r5, #3
 8006f06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f0a:	00e2      	lsls	r2, r4, #3
 8006f0c:	4614      	mov	r4, r2
 8006f0e:	461d      	mov	r5, r3
 8006f10:	4643      	mov	r3, r8
 8006f12:	18e3      	adds	r3, r4, r3
 8006f14:	603b      	str	r3, [r7, #0]
 8006f16:	464b      	mov	r3, r9
 8006f18:	eb45 0303 	adc.w	r3, r5, r3
 8006f1c:	607b      	str	r3, [r7, #4]
 8006f1e:	f04f 0200 	mov.w	r2, #0
 8006f22:	f04f 0300 	mov.w	r3, #0
 8006f26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f2a:	4629      	mov	r1, r5
 8006f2c:	028b      	lsls	r3, r1, #10
 8006f2e:	4621      	mov	r1, r4
 8006f30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f34:	4621      	mov	r1, r4
 8006f36:	028a      	lsls	r2, r1, #10
 8006f38:	4610      	mov	r0, r2
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f3e:	2200      	movs	r2, #0
 8006f40:	61bb      	str	r3, [r7, #24]
 8006f42:	61fa      	str	r2, [r7, #28]
 8006f44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f48:	f7f9 f93e 	bl	80001c8 <__aeabi_uldivmod>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	460b      	mov	r3, r1
 8006f50:	4613      	mov	r3, r2
 8006f52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f54:	4b0b      	ldr	r3, [pc, #44]	; (8006f84 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	0c1b      	lsrs	r3, r3, #16
 8006f5a:	f003 0303 	and.w	r3, r3, #3
 8006f5e:	3301      	adds	r3, #1
 8006f60:	005b      	lsls	r3, r3, #1
 8006f62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006f64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f6e:	e002      	b.n	8006f76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f70:	4b05      	ldr	r3, [pc, #20]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x204>)
 8006f72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3750      	adds	r7, #80	; 0x50
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f82:	bf00      	nop
 8006f84:	40023800 	.word	0x40023800
 8006f88:	00f42400 	.word	0x00f42400
 8006f8c:	007a1200 	.word	0x007a1200

08006f90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f90:	b480      	push	{r7}
 8006f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f94:	4b03      	ldr	r3, [pc, #12]	; (8006fa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f96:	681b      	ldr	r3, [r3, #0]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	20000238 	.word	0x20000238

08006fa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006fac:	f7ff fff0 	bl	8006f90 <HAL_RCC_GetHCLKFreq>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	4b05      	ldr	r3, [pc, #20]	; (8006fc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	0a9b      	lsrs	r3, r3, #10
 8006fb8:	f003 0307 	and.w	r3, r3, #7
 8006fbc:	4903      	ldr	r1, [pc, #12]	; (8006fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006fbe:	5ccb      	ldrb	r3, [r1, r3]
 8006fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	40023800 	.word	0x40023800
 8006fcc:	0800b94c 	.word	0x0800b94c

08006fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006fd4:	f7ff ffdc 	bl	8006f90 <HAL_RCC_GetHCLKFreq>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	4b05      	ldr	r3, [pc, #20]	; (8006ff0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	0b5b      	lsrs	r3, r3, #13
 8006fe0:	f003 0307 	and.w	r3, r3, #7
 8006fe4:	4903      	ldr	r1, [pc, #12]	; (8006ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fe6:	5ccb      	ldrb	r3, [r1, r3]
 8006fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	40023800 	.word	0x40023800
 8006ff4:	0800b94c 	.word	0x0800b94c

08006ff8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b086      	sub	sp, #24
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007000:	2300      	movs	r3, #0
 8007002:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007004:	2300      	movs	r3, #0
 8007006:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0301 	and.w	r3, r3, #1
 8007010:	2b00      	cmp	r3, #0
 8007012:	d105      	bne.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800701c:	2b00      	cmp	r3, #0
 800701e:	d035      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007020:	4b62      	ldr	r3, [pc, #392]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007022:	2200      	movs	r2, #0
 8007024:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007026:	f7fb f929 	bl	800227c <HAL_GetTick>
 800702a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800702c:	e008      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800702e:	f7fb f925 	bl	800227c <HAL_GetTick>
 8007032:	4602      	mov	r2, r0
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	2b02      	cmp	r3, #2
 800703a:	d901      	bls.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e0b0      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007040:	4b5b      	ldr	r3, [pc, #364]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1f0      	bne.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	019a      	lsls	r2, r3, #6
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	071b      	lsls	r3, r3, #28
 8007058:	4955      	ldr	r1, [pc, #340]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800705a:	4313      	orrs	r3, r2
 800705c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007060:	4b52      	ldr	r3, [pc, #328]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007062:	2201      	movs	r2, #1
 8007064:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007066:	f7fb f909 	bl	800227c <HAL_GetTick>
 800706a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800706c:	e008      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800706e:	f7fb f905 	bl	800227c <HAL_GetTick>
 8007072:	4602      	mov	r2, r0
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	2b02      	cmp	r3, #2
 800707a:	d901      	bls.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800707c:	2303      	movs	r3, #3
 800707e:	e090      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007080:	4b4b      	ldr	r3, [pc, #300]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d0f0      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0302 	and.w	r3, r3, #2
 8007094:	2b00      	cmp	r3, #0
 8007096:	f000 8083 	beq.w	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800709a:	2300      	movs	r3, #0
 800709c:	60fb      	str	r3, [r7, #12]
 800709e:	4b44      	ldr	r3, [pc, #272]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a2:	4a43      	ldr	r2, [pc, #268]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070a8:	6413      	str	r3, [r2, #64]	; 0x40
 80070aa:	4b41      	ldr	r3, [pc, #260]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070b2:	60fb      	str	r3, [r7, #12]
 80070b4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80070b6:	4b3f      	ldr	r3, [pc, #252]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a3e      	ldr	r2, [pc, #248]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80070bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80070c2:	f7fb f8db 	bl	800227c <HAL_GetTick>
 80070c6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80070c8:	e008      	b.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80070ca:	f7fb f8d7 	bl	800227c <HAL_GetTick>
 80070ce:	4602      	mov	r2, r0
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d901      	bls.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e062      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80070dc:	4b35      	ldr	r3, [pc, #212]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d0f0      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80070e8:	4b31      	ldr	r3, [pc, #196]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070f0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d02f      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007100:	693a      	ldr	r2, [r7, #16]
 8007102:	429a      	cmp	r2, r3
 8007104:	d028      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007106:	4b2a      	ldr	r3, [pc, #168]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800710a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800710e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007110:	4b29      	ldr	r3, [pc, #164]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007112:	2201      	movs	r2, #1
 8007114:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007116:	4b28      	ldr	r3, [pc, #160]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007118:	2200      	movs	r2, #0
 800711a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800711c:	4a24      	ldr	r2, [pc, #144]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007122:	4b23      	ldr	r3, [pc, #140]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007126:	f003 0301 	and.w	r3, r3, #1
 800712a:	2b01      	cmp	r3, #1
 800712c:	d114      	bne.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800712e:	f7fb f8a5 	bl	800227c <HAL_GetTick>
 8007132:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007134:	e00a      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007136:	f7fb f8a1 	bl	800227c <HAL_GetTick>
 800713a:	4602      	mov	r2, r0
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	f241 3288 	movw	r2, #5000	; 0x1388
 8007144:	4293      	cmp	r3, r2
 8007146:	d901      	bls.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e02a      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800714c:	4b18      	ldr	r3, [pc, #96]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800714e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007150:	f003 0302 	and.w	r3, r3, #2
 8007154:	2b00      	cmp	r3, #0
 8007156:	d0ee      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007160:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007164:	d10d      	bne.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007166:	4b12      	ldr	r3, [pc, #72]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800717a:	490d      	ldr	r1, [pc, #52]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800717c:	4313      	orrs	r3, r2
 800717e:	608b      	str	r3, [r1, #8]
 8007180:	e005      	b.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007182:	4b0b      	ldr	r3, [pc, #44]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	4a0a      	ldr	r2, [pc, #40]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007188:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800718c:	6093      	str	r3, [r2, #8]
 800718e:	4b08      	ldr	r3, [pc, #32]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007190:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800719a:	4905      	ldr	r1, [pc, #20]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800719c:	4313      	orrs	r3, r2
 800719e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3718      	adds	r7, #24
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	42470068 	.word	0x42470068
 80071b0:	40023800 	.word	0x40023800
 80071b4:	40007000 	.word	0x40007000
 80071b8:	42470e40 	.word	0x42470e40

080071bc <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2203      	movs	r2, #3
 80071c8:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80071ca:	4b11      	ldr	r3, [pc, #68]	; (8007210 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80071cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071d0:	099b      	lsrs	r3, r3, #6
 80071d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80071da:	4b0d      	ldr	r3, [pc, #52]	; (8007210 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80071dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071e0:	0f1b      	lsrs	r3, r3, #28
 80071e2:	f003 0207 	and.w	r2, r3, #7
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80071ea:	4b09      	ldr	r3, [pc, #36]	; (8007210 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80071f2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80071f4:	4b06      	ldr	r3, [pc, #24]	; (8007210 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80071f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	431a      	orrs	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8007204:	bf00      	nop
 8007206:	3714      	adds	r7, #20
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr
 8007210:	40023800 	.word	0x40023800

08007214 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007214:	b480      	push	{r7}
 8007216:	b087      	sub	sp, #28
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800721c:	2300      	movs	r3, #0
 800721e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007220:	2300      	movs	r3, #0
 8007222:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007224:	2300      	movs	r3, #0
 8007226:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007228:	2300      	movs	r3, #0
 800722a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d13e      	bne.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007232:	4b23      	ldr	r3, [pc, #140]	; (80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800723a:	60fb      	str	r3, [r7, #12]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d005      	beq.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d12f      	bne.n	80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007248:	4b1e      	ldr	r3, [pc, #120]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800724a:	617b      	str	r3, [r7, #20]
          break;
 800724c:	e02f      	b.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800724e:	4b1c      	ldr	r3, [pc, #112]	; (80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007256:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800725a:	d108      	bne.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800725c:	4b18      	ldr	r3, [pc, #96]	; (80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007264:	4a18      	ldr	r2, [pc, #96]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007266:	fbb2 f3f3 	udiv	r3, r2, r3
 800726a:	613b      	str	r3, [r7, #16]
 800726c:	e007      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800726e:	4b14      	ldr	r3, [pc, #80]	; (80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007276:	4a15      	ldr	r2, [pc, #84]	; (80072cc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007278:	fbb2 f3f3 	udiv	r3, r2, r3
 800727c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800727e:	4b10      	ldr	r3, [pc, #64]	; (80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007284:	099b      	lsrs	r3, r3, #6
 8007286:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	fb02 f303 	mul.w	r3, r2, r3
 8007290:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007292:	4b0b      	ldr	r3, [pc, #44]	; (80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007298:	0f1b      	lsrs	r3, r3, #28
 800729a:	f003 0307 	and.w	r3, r3, #7
 800729e:	68ba      	ldr	r2, [r7, #8]
 80072a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072a4:	617b      	str	r3, [r7, #20]
          break;
 80072a6:	e002      	b.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80072a8:	2300      	movs	r3, #0
 80072aa:	617b      	str	r3, [r7, #20]
          break;
 80072ac:	bf00      	nop
        }
      }
      break;
 80072ae:	bf00      	nop
    }
  }
  return frequency;
 80072b0:	697b      	ldr	r3, [r7, #20]
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	371c      	adds	r7, #28
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	40023800 	.word	0x40023800
 80072c4:	00bb8000 	.word	0x00bb8000
 80072c8:	007a1200 	.word	0x007a1200
 80072cc:	00f42400 	.word	0x00f42400

080072d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d101      	bne.n	80072e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e03f      	b.n	8007362 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d106      	bne.n	80072fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7fa fd8a 	bl	8001e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2224      	movs	r2, #36	; 0x24
 8007300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68da      	ldr	r2, [r3, #12]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007312:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 fa91 	bl	800783c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	691a      	ldr	r2, [r3, #16]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007328:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	695a      	ldr	r2, [r3, #20]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007338:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68da      	ldr	r2, [r3, #12]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007348:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2220      	movs	r2, #32
 8007354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2220      	movs	r2, #32
 800735c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3708      	adds	r7, #8
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b084      	sub	sp, #16
 800736e:	af00      	add	r7, sp, #0
 8007370:	60f8      	str	r0, [r7, #12]
 8007372:	60b9      	str	r1, [r7, #8]
 8007374:	4613      	mov	r3, r2
 8007376:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800737e:	b2db      	uxtb	r3, r3
 8007380:	2b20      	cmp	r3, #32
 8007382:	d11d      	bne.n	80073c0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d002      	beq.n	8007390 <HAL_UART_Receive_DMA+0x26>
 800738a:	88fb      	ldrh	r3, [r7, #6]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d101      	bne.n	8007394 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e016      	b.n	80073c2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800739a:	2b01      	cmp	r3, #1
 800739c:	d101      	bne.n	80073a2 <HAL_UART_Receive_DMA+0x38>
 800739e:	2302      	movs	r3, #2
 80073a0:	e00f      	b.n	80073c2 <HAL_UART_Receive_DMA+0x58>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80073b0:	88fb      	ldrh	r3, [r7, #6]
 80073b2:	461a      	mov	r2, r3
 80073b4:	68b9      	ldr	r1, [r7, #8]
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f000 f916 	bl	80075e8 <UART_Start_Receive_DMA>
 80073bc:	4603      	mov	r3, r0
 80073be:	e000      	b.n	80073c2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80073c0:	2302      	movs	r3, #2
  }
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073ca:	b480      	push	{r7}
 80073cc:	b083      	sub	sp, #12
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80073d2:	bf00      	nop
 80073d4:	370c      	adds	r7, #12
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073de:	b480      	push	{r7}
 80073e0:	b083      	sub	sp, #12
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	460b      	mov	r3, r1
 80073e8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073ea:	bf00      	nop
 80073ec:	370c      	adds	r7, #12
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b09c      	sub	sp, #112	; 0x70
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007402:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800740e:	2b00      	cmp	r3, #0
 8007410:	d172      	bne.n	80074f8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007414:	2200      	movs	r2, #0
 8007416:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	330c      	adds	r3, #12
 800741e:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007422:	e853 3f00 	ldrex	r3, [r3]
 8007426:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800742a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800742e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	330c      	adds	r3, #12
 8007436:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007438:	65ba      	str	r2, [r7, #88]	; 0x58
 800743a:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800743e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007440:	e841 2300 	strex	r3, r2, [r1]
 8007444:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1e5      	bne.n	8007418 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800744c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	3314      	adds	r3, #20
 8007452:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007456:	e853 3f00 	ldrex	r3, [r3]
 800745a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800745c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800745e:	f023 0301 	bic.w	r3, r3, #1
 8007462:	667b      	str	r3, [r7, #100]	; 0x64
 8007464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	3314      	adds	r3, #20
 800746a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800746c:	647a      	str	r2, [r7, #68]	; 0x44
 800746e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007470:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007472:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007474:	e841 2300 	strex	r3, r2, [r1]
 8007478:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800747a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1e5      	bne.n	800744c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	3314      	adds	r3, #20
 8007486:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748a:	e853 3f00 	ldrex	r3, [r3]
 800748e:	623b      	str	r3, [r7, #32]
   return(result);
 8007490:	6a3b      	ldr	r3, [r7, #32]
 8007492:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007496:	663b      	str	r3, [r7, #96]	; 0x60
 8007498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	3314      	adds	r3, #20
 800749e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80074a0:	633a      	str	r2, [r7, #48]	; 0x30
 80074a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074a8:	e841 2300 	strex	r3, r2, [r1]
 80074ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1e5      	bne.n	8007480 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80074b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074b6:	2220      	movs	r2, #32
 80074b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d119      	bne.n	80074f8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	330c      	adds	r3, #12
 80074ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	e853 3f00 	ldrex	r3, [r3]
 80074d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f023 0310 	bic.w	r3, r3, #16
 80074da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	330c      	adds	r3, #12
 80074e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80074e4:	61fa      	str	r2, [r7, #28]
 80074e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e8:	69b9      	ldr	r1, [r7, #24]
 80074ea:	69fa      	ldr	r2, [r7, #28]
 80074ec:	e841 2300 	strex	r3, r2, [r1]
 80074f0:	617b      	str	r3, [r7, #20]
   return(result);
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1e5      	bne.n	80074c4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d106      	bne.n	800750e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007502:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007504:	4619      	mov	r1, r3
 8007506:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007508:	f7ff ff69 	bl	80073de <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800750c:	e002      	b.n	8007514 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800750e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007510:	f7f9 fec2 	bl	8001298 <HAL_UART_RxCpltCallback>
}
 8007514:	bf00      	nop
 8007516:	3770      	adds	r7, #112	; 0x70
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007528:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800752e:	2b01      	cmp	r3, #1
 8007530:	d108      	bne.n	8007544 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007536:	085b      	lsrs	r3, r3, #1
 8007538:	b29b      	uxth	r3, r3
 800753a:	4619      	mov	r1, r3
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	f7ff ff4e 	bl	80073de <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007542:	e002      	b.n	800754a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f7f9 fe8d 	bl	8001264 <HAL_UART_RxHalfCpltCallback>
}
 800754a:	bf00      	nop
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b084      	sub	sp, #16
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800755a:	2300      	movs	r3, #0
 800755c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007562:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800756e:	2b80      	cmp	r3, #128	; 0x80
 8007570:	bf0c      	ite	eq
 8007572:	2301      	moveq	r3, #1
 8007574:	2300      	movne	r3, #0
 8007576:	b2db      	uxtb	r3, r3
 8007578:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b21      	cmp	r3, #33	; 0x21
 8007584:	d108      	bne.n	8007598 <UART_DMAError+0x46>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d005      	beq.n	8007598 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	2200      	movs	r2, #0
 8007590:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007592:	68b8      	ldr	r0, [r7, #8]
 8007594:	f000 f8c6 	bl	8007724 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a2:	2b40      	cmp	r3, #64	; 0x40
 80075a4:	bf0c      	ite	eq
 80075a6:	2301      	moveq	r3, #1
 80075a8:	2300      	movne	r3, #0
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b22      	cmp	r3, #34	; 0x22
 80075b8:	d108      	bne.n	80075cc <UART_DMAError+0x7a>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d005      	beq.n	80075cc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	2200      	movs	r2, #0
 80075c4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80075c6:	68b8      	ldr	r0, [r7, #8]
 80075c8:	f000 f8d4 	bl	8007774 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d0:	f043 0210 	orr.w	r2, r3, #16
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075d8:	68b8      	ldr	r0, [r7, #8]
 80075da:	f7ff fef6 	bl	80073ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075de:	bf00      	nop
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
	...

080075e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b098      	sub	sp, #96	; 0x60
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	4613      	mov	r3, r2
 80075f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	88fa      	ldrh	r2, [r7, #6]
 8007600:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2222      	movs	r2, #34	; 0x22
 800760c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007614:	4a40      	ldr	r2, [pc, #256]	; (8007718 <UART_Start_Receive_DMA+0x130>)
 8007616:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761c:	4a3f      	ldr	r2, [pc, #252]	; (800771c <UART_Start_Receive_DMA+0x134>)
 800761e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007624:	4a3e      	ldr	r2, [pc, #248]	; (8007720 <UART_Start_Receive_DMA+0x138>)
 8007626:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762c:	2200      	movs	r2, #0
 800762e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007630:	f107 0308 	add.w	r3, r7, #8
 8007634:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	3304      	adds	r3, #4
 8007640:	4619      	mov	r1, r3
 8007642:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	88fb      	ldrh	r3, [r7, #6]
 8007648:	f7fb f866 	bl	8002718 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800764c:	2300      	movs	r3, #0
 800764e:	613b      	str	r3, [r7, #16]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	613b      	str	r3, [r7, #16]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	613b      	str	r3, [r7, #16]
 8007660:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2200      	movs	r2, #0
 8007666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d019      	beq.n	80076a6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	330c      	adds	r3, #12
 8007678:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800767c:	e853 3f00 	ldrex	r3, [r3]
 8007680:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007688:	65bb      	str	r3, [r7, #88]	; 0x58
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	330c      	adds	r3, #12
 8007690:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007692:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007694:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007696:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007698:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800769a:	e841 2300 	strex	r3, r2, [r1]
 800769e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80076a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1e5      	bne.n	8007672 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3314      	adds	r3, #20
 80076ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b0:	e853 3f00 	ldrex	r3, [r3]
 80076b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b8:	f043 0301 	orr.w	r3, r3, #1
 80076bc:	657b      	str	r3, [r7, #84]	; 0x54
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	3314      	adds	r3, #20
 80076c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80076c6:	63ba      	str	r2, [r7, #56]	; 0x38
 80076c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80076cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076ce:	e841 2300 	strex	r3, r2, [r1]
 80076d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80076d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1e5      	bne.n	80076a6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	3314      	adds	r3, #20
 80076e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	e853 3f00 	ldrex	r3, [r3]
 80076e8:	617b      	str	r3, [r7, #20]
   return(result);
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076f0:	653b      	str	r3, [r7, #80]	; 0x50
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	3314      	adds	r3, #20
 80076f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80076fa:	627a      	str	r2, [r7, #36]	; 0x24
 80076fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fe:	6a39      	ldr	r1, [r7, #32]
 8007700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007702:	e841 2300 	strex	r3, r2, [r1]
 8007706:	61fb      	str	r3, [r7, #28]
   return(result);
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1e5      	bne.n	80076da <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3760      	adds	r7, #96	; 0x60
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}
 8007718:	080073f7 	.word	0x080073f7
 800771c:	0800751d 	.word	0x0800751d
 8007720:	08007553 	.word	0x08007553

08007724 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007724:	b480      	push	{r7}
 8007726:	b089      	sub	sp, #36	; 0x24
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	330c      	adds	r3, #12
 8007732:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	e853 3f00 	ldrex	r3, [r3]
 800773a:	60bb      	str	r3, [r7, #8]
   return(result);
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007742:	61fb      	str	r3, [r7, #28]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	330c      	adds	r3, #12
 800774a:	69fa      	ldr	r2, [r7, #28]
 800774c:	61ba      	str	r2, [r7, #24]
 800774e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007750:	6979      	ldr	r1, [r7, #20]
 8007752:	69ba      	ldr	r2, [r7, #24]
 8007754:	e841 2300 	strex	r3, r2, [r1]
 8007758:	613b      	str	r3, [r7, #16]
   return(result);
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1e5      	bne.n	800772c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2220      	movs	r2, #32
 8007764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007768:	bf00      	nop
 800776a:	3724      	adds	r7, #36	; 0x24
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007774:	b480      	push	{r7}
 8007776:	b095      	sub	sp, #84	; 0x54
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	330c      	adds	r3, #12
 8007782:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007786:	e853 3f00 	ldrex	r3, [r3]
 800778a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800778c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	330c      	adds	r3, #12
 800779a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800779c:	643a      	str	r2, [r7, #64]	; 0x40
 800779e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077a4:	e841 2300 	strex	r3, r2, [r1]
 80077a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1e5      	bne.n	800777c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	3314      	adds	r3, #20
 80077b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b8:	6a3b      	ldr	r3, [r7, #32]
 80077ba:	e853 3f00 	ldrex	r3, [r3]
 80077be:	61fb      	str	r3, [r7, #28]
   return(result);
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	f023 0301 	bic.w	r3, r3, #1
 80077c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	3314      	adds	r3, #20
 80077ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077d8:	e841 2300 	strex	r3, r2, [r1]
 80077dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1e5      	bne.n	80077b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d119      	bne.n	8007820 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	330c      	adds	r3, #12
 80077f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	e853 3f00 	ldrex	r3, [r3]
 80077fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	f023 0310 	bic.w	r3, r3, #16
 8007802:	647b      	str	r3, [r7, #68]	; 0x44
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	330c      	adds	r3, #12
 800780a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800780c:	61ba      	str	r2, [r7, #24]
 800780e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007810:	6979      	ldr	r1, [r7, #20]
 8007812:	69ba      	ldr	r2, [r7, #24]
 8007814:	e841 2300 	strex	r3, r2, [r1]
 8007818:	613b      	str	r3, [r7, #16]
   return(result);
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1e5      	bne.n	80077ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2220      	movs	r2, #32
 8007824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800782e:	bf00      	nop
 8007830:	3754      	adds	r7, #84	; 0x54
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
	...

0800783c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800783c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007840:	b0c0      	sub	sp, #256	; 0x100
 8007842:	af00      	add	r7, sp, #0
 8007844:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007858:	68d9      	ldr	r1, [r3, #12]
 800785a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	ea40 0301 	orr.w	r3, r0, r1
 8007864:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800786a:	689a      	ldr	r2, [r3, #8]
 800786c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	431a      	orrs	r2, r3
 8007874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	431a      	orrs	r2, r3
 800787c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007880:	69db      	ldr	r3, [r3, #28]
 8007882:	4313      	orrs	r3, r2
 8007884:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007894:	f021 010c 	bic.w	r1, r1, #12
 8007898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80078a2:	430b      	orrs	r3, r1
 80078a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80078a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80078b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078b6:	6999      	ldr	r1, [r3, #24]
 80078b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	ea40 0301 	orr.w	r3, r0, r1
 80078c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80078c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	4b8f      	ldr	r3, [pc, #572]	; (8007b08 <UART_SetConfig+0x2cc>)
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d005      	beq.n	80078dc <UART_SetConfig+0xa0>
 80078d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	4b8d      	ldr	r3, [pc, #564]	; (8007b0c <UART_SetConfig+0x2d0>)
 80078d8:	429a      	cmp	r2, r3
 80078da:	d104      	bne.n	80078e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80078dc:	f7ff fb78 	bl	8006fd0 <HAL_RCC_GetPCLK2Freq>
 80078e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80078e4:	e003      	b.n	80078ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80078e6:	f7ff fb5f 	bl	8006fa8 <HAL_RCC_GetPCLK1Freq>
 80078ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078f2:	69db      	ldr	r3, [r3, #28]
 80078f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078f8:	f040 810c 	bne.w	8007b14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80078fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007900:	2200      	movs	r2, #0
 8007902:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007906:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800790a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800790e:	4622      	mov	r2, r4
 8007910:	462b      	mov	r3, r5
 8007912:	1891      	adds	r1, r2, r2
 8007914:	65b9      	str	r1, [r7, #88]	; 0x58
 8007916:	415b      	adcs	r3, r3
 8007918:	65fb      	str	r3, [r7, #92]	; 0x5c
 800791a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800791e:	4621      	mov	r1, r4
 8007920:	eb12 0801 	adds.w	r8, r2, r1
 8007924:	4629      	mov	r1, r5
 8007926:	eb43 0901 	adc.w	r9, r3, r1
 800792a:	f04f 0200 	mov.w	r2, #0
 800792e:	f04f 0300 	mov.w	r3, #0
 8007932:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007936:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800793a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800793e:	4690      	mov	r8, r2
 8007940:	4699      	mov	r9, r3
 8007942:	4623      	mov	r3, r4
 8007944:	eb18 0303 	adds.w	r3, r8, r3
 8007948:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800794c:	462b      	mov	r3, r5
 800794e:	eb49 0303 	adc.w	r3, r9, r3
 8007952:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007962:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007966:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800796a:	460b      	mov	r3, r1
 800796c:	18db      	adds	r3, r3, r3
 800796e:	653b      	str	r3, [r7, #80]	; 0x50
 8007970:	4613      	mov	r3, r2
 8007972:	eb42 0303 	adc.w	r3, r2, r3
 8007976:	657b      	str	r3, [r7, #84]	; 0x54
 8007978:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800797c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007980:	f7f8 fc22 	bl	80001c8 <__aeabi_uldivmod>
 8007984:	4602      	mov	r2, r0
 8007986:	460b      	mov	r3, r1
 8007988:	4b61      	ldr	r3, [pc, #388]	; (8007b10 <UART_SetConfig+0x2d4>)
 800798a:	fba3 2302 	umull	r2, r3, r3, r2
 800798e:	095b      	lsrs	r3, r3, #5
 8007990:	011c      	lsls	r4, r3, #4
 8007992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007996:	2200      	movs	r2, #0
 8007998:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800799c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80079a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80079a4:	4642      	mov	r2, r8
 80079a6:	464b      	mov	r3, r9
 80079a8:	1891      	adds	r1, r2, r2
 80079aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80079ac:	415b      	adcs	r3, r3
 80079ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80079b4:	4641      	mov	r1, r8
 80079b6:	eb12 0a01 	adds.w	sl, r2, r1
 80079ba:	4649      	mov	r1, r9
 80079bc:	eb43 0b01 	adc.w	fp, r3, r1
 80079c0:	f04f 0200 	mov.w	r2, #0
 80079c4:	f04f 0300 	mov.w	r3, #0
 80079c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80079cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80079d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079d4:	4692      	mov	sl, r2
 80079d6:	469b      	mov	fp, r3
 80079d8:	4643      	mov	r3, r8
 80079da:	eb1a 0303 	adds.w	r3, sl, r3
 80079de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079e2:	464b      	mov	r3, r9
 80079e4:	eb4b 0303 	adc.w	r3, fp, r3
 80079e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80079ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80079fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007a00:	460b      	mov	r3, r1
 8007a02:	18db      	adds	r3, r3, r3
 8007a04:	643b      	str	r3, [r7, #64]	; 0x40
 8007a06:	4613      	mov	r3, r2
 8007a08:	eb42 0303 	adc.w	r3, r2, r3
 8007a0c:	647b      	str	r3, [r7, #68]	; 0x44
 8007a0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007a12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007a16:	f7f8 fbd7 	bl	80001c8 <__aeabi_uldivmod>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	4611      	mov	r1, r2
 8007a20:	4b3b      	ldr	r3, [pc, #236]	; (8007b10 <UART_SetConfig+0x2d4>)
 8007a22:	fba3 2301 	umull	r2, r3, r3, r1
 8007a26:	095b      	lsrs	r3, r3, #5
 8007a28:	2264      	movs	r2, #100	; 0x64
 8007a2a:	fb02 f303 	mul.w	r3, r2, r3
 8007a2e:	1acb      	subs	r3, r1, r3
 8007a30:	00db      	lsls	r3, r3, #3
 8007a32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007a36:	4b36      	ldr	r3, [pc, #216]	; (8007b10 <UART_SetConfig+0x2d4>)
 8007a38:	fba3 2302 	umull	r2, r3, r3, r2
 8007a3c:	095b      	lsrs	r3, r3, #5
 8007a3e:	005b      	lsls	r3, r3, #1
 8007a40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a44:	441c      	add	r4, r3
 8007a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007a54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007a58:	4642      	mov	r2, r8
 8007a5a:	464b      	mov	r3, r9
 8007a5c:	1891      	adds	r1, r2, r2
 8007a5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007a60:	415b      	adcs	r3, r3
 8007a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007a68:	4641      	mov	r1, r8
 8007a6a:	1851      	adds	r1, r2, r1
 8007a6c:	6339      	str	r1, [r7, #48]	; 0x30
 8007a6e:	4649      	mov	r1, r9
 8007a70:	414b      	adcs	r3, r1
 8007a72:	637b      	str	r3, [r7, #52]	; 0x34
 8007a74:	f04f 0200 	mov.w	r2, #0
 8007a78:	f04f 0300 	mov.w	r3, #0
 8007a7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007a80:	4659      	mov	r1, fp
 8007a82:	00cb      	lsls	r3, r1, #3
 8007a84:	4651      	mov	r1, sl
 8007a86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a8a:	4651      	mov	r1, sl
 8007a8c:	00ca      	lsls	r2, r1, #3
 8007a8e:	4610      	mov	r0, r2
 8007a90:	4619      	mov	r1, r3
 8007a92:	4603      	mov	r3, r0
 8007a94:	4642      	mov	r2, r8
 8007a96:	189b      	adds	r3, r3, r2
 8007a98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a9c:	464b      	mov	r3, r9
 8007a9e:	460a      	mov	r2, r1
 8007aa0:	eb42 0303 	adc.w	r3, r2, r3
 8007aa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007ab4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007ab8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007abc:	460b      	mov	r3, r1
 8007abe:	18db      	adds	r3, r3, r3
 8007ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	eb42 0303 	adc.w	r3, r2, r3
 8007ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007aca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ace:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007ad2:	f7f8 fb79 	bl	80001c8 <__aeabi_uldivmod>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	460b      	mov	r3, r1
 8007ada:	4b0d      	ldr	r3, [pc, #52]	; (8007b10 <UART_SetConfig+0x2d4>)
 8007adc:	fba3 1302 	umull	r1, r3, r3, r2
 8007ae0:	095b      	lsrs	r3, r3, #5
 8007ae2:	2164      	movs	r1, #100	; 0x64
 8007ae4:	fb01 f303 	mul.w	r3, r1, r3
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	00db      	lsls	r3, r3, #3
 8007aec:	3332      	adds	r3, #50	; 0x32
 8007aee:	4a08      	ldr	r2, [pc, #32]	; (8007b10 <UART_SetConfig+0x2d4>)
 8007af0:	fba2 2303 	umull	r2, r3, r2, r3
 8007af4:	095b      	lsrs	r3, r3, #5
 8007af6:	f003 0207 	and.w	r2, r3, #7
 8007afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4422      	add	r2, r4
 8007b02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b04:	e105      	b.n	8007d12 <UART_SetConfig+0x4d6>
 8007b06:	bf00      	nop
 8007b08:	40011000 	.word	0x40011000
 8007b0c:	40011400 	.word	0x40011400
 8007b10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007b1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007b22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007b26:	4642      	mov	r2, r8
 8007b28:	464b      	mov	r3, r9
 8007b2a:	1891      	adds	r1, r2, r2
 8007b2c:	6239      	str	r1, [r7, #32]
 8007b2e:	415b      	adcs	r3, r3
 8007b30:	627b      	str	r3, [r7, #36]	; 0x24
 8007b32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b36:	4641      	mov	r1, r8
 8007b38:	1854      	adds	r4, r2, r1
 8007b3a:	4649      	mov	r1, r9
 8007b3c:	eb43 0501 	adc.w	r5, r3, r1
 8007b40:	f04f 0200 	mov.w	r2, #0
 8007b44:	f04f 0300 	mov.w	r3, #0
 8007b48:	00eb      	lsls	r3, r5, #3
 8007b4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b4e:	00e2      	lsls	r2, r4, #3
 8007b50:	4614      	mov	r4, r2
 8007b52:	461d      	mov	r5, r3
 8007b54:	4643      	mov	r3, r8
 8007b56:	18e3      	adds	r3, r4, r3
 8007b58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007b5c:	464b      	mov	r3, r9
 8007b5e:	eb45 0303 	adc.w	r3, r5, r3
 8007b62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007b72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007b76:	f04f 0200 	mov.w	r2, #0
 8007b7a:	f04f 0300 	mov.w	r3, #0
 8007b7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007b82:	4629      	mov	r1, r5
 8007b84:	008b      	lsls	r3, r1, #2
 8007b86:	4621      	mov	r1, r4
 8007b88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b8c:	4621      	mov	r1, r4
 8007b8e:	008a      	lsls	r2, r1, #2
 8007b90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007b94:	f7f8 fb18 	bl	80001c8 <__aeabi_uldivmod>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	4b60      	ldr	r3, [pc, #384]	; (8007d20 <UART_SetConfig+0x4e4>)
 8007b9e:	fba3 2302 	umull	r2, r3, r3, r2
 8007ba2:	095b      	lsrs	r3, r3, #5
 8007ba4:	011c      	lsls	r4, r3, #4
 8007ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007baa:	2200      	movs	r2, #0
 8007bac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007bb0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007bb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007bb8:	4642      	mov	r2, r8
 8007bba:	464b      	mov	r3, r9
 8007bbc:	1891      	adds	r1, r2, r2
 8007bbe:	61b9      	str	r1, [r7, #24]
 8007bc0:	415b      	adcs	r3, r3
 8007bc2:	61fb      	str	r3, [r7, #28]
 8007bc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007bc8:	4641      	mov	r1, r8
 8007bca:	1851      	adds	r1, r2, r1
 8007bcc:	6139      	str	r1, [r7, #16]
 8007bce:	4649      	mov	r1, r9
 8007bd0:	414b      	adcs	r3, r1
 8007bd2:	617b      	str	r3, [r7, #20]
 8007bd4:	f04f 0200 	mov.w	r2, #0
 8007bd8:	f04f 0300 	mov.w	r3, #0
 8007bdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007be0:	4659      	mov	r1, fp
 8007be2:	00cb      	lsls	r3, r1, #3
 8007be4:	4651      	mov	r1, sl
 8007be6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bea:	4651      	mov	r1, sl
 8007bec:	00ca      	lsls	r2, r1, #3
 8007bee:	4610      	mov	r0, r2
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	4642      	mov	r2, r8
 8007bf6:	189b      	adds	r3, r3, r2
 8007bf8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007bfc:	464b      	mov	r3, r9
 8007bfe:	460a      	mov	r2, r1
 8007c00:	eb42 0303 	adc.w	r3, r2, r3
 8007c04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007c14:	f04f 0200 	mov.w	r2, #0
 8007c18:	f04f 0300 	mov.w	r3, #0
 8007c1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007c20:	4649      	mov	r1, r9
 8007c22:	008b      	lsls	r3, r1, #2
 8007c24:	4641      	mov	r1, r8
 8007c26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c2a:	4641      	mov	r1, r8
 8007c2c:	008a      	lsls	r2, r1, #2
 8007c2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007c32:	f7f8 fac9 	bl	80001c8 <__aeabi_uldivmod>
 8007c36:	4602      	mov	r2, r0
 8007c38:	460b      	mov	r3, r1
 8007c3a:	4b39      	ldr	r3, [pc, #228]	; (8007d20 <UART_SetConfig+0x4e4>)
 8007c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8007c40:	095b      	lsrs	r3, r3, #5
 8007c42:	2164      	movs	r1, #100	; 0x64
 8007c44:	fb01 f303 	mul.w	r3, r1, r3
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	011b      	lsls	r3, r3, #4
 8007c4c:	3332      	adds	r3, #50	; 0x32
 8007c4e:	4a34      	ldr	r2, [pc, #208]	; (8007d20 <UART_SetConfig+0x4e4>)
 8007c50:	fba2 2303 	umull	r2, r3, r2, r3
 8007c54:	095b      	lsrs	r3, r3, #5
 8007c56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c5a:	441c      	add	r4, r3
 8007c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c60:	2200      	movs	r2, #0
 8007c62:	673b      	str	r3, [r7, #112]	; 0x70
 8007c64:	677a      	str	r2, [r7, #116]	; 0x74
 8007c66:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007c6a:	4642      	mov	r2, r8
 8007c6c:	464b      	mov	r3, r9
 8007c6e:	1891      	adds	r1, r2, r2
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	415b      	adcs	r3, r3
 8007c74:	60fb      	str	r3, [r7, #12]
 8007c76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c7a:	4641      	mov	r1, r8
 8007c7c:	1851      	adds	r1, r2, r1
 8007c7e:	6039      	str	r1, [r7, #0]
 8007c80:	4649      	mov	r1, r9
 8007c82:	414b      	adcs	r3, r1
 8007c84:	607b      	str	r3, [r7, #4]
 8007c86:	f04f 0200 	mov.w	r2, #0
 8007c8a:	f04f 0300 	mov.w	r3, #0
 8007c8e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007c92:	4659      	mov	r1, fp
 8007c94:	00cb      	lsls	r3, r1, #3
 8007c96:	4651      	mov	r1, sl
 8007c98:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c9c:	4651      	mov	r1, sl
 8007c9e:	00ca      	lsls	r2, r1, #3
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	4642      	mov	r2, r8
 8007ca8:	189b      	adds	r3, r3, r2
 8007caa:	66bb      	str	r3, [r7, #104]	; 0x68
 8007cac:	464b      	mov	r3, r9
 8007cae:	460a      	mov	r2, r1
 8007cb0:	eb42 0303 	adc.w	r3, r2, r3
 8007cb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	663b      	str	r3, [r7, #96]	; 0x60
 8007cc0:	667a      	str	r2, [r7, #100]	; 0x64
 8007cc2:	f04f 0200 	mov.w	r2, #0
 8007cc6:	f04f 0300 	mov.w	r3, #0
 8007cca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007cce:	4649      	mov	r1, r9
 8007cd0:	008b      	lsls	r3, r1, #2
 8007cd2:	4641      	mov	r1, r8
 8007cd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cd8:	4641      	mov	r1, r8
 8007cda:	008a      	lsls	r2, r1, #2
 8007cdc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007ce0:	f7f8 fa72 	bl	80001c8 <__aeabi_uldivmod>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	4b0d      	ldr	r3, [pc, #52]	; (8007d20 <UART_SetConfig+0x4e4>)
 8007cea:	fba3 1302 	umull	r1, r3, r3, r2
 8007cee:	095b      	lsrs	r3, r3, #5
 8007cf0:	2164      	movs	r1, #100	; 0x64
 8007cf2:	fb01 f303 	mul.w	r3, r1, r3
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	011b      	lsls	r3, r3, #4
 8007cfa:	3332      	adds	r3, #50	; 0x32
 8007cfc:	4a08      	ldr	r2, [pc, #32]	; (8007d20 <UART_SetConfig+0x4e4>)
 8007cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8007d02:	095b      	lsrs	r3, r3, #5
 8007d04:	f003 020f 	and.w	r2, r3, #15
 8007d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4422      	add	r2, r4
 8007d10:	609a      	str	r2, [r3, #8]
}
 8007d12:	bf00      	nop
 8007d14:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d1e:	bf00      	nop
 8007d20:	51eb851f 	.word	0x51eb851f

08007d24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d24:	b084      	sub	sp, #16
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b084      	sub	sp, #16
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	f107 001c 	add.w	r0, r7, #28
 8007d32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d122      	bne.n	8007d82 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d105      	bne.n	8007d76 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 f9c0 	bl	80080fc <USB_CoreReset>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	73fb      	strb	r3, [r7, #15]
 8007d80:	e01a      	b.n	8007db8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 f9b4 	bl	80080fc <USB_CoreReset>
 8007d94:	4603      	mov	r3, r0
 8007d96:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d106      	bne.n	8007dac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	639a      	str	r2, [r3, #56]	; 0x38
 8007daa:	e005      	b.n	8007db8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d10b      	bne.n	8007dd6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f043 0206 	orr.w	r2, r3, #6
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f043 0220 	orr.w	r2, r3, #32
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3710      	adds	r7, #16
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007de2:	b004      	add	sp, #16
 8007de4:	4770      	bx	lr

08007de6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007de6:	b480      	push	{r7}
 8007de8:	b083      	sub	sp, #12
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	f043 0201 	orr.w	r2, r3, #1
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	f023 0201 	bic.w	r2, r3, #1
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	370c      	adds	r7, #12
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr

08007e2a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b084      	sub	sp, #16
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
 8007e32:	460b      	mov	r3, r1
 8007e34:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007e36:	2300      	movs	r3, #0
 8007e38:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007e46:	78fb      	ldrb	r3, [r7, #3]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d115      	bne.n	8007e78 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007e58:	2001      	movs	r0, #1
 8007e5a:	f7fa fa1b 	bl	8002294 <HAL_Delay>
      ms++;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	3301      	adds	r3, #1
 8007e62:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 f93a 	bl	80080de <USB_GetMode>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d01e      	beq.n	8007eae <USB_SetCurrentMode+0x84>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2b31      	cmp	r3, #49	; 0x31
 8007e74:	d9f0      	bls.n	8007e58 <USB_SetCurrentMode+0x2e>
 8007e76:	e01a      	b.n	8007eae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007e78:	78fb      	ldrb	r3, [r7, #3]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d115      	bne.n	8007eaa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007e8a:	2001      	movs	r0, #1
 8007e8c:	f7fa fa02 	bl	8002294 <HAL_Delay>
      ms++;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	3301      	adds	r3, #1
 8007e94:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f921 	bl	80080de <USB_GetMode>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d005      	beq.n	8007eae <USB_SetCurrentMode+0x84>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2b31      	cmp	r3, #49	; 0x31
 8007ea6:	d9f0      	bls.n	8007e8a <USB_SetCurrentMode+0x60>
 8007ea8:	e001      	b.n	8007eae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e005      	b.n	8007eba <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2b32      	cmp	r3, #50	; 0x32
 8007eb2:	d101      	bne.n	8007eb8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e000      	b.n	8007eba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
	...

08007ec4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	4a13      	ldr	r2, [pc, #76]	; (8007f28 <USB_FlushTxFifo+0x64>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d901      	bls.n	8007ee4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	e01b      	b.n	8007f1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	daf2      	bge.n	8007ed2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007eec:	2300      	movs	r3, #0
 8007eee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	019b      	lsls	r3, r3, #6
 8007ef4:	f043 0220 	orr.w	r2, r3, #32
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	3301      	adds	r3, #1
 8007f00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	4a08      	ldr	r2, [pc, #32]	; (8007f28 <USB_FlushTxFifo+0x64>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d901      	bls.n	8007f0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	e006      	b.n	8007f1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	f003 0320 	and.w	r3, r3, #32
 8007f16:	2b20      	cmp	r3, #32
 8007f18:	d0f0      	beq.n	8007efc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3714      	adds	r7, #20
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr
 8007f28:	00030d40 	.word	0x00030d40

08007f2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f34:	2300      	movs	r3, #0
 8007f36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	4a11      	ldr	r2, [pc, #68]	; (8007f88 <USB_FlushRxFifo+0x5c>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d901      	bls.n	8007f4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007f46:	2303      	movs	r3, #3
 8007f48:	e018      	b.n	8007f7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	daf2      	bge.n	8007f38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007f52:	2300      	movs	r3, #0
 8007f54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2210      	movs	r2, #16
 8007f5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	4a08      	ldr	r2, [pc, #32]	; (8007f88 <USB_FlushRxFifo+0x5c>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d901      	bls.n	8007f6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	e006      	b.n	8007f7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	f003 0310 	and.w	r3, r3, #16
 8007f76:	2b10      	cmp	r3, #16
 8007f78:	d0f0      	beq.n	8007f5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3714      	adds	r7, #20
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr
 8007f88:	00030d40 	.word	0x00030d40

08007f8c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b089      	sub	sp, #36	; 0x24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	4611      	mov	r1, r2
 8007f98:	461a      	mov	r2, r3
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	71fb      	strb	r3, [r7, #7]
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007faa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d123      	bne.n	8007ffa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007fb2:	88bb      	ldrh	r3, [r7, #4]
 8007fb4:	3303      	adds	r3, #3
 8007fb6:	089b      	lsrs	r3, r3, #2
 8007fb8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007fba:	2300      	movs	r3, #0
 8007fbc:	61bb      	str	r3, [r7, #24]
 8007fbe:	e018      	b.n	8007ff2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007fc0:	79fb      	ldrb	r3, [r7, #7]
 8007fc2:	031a      	lsls	r2, r3, #12
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fcc:	461a      	mov	r2, r3
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	61bb      	str	r3, [r7, #24]
 8007ff2:	69ba      	ldr	r2, [r7, #24]
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d3e2      	bcc.n	8007fc0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007ffa:	2300      	movs	r3, #0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3724      	adds	r7, #36	; 0x24
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008008:	b480      	push	{r7}
 800800a:	b08b      	sub	sp, #44	; 0x2c
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	4613      	mov	r3, r2
 8008014:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800801e:	88fb      	ldrh	r3, [r7, #6]
 8008020:	089b      	lsrs	r3, r3, #2
 8008022:	b29b      	uxth	r3, r3
 8008024:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008026:	88fb      	ldrh	r3, [r7, #6]
 8008028:	f003 0303 	and.w	r3, r3, #3
 800802c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800802e:	2300      	movs	r3, #0
 8008030:	623b      	str	r3, [r7, #32]
 8008032:	e014      	b.n	800805e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008042:	3301      	adds	r3, #1
 8008044:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008048:	3301      	adds	r3, #1
 800804a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800804c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804e:	3301      	adds	r3, #1
 8008050:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008054:	3301      	adds	r3, #1
 8008056:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008058:	6a3b      	ldr	r3, [r7, #32]
 800805a:	3301      	adds	r3, #1
 800805c:	623b      	str	r3, [r7, #32]
 800805e:	6a3a      	ldr	r2, [r7, #32]
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	429a      	cmp	r2, r3
 8008064:	d3e6      	bcc.n	8008034 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008066:	8bfb      	ldrh	r3, [r7, #30]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d01e      	beq.n	80080aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800806c:	2300      	movs	r3, #0
 800806e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008076:	461a      	mov	r2, r3
 8008078:	f107 0310 	add.w	r3, r7, #16
 800807c:	6812      	ldr	r2, [r2, #0]
 800807e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008080:	693a      	ldr	r2, [r7, #16]
 8008082:	6a3b      	ldr	r3, [r7, #32]
 8008084:	b2db      	uxtb	r3, r3
 8008086:	00db      	lsls	r3, r3, #3
 8008088:	fa22 f303 	lsr.w	r3, r2, r3
 800808c:	b2da      	uxtb	r2, r3
 800808e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008090:	701a      	strb	r2, [r3, #0]
      i++;
 8008092:	6a3b      	ldr	r3, [r7, #32]
 8008094:	3301      	adds	r3, #1
 8008096:	623b      	str	r3, [r7, #32]
      pDest++;
 8008098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809a:	3301      	adds	r3, #1
 800809c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800809e:	8bfb      	ldrh	r3, [r7, #30]
 80080a0:	3b01      	subs	r3, #1
 80080a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80080a4:	8bfb      	ldrh	r3, [r7, #30]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1ea      	bne.n	8008080 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80080aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	372c      	adds	r7, #44	; 0x2c
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	695b      	ldr	r3, [r3, #20]
 80080c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	4013      	ands	r3, r2
 80080ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80080d0:	68fb      	ldr	r3, [r7, #12]
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3714      	adds	r7, #20
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr

080080de <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80080de:	b480      	push	{r7}
 80080e0:	b083      	sub	sp, #12
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	695b      	ldr	r3, [r3, #20]
 80080ea:	f003 0301 	and.w	r3, r3, #1
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
	...

080080fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b085      	sub	sp, #20
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008104:	2300      	movs	r3, #0
 8008106:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	3301      	adds	r3, #1
 800810c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	4a13      	ldr	r2, [pc, #76]	; (8008160 <USB_CoreReset+0x64>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d901      	bls.n	800811a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008116:	2303      	movs	r3, #3
 8008118:	e01b      	b.n	8008152 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	2b00      	cmp	r3, #0
 8008120:	daf2      	bge.n	8008108 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008122:	2300      	movs	r3, #0
 8008124:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	f043 0201 	orr.w	r2, r3, #1
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	3301      	adds	r3, #1
 8008136:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	4a09      	ldr	r2, [pc, #36]	; (8008160 <USB_CoreReset+0x64>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d901      	bls.n	8008144 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008140:	2303      	movs	r3, #3
 8008142:	e006      	b.n	8008152 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	691b      	ldr	r3, [r3, #16]
 8008148:	f003 0301 	and.w	r3, r3, #1
 800814c:	2b01      	cmp	r3, #1
 800814e:	d0f0      	beq.n	8008132 <USB_CoreReset+0x36>

  return HAL_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3714      	adds	r7, #20
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	00030d40 	.word	0x00030d40

08008164 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008164:	b084      	sub	sp, #16
 8008166:	b580      	push	{r7, lr}
 8008168:	b086      	sub	sp, #24
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008172:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008184:	461a      	mov	r2, r3
 8008186:	2300      	movs	r3, #0
 8008188:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d018      	beq.n	80081ec <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80081ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d10a      	bne.n	80081d6 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081ce:	f043 0304 	orr.w	r3, r3, #4
 80081d2:	6013      	str	r3, [r2, #0]
 80081d4:	e014      	b.n	8008200 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081e4:	f023 0304 	bic.w	r3, r3, #4
 80081e8:	6013      	str	r3, [r2, #0]
 80081ea:	e009      	b.n	8008200 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68fa      	ldr	r2, [r7, #12]
 80081f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081fa:	f023 0304 	bic.w	r3, r3, #4
 80081fe:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008200:	2110      	movs	r1, #16
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f7ff fe5e 	bl	8007ec4 <USB_FlushTxFifo>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d001      	beq.n	8008212 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f7ff fe8a 	bl	8007f2c <USB_FlushRxFifo>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d001      	beq.n	8008222 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008222:	2300      	movs	r3, #0
 8008224:	613b      	str	r3, [r7, #16]
 8008226:	e015      	b.n	8008254 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	015a      	lsls	r2, r3, #5
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	4413      	add	r3, r2
 8008230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008234:	461a      	mov	r2, r3
 8008236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800823a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	015a      	lsls	r2, r3, #5
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4413      	add	r3, r2
 8008244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008248:	461a      	mov	r2, r3
 800824a:	2300      	movs	r3, #0
 800824c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	3301      	adds	r3, #1
 8008252:	613b      	str	r3, [r7, #16]
 8008254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008256:	693a      	ldr	r2, [r7, #16]
 8008258:	429a      	cmp	r2, r3
 800825a:	d3e5      	bcc.n	8008228 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008268:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800826e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00b      	beq.n	800828e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800827c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4a13      	ldr	r2, [pc, #76]	; (80082d0 <USB_HostInit+0x16c>)
 8008282:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4a13      	ldr	r2, [pc, #76]	; (80082d4 <USB_HostInit+0x170>)
 8008288:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800828c:	e009      	b.n	80082a2 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2280      	movs	r2, #128	; 0x80
 8008292:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	4a10      	ldr	r2, [pc, #64]	; (80082d8 <USB_HostInit+0x174>)
 8008298:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a0f      	ldr	r2, [pc, #60]	; (80082dc <USB_HostInit+0x178>)
 800829e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80082a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d105      	bne.n	80082b4 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	f043 0210 	orr.w	r2, r3, #16
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	699a      	ldr	r2, [r3, #24]
 80082b8:	4b09      	ldr	r3, [pc, #36]	; (80082e0 <USB_HostInit+0x17c>)
 80082ba:	4313      	orrs	r3, r2
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80082c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3718      	adds	r7, #24
 80082c6:	46bd      	mov	sp, r7
 80082c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082cc:	b004      	add	sp, #16
 80082ce:	4770      	bx	lr
 80082d0:	01000200 	.word	0x01000200
 80082d4:	00e00300 	.word	0x00e00300
 80082d8:	00600080 	.word	0x00600080
 80082dc:	004000e0 	.word	0x004000e0
 80082e0:	a3200008 	.word	0xa3200008

080082e4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	460b      	mov	r3, r1
 80082ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008302:	f023 0303 	bic.w	r3, r3, #3
 8008306:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	78fb      	ldrb	r3, [r7, #3]
 8008312:	f003 0303 	and.w	r3, r3, #3
 8008316:	68f9      	ldr	r1, [r7, #12]
 8008318:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800831c:	4313      	orrs	r3, r2
 800831e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008320:	78fb      	ldrb	r3, [r7, #3]
 8008322:	2b01      	cmp	r3, #1
 8008324:	d107      	bne.n	8008336 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800832c:	461a      	mov	r2, r3
 800832e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008332:	6053      	str	r3, [r2, #4]
 8008334:	e009      	b.n	800834a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008336:	78fb      	ldrb	r3, [r7, #3]
 8008338:	2b02      	cmp	r3, #2
 800833a:	d106      	bne.n	800834a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008342:	461a      	mov	r2, r3
 8008344:	f241 7370 	movw	r3, #6000	; 0x1770
 8008348:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	3714      	adds	r7, #20
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008358:	b480      	push	{r7}
 800835a:	b085      	sub	sp, #20
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	460b      	mov	r3, r1
 8008362:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008368:	2300      	movs	r3, #0
 800836a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800837c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008384:	2b00      	cmp	r3, #0
 8008386:	d109      	bne.n	800839c <USB_DriveVbus+0x44>
 8008388:	78fb      	ldrb	r3, [r7, #3]
 800838a:	2b01      	cmp	r3, #1
 800838c:	d106      	bne.n	800839c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008396:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800839a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80083a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083a6:	d109      	bne.n	80083bc <USB_DriveVbus+0x64>
 80083a8:	78fb      	ldrb	r3, [r7, #3]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d106      	bne.n	80083bc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80083b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083ba:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3714      	adds	r7, #20
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr

080083ca <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80083ca:	b480      	push	{r7}
 80083cc:	b085      	sub	sp, #20
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80083d6:	2300      	movs	r3, #0
 80083d8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	0c5b      	lsrs	r3, r3, #17
 80083e8:	f003 0303 	and.w	r3, r3, #3
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3714      	adds	r7, #20
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	b29b      	uxth	r3, r3
}
 800840e:	4618      	mov	r0, r3
 8008410:	3714      	adds	r7, #20
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr
	...

0800841c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b088      	sub	sp, #32
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	4608      	mov	r0, r1
 8008426:	4611      	mov	r1, r2
 8008428:	461a      	mov	r2, r3
 800842a:	4603      	mov	r3, r0
 800842c:	70fb      	strb	r3, [r7, #3]
 800842e:	460b      	mov	r3, r1
 8008430:	70bb      	strb	r3, [r7, #2]
 8008432:	4613      	mov	r3, r2
 8008434:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800843e:	78fb      	ldrb	r3, [r7, #3]
 8008440:	015a      	lsls	r2, r3, #5
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	4413      	add	r3, r2
 8008446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800844a:	461a      	mov	r2, r3
 800844c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008450:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008452:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008456:	2b03      	cmp	r3, #3
 8008458:	d87e      	bhi.n	8008558 <USB_HC_Init+0x13c>
 800845a:	a201      	add	r2, pc, #4	; (adr r2, 8008460 <USB_HC_Init+0x44>)
 800845c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008460:	08008471 	.word	0x08008471
 8008464:	0800851b 	.word	0x0800851b
 8008468:	08008471 	.word	0x08008471
 800846c:	080084dd 	.word	0x080084dd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008470:	78fb      	ldrb	r3, [r7, #3]
 8008472:	015a      	lsls	r2, r3, #5
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	4413      	add	r3, r2
 8008478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800847c:	461a      	mov	r2, r3
 800847e:	f240 439d 	movw	r3, #1181	; 0x49d
 8008482:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008484:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008488:	2b00      	cmp	r3, #0
 800848a:	da10      	bge.n	80084ae <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800848c:	78fb      	ldrb	r3, [r7, #3]
 800848e:	015a      	lsls	r2, r3, #5
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	4413      	add	r3, r2
 8008494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	78fa      	ldrb	r2, [r7, #3]
 800849c:	0151      	lsls	r1, r2, #5
 800849e:	693a      	ldr	r2, [r7, #16]
 80084a0:	440a      	add	r2, r1
 80084a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084aa:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80084ac:	e057      	b.n	800855e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d051      	beq.n	800855e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80084ba:	78fb      	ldrb	r3, [r7, #3]
 80084bc:	015a      	lsls	r2, r3, #5
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	4413      	add	r3, r2
 80084c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	78fa      	ldrb	r2, [r7, #3]
 80084ca:	0151      	lsls	r1, r2, #5
 80084cc:	693a      	ldr	r2, [r7, #16]
 80084ce:	440a      	add	r2, r1
 80084d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80084d8:	60d3      	str	r3, [r2, #12]
      break;
 80084da:	e040      	b.n	800855e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80084dc:	78fb      	ldrb	r3, [r7, #3]
 80084de:	015a      	lsls	r2, r3, #5
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	4413      	add	r3, r2
 80084e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084e8:	461a      	mov	r2, r3
 80084ea:	f240 639d 	movw	r3, #1693	; 0x69d
 80084ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80084f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	da34      	bge.n	8008562 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80084f8:	78fb      	ldrb	r3, [r7, #3]
 80084fa:	015a      	lsls	r2, r3, #5
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	4413      	add	r3, r2
 8008500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	78fa      	ldrb	r2, [r7, #3]
 8008508:	0151      	lsls	r1, r2, #5
 800850a:	693a      	ldr	r2, [r7, #16]
 800850c:	440a      	add	r2, r1
 800850e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008516:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008518:	e023      	b.n	8008562 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800851a:	78fb      	ldrb	r3, [r7, #3]
 800851c:	015a      	lsls	r2, r3, #5
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	4413      	add	r3, r2
 8008522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008526:	461a      	mov	r2, r3
 8008528:	f240 2325 	movw	r3, #549	; 0x225
 800852c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800852e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008532:	2b00      	cmp	r3, #0
 8008534:	da17      	bge.n	8008566 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008536:	78fb      	ldrb	r3, [r7, #3]
 8008538:	015a      	lsls	r2, r3, #5
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	4413      	add	r3, r2
 800853e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	78fa      	ldrb	r2, [r7, #3]
 8008546:	0151      	lsls	r1, r2, #5
 8008548:	693a      	ldr	r2, [r7, #16]
 800854a:	440a      	add	r2, r1
 800854c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008550:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008554:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008556:	e006      	b.n	8008566 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	77fb      	strb	r3, [r7, #31]
      break;
 800855c:	e004      	b.n	8008568 <USB_HC_Init+0x14c>
      break;
 800855e:	bf00      	nop
 8008560:	e002      	b.n	8008568 <USB_HC_Init+0x14c>
      break;
 8008562:	bf00      	nop
 8008564:	e000      	b.n	8008568 <USB_HC_Init+0x14c>
      break;
 8008566:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008568:	78fb      	ldrb	r3, [r7, #3]
 800856a:	015a      	lsls	r2, r3, #5
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	4413      	add	r3, r2
 8008570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	78fa      	ldrb	r2, [r7, #3]
 8008578:	0151      	lsls	r1, r2, #5
 800857a:	693a      	ldr	r2, [r7, #16]
 800857c:	440a      	add	r2, r1
 800857e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008582:	f043 0302 	orr.w	r3, r3, #2
 8008586:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800858e:	699a      	ldr	r2, [r3, #24]
 8008590:	78fb      	ldrb	r3, [r7, #3]
 8008592:	f003 030f 	and.w	r3, r3, #15
 8008596:	2101      	movs	r1, #1
 8008598:	fa01 f303 	lsl.w	r3, r1, r3
 800859c:	6939      	ldr	r1, [r7, #16]
 800859e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80085a2:	4313      	orrs	r3, r2
 80085a4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	699b      	ldr	r3, [r3, #24]
 80085aa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80085b2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	da03      	bge.n	80085c2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80085ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085be:	61bb      	str	r3, [r7, #24]
 80085c0:	e001      	b.n	80085c6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80085c2:	2300      	movs	r3, #0
 80085c4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f7ff feff 	bl	80083ca <USB_GetHostSpeed>
 80085cc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80085ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d106      	bne.n	80085e4 <USB_HC_Init+0x1c8>
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2b02      	cmp	r3, #2
 80085da:	d003      	beq.n	80085e4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80085dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80085e0:	617b      	str	r3, [r7, #20]
 80085e2:	e001      	b.n	80085e8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80085e4:	2300      	movs	r3, #0
 80085e6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80085e8:	787b      	ldrb	r3, [r7, #1]
 80085ea:	059b      	lsls	r3, r3, #22
 80085ec:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80085f0:	78bb      	ldrb	r3, [r7, #2]
 80085f2:	02db      	lsls	r3, r3, #11
 80085f4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80085f8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80085fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80085fe:	049b      	lsls	r3, r3, #18
 8008600:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008604:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008606:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008608:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800860c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008612:	78fb      	ldrb	r3, [r7, #3]
 8008614:	0159      	lsls	r1, r3, #5
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	440b      	add	r3, r1
 800861a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800861e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008624:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008626:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800862a:	2b03      	cmp	r3, #3
 800862c:	d003      	beq.n	8008636 <USB_HC_Init+0x21a>
 800862e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008632:	2b01      	cmp	r3, #1
 8008634:	d10f      	bne.n	8008656 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008636:	78fb      	ldrb	r3, [r7, #3]
 8008638:	015a      	lsls	r2, r3, #5
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	4413      	add	r3, r2
 800863e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	78fa      	ldrb	r2, [r7, #3]
 8008646:	0151      	lsls	r1, r2, #5
 8008648:	693a      	ldr	r2, [r7, #16]
 800864a:	440a      	add	r2, r1
 800864c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008650:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008654:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008656:	7ffb      	ldrb	r3, [r7, #31]
}
 8008658:	4618      	mov	r0, r3
 800865a:	3720      	adds	r7, #32
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b08c      	sub	sp, #48	; 0x30
 8008664:	af02      	add	r7, sp, #8
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	60b9      	str	r1, [r7, #8]
 800866a:	4613      	mov	r3, r2
 800866c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	785b      	ldrb	r3, [r3, #1]
 8008676:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800867c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008686:	2b00      	cmp	r3, #0
 8008688:	d02d      	beq.n	80086e6 <USB_HC_StartXfer+0x86>
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	791b      	ldrb	r3, [r3, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d129      	bne.n	80086e6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008692:	79fb      	ldrb	r3, [r7, #7]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d117      	bne.n	80086c8 <USB_HC_StartXfer+0x68>
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	79db      	ldrb	r3, [r3, #7]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d003      	beq.n	80086a8 <USB_HC_StartXfer+0x48>
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	79db      	ldrb	r3, [r3, #7]
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	d10f      	bne.n	80086c8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	015a      	lsls	r2, r3, #5
 80086ac:	6a3b      	ldr	r3, [r7, #32]
 80086ae:	4413      	add	r3, r2
 80086b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	69fa      	ldr	r2, [r7, #28]
 80086b8:	0151      	lsls	r1, r2, #5
 80086ba:	6a3a      	ldr	r2, [r7, #32]
 80086bc:	440a      	add	r2, r1
 80086be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086c6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80086c8:	79fb      	ldrb	r3, [r7, #7]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d10b      	bne.n	80086e6 <USB_HC_StartXfer+0x86>
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	795b      	ldrb	r3, [r3, #5]
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d107      	bne.n	80086e6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	785b      	ldrb	r3, [r3, #1]
 80086da:	4619      	mov	r1, r3
 80086dc:	68f8      	ldr	r0, [r7, #12]
 80086de:	f000 fa0f 	bl	8008b00 <USB_DoPing>
      return HAL_OK;
 80086e2:	2300      	movs	r3, #0
 80086e4:	e0f8      	b.n	80088d8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	695b      	ldr	r3, [r3, #20]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d018      	beq.n	8008720 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	695b      	ldr	r3, [r3, #20]
 80086f2:	68ba      	ldr	r2, [r7, #8]
 80086f4:	8912      	ldrh	r2, [r2, #8]
 80086f6:	4413      	add	r3, r2
 80086f8:	3b01      	subs	r3, #1
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	8912      	ldrh	r2, [r2, #8]
 80086fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8008702:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008704:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008706:	8b7b      	ldrh	r3, [r7, #26]
 8008708:	429a      	cmp	r2, r3
 800870a:	d90b      	bls.n	8008724 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800870c:	8b7b      	ldrh	r3, [r7, #26]
 800870e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008710:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008712:	68ba      	ldr	r2, [r7, #8]
 8008714:	8912      	ldrh	r2, [r2, #8]
 8008716:	fb03 f202 	mul.w	r2, r3, r2
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	611a      	str	r2, [r3, #16]
 800871e:	e001      	b.n	8008724 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008720:	2301      	movs	r3, #1
 8008722:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	78db      	ldrb	r3, [r3, #3]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d007      	beq.n	800873c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800872c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800872e:	68ba      	ldr	r2, [r7, #8]
 8008730:	8912      	ldrh	r2, [r2, #8]
 8008732:	fb03 f202 	mul.w	r2, r3, r2
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	611a      	str	r2, [r3, #16]
 800873a:	e003      	b.n	8008744 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	695a      	ldr	r2, [r3, #20]
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800874c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800874e:	04d9      	lsls	r1, r3, #19
 8008750:	4b63      	ldr	r3, [pc, #396]	; (80088e0 <USB_HC_StartXfer+0x280>)
 8008752:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008754:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	7a9b      	ldrb	r3, [r3, #10]
 800875a:	075b      	lsls	r3, r3, #29
 800875c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008760:	69f9      	ldr	r1, [r7, #28]
 8008762:	0148      	lsls	r0, r1, #5
 8008764:	6a39      	ldr	r1, [r7, #32]
 8008766:	4401      	add	r1, r0
 8008768:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800876c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800876e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008770:	79fb      	ldrb	r3, [r7, #7]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d009      	beq.n	800878a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	68d9      	ldr	r1, [r3, #12]
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	015a      	lsls	r2, r3, #5
 800877e:	6a3b      	ldr	r3, [r7, #32]
 8008780:	4413      	add	r3, r2
 8008782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008786:	460a      	mov	r2, r1
 8008788:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800878a:	6a3b      	ldr	r3, [r7, #32]
 800878c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	f003 0301 	and.w	r3, r3, #1
 8008796:	2b00      	cmp	r3, #0
 8008798:	bf0c      	ite	eq
 800879a:	2301      	moveq	r3, #1
 800879c:	2300      	movne	r3, #0
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	015a      	lsls	r2, r3, #5
 80087a6:	6a3b      	ldr	r3, [r7, #32]
 80087a8:	4413      	add	r3, r2
 80087aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	69fa      	ldr	r2, [r7, #28]
 80087b2:	0151      	lsls	r1, r2, #5
 80087b4:	6a3a      	ldr	r2, [r7, #32]
 80087b6:	440a      	add	r2, r1
 80087b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087bc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80087c0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	015a      	lsls	r2, r3, #5
 80087c6:	6a3b      	ldr	r3, [r7, #32]
 80087c8:	4413      	add	r3, r2
 80087ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	7e7b      	ldrb	r3, [r7, #25]
 80087d2:	075b      	lsls	r3, r3, #29
 80087d4:	69f9      	ldr	r1, [r7, #28]
 80087d6:	0148      	lsls	r0, r1, #5
 80087d8:	6a39      	ldr	r1, [r7, #32]
 80087da:	4401      	add	r1, r0
 80087dc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80087e0:	4313      	orrs	r3, r2
 80087e2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	015a      	lsls	r2, r3, #5
 80087e8:	6a3b      	ldr	r3, [r7, #32]
 80087ea:	4413      	add	r3, r2
 80087ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80087fa:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	78db      	ldrb	r3, [r3, #3]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d004      	beq.n	800880e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800880a:	613b      	str	r3, [r7, #16]
 800880c:	e003      	b.n	8008816 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008814:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800881c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	015a      	lsls	r2, r3, #5
 8008822:	6a3b      	ldr	r3, [r7, #32]
 8008824:	4413      	add	r3, r2
 8008826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800882a:	461a      	mov	r2, r3
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008830:	79fb      	ldrb	r3, [r7, #7]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d001      	beq.n	800883a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008836:	2300      	movs	r3, #0
 8008838:	e04e      	b.n	80088d8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	78db      	ldrb	r3, [r3, #3]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d149      	bne.n	80088d6 <USB_HC_StartXfer+0x276>
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	695b      	ldr	r3, [r3, #20]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d045      	beq.n	80088d6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	79db      	ldrb	r3, [r3, #7]
 800884e:	2b03      	cmp	r3, #3
 8008850:	d830      	bhi.n	80088b4 <USB_HC_StartXfer+0x254>
 8008852:	a201      	add	r2, pc, #4	; (adr r2, 8008858 <USB_HC_StartXfer+0x1f8>)
 8008854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008858:	08008869 	.word	0x08008869
 800885c:	0800888d 	.word	0x0800888d
 8008860:	08008869 	.word	0x08008869
 8008864:	0800888d 	.word	0x0800888d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	695b      	ldr	r3, [r3, #20]
 800886c:	3303      	adds	r3, #3
 800886e:	089b      	lsrs	r3, r3, #2
 8008870:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008872:	8afa      	ldrh	r2, [r7, #22]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008878:	b29b      	uxth	r3, r3
 800887a:	429a      	cmp	r2, r3
 800887c:	d91c      	bls.n	80088b8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	699b      	ldr	r3, [r3, #24]
 8008882:	f043 0220 	orr.w	r2, r3, #32
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	619a      	str	r2, [r3, #24]
        }
        break;
 800888a:	e015      	b.n	80088b8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	695b      	ldr	r3, [r3, #20]
 8008890:	3303      	adds	r3, #3
 8008892:	089b      	lsrs	r3, r3, #2
 8008894:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008896:	8afa      	ldrh	r2, [r7, #22]
 8008898:	6a3b      	ldr	r3, [r7, #32]
 800889a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800889e:	691b      	ldr	r3, [r3, #16]
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d90a      	bls.n	80088bc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	619a      	str	r2, [r3, #24]
        }
        break;
 80088b2:	e003      	b.n	80088bc <USB_HC_StartXfer+0x25c>

      default:
        break;
 80088b4:	bf00      	nop
 80088b6:	e002      	b.n	80088be <USB_HC_StartXfer+0x25e>
        break;
 80088b8:	bf00      	nop
 80088ba:	e000      	b.n	80088be <USB_HC_StartXfer+0x25e>
        break;
 80088bc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	68d9      	ldr	r1, [r3, #12]
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	785a      	ldrb	r2, [r3, #1]
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	2000      	movs	r0, #0
 80088ce:	9000      	str	r0, [sp, #0]
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f7ff fb5b 	bl	8007f8c <USB_WritePacket>
  }

  return HAL_OK;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3728      	adds	r7, #40	; 0x28
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	1ff80000 	.word	0x1ff80000

080088e4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b085      	sub	sp, #20
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088f6:	695b      	ldr	r3, [r3, #20]
 80088f8:	b29b      	uxth	r3, r3
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3714      	adds	r7, #20
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr

08008906 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008906:	b480      	push	{r7}
 8008908:	b089      	sub	sp, #36	; 0x24
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
 800890e:	460b      	mov	r3, r1
 8008910:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008916:	78fb      	ldrb	r3, [r7, #3]
 8008918:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800891a:	2300      	movs	r3, #0
 800891c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	015a      	lsls	r2, r3, #5
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	4413      	add	r3, r2
 8008926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	0c9b      	lsrs	r3, r3, #18
 800892e:	f003 0303 	and.w	r3, r3, #3
 8008932:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008934:	69bb      	ldr	r3, [r7, #24]
 8008936:	015a      	lsls	r2, r3, #5
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	4413      	add	r3, r2
 800893c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	0fdb      	lsrs	r3, r3, #31
 8008944:	f003 0301 	and.w	r3, r3, #1
 8008948:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	f003 0320 	and.w	r3, r3, #32
 8008952:	2b20      	cmp	r3, #32
 8008954:	d104      	bne.n	8008960 <USB_HC_Halt+0x5a>
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d101      	bne.n	8008960 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800895c:	2300      	movs	r3, #0
 800895e:	e0c8      	b.n	8008af2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d002      	beq.n	800896c <USB_HC_Halt+0x66>
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	2b02      	cmp	r3, #2
 800896a:	d163      	bne.n	8008a34 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	015a      	lsls	r2, r3, #5
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	4413      	add	r3, r2
 8008974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	69ba      	ldr	r2, [r7, #24]
 800897c:	0151      	lsls	r1, r2, #5
 800897e:	69fa      	ldr	r2, [r7, #28]
 8008980:	440a      	add	r2, r1
 8008982:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008986:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800898a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	f003 0320 	and.w	r3, r3, #32
 8008994:	2b00      	cmp	r3, #0
 8008996:	f040 80ab 	bne.w	8008af0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d133      	bne.n	8008a0e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	015a      	lsls	r2, r3, #5
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	4413      	add	r3, r2
 80089ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	69ba      	ldr	r2, [r7, #24]
 80089b6:	0151      	lsls	r1, r2, #5
 80089b8:	69fa      	ldr	r2, [r7, #28]
 80089ba:	440a      	add	r2, r1
 80089bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089c4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	015a      	lsls	r2, r3, #5
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	4413      	add	r3, r2
 80089ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	69ba      	ldr	r2, [r7, #24]
 80089d6:	0151      	lsls	r1, r2, #5
 80089d8:	69fa      	ldr	r2, [r7, #28]
 80089da:	440a      	add	r2, r1
 80089dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	3301      	adds	r3, #1
 80089ea:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089f2:	d81d      	bhi.n	8008a30 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80089f4:	69bb      	ldr	r3, [r7, #24]
 80089f6:	015a      	lsls	r2, r3, #5
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	4413      	add	r3, r2
 80089fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a0a:	d0ec      	beq.n	80089e6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008a0c:	e070      	b.n	8008af0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	015a      	lsls	r2, r3, #5
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	4413      	add	r3, r2
 8008a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	69ba      	ldr	r2, [r7, #24]
 8008a1e:	0151      	lsls	r1, r2, #5
 8008a20:	69fa      	ldr	r2, [r7, #28]
 8008a22:	440a      	add	r2, r1
 8008a24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a2c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008a2e:	e05f      	b.n	8008af0 <USB_HC_Halt+0x1ea>
            break;
 8008a30:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008a32:	e05d      	b.n	8008af0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008a34:	69bb      	ldr	r3, [r7, #24]
 8008a36:	015a      	lsls	r2, r3, #5
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	69ba      	ldr	r2, [r7, #24]
 8008a44:	0151      	lsls	r1, r2, #5
 8008a46:	69fa      	ldr	r2, [r7, #28]
 8008a48:	440a      	add	r2, r1
 8008a4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a52:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d133      	bne.n	8008acc <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008a64:	69bb      	ldr	r3, [r7, #24]
 8008a66:	015a      	lsls	r2, r3, #5
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	69ba      	ldr	r2, [r7, #24]
 8008a74:	0151      	lsls	r1, r2, #5
 8008a76:	69fa      	ldr	r2, [r7, #28]
 8008a78:	440a      	add	r2, r1
 8008a7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a82:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	015a      	lsls	r2, r3, #5
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	69ba      	ldr	r2, [r7, #24]
 8008a94:	0151      	lsls	r1, r2, #5
 8008a96:	69fa      	ldr	r2, [r7, #28]
 8008a98:	440a      	add	r2, r1
 8008a9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008aa2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ab0:	d81d      	bhi.n	8008aee <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	015a      	lsls	r2, r3, #5
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	4413      	add	r3, r2
 8008aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ac4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ac8:	d0ec      	beq.n	8008aa4 <USB_HC_Halt+0x19e>
 8008aca:	e011      	b.n	8008af0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	015a      	lsls	r2, r3, #5
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	69ba      	ldr	r2, [r7, #24]
 8008adc:	0151      	lsls	r1, r2, #5
 8008ade:	69fa      	ldr	r2, [r7, #28]
 8008ae0:	440a      	add	r2, r1
 8008ae2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008aea:	6013      	str	r3, [r2, #0]
 8008aec:	e000      	b.n	8008af0 <USB_HC_Halt+0x1ea>
          break;
 8008aee:	bf00      	nop
    }
  }

  return HAL_OK;
 8008af0:	2300      	movs	r3, #0
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3724      	adds	r7, #36	; 0x24
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr
	...

08008b00 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b087      	sub	sp, #28
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	460b      	mov	r3, r1
 8008b0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008b10:	78fb      	ldrb	r3, [r7, #3]
 8008b12:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008b14:	2301      	movs	r3, #1
 8008b16:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	04da      	lsls	r2, r3, #19
 8008b1c:	4b15      	ldr	r3, [pc, #84]	; (8008b74 <USB_DoPing+0x74>)
 8008b1e:	4013      	ands	r3, r2
 8008b20:	693a      	ldr	r2, [r7, #16]
 8008b22:	0151      	lsls	r1, r2, #5
 8008b24:	697a      	ldr	r2, [r7, #20]
 8008b26:	440a      	add	r2, r1
 8008b28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b30:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	015a      	lsls	r2, r3, #5
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	4413      	add	r3, r2
 8008b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b48:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b50:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	015a      	lsls	r2, r3, #5
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	4413      	add	r3, r2
 8008b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b5e:	461a      	mov	r2, r3
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	371c      	adds	r7, #28
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	1ff80000 	.word	0x1ff80000

08008b78 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b088      	sub	sp, #32
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008b80:	2300      	movs	r3, #0
 8008b82:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f7ff f93b 	bl	8007e08 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008b92:	2110      	movs	r1, #16
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f7ff f995 	bl	8007ec4 <USB_FlushTxFifo>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d001      	beq.n	8008ba4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f7ff f9c1 	bl	8007f2c <USB_FlushRxFifo>
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d001      	beq.n	8008bb4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	61bb      	str	r3, [r7, #24]
 8008bb8:	e01f      	b.n	8008bfa <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	015a      	lsls	r2, r3, #5
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bd0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008bd8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008be0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	015a      	lsls	r2, r3, #5
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	4413      	add	r3, r2
 8008bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bee:	461a      	mov	r2, r3
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008bf4:	69bb      	ldr	r3, [r7, #24]
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	61bb      	str	r3, [r7, #24]
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	2b0f      	cmp	r3, #15
 8008bfe:	d9dc      	bls.n	8008bba <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008c00:	2300      	movs	r3, #0
 8008c02:	61bb      	str	r3, [r7, #24]
 8008c04:	e034      	b.n	8008c70 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	015a      	lsls	r2, r3, #5
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c1c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c24:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c2c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008c2e:	69bb      	ldr	r3, [r7, #24]
 8008c30:	015a      	lsls	r2, r3, #5
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	4413      	add	r3, r2
 8008c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	3301      	adds	r3, #1
 8008c44:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c4c:	d80c      	bhi.n	8008c68 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	015a      	lsls	r2, r3, #5
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	4413      	add	r3, r2
 8008c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c64:	d0ec      	beq.n	8008c40 <USB_StopHost+0xc8>
 8008c66:	e000      	b.n	8008c6a <USB_StopHost+0xf2>
        break;
 8008c68:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	61bb      	str	r3, [r7, #24]
 8008c70:	69bb      	ldr	r3, [r7, #24]
 8008c72:	2b0f      	cmp	r3, #15
 8008c74:	d9c7      	bls.n	8008c06 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c82:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c8a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f7ff f8aa 	bl	8007de6 <USB_EnableGlobalInt>

  return ret;
 8008c92:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3720      	adds	r7, #32
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8008ca0:	4904      	ldr	r1, [pc, #16]	; (8008cb4 <MX_FATFS_Init+0x18>)
 8008ca2:	4805      	ldr	r0, [pc, #20]	; (8008cb8 <MX_FATFS_Init+0x1c>)
 8008ca4:	f002 f9ce 	bl	800b044 <FATFS_LinkDriver>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	461a      	mov	r2, r3
 8008cac:	4b03      	ldr	r3, [pc, #12]	; (8008cbc <MX_FATFS_Init+0x20>)
 8008cae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008cb0:	bf00      	nop
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	20003250 	.word	0x20003250
 8008cb8:	0800b95c 	.word	0x0800b95c
 8008cbc:	2000324c 	.word	0x2000324c

08008cc0 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	4603      	mov	r3, r0
 8008ce0:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8008ce6:	79fb      	ldrb	r3, [r7, #7]
 8008ce8:	4619      	mov	r1, r3
 8008cea:	4808      	ldr	r0, [pc, #32]	; (8008d0c <USBH_status+0x34>)
 8008cec:	f000 fe32 	bl	8009954 <USBH_MSC_UnitIsReady>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d002      	beq.n	8008cfc <USBH_status+0x24>
  {
    res = RES_OK;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	73fb      	strb	r3, [r7, #15]
 8008cfa:	e001      	b.n	8008d00 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3710      	adds	r7, #16
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	20003260 	.word	0x20003260

08008d10 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b094      	sub	sp, #80	; 0x50
 8008d14:	af02      	add	r7, sp, #8
 8008d16:	60b9      	str	r1, [r7, #8]
 8008d18:	607a      	str	r2, [r7, #4]
 8008d1a:	603b      	str	r3, [r7, #0]
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8008d26:	7bf9      	ldrb	r1, [r7, #15]
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	4813      	ldr	r0, [pc, #76]	; (8008d80 <USBH_read+0x70>)
 8008d32:	f000 fe59 	bl	80099e8 <USBH_MSC_Read>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d103      	bne.n	8008d44 <USBH_read+0x34>
  {
    res = RES_OK;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008d42:	e017      	b.n	8008d74 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008d44:	f107 0210 	add.w	r2, r7, #16
 8008d48:	7bfb      	ldrb	r3, [r7, #15]
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	480c      	ldr	r0, [pc, #48]	; (8008d80 <USBH_read+0x70>)
 8008d4e:	f000 fe27 	bl	80099a0 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008d52:	7f7b      	ldrb	r3, [r7, #29]
 8008d54:	2b3a      	cmp	r3, #58	; 0x3a
 8008d56:	d005      	beq.n	8008d64 <USBH_read+0x54>
 8008d58:	2b3a      	cmp	r3, #58	; 0x3a
 8008d5a:	dc07      	bgt.n	8008d6c <USBH_read+0x5c>
 8008d5c:	2b04      	cmp	r3, #4
 8008d5e:	d001      	beq.n	8008d64 <USBH_read+0x54>
 8008d60:	2b28      	cmp	r3, #40	; 0x28
 8008d62:	d103      	bne.n	8008d6c <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008d64:	2303      	movs	r3, #3
 8008d66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008d6a:	e003      	b.n	8008d74 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008d72:	bf00      	nop
    }
  }

  return res;
 8008d74:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3748      	adds	r7, #72	; 0x48
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	20003260 	.word	0x20003260

08008d84 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b094      	sub	sp, #80	; 0x50
 8008d88:	af02      	add	r7, sp, #8
 8008d8a:	60b9      	str	r1, [r7, #8]
 8008d8c:	607a      	str	r2, [r7, #4]
 8008d8e:	603b      	str	r3, [r7, #0]
 8008d90:	4603      	mov	r3, r0
 8008d92:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8008d9a:	7bf9      	ldrb	r1, [r7, #15]
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	9300      	str	r3, [sp, #0]
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	4817      	ldr	r0, [pc, #92]	; (8008e04 <USBH_write+0x80>)
 8008da6:	f000 fe88 	bl	8009aba <USBH_MSC_Write>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d103      	bne.n	8008db8 <USBH_write+0x34>
  {
    res = RES_OK;
 8008db0:	2300      	movs	r3, #0
 8008db2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008db6:	e01f      	b.n	8008df8 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008db8:	f107 0210 	add.w	r2, r7, #16
 8008dbc:	7bfb      	ldrb	r3, [r7, #15]
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	4810      	ldr	r0, [pc, #64]	; (8008e04 <USBH_write+0x80>)
 8008dc2:	f000 fded 	bl	80099a0 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008dc6:	7f7b      	ldrb	r3, [r7, #29]
 8008dc8:	2b3a      	cmp	r3, #58	; 0x3a
 8008dca:	d00d      	beq.n	8008de8 <USBH_write+0x64>
 8008dcc:	2b3a      	cmp	r3, #58	; 0x3a
 8008dce:	dc0f      	bgt.n	8008df0 <USBH_write+0x6c>
 8008dd0:	2b28      	cmp	r3, #40	; 0x28
 8008dd2:	d009      	beq.n	8008de8 <USBH_write+0x64>
 8008dd4:	2b28      	cmp	r3, #40	; 0x28
 8008dd6:	dc0b      	bgt.n	8008df0 <USBH_write+0x6c>
 8008dd8:	2b04      	cmp	r3, #4
 8008dda:	d005      	beq.n	8008de8 <USBH_write+0x64>
 8008ddc:	2b27      	cmp	r3, #39	; 0x27
 8008dde:	d107      	bne.n	8008df0 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8008de0:	2302      	movs	r3, #2
 8008de2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008de6:	e007      	b.n	8008df8 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008de8:	2303      	movs	r3, #3
 8008dea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008dee:	e003      	b.n	8008df8 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8008df0:	2301      	movs	r3, #1
 8008df2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008df6:	bf00      	nop
    }
  }

  return res;
 8008df8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3748      	adds	r7, #72	; 0x48
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}
 8008e04:	20003260 	.word	0x20003260

08008e08 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b090      	sub	sp, #64	; 0x40
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	4603      	mov	r3, r0
 8008e10:	603a      	str	r2, [r7, #0]
 8008e12:	71fb      	strb	r3, [r7, #7]
 8008e14:	460b      	mov	r3, r1
 8008e16:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8008e1e:	79bb      	ldrb	r3, [r7, #6]
 8008e20:	2b03      	cmp	r3, #3
 8008e22:	d852      	bhi.n	8008eca <USBH_ioctl+0xc2>
 8008e24:	a201      	add	r2, pc, #4	; (adr r2, 8008e2c <USBH_ioctl+0x24>)
 8008e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e2a:	bf00      	nop
 8008e2c:	08008e3d 	.word	0x08008e3d
 8008e30:	08008e45 	.word	0x08008e45
 8008e34:	08008e6f 	.word	0x08008e6f
 8008e38:	08008e9b 	.word	0x08008e9b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008e42:	e045      	b.n	8008ed0 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008e44:	f107 0208 	add.w	r2, r7, #8
 8008e48:	79fb      	ldrb	r3, [r7, #7]
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	4823      	ldr	r0, [pc, #140]	; (8008edc <USBH_ioctl+0xd4>)
 8008e4e:	f000 fda7 	bl	80099a0 <USBH_MSC_GetLUNInfo>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d106      	bne.n	8008e66 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008e64:	e034      	b.n	8008ed0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008e6c:	e030      	b.n	8008ed0 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008e6e:	f107 0208 	add.w	r2, r7, #8
 8008e72:	79fb      	ldrb	r3, [r7, #7]
 8008e74:	4619      	mov	r1, r3
 8008e76:	4819      	ldr	r0, [pc, #100]	; (8008edc <USBH_ioctl+0xd4>)
 8008e78:	f000 fd92 	bl	80099a0 <USBH_MSC_GetLUNInfo>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d107      	bne.n	8008e92 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8008e82:	8a3b      	ldrh	r3, [r7, #16]
 8008e84:	461a      	mov	r2, r3
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008e90:	e01e      	b.n	8008ed0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008e98:	e01a      	b.n	8008ed0 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008e9a:	f107 0208 	add.w	r2, r7, #8
 8008e9e:	79fb      	ldrb	r3, [r7, #7]
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	480e      	ldr	r0, [pc, #56]	; (8008edc <USBH_ioctl+0xd4>)
 8008ea4:	f000 fd7c 	bl	80099a0 <USBH_MSC_GetLUNInfo>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d109      	bne.n	8008ec2 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8008eae:	8a3b      	ldrh	r3, [r7, #16]
 8008eb0:	0a5b      	lsrs	r3, r3, #9
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008ec0:	e006      	b.n	8008ed0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008ec8:	e002      	b.n	8008ed0 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8008eca:	2304      	movs	r3, #4
 8008ecc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8008ed0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3740      	adds	r7, #64	; 0x40
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	20003260 	.word	0x20003260

08008ee0 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008ee0:	b590      	push	{r4, r7, lr}
 8008ee2:	b089      	sub	sp, #36	; 0x24
 8008ee4:	af04      	add	r7, sp, #16
 8008ee6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008eee:	7919      	ldrb	r1, [r3, #4]
 8008ef0:	2350      	movs	r3, #80	; 0x50
 8008ef2:	2206      	movs	r2, #6
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f001 fc6b 	bl	800a7d0 <USBH_FindInterface>
 8008efa:	4603      	mov	r3, r0
 8008efc:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8008efe:	7bfb      	ldrb	r3, [r7, #15]
 8008f00:	2bff      	cmp	r3, #255	; 0xff
 8008f02:	d002      	beq.n	8008f0a <USBH_MSC_InterfaceInit+0x2a>
 8008f04:	7bfb      	ldrb	r3, [r7, #15]
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d901      	bls.n	8008f0e <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008f0a:	2302      	movs	r3, #2
 8008f0c:	e106      	b.n	800911c <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8008f0e:	7bfb      	ldrb	r3, [r7, #15]
 8008f10:	4619      	mov	r1, r3
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f001 fc40 	bl	800a798 <USBH_SelectInterface>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008f1c:	7bbb      	ldrb	r3, [r7, #14]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d001      	beq.n	8008f26 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8008f22:	2302      	movs	r3, #2
 8008f24:	e0fa      	b.n	800911c <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008f2c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008f30:	f002 fba2 	bl	800b678 <malloc>
 8008f34:	4603      	mov	r3, r0
 8008f36:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f3e:	69db      	ldr	r3, [r3, #28]
 8008f40:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d101      	bne.n	8008f4c <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8008f48:	2302      	movs	r3, #2
 8008f4a:	e0e7      	b.n	800911c <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008f4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f50:	2100      	movs	r1, #0
 8008f52:	68b8      	ldr	r0, [r7, #8]
 8008f54:	f002 fbae 	bl	800b6b4 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008f58:	7bfb      	ldrb	r3, [r7, #15]
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	211a      	movs	r1, #26
 8008f5e:	fb01 f303 	mul.w	r3, r1, r3
 8008f62:	4413      	add	r3, r2
 8008f64:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	b25b      	sxtb	r3, r3
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	da16      	bge.n	8008f9e <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008f70:	7bfb      	ldrb	r3, [r7, #15]
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	211a      	movs	r1, #26
 8008f76:	fb01 f303 	mul.w	r3, r1, r3
 8008f7a:	4413      	add	r3, r2
 8008f7c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008f80:	781a      	ldrb	r2, [r3, #0]
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008f86:	7bfb      	ldrb	r3, [r7, #15]
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	211a      	movs	r1, #26
 8008f8c:	fb01 f303 	mul.w	r3, r1, r3
 8008f90:	4413      	add	r3, r2
 8008f92:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008f96:	881a      	ldrh	r2, [r3, #0]
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	815a      	strh	r2, [r3, #10]
 8008f9c:	e015      	b.n	8008fca <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008f9e:	7bfb      	ldrb	r3, [r7, #15]
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	211a      	movs	r1, #26
 8008fa4:	fb01 f303 	mul.w	r3, r1, r3
 8008fa8:	4413      	add	r3, r2
 8008faa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008fae:	781a      	ldrb	r2, [r3, #0]
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008fb4:	7bfb      	ldrb	r3, [r7, #15]
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	211a      	movs	r1, #26
 8008fba:	fb01 f303 	mul.w	r3, r1, r3
 8008fbe:	4413      	add	r3, r2
 8008fc0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008fc4:	881a      	ldrh	r2, [r3, #0]
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008fca:	7bfb      	ldrb	r3, [r7, #15]
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	211a      	movs	r1, #26
 8008fd0:	fb01 f303 	mul.w	r3, r1, r3
 8008fd4:	4413      	add	r3, r2
 8008fd6:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	b25b      	sxtb	r3, r3
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	da16      	bge.n	8009010 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008fe2:	7bfb      	ldrb	r3, [r7, #15]
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	211a      	movs	r1, #26
 8008fe8:	fb01 f303 	mul.w	r3, r1, r3
 8008fec:	4413      	add	r3, r2
 8008fee:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008ff2:	781a      	ldrb	r2, [r3, #0]
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008ff8:	7bfb      	ldrb	r3, [r7, #15]
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	211a      	movs	r1, #26
 8008ffe:	fb01 f303 	mul.w	r3, r1, r3
 8009002:	4413      	add	r3, r2
 8009004:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009008:	881a      	ldrh	r2, [r3, #0]
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	815a      	strh	r2, [r3, #10]
 800900e:	e015      	b.n	800903c <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009010:	7bfb      	ldrb	r3, [r7, #15]
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	211a      	movs	r1, #26
 8009016:	fb01 f303 	mul.w	r3, r1, r3
 800901a:	4413      	add	r3, r2
 800901c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009020:	781a      	ldrb	r2, [r3, #0]
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009026:	7bfb      	ldrb	r3, [r7, #15]
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	211a      	movs	r1, #26
 800902c:	fb01 f303 	mul.w	r3, r1, r3
 8009030:	4413      	add	r3, r2
 8009032:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009036:	881a      	ldrh	r2, [r3, #0]
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	2200      	movs	r2, #0
 8009040:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	2200      	movs	r2, #0
 8009046:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	2200      	movs	r2, #0
 800904c:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	799b      	ldrb	r3, [r3, #6]
 8009052:	4619      	mov	r1, r3
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f001 ff46 	bl	800aee6 <USBH_AllocPipe>
 800905a:	4603      	mov	r3, r0
 800905c:	461a      	mov	r2, r3
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	79db      	ldrb	r3, [r3, #7]
 8009066:	4619      	mov	r1, r3
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f001 ff3c 	bl	800aee6 <USBH_AllocPipe>
 800906e:	4603      	mov	r3, r0
 8009070:	461a      	mov	r2, r3
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 fdc4 	bl	8009c04 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	799b      	ldrb	r3, [r3, #6]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d01e      	beq.n	80090c2 <USBH_MSC_InterfaceInit+0x1e2>
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	891b      	ldrh	r3, [r3, #8]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d01a      	beq.n	80090c2 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	7959      	ldrb	r1, [r3, #5]
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	7998      	ldrb	r0, [r3, #6]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80090a0:	68ba      	ldr	r2, [r7, #8]
 80090a2:	8912      	ldrh	r2, [r2, #8]
 80090a4:	9202      	str	r2, [sp, #8]
 80090a6:	2202      	movs	r2, #2
 80090a8:	9201      	str	r2, [sp, #4]
 80090aa:	9300      	str	r3, [sp, #0]
 80090ac:	4623      	mov	r3, r4
 80090ae:	4602      	mov	r2, r0
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f001 fee9 	bl	800ae88 <USBH_OpenPipe>
 80090b6:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	79db      	ldrb	r3, [r3, #7]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d02c      	beq.n	800911a <USBH_MSC_InterfaceInit+0x23a>
 80090c0:	e001      	b.n	80090c6 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 80090c2:	2303      	movs	r3, #3
 80090c4:	e02a      	b.n	800911c <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	895b      	ldrh	r3, [r3, #10]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d025      	beq.n	800911a <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	7919      	ldrb	r1, [r3, #4]
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	79d8      	ldrb	r0, [r3, #7]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80090e2:	68ba      	ldr	r2, [r7, #8]
 80090e4:	8952      	ldrh	r2, [r2, #10]
 80090e6:	9202      	str	r2, [sp, #8]
 80090e8:	2202      	movs	r2, #2
 80090ea:	9201      	str	r2, [sp, #4]
 80090ec:	9300      	str	r3, [sp, #0]
 80090ee:	4623      	mov	r3, r4
 80090f0:	4602      	mov	r2, r0
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f001 fec8 	bl	800ae88 <USBH_OpenPipe>
 80090f8:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	791b      	ldrb	r3, [r3, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	4619      	mov	r1, r3
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f002 f9e6 	bl	800b4d4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	795b      	ldrb	r3, [r3, #5]
 800910c:	2200      	movs	r2, #0
 800910e:	4619      	mov	r1, r3
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f002 f9df 	bl	800b4d4 <USBH_LL_SetToggle>

  return USBH_OK;
 8009116:	2300      	movs	r3, #0
 8009118:	e000      	b.n	800911c <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800911a:	2303      	movs	r3, #3
}
 800911c:	4618      	mov	r0, r3
 800911e:	3714      	adds	r7, #20
 8009120:	46bd      	mov	sp, r7
 8009122:	bd90      	pop	{r4, r7, pc}

08009124 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009132:	69db      	ldr	r3, [r3, #28]
 8009134:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	795b      	ldrb	r3, [r3, #5]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00e      	beq.n	800915c <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	795b      	ldrb	r3, [r3, #5]
 8009142:	4619      	mov	r1, r3
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f001 febe 	bl	800aec6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	795b      	ldrb	r3, [r3, #5]
 800914e:	4619      	mov	r1, r3
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f001 fee9 	bl	800af28 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2200      	movs	r2, #0
 800915a:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	791b      	ldrb	r3, [r3, #4]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00e      	beq.n	8009182 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	791b      	ldrb	r3, [r3, #4]
 8009168:	4619      	mov	r1, r3
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f001 feab 	bl	800aec6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	791b      	ldrb	r3, [r3, #4]
 8009174:	4619      	mov	r1, r3
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f001 fed6 	bl	800af28 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2200      	movs	r2, #0
 8009180:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009188:	69db      	ldr	r3, [r3, #28]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00b      	beq.n	80091a6 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009194:	69db      	ldr	r3, [r3, #28]
 8009196:	4618      	mov	r0, r3
 8009198:	f002 fa76 	bl	800b688 <free>
    phost->pActiveClass->pData = 0U;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091a2:	2200      	movs	r2, #0
 80091a4:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80091a6:	2300      	movs	r3, #0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3710      	adds	r7, #16
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091be:	69db      	ldr	r3, [r3, #28]
 80091c0:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80091c2:	2301      	movs	r3, #1
 80091c4:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	7b9b      	ldrb	r3, [r3, #14]
 80091ca:	2b03      	cmp	r3, #3
 80091cc:	d041      	beq.n	8009252 <USBH_MSC_ClassRequest+0xa2>
 80091ce:	2b03      	cmp	r3, #3
 80091d0:	dc4b      	bgt.n	800926a <USBH_MSC_ClassRequest+0xba>
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d001      	beq.n	80091da <USBH_MSC_ClassRequest+0x2a>
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	d147      	bne.n	800926a <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	4619      	mov	r1, r3
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 fcf1 	bl	8009bc6 <USBH_MSC_BOT_REQ_GetMaxLUN>
 80091e4:	4603      	mov	r3, r0
 80091e6:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 80091e8:	7bfb      	ldrb	r3, [r7, #15]
 80091ea:	2b03      	cmp	r3, #3
 80091ec:	d104      	bne.n	80091f8 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	2200      	movs	r2, #0
 80091f2:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 80091f4:	2300      	movs	r3, #0
 80091f6:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 80091f8:	7bfb      	ldrb	r3, [r7, #15]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d137      	bne.n	800926e <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	2b02      	cmp	r3, #2
 8009204:	d804      	bhi.n	8009210 <USBH_MSC_ClassRequest+0x60>
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	3301      	adds	r3, #1
 800920c:	b2da      	uxtb	r2, r3
 800920e:	e000      	b.n	8009212 <USBH_MSC_ClassRequest+0x62>
 8009210:	2202      	movs	r2, #2
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009216:	2300      	movs	r3, #0
 8009218:	73bb      	strb	r3, [r7, #14]
 800921a:	e014      	b.n	8009246 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800921c:	7bbb      	ldrb	r3, [r7, #14]
 800921e:	68ba      	ldr	r2, [r7, #8]
 8009220:	2134      	movs	r1, #52	; 0x34
 8009222:	fb01 f303 	mul.w	r3, r1, r3
 8009226:	4413      	add	r3, r2
 8009228:	3392      	adds	r3, #146	; 0x92
 800922a:	2202      	movs	r2, #2
 800922c:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800922e:	7bbb      	ldrb	r3, [r7, #14]
 8009230:	68ba      	ldr	r2, [r7, #8]
 8009232:	2134      	movs	r1, #52	; 0x34
 8009234:	fb01 f303 	mul.w	r3, r1, r3
 8009238:	4413      	add	r3, r2
 800923a:	33c1      	adds	r3, #193	; 0xc1
 800923c:	2200      	movs	r2, #0
 800923e:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009240:	7bbb      	ldrb	r3, [r7, #14]
 8009242:	3301      	adds	r3, #1
 8009244:	73bb      	strb	r3, [r7, #14]
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	7bba      	ldrb	r2, [r7, #14]
 800924c:	429a      	cmp	r2, r3
 800924e:	d3e5      	bcc.n	800921c <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8009250:	e00d      	b.n	800926e <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8009252:	2100      	movs	r1, #0
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f001 fba1 	bl	800a99c <USBH_ClrFeature>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d108      	bne.n	8009272 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	7bda      	ldrb	r2, [r3, #15]
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	739a      	strb	r2, [r3, #14]
      }
      break;
 8009268:	e003      	b.n	8009272 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800926a:	bf00      	nop
 800926c:	e002      	b.n	8009274 <USBH_MSC_ClassRequest+0xc4>
      break;
 800926e:	bf00      	nop
 8009270:	e000      	b.n	8009274 <USBH_MSC_ClassRequest+0xc4>
      break;
 8009272:	bf00      	nop
  }

  return status;
 8009274:	7bfb      	ldrb	r3, [r7, #15]
}
 8009276:	4618      	mov	r0, r3
 8009278:	3710      	adds	r7, #16
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
	...

08009280 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800928e:	69db      	ldr	r3, [r3, #28]
 8009290:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8009292:	2301      	movs	r3, #1
 8009294:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8009296:	2301      	movs	r3, #1
 8009298:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800929a:	2301      	movs	r3, #1
 800929c:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	7b1b      	ldrb	r3, [r3, #12]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d003      	beq.n	80092ae <USBH_MSC_Process+0x2e>
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	f000 8271 	beq.w	800978e <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80092ac:	e272      	b.n	8009794 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	429a      	cmp	r2, r3
 80092bc:	f080 824f 	bcs.w	800975e <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092c6:	4619      	mov	r1, r3
 80092c8:	693a      	ldr	r2, [r7, #16]
 80092ca:	2334      	movs	r3, #52	; 0x34
 80092cc:	fb01 f303 	mul.w	r3, r1, r3
 80092d0:	4413      	add	r3, r2
 80092d2:	3391      	adds	r3, #145	; 0x91
 80092d4:	2201      	movs	r2, #1
 80092d6:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092de:	4619      	mov	r1, r3
 80092e0:	693a      	ldr	r2, [r7, #16]
 80092e2:	2334      	movs	r3, #52	; 0x34
 80092e4:	fb01 f303 	mul.w	r3, r1, r3
 80092e8:	4413      	add	r3, r2
 80092ea:	3390      	adds	r3, #144	; 0x90
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	2b08      	cmp	r3, #8
 80092f0:	f200 8243 	bhi.w	800977a <USBH_MSC_Process+0x4fa>
 80092f4:	a201      	add	r2, pc, #4	; (adr r2, 80092fc <USBH_MSC_Process+0x7c>)
 80092f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092fa:	bf00      	nop
 80092fc:	08009321 	.word	0x08009321
 8009300:	0800977b 	.word	0x0800977b
 8009304:	080093e9 	.word	0x080093e9
 8009308:	0800956d 	.word	0x0800956d
 800930c:	08009347 	.word	0x08009347
 8009310:	08009639 	.word	0x08009639
 8009314:	0800977b 	.word	0x0800977b
 8009318:	0800977b 	.word	0x0800977b
 800931c:	0800974d 	.word	0x0800974d
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009326:	4619      	mov	r1, r3
 8009328:	693a      	ldr	r2, [r7, #16]
 800932a:	2334      	movs	r3, #52	; 0x34
 800932c:	fb01 f303 	mul.w	r3, r1, r3
 8009330:	4413      	add	r3, r2
 8009332:	3390      	adds	r3, #144	; 0x90
 8009334:	2204      	movs	r2, #4
 8009336:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8009344:	e222      	b.n	800978c <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800934c:	b2d9      	uxtb	r1, r3
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009354:	461a      	mov	r2, r3
 8009356:	2334      	movs	r3, #52	; 0x34
 8009358:	fb02 f303 	mul.w	r3, r2, r3
 800935c:	3398      	adds	r3, #152	; 0x98
 800935e:	693a      	ldr	r2, [r7, #16]
 8009360:	4413      	add	r3, r2
 8009362:	3307      	adds	r3, #7
 8009364:	461a      	mov	r2, r3
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 ff6a 	bl	800a240 <USBH_MSC_SCSI_Inquiry>
 800936c:	4603      	mov	r3, r0
 800936e:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009370:	7bfb      	ldrb	r3, [r7, #15]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d10b      	bne.n	800938e <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800937c:	4619      	mov	r1, r3
 800937e:	693a      	ldr	r2, [r7, #16]
 8009380:	2334      	movs	r3, #52	; 0x34
 8009382:	fb01 f303 	mul.w	r3, r1, r3
 8009386:	4413      	add	r3, r2
 8009388:	3390      	adds	r3, #144	; 0x90
 800938a:	2202      	movs	r2, #2
 800938c:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800938e:	7bfb      	ldrb	r3, [r7, #15]
 8009390:	2b02      	cmp	r3, #2
 8009392:	d10c      	bne.n	80093ae <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800939a:	4619      	mov	r1, r3
 800939c:	693a      	ldr	r2, [r7, #16]
 800939e:	2334      	movs	r3, #52	; 0x34
 80093a0:	fb01 f303 	mul.w	r3, r1, r3
 80093a4:	4413      	add	r3, r2
 80093a6:	3390      	adds	r3, #144	; 0x90
 80093a8:	2205      	movs	r2, #5
 80093aa:	701a      	strb	r2, [r3, #0]
            break;
 80093ac:	e1e7      	b.n	800977e <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80093ae:	7bfb      	ldrb	r3, [r7, #15]
 80093b0:	2b04      	cmp	r3, #4
 80093b2:	f040 81e4 	bne.w	800977e <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093bc:	4619      	mov	r1, r3
 80093be:	693a      	ldr	r2, [r7, #16]
 80093c0:	2334      	movs	r3, #52	; 0x34
 80093c2:	fb01 f303 	mul.w	r3, r1, r3
 80093c6:	4413      	add	r3, r2
 80093c8:	3390      	adds	r3, #144	; 0x90
 80093ca:	2201      	movs	r2, #1
 80093cc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093d4:	4619      	mov	r1, r3
 80093d6:	693a      	ldr	r2, [r7, #16]
 80093d8:	2334      	movs	r3, #52	; 0x34
 80093da:	fb01 f303 	mul.w	r3, r1, r3
 80093de:	4413      	add	r3, r2
 80093e0:	3391      	adds	r3, #145	; 0x91
 80093e2:	2202      	movs	r2, #2
 80093e4:	701a      	strb	r2, [r3, #0]
            break;
 80093e6:	e1ca      	b.n	800977e <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	4619      	mov	r1, r3
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 fe66 	bl	800a0c4 <USBH_MSC_SCSI_TestUnitReady>
 80093f8:	4603      	mov	r3, r0
 80093fa:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 80093fc:	7bbb      	ldrb	r3, [r7, #14]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d149      	bne.n	8009496 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009408:	4619      	mov	r1, r3
 800940a:	693a      	ldr	r2, [r7, #16]
 800940c:	2334      	movs	r3, #52	; 0x34
 800940e:	fb01 f303 	mul.w	r3, r1, r3
 8009412:	4413      	add	r3, r2
 8009414:	3392      	adds	r3, #146	; 0x92
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d00c      	beq.n	8009436 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009422:	4619      	mov	r1, r3
 8009424:	693a      	ldr	r2, [r7, #16]
 8009426:	2334      	movs	r3, #52	; 0x34
 8009428:	fb01 f303 	mul.w	r3, r1, r3
 800942c:	4413      	add	r3, r2
 800942e:	33c1      	adds	r3, #193	; 0xc1
 8009430:	2201      	movs	r2, #1
 8009432:	701a      	strb	r2, [r3, #0]
 8009434:	e00b      	b.n	800944e <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800943c:	4619      	mov	r1, r3
 800943e:	693a      	ldr	r2, [r7, #16]
 8009440:	2334      	movs	r3, #52	; 0x34
 8009442:	fb01 f303 	mul.w	r3, r1, r3
 8009446:	4413      	add	r3, r2
 8009448:	33c1      	adds	r3, #193	; 0xc1
 800944a:	2200      	movs	r2, #0
 800944c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009454:	4619      	mov	r1, r3
 8009456:	693a      	ldr	r2, [r7, #16]
 8009458:	2334      	movs	r3, #52	; 0x34
 800945a:	fb01 f303 	mul.w	r3, r1, r3
 800945e:	4413      	add	r3, r2
 8009460:	3390      	adds	r3, #144	; 0x90
 8009462:	2203      	movs	r2, #3
 8009464:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800946c:	4619      	mov	r1, r3
 800946e:	693a      	ldr	r2, [r7, #16]
 8009470:	2334      	movs	r3, #52	; 0x34
 8009472:	fb01 f303 	mul.w	r3, r1, r3
 8009476:	4413      	add	r3, r2
 8009478:	3391      	adds	r3, #145	; 0x91
 800947a:	2200      	movs	r2, #0
 800947c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009484:	4619      	mov	r1, r3
 8009486:	693a      	ldr	r2, [r7, #16]
 8009488:	2334      	movs	r3, #52	; 0x34
 800948a:	fb01 f303 	mul.w	r3, r1, r3
 800948e:	4413      	add	r3, r2
 8009490:	3392      	adds	r3, #146	; 0x92
 8009492:	2200      	movs	r2, #0
 8009494:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8009496:	7bbb      	ldrb	r3, [r7, #14]
 8009498:	2b02      	cmp	r3, #2
 800949a:	d14a      	bne.n	8009532 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094a2:	4619      	mov	r1, r3
 80094a4:	693a      	ldr	r2, [r7, #16]
 80094a6:	2334      	movs	r3, #52	; 0x34
 80094a8:	fb01 f303 	mul.w	r3, r1, r3
 80094ac:	4413      	add	r3, r2
 80094ae:	3392      	adds	r3, #146	; 0x92
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	d00c      	beq.n	80094d0 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094bc:	4619      	mov	r1, r3
 80094be:	693a      	ldr	r2, [r7, #16]
 80094c0:	2334      	movs	r3, #52	; 0x34
 80094c2:	fb01 f303 	mul.w	r3, r1, r3
 80094c6:	4413      	add	r3, r2
 80094c8:	33c1      	adds	r3, #193	; 0xc1
 80094ca:	2201      	movs	r2, #1
 80094cc:	701a      	strb	r2, [r3, #0]
 80094ce:	e00b      	b.n	80094e8 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094d6:	4619      	mov	r1, r3
 80094d8:	693a      	ldr	r2, [r7, #16]
 80094da:	2334      	movs	r3, #52	; 0x34
 80094dc:	fb01 f303 	mul.w	r3, r1, r3
 80094e0:	4413      	add	r3, r2
 80094e2:	33c1      	adds	r3, #193	; 0xc1
 80094e4:	2200      	movs	r2, #0
 80094e6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094ee:	4619      	mov	r1, r3
 80094f0:	693a      	ldr	r2, [r7, #16]
 80094f2:	2334      	movs	r3, #52	; 0x34
 80094f4:	fb01 f303 	mul.w	r3, r1, r3
 80094f8:	4413      	add	r3, r2
 80094fa:	3390      	adds	r3, #144	; 0x90
 80094fc:	2205      	movs	r2, #5
 80094fe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009506:	4619      	mov	r1, r3
 8009508:	693a      	ldr	r2, [r7, #16]
 800950a:	2334      	movs	r3, #52	; 0x34
 800950c:	fb01 f303 	mul.w	r3, r1, r3
 8009510:	4413      	add	r3, r2
 8009512:	3391      	adds	r3, #145	; 0x91
 8009514:	2201      	movs	r2, #1
 8009516:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800951e:	4619      	mov	r1, r3
 8009520:	693a      	ldr	r2, [r7, #16]
 8009522:	2334      	movs	r3, #52	; 0x34
 8009524:	fb01 f303 	mul.w	r3, r1, r3
 8009528:	4413      	add	r3, r2
 800952a:	3392      	adds	r3, #146	; 0x92
 800952c:	2202      	movs	r2, #2
 800952e:	701a      	strb	r2, [r3, #0]
            break;
 8009530:	e127      	b.n	8009782 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8009532:	7bbb      	ldrb	r3, [r7, #14]
 8009534:	2b04      	cmp	r3, #4
 8009536:	f040 8124 	bne.w	8009782 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009540:	4619      	mov	r1, r3
 8009542:	693a      	ldr	r2, [r7, #16]
 8009544:	2334      	movs	r3, #52	; 0x34
 8009546:	fb01 f303 	mul.w	r3, r1, r3
 800954a:	4413      	add	r3, r2
 800954c:	3390      	adds	r3, #144	; 0x90
 800954e:	2201      	movs	r2, #1
 8009550:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009558:	4619      	mov	r1, r3
 800955a:	693a      	ldr	r2, [r7, #16]
 800955c:	2334      	movs	r3, #52	; 0x34
 800955e:	fb01 f303 	mul.w	r3, r1, r3
 8009562:	4413      	add	r3, r2
 8009564:	3391      	adds	r3, #145	; 0x91
 8009566:	2202      	movs	r2, #2
 8009568:	701a      	strb	r2, [r3, #0]
            break;
 800956a:	e10a      	b.n	8009782 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009572:	b2d9      	uxtb	r1, r3
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800957a:	461a      	mov	r2, r3
 800957c:	2334      	movs	r3, #52	; 0x34
 800957e:	fb02 f303 	mul.w	r3, r2, r3
 8009582:	3390      	adds	r3, #144	; 0x90
 8009584:	693a      	ldr	r2, [r7, #16]
 8009586:	4413      	add	r3, r2
 8009588:	3304      	adds	r3, #4
 800958a:	461a      	mov	r2, r3
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 fddc 	bl	800a14a <USBH_MSC_SCSI_ReadCapacity>
 8009592:	4603      	mov	r3, r0
 8009594:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009596:	7bfb      	ldrb	r3, [r7, #15]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d120      	bne.n	80095de <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095a2:	4619      	mov	r1, r3
 80095a4:	693a      	ldr	r2, [r7, #16]
 80095a6:	2334      	movs	r3, #52	; 0x34
 80095a8:	fb01 f303 	mul.w	r3, r1, r3
 80095ac:	4413      	add	r3, r2
 80095ae:	3390      	adds	r3, #144	; 0x90
 80095b0:	2201      	movs	r2, #1
 80095b2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095ba:	4619      	mov	r1, r3
 80095bc:	693a      	ldr	r2, [r7, #16]
 80095be:	2334      	movs	r3, #52	; 0x34
 80095c0:	fb01 f303 	mul.w	r3, r1, r3
 80095c4:	4413      	add	r3, r2
 80095c6:	3391      	adds	r3, #145	; 0x91
 80095c8:	2200      	movs	r2, #0
 80095ca:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095d2:	3301      	adds	r3, #1
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80095dc:	e0d3      	b.n	8009786 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 80095de:	7bfb      	ldrb	r3, [r7, #15]
 80095e0:	2b02      	cmp	r3, #2
 80095e2:	d10c      	bne.n	80095fe <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095ea:	4619      	mov	r1, r3
 80095ec:	693a      	ldr	r2, [r7, #16]
 80095ee:	2334      	movs	r3, #52	; 0x34
 80095f0:	fb01 f303 	mul.w	r3, r1, r3
 80095f4:	4413      	add	r3, r2
 80095f6:	3390      	adds	r3, #144	; 0x90
 80095f8:	2205      	movs	r2, #5
 80095fa:	701a      	strb	r2, [r3, #0]
            break;
 80095fc:	e0c3      	b.n	8009786 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80095fe:	7bfb      	ldrb	r3, [r7, #15]
 8009600:	2b04      	cmp	r3, #4
 8009602:	f040 80c0 	bne.w	8009786 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800960c:	4619      	mov	r1, r3
 800960e:	693a      	ldr	r2, [r7, #16]
 8009610:	2334      	movs	r3, #52	; 0x34
 8009612:	fb01 f303 	mul.w	r3, r1, r3
 8009616:	4413      	add	r3, r2
 8009618:	3390      	adds	r3, #144	; 0x90
 800961a:	2201      	movs	r2, #1
 800961c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009624:	4619      	mov	r1, r3
 8009626:	693a      	ldr	r2, [r7, #16]
 8009628:	2334      	movs	r3, #52	; 0x34
 800962a:	fb01 f303 	mul.w	r3, r1, r3
 800962e:	4413      	add	r3, r2
 8009630:	3391      	adds	r3, #145	; 0x91
 8009632:	2202      	movs	r2, #2
 8009634:	701a      	strb	r2, [r3, #0]
            break;
 8009636:	e0a6      	b.n	8009786 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800963e:	b2d9      	uxtb	r1, r3
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009646:	461a      	mov	r2, r3
 8009648:	2334      	movs	r3, #52	; 0x34
 800964a:	fb02 f303 	mul.w	r3, r2, r3
 800964e:	3398      	adds	r3, #152	; 0x98
 8009650:	693a      	ldr	r2, [r7, #16]
 8009652:	4413      	add	r3, r2
 8009654:	3304      	adds	r3, #4
 8009656:	461a      	mov	r2, r3
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f000 fe96 	bl	800a38a <USBH_MSC_SCSI_RequestSense>
 800965e:	4603      	mov	r3, r0
 8009660:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009662:	7bfb      	ldrb	r3, [r7, #15]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d145      	bne.n	80096f4 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800966e:	4619      	mov	r1, r3
 8009670:	693a      	ldr	r2, [r7, #16]
 8009672:	2334      	movs	r3, #52	; 0x34
 8009674:	fb01 f303 	mul.w	r3, r1, r3
 8009678:	4413      	add	r3, r2
 800967a:	339c      	adds	r3, #156	; 0x9c
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	2b06      	cmp	r3, #6
 8009680:	d00c      	beq.n	800969c <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009688:	4619      	mov	r1, r3
 800968a:	693a      	ldr	r2, [r7, #16]
 800968c:	2334      	movs	r3, #52	; 0x34
 800968e:	fb01 f303 	mul.w	r3, r1, r3
 8009692:	4413      	add	r3, r2
 8009694:	339c      	adds	r3, #156	; 0x9c
 8009696:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009698:	2b02      	cmp	r3, #2
 800969a:	d117      	bne.n	80096cc <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80096a8:	1ad3      	subs	r3, r2, r3
 80096aa:	f242 720f 	movw	r2, #9999	; 0x270f
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d80c      	bhi.n	80096cc <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096b8:	4619      	mov	r1, r3
 80096ba:	693a      	ldr	r2, [r7, #16]
 80096bc:	2334      	movs	r3, #52	; 0x34
 80096be:	fb01 f303 	mul.w	r3, r1, r3
 80096c2:	4413      	add	r3, r2
 80096c4:	3390      	adds	r3, #144	; 0x90
 80096c6:	2202      	movs	r2, #2
 80096c8:	701a      	strb	r2, [r3, #0]
                  break;
 80096ca:	e05f      	b.n	800978c <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096d2:	4619      	mov	r1, r3
 80096d4:	693a      	ldr	r2, [r7, #16]
 80096d6:	2334      	movs	r3, #52	; 0x34
 80096d8:	fb01 f303 	mul.w	r3, r1, r3
 80096dc:	4413      	add	r3, r2
 80096de:	3390      	adds	r3, #144	; 0x90
 80096e0:	2201      	movs	r2, #1
 80096e2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096ea:	3301      	adds	r3, #1
 80096ec:	b29a      	uxth	r2, r3
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 80096f4:	7bfb      	ldrb	r3, [r7, #15]
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d10c      	bne.n	8009714 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009700:	4619      	mov	r1, r3
 8009702:	693a      	ldr	r2, [r7, #16]
 8009704:	2334      	movs	r3, #52	; 0x34
 8009706:	fb01 f303 	mul.w	r3, r1, r3
 800970a:	4413      	add	r3, r2
 800970c:	3390      	adds	r3, #144	; 0x90
 800970e:	2208      	movs	r2, #8
 8009710:	701a      	strb	r2, [r3, #0]
            break;
 8009712:	e03a      	b.n	800978a <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009714:	7bfb      	ldrb	r3, [r7, #15]
 8009716:	2b04      	cmp	r3, #4
 8009718:	d137      	bne.n	800978a <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009720:	4619      	mov	r1, r3
 8009722:	693a      	ldr	r2, [r7, #16]
 8009724:	2334      	movs	r3, #52	; 0x34
 8009726:	fb01 f303 	mul.w	r3, r1, r3
 800972a:	4413      	add	r3, r2
 800972c:	3390      	adds	r3, #144	; 0x90
 800972e:	2201      	movs	r2, #1
 8009730:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009738:	4619      	mov	r1, r3
 800973a:	693a      	ldr	r2, [r7, #16]
 800973c:	2334      	movs	r3, #52	; 0x34
 800973e:	fb01 f303 	mul.w	r3, r1, r3
 8009742:	4413      	add	r3, r2
 8009744:	3391      	adds	r3, #145	; 0x91
 8009746:	2202      	movs	r2, #2
 8009748:	701a      	strb	r2, [r3, #0]
            break;
 800974a:	e01e      	b.n	800978a <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009752:	3301      	adds	r3, #1
 8009754:	b29a      	uxth	r2, r3
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800975c:	e016      	b.n	800978c <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	2200      	movs	r2, #0
 8009762:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	2201      	movs	r2, #1
 800976a:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009772:	2102      	movs	r1, #2
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	4798      	blx	r3
      break;
 8009778:	e00c      	b.n	8009794 <USBH_MSC_Process+0x514>
            break;
 800977a:	bf00      	nop
 800977c:	e00a      	b.n	8009794 <USBH_MSC_Process+0x514>
            break;
 800977e:	bf00      	nop
 8009780:	e008      	b.n	8009794 <USBH_MSC_Process+0x514>
            break;
 8009782:	bf00      	nop
 8009784:	e006      	b.n	8009794 <USBH_MSC_Process+0x514>
            break;
 8009786:	bf00      	nop
 8009788:	e004      	b.n	8009794 <USBH_MSC_Process+0x514>
            break;
 800978a:	bf00      	nop
      break;
 800978c:	e002      	b.n	8009794 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800978e:	2300      	movs	r3, #0
 8009790:	75fb      	strb	r3, [r7, #23]
      break;
 8009792:	bf00      	nop
  }
  return error;
 8009794:	7dfb      	ldrb	r3, [r7, #23]
}
 8009796:	4618      	mov	r0, r3
 8009798:	3718      	adds	r7, #24
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop

080097a0 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b083      	sub	sp, #12
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	370c      	adds	r7, #12
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr

080097b6 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b088      	sub	sp, #32
 80097ba:	af02      	add	r7, sp, #8
 80097bc:	6078      	str	r0, [r7, #4]
 80097be:	460b      	mov	r3, r1
 80097c0:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097c8:	69db      	ldr	r3, [r3, #28]
 80097ca:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80097cc:	2301      	movs	r3, #1
 80097ce:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80097d0:	2301      	movs	r3, #1
 80097d2:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80097d4:	78fb      	ldrb	r3, [r7, #3]
 80097d6:	693a      	ldr	r2, [r7, #16]
 80097d8:	2134      	movs	r1, #52	; 0x34
 80097da:	fb01 f303 	mul.w	r3, r1, r3
 80097de:	4413      	add	r3, r2
 80097e0:	3390      	adds	r3, #144	; 0x90
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	2b07      	cmp	r3, #7
 80097e6:	d03c      	beq.n	8009862 <USBH_MSC_RdWrProcess+0xac>
 80097e8:	2b07      	cmp	r3, #7
 80097ea:	f300 80a7 	bgt.w	800993c <USBH_MSC_RdWrProcess+0x186>
 80097ee:	2b05      	cmp	r3, #5
 80097f0:	d06c      	beq.n	80098cc <USBH_MSC_RdWrProcess+0x116>
 80097f2:	2b06      	cmp	r3, #6
 80097f4:	f040 80a2 	bne.w	800993c <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80097f8:	78f9      	ldrb	r1, [r7, #3]
 80097fa:	2300      	movs	r3, #0
 80097fc:	9300      	str	r3, [sp, #0]
 80097fe:	2300      	movs	r3, #0
 8009800:	2200      	movs	r2, #0
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 fea5 	bl	800a552 <USBH_MSC_SCSI_Read>
 8009808:	4603      	mov	r3, r0
 800980a:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800980c:	7bfb      	ldrb	r3, [r7, #15]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d10b      	bne.n	800982a <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009812:	78fb      	ldrb	r3, [r7, #3]
 8009814:	693a      	ldr	r2, [r7, #16]
 8009816:	2134      	movs	r1, #52	; 0x34
 8009818:	fb01 f303 	mul.w	r3, r1, r3
 800981c:	4413      	add	r3, r2
 800981e:	3390      	adds	r3, #144	; 0x90
 8009820:	2201      	movs	r2, #1
 8009822:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009824:	2300      	movs	r3, #0
 8009826:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009828:	e08a      	b.n	8009940 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800982a:	7bfb      	ldrb	r3, [r7, #15]
 800982c:	2b02      	cmp	r3, #2
 800982e:	d109      	bne.n	8009844 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009830:	78fb      	ldrb	r3, [r7, #3]
 8009832:	693a      	ldr	r2, [r7, #16]
 8009834:	2134      	movs	r1, #52	; 0x34
 8009836:	fb01 f303 	mul.w	r3, r1, r3
 800983a:	4413      	add	r3, r2
 800983c:	3390      	adds	r3, #144	; 0x90
 800983e:	2205      	movs	r2, #5
 8009840:	701a      	strb	r2, [r3, #0]
      break;
 8009842:	e07d      	b.n	8009940 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009844:	7bfb      	ldrb	r3, [r7, #15]
 8009846:	2b04      	cmp	r3, #4
 8009848:	d17a      	bne.n	8009940 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800984a:	78fb      	ldrb	r3, [r7, #3]
 800984c:	693a      	ldr	r2, [r7, #16]
 800984e:	2134      	movs	r1, #52	; 0x34
 8009850:	fb01 f303 	mul.w	r3, r1, r3
 8009854:	4413      	add	r3, r2
 8009856:	3390      	adds	r3, #144	; 0x90
 8009858:	2208      	movs	r2, #8
 800985a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800985c:	2302      	movs	r3, #2
 800985e:	75fb      	strb	r3, [r7, #23]
      break;
 8009860:	e06e      	b.n	8009940 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8009862:	78f9      	ldrb	r1, [r7, #3]
 8009864:	2300      	movs	r3, #0
 8009866:	9300      	str	r3, [sp, #0]
 8009868:	2300      	movs	r3, #0
 800986a:	2200      	movs	r2, #0
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 fe05 	bl	800a47c <USBH_MSC_SCSI_Write>
 8009872:	4603      	mov	r3, r0
 8009874:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009876:	7bfb      	ldrb	r3, [r7, #15]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d10b      	bne.n	8009894 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800987c:	78fb      	ldrb	r3, [r7, #3]
 800987e:	693a      	ldr	r2, [r7, #16]
 8009880:	2134      	movs	r1, #52	; 0x34
 8009882:	fb01 f303 	mul.w	r3, r1, r3
 8009886:	4413      	add	r3, r2
 8009888:	3390      	adds	r3, #144	; 0x90
 800988a:	2201      	movs	r2, #1
 800988c:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800988e:	2300      	movs	r3, #0
 8009890:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009892:	e057      	b.n	8009944 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8009894:	7bfb      	ldrb	r3, [r7, #15]
 8009896:	2b02      	cmp	r3, #2
 8009898:	d109      	bne.n	80098ae <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800989a:	78fb      	ldrb	r3, [r7, #3]
 800989c:	693a      	ldr	r2, [r7, #16]
 800989e:	2134      	movs	r1, #52	; 0x34
 80098a0:	fb01 f303 	mul.w	r3, r1, r3
 80098a4:	4413      	add	r3, r2
 80098a6:	3390      	adds	r3, #144	; 0x90
 80098a8:	2205      	movs	r2, #5
 80098aa:	701a      	strb	r2, [r3, #0]
      break;
 80098ac:	e04a      	b.n	8009944 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80098ae:	7bfb      	ldrb	r3, [r7, #15]
 80098b0:	2b04      	cmp	r3, #4
 80098b2:	d147      	bne.n	8009944 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80098b4:	78fb      	ldrb	r3, [r7, #3]
 80098b6:	693a      	ldr	r2, [r7, #16]
 80098b8:	2134      	movs	r1, #52	; 0x34
 80098ba:	fb01 f303 	mul.w	r3, r1, r3
 80098be:	4413      	add	r3, r2
 80098c0:	3390      	adds	r3, #144	; 0x90
 80098c2:	2208      	movs	r2, #8
 80098c4:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80098c6:	2302      	movs	r3, #2
 80098c8:	75fb      	strb	r3, [r7, #23]
      break;
 80098ca:	e03b      	b.n	8009944 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80098cc:	78fb      	ldrb	r3, [r7, #3]
 80098ce:	2234      	movs	r2, #52	; 0x34
 80098d0:	fb02 f303 	mul.w	r3, r2, r3
 80098d4:	3398      	adds	r3, #152	; 0x98
 80098d6:	693a      	ldr	r2, [r7, #16]
 80098d8:	4413      	add	r3, r2
 80098da:	1d1a      	adds	r2, r3, #4
 80098dc:	78fb      	ldrb	r3, [r7, #3]
 80098de:	4619      	mov	r1, r3
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 fd52 	bl	800a38a <USBH_MSC_SCSI_RequestSense>
 80098e6:	4603      	mov	r3, r0
 80098e8:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80098ea:	7bfb      	ldrb	r3, [r7, #15]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d113      	bne.n	8009918 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80098f0:	78fb      	ldrb	r3, [r7, #3]
 80098f2:	693a      	ldr	r2, [r7, #16]
 80098f4:	2134      	movs	r1, #52	; 0x34
 80098f6:	fb01 f303 	mul.w	r3, r1, r3
 80098fa:	4413      	add	r3, r2
 80098fc:	3390      	adds	r3, #144	; 0x90
 80098fe:	2201      	movs	r2, #1
 8009900:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8009902:	78fb      	ldrb	r3, [r7, #3]
 8009904:	693a      	ldr	r2, [r7, #16]
 8009906:	2134      	movs	r1, #52	; 0x34
 8009908:	fb01 f303 	mul.w	r3, r1, r3
 800990c:	4413      	add	r3, r2
 800990e:	3391      	adds	r3, #145	; 0x91
 8009910:	2202      	movs	r2, #2
 8009912:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8009914:	2302      	movs	r3, #2
 8009916:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8009918:	7bfb      	ldrb	r3, [r7, #15]
 800991a:	2b02      	cmp	r3, #2
 800991c:	d014      	beq.n	8009948 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800991e:	7bfb      	ldrb	r3, [r7, #15]
 8009920:	2b04      	cmp	r3, #4
 8009922:	d111      	bne.n	8009948 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009924:	78fb      	ldrb	r3, [r7, #3]
 8009926:	693a      	ldr	r2, [r7, #16]
 8009928:	2134      	movs	r1, #52	; 0x34
 800992a:	fb01 f303 	mul.w	r3, r1, r3
 800992e:	4413      	add	r3, r2
 8009930:	3390      	adds	r3, #144	; 0x90
 8009932:	2208      	movs	r2, #8
 8009934:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009936:	2302      	movs	r3, #2
 8009938:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800993a:	e005      	b.n	8009948 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800993c:	bf00      	nop
 800993e:	e004      	b.n	800994a <USBH_MSC_RdWrProcess+0x194>
      break;
 8009940:	bf00      	nop
 8009942:	e002      	b.n	800994a <USBH_MSC_RdWrProcess+0x194>
      break;
 8009944:	bf00      	nop
 8009946:	e000      	b.n	800994a <USBH_MSC_RdWrProcess+0x194>
      break;
 8009948:	bf00      	nop

  }
  return error;
 800994a:	7dfb      	ldrb	r3, [r7, #23]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3718      	adds	r7, #24
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009954:	b480      	push	{r7}
 8009956:	b085      	sub	sp, #20
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	460b      	mov	r3, r1
 800995e:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009966:	69db      	ldr	r3, [r3, #28]
 8009968:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	b2db      	uxtb	r3, r3
 8009970:	2b0b      	cmp	r3, #11
 8009972:	d10c      	bne.n	800998e <USBH_MSC_UnitIsReady+0x3a>
 8009974:	78fb      	ldrb	r3, [r7, #3]
 8009976:	68ba      	ldr	r2, [r7, #8]
 8009978:	2134      	movs	r1, #52	; 0x34
 800997a:	fb01 f303 	mul.w	r3, r1, r3
 800997e:	4413      	add	r3, r2
 8009980:	3391      	adds	r3, #145	; 0x91
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d102      	bne.n	800998e <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8009988:	2301      	movs	r3, #1
 800998a:	73fb      	strb	r3, [r7, #15]
 800998c:	e001      	b.n	8009992 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800998e:	2300      	movs	r3, #0
 8009990:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009992:	7bfb      	ldrb	r3, [r7, #15]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3714      	adds	r7, #20
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b086      	sub	sp, #24
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	460b      	mov	r3, r1
 80099aa:	607a      	str	r2, [r7, #4]
 80099ac:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099b4:	69db      	ldr	r3, [r3, #28]
 80099b6:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	2b0b      	cmp	r3, #11
 80099c0:	d10d      	bne.n	80099de <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80099c2:	7afb      	ldrb	r3, [r7, #11]
 80099c4:	2234      	movs	r2, #52	; 0x34
 80099c6:	fb02 f303 	mul.w	r3, r2, r3
 80099ca:	3390      	adds	r3, #144	; 0x90
 80099cc:	697a      	ldr	r2, [r7, #20]
 80099ce:	4413      	add	r3, r2
 80099d0:	2234      	movs	r2, #52	; 0x34
 80099d2:	4619      	mov	r1, r3
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f001 fe5f 	bl	800b698 <memcpy>
    return USBH_OK;
 80099da:	2300      	movs	r3, #0
 80099dc:	e000      	b.n	80099e0 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 80099de:	2302      	movs	r3, #2
  }
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3718      	adds	r7, #24
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b088      	sub	sp, #32
 80099ec:	af02      	add	r7, sp, #8
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	607a      	str	r2, [r7, #4]
 80099f2:	603b      	str	r3, [r7, #0]
 80099f4:	460b      	mov	r3, r1
 80099f6:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099fe:	69db      	ldr	r3, [r3, #28]
 8009a00:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d00e      	beq.n	8009a2c <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009a14:	2b0b      	cmp	r3, #11
 8009a16:	d109      	bne.n	8009a2c <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009a18:	7afb      	ldrb	r3, [r7, #11]
 8009a1a:	697a      	ldr	r2, [r7, #20]
 8009a1c:	2134      	movs	r1, #52	; 0x34
 8009a1e:	fb01 f303 	mul.w	r3, r1, r3
 8009a22:	4413      	add	r3, r2
 8009a24:	3390      	adds	r3, #144	; 0x90
 8009a26:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d001      	beq.n	8009a30 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8009a2c:	2302      	movs	r3, #2
 8009a2e:	e040      	b.n	8009ab2 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	2206      	movs	r2, #6
 8009a34:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8009a36:	7afb      	ldrb	r3, [r7, #11]
 8009a38:	697a      	ldr	r2, [r7, #20]
 8009a3a:	2134      	movs	r1, #52	; 0x34
 8009a3c:	fb01 f303 	mul.w	r3, r1, r3
 8009a40:	4413      	add	r3, r2
 8009a42:	3390      	adds	r3, #144	; 0x90
 8009a44:	2206      	movs	r2, #6
 8009a46:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009a48:	7afb      	ldrb	r3, [r7, #11]
 8009a4a:	b29a      	uxth	r2, r3
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009a52:	7af9      	ldrb	r1, [r7, #11]
 8009a54:	6a3b      	ldr	r3, [r7, #32]
 8009a56:	9300      	str	r3, [sp, #0]
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	68f8      	ldr	r0, [r7, #12]
 8009a5e:	f000 fd78 	bl	800a552 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009a68:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009a6a:	e016      	b.n	8009a9a <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	1ad2      	subs	r2, r2, r3
 8009a76:	6a3b      	ldr	r3, [r7, #32]
 8009a78:	f242 7110 	movw	r1, #10000	; 0x2710
 8009a7c:	fb01 f303 	mul.w	r3, r1, r3
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d805      	bhi.n	8009a90 <USBH_MSC_Read+0xa8>
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d104      	bne.n	8009a9a <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	2201      	movs	r2, #1
 8009a94:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009a96:	2302      	movs	r3, #2
 8009a98:	e00b      	b.n	8009ab2 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009a9a:	7afb      	ldrb	r3, [r7, #11]
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	68f8      	ldr	r0, [r7, #12]
 8009aa0:	f7ff fe89 	bl	80097b6 <USBH_MSC_RdWrProcess>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d0e0      	beq.n	8009a6c <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	2201      	movs	r2, #1
 8009aae:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3718      	adds	r7, #24
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b088      	sub	sp, #32
 8009abe:	af02      	add	r7, sp, #8
 8009ac0:	60f8      	str	r0, [r7, #12]
 8009ac2:	607a      	str	r2, [r7, #4]
 8009ac4:	603b      	str	r3, [r7, #0]
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ad0:	69db      	ldr	r3, [r3, #28]
 8009ad2:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d00e      	beq.n	8009afe <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009ae6:	2b0b      	cmp	r3, #11
 8009ae8:	d109      	bne.n	8009afe <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009aea:	7afb      	ldrb	r3, [r7, #11]
 8009aec:	697a      	ldr	r2, [r7, #20]
 8009aee:	2134      	movs	r1, #52	; 0x34
 8009af0:	fb01 f303 	mul.w	r3, r1, r3
 8009af4:	4413      	add	r3, r2
 8009af6:	3390      	adds	r3, #144	; 0x90
 8009af8:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d001      	beq.n	8009b02 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8009afe:	2302      	movs	r3, #2
 8009b00:	e040      	b.n	8009b84 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	2207      	movs	r2, #7
 8009b06:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8009b08:	7afb      	ldrb	r3, [r7, #11]
 8009b0a:	697a      	ldr	r2, [r7, #20]
 8009b0c:	2134      	movs	r1, #52	; 0x34
 8009b0e:	fb01 f303 	mul.w	r3, r1, r3
 8009b12:	4413      	add	r3, r2
 8009b14:	3390      	adds	r3, #144	; 0x90
 8009b16:	2207      	movs	r2, #7
 8009b18:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009b1a:	7afb      	ldrb	r3, [r7, #11]
 8009b1c:	b29a      	uxth	r2, r3
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009b24:	7af9      	ldrb	r1, [r7, #11]
 8009b26:	6a3b      	ldr	r3, [r7, #32]
 8009b28:	9300      	str	r3, [sp, #0]
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	f000 fca4 	bl	800a47c <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009b3a:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009b3c:	e016      	b.n	8009b6c <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	1ad2      	subs	r2, r2, r3
 8009b48:	6a3b      	ldr	r3, [r7, #32]
 8009b4a:	f242 7110 	movw	r1, #10000	; 0x2710
 8009b4e:	fb01 f303 	mul.w	r3, r1, r3
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d805      	bhi.n	8009b62 <USBH_MSC_Write+0xa8>
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d104      	bne.n	8009b6c <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	2201      	movs	r2, #1
 8009b66:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009b68:	2302      	movs	r3, #2
 8009b6a:	e00b      	b.n	8009b84 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009b6c:	7afb      	ldrb	r3, [r7, #11]
 8009b6e:	4619      	mov	r1, r3
 8009b70:	68f8      	ldr	r0, [r7, #12]
 8009b72:	f7ff fe20 	bl	80097b6 <USBH_MSC_RdWrProcess>
 8009b76:	4603      	mov	r3, r0
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d0e0      	beq.n	8009b3e <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8009b82:	2300      	movs	r3, #0
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3718      	adds	r7, #24
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2221      	movs	r2, #33	; 0x21
 8009b98:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	22ff      	movs	r2, #255	; 0xff
 8009b9e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 ff14 	bl	800a9e4 <USBH_CtlReq>
 8009bbc:	4603      	mov	r3, r0
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3708      	adds	r7, #8
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8009bc6:	b580      	push	{r7, lr}
 8009bc8:	b082      	sub	sp, #8
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
 8009bce:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	22a1      	movs	r2, #161	; 0xa1
 8009bd4:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	22fe      	movs	r2, #254	; 0xfe
 8009bda:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2200      	movs	r2, #0
 8009be0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2201      	movs	r2, #1
 8009bec:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8009bee:	2201      	movs	r2, #1
 8009bf0:	6839      	ldr	r1, [r7, #0]
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 fef6 	bl	800a9e4 <USBH_CtlReq>
 8009bf8:	4603      	mov	r3, r0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3708      	adds	r7, #8
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
	...

08009c04 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b085      	sub	sp, #20
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c12:	69db      	ldr	r3, [r3, #28]
 8009c14:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	4a09      	ldr	r2, [pc, #36]	; (8009c40 <USBH_MSC_BOT_Init+0x3c>)
 8009c1a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	4a09      	ldr	r2, [pc, #36]	; (8009c44 <USBH_MSC_BOT_Init+0x40>)
 8009c20:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2201      	movs	r2, #1
 8009c26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8009c32:	2300      	movs	r3, #0
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3714      	adds	r7, #20
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr
 8009c40:	43425355 	.word	0x43425355
 8009c44:	20304050 	.word	0x20304050

08009c48 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b088      	sub	sp, #32
 8009c4c:	af02      	add	r7, sp, #8
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	460b      	mov	r3, r1
 8009c52:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009c54:	2301      	movs	r3, #1
 8009c56:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009c60:	2300      	movs	r3, #0
 8009c62:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c6a:	69db      	ldr	r3, [r3, #28]
 8009c6c:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009c78:	3b01      	subs	r3, #1
 8009c7a:	2b0a      	cmp	r3, #10
 8009c7c:	f200 819e 	bhi.w	8009fbc <USBH_MSC_BOT_Process+0x374>
 8009c80:	a201      	add	r2, pc, #4	; (adr r2, 8009c88 <USBH_MSC_BOT_Process+0x40>)
 8009c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c86:	bf00      	nop
 8009c88:	08009cb5 	.word	0x08009cb5
 8009c8c:	08009cdd 	.word	0x08009cdd
 8009c90:	08009d47 	.word	0x08009d47
 8009c94:	08009d65 	.word	0x08009d65
 8009c98:	08009de9 	.word	0x08009de9
 8009c9c:	08009e0b 	.word	0x08009e0b
 8009ca0:	08009ea3 	.word	0x08009ea3
 8009ca4:	08009ebf 	.word	0x08009ebf
 8009ca8:	08009f11 	.word	0x08009f11
 8009cac:	08009f41 	.word	0x08009f41
 8009cb0:	08009fa3 	.word	0x08009fa3
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	78fa      	ldrb	r2, [r7, #3]
 8009cb8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	2202      	movs	r2, #2
 8009cc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	795b      	ldrb	r3, [r3, #5]
 8009cce:	2201      	movs	r2, #1
 8009cd0:	9200      	str	r2, [sp, #0]
 8009cd2:	221f      	movs	r2, #31
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f001 f894 	bl	800ae02 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8009cda:	e17e      	b.n	8009fda <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	795b      	ldrb	r3, [r3, #5]
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f001 fbcc 	bl	800b480 <USBH_LL_GetURBState>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009cec:	7d3b      	ldrb	r3, [r7, #20]
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d118      	bne.n	8009d24 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d00f      	beq.n	8009d1a <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009d00:	b25b      	sxtb	r3, r3
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	da04      	bge.n	8009d10 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	2203      	movs	r2, #3
 8009d0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009d0e:	e157      	b.n	8009fc0 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	2205      	movs	r2, #5
 8009d14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009d18:	e152      	b.n	8009fc0 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	2207      	movs	r2, #7
 8009d1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009d22:	e14d      	b.n	8009fc0 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009d24:	7d3b      	ldrb	r3, [r7, #20]
 8009d26:	2b02      	cmp	r3, #2
 8009d28:	d104      	bne.n	8009d34 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009d32:	e145      	b.n	8009fc0 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8009d34:	7d3b      	ldrb	r3, [r7, #20]
 8009d36:	2b05      	cmp	r3, #5
 8009d38:	f040 8142 	bne.w	8009fc0 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	220a      	movs	r2, #10
 8009d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009d44:	e13c      	b.n	8009fc0 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	895a      	ldrh	r2, [r3, #10]
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	791b      	ldrb	r3, [r3, #4]
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f001 f879 	bl	800ae4c <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	2204      	movs	r2, #4
 8009d5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8009d62:	e13a      	b.n	8009fda <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	791b      	ldrb	r3, [r3, #4]
 8009d68:	4619      	mov	r1, r3
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f001 fb88 	bl	800b480 <USBH_LL_GetURBState>
 8009d70:	4603      	mov	r3, r0
 8009d72:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009d74:	7d3b      	ldrb	r3, [r7, #20]
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d12d      	bne.n	8009dd6 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d7e:	693a      	ldr	r2, [r7, #16]
 8009d80:	8952      	ldrh	r2, [r2, #10]
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d910      	bls.n	8009da8 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d8c:	693a      	ldr	r2, [r7, #16]
 8009d8e:	8952      	ldrh	r2, [r2, #10]
 8009d90:	441a      	add	r2, r3
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d9c:	693a      	ldr	r2, [r7, #16]
 8009d9e:	8952      	ldrh	r2, [r2, #10]
 8009da0:	1a9a      	subs	r2, r3, r2
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	65da      	str	r2, [r3, #92]	; 0x5c
 8009da6:	e002      	b.n	8009dae <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	2200      	movs	r2, #0
 8009dac:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d00a      	beq.n	8009dcc <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	895a      	ldrh	r2, [r3, #10]
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	791b      	ldrb	r3, [r3, #4]
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f001 f841 	bl	800ae4c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8009dca:	e0fb      	b.n	8009fc4 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	2207      	movs	r2, #7
 8009dd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009dd4:	e0f6      	b.n	8009fc4 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8009dd6:	7d3b      	ldrb	r3, [r7, #20]
 8009dd8:	2b05      	cmp	r3, #5
 8009dda:	f040 80f3 	bne.w	8009fc4 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	2209      	movs	r2, #9
 8009de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009de6:	e0ed      	b.n	8009fc4 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	891a      	ldrh	r2, [r3, #8]
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	795b      	ldrb	r3, [r3, #5]
 8009df6:	2001      	movs	r0, #1
 8009df8:	9000      	str	r0, [sp, #0]
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f001 f801 	bl	800ae02 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	2206      	movs	r2, #6
 8009e04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009e08:	e0e7      	b.n	8009fda <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	795b      	ldrb	r3, [r3, #5]
 8009e0e:	4619      	mov	r1, r3
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f001 fb35 	bl	800b480 <USBH_LL_GetURBState>
 8009e16:	4603      	mov	r3, r0
 8009e18:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009e1a:	7d3b      	ldrb	r3, [r7, #20]
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d12f      	bne.n	8009e80 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e24:	693a      	ldr	r2, [r7, #16]
 8009e26:	8912      	ldrh	r2, [r2, #8]
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d910      	bls.n	8009e4e <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e32:	693a      	ldr	r2, [r7, #16]
 8009e34:	8912      	ldrh	r2, [r2, #8]
 8009e36:	441a      	add	r2, r3
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e42:	693a      	ldr	r2, [r7, #16]
 8009e44:	8912      	ldrh	r2, [r2, #8]
 8009e46:	1a9a      	subs	r2, r3, r2
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	65da      	str	r2, [r3, #92]	; 0x5c
 8009e4c:	e002      	b.n	8009e54 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	2200      	movs	r2, #0
 8009e52:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d00c      	beq.n	8009e76 <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	891a      	ldrh	r2, [r3, #8]
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	795b      	ldrb	r3, [r3, #5]
 8009e6a:	2001      	movs	r0, #1
 8009e6c:	9000      	str	r0, [sp, #0]
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 ffc7 	bl	800ae02 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8009e74:	e0a8      	b.n	8009fc8 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	2207      	movs	r2, #7
 8009e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009e7e:	e0a3      	b.n	8009fc8 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009e80:	7d3b      	ldrb	r3, [r7, #20]
 8009e82:	2b02      	cmp	r3, #2
 8009e84:	d104      	bne.n	8009e90 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	2205      	movs	r2, #5
 8009e8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009e8e:	e09b      	b.n	8009fc8 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8009e90:	7d3b      	ldrb	r3, [r7, #20]
 8009e92:	2b05      	cmp	r3, #5
 8009e94:	f040 8098 	bne.w	8009fc8 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	220a      	movs	r2, #10
 8009e9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009ea0:	e092      	b.n	8009fc8 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	791b      	ldrb	r3, [r3, #4]
 8009eac:	220d      	movs	r2, #13
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 ffcc 	bl	800ae4c <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	2208      	movs	r2, #8
 8009eb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009ebc:	e08d      	b.n	8009fda <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	791b      	ldrb	r3, [r3, #4]
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f001 fadb 	bl	800b480 <USBH_LL_GetURBState>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8009ece:	7d3b      	ldrb	r3, [r7, #20]
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d115      	bne.n	8009f00 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 f8a9 	bl	800a03c <USBH_MSC_DecodeCSW>
 8009eea:	4603      	mov	r3, r0
 8009eec:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8009eee:	7d7b      	ldrb	r3, [r7, #21]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d102      	bne.n	8009efa <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8009ef8:	e068      	b.n	8009fcc <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8009efa:	2302      	movs	r3, #2
 8009efc:	75fb      	strb	r3, [r7, #23]
      break;
 8009efe:	e065      	b.n	8009fcc <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8009f00:	7d3b      	ldrb	r3, [r7, #20]
 8009f02:	2b05      	cmp	r3, #5
 8009f04:	d162      	bne.n	8009fcc <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	2209      	movs	r2, #9
 8009f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009f0e:	e05d      	b.n	8009fcc <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009f10:	78fb      	ldrb	r3, [r7, #3]
 8009f12:	2200      	movs	r2, #0
 8009f14:	4619      	mov	r1, r3
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 f864 	bl	8009fe4 <USBH_MSC_BOT_Abort>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009f20:	7dbb      	ldrb	r3, [r7, #22]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d104      	bne.n	8009f30 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	2207      	movs	r2, #7
 8009f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009f2e:	e04f      	b.n	8009fd0 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009f30:	7dbb      	ldrb	r3, [r7, #22]
 8009f32:	2b04      	cmp	r3, #4
 8009f34:	d14c      	bne.n	8009fd0 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	220b      	movs	r2, #11
 8009f3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009f3e:	e047      	b.n	8009fd0 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009f40:	78fb      	ldrb	r3, [r7, #3]
 8009f42:	2201      	movs	r2, #1
 8009f44:	4619      	mov	r1, r3
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 f84c 	bl	8009fe4 <USBH_MSC_BOT_Abort>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009f50:	7dbb      	ldrb	r3, [r7, #22]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d11d      	bne.n	8009f92 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	795b      	ldrb	r3, [r3, #5]
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f001 fae9 	bl	800b534 <USBH_LL_GetToggle>
 8009f62:	4603      	mov	r3, r0
 8009f64:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	7959      	ldrb	r1, [r3, #5]
 8009f6a:	7bfb      	ldrb	r3, [r7, #15]
 8009f6c:	f1c3 0301 	rsb	r3, r3, #1
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	461a      	mov	r2, r3
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f001 faad 	bl	800b4d4 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	791b      	ldrb	r3, [r3, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	4619      	mov	r1, r3
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f001 faa6 	bl	800b4d4 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	2209      	movs	r2, #9
 8009f8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009f90:	e020      	b.n	8009fd4 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8009f92:	7dbb      	ldrb	r3, [r7, #22]
 8009f94:	2b04      	cmp	r3, #4
 8009f96:	d11d      	bne.n	8009fd4 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	220b      	movs	r2, #11
 8009f9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009fa0:	e018      	b.n	8009fd4 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f7ff fdf2 	bl	8009b8c <USBH_MSC_BOT_REQ_Reset>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009fac:	7dfb      	ldrb	r3, [r7, #23]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d112      	bne.n	8009fd8 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8009fba:	e00d      	b.n	8009fd8 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8009fbc:	bf00      	nop
 8009fbe:	e00c      	b.n	8009fda <USBH_MSC_BOT_Process+0x392>
      break;
 8009fc0:	bf00      	nop
 8009fc2:	e00a      	b.n	8009fda <USBH_MSC_BOT_Process+0x392>
      break;
 8009fc4:	bf00      	nop
 8009fc6:	e008      	b.n	8009fda <USBH_MSC_BOT_Process+0x392>
      break;
 8009fc8:	bf00      	nop
 8009fca:	e006      	b.n	8009fda <USBH_MSC_BOT_Process+0x392>
      break;
 8009fcc:	bf00      	nop
 8009fce:	e004      	b.n	8009fda <USBH_MSC_BOT_Process+0x392>
      break;
 8009fd0:	bf00      	nop
 8009fd2:	e002      	b.n	8009fda <USBH_MSC_BOT_Process+0x392>
      break;
 8009fd4:	bf00      	nop
 8009fd6:	e000      	b.n	8009fda <USBH_MSC_BOT_Process+0x392>
      break;
 8009fd8:	bf00      	nop
  }
  return status;
 8009fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3718      	adds	r7, #24
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	460b      	mov	r3, r1
 8009fee:	70fb      	strb	r3, [r7, #3]
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8009ff4:	2302      	movs	r3, #2
 8009ff6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ffe:	69db      	ldr	r3, [r3, #28]
 800a000:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800a002:	78bb      	ldrb	r3, [r7, #2]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d002      	beq.n	800a00e <USBH_MSC_BOT_Abort+0x2a>
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d009      	beq.n	800a020 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800a00c:	e011      	b.n	800a032 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	79db      	ldrb	r3, [r3, #7]
 800a012:	4619      	mov	r1, r3
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f000 fcc1 	bl	800a99c <USBH_ClrFeature>
 800a01a:	4603      	mov	r3, r0
 800a01c:	73fb      	strb	r3, [r7, #15]
      break;
 800a01e:	e008      	b.n	800a032 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	799b      	ldrb	r3, [r3, #6]
 800a024:	4619      	mov	r1, r3
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 fcb8 	bl	800a99c <USBH_ClrFeature>
 800a02c:	4603      	mov	r3, r0
 800a02e:	73fb      	strb	r3, [r7, #15]
      break;
 800a030:	bf00      	nop
  }
  return status;
 800a032:	7bfb      	ldrb	r3, [r7, #15]
}
 800a034:	4618      	mov	r0, r3
 800a036:	3710      	adds	r7, #16
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a04a:	69db      	ldr	r3, [r3, #28]
 800a04c:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800a04e:	2301      	movs	r3, #1
 800a050:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	791b      	ldrb	r3, [r3, #4]
 800a056:	4619      	mov	r1, r3
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f001 f97f 	bl	800b35c <USBH_LL_GetLastXferSize>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b0d      	cmp	r3, #13
 800a062:	d002      	beq.n	800a06a <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800a064:	2302      	movs	r3, #2
 800a066:	73fb      	strb	r3, [r7, #15]
 800a068:	e024      	b.n	800a0b4 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a06e:	4a14      	ldr	r2, [pc, #80]	; (800a0c0 <USBH_MSC_DecodeCSW+0x84>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d11d      	bne.n	800a0b0 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d119      	bne.n	800a0b4 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a086:	2b00      	cmp	r3, #0
 800a088:	d102      	bne.n	800a090 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800a08a:	2300      	movs	r3, #0
 800a08c:	73fb      	strb	r3, [r7, #15]
 800a08e:	e011      	b.n	800a0b4 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a096:	2b01      	cmp	r3, #1
 800a098:	d102      	bne.n	800a0a0 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800a09a:	2301      	movs	r3, #1
 800a09c:	73fb      	strb	r3, [r7, #15]
 800a09e:	e009      	b.n	800a0b4 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a0a6:	2b02      	cmp	r3, #2
 800a0a8:	d104      	bne.n	800a0b4 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800a0aa:	2302      	movs	r3, #2
 800a0ac:	73fb      	strb	r3, [r7, #15]
 800a0ae:	e001      	b.n	800a0b4 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800a0b0:	2302      	movs	r3, #2
 800a0b2:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800a0b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3710      	adds	r7, #16
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	53425355 	.word	0x53425355

0800a0c4 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a0d0:	2302      	movs	r3, #2
 800a0d2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0da:	69db      	ldr	r3, [r3, #28]
 800a0dc:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	d002      	beq.n	800a0ee <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800a0e8:	2b02      	cmp	r3, #2
 800a0ea:	d021      	beq.n	800a130 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a0ec:	e028      	b.n	800a140 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	220a      	movs	r2, #10
 800a100:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	3363      	adds	r3, #99	; 0x63
 800a108:	2210      	movs	r2, #16
 800a10a:	2100      	movs	r1, #0
 800a10c:	4618      	mov	r0, r3
 800a10e:	f001 fad1 	bl	800b6b4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	2200      	movs	r2, #0
 800a116:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	2201      	movs	r2, #1
 800a11e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	2202      	movs	r2, #2
 800a126:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800a12a:	2301      	movs	r3, #1
 800a12c:	73fb      	strb	r3, [r7, #15]
      break;
 800a12e:	e007      	b.n	800a140 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a130:	78fb      	ldrb	r3, [r7, #3]
 800a132:	4619      	mov	r1, r3
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f7ff fd87 	bl	8009c48 <USBH_MSC_BOT_Process>
 800a13a:	4603      	mov	r3, r0
 800a13c:	73fb      	strb	r3, [r7, #15]
      break;
 800a13e:	bf00      	nop
  }

  return error;
 800a140:	7bfb      	ldrb	r3, [r7, #15]
}
 800a142:	4618      	mov	r0, r3
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b086      	sub	sp, #24
 800a14e:	af00      	add	r7, sp, #0
 800a150:	60f8      	str	r0, [r7, #12]
 800a152:	460b      	mov	r3, r1
 800a154:	607a      	str	r2, [r7, #4]
 800a156:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800a158:	2301      	movs	r3, #1
 800a15a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a162:	69db      	ldr	r3, [r3, #28]
 800a164:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d002      	beq.n	800a176 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800a170:	2b02      	cmp	r3, #2
 800a172:	d027      	beq.n	800a1c4 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800a174:	e05f      	b.n	800a236 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	2208      	movs	r2, #8
 800a17a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	2280      	movs	r2, #128	; 0x80
 800a180:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	220a      	movs	r2, #10
 800a188:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	3363      	adds	r3, #99	; 0x63
 800a190:	2210      	movs	r2, #16
 800a192:	2100      	movs	r1, #0
 800a194:	4618      	mov	r0, r3
 800a196:	f001 fa8d 	bl	800b6b4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	2225      	movs	r2, #37	; 0x25
 800a19e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	2202      	movs	r2, #2
 800a1ae:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	f103 0210 	add.w	r2, r3, #16
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a1be:	2301      	movs	r3, #1
 800a1c0:	75fb      	strb	r3, [r7, #23]
      break;
 800a1c2:	e038      	b.n	800a236 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a1c4:	7afb      	ldrb	r3, [r7, #11]
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	68f8      	ldr	r0, [r7, #12]
 800a1ca:	f7ff fd3d 	bl	8009c48 <USBH_MSC_BOT_Process>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a1d2:	7dfb      	ldrb	r3, [r7, #23]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d12d      	bne.n	800a234 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1de:	3303      	adds	r3, #3
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1ea:	3302      	adds	r3, #2
 800a1ec:	781b      	ldrb	r3, [r3, #0]
 800a1ee:	021b      	lsls	r3, r3, #8
 800a1f0:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a1fe:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a206:	781b      	ldrb	r3, [r3, #0]
 800a208:	061b      	lsls	r3, r3, #24
 800a20a:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a216:	3307      	adds	r3, #7
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	b29a      	uxth	r2, r3
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a222:	3306      	adds	r3, #6
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	b29b      	uxth	r3, r3
 800a228:	021b      	lsls	r3, r3, #8
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	4313      	orrs	r3, r2
 800a22e:	b29a      	uxth	r2, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	809a      	strh	r2, [r3, #4]
      break;
 800a234:	bf00      	nop
  }

  return error;
 800a236:	7dfb      	ldrb	r3, [r7, #23]
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3718      	adds	r7, #24
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b086      	sub	sp, #24
 800a244:	af00      	add	r7, sp, #0
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	460b      	mov	r3, r1
 800a24a:	607a      	str	r2, [r7, #4]
 800a24c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800a24e:	2302      	movs	r3, #2
 800a250:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a258:	69db      	ldr	r3, [r3, #28]
 800a25a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a262:	2b01      	cmp	r3, #1
 800a264:	d002      	beq.n	800a26c <USBH_MSC_SCSI_Inquiry+0x2c>
 800a266:	2b02      	cmp	r3, #2
 800a268:	d03d      	beq.n	800a2e6 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800a26a:	e089      	b.n	800a380 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	2224      	movs	r2, #36	; 0x24
 800a270:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	2280      	movs	r2, #128	; 0x80
 800a276:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	220a      	movs	r2, #10
 800a27e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	3363      	adds	r3, #99	; 0x63
 800a286:	220a      	movs	r2, #10
 800a288:	2100      	movs	r1, #0
 800a28a:	4618      	mov	r0, r3
 800a28c:	f001 fa12 	bl	800b6b4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	2212      	movs	r2, #18
 800a294:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a298:	7afb      	ldrb	r3, [r7, #11]
 800a29a:	015b      	lsls	r3, r3, #5
 800a29c:	b2da      	uxtb	r2, r3
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	2224      	movs	r2, #36	; 0x24
 800a2b8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	2202      	movs	r2, #2
 800a2d0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	f103 0210 	add.w	r2, r3, #16
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	75fb      	strb	r3, [r7, #23]
      break;
 800a2e4:	e04c      	b.n	800a380 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a2e6:	7afb      	ldrb	r3, [r7, #11]
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	f7ff fcac 	bl	8009c48 <USBH_MSC_BOT_Process>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a2f4:	7dfb      	ldrb	r3, [r7, #23]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d141      	bne.n	800a37e <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800a2fa:	2222      	movs	r2, #34	; 0x22
 800a2fc:	2100      	movs	r1, #0
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f001 f9d8 	bl	800b6b4 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	f003 031f 	and.w	r3, r3, #31
 800a310:	b2da      	uxtb	r2, r3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	095b      	lsrs	r3, r3, #5
 800a320:	b2da      	uxtb	r2, r3
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a32c:	3301      	adds	r3, #1
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	b25b      	sxtb	r3, r3
 800a332:	2b00      	cmp	r3, #0
 800a334:	da03      	bge.n	800a33e <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2201      	movs	r2, #1
 800a33a:	709a      	strb	r2, [r3, #2]
 800a33c:	e002      	b.n	800a344 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	1cd8      	adds	r0, r3, #3
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a34e:	3308      	adds	r3, #8
 800a350:	2208      	movs	r2, #8
 800a352:	4619      	mov	r1, r3
 800a354:	f001 f9a0 	bl	800b698 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f103 000c 	add.w	r0, r3, #12
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a364:	3310      	adds	r3, #16
 800a366:	2210      	movs	r2, #16
 800a368:	4619      	mov	r1, r3
 800a36a:	f001 f995 	bl	800b698 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	331d      	adds	r3, #29
 800a372:	693a      	ldr	r2, [r7, #16]
 800a374:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800a378:	3220      	adds	r2, #32
 800a37a:	6812      	ldr	r2, [r2, #0]
 800a37c:	601a      	str	r2, [r3, #0]
      break;
 800a37e:	bf00      	nop
  }

  return error;
 800a380:	7dfb      	ldrb	r3, [r7, #23]
}
 800a382:	4618      	mov	r0, r3
 800a384:	3718      	adds	r7, #24
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}

0800a38a <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800a38a:	b580      	push	{r7, lr}
 800a38c:	b086      	sub	sp, #24
 800a38e:	af00      	add	r7, sp, #0
 800a390:	60f8      	str	r0, [r7, #12]
 800a392:	460b      	mov	r3, r1
 800a394:	607a      	str	r2, [r7, #4]
 800a396:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a398:	2302      	movs	r3, #2
 800a39a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3a2:	69db      	ldr	r3, [r3, #28]
 800a3a4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d002      	beq.n	800a3b6 <USBH_MSC_SCSI_RequestSense+0x2c>
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	d03d      	beq.n	800a430 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800a3b4:	e05d      	b.n	800a472 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	220e      	movs	r2, #14
 800a3ba:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	2280      	movs	r2, #128	; 0x80
 800a3c0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	220a      	movs	r2, #10
 800a3c8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	3363      	adds	r3, #99	; 0x63
 800a3d0:	2210      	movs	r2, #16
 800a3d2:	2100      	movs	r1, #0
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f001 f96d 	bl	800b6b4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	2203      	movs	r2, #3
 800a3de:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a3e2:	7afb      	ldrb	r3, [r7, #11]
 800a3e4:	015b      	lsls	r3, r3, #5
 800a3e6:	b2da      	uxtb	r2, r3
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	220e      	movs	r2, #14
 800a402:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	2200      	movs	r2, #0
 800a40a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	2201      	movs	r2, #1
 800a412:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	2202      	movs	r2, #2
 800a41a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	f103 0210 	add.w	r2, r3, #16
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a42a:	2301      	movs	r3, #1
 800a42c:	75fb      	strb	r3, [r7, #23]
      break;
 800a42e:	e020      	b.n	800a472 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a430:	7afb      	ldrb	r3, [r7, #11]
 800a432:	4619      	mov	r1, r3
 800a434:	68f8      	ldr	r0, [r7, #12]
 800a436:	f7ff fc07 	bl	8009c48 <USBH_MSC_BOT_Process>
 800a43a:	4603      	mov	r3, r0
 800a43c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a43e:	7dfb      	ldrb	r3, [r7, #23]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d115      	bne.n	800a470 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a44a:	3302      	adds	r3, #2
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	f003 030f 	and.w	r3, r3, #15
 800a452:	b2da      	uxtb	r2, r3
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a45e:	7b1a      	ldrb	r2, [r3, #12]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a46a:	7b5a      	ldrb	r2, [r3, #13]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	709a      	strb	r2, [r3, #2]
      break;
 800a470:	bf00      	nop
  }

  return error;
 800a472:	7dfb      	ldrb	r3, [r7, #23]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3718      	adds	r7, #24
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b086      	sub	sp, #24
 800a480:	af00      	add	r7, sp, #0
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	607a      	str	r2, [r7, #4]
 800a486:	603b      	str	r3, [r7, #0]
 800a488:	460b      	mov	r3, r1
 800a48a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a48c:	2302      	movs	r3, #2
 800a48e:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a496:	69db      	ldr	r3, [r3, #28]
 800a498:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d002      	beq.n	800a4aa <USBH_MSC_SCSI_Write+0x2e>
 800a4a4:	2b02      	cmp	r3, #2
 800a4a6:	d047      	beq.n	800a538 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a4a8:	e04e      	b.n	800a548 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	6a3b      	ldr	r3, [r7, #32]
 800a4b4:	fb03 f202 	mul.w	r2, r3, r2
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	220a      	movs	r2, #10
 800a4c8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	3363      	adds	r3, #99	; 0x63
 800a4d0:	2210      	movs	r2, #16
 800a4d2:	2100      	movs	r1, #0
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f001 f8ed 	bl	800b6b4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	222a      	movs	r2, #42	; 0x2a
 800a4de:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a4e2:	79fa      	ldrb	r2, [r7, #7]
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a4ea:	79ba      	ldrb	r2, [r7, #6]
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a4f2:	797a      	ldrb	r2, [r7, #5]
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a4fa:	1d3b      	adds	r3, r7, #4
 800a4fc:	781a      	ldrb	r2, [r3, #0]
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a504:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a50e:	f107 0320 	add.w	r3, r7, #32
 800a512:	781a      	ldrb	r2, [r3, #0]
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	2201      	movs	r2, #1
 800a51e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	2202      	movs	r2, #2
 800a526:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	683a      	ldr	r2, [r7, #0]
 800a52e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a532:	2301      	movs	r3, #1
 800a534:	75fb      	strb	r3, [r7, #23]
      break;
 800a536:	e007      	b.n	800a548 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a538:	7afb      	ldrb	r3, [r7, #11]
 800a53a:	4619      	mov	r1, r3
 800a53c:	68f8      	ldr	r0, [r7, #12]
 800a53e:	f7ff fb83 	bl	8009c48 <USBH_MSC_BOT_Process>
 800a542:	4603      	mov	r3, r0
 800a544:	75fb      	strb	r3, [r7, #23]
      break;
 800a546:	bf00      	nop
  }

  return error;
 800a548:	7dfb      	ldrb	r3, [r7, #23]
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3718      	adds	r7, #24
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800a552:	b580      	push	{r7, lr}
 800a554:	b086      	sub	sp, #24
 800a556:	af00      	add	r7, sp, #0
 800a558:	60f8      	str	r0, [r7, #12]
 800a55a:	607a      	str	r2, [r7, #4]
 800a55c:	603b      	str	r3, [r7, #0]
 800a55e:	460b      	mov	r3, r1
 800a560:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a562:	2302      	movs	r3, #2
 800a564:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a56c:	69db      	ldr	r3, [r3, #28]
 800a56e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a576:	2b01      	cmp	r3, #1
 800a578:	d002      	beq.n	800a580 <USBH_MSC_SCSI_Read+0x2e>
 800a57a:	2b02      	cmp	r3, #2
 800a57c:	d047      	beq.n	800a60e <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a57e:	e04e      	b.n	800a61e <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a586:	461a      	mov	r2, r3
 800a588:	6a3b      	ldr	r3, [r7, #32]
 800a58a:	fb03 f202 	mul.w	r2, r3, r2
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	2280      	movs	r2, #128	; 0x80
 800a596:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	220a      	movs	r2, #10
 800a59e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	3363      	adds	r3, #99	; 0x63
 800a5a6:	2210      	movs	r2, #16
 800a5a8:	2100      	movs	r1, #0
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f001 f882 	bl	800b6b4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	2228      	movs	r2, #40	; 0x28
 800a5b4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a5b8:	79fa      	ldrb	r2, [r7, #7]
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a5c0:	79ba      	ldrb	r2, [r7, #6]
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a5c8:	797a      	ldrb	r2, [r7, #5]
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a5d0:	1d3b      	adds	r3, r7, #4
 800a5d2:	781a      	ldrb	r2, [r3, #0]
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a5da:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a5e4:	f107 0320 	add.w	r3, r7, #32
 800a5e8:	781a      	ldrb	r2, [r3, #0]
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	2202      	movs	r2, #2
 800a5fc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	683a      	ldr	r2, [r7, #0]
 800a604:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a608:	2301      	movs	r3, #1
 800a60a:	75fb      	strb	r3, [r7, #23]
      break;
 800a60c:	e007      	b.n	800a61e <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a60e:	7afb      	ldrb	r3, [r7, #11]
 800a610:	4619      	mov	r1, r3
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	f7ff fb18 	bl	8009c48 <USBH_MSC_BOT_Process>
 800a618:	4603      	mov	r3, r0
 800a61a:	75fb      	strb	r3, [r7, #23]
      break;
 800a61c:	bf00      	nop
  }

  return error;
 800a61e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a620:	4618      	mov	r0, r3
 800a622:	3718      	adds	r7, #24
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	4613      	mov	r3, r2
 800a634:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d101      	bne.n	800a640 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a63c:	2302      	movs	r3, #2
 800a63e:	e029      	b.n	800a694 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	79fa      	ldrb	r2, [r7, #7]
 800a644:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2200      	movs	r2, #0
 800a64c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2200      	movs	r2, #0
 800a654:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f000 f81f 	bl	800a69c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2200      	movs	r2, #0
 800a662:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2200      	movs	r2, #0
 800a66a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2200      	movs	r2, #0
 800a672:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2200      	movs	r2, #0
 800a67a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d003      	beq.n	800a68c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	68ba      	ldr	r2, [r7, #8]
 800a688:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a68c:	68f8      	ldr	r0, [r7, #12]
 800a68e:	f000 fdf3 	bl	800b278 <USBH_LL_Init>

  return USBH_OK;
 800a692:	2300      	movs	r3, #0
}
 800a694:	4618      	mov	r0, r3
 800a696:	3710      	adds	r7, #16
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b085      	sub	sp, #20
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	60fb      	str	r3, [r7, #12]
 800a6ac:	e009      	b.n	800a6c2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	33e0      	adds	r3, #224	; 0xe0
 800a6b4:	009b      	lsls	r3, r3, #2
 800a6b6:	4413      	add	r3, r2
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	3301      	adds	r3, #1
 800a6c0:	60fb      	str	r3, [r7, #12]
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2b0f      	cmp	r3, #15
 800a6c6:	d9f2      	bls.n	800a6ae <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	60fb      	str	r3, [r7, #12]
 800a6cc:	e009      	b.n	800a6e2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	4413      	add	r3, r2
 800a6d4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a6d8:	2200      	movs	r2, #0
 800a6da:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	60fb      	str	r3, [r7, #12]
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6e8:	d3f1      	bcc.n	800a6ce <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2201      	movs	r2, #1
 800a708:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2240      	movs	r2, #64	; 0x40
 800a70e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2200      	movs	r2, #0
 800a714:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2201      	movs	r2, #1
 800a722:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2200      	movs	r2, #0
 800a72a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a736:	2300      	movs	r3, #0
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3714      	adds	r7, #20
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a744:	b480      	push	{r7}
 800a746:	b085      	sub	sp, #20
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a74e:	2300      	movs	r3, #0
 800a750:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d016      	beq.n	800a786 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d10e      	bne.n	800a780 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a768:	1c59      	adds	r1, r3, #1
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	33de      	adds	r3, #222	; 0xde
 800a774:	6839      	ldr	r1, [r7, #0]
 800a776:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a77a:	2300      	movs	r3, #0
 800a77c:	73fb      	strb	r3, [r7, #15]
 800a77e:	e004      	b.n	800a78a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a780:	2302      	movs	r3, #2
 800a782:	73fb      	strb	r3, [r7, #15]
 800a784:	e001      	b.n	800a78a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a786:	2302      	movs	r3, #2
 800a788:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a78a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3714      	adds	r7, #20
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a798:	b480      	push	{r7}
 800a79a:	b085      	sub	sp, #20
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a7ae:	78fa      	ldrb	r2, [r7, #3]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d204      	bcs.n	800a7be <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	78fa      	ldrb	r2, [r7, #3]
 800a7b8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a7bc:	e001      	b.n	800a7c2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a7be:	2302      	movs	r3, #2
 800a7c0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a7c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3714      	adds	r7, #20
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr

0800a7d0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b087      	sub	sp, #28
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	4608      	mov	r0, r1
 800a7da:	4611      	mov	r1, r2
 800a7dc:	461a      	mov	r2, r3
 800a7de:	4603      	mov	r3, r0
 800a7e0:	70fb      	strb	r3, [r7, #3]
 800a7e2:	460b      	mov	r3, r1
 800a7e4:	70bb      	strb	r3, [r7, #2]
 800a7e6:	4613      	mov	r3, r2
 800a7e8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a7f8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a7fa:	e025      	b.n	800a848 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a7fc:	7dfb      	ldrb	r3, [r7, #23]
 800a7fe:	221a      	movs	r2, #26
 800a800:	fb02 f303 	mul.w	r3, r2, r3
 800a804:	3308      	adds	r3, #8
 800a806:	68fa      	ldr	r2, [r7, #12]
 800a808:	4413      	add	r3, r2
 800a80a:	3302      	adds	r3, #2
 800a80c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	795b      	ldrb	r3, [r3, #5]
 800a812:	78fa      	ldrb	r2, [r7, #3]
 800a814:	429a      	cmp	r2, r3
 800a816:	d002      	beq.n	800a81e <USBH_FindInterface+0x4e>
 800a818:	78fb      	ldrb	r3, [r7, #3]
 800a81a:	2bff      	cmp	r3, #255	; 0xff
 800a81c:	d111      	bne.n	800a842 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a822:	78ba      	ldrb	r2, [r7, #2]
 800a824:	429a      	cmp	r2, r3
 800a826:	d002      	beq.n	800a82e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a828:	78bb      	ldrb	r3, [r7, #2]
 800a82a:	2bff      	cmp	r3, #255	; 0xff
 800a82c:	d109      	bne.n	800a842 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a832:	787a      	ldrb	r2, [r7, #1]
 800a834:	429a      	cmp	r2, r3
 800a836:	d002      	beq.n	800a83e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a838:	787b      	ldrb	r3, [r7, #1]
 800a83a:	2bff      	cmp	r3, #255	; 0xff
 800a83c:	d101      	bne.n	800a842 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a83e:	7dfb      	ldrb	r3, [r7, #23]
 800a840:	e006      	b.n	800a850 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a842:	7dfb      	ldrb	r3, [r7, #23]
 800a844:	3301      	adds	r3, #1
 800a846:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a848:	7dfb      	ldrb	r3, [r7, #23]
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d9d6      	bls.n	800a7fc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a84e:	23ff      	movs	r3, #255	; 0xff
}
 800a850:	4618      	mov	r0, r3
 800a852:	371c      	adds	r7, #28
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 fd43 	bl	800b2f0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a86a:	2101      	movs	r1, #1
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 fe1a 	bl	800b4a6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a872:	2300      	movs	r3, #0
}
 800a874:	4618      	mov	r0, r3
 800a876:	3708      	adds	r7, #8
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b083      	sub	sp, #12
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	683a      	ldr	r2, [r7, #0]
 800a88a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a88e:	bf00      	nop
 800a890:	370c      	adds	r7, #12
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr

0800a89a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a89a:	b580      	push	{r7, lr}
 800a89c:	b082      	sub	sp, #8
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a8a8:	1c5a      	adds	r2, r3, #1
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 f804 	bl	800a8be <USBH_HandleSof>
}
 800a8b6:	bf00      	nop
 800a8b8:	3708      	adds	r7, #8
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}

0800a8be <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a8be:	b580      	push	{r7, lr}
 800a8c0:	b082      	sub	sp, #8
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	2b0b      	cmp	r3, #11
 800a8ce:	d10a      	bne.n	800a8e6 <USBH_HandleSof+0x28>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d005      	beq.n	800a8e6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8e0:	699b      	ldr	r3, [r3, #24]
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	4798      	blx	r3
  }
}
 800a8e6:	bf00      	nop
 800a8e8:	3708      	adds	r7, #8
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}

0800a8ee <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a8ee:	b480      	push	{r7}
 800a8f0:	b083      	sub	sp, #12
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a8fe:	bf00      	nop
}
 800a900:	370c      	adds	r7, #12
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr

0800a90a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a90a:	b480      	push	{r7}
 800a90c:	b083      	sub	sp, #12
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a91a:	bf00      	nop
}
 800a91c:	370c      	adds	r7, #12
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr

0800a926 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a926:	b480      	push	{r7}
 800a928:	b083      	sub	sp, #12
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2201      	movs	r2, #1
 800a932:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2200      	movs	r2, #0
 800a942:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a946:	2300      	movs	r3, #0
}
 800a948:	4618      	mov	r0, r3
 800a94a:	370c      	adds	r7, #12
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr

0800a954 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2201      	movs	r2, #1
 800a960:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2200      	movs	r2, #0
 800a968:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f000 fcd6 	bl	800b326 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	791b      	ldrb	r3, [r3, #4]
 800a97e:	4619      	mov	r1, r3
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 fad1 	bl	800af28 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	795b      	ldrb	r3, [r3, #5]
 800a98a:	4619      	mov	r1, r3
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 facb 	bl	800af28 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a992:	2300      	movs	r3, #0
}
 800a994:	4618      	mov	r0, r3
 800a996:	3708      	adds	r7, #8
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b082      	sub	sp, #8
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	789b      	ldrb	r3, [r3, #2]
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d10f      	bne.n	800a9d0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2202      	movs	r2, #2
 800a9b4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a9c2:	78fb      	ldrb	r3, [r7, #3]
 800a9c4:	b29a      	uxth	r2, r3
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f000 f805 	bl	800a9e4 <USBH_CtlReq>
 800a9da:	4603      	mov	r3, r0
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3708      	adds	r7, #8
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b086      	sub	sp, #24
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	60f8      	str	r0, [r7, #12]
 800a9ec:	60b9      	str	r1, [r7, #8]
 800a9ee:	4613      	mov	r3, r2
 800a9f0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	789b      	ldrb	r3, [r3, #2]
 800a9fa:	2b01      	cmp	r3, #1
 800a9fc:	d002      	beq.n	800aa04 <USBH_CtlReq+0x20>
 800a9fe:	2b02      	cmp	r3, #2
 800aa00:	d00f      	beq.n	800aa22 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800aa02:	e027      	b.n	800aa54 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	68ba      	ldr	r2, [r7, #8]
 800aa08:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	88fa      	ldrh	r2, [r7, #6]
 800aa0e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2201      	movs	r2, #1
 800aa14:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2202      	movs	r2, #2
 800aa1a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	75fb      	strb	r3, [r7, #23]
      break;
 800aa20:	e018      	b.n	800aa54 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800aa22:	68f8      	ldr	r0, [r7, #12]
 800aa24:	f000 f81c 	bl	800aa60 <USBH_HandleControl>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800aa2c:	7dfb      	ldrb	r3, [r7, #23]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d002      	beq.n	800aa38 <USBH_CtlReq+0x54>
 800aa32:	7dfb      	ldrb	r3, [r7, #23]
 800aa34:	2b03      	cmp	r3, #3
 800aa36:	d106      	bne.n	800aa46 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2200      	movs	r2, #0
 800aa42:	761a      	strb	r2, [r3, #24]
      break;
 800aa44:	e005      	b.n	800aa52 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800aa46:	7dfb      	ldrb	r3, [r7, #23]
 800aa48:	2b02      	cmp	r3, #2
 800aa4a:	d102      	bne.n	800aa52 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	709a      	strb	r2, [r3, #2]
      break;
 800aa52:	bf00      	nop
  }
  return status;
 800aa54:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3718      	adds	r7, #24
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
	...

0800aa60 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b086      	sub	sp, #24
 800aa64:	af02      	add	r7, sp, #8
 800aa66:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	7e1b      	ldrb	r3, [r3, #24]
 800aa74:	3b01      	subs	r3, #1
 800aa76:	2b0a      	cmp	r3, #10
 800aa78:	f200 8156 	bhi.w	800ad28 <USBH_HandleControl+0x2c8>
 800aa7c:	a201      	add	r2, pc, #4	; (adr r2, 800aa84 <USBH_HandleControl+0x24>)
 800aa7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa82:	bf00      	nop
 800aa84:	0800aab1 	.word	0x0800aab1
 800aa88:	0800aacb 	.word	0x0800aacb
 800aa8c:	0800ab35 	.word	0x0800ab35
 800aa90:	0800ab5b 	.word	0x0800ab5b
 800aa94:	0800ab93 	.word	0x0800ab93
 800aa98:	0800abbd 	.word	0x0800abbd
 800aa9c:	0800ac0f 	.word	0x0800ac0f
 800aaa0:	0800ac31 	.word	0x0800ac31
 800aaa4:	0800ac6d 	.word	0x0800ac6d
 800aaa8:	0800ac93 	.word	0x0800ac93
 800aaac:	0800acd1 	.word	0x0800acd1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f103 0110 	add.w	r1, r3, #16
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	795b      	ldrb	r3, [r3, #5]
 800aaba:	461a      	mov	r2, r3
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f000 f943 	bl	800ad48 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2202      	movs	r2, #2
 800aac6:	761a      	strb	r2, [r3, #24]
      break;
 800aac8:	e139      	b.n	800ad3e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	795b      	ldrb	r3, [r3, #5]
 800aace:	4619      	mov	r1, r3
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f000 fcd5 	bl	800b480 <USBH_LL_GetURBState>
 800aad6:	4603      	mov	r3, r0
 800aad8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800aada:	7bbb      	ldrb	r3, [r7, #14]
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d11e      	bne.n	800ab1e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	7c1b      	ldrb	r3, [r3, #16]
 800aae4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aae8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	8adb      	ldrh	r3, [r3, #22]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d00a      	beq.n	800ab08 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800aaf2:	7b7b      	ldrb	r3, [r7, #13]
 800aaf4:	2b80      	cmp	r3, #128	; 0x80
 800aaf6:	d103      	bne.n	800ab00 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2203      	movs	r2, #3
 800aafc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800aafe:	e115      	b.n	800ad2c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2205      	movs	r2, #5
 800ab04:	761a      	strb	r2, [r3, #24]
      break;
 800ab06:	e111      	b.n	800ad2c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800ab08:	7b7b      	ldrb	r3, [r7, #13]
 800ab0a:	2b80      	cmp	r3, #128	; 0x80
 800ab0c:	d103      	bne.n	800ab16 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2209      	movs	r2, #9
 800ab12:	761a      	strb	r2, [r3, #24]
      break;
 800ab14:	e10a      	b.n	800ad2c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2207      	movs	r2, #7
 800ab1a:	761a      	strb	r2, [r3, #24]
      break;
 800ab1c:	e106      	b.n	800ad2c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ab1e:	7bbb      	ldrb	r3, [r7, #14]
 800ab20:	2b04      	cmp	r3, #4
 800ab22:	d003      	beq.n	800ab2c <USBH_HandleControl+0xcc>
 800ab24:	7bbb      	ldrb	r3, [r7, #14]
 800ab26:	2b02      	cmp	r3, #2
 800ab28:	f040 8100 	bne.w	800ad2c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	220b      	movs	r2, #11
 800ab30:	761a      	strb	r2, [r3, #24]
      break;
 800ab32:	e0fb      	b.n	800ad2c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ab3a:	b29a      	uxth	r2, r3
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6899      	ldr	r1, [r3, #8]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	899a      	ldrh	r2, [r3, #12]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	791b      	ldrb	r3, [r3, #4]
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 f93a 	bl	800adc6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2204      	movs	r2, #4
 800ab56:	761a      	strb	r2, [r3, #24]
      break;
 800ab58:	e0f1      	b.n	800ad3e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	791b      	ldrb	r3, [r3, #4]
 800ab5e:	4619      	mov	r1, r3
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 fc8d 	bl	800b480 <USBH_LL_GetURBState>
 800ab66:	4603      	mov	r3, r0
 800ab68:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ab6a:	7bbb      	ldrb	r3, [r7, #14]
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d102      	bne.n	800ab76 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2209      	movs	r2, #9
 800ab74:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ab76:	7bbb      	ldrb	r3, [r7, #14]
 800ab78:	2b05      	cmp	r3, #5
 800ab7a:	d102      	bne.n	800ab82 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ab7c:	2303      	movs	r3, #3
 800ab7e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ab80:	e0d6      	b.n	800ad30 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ab82:	7bbb      	ldrb	r3, [r7, #14]
 800ab84:	2b04      	cmp	r3, #4
 800ab86:	f040 80d3 	bne.w	800ad30 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	220b      	movs	r2, #11
 800ab8e:	761a      	strb	r2, [r3, #24]
      break;
 800ab90:	e0ce      	b.n	800ad30 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6899      	ldr	r1, [r3, #8]
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	899a      	ldrh	r2, [r3, #12]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	795b      	ldrb	r3, [r3, #5]
 800ab9e:	2001      	movs	r0, #1
 800aba0:	9000      	str	r0, [sp, #0]
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f000 f8ea 	bl	800ad7c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800abae:	b29a      	uxth	r2, r3
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2206      	movs	r2, #6
 800abb8:	761a      	strb	r2, [r3, #24]
      break;
 800abba:	e0c0      	b.n	800ad3e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	795b      	ldrb	r3, [r3, #5]
 800abc0:	4619      	mov	r1, r3
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 fc5c 	bl	800b480 <USBH_LL_GetURBState>
 800abc8:	4603      	mov	r3, r0
 800abca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800abcc:	7bbb      	ldrb	r3, [r7, #14]
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d103      	bne.n	800abda <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2207      	movs	r2, #7
 800abd6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800abd8:	e0ac      	b.n	800ad34 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800abda:	7bbb      	ldrb	r3, [r7, #14]
 800abdc:	2b05      	cmp	r3, #5
 800abde:	d105      	bne.n	800abec <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	220c      	movs	r2, #12
 800abe4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800abe6:	2303      	movs	r3, #3
 800abe8:	73fb      	strb	r3, [r7, #15]
      break;
 800abea:	e0a3      	b.n	800ad34 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800abec:	7bbb      	ldrb	r3, [r7, #14]
 800abee:	2b02      	cmp	r3, #2
 800abf0:	d103      	bne.n	800abfa <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2205      	movs	r2, #5
 800abf6:	761a      	strb	r2, [r3, #24]
      break;
 800abf8:	e09c      	b.n	800ad34 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800abfa:	7bbb      	ldrb	r3, [r7, #14]
 800abfc:	2b04      	cmp	r3, #4
 800abfe:	f040 8099 	bne.w	800ad34 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	220b      	movs	r2, #11
 800ac06:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ac08:	2302      	movs	r3, #2
 800ac0a:	73fb      	strb	r3, [r7, #15]
      break;
 800ac0c:	e092      	b.n	800ad34 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	791b      	ldrb	r3, [r3, #4]
 800ac12:	2200      	movs	r2, #0
 800ac14:	2100      	movs	r1, #0
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 f8d5 	bl	800adc6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ac22:	b29a      	uxth	r2, r3
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2208      	movs	r2, #8
 800ac2c:	761a      	strb	r2, [r3, #24]

      break;
 800ac2e:	e086      	b.n	800ad3e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	791b      	ldrb	r3, [r3, #4]
 800ac34:	4619      	mov	r1, r3
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 fc22 	bl	800b480 <USBH_LL_GetURBState>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ac40:	7bbb      	ldrb	r3, [r7, #14]
 800ac42:	2b01      	cmp	r3, #1
 800ac44:	d105      	bne.n	800ac52 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	220d      	movs	r2, #13
 800ac4a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ac50:	e072      	b.n	800ad38 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800ac52:	7bbb      	ldrb	r3, [r7, #14]
 800ac54:	2b04      	cmp	r3, #4
 800ac56:	d103      	bne.n	800ac60 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	220b      	movs	r2, #11
 800ac5c:	761a      	strb	r2, [r3, #24]
      break;
 800ac5e:	e06b      	b.n	800ad38 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800ac60:	7bbb      	ldrb	r3, [r7, #14]
 800ac62:	2b05      	cmp	r3, #5
 800ac64:	d168      	bne.n	800ad38 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800ac66:	2303      	movs	r3, #3
 800ac68:	73fb      	strb	r3, [r7, #15]
      break;
 800ac6a:	e065      	b.n	800ad38 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	795b      	ldrb	r3, [r3, #5]
 800ac70:	2201      	movs	r2, #1
 800ac72:	9200      	str	r2, [sp, #0]
 800ac74:	2200      	movs	r2, #0
 800ac76:	2100      	movs	r1, #0
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 f87f 	bl	800ad7c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ac84:	b29a      	uxth	r2, r3
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	220a      	movs	r2, #10
 800ac8e:	761a      	strb	r2, [r3, #24]
      break;
 800ac90:	e055      	b.n	800ad3e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	795b      	ldrb	r3, [r3, #5]
 800ac96:	4619      	mov	r1, r3
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 fbf1 	bl	800b480 <USBH_LL_GetURBState>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800aca2:	7bbb      	ldrb	r3, [r7, #14]
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d105      	bne.n	800acb4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800aca8:	2300      	movs	r3, #0
 800acaa:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	220d      	movs	r2, #13
 800acb0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800acb2:	e043      	b.n	800ad3c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800acb4:	7bbb      	ldrb	r3, [r7, #14]
 800acb6:	2b02      	cmp	r3, #2
 800acb8:	d103      	bne.n	800acc2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2209      	movs	r2, #9
 800acbe:	761a      	strb	r2, [r3, #24]
      break;
 800acc0:	e03c      	b.n	800ad3c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800acc2:	7bbb      	ldrb	r3, [r7, #14]
 800acc4:	2b04      	cmp	r3, #4
 800acc6:	d139      	bne.n	800ad3c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	220b      	movs	r2, #11
 800accc:	761a      	strb	r2, [r3, #24]
      break;
 800acce:	e035      	b.n	800ad3c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	7e5b      	ldrb	r3, [r3, #25]
 800acd4:	3301      	adds	r3, #1
 800acd6:	b2da      	uxtb	r2, r3
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	765a      	strb	r2, [r3, #25]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	7e5b      	ldrb	r3, [r3, #25]
 800ace0:	2b02      	cmp	r3, #2
 800ace2:	d806      	bhi.n	800acf2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2201      	movs	r2, #1
 800ace8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2201      	movs	r2, #1
 800acee:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800acf0:	e025      	b.n	800ad3e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800acf8:	2106      	movs	r1, #6
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2200      	movs	r2, #0
 800ad02:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	795b      	ldrb	r3, [r3, #5]
 800ad08:	4619      	mov	r1, r3
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 f90c 	bl	800af28 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	791b      	ldrb	r3, [r3, #4]
 800ad14:	4619      	mov	r1, r3
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 f906 	bl	800af28 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ad22:	2302      	movs	r3, #2
 800ad24:	73fb      	strb	r3, [r7, #15]
      break;
 800ad26:	e00a      	b.n	800ad3e <USBH_HandleControl+0x2de>

    default:
      break;
 800ad28:	bf00      	nop
 800ad2a:	e008      	b.n	800ad3e <USBH_HandleControl+0x2de>
      break;
 800ad2c:	bf00      	nop
 800ad2e:	e006      	b.n	800ad3e <USBH_HandleControl+0x2de>
      break;
 800ad30:	bf00      	nop
 800ad32:	e004      	b.n	800ad3e <USBH_HandleControl+0x2de>
      break;
 800ad34:	bf00      	nop
 800ad36:	e002      	b.n	800ad3e <USBH_HandleControl+0x2de>
      break;
 800ad38:	bf00      	nop
 800ad3a:	e000      	b.n	800ad3e <USBH_HandleControl+0x2de>
      break;
 800ad3c:	bf00      	nop
  }

  return status;
 800ad3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3710      	adds	r7, #16
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b088      	sub	sp, #32
 800ad4c:	af04      	add	r7, sp, #16
 800ad4e:	60f8      	str	r0, [r7, #12]
 800ad50:	60b9      	str	r1, [r7, #8]
 800ad52:	4613      	mov	r3, r2
 800ad54:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ad56:	79f9      	ldrb	r1, [r7, #7]
 800ad58:	2300      	movs	r3, #0
 800ad5a:	9303      	str	r3, [sp, #12]
 800ad5c:	2308      	movs	r3, #8
 800ad5e:	9302      	str	r3, [sp, #8]
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	9301      	str	r3, [sp, #4]
 800ad64:	2300      	movs	r3, #0
 800ad66:	9300      	str	r3, [sp, #0]
 800ad68:	2300      	movs	r3, #0
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	68f8      	ldr	r0, [r7, #12]
 800ad6e:	f000 fb56 	bl	800b41e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800ad72:	2300      	movs	r3, #0
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3710      	adds	r7, #16
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b088      	sub	sp, #32
 800ad80:	af04      	add	r7, sp, #16
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	60b9      	str	r1, [r7, #8]
 800ad86:	4611      	mov	r1, r2
 800ad88:	461a      	mov	r2, r3
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	80fb      	strh	r3, [r7, #6]
 800ad8e:	4613      	mov	r3, r2
 800ad90:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d001      	beq.n	800ada0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ada0:	7979      	ldrb	r1, [r7, #5]
 800ada2:	7e3b      	ldrb	r3, [r7, #24]
 800ada4:	9303      	str	r3, [sp, #12]
 800ada6:	88fb      	ldrh	r3, [r7, #6]
 800ada8:	9302      	str	r3, [sp, #8]
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	9301      	str	r3, [sp, #4]
 800adae:	2301      	movs	r3, #1
 800adb0:	9300      	str	r3, [sp, #0]
 800adb2:	2300      	movs	r3, #0
 800adb4:	2200      	movs	r2, #0
 800adb6:	68f8      	ldr	r0, [r7, #12]
 800adb8:	f000 fb31 	bl	800b41e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800adbc:	2300      	movs	r3, #0
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3710      	adds	r7, #16
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}

0800adc6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b088      	sub	sp, #32
 800adca:	af04      	add	r7, sp, #16
 800adcc:	60f8      	str	r0, [r7, #12]
 800adce:	60b9      	str	r1, [r7, #8]
 800add0:	4611      	mov	r1, r2
 800add2:	461a      	mov	r2, r3
 800add4:	460b      	mov	r3, r1
 800add6:	80fb      	strh	r3, [r7, #6]
 800add8:	4613      	mov	r3, r2
 800adda:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800addc:	7979      	ldrb	r1, [r7, #5]
 800adde:	2300      	movs	r3, #0
 800ade0:	9303      	str	r3, [sp, #12]
 800ade2:	88fb      	ldrh	r3, [r7, #6]
 800ade4:	9302      	str	r3, [sp, #8]
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	9301      	str	r3, [sp, #4]
 800adea:	2301      	movs	r3, #1
 800adec:	9300      	str	r3, [sp, #0]
 800adee:	2300      	movs	r3, #0
 800adf0:	2201      	movs	r2, #1
 800adf2:	68f8      	ldr	r0, [r7, #12]
 800adf4:	f000 fb13 	bl	800b41e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800adf8:	2300      	movs	r3, #0

}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3710      	adds	r7, #16
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}

0800ae02 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b088      	sub	sp, #32
 800ae06:	af04      	add	r7, sp, #16
 800ae08:	60f8      	str	r0, [r7, #12]
 800ae0a:	60b9      	str	r1, [r7, #8]
 800ae0c:	4611      	mov	r1, r2
 800ae0e:	461a      	mov	r2, r3
 800ae10:	460b      	mov	r3, r1
 800ae12:	80fb      	strh	r3, [r7, #6]
 800ae14:	4613      	mov	r3, r2
 800ae16:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d001      	beq.n	800ae26 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ae22:	2300      	movs	r3, #0
 800ae24:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ae26:	7979      	ldrb	r1, [r7, #5]
 800ae28:	7e3b      	ldrb	r3, [r7, #24]
 800ae2a:	9303      	str	r3, [sp, #12]
 800ae2c:	88fb      	ldrh	r3, [r7, #6]
 800ae2e:	9302      	str	r3, [sp, #8]
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	9301      	str	r3, [sp, #4]
 800ae34:	2301      	movs	r3, #1
 800ae36:	9300      	str	r3, [sp, #0]
 800ae38:	2302      	movs	r3, #2
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	68f8      	ldr	r0, [r7, #12]
 800ae3e:	f000 faee 	bl	800b41e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ae42:	2300      	movs	r3, #0
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3710      	adds	r7, #16
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b088      	sub	sp, #32
 800ae50:	af04      	add	r7, sp, #16
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	4611      	mov	r1, r2
 800ae58:	461a      	mov	r2, r3
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	80fb      	strh	r3, [r7, #6]
 800ae5e:	4613      	mov	r3, r2
 800ae60:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ae62:	7979      	ldrb	r1, [r7, #5]
 800ae64:	2300      	movs	r3, #0
 800ae66:	9303      	str	r3, [sp, #12]
 800ae68:	88fb      	ldrh	r3, [r7, #6]
 800ae6a:	9302      	str	r3, [sp, #8]
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	9301      	str	r3, [sp, #4]
 800ae70:	2301      	movs	r3, #1
 800ae72:	9300      	str	r3, [sp, #0]
 800ae74:	2302      	movs	r3, #2
 800ae76:	2201      	movs	r2, #1
 800ae78:	68f8      	ldr	r0, [r7, #12]
 800ae7a:	f000 fad0 	bl	800b41e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ae7e:	2300      	movs	r3, #0
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3710      	adds	r7, #16
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b086      	sub	sp, #24
 800ae8c:	af04      	add	r7, sp, #16
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	4608      	mov	r0, r1
 800ae92:	4611      	mov	r1, r2
 800ae94:	461a      	mov	r2, r3
 800ae96:	4603      	mov	r3, r0
 800ae98:	70fb      	strb	r3, [r7, #3]
 800ae9a:	460b      	mov	r3, r1
 800ae9c:	70bb      	strb	r3, [r7, #2]
 800ae9e:	4613      	mov	r3, r2
 800aea0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800aea2:	7878      	ldrb	r0, [r7, #1]
 800aea4:	78ba      	ldrb	r2, [r7, #2]
 800aea6:	78f9      	ldrb	r1, [r7, #3]
 800aea8:	8b3b      	ldrh	r3, [r7, #24]
 800aeaa:	9302      	str	r3, [sp, #8]
 800aeac:	7d3b      	ldrb	r3, [r7, #20]
 800aeae:	9301      	str	r3, [sp, #4]
 800aeb0:	7c3b      	ldrb	r3, [r7, #16]
 800aeb2:	9300      	str	r3, [sp, #0]
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 fa63 	bl	800b382 <USBH_LL_OpenPipe>

  return USBH_OK;
 800aebc:	2300      	movs	r3, #0
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3708      	adds	r7, #8
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}

0800aec6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b082      	sub	sp, #8
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
 800aece:	460b      	mov	r3, r1
 800aed0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800aed2:	78fb      	ldrb	r3, [r7, #3]
 800aed4:	4619      	mov	r1, r3
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 fa82 	bl	800b3e0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800aedc:	2300      	movs	r3, #0
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3708      	adds	r7, #8
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b084      	sub	sp, #16
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
 800aeee:	460b      	mov	r3, r1
 800aef0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f000 f836 	bl	800af64 <USBH_GetFreePipe>
 800aef8:	4603      	mov	r3, r0
 800aefa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800aefc:	89fb      	ldrh	r3, [r7, #14]
 800aefe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af02:	4293      	cmp	r3, r2
 800af04:	d00a      	beq.n	800af1c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800af06:	78fa      	ldrb	r2, [r7, #3]
 800af08:	89fb      	ldrh	r3, [r7, #14]
 800af0a:	f003 030f 	and.w	r3, r3, #15
 800af0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800af12:	6879      	ldr	r1, [r7, #4]
 800af14:	33e0      	adds	r3, #224	; 0xe0
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	440b      	add	r3, r1
 800af1a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800af1c:	89fb      	ldrh	r3, [r7, #14]
 800af1e:	b2db      	uxtb	r3, r3
}
 800af20:	4618      	mov	r0, r3
 800af22:	3710      	adds	r7, #16
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	460b      	mov	r3, r1
 800af32:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800af34:	78fb      	ldrb	r3, [r7, #3]
 800af36:	2b0f      	cmp	r3, #15
 800af38:	d80d      	bhi.n	800af56 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800af3a:	78fb      	ldrb	r3, [r7, #3]
 800af3c:	687a      	ldr	r2, [r7, #4]
 800af3e:	33e0      	adds	r3, #224	; 0xe0
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	4413      	add	r3, r2
 800af44:	685a      	ldr	r2, [r3, #4]
 800af46:	78fb      	ldrb	r3, [r7, #3]
 800af48:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800af4c:	6879      	ldr	r1, [r7, #4]
 800af4e:	33e0      	adds	r3, #224	; 0xe0
 800af50:	009b      	lsls	r3, r3, #2
 800af52:	440b      	add	r3, r1
 800af54:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800af56:	2300      	movs	r3, #0
}
 800af58:	4618      	mov	r0, r3
 800af5a:	370c      	adds	r7, #12
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr

0800af64 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800af64:	b480      	push	{r7}
 800af66:	b085      	sub	sp, #20
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800af6c:	2300      	movs	r3, #0
 800af6e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800af70:	2300      	movs	r3, #0
 800af72:	73fb      	strb	r3, [r7, #15]
 800af74:	e00f      	b.n	800af96 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800af76:	7bfb      	ldrb	r3, [r7, #15]
 800af78:	687a      	ldr	r2, [r7, #4]
 800af7a:	33e0      	adds	r3, #224	; 0xe0
 800af7c:	009b      	lsls	r3, r3, #2
 800af7e:	4413      	add	r3, r2
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af86:	2b00      	cmp	r3, #0
 800af88:	d102      	bne.n	800af90 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800af8a:	7bfb      	ldrb	r3, [r7, #15]
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	e007      	b.n	800afa0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800af90:	7bfb      	ldrb	r3, [r7, #15]
 800af92:	3301      	adds	r3, #1
 800af94:	73fb      	strb	r3, [r7, #15]
 800af96:	7bfb      	ldrb	r3, [r7, #15]
 800af98:	2b0f      	cmp	r3, #15
 800af9a:	d9ec      	bls.n	800af76 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800af9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3714      	adds	r7, #20
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800afac:	b480      	push	{r7}
 800afae:	b087      	sub	sp, #28
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	4613      	mov	r3, r2
 800afb8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800afba:	2301      	movs	r3, #1
 800afbc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800afbe:	2300      	movs	r3, #0
 800afc0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800afc2:	4b1f      	ldr	r3, [pc, #124]	; (800b040 <FATFS_LinkDriverEx+0x94>)
 800afc4:	7a5b      	ldrb	r3, [r3, #9]
 800afc6:	b2db      	uxtb	r3, r3
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d131      	bne.n	800b030 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800afcc:	4b1c      	ldr	r3, [pc, #112]	; (800b040 <FATFS_LinkDriverEx+0x94>)
 800afce:	7a5b      	ldrb	r3, [r3, #9]
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	461a      	mov	r2, r3
 800afd4:	4b1a      	ldr	r3, [pc, #104]	; (800b040 <FATFS_LinkDriverEx+0x94>)
 800afd6:	2100      	movs	r1, #0
 800afd8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800afda:	4b19      	ldr	r3, [pc, #100]	; (800b040 <FATFS_LinkDriverEx+0x94>)
 800afdc:	7a5b      	ldrb	r3, [r3, #9]
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	4a17      	ldr	r2, [pc, #92]	; (800b040 <FATFS_LinkDriverEx+0x94>)
 800afe2:	009b      	lsls	r3, r3, #2
 800afe4:	4413      	add	r3, r2
 800afe6:	68fa      	ldr	r2, [r7, #12]
 800afe8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800afea:	4b15      	ldr	r3, [pc, #84]	; (800b040 <FATFS_LinkDriverEx+0x94>)
 800afec:	7a5b      	ldrb	r3, [r3, #9]
 800afee:	b2db      	uxtb	r3, r3
 800aff0:	461a      	mov	r2, r3
 800aff2:	4b13      	ldr	r3, [pc, #76]	; (800b040 <FATFS_LinkDriverEx+0x94>)
 800aff4:	4413      	add	r3, r2
 800aff6:	79fa      	ldrb	r2, [r7, #7]
 800aff8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800affa:	4b11      	ldr	r3, [pc, #68]	; (800b040 <FATFS_LinkDriverEx+0x94>)
 800affc:	7a5b      	ldrb	r3, [r3, #9]
 800affe:	b2db      	uxtb	r3, r3
 800b000:	1c5a      	adds	r2, r3, #1
 800b002:	b2d1      	uxtb	r1, r2
 800b004:	4a0e      	ldr	r2, [pc, #56]	; (800b040 <FATFS_LinkDriverEx+0x94>)
 800b006:	7251      	strb	r1, [r2, #9]
 800b008:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b00a:	7dbb      	ldrb	r3, [r7, #22]
 800b00c:	3330      	adds	r3, #48	; 0x30
 800b00e:	b2da      	uxtb	r2, r3
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	3301      	adds	r3, #1
 800b018:	223a      	movs	r2, #58	; 0x3a
 800b01a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	3302      	adds	r3, #2
 800b020:	222f      	movs	r2, #47	; 0x2f
 800b022:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	3303      	adds	r3, #3
 800b028:	2200      	movs	r2, #0
 800b02a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b02c:	2300      	movs	r3, #0
 800b02e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b030:	7dfb      	ldrb	r3, [r7, #23]
}
 800b032:	4618      	mov	r0, r3
 800b034:	371c      	adds	r7, #28
 800b036:	46bd      	mov	sp, r7
 800b038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03c:	4770      	bx	lr
 800b03e:	bf00      	nop
 800b040:	20003254 	.word	0x20003254

0800b044 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b04e:	2200      	movs	r2, #0
 800b050:	6839      	ldr	r1, [r7, #0]
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f7ff ffaa 	bl	800afac <FATFS_LinkDriverEx>
 800b058:	4603      	mov	r3, r0
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3708      	adds	r7, #8
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
	...

0800b064 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b068:	2201      	movs	r2, #1
 800b06a:	490e      	ldr	r1, [pc, #56]	; (800b0a4 <MX_USB_HOST_Init+0x40>)
 800b06c:	480e      	ldr	r0, [pc, #56]	; (800b0a8 <MX_USB_HOST_Init+0x44>)
 800b06e:	f7ff fadb 	bl	800a628 <USBH_Init>
 800b072:	4603      	mov	r3, r0
 800b074:	2b00      	cmp	r3, #0
 800b076:	d001      	beq.n	800b07c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b078:	f7f6 fd00 	bl	8001a7c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800b07c:	490b      	ldr	r1, [pc, #44]	; (800b0ac <MX_USB_HOST_Init+0x48>)
 800b07e:	480a      	ldr	r0, [pc, #40]	; (800b0a8 <MX_USB_HOST_Init+0x44>)
 800b080:	f7ff fb60 	bl	800a744 <USBH_RegisterClass>
 800b084:	4603      	mov	r3, r0
 800b086:	2b00      	cmp	r3, #0
 800b088:	d001      	beq.n	800b08e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b08a:	f7f6 fcf7 	bl	8001a7c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b08e:	4806      	ldr	r0, [pc, #24]	; (800b0a8 <MX_USB_HOST_Init+0x44>)
 800b090:	f7ff fbe4 	bl	800a85c <USBH_Start>
 800b094:	4603      	mov	r3, r0
 800b096:	2b00      	cmp	r3, #0
 800b098:	d001      	beq.n	800b09e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b09a:	f7f6 fcef 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b09e:	bf00      	nop
 800b0a0:	bd80      	pop	{r7, pc}
 800b0a2:	bf00      	nop
 800b0a4:	0800b0b1 	.word	0x0800b0b1
 800b0a8:	20003260 	.word	0x20003260
 800b0ac:	20000244 	.word	0x20000244

0800b0b0 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b083      	sub	sp, #12
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	460b      	mov	r3, r1
 800b0ba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b0bc:	78fb      	ldrb	r3, [r7, #3]
 800b0be:	3b01      	subs	r3, #1
 800b0c0:	2b04      	cmp	r3, #4
 800b0c2:	d819      	bhi.n	800b0f8 <USBH_UserProcess+0x48>
 800b0c4:	a201      	add	r2, pc, #4	; (adr r2, 800b0cc <USBH_UserProcess+0x1c>)
 800b0c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0ca:	bf00      	nop
 800b0cc:	0800b0f9 	.word	0x0800b0f9
 800b0d0:	0800b0e9 	.word	0x0800b0e9
 800b0d4:	0800b0f9 	.word	0x0800b0f9
 800b0d8:	0800b0f1 	.word	0x0800b0f1
 800b0dc:	0800b0e1 	.word	0x0800b0e1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b0e0:	4b09      	ldr	r3, [pc, #36]	; (800b108 <USBH_UserProcess+0x58>)
 800b0e2:	2203      	movs	r2, #3
 800b0e4:	701a      	strb	r2, [r3, #0]
  break;
 800b0e6:	e008      	b.n	800b0fa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b0e8:	4b07      	ldr	r3, [pc, #28]	; (800b108 <USBH_UserProcess+0x58>)
 800b0ea:	2202      	movs	r2, #2
 800b0ec:	701a      	strb	r2, [r3, #0]
  break;
 800b0ee:	e004      	b.n	800b0fa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b0f0:	4b05      	ldr	r3, [pc, #20]	; (800b108 <USBH_UserProcess+0x58>)
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	701a      	strb	r2, [r3, #0]
  break;
 800b0f6:	e000      	b.n	800b0fa <USBH_UserProcess+0x4a>

  default:
  break;
 800b0f8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b0fa:	bf00      	nop
 800b0fc:	370c      	adds	r7, #12
 800b0fe:	46bd      	mov	sp, r7
 800b100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b104:	4770      	bx	lr
 800b106:	bf00      	nop
 800b108:	20003638 	.word	0x20003638

0800b10c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b08a      	sub	sp, #40	; 0x28
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b114:	f107 0314 	add.w	r3, r7, #20
 800b118:	2200      	movs	r2, #0
 800b11a:	601a      	str	r2, [r3, #0]
 800b11c:	605a      	str	r2, [r3, #4]
 800b11e:	609a      	str	r2, [r3, #8]
 800b120:	60da      	str	r2, [r3, #12]
 800b122:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b12c:	d147      	bne.n	800b1be <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b12e:	2300      	movs	r3, #0
 800b130:	613b      	str	r3, [r7, #16]
 800b132:	4b25      	ldr	r3, [pc, #148]	; (800b1c8 <HAL_HCD_MspInit+0xbc>)
 800b134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b136:	4a24      	ldr	r2, [pc, #144]	; (800b1c8 <HAL_HCD_MspInit+0xbc>)
 800b138:	f043 0301 	orr.w	r3, r3, #1
 800b13c:	6313      	str	r3, [r2, #48]	; 0x30
 800b13e:	4b22      	ldr	r3, [pc, #136]	; (800b1c8 <HAL_HCD_MspInit+0xbc>)
 800b140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b142:	f003 0301 	and.w	r3, r3, #1
 800b146:	613b      	str	r3, [r7, #16]
 800b148:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b14a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b14e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b150:	2300      	movs	r3, #0
 800b152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b154:	2300      	movs	r3, #0
 800b156:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b158:	f107 0314 	add.w	r3, r7, #20
 800b15c:	4619      	mov	r1, r3
 800b15e:	481b      	ldr	r0, [pc, #108]	; (800b1cc <HAL_HCD_MspInit+0xc0>)
 800b160:	f7f7 fd9c 	bl	8002c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b164:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b16a:	2302      	movs	r3, #2
 800b16c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b16e:	2300      	movs	r3, #0
 800b170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b172:	2303      	movs	r3, #3
 800b174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b176:	230a      	movs	r3, #10
 800b178:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b17a:	f107 0314 	add.w	r3, r7, #20
 800b17e:	4619      	mov	r1, r3
 800b180:	4812      	ldr	r0, [pc, #72]	; (800b1cc <HAL_HCD_MspInit+0xc0>)
 800b182:	f7f7 fd8b 	bl	8002c9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b186:	4b10      	ldr	r3, [pc, #64]	; (800b1c8 <HAL_HCD_MspInit+0xbc>)
 800b188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b18a:	4a0f      	ldr	r2, [pc, #60]	; (800b1c8 <HAL_HCD_MspInit+0xbc>)
 800b18c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b190:	6353      	str	r3, [r2, #52]	; 0x34
 800b192:	2300      	movs	r3, #0
 800b194:	60fb      	str	r3, [r7, #12]
 800b196:	4b0c      	ldr	r3, [pc, #48]	; (800b1c8 <HAL_HCD_MspInit+0xbc>)
 800b198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b19a:	4a0b      	ldr	r2, [pc, #44]	; (800b1c8 <HAL_HCD_MspInit+0xbc>)
 800b19c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b1a0:	6453      	str	r3, [r2, #68]	; 0x44
 800b1a2:	4b09      	ldr	r3, [pc, #36]	; (800b1c8 <HAL_HCD_MspInit+0xbc>)
 800b1a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1aa:	60fb      	str	r3, [r7, #12]
 800b1ac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	2100      	movs	r1, #0
 800b1b2:	2043      	movs	r0, #67	; 0x43
 800b1b4:	f7f7 f96d 	bl	8002492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b1b8:	2043      	movs	r0, #67	; 0x43
 800b1ba:	f7f7 f986 	bl	80024ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b1be:	bf00      	nop
 800b1c0:	3728      	adds	r7, #40	; 0x28
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	bf00      	nop
 800b1c8:	40023800 	.word	0x40023800
 800b1cc:	40020000 	.word	0x40020000

0800b1d0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f7ff fb5b 	bl	800a89a <USBH_LL_IncTimer>
}
 800b1e4:	bf00      	nop
 800b1e6:	3708      	adds	r7, #8
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b082      	sub	sp, #8
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7ff fb93 	bl	800a926 <USBH_LL_Connect>
}
 800b200:	bf00      	nop
 800b202:	3708      	adds	r7, #8
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b216:	4618      	mov	r0, r3
 800b218:	f7ff fb9c 	bl	800a954 <USBH_LL_Disconnect>
}
 800b21c:	bf00      	nop
 800b21e:	3708      	adds	r7, #8
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b224:	b480      	push	{r7}
 800b226:	b083      	sub	sp, #12
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	460b      	mov	r3, r1
 800b22e:	70fb      	strb	r3, [r7, #3]
 800b230:	4613      	mov	r3, r2
 800b232:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b234:	bf00      	nop
 800b236:	370c      	adds	r7, #12
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr

0800b240 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b082      	sub	sp, #8
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b24e:	4618      	mov	r0, r3
 800b250:	f7ff fb4d 	bl	800a8ee <USBH_LL_PortEnabled>
}
 800b254:	bf00      	nop
 800b256:	3708      	adds	r7, #8
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b082      	sub	sp, #8
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b26a:	4618      	mov	r0, r3
 800b26c:	f7ff fb4d 	bl	800a90a <USBH_LL_PortDisabled>
}
 800b270:	bf00      	nop
 800b272:	3708      	adds	r7, #8
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b286:	2b01      	cmp	r3, #1
 800b288:	d12a      	bne.n	800b2e0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b28a:	4a18      	ldr	r2, [pc, #96]	; (800b2ec <USBH_LL_Init+0x74>)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	4a15      	ldr	r2, [pc, #84]	; (800b2ec <USBH_LL_Init+0x74>)
 800b296:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b29a:	4b14      	ldr	r3, [pc, #80]	; (800b2ec <USBH_LL_Init+0x74>)
 800b29c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b2a0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b2a2:	4b12      	ldr	r3, [pc, #72]	; (800b2ec <USBH_LL_Init+0x74>)
 800b2a4:	2208      	movs	r2, #8
 800b2a6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b2a8:	4b10      	ldr	r3, [pc, #64]	; (800b2ec <USBH_LL_Init+0x74>)
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b2ae:	4b0f      	ldr	r3, [pc, #60]	; (800b2ec <USBH_LL_Init+0x74>)
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b2b4:	4b0d      	ldr	r3, [pc, #52]	; (800b2ec <USBH_LL_Init+0x74>)
 800b2b6:	2202      	movs	r2, #2
 800b2b8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b2ba:	4b0c      	ldr	r3, [pc, #48]	; (800b2ec <USBH_LL_Init+0x74>)
 800b2bc:	2200      	movs	r2, #0
 800b2be:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b2c0:	480a      	ldr	r0, [pc, #40]	; (800b2ec <USBH_LL_Init+0x74>)
 800b2c2:	f7f7 ff9c 	bl	80031fe <HAL_HCD_Init>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d001      	beq.n	800b2d0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b2cc:	f7f6 fbd6 	bl	8001a7c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b2d0:	4806      	ldr	r0, [pc, #24]	; (800b2ec <USBH_LL_Init+0x74>)
 800b2d2:	f7f8 fb72 	bl	80039ba <HAL_HCD_GetCurrentFrame>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	4619      	mov	r1, r3
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f7ff face 	bl	800a87c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b2e0:	2300      	movs	r3, #0
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3708      	adds	r7, #8
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	2000363c 	.word	0x2000363c

0800b2f0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b084      	sub	sp, #16
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b306:	4618      	mov	r0, r3
 800b308:	f7f8 faef 	bl	80038ea <HAL_HCD_Start>
 800b30c:	4603      	mov	r3, r0
 800b30e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b310:	7bfb      	ldrb	r3, [r7, #15]
 800b312:	4618      	mov	r0, r3
 800b314:	f000 f93e 	bl	800b594 <USBH_Get_USB_Status>
 800b318:	4603      	mov	r3, r0
 800b31a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b31c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3710      	adds	r7, #16
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}

0800b326 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b326:	b580      	push	{r7, lr}
 800b328:	b084      	sub	sp, #16
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b32e:	2300      	movs	r3, #0
 800b330:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b332:	2300      	movs	r3, #0
 800b334:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b33c:	4618      	mov	r0, r3
 800b33e:	f7f8 faf7 	bl	8003930 <HAL_HCD_Stop>
 800b342:	4603      	mov	r3, r0
 800b344:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b346:	7bfb      	ldrb	r3, [r7, #15]
 800b348:	4618      	mov	r0, r3
 800b34a:	f000 f923 	bl	800b594 <USBH_Get_USB_Status>
 800b34e:	4603      	mov	r3, r0
 800b350:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b352:	7bbb      	ldrb	r3, [r7, #14]
}
 800b354:	4618      	mov	r0, r3
 800b356:	3710      	adds	r7, #16
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b082      	sub	sp, #8
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	460b      	mov	r3, r1
 800b366:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b36e:	78fa      	ldrb	r2, [r7, #3]
 800b370:	4611      	mov	r1, r2
 800b372:	4618      	mov	r0, r3
 800b374:	f7f8 fb0d 	bl	8003992 <HAL_HCD_HC_GetXferCount>
 800b378:	4603      	mov	r3, r0
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3708      	adds	r7, #8
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}

0800b382 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b382:	b590      	push	{r4, r7, lr}
 800b384:	b089      	sub	sp, #36	; 0x24
 800b386:	af04      	add	r7, sp, #16
 800b388:	6078      	str	r0, [r7, #4]
 800b38a:	4608      	mov	r0, r1
 800b38c:	4611      	mov	r1, r2
 800b38e:	461a      	mov	r2, r3
 800b390:	4603      	mov	r3, r0
 800b392:	70fb      	strb	r3, [r7, #3]
 800b394:	460b      	mov	r3, r1
 800b396:	70bb      	strb	r3, [r7, #2]
 800b398:	4613      	mov	r3, r2
 800b39a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b39c:	2300      	movs	r3, #0
 800b39e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b3aa:	787c      	ldrb	r4, [r7, #1]
 800b3ac:	78ba      	ldrb	r2, [r7, #2]
 800b3ae:	78f9      	ldrb	r1, [r7, #3]
 800b3b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b3b2:	9302      	str	r3, [sp, #8]
 800b3b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b3b8:	9301      	str	r3, [sp, #4]
 800b3ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b3be:	9300      	str	r3, [sp, #0]
 800b3c0:	4623      	mov	r3, r4
 800b3c2:	f7f7 ff7e 	bl	80032c2 <HAL_HCD_HC_Init>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b3ca:	7bfb      	ldrb	r3, [r7, #15]
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f000 f8e1 	bl	800b594 <USBH_Get_USB_Status>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3714      	adds	r7, #20
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd90      	pop	{r4, r7, pc}

0800b3e0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	460b      	mov	r3, r1
 800b3ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b3fa:	78fa      	ldrb	r2, [r7, #3]
 800b3fc:	4611      	mov	r1, r2
 800b3fe:	4618      	mov	r0, r3
 800b400:	f7f7 ffee 	bl	80033e0 <HAL_HCD_HC_Halt>
 800b404:	4603      	mov	r3, r0
 800b406:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b408:	7bfb      	ldrb	r3, [r7, #15]
 800b40a:	4618      	mov	r0, r3
 800b40c:	f000 f8c2 	bl	800b594 <USBH_Get_USB_Status>
 800b410:	4603      	mov	r3, r0
 800b412:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b414:	7bbb      	ldrb	r3, [r7, #14]
}
 800b416:	4618      	mov	r0, r3
 800b418:	3710      	adds	r7, #16
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}

0800b41e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b41e:	b590      	push	{r4, r7, lr}
 800b420:	b089      	sub	sp, #36	; 0x24
 800b422:	af04      	add	r7, sp, #16
 800b424:	6078      	str	r0, [r7, #4]
 800b426:	4608      	mov	r0, r1
 800b428:	4611      	mov	r1, r2
 800b42a:	461a      	mov	r2, r3
 800b42c:	4603      	mov	r3, r0
 800b42e:	70fb      	strb	r3, [r7, #3]
 800b430:	460b      	mov	r3, r1
 800b432:	70bb      	strb	r3, [r7, #2]
 800b434:	4613      	mov	r3, r2
 800b436:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b438:	2300      	movs	r3, #0
 800b43a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b43c:	2300      	movs	r3, #0
 800b43e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b446:	787c      	ldrb	r4, [r7, #1]
 800b448:	78ba      	ldrb	r2, [r7, #2]
 800b44a:	78f9      	ldrb	r1, [r7, #3]
 800b44c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b450:	9303      	str	r3, [sp, #12]
 800b452:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b454:	9302      	str	r3, [sp, #8]
 800b456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b458:	9301      	str	r3, [sp, #4]
 800b45a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b45e:	9300      	str	r3, [sp, #0]
 800b460:	4623      	mov	r3, r4
 800b462:	f7f7 ffe1 	bl	8003428 <HAL_HCD_HC_SubmitRequest>
 800b466:	4603      	mov	r3, r0
 800b468:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b46a:	7bfb      	ldrb	r3, [r7, #15]
 800b46c:	4618      	mov	r0, r3
 800b46e:	f000 f891 	bl	800b594 <USBH_Get_USB_Status>
 800b472:	4603      	mov	r3, r0
 800b474:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b476:	7bbb      	ldrb	r3, [r7, #14]
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3714      	adds	r7, #20
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd90      	pop	{r4, r7, pc}

0800b480 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b082      	sub	sp, #8
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	460b      	mov	r3, r1
 800b48a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b492:	78fa      	ldrb	r2, [r7, #3]
 800b494:	4611      	mov	r1, r2
 800b496:	4618      	mov	r0, r3
 800b498:	f7f8 fa67 	bl	800396a <HAL_HCD_HC_GetURBState>
 800b49c:	4603      	mov	r3, r0
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3708      	adds	r7, #8
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}

0800b4a6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b4a6:	b580      	push	{r7, lr}
 800b4a8:	b082      	sub	sp, #8
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6078      	str	r0, [r7, #4]
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d103      	bne.n	800b4c4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b4bc:	78fb      	ldrb	r3, [r7, #3]
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f000 f894 	bl	800b5ec <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b4c4:	20c8      	movs	r0, #200	; 0xc8
 800b4c6:	f7f6 fee5 	bl	8002294 <HAL_Delay>
  return USBH_OK;
 800b4ca:	2300      	movs	r3, #0
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3708      	adds	r7, #8
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}

0800b4d4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b085      	sub	sp, #20
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	460b      	mov	r3, r1
 800b4de:	70fb      	strb	r3, [r7, #3]
 800b4e0:	4613      	mov	r3, r2
 800b4e2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b4ea:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b4ec:	78fb      	ldrb	r3, [r7, #3]
 800b4ee:	68fa      	ldr	r2, [r7, #12]
 800b4f0:	212c      	movs	r1, #44	; 0x2c
 800b4f2:	fb01 f303 	mul.w	r3, r1, r3
 800b4f6:	4413      	add	r3, r2
 800b4f8:	333b      	adds	r3, #59	; 0x3b
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d009      	beq.n	800b514 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b500:	78fb      	ldrb	r3, [r7, #3]
 800b502:	68fa      	ldr	r2, [r7, #12]
 800b504:	212c      	movs	r1, #44	; 0x2c
 800b506:	fb01 f303 	mul.w	r3, r1, r3
 800b50a:	4413      	add	r3, r2
 800b50c:	3354      	adds	r3, #84	; 0x54
 800b50e:	78ba      	ldrb	r2, [r7, #2]
 800b510:	701a      	strb	r2, [r3, #0]
 800b512:	e008      	b.n	800b526 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b514:	78fb      	ldrb	r3, [r7, #3]
 800b516:	68fa      	ldr	r2, [r7, #12]
 800b518:	212c      	movs	r1, #44	; 0x2c
 800b51a:	fb01 f303 	mul.w	r3, r1, r3
 800b51e:	4413      	add	r3, r2
 800b520:	3355      	adds	r3, #85	; 0x55
 800b522:	78ba      	ldrb	r2, [r7, #2]
 800b524:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b526:	2300      	movs	r3, #0
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3714      	adds	r7, #20
 800b52c:	46bd      	mov	sp, r7
 800b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b532:	4770      	bx	lr

0800b534 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b534:	b480      	push	{r7}
 800b536:	b085      	sub	sp, #20
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	460b      	mov	r3, r1
 800b53e:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800b540:	2300      	movs	r3, #0
 800b542:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b54a:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800b54c:	78fb      	ldrb	r3, [r7, #3]
 800b54e:	68ba      	ldr	r2, [r7, #8]
 800b550:	212c      	movs	r1, #44	; 0x2c
 800b552:	fb01 f303 	mul.w	r3, r1, r3
 800b556:	4413      	add	r3, r2
 800b558:	333b      	adds	r3, #59	; 0x3b
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d009      	beq.n	800b574 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800b560:	78fb      	ldrb	r3, [r7, #3]
 800b562:	68ba      	ldr	r2, [r7, #8]
 800b564:	212c      	movs	r1, #44	; 0x2c
 800b566:	fb01 f303 	mul.w	r3, r1, r3
 800b56a:	4413      	add	r3, r2
 800b56c:	3354      	adds	r3, #84	; 0x54
 800b56e:	781b      	ldrb	r3, [r3, #0]
 800b570:	73fb      	strb	r3, [r7, #15]
 800b572:	e008      	b.n	800b586 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800b574:	78fb      	ldrb	r3, [r7, #3]
 800b576:	68ba      	ldr	r2, [r7, #8]
 800b578:	212c      	movs	r1, #44	; 0x2c
 800b57a:	fb01 f303 	mul.w	r3, r1, r3
 800b57e:	4413      	add	r3, r2
 800b580:	3355      	adds	r3, #85	; 0x55
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800b586:	7bfb      	ldrb	r3, [r7, #15]
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3714      	adds	r7, #20
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b594:	b480      	push	{r7}
 800b596:	b085      	sub	sp, #20
 800b598:	af00      	add	r7, sp, #0
 800b59a:	4603      	mov	r3, r0
 800b59c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b5a2:	79fb      	ldrb	r3, [r7, #7]
 800b5a4:	2b03      	cmp	r3, #3
 800b5a6:	d817      	bhi.n	800b5d8 <USBH_Get_USB_Status+0x44>
 800b5a8:	a201      	add	r2, pc, #4	; (adr r2, 800b5b0 <USBH_Get_USB_Status+0x1c>)
 800b5aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ae:	bf00      	nop
 800b5b0:	0800b5c1 	.word	0x0800b5c1
 800b5b4:	0800b5c7 	.word	0x0800b5c7
 800b5b8:	0800b5cd 	.word	0x0800b5cd
 800b5bc:	0800b5d3 	.word	0x0800b5d3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	73fb      	strb	r3, [r7, #15]
    break;
 800b5c4:	e00b      	b.n	800b5de <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b5c6:	2302      	movs	r3, #2
 800b5c8:	73fb      	strb	r3, [r7, #15]
    break;
 800b5ca:	e008      	b.n	800b5de <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	73fb      	strb	r3, [r7, #15]
    break;
 800b5d0:	e005      	b.n	800b5de <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b5d2:	2302      	movs	r3, #2
 800b5d4:	73fb      	strb	r3, [r7, #15]
    break;
 800b5d6:	e002      	b.n	800b5de <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b5d8:	2302      	movs	r3, #2
 800b5da:	73fb      	strb	r3, [r7, #15]
    break;
 800b5dc:	bf00      	nop
  }
  return usb_status;
 800b5de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3714      	adds	r7, #20
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr

0800b5ec <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b5f6:	79fb      	ldrb	r3, [r7, #7]
 800b5f8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b5fa:	79fb      	ldrb	r3, [r7, #7]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d102      	bne.n	800b606 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b600:	2300      	movs	r3, #0
 800b602:	73fb      	strb	r3, [r7, #15]
 800b604:	e001      	b.n	800b60a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b606:	2301      	movs	r3, #1
 800b608:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 800b60a:	7bfb      	ldrb	r3, [r7, #15]
 800b60c:	461a      	mov	r2, r3
 800b60e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b612:	4803      	ldr	r0, [pc, #12]	; (800b620 <MX_DriverVbusFS+0x34>)
 800b614:	f7f7 fdda 	bl	80031cc <HAL_GPIO_WritePin>
}
 800b618:	bf00      	nop
 800b61a:	3710      	adds	r7, #16
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}
 800b620:	40020800 	.word	0x40020800

0800b624 <__errno>:
 800b624:	4b01      	ldr	r3, [pc, #4]	; (800b62c <__errno+0x8>)
 800b626:	6818      	ldr	r0, [r3, #0]
 800b628:	4770      	bx	lr
 800b62a:	bf00      	nop
 800b62c:	20000264 	.word	0x20000264

0800b630 <__libc_init_array>:
 800b630:	b570      	push	{r4, r5, r6, lr}
 800b632:	4d0d      	ldr	r5, [pc, #52]	; (800b668 <__libc_init_array+0x38>)
 800b634:	4c0d      	ldr	r4, [pc, #52]	; (800b66c <__libc_init_array+0x3c>)
 800b636:	1b64      	subs	r4, r4, r5
 800b638:	10a4      	asrs	r4, r4, #2
 800b63a:	2600      	movs	r6, #0
 800b63c:	42a6      	cmp	r6, r4
 800b63e:	d109      	bne.n	800b654 <__libc_init_array+0x24>
 800b640:	4d0b      	ldr	r5, [pc, #44]	; (800b670 <__libc_init_array+0x40>)
 800b642:	4c0c      	ldr	r4, [pc, #48]	; (800b674 <__libc_init_array+0x44>)
 800b644:	f000 f93c 	bl	800b8c0 <_init>
 800b648:	1b64      	subs	r4, r4, r5
 800b64a:	10a4      	asrs	r4, r4, #2
 800b64c:	2600      	movs	r6, #0
 800b64e:	42a6      	cmp	r6, r4
 800b650:	d105      	bne.n	800b65e <__libc_init_array+0x2e>
 800b652:	bd70      	pop	{r4, r5, r6, pc}
 800b654:	f855 3b04 	ldr.w	r3, [r5], #4
 800b658:	4798      	blx	r3
 800b65a:	3601      	adds	r6, #1
 800b65c:	e7ee      	b.n	800b63c <__libc_init_array+0xc>
 800b65e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b662:	4798      	blx	r3
 800b664:	3601      	adds	r6, #1
 800b666:	e7f2      	b.n	800b64e <__libc_init_array+0x1e>
 800b668:	0800b978 	.word	0x0800b978
 800b66c:	0800b978 	.word	0x0800b978
 800b670:	0800b978 	.word	0x0800b978
 800b674:	0800b97c 	.word	0x0800b97c

0800b678 <malloc>:
 800b678:	4b02      	ldr	r3, [pc, #8]	; (800b684 <malloc+0xc>)
 800b67a:	4601      	mov	r1, r0
 800b67c:	6818      	ldr	r0, [r3, #0]
 800b67e:	f000 b88d 	b.w	800b79c <_malloc_r>
 800b682:	bf00      	nop
 800b684:	20000264 	.word	0x20000264

0800b688 <free>:
 800b688:	4b02      	ldr	r3, [pc, #8]	; (800b694 <free+0xc>)
 800b68a:	4601      	mov	r1, r0
 800b68c:	6818      	ldr	r0, [r3, #0]
 800b68e:	f000 b819 	b.w	800b6c4 <_free_r>
 800b692:	bf00      	nop
 800b694:	20000264 	.word	0x20000264

0800b698 <memcpy>:
 800b698:	440a      	add	r2, r1
 800b69a:	4291      	cmp	r1, r2
 800b69c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b6a0:	d100      	bne.n	800b6a4 <memcpy+0xc>
 800b6a2:	4770      	bx	lr
 800b6a4:	b510      	push	{r4, lr}
 800b6a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6ae:	4291      	cmp	r1, r2
 800b6b0:	d1f9      	bne.n	800b6a6 <memcpy+0xe>
 800b6b2:	bd10      	pop	{r4, pc}

0800b6b4 <memset>:
 800b6b4:	4402      	add	r2, r0
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d100      	bne.n	800b6be <memset+0xa>
 800b6bc:	4770      	bx	lr
 800b6be:	f803 1b01 	strb.w	r1, [r3], #1
 800b6c2:	e7f9      	b.n	800b6b8 <memset+0x4>

0800b6c4 <_free_r>:
 800b6c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6c6:	2900      	cmp	r1, #0
 800b6c8:	d044      	beq.n	800b754 <_free_r+0x90>
 800b6ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6ce:	9001      	str	r0, [sp, #4]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	f1a1 0404 	sub.w	r4, r1, #4
 800b6d6:	bfb8      	it	lt
 800b6d8:	18e4      	addlt	r4, r4, r3
 800b6da:	f000 f8e3 	bl	800b8a4 <__malloc_lock>
 800b6de:	4a1e      	ldr	r2, [pc, #120]	; (800b758 <_free_r+0x94>)
 800b6e0:	9801      	ldr	r0, [sp, #4]
 800b6e2:	6813      	ldr	r3, [r2, #0]
 800b6e4:	b933      	cbnz	r3, 800b6f4 <_free_r+0x30>
 800b6e6:	6063      	str	r3, [r4, #4]
 800b6e8:	6014      	str	r4, [r2, #0]
 800b6ea:	b003      	add	sp, #12
 800b6ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6f0:	f000 b8de 	b.w	800b8b0 <__malloc_unlock>
 800b6f4:	42a3      	cmp	r3, r4
 800b6f6:	d908      	bls.n	800b70a <_free_r+0x46>
 800b6f8:	6825      	ldr	r5, [r4, #0]
 800b6fa:	1961      	adds	r1, r4, r5
 800b6fc:	428b      	cmp	r3, r1
 800b6fe:	bf01      	itttt	eq
 800b700:	6819      	ldreq	r1, [r3, #0]
 800b702:	685b      	ldreq	r3, [r3, #4]
 800b704:	1949      	addeq	r1, r1, r5
 800b706:	6021      	streq	r1, [r4, #0]
 800b708:	e7ed      	b.n	800b6e6 <_free_r+0x22>
 800b70a:	461a      	mov	r2, r3
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	b10b      	cbz	r3, 800b714 <_free_r+0x50>
 800b710:	42a3      	cmp	r3, r4
 800b712:	d9fa      	bls.n	800b70a <_free_r+0x46>
 800b714:	6811      	ldr	r1, [r2, #0]
 800b716:	1855      	adds	r5, r2, r1
 800b718:	42a5      	cmp	r5, r4
 800b71a:	d10b      	bne.n	800b734 <_free_r+0x70>
 800b71c:	6824      	ldr	r4, [r4, #0]
 800b71e:	4421      	add	r1, r4
 800b720:	1854      	adds	r4, r2, r1
 800b722:	42a3      	cmp	r3, r4
 800b724:	6011      	str	r1, [r2, #0]
 800b726:	d1e0      	bne.n	800b6ea <_free_r+0x26>
 800b728:	681c      	ldr	r4, [r3, #0]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	6053      	str	r3, [r2, #4]
 800b72e:	4421      	add	r1, r4
 800b730:	6011      	str	r1, [r2, #0]
 800b732:	e7da      	b.n	800b6ea <_free_r+0x26>
 800b734:	d902      	bls.n	800b73c <_free_r+0x78>
 800b736:	230c      	movs	r3, #12
 800b738:	6003      	str	r3, [r0, #0]
 800b73a:	e7d6      	b.n	800b6ea <_free_r+0x26>
 800b73c:	6825      	ldr	r5, [r4, #0]
 800b73e:	1961      	adds	r1, r4, r5
 800b740:	428b      	cmp	r3, r1
 800b742:	bf04      	itt	eq
 800b744:	6819      	ldreq	r1, [r3, #0]
 800b746:	685b      	ldreq	r3, [r3, #4]
 800b748:	6063      	str	r3, [r4, #4]
 800b74a:	bf04      	itt	eq
 800b74c:	1949      	addeq	r1, r1, r5
 800b74e:	6021      	streq	r1, [r4, #0]
 800b750:	6054      	str	r4, [r2, #4]
 800b752:	e7ca      	b.n	800b6ea <_free_r+0x26>
 800b754:	b003      	add	sp, #12
 800b756:	bd30      	pop	{r4, r5, pc}
 800b758:	20003940 	.word	0x20003940

0800b75c <sbrk_aligned>:
 800b75c:	b570      	push	{r4, r5, r6, lr}
 800b75e:	4e0e      	ldr	r6, [pc, #56]	; (800b798 <sbrk_aligned+0x3c>)
 800b760:	460c      	mov	r4, r1
 800b762:	6831      	ldr	r1, [r6, #0]
 800b764:	4605      	mov	r5, r0
 800b766:	b911      	cbnz	r1, 800b76e <sbrk_aligned+0x12>
 800b768:	f000 f88c 	bl	800b884 <_sbrk_r>
 800b76c:	6030      	str	r0, [r6, #0]
 800b76e:	4621      	mov	r1, r4
 800b770:	4628      	mov	r0, r5
 800b772:	f000 f887 	bl	800b884 <_sbrk_r>
 800b776:	1c43      	adds	r3, r0, #1
 800b778:	d00a      	beq.n	800b790 <sbrk_aligned+0x34>
 800b77a:	1cc4      	adds	r4, r0, #3
 800b77c:	f024 0403 	bic.w	r4, r4, #3
 800b780:	42a0      	cmp	r0, r4
 800b782:	d007      	beq.n	800b794 <sbrk_aligned+0x38>
 800b784:	1a21      	subs	r1, r4, r0
 800b786:	4628      	mov	r0, r5
 800b788:	f000 f87c 	bl	800b884 <_sbrk_r>
 800b78c:	3001      	adds	r0, #1
 800b78e:	d101      	bne.n	800b794 <sbrk_aligned+0x38>
 800b790:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b794:	4620      	mov	r0, r4
 800b796:	bd70      	pop	{r4, r5, r6, pc}
 800b798:	20003944 	.word	0x20003944

0800b79c <_malloc_r>:
 800b79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7a0:	1ccd      	adds	r5, r1, #3
 800b7a2:	f025 0503 	bic.w	r5, r5, #3
 800b7a6:	3508      	adds	r5, #8
 800b7a8:	2d0c      	cmp	r5, #12
 800b7aa:	bf38      	it	cc
 800b7ac:	250c      	movcc	r5, #12
 800b7ae:	2d00      	cmp	r5, #0
 800b7b0:	4607      	mov	r7, r0
 800b7b2:	db01      	blt.n	800b7b8 <_malloc_r+0x1c>
 800b7b4:	42a9      	cmp	r1, r5
 800b7b6:	d905      	bls.n	800b7c4 <_malloc_r+0x28>
 800b7b8:	230c      	movs	r3, #12
 800b7ba:	603b      	str	r3, [r7, #0]
 800b7bc:	2600      	movs	r6, #0
 800b7be:	4630      	mov	r0, r6
 800b7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7c4:	4e2e      	ldr	r6, [pc, #184]	; (800b880 <_malloc_r+0xe4>)
 800b7c6:	f000 f86d 	bl	800b8a4 <__malloc_lock>
 800b7ca:	6833      	ldr	r3, [r6, #0]
 800b7cc:	461c      	mov	r4, r3
 800b7ce:	bb34      	cbnz	r4, 800b81e <_malloc_r+0x82>
 800b7d0:	4629      	mov	r1, r5
 800b7d2:	4638      	mov	r0, r7
 800b7d4:	f7ff ffc2 	bl	800b75c <sbrk_aligned>
 800b7d8:	1c43      	adds	r3, r0, #1
 800b7da:	4604      	mov	r4, r0
 800b7dc:	d14d      	bne.n	800b87a <_malloc_r+0xde>
 800b7de:	6834      	ldr	r4, [r6, #0]
 800b7e0:	4626      	mov	r6, r4
 800b7e2:	2e00      	cmp	r6, #0
 800b7e4:	d140      	bne.n	800b868 <_malloc_r+0xcc>
 800b7e6:	6823      	ldr	r3, [r4, #0]
 800b7e8:	4631      	mov	r1, r6
 800b7ea:	4638      	mov	r0, r7
 800b7ec:	eb04 0803 	add.w	r8, r4, r3
 800b7f0:	f000 f848 	bl	800b884 <_sbrk_r>
 800b7f4:	4580      	cmp	r8, r0
 800b7f6:	d13a      	bne.n	800b86e <_malloc_r+0xd2>
 800b7f8:	6821      	ldr	r1, [r4, #0]
 800b7fa:	3503      	adds	r5, #3
 800b7fc:	1a6d      	subs	r5, r5, r1
 800b7fe:	f025 0503 	bic.w	r5, r5, #3
 800b802:	3508      	adds	r5, #8
 800b804:	2d0c      	cmp	r5, #12
 800b806:	bf38      	it	cc
 800b808:	250c      	movcc	r5, #12
 800b80a:	4629      	mov	r1, r5
 800b80c:	4638      	mov	r0, r7
 800b80e:	f7ff ffa5 	bl	800b75c <sbrk_aligned>
 800b812:	3001      	adds	r0, #1
 800b814:	d02b      	beq.n	800b86e <_malloc_r+0xd2>
 800b816:	6823      	ldr	r3, [r4, #0]
 800b818:	442b      	add	r3, r5
 800b81a:	6023      	str	r3, [r4, #0]
 800b81c:	e00e      	b.n	800b83c <_malloc_r+0xa0>
 800b81e:	6822      	ldr	r2, [r4, #0]
 800b820:	1b52      	subs	r2, r2, r5
 800b822:	d41e      	bmi.n	800b862 <_malloc_r+0xc6>
 800b824:	2a0b      	cmp	r2, #11
 800b826:	d916      	bls.n	800b856 <_malloc_r+0xba>
 800b828:	1961      	adds	r1, r4, r5
 800b82a:	42a3      	cmp	r3, r4
 800b82c:	6025      	str	r5, [r4, #0]
 800b82e:	bf18      	it	ne
 800b830:	6059      	strne	r1, [r3, #4]
 800b832:	6863      	ldr	r3, [r4, #4]
 800b834:	bf08      	it	eq
 800b836:	6031      	streq	r1, [r6, #0]
 800b838:	5162      	str	r2, [r4, r5]
 800b83a:	604b      	str	r3, [r1, #4]
 800b83c:	4638      	mov	r0, r7
 800b83e:	f104 060b 	add.w	r6, r4, #11
 800b842:	f000 f835 	bl	800b8b0 <__malloc_unlock>
 800b846:	f026 0607 	bic.w	r6, r6, #7
 800b84a:	1d23      	adds	r3, r4, #4
 800b84c:	1af2      	subs	r2, r6, r3
 800b84e:	d0b6      	beq.n	800b7be <_malloc_r+0x22>
 800b850:	1b9b      	subs	r3, r3, r6
 800b852:	50a3      	str	r3, [r4, r2]
 800b854:	e7b3      	b.n	800b7be <_malloc_r+0x22>
 800b856:	6862      	ldr	r2, [r4, #4]
 800b858:	42a3      	cmp	r3, r4
 800b85a:	bf0c      	ite	eq
 800b85c:	6032      	streq	r2, [r6, #0]
 800b85e:	605a      	strne	r2, [r3, #4]
 800b860:	e7ec      	b.n	800b83c <_malloc_r+0xa0>
 800b862:	4623      	mov	r3, r4
 800b864:	6864      	ldr	r4, [r4, #4]
 800b866:	e7b2      	b.n	800b7ce <_malloc_r+0x32>
 800b868:	4634      	mov	r4, r6
 800b86a:	6876      	ldr	r6, [r6, #4]
 800b86c:	e7b9      	b.n	800b7e2 <_malloc_r+0x46>
 800b86e:	230c      	movs	r3, #12
 800b870:	603b      	str	r3, [r7, #0]
 800b872:	4638      	mov	r0, r7
 800b874:	f000 f81c 	bl	800b8b0 <__malloc_unlock>
 800b878:	e7a1      	b.n	800b7be <_malloc_r+0x22>
 800b87a:	6025      	str	r5, [r4, #0]
 800b87c:	e7de      	b.n	800b83c <_malloc_r+0xa0>
 800b87e:	bf00      	nop
 800b880:	20003940 	.word	0x20003940

0800b884 <_sbrk_r>:
 800b884:	b538      	push	{r3, r4, r5, lr}
 800b886:	4d06      	ldr	r5, [pc, #24]	; (800b8a0 <_sbrk_r+0x1c>)
 800b888:	2300      	movs	r3, #0
 800b88a:	4604      	mov	r4, r0
 800b88c:	4608      	mov	r0, r1
 800b88e:	602b      	str	r3, [r5, #0]
 800b890:	f7f6 fb8a 	bl	8001fa8 <_sbrk>
 800b894:	1c43      	adds	r3, r0, #1
 800b896:	d102      	bne.n	800b89e <_sbrk_r+0x1a>
 800b898:	682b      	ldr	r3, [r5, #0]
 800b89a:	b103      	cbz	r3, 800b89e <_sbrk_r+0x1a>
 800b89c:	6023      	str	r3, [r4, #0]
 800b89e:	bd38      	pop	{r3, r4, r5, pc}
 800b8a0:	20003948 	.word	0x20003948

0800b8a4 <__malloc_lock>:
 800b8a4:	4801      	ldr	r0, [pc, #4]	; (800b8ac <__malloc_lock+0x8>)
 800b8a6:	f000 b809 	b.w	800b8bc <__retarget_lock_acquire_recursive>
 800b8aa:	bf00      	nop
 800b8ac:	2000394c 	.word	0x2000394c

0800b8b0 <__malloc_unlock>:
 800b8b0:	4801      	ldr	r0, [pc, #4]	; (800b8b8 <__malloc_unlock+0x8>)
 800b8b2:	f000 b804 	b.w	800b8be <__retarget_lock_release_recursive>
 800b8b6:	bf00      	nop
 800b8b8:	2000394c 	.word	0x2000394c

0800b8bc <__retarget_lock_acquire_recursive>:
 800b8bc:	4770      	bx	lr

0800b8be <__retarget_lock_release_recursive>:
 800b8be:	4770      	bx	lr

0800b8c0 <_init>:
 800b8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8c2:	bf00      	nop
 800b8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8c6:	bc08      	pop	{r3}
 800b8c8:	469e      	mov	lr, r3
 800b8ca:	4770      	bx	lr

0800b8cc <_fini>:
 800b8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ce:	bf00      	nop
 800b8d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8d2:	bc08      	pop	{r3}
 800b8d4:	469e      	mov	lr, r3
 800b8d6:	4770      	bx	lr
