
gt_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000354  080056e8  080056e8  000156e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a3c  08005a3c  00021004  2**0
                  CONTENTS
  4 .ARM          00000000  08005a3c  08005a3c  00021004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a3c  08005a3c  00021004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a3c  08005a3c  00015a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a40  08005a40  00015a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001004  20000000  08005a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020d0  20001004  08006a48  00021004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200030d4  08006a48  000230d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00021004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000107d4  00000000  00000000  0002102d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b91  00000000  00000000  00031801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  00034398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd8  00000000  00000000  00035498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019321  00000000  00000000  00036470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000126a8  00000000  00000000  0004f791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008de0f  00000000  00000000  00061e39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000efc48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a60  00000000  00000000  000efc98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20001004 	.word	0x20001004
 8000128:	00000000 	.word	0x00000000
 800012c:	080056d0 	.word	0x080056d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20001008 	.word	0x20001008
 8000148:	080056d0 	.word	0x080056d0

0800014c <_EPD_Reset>:

uint8_t WS_20_30[159] = { 0x80,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x10,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x80,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x10,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x14,0x8,0x0,0x0,0x0,0x0,0x1,0xA,0xA,0x0,0xA,0xA,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x14,0x8,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x44,0x44,0x44,0x44,0x44,0x44,0x0,0x0,0x0,0x22,0x17,0x41,0x0,0x32,0x36 };

extern SPI_HandleTypeDef hspi1;

static void _EPD_Reset(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 8000150:	2201      	movs	r2, #1
 8000152:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000156:	480d      	ldr	r0, [pc, #52]	; (800018c <_EPD_Reset+0x40>)
 8000158:	f002 f9a7 	bl	80024aa <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800015c:	2064      	movs	r0, #100	; 0x64
 800015e:	f001 fce9 	bl	8001b34 <HAL_Delay>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_RESET);
 8000162:	2200      	movs	r2, #0
 8000164:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000168:	4808      	ldr	r0, [pc, #32]	; (800018c <_EPD_Reset+0x40>)
 800016a:	f002 f99e 	bl	80024aa <HAL_GPIO_WritePin>
	HAL_Delay(2);
 800016e:	2002      	movs	r0, #2
 8000170:	f001 fce0 	bl	8001b34 <HAL_Delay>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 8000174:	2201      	movs	r2, #1
 8000176:	f44f 7180 	mov.w	r1, #256	; 0x100
 800017a:	4804      	ldr	r0, [pc, #16]	; (800018c <_EPD_Reset+0x40>)
 800017c:	f002 f995 	bl	80024aa <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000180:	2064      	movs	r0, #100	; 0x64
 8000182:	f001 fcd7 	bl	8001b34 <HAL_Delay>
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010c00 	.word	0x40010c00

08000190 <_EPD_SendCommand>:

static void _EPD_SendCommand(uint8_t reg) {
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af00      	add	r7, sp, #0
 8000196:	4603      	mov	r3, r0
 8000198:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_RESET);
 800019a:	2200      	movs	r2, #0
 800019c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001a0:	480c      	ldr	r0, [pc, #48]	; (80001d4 <_EPD_SendCommand+0x44>)
 80001a2:	f002 f982 	bl	80024aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 80001a6:	2200      	movs	r2, #0
 80001a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001ac:	480a      	ldr	r0, [pc, #40]	; (80001d8 <_EPD_SendCommand+0x48>)
 80001ae:	f002 f97c 	bl	80024aa <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 1000);
 80001b2:	1df9      	adds	r1, r7, #7
 80001b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001b8:	2201      	movs	r2, #1
 80001ba:	4808      	ldr	r0, [pc, #32]	; (80001dc <_EPD_SendCommand+0x4c>)
 80001bc:	f002 fe44 	bl	8002e48 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_SET);
 80001c0:	2201      	movs	r2, #1
 80001c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001c6:	4804      	ldr	r0, [pc, #16]	; (80001d8 <_EPD_SendCommand+0x48>)
 80001c8:	f002 f96f 	bl	80024aa <HAL_GPIO_WritePin>
}
 80001cc:	bf00      	nop
 80001ce:	3708      	adds	r7, #8
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bd80      	pop	{r7, pc}
 80001d4:	40010c00 	.word	0x40010c00
 80001d8:	40010800 	.word	0x40010800
 80001dc:	20001020 	.word	0x20001020

080001e0 <_EPD_SendData>:

static void _EPD_SendData(uint8_t data) {
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	4603      	mov	r3, r0
 80001e8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_SET);
 80001ea:	2201      	movs	r2, #1
 80001ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001f0:	480c      	ldr	r0, [pc, #48]	; (8000224 <_EPD_SendData+0x44>)
 80001f2:	f002 f95a 	bl	80024aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 80001f6:	2200      	movs	r2, #0
 80001f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001fc:	480a      	ldr	r0, [pc, #40]	; (8000228 <_EPD_SendData+0x48>)
 80001fe:	f002 f954 	bl	80024aa <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8000202:	1df9      	adds	r1, r7, #7
 8000204:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000208:	2201      	movs	r2, #1
 800020a:	4808      	ldr	r0, [pc, #32]	; (800022c <_EPD_SendData+0x4c>)
 800020c:	f002 fe1c 	bl	8002e48 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_SET);
 8000210:	2201      	movs	r2, #1
 8000212:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000216:	4804      	ldr	r0, [pc, #16]	; (8000228 <_EPD_SendData+0x48>)
 8000218:	f002 f947 	bl	80024aa <HAL_GPIO_WritePin>
}
 800021c:	bf00      	nop
 800021e:	3708      	adds	r7, #8
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}
 8000224:	40010c00 	.word	0x40010c00
 8000228:	40010800 	.word	0x40010800
 800022c:	20001020 	.word	0x20001020

08000230 <_EPD_ReadBusy>:
	for(uint8_t i = 0; i < count; i++) {
		_EPD_SendData(array[i]);
	}
}

void _EPD_ReadBusy(void) {
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
	while(1) {
		if(HAL_GPIO_ReadPin(EPD_BUSY_GPIO_Port, EPD_BUSY_Pin) == GPIO_PIN_RESET)
 8000234:	2110      	movs	r1, #16
 8000236:	4806      	ldr	r0, [pc, #24]	; (8000250 <_EPD_ReadBusy+0x20>)
 8000238:	f002 f920 	bl	800247c <HAL_GPIO_ReadPin>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d003      	beq.n	800024a <_EPD_ReadBusy+0x1a>
			break;
		HAL_Delay(1);
 8000242:	2001      	movs	r0, #1
 8000244:	f001 fc76 	bl	8001b34 <HAL_Delay>
		if(HAL_GPIO_ReadPin(EPD_BUSY_GPIO_Port, EPD_BUSY_Pin) == GPIO_PIN_RESET)
 8000248:	e7f4      	b.n	8000234 <_EPD_ReadBusy+0x4>
			break;
 800024a:	bf00      	nop
	}
}
 800024c:	bf00      	nop
 800024e:	bd80      	pop	{r7, pc}
 8000250:	40010c00 	.word	0x40010c00

08000254 <_EPD_LUT>:

static void _EPD_LUT(uint8_t *lut) {
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
	uint8_t count;
	_EPD_SendCommand(0x32);
 800025c:	2032      	movs	r0, #50	; 0x32
 800025e:	f7ff ff97 	bl	8000190 <_EPD_SendCommand>
	for(count=0; count<153; count++)
 8000262:	2300      	movs	r3, #0
 8000264:	73fb      	strb	r3, [r7, #15]
 8000266:	e009      	b.n	800027c <_EPD_LUT+0x28>
		_EPD_SendData(lut[count]);
 8000268:	7bfb      	ldrb	r3, [r7, #15]
 800026a:	687a      	ldr	r2, [r7, #4]
 800026c:	4413      	add	r3, r2
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	4618      	mov	r0, r3
 8000272:	f7ff ffb5 	bl	80001e0 <_EPD_SendData>
	for(count=0; count<153; count++)
 8000276:	7bfb      	ldrb	r3, [r7, #15]
 8000278:	3301      	adds	r3, #1
 800027a:	73fb      	strb	r3, [r7, #15]
 800027c:	7bfb      	ldrb	r3, [r7, #15]
 800027e:	2b98      	cmp	r3, #152	; 0x98
 8000280:	d9f2      	bls.n	8000268 <_EPD_LUT+0x14>
	_EPD_ReadBusy();
 8000282:	f7ff ffd5 	bl	8000230 <_EPD_ReadBusy>
}
 8000286:	bf00      	nop
 8000288:	3710      	adds	r7, #16
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}

0800028e <_EPD_LUT_by_host>:

static void _EPD_LUT_by_host(uint8_t *lut) {
 800028e:	b580      	push	{r7, lr}
 8000290:	b082      	sub	sp, #8
 8000292:	af00      	add	r7, sp, #0
 8000294:	6078      	str	r0, [r7, #4]
	_EPD_LUT((uint8_t *)lut);			//lut
 8000296:	6878      	ldr	r0, [r7, #4]
 8000298:	f7ff ffdc 	bl	8000254 <_EPD_LUT>
	_EPD_SendCommand(0x3f);
 800029c:	203f      	movs	r0, #63	; 0x3f
 800029e:	f7ff ff77 	bl	8000190 <_EPD_SendCommand>
	_EPD_SendData(*(lut+153));
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	3399      	adds	r3, #153	; 0x99
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	4618      	mov	r0, r3
 80002aa:	f7ff ff99 	bl	80001e0 <_EPD_SendData>
	_EPD_SendCommand(0x03);	// gate voltage
 80002ae:	2003      	movs	r0, #3
 80002b0:	f7ff ff6e 	bl	8000190 <_EPD_SendCommand>
	_EPD_SendData(*(lut+154));
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	339a      	adds	r3, #154	; 0x9a
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	4618      	mov	r0, r3
 80002bc:	f7ff ff90 	bl	80001e0 <_EPD_SendData>
	_EPD_SendCommand(0x04);	// source voltage
 80002c0:	2004      	movs	r0, #4
 80002c2:	f7ff ff65 	bl	8000190 <_EPD_SendCommand>
	_EPD_SendData(*(lut+155));	// VSH
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	339b      	adds	r3, #155	; 0x9b
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	4618      	mov	r0, r3
 80002ce:	f7ff ff87 	bl	80001e0 <_EPD_SendData>
	_EPD_SendData(*(lut+156));	// VSH2
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	339c      	adds	r3, #156	; 0x9c
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	4618      	mov	r0, r3
 80002da:	f7ff ff81 	bl	80001e0 <_EPD_SendData>
	_EPD_SendData(*(lut+157));	// VSL
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	339d      	adds	r3, #157	; 0x9d
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	4618      	mov	r0, r3
 80002e6:	f7ff ff7b 	bl	80001e0 <_EPD_SendData>
	_EPD_SendCommand(0x2c);		// VCOM
 80002ea:	202c      	movs	r0, #44	; 0x2c
 80002ec:	f7ff ff50 	bl	8000190 <_EPD_SendCommand>
	_EPD_SendData(*(lut+158));
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	339e      	adds	r3, #158	; 0x9e
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	4618      	mov	r0, r3
 80002f8:	f7ff ff72 	bl	80001e0 <_EPD_SendData>
}
 80002fc:	bf00      	nop
 80002fe:	3708      	adds	r7, #8
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <_EPD_TurnOnDisplay>:

static void _EPD_TurnOnDisplay(void) {
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
	_EPD_SendCommand(0x22); //Display Update Control
 8000308:	2022      	movs	r0, #34	; 0x22
 800030a:	f7ff ff41 	bl	8000190 <_EPD_SendCommand>
	_EPD_SendData(0xc7);
 800030e:	20c7      	movs	r0, #199	; 0xc7
 8000310:	f7ff ff66 	bl	80001e0 <_EPD_SendData>
	_EPD_SendCommand(0x20); //Activate Display Update Sequence
 8000314:	2020      	movs	r0, #32
 8000316:	f7ff ff3b 	bl	8000190 <_EPD_SendCommand>
	_EPD_ReadBusy();
 800031a:	f7ff ff89 	bl	8000230 <_EPD_ReadBusy>
}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}

08000322 <_EPD_TurnOnDisplay_Partial>:

static void _EPD_TurnOnDisplay_Partial(void) {
 8000322:	b580      	push	{r7, lr}
 8000324:	af00      	add	r7, sp, #0
	_EPD_SendCommand(0x22); //Display Update Control
 8000326:	2022      	movs	r0, #34	; 0x22
 8000328:	f7ff ff32 	bl	8000190 <_EPD_SendCommand>
	_EPD_SendData(0x0F);
 800032c:	200f      	movs	r0, #15
 800032e:	f7ff ff57 	bl	80001e0 <_EPD_SendData>
	_EPD_SendCommand(0x20); //Activate Display Update Sequence
 8000332:	2020      	movs	r0, #32
 8000334:	f7ff ff2c 	bl	8000190 <_EPD_SendCommand>
	_EPD_ReadBusy();
 8000338:	f7ff ff7a 	bl	8000230 <_EPD_ReadBusy>
}
 800033c:	bf00      	nop
 800033e:	bd80      	pop	{r7, pc}

08000340 <_EPD_SetWindows>:

static void _EPD_SetWindows(uint16_t Xstart, uint16_t Ystart, uint16_t Xend, uint16_t Yend) {
 8000340:	b590      	push	{r4, r7, lr}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	4604      	mov	r4, r0
 8000348:	4608      	mov	r0, r1
 800034a:	4611      	mov	r1, r2
 800034c:	461a      	mov	r2, r3
 800034e:	4623      	mov	r3, r4
 8000350:	80fb      	strh	r3, [r7, #6]
 8000352:	4603      	mov	r3, r0
 8000354:	80bb      	strh	r3, [r7, #4]
 8000356:	460b      	mov	r3, r1
 8000358:	807b      	strh	r3, [r7, #2]
 800035a:	4613      	mov	r3, r2
 800035c:	803b      	strh	r3, [r7, #0]
	_EPD_SendCommand(0x44); // SET_RAM_X_ADDRESS_START_END_POSITION
 800035e:	2044      	movs	r0, #68	; 0x44
 8000360:	f7ff ff16 	bl	8000190 <_EPD_SendCommand>
	_EPD_SendData((Xstart>>3) & 0xFF);
 8000364:	88fb      	ldrh	r3, [r7, #6]
 8000366:	08db      	lsrs	r3, r3, #3
 8000368:	b29b      	uxth	r3, r3
 800036a:	b2db      	uxtb	r3, r3
 800036c:	4618      	mov	r0, r3
 800036e:	f7ff ff37 	bl	80001e0 <_EPD_SendData>
	_EPD_SendData((Xend>>3) & 0xFF);
 8000372:	887b      	ldrh	r3, [r7, #2]
 8000374:	08db      	lsrs	r3, r3, #3
 8000376:	b29b      	uxth	r3, r3
 8000378:	b2db      	uxtb	r3, r3
 800037a:	4618      	mov	r0, r3
 800037c:	f7ff ff30 	bl	80001e0 <_EPD_SendData>

	_EPD_SendCommand(0x45); // SET_RAM_Y_ADDRESS_START_END_POSITION
 8000380:	2045      	movs	r0, #69	; 0x45
 8000382:	f7ff ff05 	bl	8000190 <_EPD_SendCommand>
	_EPD_SendData(Ystart & 0xFF);
 8000386:	88bb      	ldrh	r3, [r7, #4]
 8000388:	b2db      	uxtb	r3, r3
 800038a:	4618      	mov	r0, r3
 800038c:	f7ff ff28 	bl	80001e0 <_EPD_SendData>
	_EPD_SendData((Ystart >> 8) & 0xFF);
 8000390:	88bb      	ldrh	r3, [r7, #4]
 8000392:	0a1b      	lsrs	r3, r3, #8
 8000394:	b29b      	uxth	r3, r3
 8000396:	b2db      	uxtb	r3, r3
 8000398:	4618      	mov	r0, r3
 800039a:	f7ff ff21 	bl	80001e0 <_EPD_SendData>
	_EPD_SendData(Yend & 0xFF);
 800039e:	883b      	ldrh	r3, [r7, #0]
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	4618      	mov	r0, r3
 80003a4:	f7ff ff1c 	bl	80001e0 <_EPD_SendData>
	_EPD_SendData((Yend >> 8) & 0xFF);
 80003a8:	883b      	ldrh	r3, [r7, #0]
 80003aa:	0a1b      	lsrs	r3, r3, #8
 80003ac:	b29b      	uxth	r3, r3
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	4618      	mov	r0, r3
 80003b2:	f7ff ff15 	bl	80001e0 <_EPD_SendData>
}
 80003b6:	bf00      	nop
 80003b8:	370c      	adds	r7, #12
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd90      	pop	{r4, r7, pc}

080003be <_EPD_SetCursor>:

static void _EPD_SetCursor(uint16_t Xstart, uint16_t Ystart) {
 80003be:	b580      	push	{r7, lr}
 80003c0:	b082      	sub	sp, #8
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	4603      	mov	r3, r0
 80003c6:	460a      	mov	r2, r1
 80003c8:	80fb      	strh	r3, [r7, #6]
 80003ca:	4613      	mov	r3, r2
 80003cc:	80bb      	strh	r3, [r7, #4]
	_EPD_SendCommand(0x4E); // SET_RAM_X_ADDRESS_COUNTER
 80003ce:	204e      	movs	r0, #78	; 0x4e
 80003d0:	f7ff fede 	bl	8000190 <_EPD_SendCommand>
	_EPD_SendData(Xstart & 0xFF);
 80003d4:	88fb      	ldrh	r3, [r7, #6]
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	4618      	mov	r0, r3
 80003da:	f7ff ff01 	bl	80001e0 <_EPD_SendData>

	_EPD_SendCommand(0x4F); // SET_RAM_Y_ADDRESS_COUNTER
 80003de:	204f      	movs	r0, #79	; 0x4f
 80003e0:	f7ff fed6 	bl	8000190 <_EPD_SendCommand>
	_EPD_SendData(Ystart & 0xFF);
 80003e4:	88bb      	ldrh	r3, [r7, #4]
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff fef9 	bl	80001e0 <_EPD_SendData>
	_EPD_SendData((Ystart >> 8) & 0xFF);
 80003ee:	88bb      	ldrh	r3, [r7, #4]
 80003f0:	0a1b      	lsrs	r3, r3, #8
 80003f2:	b29b      	uxth	r3, r3
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	4618      	mov	r0, r3
 80003f8:	f7ff fef2 	bl	80001e0 <_EPD_SendData>
}
 80003fc:	bf00      	nop
 80003fe:	3708      	adds	r7, #8
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}

08000404 <EPD_Init>:
		}
	}
}


void EPD_Init(EPD_HandleTypeDef *hepd) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]

	// start phase 0
	//hepd->state = INIT_STATE;
	//hepd->phase = 0;
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_RESET);
 800040c:	2200      	movs	r2, #0
 800040e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000412:	4825      	ldr	r0, [pc, #148]	; (80004a8 <EPD_Init+0xa4>)
 8000414:	f002 f849 	bl	80024aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800041e:	4823      	ldr	r0, [pc, #140]	; (80004ac <EPD_Init+0xa8>)
 8000420:	f002 f843 	bl	80024aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 8000424:	2201      	movs	r2, #1
 8000426:	f44f 7180 	mov.w	r1, #256	; 0x100
 800042a:	481f      	ldr	r0, [pc, #124]	; (80004a8 <EPD_Init+0xa4>)
 800042c:	f002 f83d 	bl	80024aa <HAL_GPIO_WritePin>
	_EPD_Reset();
 8000430:	f7ff fe8c 	bl	800014c <_EPD_Reset>
	HAL_Delay(100);
 8000434:	2064      	movs	r0, #100	; 0x64
 8000436:	f001 fb7d 	bl	8001b34 <HAL_Delay>
	// end phase 0

	_EPD_ReadBusy();
 800043a:	f7ff fef9 	bl	8000230 <_EPD_ReadBusy>

	// start phase 1
	_EPD_SendCommand(0x12);  //SWRESET
 800043e:	2012      	movs	r0, #18
 8000440:	f7ff fea6 	bl	8000190 <_EPD_SendCommand>
	// end phase 1

	_EPD_ReadBusy();
 8000444:	f7ff fef4 	bl	8000230 <_EPD_ReadBusy>

	_EPD_SendCommand(0x01); //Driver output control
 8000448:	2001      	movs	r0, #1
 800044a:	f7ff fea1 	bl	8000190 <_EPD_SendCommand>
	_EPD_SendData(0x27);
 800044e:	2027      	movs	r0, #39	; 0x27
 8000450:	f7ff fec6 	bl	80001e0 <_EPD_SendData>
	_EPD_SendData(0x01);
 8000454:	2001      	movs	r0, #1
 8000456:	f7ff fec3 	bl	80001e0 <_EPD_SendData>
	_EPD_SendData(0x00);
 800045a:	2000      	movs	r0, #0
 800045c:	f7ff fec0 	bl	80001e0 <_EPD_SendData>

	_EPD_SendCommand(0x11); //data entry mode
 8000460:	2011      	movs	r0, #17
 8000462:	f7ff fe95 	bl	8000190 <_EPD_SendCommand>
	_EPD_SendData(0x03);
 8000466:	2003      	movs	r0, #3
 8000468:	f7ff feba 	bl	80001e0 <_EPD_SendData>

	_EPD_SetWindows(0, 0, EPD_WIDTH-1, EPD_HEIGHT-1);
 800046c:	f240 1327 	movw	r3, #295	; 0x127
 8000470:	227f      	movs	r2, #127	; 0x7f
 8000472:	2100      	movs	r1, #0
 8000474:	2000      	movs	r0, #0
 8000476:	f7ff ff63 	bl	8000340 <_EPD_SetWindows>

	_EPD_SendCommand(0x21); //  Display update control
 800047a:	2021      	movs	r0, #33	; 0x21
 800047c:	f7ff fe88 	bl	8000190 <_EPD_SendCommand>
	_EPD_SendData(0x00);
 8000480:	2000      	movs	r0, #0
 8000482:	f7ff fead 	bl	80001e0 <_EPD_SendData>
	_EPD_SendData(0x80);
 8000486:	2080      	movs	r0, #128	; 0x80
 8000488:	f7ff feaa 	bl	80001e0 <_EPD_SendData>

	_EPD_SetCursor(0, 0);
 800048c:	2100      	movs	r1, #0
 800048e:	2000      	movs	r0, #0
 8000490:	f7ff ff95 	bl	80003be <_EPD_SetCursor>
	_EPD_ReadBusy();
 8000494:	f7ff fecc 	bl	8000230 <_EPD_ReadBusy>

	_EPD_LUT_by_host(WS_20_30);
 8000498:	4805      	ldr	r0, [pc, #20]	; (80004b0 <EPD_Init+0xac>)
 800049a:	f7ff fef8 	bl	800028e <_EPD_LUT_by_host>
}
 800049e:	bf00      	nop
 80004a0:	3708      	adds	r7, #8
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40010c00 	.word	0x40010c00
 80004ac:	40010800 	.word	0x40010800
 80004b0:	200000a0 	.word	0x200000a0

080004b4 <EPD_Clear>:

void EPD_Clear(EPD_HandleTypeDef *hepd) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b084      	sub	sp, #16
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
	uint16_t i;
	_EPD_SendCommand(0x24);   //write RAM for black(0)/white (1)
 80004bc:	2024      	movs	r0, #36	; 0x24
 80004be:	f7ff fe67 	bl	8000190 <_EPD_SendCommand>
	for(i = 0; i < EPD_BYTES; i++) {
 80004c2:	2300      	movs	r3, #0
 80004c4:	81fb      	strh	r3, [r7, #14]
 80004c6:	e005      	b.n	80004d4 <EPD_Clear+0x20>
		_EPD_SendData(0xff);
 80004c8:	20ff      	movs	r0, #255	; 0xff
 80004ca:	f7ff fe89 	bl	80001e0 <_EPD_SendData>
	for(i = 0; i < EPD_BYTES; i++) {
 80004ce:	89fb      	ldrh	r3, [r7, #14]
 80004d0:	3301      	adds	r3, #1
 80004d2:	81fb      	strh	r3, [r7, #14]
 80004d4:	89fb      	ldrh	r3, [r7, #14]
 80004d6:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 80004da:	d3f5      	bcc.n	80004c8 <EPD_Clear+0x14>
	}
	_EPD_TurnOnDisplay();
 80004dc:	f7ff ff12 	bl	8000304 <_EPD_TurnOnDisplay>
}
 80004e0:	bf00      	nop
 80004e2:	3710      	adds	r7, #16
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <EPD_Display>:

void EPD_Display(EPD_HandleTypeDef *hepd) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	uint16_t i;
	_EPD_SendCommand(0x24);   //write RAM for black(0)/white (1)
 80004f0:	2024      	movs	r0, #36	; 0x24
 80004f2:	f7ff fe4d 	bl	8000190 <_EPD_SendCommand>
	for(i=0; i<EPD_BYTES; i++) {
 80004f6:	2300      	movs	r3, #0
 80004f8:	81fb      	strh	r3, [r7, #14]
 80004fa:	e009      	b.n	8000510 <EPD_Display+0x28>
		_EPD_SendData(hepd->image[i]);
 80004fc:	89fb      	ldrh	r3, [r7, #14]
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	4413      	add	r3, r2
 8000502:	789b      	ldrb	r3, [r3, #2]
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff fe6b 	bl	80001e0 <_EPD_SendData>
	for(i=0; i<EPD_BYTES; i++) {
 800050a:	89fb      	ldrh	r3, [r7, #14]
 800050c:	3301      	adds	r3, #1
 800050e:	81fb      	strh	r3, [r7, #14]
 8000510:	89fb      	ldrh	r3, [r7, #14]
 8000512:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8000516:	d3f1      	bcc.n	80004fc <EPD_Display+0x14>
	}
	_EPD_TurnOnDisplay();
 8000518:	f7ff fef4 	bl	8000304 <_EPD_TurnOnDisplay>
}
 800051c:	bf00      	nop
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <EPD_Display_Partial>:

void EPD_Display_Partial(EPD_HandleTypeDef *hepd) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	uint16_t i;

	//Reset
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000532:	4834      	ldr	r0, [pc, #208]	; (8000604 <EPD_Display_Partial+0xe0>)
 8000534:	f001 ffb9 	bl	80024aa <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000538:	2002      	movs	r0, #2
 800053a:	f001 fafb 	bl	8001b34 <HAL_Delay>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 800053e:	2201      	movs	r2, #1
 8000540:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000544:	482f      	ldr	r0, [pc, #188]	; (8000604 <EPD_Display_Partial+0xe0>)
 8000546:	f001 ffb0 	bl	80024aa <HAL_GPIO_WritePin>
	HAL_Delay(2);
 800054a:	2002      	movs	r0, #2
 800054c:	f001 faf2 	bl	8001b34 <HAL_Delay>

	_EPD_LUT(_WF_PARTIAL_2IN9);
 8000550:	482d      	ldr	r0, [pc, #180]	; (8000608 <EPD_Display_Partial+0xe4>)
 8000552:	f7ff fe7f 	bl	8000254 <_EPD_LUT>
	_EPD_SendCommand(0x37);
 8000556:	2037      	movs	r0, #55	; 0x37
 8000558:	f7ff fe1a 	bl	8000190 <_EPD_SendCommand>
	_EPD_SendData(0x00);
 800055c:	2000      	movs	r0, #0
 800055e:	f7ff fe3f 	bl	80001e0 <_EPD_SendData>
	_EPD_SendData(0x00);
 8000562:	2000      	movs	r0, #0
 8000564:	f7ff fe3c 	bl	80001e0 <_EPD_SendData>
	_EPD_SendData(0x00);
 8000568:	2000      	movs	r0, #0
 800056a:	f7ff fe39 	bl	80001e0 <_EPD_SendData>
	_EPD_SendData(0x00);
 800056e:	2000      	movs	r0, #0
 8000570:	f7ff fe36 	bl	80001e0 <_EPD_SendData>
	_EPD_SendData(0x00);
 8000574:	2000      	movs	r0, #0
 8000576:	f7ff fe33 	bl	80001e0 <_EPD_SendData>
	_EPD_SendData(0x40);
 800057a:	2040      	movs	r0, #64	; 0x40
 800057c:	f7ff fe30 	bl	80001e0 <_EPD_SendData>
	_EPD_SendData(0x00);
 8000580:	2000      	movs	r0, #0
 8000582:	f7ff fe2d 	bl	80001e0 <_EPD_SendData>
	_EPD_SendData(0x00);
 8000586:	2000      	movs	r0, #0
 8000588:	f7ff fe2a 	bl	80001e0 <_EPD_SendData>
	_EPD_SendData(0x00);
 800058c:	2000      	movs	r0, #0
 800058e:	f7ff fe27 	bl	80001e0 <_EPD_SendData>
	_EPD_SendData(0x00);
 8000592:	2000      	movs	r0, #0
 8000594:	f7ff fe24 	bl	80001e0 <_EPD_SendData>

	_EPD_SendCommand(0x3C); //BorderWavefrom
 8000598:	203c      	movs	r0, #60	; 0x3c
 800059a:	f7ff fdf9 	bl	8000190 <_EPD_SendCommand>
	_EPD_SendData(0x80);
 800059e:	2080      	movs	r0, #128	; 0x80
 80005a0:	f7ff fe1e 	bl	80001e0 <_EPD_SendData>

	_EPD_SendCommand(0x22);
 80005a4:	2022      	movs	r0, #34	; 0x22
 80005a6:	f7ff fdf3 	bl	8000190 <_EPD_SendCommand>
	_EPD_SendData(0xC0);
 80005aa:	20c0      	movs	r0, #192	; 0xc0
 80005ac:	f7ff fe18 	bl	80001e0 <_EPD_SendData>
	_EPD_SendCommand(0x20);
 80005b0:	2020      	movs	r0, #32
 80005b2:	f7ff fded 	bl	8000190 <_EPD_SendCommand>
	_EPD_ReadBusy();
 80005b6:	f7ff fe3b 	bl	8000230 <_EPD_ReadBusy>

	_EPD_SetWindows(0, 0, EPD_WIDTH-1, EPD_HEIGHT-1);
 80005ba:	f240 1327 	movw	r3, #295	; 0x127
 80005be:	227f      	movs	r2, #127	; 0x7f
 80005c0:	2100      	movs	r1, #0
 80005c2:	2000      	movs	r0, #0
 80005c4:	f7ff febc 	bl	8000340 <_EPD_SetWindows>
	_EPD_SetCursor(0, 0);
 80005c8:	2100      	movs	r1, #0
 80005ca:	2000      	movs	r0, #0
 80005cc:	f7ff fef7 	bl	80003be <_EPD_SetCursor>

	_EPD_SendCommand(0x24);   //Write Black and White image to RAM
 80005d0:	2024      	movs	r0, #36	; 0x24
 80005d2:	f7ff fddd 	bl	8000190 <_EPD_SendCommand>
	for(i=0;i<EPD_BYTES;i++)	{
 80005d6:	2300      	movs	r3, #0
 80005d8:	81fb      	strh	r3, [r7, #14]
 80005da:	e009      	b.n	80005f0 <EPD_Display_Partial+0xcc>
		_EPD_SendData(hepd->image[i]);
 80005dc:	89fb      	ldrh	r3, [r7, #14]
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	4413      	add	r3, r2
 80005e2:	789b      	ldrb	r3, [r3, #2]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff fdfb 	bl	80001e0 <_EPD_SendData>
	for(i=0;i<EPD_BYTES;i++)	{
 80005ea:	89fb      	ldrh	r3, [r7, #14]
 80005ec:	3301      	adds	r3, #1
 80005ee:	81fb      	strh	r3, [r7, #14]
 80005f0:	89fb      	ldrh	r3, [r7, #14]
 80005f2:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 80005f6:	d3f1      	bcc.n	80005dc <EPD_Display_Partial+0xb8>
	}
	_EPD_TurnOnDisplay_Partial();
 80005f8:	f7ff fe93 	bl	8000322 <_EPD_TurnOnDisplay_Partial>
}
 80005fc:	bf00      	nop
 80005fe:	3710      	adds	r7, #16
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40010c00 	.word	0x40010c00
 8000608:	20000000 	.word	0x20000000

0800060c <EPD_Sleep>:

void EPD_Sleep(EPD_HandleTypeDef *hepd) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	_EPD_SendCommand(0x10); //enter deep sleep
 8000614:	2010      	movs	r0, #16
 8000616:	f7ff fdbb 	bl	8000190 <_EPD_SendCommand>
	_EPD_SendData(0x01);
 800061a:	2001      	movs	r0, #1
 800061c:	f7ff fde0 	bl	80001e0 <_EPD_SendData>
	HAL_Delay(100);
 8000620:	2064      	movs	r0, #100	; 0x64
 8000622:	f001 fa87 	bl	8001b34 <HAL_Delay>
}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 8; i++) {
 800063a:	2300      	movs	r3, #0
 800063c:	73fb      	strb	r3, [r7, #15]
 800063e:	e00d      	b.n	800065c <HAL_GPIO_EXTI_Callback+0x2c>
		if(btn_pins[i] == GPIO_Pin) {
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	4a0b      	ldr	r2, [pc, #44]	; (8000670 <HAL_GPIO_EXTI_Callback+0x40>)
 8000644:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000648:	88fa      	ldrh	r2, [r7, #6]
 800064a:	429a      	cmp	r2, r3
 800064c:	d103      	bne.n	8000656 <HAL_GPIO_EXTI_Callback+0x26>
			btn_flags[i] = 1;
 800064e:	7bfb      	ldrb	r3, [r7, #15]
 8000650:	4a08      	ldr	r2, [pc, #32]	; (8000674 <HAL_GPIO_EXTI_Callback+0x44>)
 8000652:	2101      	movs	r1, #1
 8000654:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 8; i++) {
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	3301      	adds	r3, #1
 800065a:	73fb      	strb	r3, [r7, #15]
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	2b07      	cmp	r3, #7
 8000660:	d9ee      	bls.n	8000640 <HAL_GPIO_EXTI_Callback+0x10>
		}
	}
}
 8000662:	bf00      	nop
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000140 	.word	0x20000140
 8000674:	20001bfc 	.word	0x20001bfc

08000678 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4a06      	ldr	r2, [pc, #24]	; (800069c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000684:	4293      	cmp	r3, r2
 8000686:	d105      	bne.n	8000694 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		RE_Process(&hre1);
 8000688:	4805      	ldr	r0, [pc, #20]	; (80006a0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800068a:	f000 ff35 	bl	80014f8 <RE_Process>
		RE_Process(&hre2);
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000690:	f000 ff32 	bl	80014f8 <RE_Process>
	}
}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20001078 	.word	0x20001078
 80006a0:	20002e88 	.word	0x20002e88
 80006a4:	20002ea0 	.word	0x20002ea0

080006a8 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	memcpy(&(hcommander.in_command), hcommander.uart_rx_buffer, COMMAND_BYTESIZE);
 80006b0:	f240 1203 	movw	r2, #259	; 0x103
 80006b4:	4905      	ldr	r1, [pc, #20]	; (80006cc <HAL_UART_RxHalfCpltCallback+0x24>)
 80006b6:	4806      	ldr	r0, [pc, #24]	; (80006d0 <HAL_UART_RxHalfCpltCallback+0x28>)
 80006b8:	f004 fb88 	bl	8004dcc <memcpy>
	hcommander.awaiting_response = 0;
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <HAL_UART_RxHalfCpltCallback+0x2c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20001150 	.word	0x20001150
 80006d0:	20001358 	.word	0x20001358
 80006d4:	20001148 	.word	0x20001148

080006d8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	memcpy(&(hcommander.in_command), hcommander.uart_rx_buffer + COMMAND_BYTESIZE, COMMAND_BYTESIZE);
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <HAL_UART_RxCpltCallback+0x28>)
 80006e2:	f240 1203 	movw	r2, #259	; 0x103
 80006e6:	4619      	mov	r1, r3
 80006e8:	4806      	ldr	r0, [pc, #24]	; (8000704 <HAL_UART_RxCpltCallback+0x2c>)
 80006ea:	f004 fb6f 	bl	8004dcc <memcpy>
	hcommander.awaiting_response = 0;
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <HAL_UART_RxCpltCallback+0x30>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20001253 	.word	0x20001253
 8000704:	20001358 	.word	0x20001358
 8000708:	20001148 	.word	0x20001148

0800070c <command_callback>:

void command_callback() {
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
	// do nothing, F103 is not supposed to answer
	for (uint8_t i = 0; i < 6; i++)
 8000712:	2300      	movs	r3, #0
 8000714:	71fb      	strb	r3, [r7, #7]
 8000716:	e00e      	b.n	8000736 <command_callback+0x2a>
	HAL_GPIO_WritePin(led_ports[i], led_pins[i], GPIO_PIN_SET);
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	4a0c      	ldr	r2, [pc, #48]	; (800074c <command_callback+0x40>)
 800071c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	4a0b      	ldr	r2, [pc, #44]	; (8000750 <command_callback+0x44>)
 8000724:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000728:	2201      	movs	r2, #1
 800072a:	4619      	mov	r1, r3
 800072c:	f001 febd 	bl	80024aa <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 6; i++)
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	3301      	adds	r3, #1
 8000734:	71fb      	strb	r3, [r7, #7]
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	2b05      	cmp	r3, #5
 800073a:	d9ed      	bls.n	8000718 <command_callback+0xc>
	HAL_Delay(500);
 800073c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000740:	f001 f9f8 	bl	8001b34 <HAL_Delay>
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	2000015c 	.word	0x2000015c
 8000750:	20000150 	.word	0x20000150

08000754 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b085      	sub	sp, #20
 8000758:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800075a:	f001 f989 	bl	8001a70 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800075e:	f000 fa17 	bl	8000b90 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000762:	f000 fb29 	bl	8000db8 <MX_GPIO_Init>
	MX_DMA_Init();
 8000766:	f000 fb09 	bl	8000d7c <MX_DMA_Init>
	MX_USART3_UART_Init();
 800076a:	f000 fadd 	bl	8000d28 <MX_USART3_UART_Init>
	MX_SPI1_Init();
 800076e:	f000 fa55 	bl	8000c1c <MX_SPI1_Init>
	MX_TIM3_Init();
 8000772:	f000 fa8b 	bl	8000c8c <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	// Turning on all LEDs
	for (uint8_t i = 0; i < 6; i++)
 8000776:	2300      	movs	r3, #0
 8000778:	71fb      	strb	r3, [r7, #7]
 800077a:	e00e      	b.n	800079a <main+0x46>
		HAL_GPIO_WritePin(led_ports[i], led_pins[i], GPIO_PIN_SET);
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	4a83      	ldr	r2, [pc, #524]	; (800098c <main+0x238>)
 8000780:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	4a82      	ldr	r2, [pc, #520]	; (8000990 <main+0x23c>)
 8000788:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800078c:	2201      	movs	r2, #1
 800078e:	4619      	mov	r1, r3
 8000790:	f001 fe8b 	bl	80024aa <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 6; i++)
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	3301      	adds	r3, #1
 8000798:	71fb      	strb	r3, [r7, #7]
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	2b05      	cmp	r3, #5
 800079e:	d9ed      	bls.n	800077c <main+0x28>

	// Commander
	Commander_Init(&hcommander, &huart3, &hdma_usart3_rx, command_callback);
 80007a0:	4b7c      	ldr	r3, [pc, #496]	; (8000994 <main+0x240>)
 80007a2:	4a7d      	ldr	r2, [pc, #500]	; (8000998 <main+0x244>)
 80007a4:	497d      	ldr	r1, [pc, #500]	; (800099c <main+0x248>)
 80007a6:	487e      	ldr	r0, [pc, #504]	; (80009a0 <main+0x24c>)
 80007a8:	f003 fc7c 	bl	80040a4 <Commander_Init>
	Commander_Start(&hcommander);
 80007ac:	487c      	ldr	r0, [pc, #496]	; (80009a0 <main+0x24c>)
 80007ae:	f003 fc9b 	bl	80040e8 <Commander_Start>

	// Rotary encoders
	RE_Init(&hre1, ENC1A_GPIO_Port, ENC1B_GPIO_Port, ENC1A_Pin, ENC1B_Pin);
 80007b2:	2340      	movs	r3, #64	; 0x40
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	2380      	movs	r3, #128	; 0x80
 80007b8:	4a7a      	ldr	r2, [pc, #488]	; (80009a4 <main+0x250>)
 80007ba:	497a      	ldr	r1, [pc, #488]	; (80009a4 <main+0x250>)
 80007bc:	487a      	ldr	r0, [pc, #488]	; (80009a8 <main+0x254>)
 80007be:	f000 fe74 	bl	80014aa <RE_Init>
	RE_Init(&hre2, ENC2A_GPIO_Port, ENC2B_GPIO_Port, ENC2A_Pin, ENC2B_Pin);
 80007c2:	2301      	movs	r3, #1
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	2302      	movs	r3, #2
 80007c8:	4a78      	ldr	r2, [pc, #480]	; (80009ac <main+0x258>)
 80007ca:	4978      	ldr	r1, [pc, #480]	; (80009ac <main+0x258>)
 80007cc:	4878      	ldr	r0, [pc, #480]	; (80009b0 <main+0x25c>)
 80007ce:	f000 fe6c 	bl	80014aa <RE_Init>
	HAL_TIM_Base_Start_IT(&htim3);
 80007d2:	4878      	ldr	r0, [pc, #480]	; (80009b4 <main+0x260>)
 80007d4:	f002 fd6a 	bl	80032ac <HAL_TIM_Base_Start_IT>

	// Display and splash screen
	EPD_Init(&hepd1);
 80007d8:	4877      	ldr	r0, [pc, #476]	; (80009b8 <main+0x264>)
 80007da:	f7ff fe13 	bl	8000404 <EPD_Init>
	EPD_Clear(&hepd1);
 80007de:	4876      	ldr	r0, [pc, #472]	; (80009b8 <main+0x264>)
 80007e0:	f7ff fe68 	bl	80004b4 <EPD_Clear>
	Painter_Clean(hepd1.image);
 80007e4:	4875      	ldr	r0, [pc, #468]	; (80009bc <main+0x268>)
 80007e6:	f000 fe23 	bl	8001430 <Painter_Clean>
	Painter_WriteString(hepd1.image, "G33KY TOAD", (296 - 10 * 12) / 2, 30, BOT_LEFT, LARGE);
 80007ea:	2302      	movs	r3, #2
 80007ec:	9301      	str	r3, [sp, #4]
 80007ee:	2302      	movs	r3, #2
 80007f0:	9300      	str	r3, [sp, #0]
 80007f2:	231e      	movs	r3, #30
 80007f4:	2258      	movs	r2, #88	; 0x58
 80007f6:	4972      	ldr	r1, [pc, #456]	; (80009c0 <main+0x26c>)
 80007f8:	4870      	ldr	r0, [pc, #448]	; (80009bc <main+0x268>)
 80007fa:	f000 fd3c 	bl	8001276 <Painter_WriteString>
	Painter_WriteString(hepd1.image, "@", 50, (296 - 1 * 18) / 2, TOP_LEFT, LARGE);
 80007fe:	2302      	movs	r3, #2
 8000800:	9301      	str	r3, [sp, #4]
 8000802:	2300      	movs	r3, #0
 8000804:	9300      	str	r3, [sp, #0]
 8000806:	238b      	movs	r3, #139	; 0x8b
 8000808:	2232      	movs	r2, #50	; 0x32
 800080a:	496e      	ldr	r1, [pc, #440]	; (80009c4 <main+0x270>)
 800080c:	486b      	ldr	r0, [pc, #428]	; (80009bc <main+0x268>)
 800080e:	f000 fd32 	bl	8001276 <Painter_WriteString>
	Painter_WriteString(hepd1.image, "BY GIACOMO ASCARI", (296 - 17 * 10) / 2, 70, BOT_LEFT, MEDIUM);
 8000812:	2301      	movs	r3, #1
 8000814:	9301      	str	r3, [sp, #4]
 8000816:	2302      	movs	r3, #2
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	2346      	movs	r3, #70	; 0x46
 800081c:	223f      	movs	r2, #63	; 0x3f
 800081e:	496a      	ldr	r1, [pc, #424]	; (80009c8 <main+0x274>)
 8000820:	4866      	ldr	r0, [pc, #408]	; (80009bc <main+0x268>)
 8000822:	f000 fd28 	bl	8001276 <Painter_WriteString>
	Painter_WriteString(hepd1.image, "AND EVGENY DEMENEV", (296 - 18 * 10) / 2, 90, BOT_LEFT, MEDIUM);
 8000826:	2301      	movs	r3, #1
 8000828:	9301      	str	r3, [sp, #4]
 800082a:	2302      	movs	r3, #2
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	235a      	movs	r3, #90	; 0x5a
 8000830:	223a      	movs	r2, #58	; 0x3a
 8000832:	4966      	ldr	r1, [pc, #408]	; (80009cc <main+0x278>)
 8000834:	4861      	ldr	r0, [pc, #388]	; (80009bc <main+0x268>)
 8000836:	f000 fd1e 	bl	8001276 <Painter_WriteString>
	EPD_Display(&hepd1);
 800083a:	485f      	ldr	r0, [pc, #380]	; (80009b8 <main+0x264>)
 800083c:	f7ff fe54 	bl	80004e8 <EPD_Display>
	EPD_Sleep(&hepd1);
 8000840:	485d      	ldr	r0, [pc, #372]	; (80009b8 <main+0x264>)
 8000842:	f7ff fee3 	bl	800060c <EPD_Sleep>

	// Menu
	uint8_t new_page;
	Menu_Init(&hmenu, &hcommander, &hepd1);
 8000846:	4a5c      	ldr	r2, [pc, #368]	; (80009b8 <main+0x264>)
 8000848:	4955      	ldr	r1, [pc, #340]	; (80009a0 <main+0x24c>)
 800084a:	4861      	ldr	r0, [pc, #388]	; (80009d0 <main+0x27c>)
 800084c:	f003 fc91 	bl	8004172 <Menu_Init>
	Menu_RetrieveData(&hmenu, FIRST);
 8000850:	2100      	movs	r1, #0
 8000852:	485f      	ldr	r0, [pc, #380]	; (80009d0 <main+0x27c>)
 8000854:	f003 fcf5 	bl	8004242 <Menu_RetrieveData>
	Menu_Render(&hmenu, FULL);
 8000858:	2100      	movs	r1, #0
 800085a:	485d      	ldr	r0, [pc, #372]	; (80009d0 <main+0x27c>)
 800085c:	f003 fe3a 	bl	80044d4 <Menu_Render>

	// Turning off
		for (uint8_t i = 0; i < 6; i++)
 8000860:	2300      	movs	r3, #0
 8000862:	717b      	strb	r3, [r7, #5]
 8000864:	e00e      	b.n	8000884 <main+0x130>
			HAL_GPIO_WritePin(led_ports[i], led_pins[i], GPIO_PIN_RESET);
 8000866:	797b      	ldrb	r3, [r7, #5]
 8000868:	4a48      	ldr	r2, [pc, #288]	; (800098c <main+0x238>)
 800086a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800086e:	797b      	ldrb	r3, [r7, #5]
 8000870:	4a47      	ldr	r2, [pc, #284]	; (8000990 <main+0x23c>)
 8000872:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000876:	2200      	movs	r2, #0
 8000878:	4619      	mov	r1, r3
 800087a:	f001 fe16 	bl	80024aa <HAL_GPIO_WritePin>
		for (uint8_t i = 0; i < 6; i++)
 800087e:	797b      	ldrb	r3, [r7, #5]
 8000880:	3301      	adds	r3, #1
 8000882:	717b      	strb	r3, [r7, #5]
 8000884:	797b      	ldrb	r3, [r7, #5]
 8000886:	2b05      	cmp	r3, #5
 8000888:	d9ed      	bls.n	8000866 <main+0x112>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		new_page = hmenu.selected_page;
 800088a:	4b51      	ldr	r3, [pc, #324]	; (80009d0 <main+0x27c>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	71bb      	strb	r3, [r7, #6]
		for (uint8_t i = 0; i < 6; i++) {
 8000890:	2300      	movs	r3, #0
 8000892:	713b      	strb	r3, [r7, #4]
 8000894:	e00d      	b.n	80008b2 <main+0x15e>
			if (btn_flags[i]) {
 8000896:	793b      	ldrb	r3, [r7, #4]
 8000898:	4a4e      	ldr	r2, [pc, #312]	; (80009d4 <main+0x280>)
 800089a:	5cd3      	ldrb	r3, [r2, r3]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d005      	beq.n	80008ac <main+0x158>
				btn_flags[i] = 0;
 80008a0:	793b      	ldrb	r3, [r7, #4]
 80008a2:	4a4c      	ldr	r2, [pc, #304]	; (80009d4 <main+0x280>)
 80008a4:	2100      	movs	r1, #0
 80008a6:	54d1      	strb	r1, [r2, r3]
				new_page = i;
 80008a8:	793b      	ldrb	r3, [r7, #4]
 80008aa:	71bb      	strb	r3, [r7, #6]
		for (uint8_t i = 0; i < 6; i++) {
 80008ac:	793b      	ldrb	r3, [r7, #4]
 80008ae:	3301      	adds	r3, #1
 80008b0:	713b      	strb	r3, [r7, #4]
 80008b2:	793b      	ldrb	r3, [r7, #4]
 80008b4:	2b05      	cmp	r3, #5
 80008b6:	d9ee      	bls.n	8000896 <main+0x142>
			}
		}

		for (uint8_t i = 0; i < 6; i++)  {
 80008b8:	2300      	movs	r3, #0
 80008ba:	70fb      	strb	r3, [r7, #3]
 80008bc:	e014      	b.n	80008e8 <main+0x194>
			HAL_GPIO_WritePin(led_ports[i], led_pins[i], i == new_page ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008be:	78fb      	ldrb	r3, [r7, #3]
 80008c0:	4a32      	ldr	r2, [pc, #200]	; (800098c <main+0x238>)
 80008c2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80008c6:	78fb      	ldrb	r3, [r7, #3]
 80008c8:	4a31      	ldr	r2, [pc, #196]	; (8000990 <main+0x23c>)
 80008ca:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80008ce:	78fa      	ldrb	r2, [r7, #3]
 80008d0:	79bb      	ldrb	r3, [r7, #6]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	bf0c      	ite	eq
 80008d6:	2301      	moveq	r3, #1
 80008d8:	2300      	movne	r3, #0
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	461a      	mov	r2, r3
 80008de:	f001 fde4 	bl	80024aa <HAL_GPIO_WritePin>
		for (uint8_t i = 0; i < 6; i++)  {
 80008e2:	78fb      	ldrb	r3, [r7, #3]
 80008e4:	3301      	adds	r3, #1
 80008e6:	70fb      	strb	r3, [r7, #3]
 80008e8:	78fb      	ldrb	r3, [r7, #3]
 80008ea:	2b05      	cmp	r3, #5
 80008ec:	d9e7      	bls.n	80008be <main+0x16a>
		}

		if (Menu_GoTo(&hmenu, new_page)) {
 80008ee:	79bb      	ldrb	r3, [r7, #6]
 80008f0:	4619      	mov	r1, r3
 80008f2:	4837      	ldr	r0, [pc, #220]	; (80009d0 <main+0x27c>)
 80008f4:	f003 fc8a 	bl	800420c <Menu_GoTo>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d014      	beq.n	8000928 <main+0x1d4>
			// MENU PAGE BUTTON
			Menu_RetrieveData(&hmenu, FIRST);
 80008fe:	2100      	movs	r1, #0
 8000900:	4833      	ldr	r0, [pc, #204]	; (80009d0 <main+0x27c>)
 8000902:	f003 fc9e 	bl	8004242 <Menu_RetrieveData>
			RE_Reset(&hre1);
 8000906:	4828      	ldr	r0, [pc, #160]	; (80009a8 <main+0x254>)
 8000908:	f000 feb0 	bl	800166c <RE_Reset>
			RE_Reset(&hre2);
 800090c:	4828      	ldr	r0, [pc, #160]	; (80009b0 <main+0x25c>)
 800090e:	f000 fead 	bl	800166c <RE_Reset>
			btn_flags[6] = 0;
 8000912:	4b30      	ldr	r3, [pc, #192]	; (80009d4 <main+0x280>)
 8000914:	2200      	movs	r2, #0
 8000916:	719a      	strb	r2, [r3, #6]
			btn_flags[7] = 0;
 8000918:	4b2e      	ldr	r3, [pc, #184]	; (80009d4 <main+0x280>)
 800091a:	2200      	movs	r2, #0
 800091c:	71da      	strb	r2, [r3, #7]
			Menu_Render(&hmenu, FULL);
 800091e:	2100      	movs	r1, #0
 8000920:	482b      	ldr	r0, [pc, #172]	; (80009d0 <main+0x27c>)
 8000922:	f003 fdd7 	bl	80044d4 <Menu_Render>
 8000926:	e7b0      	b.n	800088a <main+0x136>
		}  else {

			// MENU PERIODIC AND USER EVENTS
			if (hmenu.selected_page == PLOT) {
 8000928:	4b29      	ldr	r3, [pc, #164]	; (80009d0 <main+0x27c>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d153      	bne.n	80009d8 <main+0x284>
				hmenu.plot_xscale = RE_GetCount(&hre1) + 1;
 8000930:	481d      	ldr	r0, [pc, #116]	; (80009a8 <main+0x254>)
 8000932:	f000 fea7 	bl	8001684 <RE_GetCount>
 8000936:	4603      	mov	r3, r0
 8000938:	b2db      	uxtb	r3, r3
 800093a:	3301      	adds	r3, #1
 800093c:	b2da      	uxtb	r2, r3
 800093e:	4b24      	ldr	r3, [pc, #144]	; (80009d0 <main+0x27c>)
 8000940:	f883 267c 	strb.w	r2, [r3, #1660]	; 0x67c
				hmenu.plot_yscale = RE_GetCount(&hre2) + 1;
 8000944:	481a      	ldr	r0, [pc, #104]	; (80009b0 <main+0x25c>)
 8000946:	f000 fe9d 	bl	8001684 <RE_GetCount>
 800094a:	4603      	mov	r3, r0
 800094c:	b2db      	uxtb	r3, r3
 800094e:	3301      	adds	r3, #1
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4b1f      	ldr	r3, [pc, #124]	; (80009d0 <main+0x27c>)
 8000954:	f883 267d 	strb.w	r2, [r3, #1661]	; 0x67d
				if (hmenu.tick + 3000 < HAL_GetTick()) {
 8000958:	4b1d      	ldr	r3, [pc, #116]	; (80009d0 <main+0x27c>)
 800095a:	f8d3 3688 	ldr.w	r3, [r3, #1672]	; 0x688
 800095e:	f603 34b8 	addw	r4, r3, #3000	; 0xbb8
 8000962:	f001 f8dd 	bl	8001b20 <HAL_GetTick>
 8000966:	4603      	mov	r3, r0
 8000968:	429c      	cmp	r4, r3
 800096a:	d28e      	bcs.n	800088a <main+0x136>
					hmenu.tick = HAL_GetTick();
 800096c:	f001 f8d8 	bl	8001b20 <HAL_GetTick>
 8000970:	4603      	mov	r3, r0
 8000972:	4a17      	ldr	r2, [pc, #92]	; (80009d0 <main+0x27c>)
 8000974:	f8c2 3688 	str.w	r3, [r2, #1672]	; 0x688
					Menu_RetrieveData(&hmenu, PERIODIC);
 8000978:	2101      	movs	r1, #1
 800097a:	4815      	ldr	r0, [pc, #84]	; (80009d0 <main+0x27c>)
 800097c:	f003 fc61 	bl	8004242 <Menu_RetrieveData>
					Menu_Render(&hmenu, PARTIAL);
 8000980:	2101      	movs	r1, #1
 8000982:	4813      	ldr	r0, [pc, #76]	; (80009d0 <main+0x27c>)
 8000984:	f003 fda6 	bl	80044d4 <Menu_Render>
 8000988:	e77f      	b.n	800088a <main+0x136>
 800098a:	bf00      	nop
 800098c:	2000015c 	.word	0x2000015c
 8000990:	20000150 	.word	0x20000150
 8000994:	0800070d 	.word	0x0800070d
 8000998:	20001104 	.word	0x20001104
 800099c:	200010c0 	.word	0x200010c0
 80009a0:	20001148 	.word	0x20001148
 80009a4:	40010c00 	.word	0x40010c00
 80009a8:	20002e88 	.word	0x20002e88
 80009ac:	40010800 	.word	0x40010800
 80009b0:	20002ea0 	.word	0x20002ea0
 80009b4:	20001078 	.word	0x20001078
 80009b8:	20001c04 	.word	0x20001c04
 80009bc:	20001c06 	.word	0x20001c06
 80009c0:	080056e8 	.word	0x080056e8
 80009c4:	080056f4 	.word	0x080056f4
 80009c8:	080056f8 	.word	0x080056f8
 80009cc:	0800570c 	.word	0x0800570c
 80009d0:	2000156c 	.word	0x2000156c
 80009d4:	20001bfc 	.word	0x20001bfc
				}

			} else if (hmenu.selected_page == EDIT) {
 80009d8:	4b67      	ldr	r3, [pc, #412]	; (8000b78 <main+0x424>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b02      	cmp	r3, #2
 80009de:	d165      	bne.n	8000aac <main+0x358>
				hmenu.edit_index1 = RE_GetCount(&hre1);
 80009e0:	4866      	ldr	r0, [pc, #408]	; (8000b7c <main+0x428>)
 80009e2:	f000 fe4f 	bl	8001684 <RE_GetCount>
 80009e6:	4603      	mov	r3, r0
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4b63      	ldr	r3, [pc, #396]	; (8000b78 <main+0x424>)
 80009ec:	f883 267e 	strb.w	r2, [r3, #1662]	; 0x67e
				hmenu.edit_index2 = RE_GetCount(&hre2) % MAX_PEDALS_COUNT;
 80009f0:	4863      	ldr	r0, [pc, #396]	; (8000b80 <main+0x42c>)
 80009f2:	f000 fe47 	bl	8001684 <RE_GetCount>
 80009f6:	4603      	mov	r3, r0
 80009f8:	461a      	mov	r2, r3
 80009fa:	4b62      	ldr	r3, [pc, #392]	; (8000b84 <main+0x430>)
 80009fc:	fb83 3102 	smull	r3, r1, r3, r2
 8000a00:	17d3      	asrs	r3, r2, #31
 8000a02:	1ac9      	subs	r1, r1, r3
 8000a04:	460b      	mov	r3, r1
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	440b      	add	r3, r1
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	b21b      	sxth	r3, r3
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4b59      	ldr	r3, [pc, #356]	; (8000b78 <main+0x424>)
 8000a14:	f883 267f 	strb.w	r2, [r3, #1663]	; 0x67f
				if (btn_flags[7]) {
 8000a18:	4b5b      	ldr	r3, [pc, #364]	; (8000b88 <main+0x434>)
 8000a1a:	79db      	ldrb	r3, [r3, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d040      	beq.n	8000aa2 <main+0x34e>
					btn_flags[7] = 0;
 8000a20:	4b59      	ldr	r3, [pc, #356]	; (8000b88 <main+0x434>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	71da      	strb	r2, [r3, #7]
					hmenu.pedals[hmenu.edit_index2].pedal_formatted.type += 1;
 8000a26:	4b54      	ldr	r3, [pc, #336]	; (8000b78 <main+0x424>)
 8000a28:	f893 367f 	ldrb.w	r3, [r3, #1663]	; 0x67f
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4a52      	ldr	r2, [pc, #328]	; (8000b78 <main+0x424>)
 8000a30:	2398      	movs	r3, #152	; 0x98
 8000a32:	fb01 f303 	mul.w	r3, r1, r3
 8000a36:	4413      	add	r3, r2
 8000a38:	3304      	adds	r3, #4
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	4a4e      	ldr	r2, [pc, #312]	; (8000b78 <main+0x424>)
 8000a3e:	f892 267f 	ldrb.w	r2, [r2, #1663]	; 0x67f
 8000a42:	4610      	mov	r0, r2
 8000a44:	3301      	adds	r3, #1
 8000a46:	b2d9      	uxtb	r1, r3
 8000a48:	4a4b      	ldr	r2, [pc, #300]	; (8000b78 <main+0x424>)
 8000a4a:	2398      	movs	r3, #152	; 0x98
 8000a4c:	fb00 f303 	mul.w	r3, r0, r3
 8000a50:	4413      	add	r3, r2
 8000a52:	3304      	adds	r3, #4
 8000a54:	460a      	mov	r2, r1
 8000a56:	701a      	strb	r2, [r3, #0]
					hmenu.pedals[hmenu.edit_index2].pedal_formatted.type %= PEDAL_TYPES;
 8000a58:	4b47      	ldr	r3, [pc, #284]	; (8000b78 <main+0x424>)
 8000a5a:	f893 367f 	ldrb.w	r3, [r3, #1663]	; 0x67f
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4a45      	ldr	r2, [pc, #276]	; (8000b78 <main+0x424>)
 8000a62:	2398      	movs	r3, #152	; 0x98
 8000a64:	fb01 f303 	mul.w	r3, r1, r3
 8000a68:	4413      	add	r3, r2
 8000a6a:	3304      	adds	r3, #4
 8000a6c:	781a      	ldrb	r2, [r3, #0]
 8000a6e:	4b42      	ldr	r3, [pc, #264]	; (8000b78 <main+0x424>)
 8000a70:	f893 367f 	ldrb.w	r3, [r3, #1663]	; 0x67f
 8000a74:	4618      	mov	r0, r3
 8000a76:	4b45      	ldr	r3, [pc, #276]	; (8000b8c <main+0x438>)
 8000a78:	fba3 1302 	umull	r1, r3, r3, r2
 8000a7c:	0859      	lsrs	r1, r3, #1
 8000a7e:	460b      	mov	r3, r1
 8000a80:	00db      	lsls	r3, r3, #3
 8000a82:	440b      	add	r3, r1
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	b2d9      	uxtb	r1, r3
 8000a88:	4a3b      	ldr	r2, [pc, #236]	; (8000b78 <main+0x424>)
 8000a8a:	2398      	movs	r3, #152	; 0x98
 8000a8c:	fb00 f303 	mul.w	r3, r0, r3
 8000a90:	4413      	add	r3, r2
 8000a92:	3304      	adds	r3, #4
 8000a94:	460a      	mov	r2, r1
 8000a96:	701a      	strb	r2, [r3, #0]
					Menu_RetrieveData(&hmenu, USER);
 8000a98:	2102      	movs	r1, #2
 8000a9a:	4837      	ldr	r0, [pc, #220]	; (8000b78 <main+0x424>)
 8000a9c:	f003 fbd1 	bl	8004242 <Menu_RetrieveData>
 8000aa0:	e6f3      	b.n	800088a <main+0x136>
				} else {
					Menu_Render(&hmenu, PARTIAL);
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	4834      	ldr	r0, [pc, #208]	; (8000b78 <main+0x424>)
 8000aa6:	f003 fd15 	bl	80044d4 <Menu_Render>
 8000aaa:	e6ee      	b.n	800088a <main+0x136>
				}

			} else if (hmenu.selected_page == MODE) {
 8000aac:	4b32      	ldr	r3, [pc, #200]	; (8000b78 <main+0x424>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b03      	cmp	r3, #3
 8000ab2:	d126      	bne.n	8000b02 <main+0x3ae>
				hmenu.mode_selected = RE_GetCount(&hre2) % MODE_TYPES;
 8000ab4:	4832      	ldr	r0, [pc, #200]	; (8000b80 <main+0x42c>)
 8000ab6:	f000 fde5 	bl	8001684 <RE_GetCount>
 8000aba:	4603      	mov	r3, r0
 8000abc:	425a      	negs	r2, r3
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	f002 0207 	and.w	r2, r2, #7
 8000ac6:	bf58      	it	pl
 8000ac8:	4253      	negpl	r3, r2
 8000aca:	b21b      	sxth	r3, r3
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	4b2a      	ldr	r3, [pc, #168]	; (8000b78 <main+0x424>)
 8000ad0:	f883 2682 	strb.w	r2, [r3, #1666]	; 0x682
				if (btn_flags[7]) {
 8000ad4:	4b2c      	ldr	r3, [pc, #176]	; (8000b88 <main+0x434>)
 8000ad6:	79db      	ldrb	r3, [r3, #7]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d00d      	beq.n	8000af8 <main+0x3a4>
					btn_flags[7] = 0;
 8000adc:	4b2a      	ldr	r3, [pc, #168]	; (8000b88 <main+0x434>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	71da      	strb	r2, [r3, #7]
					hmenu.mode_active = hmenu.mode_selected;
 8000ae2:	4b25      	ldr	r3, [pc, #148]	; (8000b78 <main+0x424>)
 8000ae4:	f893 2682 	ldrb.w	r2, [r3, #1666]	; 0x682
 8000ae8:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <main+0x424>)
 8000aea:	f883 2681 	strb.w	r2, [r3, #1665]	; 0x681
					Menu_RetrieveData(&hmenu, USER);
 8000aee:	2102      	movs	r1, #2
 8000af0:	4821      	ldr	r0, [pc, #132]	; (8000b78 <main+0x424>)
 8000af2:	f003 fba6 	bl	8004242 <Menu_RetrieveData>
 8000af6:	e6c8      	b.n	800088a <main+0x136>
				} else {
					Menu_Render(&hmenu, PARTIAL);
 8000af8:	2101      	movs	r1, #1
 8000afa:	481f      	ldr	r0, [pc, #124]	; (8000b78 <main+0x424>)
 8000afc:	f003 fcea 	bl	80044d4 <Menu_Render>
 8000b00:	e6c3      	b.n	800088a <main+0x136>
				}
			} else if (hmenu.selected_page == TUNER) {
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <main+0x424>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b04      	cmp	r3, #4
 8000b08:	d108      	bne.n	8000b1c <main+0x3c8>
				Menu_RetrieveData(&hmenu, PERIODIC);
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	481a      	ldr	r0, [pc, #104]	; (8000b78 <main+0x424>)
 8000b0e:	f003 fb98 	bl	8004242 <Menu_RetrieveData>
				Menu_Render(&hmenu, PARTIAL);
 8000b12:	2101      	movs	r1, #1
 8000b14:	4818      	ldr	r0, [pc, #96]	; (8000b78 <main+0x424>)
 8000b16:	f003 fcdd 	bl	80044d4 <Menu_Render>
 8000b1a:	e6b6      	b.n	800088a <main+0x136>
			} else if (hmenu.selected_page == FILES) {
 8000b1c:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <main+0x424>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b05      	cmp	r3, #5
 8000b22:	f47f aeb2 	bne.w	800088a <main+0x136>
				hmenu.usb_selected = RE_GetCount(&hre2) % 2;
 8000b26:	4816      	ldr	r0, [pc, #88]	; (8000b80 <main+0x42c>)
 8000b28:	f000 fdac 	bl	8001684 <RE_GetCount>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	bfb8      	it	lt
 8000b36:	425b      	neglt	r3, r3
 8000b38:	b21b      	sxth	r3, r3
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <main+0x424>)
 8000b3e:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
				if (btn_flags[7]) {
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <main+0x434>)
 8000b44:	79db      	ldrb	r3, [r3, #7]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d00c      	beq.n	8000b64 <main+0x410>
					btn_flags[7] = 0;
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <main+0x434>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	71da      	strb	r2, [r3, #7]
					if (hmenu.usb_ready) {
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <main+0x424>)
 8000b52:	f893 3683 	ldrb.w	r3, [r3, #1667]	; 0x683
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d008      	beq.n	8000b6c <main+0x418>
						Menu_RetrieveData(&hmenu, USER);
 8000b5a:	2102      	movs	r1, #2
 8000b5c:	4806      	ldr	r0, [pc, #24]	; (8000b78 <main+0x424>)
 8000b5e:	f003 fb70 	bl	8004242 <Menu_RetrieveData>
 8000b62:	e003      	b.n	8000b6c <main+0x418>
					}
				} else {
					Menu_RetrieveData(&hmenu, PERIODIC);
 8000b64:	2101      	movs	r1, #1
 8000b66:	4804      	ldr	r0, [pc, #16]	; (8000b78 <main+0x424>)
 8000b68:	f003 fb6b 	bl	8004242 <Menu_RetrieveData>
				}
				Menu_Render(&hmenu, PARTIAL);
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	4802      	ldr	r0, [pc, #8]	; (8000b78 <main+0x424>)
 8000b70:	f003 fcb0 	bl	80044d4 <Menu_Render>
		new_page = hmenu.selected_page;
 8000b74:	e689      	b.n	800088a <main+0x136>
 8000b76:	bf00      	nop
 8000b78:	2000156c 	.word	0x2000156c
 8000b7c:	20002e88 	.word	0x20002e88
 8000b80:	20002ea0 	.word	0x20002ea0
 8000b84:	2aaaaaab 	.word	0x2aaaaaab
 8000b88:	20001bfc 	.word	0x20001bfc
 8000b8c:	38e38e39 	.word	0x38e38e39

08000b90 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b090      	sub	sp, #64	; 0x40
 8000b94:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b96:	f107 0318 	add.w	r3, r7, #24
 8000b9a:	2228      	movs	r2, #40	; 0x28
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f004 f922 	bl	8004de8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bba:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bcc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd4:	f107 0318 	add.w	r3, r7, #24
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f001 fc97 	bl	800250c <HAL_RCC_OscConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <SystemClock_Config+0x58>
	{
		Error_Handler();
 8000be4:	f000 f9c2 	bl	8000f6c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be8:	230f      	movs	r3, #15
 8000bea:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bec:	2302      	movs	r3, #2
 8000bee:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bf8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2102      	movs	r1, #2
 8000c02:	4618      	mov	r0, r3
 8000c04:	f001 ff04 	bl	8002a10 <HAL_RCC_ClockConfig>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <SystemClock_Config+0x82>
	{
		Error_Handler();
 8000c0e:	f000 f9ad 	bl	8000f6c <Error_Handler>
	}
}
 8000c12:	bf00      	nop
 8000c14:	3740      	adds	r7, #64	; 0x40
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000c20:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <MX_SPI1_Init+0x68>)
 8000c22:	4a19      	ldr	r2, [pc, #100]	; (8000c88 <MX_SPI1_Init+0x6c>)
 8000c24:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <MX_SPI1_Init+0x68>)
 8000c28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c2c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <MX_SPI1_Init+0x68>)
 8000c30:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c34:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <MX_SPI1_Init+0x68>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_SPI1_Init+0x68>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <MX_SPI1_Init+0x68>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <MX_SPI1_Init+0x68>)
 8000c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c4e:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <MX_SPI1_Init+0x68>)
 8000c52:	2210      	movs	r2, #16
 8000c54:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <MX_SPI1_Init+0x68>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <MX_SPI1_Init+0x68>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <MX_SPI1_Init+0x68>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <MX_SPI1_Init+0x68>)
 8000c6a:	220a      	movs	r2, #10
 8000c6c:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c6e:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_SPI1_Init+0x68>)
 8000c70:	f002 f866 	bl	8002d40 <HAL_SPI_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_SPI1_Init+0x62>
	{
		Error_Handler();
 8000c7a:	f000 f977 	bl	8000f6c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20001020 	.word	0x20001020
 8000c88:	40013000 	.word	0x40013000

08000c8c <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c92:	f107 0308 	add.w	r3, r7, #8
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000ca8:	4b1d      	ldr	r3, [pc, #116]	; (8000d20 <MX_TIM3_Init+0x94>)
 8000caa:	4a1e      	ldr	r2, [pc, #120]	; (8000d24 <MX_TIM3_Init+0x98>)
 8000cac:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 72;
 8000cae:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <MX_TIM3_Init+0x94>)
 8000cb0:	2248      	movs	r2, #72	; 0x48
 8000cb2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <MX_TIM3_Init+0x94>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 10000-1;
 8000cba:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <MX_TIM3_Init+0x94>)
 8000cbc:	f242 720f 	movw	r2, #9999	; 0x270f
 8000cc0:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc2:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <MX_TIM3_Init+0x94>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc8:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <MX_TIM3_Init+0x94>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cce:	4814      	ldr	r0, [pc, #80]	; (8000d20 <MX_TIM3_Init+0x94>)
 8000cd0:	f002 fa9c 	bl	800320c <HAL_TIM_Base_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM3_Init+0x52>
	{
		Error_Handler();
 8000cda:	f000 f947 	bl	8000f6c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ce4:	f107 0308 	add.w	r3, r7, #8
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480d      	ldr	r0, [pc, #52]	; (8000d20 <MX_TIM3_Init+0x94>)
 8000cec:	f002 fc38 	bl	8003560 <HAL_TIM_ConfigClockSource>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM3_Init+0x6e>
	{
		Error_Handler();
 8000cf6:	f000 f939 	bl	8000f6c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d02:	463b      	mov	r3, r7
 8000d04:	4619      	mov	r1, r3
 8000d06:	4806      	ldr	r0, [pc, #24]	; (8000d20 <MX_TIM3_Init+0x94>)
 8000d08:	f002 fe0a 	bl	8003920 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM3_Init+0x8a>
	{
		Error_Handler();
 8000d12:	f000 f92b 	bl	8000f6c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20001078 	.word	0x20001078
 8000d24:	40000400 	.word	0x40000400

08000d28 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <MX_USART3_UART_Init+0x4c>)
 8000d2e:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <MX_USART3_UART_Init+0x50>)
 8000d30:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <MX_USART3_UART_Init+0x4c>)
 8000d34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d38:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <MX_USART3_UART_Init+0x4c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <MX_USART3_UART_Init+0x4c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <MX_USART3_UART_Init+0x4c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <MX_USART3_UART_Init+0x4c>)
 8000d4e:	220c      	movs	r2, #12
 8000d50:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <MX_USART3_UART_Init+0x4c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <MX_USART3_UART_Init+0x4c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d5e:	4805      	ldr	r0, [pc, #20]	; (8000d74 <MX_USART3_UART_Init+0x4c>)
 8000d60:	f002 fe4e 	bl	8003a00 <HAL_UART_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8000d6a:	f000 f8ff 	bl	8000f6c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200010c0 	.word	0x200010c0
 8000d78:	40004800 	.word	0x40004800

08000d7c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <MX_DMA_Init+0x38>)
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <MX_DMA_Init+0x38>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6153      	str	r3, [r2, #20]
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <MX_DMA_Init+0x38>)
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	200d      	movs	r0, #13
 8000da0:	f000 ffc3 	bl	8001d2a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000da4:	200d      	movs	r0, #13
 8000da6:	f000 ffdc 	bl	8001d62 <HAL_NVIC_EnableIRQ>

}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40021000 	.word	0x40021000

08000db8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbe:	f107 0310 	add.w	r3, r7, #16
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000dcc:	4b62      	ldr	r3, [pc, #392]	; (8000f58 <MX_GPIO_Init+0x1a0>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	4a61      	ldr	r2, [pc, #388]	; (8000f58 <MX_GPIO_Init+0x1a0>)
 8000dd2:	f043 0310 	orr.w	r3, r3, #16
 8000dd6:	6193      	str	r3, [r2, #24]
 8000dd8:	4b5f      	ldr	r3, [pc, #380]	; (8000f58 <MX_GPIO_Init+0x1a0>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	f003 0310 	and.w	r3, r3, #16
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000de4:	4b5c      	ldr	r3, [pc, #368]	; (8000f58 <MX_GPIO_Init+0x1a0>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	4a5b      	ldr	r2, [pc, #364]	; (8000f58 <MX_GPIO_Init+0x1a0>)
 8000dea:	f043 0320 	orr.w	r3, r3, #32
 8000dee:	6193      	str	r3, [r2, #24]
 8000df0:	4b59      	ldr	r3, [pc, #356]	; (8000f58 <MX_GPIO_Init+0x1a0>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	f003 0320 	and.w	r3, r3, #32
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfc:	4b56      	ldr	r3, [pc, #344]	; (8000f58 <MX_GPIO_Init+0x1a0>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a55      	ldr	r2, [pc, #340]	; (8000f58 <MX_GPIO_Init+0x1a0>)
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b53      	ldr	r3, [pc, #332]	; (8000f58 <MX_GPIO_Init+0x1a0>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e14:	4b50      	ldr	r3, [pc, #320]	; (8000f58 <MX_GPIO_Init+0x1a0>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a4f      	ldr	r2, [pc, #316]	; (8000f58 <MX_GPIO_Init+0x1a0>)
 8000e1a:	f043 0308 	orr.w	r3, r3, #8
 8000e1e:	6193      	str	r3, [r2, #24]
 8000e20:	4b4d      	ldr	r3, [pc, #308]	; (8000f58 <MX_GPIO_Init+0x1a0>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f003 0308 	and.w	r3, r3, #8
 8000e28:	603b      	str	r3, [r7, #0]
 8000e2a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD6_Pin|LD5_Pin|LD4_Pin|EPD_CS_Pin, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f248 01a8 	movw	r1, #32936	; 0x80a8
 8000e32:	484a      	ldr	r0, [pc, #296]	; (8000f5c <MX_GPIO_Init+0x1a4>)
 8000e34:	f001 fb39 	bl	80024aa <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin|LD1_Pin|EPD_RST_Pin
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f249 3102 	movw	r1, #37634	; 0x9302
 8000e3e:	4848      	ldr	r0, [pc, #288]	; (8000f60 <MX_GPIO_Init+0x1a8>)
 8000e40:	f001 fb33 	bl	80024aa <HAL_GPIO_WritePin>
			|EPD_DC_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : BTN_ENC1_Pin */
	GPIO_InitStruct.Pin = BTN_ENC1_Pin;
 8000e44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e48:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e4a:	4b46      	ldr	r3, [pc, #280]	; (8000f64 <MX_GPIO_Init+0x1ac>)
 8000e4c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BTN_ENC1_GPIO_Port, &GPIO_InitStruct);
 8000e52:	f107 0310 	add.w	r3, r7, #16
 8000e56:	4619      	mov	r1, r3
 8000e58:	4843      	ldr	r0, [pc, #268]	; (8000f68 <MX_GPIO_Init+0x1b0>)
 8000e5a:	f001 f98b 	bl	8002174 <HAL_GPIO_Init>

	/*Configure GPIO pins : ENC2B_Pin ENC2A_Pin */
	GPIO_InitStruct.Pin = ENC2B_Pin|ENC2A_Pin;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	f107 0310 	add.w	r3, r7, #16
 8000e6e:	4619      	mov	r1, r3
 8000e70:	483a      	ldr	r0, [pc, #232]	; (8000f5c <MX_GPIO_Init+0x1a4>)
 8000e72:	f001 f97f 	bl	8002174 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD6_Pin LD5_Pin LD4_Pin EPD_CS_Pin */
	GPIO_InitStruct.Pin = LD6_Pin|LD5_Pin|LD4_Pin|EPD_CS_Pin;
 8000e76:	f248 03a8 	movw	r3, #32936	; 0x80a8
 8000e7a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2302      	movs	r3, #2
 8000e86:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e88:	f107 0310 	add.w	r3, r7, #16
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4833      	ldr	r0, [pc, #204]	; (8000f5c <MX_GPIO_Init+0x1a4>)
 8000e90:	f001 f970 	bl	8002174 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN6_Pin BTN5_Pin BTN1_Pin */
	GPIO_InitStruct.Pin = BTN6_Pin|BTN5_Pin|BTN1_Pin;
 8000e94:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e98:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e9a:	4b32      	ldr	r3, [pc, #200]	; (8000f64 <MX_GPIO_Init+0x1ac>)
 8000e9c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea2:	f107 0310 	add.w	r3, r7, #16
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	482c      	ldr	r0, [pc, #176]	; (8000f5c <MX_GPIO_Init+0x1a4>)
 8000eaa:	f001 f963 	bl	8002174 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN4_Pin BTN3_Pin BTN2_Pin BTN_ENC2_Pin */
	GPIO_InitStruct.Pin = BTN4_Pin|BTN3_Pin|BTN2_Pin|BTN_ENC2_Pin;
 8000eae:	f246 0305 	movw	r3, #24581	; 0x6005
 8000eb2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eb4:	4b2b      	ldr	r3, [pc, #172]	; (8000f64 <MX_GPIO_Init+0x1ac>)
 8000eb6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebc:	f107 0310 	add.w	r3, r7, #16
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4827      	ldr	r0, [pc, #156]	; (8000f60 <MX_GPIO_Init+0x1a8>)
 8000ec4:	f001 f956 	bl	8002174 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD2_Pin LD1_Pin EPD_RST_Pin
                           EPD_DC_Pin */
	GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin|LD1_Pin|EPD_RST_Pin
 8000ec8:	f249 3302 	movw	r3, #37634	; 0x9302
 8000ecc:	613b      	str	r3, [r7, #16]
			|EPD_DC_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eda:	f107 0310 	add.w	r3, r7, #16
 8000ede:	4619      	mov	r1, r3
 8000ee0:	481f      	ldr	r0, [pc, #124]	; (8000f60 <MX_GPIO_Init+0x1a8>)
 8000ee2:	f001 f947 	bl	8002174 <HAL_GPIO_Init>

	/*Configure GPIO pins : EPD_BUSY_Pin ENC1B_Pin ENC1A_Pin */
	GPIO_InitStruct.Pin = EPD_BUSY_Pin|ENC1B_Pin|ENC1A_Pin;
 8000ee6:	23d0      	movs	r3, #208	; 0xd0
 8000ee8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef2:	f107 0310 	add.w	r3, r7, #16
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4819      	ldr	r0, [pc, #100]	; (8000f60 <MX_GPIO_Init+0x1a8>)
 8000efa:	f001 f93b 	bl	8002174 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2100      	movs	r1, #0
 8000f02:	2006      	movs	r0, #6
 8000f04:	f000 ff11 	bl	8001d2a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f08:	2006      	movs	r0, #6
 8000f0a:	f000 ff2a 	bl	8001d62 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2100      	movs	r1, #0
 8000f12:	2008      	movs	r0, #8
 8000f14:	f000 ff09 	bl	8001d2a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000f18:	2008      	movs	r0, #8
 8000f1a:	f000 ff22 	bl	8001d62 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2100      	movs	r1, #0
 8000f22:	200a      	movs	r0, #10
 8000f24:	f000 ff01 	bl	8001d2a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000f28:	200a      	movs	r0, #10
 8000f2a:	f000 ff1a 	bl	8001d62 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	2017      	movs	r0, #23
 8000f34:	f000 fef9 	bl	8001d2a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f38:	2017      	movs	r0, #23
 8000f3a:	f000 ff12 	bl	8001d62 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2100      	movs	r1, #0
 8000f42:	2028      	movs	r0, #40	; 0x28
 8000f44:	f000 fef1 	bl	8001d2a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f48:	2028      	movs	r0, #40	; 0x28
 8000f4a:	f000 ff0a 	bl	8001d62 <HAL_NVIC_EnableIRQ>

}
 8000f4e:	bf00      	nop
 8000f50:	3720      	adds	r7, #32
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40010800 	.word	0x40010800
 8000f60:	40010c00 	.word	0x40010c00
 8000f64:	10110000 	.word	0x10110000
 8000f68:	40011000 	.word	0x40011000

08000f6c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f70:	b672      	cpsid	i
}
 8000f72:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f74:	e7fe      	b.n	8000f74 <Error_Handler+0x8>
	...

08000f78 <Translate>:
 *      Author: asky
 */

#include "painter2.h"

uint16_t Translate(char c) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
	static uint16_t map[256];
	static uint8_t map_init = 0;

	if (!map_init) {
 8000f82:	4b55      	ldr	r3, [pc, #340]	; (80010d8 <Translate+0x160>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f040 809c 	bne.w	80010c4 <Translate+0x14c>

		// SYMBOLS
		map[32] = 36; // space
 8000f8c:	4b53      	ldr	r3, [pc, #332]	; (80010dc <Translate+0x164>)
 8000f8e:	2224      	movs	r2, #36	; 0x24
 8000f90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		map[33] = 37; // !
 8000f94:	4b51      	ldr	r3, [pc, #324]	; (80010dc <Translate+0x164>)
 8000f96:	2225      	movs	r2, #37	; 0x25
 8000f98:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		map[34] = 38; // @
 8000f9c:	4b4f      	ldr	r3, [pc, #316]	; (80010dc <Translate+0x164>)
 8000f9e:	2226      	movs	r2, #38	; 0x26
 8000fa0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		map[35] = 39; // #
 8000fa4:	4b4d      	ldr	r3, [pc, #308]	; (80010dc <Translate+0x164>)
 8000fa6:	2227      	movs	r2, #39	; 0x27
 8000fa8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		map[36] = 40; // $
 8000fac:	4b4b      	ldr	r3, [pc, #300]	; (80010dc <Translate+0x164>)
 8000fae:	2228      	movs	r2, #40	; 0x28
 8000fb0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		map[37] = 41; // %
 8000fb4:	4b49      	ldr	r3, [pc, #292]	; (80010dc <Translate+0x164>)
 8000fb6:	2229      	movs	r2, #41	; 0x29
 8000fb8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		map[38] = 42; // &
 8000fbc:	4b47      	ldr	r3, [pc, #284]	; (80010dc <Translate+0x164>)
 8000fbe:	222a      	movs	r2, #42	; 0x2a
 8000fc0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		map[39] = 43; // '
 8000fc4:	4b45      	ldr	r3, [pc, #276]	; (80010dc <Translate+0x164>)
 8000fc6:	222b      	movs	r2, #43	; 0x2b
 8000fc8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		map[40] = 44; // (
 8000fcc:	4b43      	ldr	r3, [pc, #268]	; (80010dc <Translate+0x164>)
 8000fce:	222c      	movs	r2, #44	; 0x2c
 8000fd0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		map[41] = 45; // )
 8000fd4:	4b41      	ldr	r3, [pc, #260]	; (80010dc <Translate+0x164>)
 8000fd6:	222d      	movs	r2, #45	; 0x2d
 8000fd8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		map[42] = 46; // *
 8000fdc:	4b3f      	ldr	r3, [pc, #252]	; (80010dc <Translate+0x164>)
 8000fde:	222e      	movs	r2, #46	; 0x2e
 8000fe0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		map[43] = 47; // +
 8000fe4:	4b3d      	ldr	r3, [pc, #244]	; (80010dc <Translate+0x164>)
 8000fe6:	222f      	movs	r2, #47	; 0x2f
 8000fe8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		map[44] = 48; // ,
 8000fec:	4b3b      	ldr	r3, [pc, #236]	; (80010dc <Translate+0x164>)
 8000fee:	2230      	movs	r2, #48	; 0x30
 8000ff0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		map[45] = 49; // -
 8000ff4:	4b39      	ldr	r3, [pc, #228]	; (80010dc <Translate+0x164>)
 8000ff6:	2231      	movs	r2, #49	; 0x31
 8000ff8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		map[46] = 50; // .
 8000ffc:	4b37      	ldr	r3, [pc, #220]	; (80010dc <Translate+0x164>)
 8000ffe:	2232      	movs	r2, #50	; 0x32
 8001000:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		map[47] = 51; // /
 8001004:	4b35      	ldr	r3, [pc, #212]	; (80010dc <Translate+0x164>)
 8001006:	2233      	movs	r2, #51	; 0x33
 8001008:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		map[58] = 52; // :
 800100c:	4b33      	ldr	r3, [pc, #204]	; (80010dc <Translate+0x164>)
 800100e:	2234      	movs	r2, #52	; 0x34
 8001010:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
		map[59] = 53; // ;
 8001014:	4b31      	ldr	r3, [pc, #196]	; (80010dc <Translate+0x164>)
 8001016:	2235      	movs	r2, #53	; 0x35
 8001018:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
		map[60] = 54; // <
 800101c:	4b2f      	ldr	r3, [pc, #188]	; (80010dc <Translate+0x164>)
 800101e:	2236      	movs	r2, #54	; 0x36
 8001020:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
		map[61] = 55; // =
 8001024:	4b2d      	ldr	r3, [pc, #180]	; (80010dc <Translate+0x164>)
 8001026:	2237      	movs	r2, #55	; 0x37
 8001028:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
		map[62] = 56; // >
 800102c:	4b2b      	ldr	r3, [pc, #172]	; (80010dc <Translate+0x164>)
 800102e:	2238      	movs	r2, #56	; 0x38
 8001030:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
		map[63] = 57; // ?
 8001034:	4b29      	ldr	r3, [pc, #164]	; (80010dc <Translate+0x164>)
 8001036:	2239      	movs	r2, #57	; 0x39
 8001038:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
		map[91] = 58; // [
 800103c:	4b27      	ldr	r3, [pc, #156]	; (80010dc <Translate+0x164>)
 800103e:	223a      	movs	r2, #58	; 0x3a
 8001040:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
		map[92] = 59; /* \ */
 8001044:	4b25      	ldr	r3, [pc, #148]	; (80010dc <Translate+0x164>)
 8001046:	223b      	movs	r2, #59	; 0x3b
 8001048:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		map[93] = 60; // ]
 800104c:	4b23      	ldr	r3, [pc, #140]	; (80010dc <Translate+0x164>)
 800104e:	223c      	movs	r2, #60	; 0x3c
 8001050:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		map[94] = 61; // ^
 8001054:	4b21      	ldr	r3, [pc, #132]	; (80010dc <Translate+0x164>)
 8001056:	223d      	movs	r2, #61	; 0x3d
 8001058:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		map[95] = 62; // _
 800105c:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <Translate+0x164>)
 800105e:	223e      	movs	r2, #62	; 0x3e
 8001060:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		map[64] = 63; // @ special
 8001064:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <Translate+0x164>)
 8001066:	223f      	movs	r2, #63	; 0x3f
 8001068:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

		// NUMBERS
		for (uint8_t i = 0; i < 10; i++) {
 800106c:	2300      	movs	r3, #0
 800106e:	73fb      	strb	r3, [r7, #15]
 8001070:	e00b      	b.n	800108a <Translate+0x112>
			map[48 + i] = 26 + i;
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	b29a      	uxth	r2, r3
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	3330      	adds	r3, #48	; 0x30
 800107a:	321a      	adds	r2, #26
 800107c:	b291      	uxth	r1, r2
 800107e:	4a17      	ldr	r2, [pc, #92]	; (80010dc <Translate+0x164>)
 8001080:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t i = 0; i < 10; i++) {
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	3301      	adds	r3, #1
 8001088:	73fb      	strb	r3, [r7, #15]
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	2b09      	cmp	r3, #9
 800108e:	d9f0      	bls.n	8001072 <Translate+0xfa>
		}

		// LETTERS
		for (uint8_t i = 0; i < 26; i++) {
 8001090:	2300      	movs	r3, #0
 8001092:	73bb      	strb	r3, [r7, #14]
 8001094:	e010      	b.n	80010b8 <Translate+0x140>
			map[65 + i] = i; // uppercase
 8001096:	7bbb      	ldrb	r3, [r7, #14]
 8001098:	3341      	adds	r3, #65	; 0x41
 800109a:	7bba      	ldrb	r2, [r7, #14]
 800109c:	b291      	uxth	r1, r2
 800109e:	4a0f      	ldr	r2, [pc, #60]	; (80010dc <Translate+0x164>)
 80010a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			map[97 + i] = i; // lowercase
 80010a4:	7bbb      	ldrb	r3, [r7, #14]
 80010a6:	3361      	adds	r3, #97	; 0x61
 80010a8:	7bba      	ldrb	r2, [r7, #14]
 80010aa:	b291      	uxth	r1, r2
 80010ac:	4a0b      	ldr	r2, [pc, #44]	; (80010dc <Translate+0x164>)
 80010ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t i = 0; i < 26; i++) {
 80010b2:	7bbb      	ldrb	r3, [r7, #14]
 80010b4:	3301      	adds	r3, #1
 80010b6:	73bb      	strb	r3, [r7, #14]
 80010b8:	7bbb      	ldrb	r3, [r7, #14]
 80010ba:	2b19      	cmp	r3, #25
 80010bc:	d9eb      	bls.n	8001096 <Translate+0x11e>
		}

		map_init = 1;
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <Translate+0x160>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	701a      	strb	r2, [r3, #0]
	}

	return map[(uint8_t)c];
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	4a05      	ldr	r2, [pc, #20]	; (80010dc <Translate+0x164>)
 80010c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20002eb8 	.word	0x20002eb8
 80010dc:	20002ebc 	.word	0x20002ebc

080010e0 <Painter_TogglePixel>:

void Painter_TogglePixel(uint8_t *image, uint16_t *x, uint16_t *y, enum Origin origin) {
 80010e0:	b480      	push	{r7}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
 80010ec:	70fb      	strb	r3, [r7, #3]
	uint16_t i;
	uint16_t _x, _y;

	if (origin == TOP_LEFT) {
 80010ee:	78fb      	ldrb	r3, [r7, #3]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d106      	bne.n	8001102 <Painter_TogglePixel+0x22>
		_x = *x;
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	881b      	ldrh	r3, [r3, #0]
 80010f8:	82fb      	strh	r3, [r7, #22]
		_y = *y;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	82bb      	strh	r3, [r7, #20]
 8001100:	e026      	b.n	8001150 <Painter_TogglePixel+0x70>
	} else if (origin == TOP_RIGHT) {
 8001102:	78fb      	ldrb	r3, [r7, #3]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d108      	bne.n	800111a <Painter_TogglePixel+0x3a>
		_x = CANVAS_WIDTH - *y -1;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001110:	82fb      	strh	r3, [r7, #22]
		_y = *x;
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	82bb      	strh	r3, [r7, #20]
 8001118:	e01a      	b.n	8001150 <Painter_TogglePixel+0x70>
	} else if (origin == BOT_RIGHT) {
 800111a:	78fb      	ldrb	r3, [r7, #3]
 800111c:	2b03      	cmp	r3, #3
 800111e:	d10b      	bne.n	8001138 <Painter_TogglePixel+0x58>
		_x = CANVAS_WIDTH - *x -1;
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001128:	82fb      	strh	r3, [r7, #22]
		_y = CANVAS_HEIGHT - *y -1;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	f5c3 7393 	rsb	r3, r3, #294	; 0x126
 8001132:	3301      	adds	r3, #1
 8001134:	82bb      	strh	r3, [r7, #20]
 8001136:	e00b      	b.n	8001150 <Painter_TogglePixel+0x70>
	} else if (origin == BOT_LEFT) {
 8001138:	78fb      	ldrb	r3, [r7, #3]
 800113a:	2b02      	cmp	r3, #2
 800113c:	d108      	bne.n	8001150 <Painter_TogglePixel+0x70>
		_x = *y;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	82fb      	strh	r3, [r7, #22]
		_y = CANVAS_HEIGHT - *x -1;
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	f5c3 7393 	rsb	r3, r3, #294	; 0x126
 800114c:	3301      	adds	r3, #1
 800114e:	82bb      	strh	r3, [r7, #20]
	}

	if (_x < CANVAS_WIDTH && _y < CANVAS_HEIGHT) {
 8001150:	8afb      	ldrh	r3, [r7, #22]
 8001152:	2b7f      	cmp	r3, #127	; 0x7f
 8001154:	d820      	bhi.n	8001198 <Painter_TogglePixel+0xb8>
 8001156:	8abb      	ldrh	r3, [r7, #20]
 8001158:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 800115c:	d21c      	bcs.n	8001198 <Painter_TogglePixel+0xb8>
		// normalized to be top_left
		i = (_x +  _y * CANVAS_WIDTH) / 8;
 800115e:	8afa      	ldrh	r2, [r7, #22]
 8001160:	8abb      	ldrh	r3, [r7, #20]
 8001162:	01db      	lsls	r3, r3, #7
 8001164:	4413      	add	r3, r2
 8001166:	2b00      	cmp	r3, #0
 8001168:	da00      	bge.n	800116c <Painter_TogglePixel+0x8c>
 800116a:	3307      	adds	r3, #7
 800116c:	10db      	asrs	r3, r3, #3
 800116e:	827b      	strh	r3, [r7, #18]
		image[i] ^= (0x01 << (7 - _x % 8));
 8001170:	8a7b      	ldrh	r3, [r7, #18]
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	4413      	add	r3, r2
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	b25a      	sxtb	r2, r3
 800117a:	8afb      	ldrh	r3, [r7, #22]
 800117c:	43db      	mvns	r3, r3
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	2101      	movs	r1, #1
 8001184:	fa01 f303 	lsl.w	r3, r1, r3
 8001188:	b25b      	sxtb	r3, r3
 800118a:	4053      	eors	r3, r2
 800118c:	b259      	sxtb	r1, r3
 800118e:	8a7b      	ldrh	r3, [r7, #18]
 8001190:	68fa      	ldr	r2, [r7, #12]
 8001192:	4413      	add	r3, r2
 8001194:	b2ca      	uxtb	r2, r1
 8001196:	701a      	strb	r2, [r3, #0]
	}
}
 8001198:	bf00      	nop
 800119a:	371c      	adds	r7, #28
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr

080011a2 <Painter_ToggleRectangle>:

void Painter_ToggleRectangle(uint8_t *image, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, enum Origin origin) {
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b086      	sub	sp, #24
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	60f8      	str	r0, [r7, #12]
 80011aa:	4608      	mov	r0, r1
 80011ac:	4611      	mov	r1, r2
 80011ae:	461a      	mov	r2, r3
 80011b0:	4603      	mov	r3, r0
 80011b2:	817b      	strh	r3, [r7, #10]
 80011b4:	460b      	mov	r3, r1
 80011b6:	813b      	strh	r3, [r7, #8]
 80011b8:	4613      	mov	r3, r2
 80011ba:	80fb      	strh	r3, [r7, #6]
	for (uint16_t x = x1; x < x2; x++) {
 80011bc:	897b      	ldrh	r3, [r7, #10]
 80011be:	82fb      	strh	r3, [r7, #22]
 80011c0:	e017      	b.n	80011f2 <Painter_ToggleRectangle+0x50>
		for (uint16_t y = y1; y < y2; y++) {
 80011c2:	893b      	ldrh	r3, [r7, #8]
 80011c4:	82bb      	strh	r3, [r7, #20]
 80011c6:	e00c      	b.n	80011e2 <Painter_ToggleRectangle+0x40>
			Painter_TogglePixel(image, &x, &y, origin);
 80011c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80011cc:	f107 0214 	add.w	r2, r7, #20
 80011d0:	f107 0116 	add.w	r1, r7, #22
 80011d4:	68f8      	ldr	r0, [r7, #12]
 80011d6:	f7ff ff83 	bl	80010e0 <Painter_TogglePixel>
		for (uint16_t y = y1; y < y2; y++) {
 80011da:	8abb      	ldrh	r3, [r7, #20]
 80011dc:	3301      	adds	r3, #1
 80011de:	b29b      	uxth	r3, r3
 80011e0:	82bb      	strh	r3, [r7, #20]
 80011e2:	8abb      	ldrh	r3, [r7, #20]
 80011e4:	8c3a      	ldrh	r2, [r7, #32]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d8ee      	bhi.n	80011c8 <Painter_ToggleRectangle+0x26>
	for (uint16_t x = x1; x < x2; x++) {
 80011ea:	8afb      	ldrh	r3, [r7, #22]
 80011ec:	3301      	adds	r3, #1
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	82fb      	strh	r3, [r7, #22]
 80011f2:	8afb      	ldrh	r3, [r7, #22]
 80011f4:	88fa      	ldrh	r2, [r7, #6]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d8e3      	bhi.n	80011c2 <Painter_ToggleRectangle+0x20>
		}
	}
}
 80011fa:	bf00      	nop
 80011fc:	bf00      	nop
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <Painter_ToggleDottedRectangle>:

void Painter_ToggleDottedRectangle(uint8_t *image, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, enum Origin origin) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	4608      	mov	r0, r1
 800120e:	4611      	mov	r1, r2
 8001210:	461a      	mov	r2, r3
 8001212:	4603      	mov	r3, r0
 8001214:	817b      	strh	r3, [r7, #10]
 8001216:	460b      	mov	r3, r1
 8001218:	813b      	strh	r3, [r7, #8]
 800121a:	4613      	mov	r3, r2
 800121c:	80fb      	strh	r3, [r7, #6]
	for (uint16_t x = x1; x < x2; x++) {
 800121e:	897b      	ldrh	r3, [r7, #10]
 8001220:	82fb      	strh	r3, [r7, #22]
 8001222:	e01f      	b.n	8001264 <Painter_ToggleDottedRectangle+0x60>
		for (uint16_t y = y1; y < y2; y++) {
 8001224:	893b      	ldrh	r3, [r7, #8]
 8001226:	82bb      	strh	r3, [r7, #20]
 8001228:	e014      	b.n	8001254 <Painter_ToggleDottedRectangle+0x50>
			if ((x + y) % 2) Painter_TogglePixel(image, &x, &y, origin);
 800122a:	8afa      	ldrh	r2, [r7, #22]
 800122c:	8abb      	ldrh	r3, [r7, #20]
 800122e:	4413      	add	r3, r2
 8001230:	b29b      	uxth	r3, r3
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	2b00      	cmp	r3, #0
 8001238:	d008      	beq.n	800124c <Painter_ToggleDottedRectangle+0x48>
 800123a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800123e:	f107 0214 	add.w	r2, r7, #20
 8001242:	f107 0116 	add.w	r1, r7, #22
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	f7ff ff4a 	bl	80010e0 <Painter_TogglePixel>
		for (uint16_t y = y1; y < y2; y++) {
 800124c:	8abb      	ldrh	r3, [r7, #20]
 800124e:	3301      	adds	r3, #1
 8001250:	b29b      	uxth	r3, r3
 8001252:	82bb      	strh	r3, [r7, #20]
 8001254:	8abb      	ldrh	r3, [r7, #20]
 8001256:	8c3a      	ldrh	r2, [r7, #32]
 8001258:	429a      	cmp	r2, r3
 800125a:	d8e6      	bhi.n	800122a <Painter_ToggleDottedRectangle+0x26>
	for (uint16_t x = x1; x < x2; x++) {
 800125c:	8afb      	ldrh	r3, [r7, #22]
 800125e:	3301      	adds	r3, #1
 8001260:	b29b      	uxth	r3, r3
 8001262:	82fb      	strh	r3, [r7, #22]
 8001264:	8afb      	ldrh	r3, [r7, #22]
 8001266:	88fa      	ldrh	r2, [r7, #6]
 8001268:	429a      	cmp	r2, r3
 800126a:	d8db      	bhi.n	8001224 <Painter_ToggleDottedRectangle+0x20>
		}
	}
}
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <Painter_WriteString>:

void Painter_WriteString(uint8_t *image, char *text, uint16_t x, uint16_t y, enum Origin origin, enum Font font) {
 8001276:	b580      	push	{r7, lr}
 8001278:	b088      	sub	sp, #32
 800127a:	af02      	add	r7, sp, #8
 800127c:	60f8      	str	r0, [r7, #12]
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	4611      	mov	r1, r2
 8001282:	461a      	mov	r2, r3
 8001284:	460b      	mov	r3, r1
 8001286:	80fb      	strh	r3, [r7, #6]
 8001288:	4613      	mov	r3, r2
 800128a:	80bb      	strh	r3, [r7, #4]

	uint16_t i = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	82fb      	strh	r3, [r7, #22]
	uint16_t fwidth = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	82bb      	strh	r3, [r7, #20]
	if (font == SMALL) {
 8001294:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001298:	2b00      	cmp	r3, #0
 800129a:	d102      	bne.n	80012a2 <Painter_WriteString+0x2c>
		fwidth = 8;
 800129c:	2308      	movs	r3, #8
 800129e:	82bb      	strh	r3, [r7, #20]
 80012a0:	e027      	b.n	80012f2 <Painter_WriteString+0x7c>
	} else if (font == MEDIUM) {
 80012a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d102      	bne.n	80012b0 <Painter_WriteString+0x3a>
		fwidth = 10;
 80012aa:	230a      	movs	r3, #10
 80012ac:	82bb      	strh	r3, [r7, #20]
 80012ae:	e020      	b.n	80012f2 <Painter_WriteString+0x7c>
	} else if (font == LARGE) {
 80012b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d11c      	bne.n	80012f2 <Painter_WriteString+0x7c>
		fwidth = 12;
 80012b8:	230c      	movs	r3, #12
 80012ba:	82bb      	strh	r3, [r7, #20]
	}

	while(text[i] > 0) {
 80012bc:	e019      	b.n	80012f2 <Painter_WriteString+0x7c>
		Painter_WriteChar(image, text[i], x + fwidth * i, y, origin, font);
 80012be:	8afb      	ldrh	r3, [r7, #22]
 80012c0:	68ba      	ldr	r2, [r7, #8]
 80012c2:	4413      	add	r3, r2
 80012c4:	7819      	ldrb	r1, [r3, #0]
 80012c6:	8abb      	ldrh	r3, [r7, #20]
 80012c8:	8afa      	ldrh	r2, [r7, #22]
 80012ca:	fb02 f303 	mul.w	r3, r2, r3
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	4413      	add	r3, r2
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	88b8      	ldrh	r0, [r7, #4]
 80012d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012dc:	9301      	str	r3, [sp, #4]
 80012de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	4603      	mov	r3, r0
 80012e6:	68f8      	ldr	r0, [r7, #12]
 80012e8:	f000 f80e 	bl	8001308 <Painter_WriteChar>
		i++;
 80012ec:	8afb      	ldrh	r3, [r7, #22]
 80012ee:	3301      	adds	r3, #1
 80012f0:	82fb      	strh	r3, [r7, #22]
	while(text[i] > 0) {
 80012f2:	8afb      	ldrh	r3, [r7, #22]
 80012f4:	68ba      	ldr	r2, [r7, #8]
 80012f6:	4413      	add	r3, r2
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1df      	bne.n	80012be <Painter_WriteString+0x48>
	}
}
 80012fe:	bf00      	nop
 8001300:	bf00      	nop
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <Painter_WriteChar>:

uint8_t font_8_12[768] = { 0x0, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x7e, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x7c, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0x7c, 0x0, 0x0, 0x0, 0x3c, 0x66, 0x66, 0x60, 0x60, 0x60, 0x66, 0x66, 0x3c, 0x0, 0x0, 0x0, 0x7c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x0, 0x0, 0x0, 0x7e, 0x60, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0x7e, 0x0, 0x0, 0x0, 0x7e, 0x60, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0x60, 0x0, 0x0, 0x0, 0x3c, 0x66, 0x66, 0x60, 0x60, 0x6e, 0x66, 0x66, 0x3c, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x66, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x66, 0x66, 0x3c, 0x0, 0x0, 0x0, 0x66, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0x66, 0x0, 0x0, 0x0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7e, 0x0, 0x0, 0x0, 0x63, 0x63, 0x77, 0x7f, 0x6b, 0x6b, 0x63, 0x63, 0x63, 0x0, 0x0, 0x0, 0x63, 0x63, 0x73, 0x7b, 0x6f, 0x67, 0x63, 0x63, 0x63, 0x0, 0x0, 0x0, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x0, 0x0, 0x0, 0x7c, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x60, 0x0, 0x0, 0x0, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0xc, 0x6, 0x0, 0x7c, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x3c, 0x66, 0x60, 0x30, 0x18, 0xc, 0x6, 0x66, 0x3c, 0x0, 0x0, 0x0, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x0, 0x0, 0x0, 0x63, 0x63, 0x63, 0x63, 0x6b, 0x6b, 0x3e, 0x36, 0x36, 0x0, 0x0, 0x0, 0x66, 0x66, 0x34, 0x18, 0x18, 0x2c, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x0, 0x0, 0x0, 0x7e, 0x6, 0x6, 0xc, 0x18, 0x30, 0x60, 0x60, 0x7e, 0x0, 0x0, 0x0, 0x3c, 0x66, 0x6e, 0x6e, 0x66, 0x76, 0x76, 0x66, 0x3c, 0x0, 0x0, 0x0, 0xc, 0x1c, 0x7c, 0xc, 0xc, 0xc, 0xc, 0xc, 0x1e, 0x0, 0x0, 0x0, 0x3c, 0x66, 0x66, 0x6, 0xc, 0x18, 0x30, 0x60, 0x7e, 0x0, 0x0, 0x0, 0x3c, 0x66, 0x66, 0x6, 0x1c, 0x6, 0x66, 0x66, 0x3c, 0x0, 0x0, 0x0, 0x30, 0x36, 0x36, 0x36, 0x36, 0x66, 0x7f, 0x6, 0x6, 0x0, 0x0, 0x0, 0x7e, 0x60, 0x60, 0x60, 0x3c, 0x6, 0x6, 0x6, 0x7c, 0x0, 0x0, 0x0, 0x1c, 0x38, 0x30, 0x7c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x0, 0x0, 0x0, 0x7e, 0x6, 0xc, 0xc, 0x18, 0x18, 0x30, 0x30, 0x30, 0x0, 0x0, 0x0, 0x3c, 0x66, 0x66, 0x76, 0x3c, 0x6e, 0x66, 0x66, 0x3c, 0x0, 0x0, 0x0, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3e, 0xc, 0x1c, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x0, 0x18, 0x18, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x66, 0x66, 0xff, 0x66, 0x66, 0x66, 0xff, 0x66, 0x66, 0x0, 0x0, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x38, 0x1c, 0x6, 0x66, 0x3c, 0x18, 0x18, 0x70, 0xd8, 0xda, 0x76, 0xc, 0x18, 0x30, 0x6e, 0x5b, 0x1b, 0xe, 0x0, 0x0, 0x38, 0x6c, 0x6c, 0x38, 0x60, 0x6f, 0x66, 0x66, 0x3b, 0x0, 0x0, 0x0, 0x18, 0x18, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x18, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x18, 0xc, 0x0, 0x30, 0x18, 0x18, 0xc, 0xc, 0xc, 0xc, 0xc, 0x18, 0x18, 0x30, 0x0, 0x0, 0x0, 0x0, 0x36, 0x1c, 0x7f, 0x1c, 0x36, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x38, 0x18, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x38, 0x0, 0x0, 0x0, 0x6, 0x6, 0xc, 0xc, 0x18, 0x18, 0x30, 0x30, 0x60, 0x60, 0x0, 0x0, 0x0, 0x0, 0x38, 0x38, 0x0, 0x0, 0x0, 0x38, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x38, 0x0, 0x0, 0x0, 0x38, 0x38, 0x18, 0x30, 0x0, 0x6, 0xc, 0x18, 0x30, 0x60, 0x30, 0x18, 0xc, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7e, 0x0, 0x7e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x30, 0x18, 0xc, 0x6, 0xc, 0x18, 0x30, 0x60, 0x0, 0x0, 0x0, 0x3c, 0x66, 0x66, 0xe, 0x18, 0x18, 0x0, 0x18, 0x18, 0x0, 0x0, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x0, 0x0, 0x60, 0x60, 0x30, 0x30, 0x18, 0x18, 0xc, 0xc, 0x6, 0x6, 0x0, 0x3c, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0x3c, 0x0, 0x18, 0x3c, 0x66, 0xc3, 0x81, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x0, 0x18, 0x1c, 0x1e, 0x1f, 0x1b, 0x1b, 0x1a, 0x18, 0x78, 0xf8, 0xf8, 0x70, };
uint8_t font_10_14[1120] = { 0x0, 0x3, 0x1, 0xe0, 0xfc, 0x73, 0x98, 0x67, 0xf9, 0xfe, 0x61, 0x98, 0x66, 0x19, 0x86, 0x61, 0x80, 0x0, 0x1, 0xf8, 0x7f, 0x18, 0xe6, 0x19, 0x8e, 0x7f, 0x1f, 0xc6, 0x39, 0x86, 0x63, 0x9f, 0xc7, 0xe0, 0x0, 0x0, 0x7, 0x83, 0xf1, 0xce, 0x61, 0x98, 0x6, 0x1, 0x80, 0x60, 0x18, 0x67, 0x38, 0xfc, 0x1e, 0x0, 0x0, 0x1, 0xf8, 0x7f, 0x18, 0xe6, 0x19, 0x86, 0x61, 0x98, 0x66, 0x19, 0x86, 0x63, 0x9f, 0xc7, 0xe0, 0x0, 0x0, 0x1f, 0xe7, 0xf9, 0x80, 0x60, 0x18, 0x7, 0xc1, 0xf0, 0x60, 0x18, 0x6, 0x1, 0xfe, 0x7f, 0x80, 0x0, 0x1, 0xfe, 0x7f, 0x98, 0x6, 0x1, 0x80, 0x7c, 0x1f, 0x6, 0x1, 0x80, 0x60, 0x18, 0x6, 0x0, 0x0, 0x0, 0x7, 0x83, 0xf1, 0xce, 0x60, 0x18, 0x6, 0x79, 0x9e, 0x61, 0x98, 0x67, 0x38, 0xfc, 0x1e, 0x0, 0x0, 0x1, 0x86, 0x61, 0x98, 0x66, 0x19, 0x86, 0x7f, 0x9f, 0xe6, 0x19, 0x86, 0x61, 0x98, 0x66, 0x18, 0x0, 0x0, 0x7, 0x81, 0xe0, 0x30, 0xc, 0x3, 0x0, 0xc0, 0x30, 0xc, 0x3, 0x0, 0xc0, 0x78, 0x1e, 0x0, 0x0, 0x0, 0x6, 0x1, 0x80, 0x60, 0x18, 0x6, 0x1, 0x80, 0x60, 0x19, 0x86, 0x73, 0x8f, 0xc1, 0xe0, 0x0, 0x0, 0x18, 0x66, 0x39, 0x9c, 0x6e, 0x1f, 0x7, 0x81, 0xe0, 0x7c, 0x1b, 0x86, 0x71, 0x8e, 0x61, 0x80, 0x0, 0x1, 0x80, 0x60, 0x18, 0x6, 0x1, 0x80, 0x60, 0x18, 0x6, 0x1, 0x80, 0x60, 0x1f, 0xe7, 0xf8, 0x0, 0x0, 0x18, 0x67, 0x39, 0xfe, 0x7f, 0x9b, 0x66, 0xd9, 0x86, 0x61, 0x98, 0x66, 0x19, 0x86, 0x61, 0x80, 0x0, 0x1, 0x86, 0x71, 0x9e, 0x67, 0xd9, 0xbe, 0x67, 0x98, 0xe6, 0x19, 0x86, 0x61, 0x98, 0x66, 0x18, 0x0, 0x0, 0x7, 0x83, 0xf1, 0xce, 0x61, 0x98, 0x66, 0x19, 0x86, 0x61, 0x98, 0x67, 0x38, 0xfc, 0x1e, 0x0, 0x0, 0x1, 0xf8, 0x7f, 0x18, 0xe6, 0x19, 0x8e, 0x7f, 0x1f, 0x86, 0x1, 0x80, 0x60, 0x18, 0x6, 0x0, 0x0, 0x0, 0x7, 0x83, 0xf1, 0xce, 0x61, 0x98, 0x66, 0x19, 0x86, 0x61, 0x9c, 0xe3, 0xf0, 0x78, 0x7, 0x0, 0xc0, 0x1, 0xf8, 0x7f, 0x18, 0xe6, 0x19, 0x8e, 0x7f, 0x1f, 0x86, 0x71, 0x8e, 0x61, 0x98, 0x66, 0x18, 0x0, 0x0, 0x7, 0x83, 0xf1, 0xce, 0x61, 0x9c, 0x3, 0xe0, 0x7c, 0x3, 0x98, 0x67, 0x38, 0xfc, 0x1e, 0x0, 0x0, 0x1, 0xfe, 0x7f, 0x83, 0x0, 0xc0, 0x30, 0xc, 0x3, 0x0, 0xc0, 0x30, 0xc, 0x3, 0x0, 0xc0, 0x0, 0x0, 0x18, 0x66, 0x19, 0x86, 0x61, 0x98, 0x66, 0x19, 0x86, 0x61, 0x98, 0x67, 0x38, 0xfc, 0x1e, 0x0, 0x0, 0x1, 0x86, 0x61, 0x98, 0x66, 0x19, 0x86, 0x61, 0x98, 0x66, 0x19, 0xce, 0x3f, 0x7, 0x80, 0xc0, 0x0, 0x0, 0x18, 0x66, 0x19, 0x86, 0x61, 0x98, 0x66, 0x19, 0xb6, 0x6d, 0x9f, 0xe7, 0xf9, 0xce, 0x61, 0x80, 0x0, 0x1, 0x86, 0x61, 0x9c, 0xe3, 0xb0, 0x70, 0xe, 0xd, 0xc7, 0x39, 0x86, 0x61, 0x98, 0x66, 0x18, 0x0, 0x0, 0x18, 0x66, 0x19, 0x86, 0x61, 0x9c, 0xe3, 0xf0, 0x78, 0xc, 0x3, 0x0, 0xc0, 0x30, 0xc, 0x0, 0x0, 0x1, 0xfe, 0x7f, 0x80, 0x60, 0x38, 0x1c, 0xe, 0x7, 0x3, 0x81, 0xc0, 0x60, 0x1f, 0xe7, 0xf8, 0x0, 0x0, 0x7, 0x83, 0xf1, 0xce, 0x67, 0x99, 0xe6, 0xd9, 0xb6, 0x79, 0x9e, 0x67, 0x38, 0xfc, 0x1e, 0x0, 0x0, 0x0, 0x18, 0xe, 0x7, 0x81, 0xe0, 0x18, 0x6, 0x1, 0x80, 0x60, 0x18, 0x6, 0x7, 0xe1, 0xf8, 0x0, 0x0, 0x7, 0x83, 0xf1, 0xce, 0x61, 0x80, 0xe1, 0xf0, 0xf8, 0x70, 0x18, 0x6, 0x1, 0xfe, 0x7f, 0x80, 0x0, 0x0, 0x78, 0x3f, 0x1c, 0xe6, 0x18, 0xe, 0xf, 0x3, 0xc6, 0x39, 0x86, 0x73, 0x8f, 0xc1, 0xe0, 0x0, 0x0, 0x0, 0xc0, 0x70, 0x3c, 0x1f, 0xe, 0xc7, 0x31, 0x8c, 0x63, 0x1f, 0xe7, 0xf8, 0xc, 0x3, 0x0, 0x0, 0x1, 0xfe, 0x7f, 0x98, 0x6, 0x1, 0xc0, 0x3e, 0x7, 0xc0, 0x38, 0x6, 0x3, 0x9f, 0xc7, 0xe0, 0x0, 0x0, 0x7, 0x83, 0xf1, 0xce, 0x61, 0x98, 0x7, 0xe1, 0xfc, 0x73, 0x98, 0x67, 0x38, 0xfc, 0x1e, 0x0, 0x0, 0x1, 0xfe, 0x7f, 0x80, 0x60, 0x38, 0x1c, 0xe, 0x3, 0x0, 0xc0, 0x30, 0xc, 0x3, 0x0, 0xc0, 0x0, 0x0, 0x7, 0x83, 0xf1, 0xce, 0x61, 0x9c, 0xe3, 0xf0, 0xfc, 0x73, 0x98, 0x67, 0x38, 0xfc, 0x1e, 0x0, 0x0, 0x0, 0x78, 0x3f, 0x1c, 0xe6, 0x19, 0xce, 0x3f, 0x87, 0xe0, 0x19, 0x86, 0x73, 0x8f, 0xc1, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0xc, 0x7, 0x81, 0xe0, 0x78, 0xc, 0x3, 0x0, 0xc0, 0x0, 0x0, 0x3, 0x0, 0xc0, 0x0, 0x0, 0xc, 0xc3, 0x30, 0x66, 0x19, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xcc, 0x33, 0xc, 0xc7, 0xf9, 0xfe, 0x33, 0xc, 0xc7, 0xf9, 0xfe, 0x33, 0xc, 0xc3, 0x30, 0x0, 0x0, 0x3, 0x3, 0xf1, 0xfe, 0x6d, 0x9b, 0x7, 0xf0, 0xfe, 0xd, 0x9b, 0x67, 0xf8, 0xfc, 0xc, 0x0, 0x0, 0x1, 0xcc, 0x73, 0x1d, 0x80, 0x60, 0x30, 0xc, 0x6, 0x1, 0x80, 0xc0, 0x37, 0x19, 0xc6, 0x70, 0x0, 0x0, 0x7, 0x83, 0xf1, 0xce, 0x61, 0x9c, 0xe3, 0xf0, 0xf8, 0x77, 0x58, 0xe7, 0x1c, 0xfb, 0x1e, 0xc0, 0x0, 0x0, 0x60, 0x18, 0x3, 0x0, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x3, 0x81, 0xc0, 0x60, 0x18, 0x6, 0x1, 0x80, 0x60, 0x18, 0x6, 0x1, 0x80, 0x70, 0xe, 0x1, 0xc3, 0x80, 0x70, 0xe, 0x1, 0x80, 0x60, 0x18, 0x6, 0x1, 0x80, 0x60, 0x18, 0x6, 0x3, 0x81, 0xc0, 0xe0, 0x0, 0x0, 0x6, 0x19, 0xce, 0x33, 0x7, 0x87, 0xf9, 0xfe, 0x1e, 0xc, 0xc7, 0x39, 0x86, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x3, 0x0, 0xc0, 0x30, 0x7f, 0x9f, 0xe0, 0xc0, 0x30, 0xc, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0xc, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7f, 0x9f, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0xc, 0x0, 0x0, 0x0, 0xc, 0x3, 0x1, 0x80, 0x60, 0x30, 0xc, 0x6, 0x1, 0x80, 0xc0, 0x30, 0x18, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x30, 0x0, 0x0, 0x0, 0x0, 0x30, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x3, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0xc0, 0x60, 0x3, 0x81, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0xe, 0x3, 0x80, 0x70, 0xe, 0x1, 0xc0, 0x38, 0x7, 0x0, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xf9, 0xfe, 0x0, 0x0, 0x7, 0xf9, 0xfe, 0x0, 0x0, 0x0, 0x1, 0xfe, 0x70, 0xe, 0x1, 0xc0, 0x38, 0x7, 0x0, 0xe0, 0x1c, 0x7, 0x3, 0x81, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0, 0x0, 0x78, 0x3f, 0x1c, 0xe6, 0x18, 0xe, 0x7, 0x3, 0x80, 0xc0, 0x30, 0x0, 0x3, 0x0, 0xc0, 0x0, 0x1e, 0x7, 0x81, 0x80, 0x60, 0x18, 0x6, 0x1, 0x80, 0x60, 0x18, 0x6, 0x1, 0x80, 0x60, 0x1e, 0x7, 0x80, 0x0, 0xc0, 0x30, 0x6, 0x1, 0x80, 0x30, 0xc, 0x1, 0x80, 0x60, 0xc, 0x3, 0x0, 0x60, 0x18, 0x0, 0x1e, 0x7, 0x80, 0x60, 0x18, 0x6, 0x1, 0x80, 0x60, 0x18, 0x6, 0x1, 0x80, 0x60, 0x18, 0x1e, 0x7, 0x80, 0xc0, 0x78, 0x3f, 0x1c, 0xee, 0x1f, 0x3, 0x80, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xf4, 0x99, 0x4a, 0x64, 0x92, 0x65, 0x29, 0x92, 0x49, 0x94, 0xa6, 0x49, 0x26, 0x52, 0x99, 0x27, 0xf8, 0x0, };
uint8_t font_12_18[1728] = { 0x0, 0x0, 0x60, 0xf, 0x1, 0xf8, 0x39, 0xc7, 0xe, 0x60, 0x67, 0xfe, 0x7f, 0xe6, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xf8, 0x7f, 0xc6, 0xe, 0x60, 0x66, 0x6, 0x60, 0xe7, 0xfc, 0x7f, 0xc6, 0xe, 0x60, 0x66, 0x6, 0x60, 0xe7, 0xfc, 0x7f, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xf8, 0x3f, 0xc7, 0xe, 0x60, 0x66, 0x6, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x6, 0x70, 0xe3, 0xfc, 0x1f, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xf8, 0x7f, 0xc6, 0xe, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0xe7, 0xfc, 0x7f, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xfe, 0x7f, 0xe6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x7, 0xe0, 0x7e, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x7, 0xfe, 0x7f, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xfe, 0x7f, 0xe6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x7, 0xe0, 0x7e, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xf8, 0x3f, 0xc7, 0xe, 0x60, 0x66, 0x0, 0x60, 0x6, 0x3e, 0x63, 0xe6, 0x6, 0x60, 0x66, 0x6, 0x70, 0xe3, 0xfc, 0x1f, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0x67, 0xfe, 0x7f, 0xe6, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xf8, 0x1f, 0x80, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x1, 0xf8, 0x1f, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x60, 0x66, 0x6, 0x70, 0xe3, 0xfc, 0x1f, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x60, 0x66, 0xe, 0x61, 0xc6, 0x38, 0x67, 0x7, 0xe0, 0x7e, 0x6, 0x70, 0x63, 0x86, 0x1c, 0x60, 0xe6, 0x6, 0x60, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x7, 0xfe, 0x7f, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x60, 0x67, 0xe, 0x79, 0xe7, 0xfe, 0x6f, 0x66, 0x66, 0x66, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x60, 0x67, 0x6, 0x78, 0x67, 0xc6, 0x6e, 0x66, 0x76, 0x63, 0xe6, 0x1e, 0x60, 0xe6, 0x6, 0x60, 0x66, 0x6, 0x60, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xf8, 0x3f, 0xc7, 0xe, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x70, 0xe3, 0xfc, 0x1f, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xf8, 0x7f, 0xc6, 0xe, 0x60, 0x66, 0x6, 0x60, 0xe7, 0xfc, 0x7f, 0x86, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xf8, 0x3f, 0xc7, 0xe, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x70, 0xe3, 0xfc, 0x1f, 0x80, 0x38, 0x1, 0xe0, 0xe, 0x0, 0x7, 0xf8, 0x7f, 0xc6, 0xe, 0x60, 0x66, 0x6, 0x60, 0xe7, 0xfc, 0x7f, 0x86, 0x38, 0x61, 0xc6, 0xe, 0x60, 0x66, 0x6, 0x60, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xf8, 0x3f, 0xc7, 0xe, 0x60, 0x66, 0x0, 0x70, 0x3, 0xf8, 0x1f, 0xc0, 0xe, 0x0, 0x66, 0x6, 0x70, 0xe3, 0xfc, 0x1f, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xfe, 0x7f, 0xe0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x70, 0xe3, 0xfc, 0x1f, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x70, 0xe3, 0x9c, 0x1f, 0x80, 0xf0, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x66, 0x66, 0x66, 0xf6, 0x7f, 0xe7, 0x9e, 0x70, 0xe6, 0x6, 0x60, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x60, 0x67, 0xe, 0x39, 0xc1, 0xd8, 0xe, 0x0, 0x70, 0x1b, 0x83, 0x9c, 0x70, 0xe6, 0x6, 0x60, 0x66, 0x6, 0x60, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x70, 0xe3, 0x9c, 0x1f, 0x80, 0xf0, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xfe, 0x7f, 0xe0, 0x6, 0x0, 0xe0, 0x1c, 0x3, 0x80, 0x70, 0xe, 0x1, 0xc0, 0x38, 0x7, 0x0, 0x60, 0x7, 0xfe, 0x7f, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xf8, 0x3f, 0xc7, 0x1e, 0x61, 0xe6, 0x36, 0x63, 0x66, 0x66, 0x66, 0x66, 0xc6, 0x6c, 0x67, 0x86, 0x78, 0xe3, 0xfc, 0x1f, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x3, 0x80, 0xf8, 0xf, 0x80, 0x18, 0x1, 0x80, 0x18, 0x1, 0x80, 0x18, 0x1, 0x80, 0x18, 0x1, 0x80, 0x7e, 0x7, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xf8, 0x3f, 0xc7, 0xe, 0x60, 0x66, 0x6, 0x0, 0xe1, 0xfc, 0x3f, 0x87, 0x0, 0x60, 0x6, 0x0, 0x60, 0x7, 0xfe, 0x7f, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xf8, 0x3f, 0xc7, 0xe, 0x60, 0x66, 0x6, 0x0, 0xe0, 0xfc, 0xf, 0xc0, 0xe, 0x60, 0x66, 0x6, 0x70, 0xe3, 0xfc, 0x1f, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1c, 0x3, 0xc0, 0x7c, 0xe, 0xc1, 0xcc, 0x38, 0xc7, 0xc, 0x60, 0xc6, 0xc, 0x7f, 0xe7, 0xfe, 0x0, 0xc0, 0xc, 0x0, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xfe, 0x7f, 0xe6, 0x0, 0x60, 0x6, 0x0, 0x70, 0x3, 0xf8, 0x1f, 0xc0, 0xe, 0x0, 0x60, 0x6, 0x0, 0xe7, 0xfc, 0x7f, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf8, 0x1f, 0x83, 0x80, 0x70, 0x6, 0x0, 0x7f, 0x87, 0xfc, 0x70, 0xe6, 0x6, 0x60, 0x66, 0x6, 0x70, 0xe3, 0xfc, 0x1f, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xfe, 0x7f, 0xe0, 0x6, 0x0, 0x60, 0xe, 0x1, 0xc0, 0x38, 0x7, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xf8, 0x3f, 0xc7, 0xe, 0x60, 0x66, 0x6, 0x70, 0xe3, 0xfc, 0x3f, 0xc7, 0xe, 0x60, 0x66, 0x6, 0x70, 0xe3, 0xfc, 0x1f, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xf8, 0x3f, 0xc7, 0xe, 0x60, 0x66, 0x6, 0x60, 0x67, 0xe, 0x3f, 0xe1, 0xfe, 0x0, 0x60, 0xe, 0x1, 0xc1, 0xf8, 0x1f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x6, 0x0, 0xf0, 0xf, 0x0, 0xf0, 0xf, 0x0, 0x60, 0x6, 0x0, 0x60, 0x0, 0x0, 0x0, 0x6, 0x0, 0xf0, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x18, 0x31, 0x83, 0x9c, 0x18, 0xc1, 0x8c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x98, 0x19, 0x81, 0x98, 0x7f, 0xe7, 0xfe, 0x19, 0x81, 0x98, 0x19, 0x81, 0x98, 0x7f, 0xe7, 0xfe, 0x19, 0x81, 0x98, 0x19, 0x80, 0x0, 0x0, 0x0, 0x0, 0x6, 0x0, 0x60, 0x1f, 0x83, 0xfc, 0x76, 0xe6, 0x66, 0x70, 0x3, 0xf8, 0x1f, 0xc0, 0xe, 0x66, 0x67, 0x6e, 0x3f, 0xc1, 0xf8, 0x6, 0x0, 0x60, 0x0, 0x0, 0x0, 0x7c, 0xe, 0xe6, 0xc6, 0x6e, 0xe6, 0x7c, 0xe0, 0x1c, 0x3, 0x80, 0x70, 0xe, 0x1, 0xc0, 0x38, 0x7, 0x3e, 0x67, 0x76, 0x63, 0x67, 0x70, 0x3e, 0x0, 0x0, 0x0, 0x0, 0x1, 0xe0, 0x3f, 0x7, 0x38, 0x61, 0x86, 0x18, 0x73, 0x3, 0xe0, 0x3e, 0x7, 0x76, 0x63, 0xa6, 0x1c, 0x70, 0xe3, 0xf6, 0x1f, 0xa0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe0, 0xe, 0x0, 0xf0, 0x7, 0x0, 0x70, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x80, 0x70, 0xe, 0x0, 0xc0, 0xc, 0x0, 0xc0, 0xc, 0x0, 0xc0, 0xc, 0x0, 0xc0, 0xc, 0x0, 0xc0, 0xc, 0x0, 0xe0, 0x7, 0x0, 0x38, 0x0, 0x0, 0x0, 0x1c, 0x0, 0xe0, 0x7, 0x0, 0x30, 0x3, 0x0, 0x30, 0x3, 0x0, 0x30, 0x3, 0x0, 0x30, 0x3, 0x0, 0x30, 0x3, 0x0, 0x70, 0xe, 0x1, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xc, 0x39, 0xc1, 0xf8, 0xf, 0x7, 0xfe, 0x7f, 0xe0, 0xf0, 0x1f, 0x83, 0x9c, 0x30, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x7, 0xfe, 0x7f, 0xe0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x1e, 0x1, 0xe0, 0xc, 0x1, 0xc0, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xfe, 0x7f, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x1e, 0x1, 0xe0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0xc0, 0x18, 0x1, 0x80, 0x30, 0x3, 0x0, 0x60, 0x6, 0x0, 0xc0, 0xc, 0x1, 0x80, 0x18, 0x3, 0x0, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x1, 0xe0, 0x1e, 0x0, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x1e, 0x1, 0xe0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x1, 0xe0, 0x1e, 0x0, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x1e, 0x1, 0xe0, 0xc, 0x1, 0xc0, 0x18, 0x0, 0x0, 0x0, 0x0, 0x1c, 0x3, 0x80, 0x70, 0xe, 0x1, 0xc0, 0x38, 0x7, 0x0, 0x70, 0x3, 0x80, 0x1c, 0x0, 0xe0, 0x7, 0x0, 0x38, 0x1, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xfc, 0x7f, 0xc0, 0x0, 0x0, 0x7, 0xfc, 0x7f, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x38, 0x1, 0xc0, 0xe, 0x0, 0x70, 0x3, 0x80, 0x1c, 0x1, 0xc0, 0x38, 0x7, 0x0, 0xe0, 0x1c, 0x3, 0x80, 0x70, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xf8, 0x3f, 0xc7, 0xe, 0x60, 0x66, 0x6, 0x1, 0xe0, 0x3c, 0x7, 0x0, 0x60, 0x6, 0x0, 0x0, 0x6, 0x0, 0xf0, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x0, 0xe0, 0xc, 0x0, 0xc0, 0xc, 0x0, 0xc0, 0xc, 0x0, 0xc0, 0xc, 0x0, 0xc0, 0xc, 0x0, 0xc0, 0xc, 0x0, 0xc0, 0xe, 0x0, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x30, 0x1, 0x80, 0x18, 0x0, 0xc0, 0xc, 0x0, 0x60, 0x6, 0x0, 0x30, 0x3, 0x0, 0x18, 0x1, 0x80, 0xc, 0x0, 0xc0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x0, 0x70, 0x3, 0x0, 0x30, 0x3, 0x0, 0x30, 0x3, 0x0, 0x30, 0x3, 0x0, 0x30, 0x3, 0x0, 0x30, 0x3, 0x0, 0x30, 0x7, 0x0, 0xf0, 0x0, 0x0, 0x0, 0x6, 0x0, 0xf0, 0x1f, 0x83, 0x9c, 0x70, 0xee, 0x7, 0xc0, 0x38, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xff, 0xff, 0xf0, 0x0, 0x0, 0x0, 0x30, 0x7, 0x83, 0xec, 0x6e, 0xe4, 0xee, 0x7e, 0xe3, 0xae, 0x3f, 0x63, 0xf6, 0x3a, 0xe7, 0xee, 0x4e, 0xe6, 0xee, 0x3e, 0xc0, 0x78, 0x3, 0x0, 0x0, };

void Painter_WriteChar(uint8_t *image, char c, uint16_t x, uint16_t y, enum Origin origin, enum Font font) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	4608      	mov	r0, r1
 8001312:	4611      	mov	r1, r2
 8001314:	461a      	mov	r2, r3
 8001316:	4603      	mov	r3, r0
 8001318:	72fb      	strb	r3, [r7, #11]
 800131a:	460b      	mov	r3, r1
 800131c:	813b      	strh	r3, [r7, #8]
 800131e:	4613      	mov	r3, r2
 8001320:	80fb      	strh	r3, [r7, #6]

	uint16_t selected = Translate(c);
 8001322:	7afb      	ldrb	r3, [r7, #11]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fe27 	bl	8000f78 <Translate>
 800132a:	4603      	mov	r3, r0
 800132c:	837b      	strh	r3, [r7, #26]
	uint16_t fwidth = 0, fheight = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001332:	2300      	movs	r3, #0
 8001334:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t finalx, finaly;
	uint8_t *font_x_y;

	if (font == SMALL) {
 8001336:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800133a:	2b00      	cmp	r3, #0
 800133c:	d106      	bne.n	800134c <Painter_WriteChar+0x44>
		fwidth = 8;
 800133e:	2308      	movs	r3, #8
 8001340:	84fb      	strh	r3, [r7, #38]	; 0x26
		fheight = 12;
 8001342:	230c      	movs	r3, #12
 8001344:	84bb      	strh	r3, [r7, #36]	; 0x24
		font_x_y = font_8_12;
 8001346:	4b37      	ldr	r3, [pc, #220]	; (8001424 <Painter_WriteChar+0x11c>)
 8001348:	623b      	str	r3, [r7, #32]
 800134a:	e014      	b.n	8001376 <Painter_WriteChar+0x6e>
	} else if (font == MEDIUM) {
 800134c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001350:	2b01      	cmp	r3, #1
 8001352:	d106      	bne.n	8001362 <Painter_WriteChar+0x5a>
		fwidth = 10;
 8001354:	230a      	movs	r3, #10
 8001356:	84fb      	strh	r3, [r7, #38]	; 0x26
		fheight = 14;
 8001358:	230e      	movs	r3, #14
 800135a:	84bb      	strh	r3, [r7, #36]	; 0x24
		font_x_y = font_10_14;
 800135c:	4b32      	ldr	r3, [pc, #200]	; (8001428 <Painter_WriteChar+0x120>)
 800135e:	623b      	str	r3, [r7, #32]
 8001360:	e009      	b.n	8001376 <Painter_WriteChar+0x6e>
	} else if (font == LARGE) {
 8001362:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001366:	2b02      	cmp	r3, #2
 8001368:	d105      	bne.n	8001376 <Painter_WriteChar+0x6e>
		fwidth = 12;
 800136a:	230c      	movs	r3, #12
 800136c:	84fb      	strh	r3, [r7, #38]	; 0x26
		fheight = 18;
 800136e:	2312      	movs	r3, #18
 8001370:	84bb      	strh	r3, [r7, #36]	; 0x24
		font_x_y = font_12_18;
 8001372:	4b2e      	ldr	r3, [pc, #184]	; (800142c <Painter_WriteChar+0x124>)
 8001374:	623b      	str	r3, [r7, #32]
	}

	uint16_t bit_offset = selected * fwidth * fheight;
 8001376:	8b7b      	ldrh	r3, [r7, #26]
 8001378:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800137a:	fb02 f303 	mul.w	r3, r2, r3
 800137e:	b29b      	uxth	r3, r3
 8001380:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001382:	fb02 f303 	mul.w	r3, r2, r3
 8001386:	833b      	strh	r3, [r7, #24]
	for (uint16_t _y = 0; _y < fheight; _y++) {
 8001388:	2300      	movs	r3, #0
 800138a:	83fb      	strh	r3, [r7, #30]
 800138c:	e040      	b.n	8001410 <Painter_WriteChar+0x108>
		for (uint16_t _x = 0; _x < fwidth; _x++) {
 800138e:	2300      	movs	r3, #0
 8001390:	83bb      	strh	r3, [r7, #28]
 8001392:	e036      	b.n	8001402 <Painter_WriteChar+0xfa>
			uint16_t bit_index = _x + _y * fwidth;
 8001394:	8bfb      	ldrh	r3, [r7, #30]
 8001396:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001398:	fb02 f303 	mul.w	r3, r2, r3
 800139c:	b29a      	uxth	r2, r3
 800139e:	8bbb      	ldrh	r3, [r7, #28]
 80013a0:	4413      	add	r3, r2
 80013a2:	82fb      	strh	r3, [r7, #22]
			if ((font_x_y[(bit_offset + bit_index) / 8] >> (7 - (bit_offset + bit_index) % 8)) & 0x01) {
 80013a4:	8b3a      	ldrh	r2, [r7, #24]
 80013a6:	8afb      	ldrh	r3, [r7, #22]
 80013a8:	4413      	add	r3, r2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	da00      	bge.n	80013b0 <Painter_WriteChar+0xa8>
 80013ae:	3307      	adds	r3, #7
 80013b0:	10db      	asrs	r3, r3, #3
 80013b2:	461a      	mov	r2, r3
 80013b4:	6a3b      	ldr	r3, [r7, #32]
 80013b6:	4413      	add	r3, r2
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	4619      	mov	r1, r3
 80013bc:	8b3a      	ldrh	r2, [r7, #24]
 80013be:	8afb      	ldrh	r3, [r7, #22]
 80013c0:	4413      	add	r3, r2
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	fa41 f303 	asr.w	r3, r1, r3
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d012      	beq.n	80013fc <Painter_WriteChar+0xf4>
				finalx = _x + x;
 80013d6:	8bba      	ldrh	r2, [r7, #28]
 80013d8:	893b      	ldrh	r3, [r7, #8]
 80013da:	4413      	add	r3, r2
 80013dc:	b29b      	uxth	r3, r3
 80013de:	82bb      	strh	r3, [r7, #20]
				finaly = _y + y;
 80013e0:	8bfa      	ldrh	r2, [r7, #30]
 80013e2:	88fb      	ldrh	r3, [r7, #6]
 80013e4:	4413      	add	r3, r2
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	827b      	strh	r3, [r7, #18]
				Painter_TogglePixel(image, &finalx, &finaly, origin);
 80013ea:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80013ee:	f107 0212 	add.w	r2, r7, #18
 80013f2:	f107 0114 	add.w	r1, r7, #20
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	f7ff fe72 	bl	80010e0 <Painter_TogglePixel>
		for (uint16_t _x = 0; _x < fwidth; _x++) {
 80013fc:	8bbb      	ldrh	r3, [r7, #28]
 80013fe:	3301      	adds	r3, #1
 8001400:	83bb      	strh	r3, [r7, #28]
 8001402:	8bba      	ldrh	r2, [r7, #28]
 8001404:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001406:	429a      	cmp	r2, r3
 8001408:	d3c4      	bcc.n	8001394 <Painter_WriteChar+0x8c>
	for (uint16_t _y = 0; _y < fheight; _y++) {
 800140a:	8bfb      	ldrh	r3, [r7, #30]
 800140c:	3301      	adds	r3, #1
 800140e:	83fb      	strh	r3, [r7, #30]
 8001410:	8bfa      	ldrh	r2, [r7, #30]
 8001412:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001414:	429a      	cmp	r2, r3
 8001416:	d3ba      	bcc.n	800138e <Painter_WriteChar+0x86>
			_x += x;
			_y += y;
			Painter_TogglePixel(image, &_x, &_y, origin);
		}
	}*/
}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	3728      	adds	r7, #40	; 0x28
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000174 	.word	0x20000174
 8001428:	20000474 	.word	0x20000474
 800142c:	200008d4 	.word	0x200008d4

08001430 <Painter_Clean>:


void Painter_Clean(uint8_t *image) {
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	uint16_t bytes = CANVAS_WIDTH * CANVAS_HEIGHT / 8;
 8001438:	f44f 5394 	mov.w	r3, #4736	; 0x1280
 800143c:	81bb      	strh	r3, [r7, #12]
	for (uint16_t i = 0; i < bytes; i++) image[i] = 0xFF;
 800143e:	2300      	movs	r3, #0
 8001440:	81fb      	strh	r3, [r7, #14]
 8001442:	e007      	b.n	8001454 <Painter_Clean+0x24>
 8001444:	89fb      	ldrh	r3, [r7, #14]
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	22ff      	movs	r2, #255	; 0xff
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	89fb      	ldrh	r3, [r7, #14]
 8001450:	3301      	adds	r3, #1
 8001452:	81fb      	strh	r3, [r7, #14]
 8001454:	89fa      	ldrh	r2, [r7, #14]
 8001456:	89bb      	ldrh	r3, [r7, #12]
 8001458:	429a      	cmp	r2, r3
 800145a:	d3f3      	bcc.n	8001444 <Painter_Clean+0x14>
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr

08001468 <Painter_ToggleCanvas>:

void Painter_ToggleCanvas(uint8_t *image) {
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	uint16_t bytes = CANVAS_WIDTH * CANVAS_HEIGHT / 8;
 8001470:	f44f 5394 	mov.w	r3, #4736	; 0x1280
 8001474:	81bb      	strh	r3, [r7, #12]
	for (uint16_t i = 0; i < bytes; i++) image[i] = ~image[i];
 8001476:	2300      	movs	r3, #0
 8001478:	81fb      	strh	r3, [r7, #14]
 800147a:	e00c      	b.n	8001496 <Painter_ToggleCanvas+0x2e>
 800147c:	89fb      	ldrh	r3, [r7, #14]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	781a      	ldrb	r2, [r3, #0]
 8001484:	89fb      	ldrh	r3, [r7, #14]
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	440b      	add	r3, r1
 800148a:	43d2      	mvns	r2, r2
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	701a      	strb	r2, [r3, #0]
 8001490:	89fb      	ldrh	r3, [r7, #14]
 8001492:	3301      	adds	r3, #1
 8001494:	81fb      	strh	r3, [r7, #14]
 8001496:	89fa      	ldrh	r2, [r7, #14]
 8001498:	89bb      	ldrh	r3, [r7, #12]
 800149a:	429a      	cmp	r2, r3
 800149c:	d3ee      	bcc.n	800147c <Painter_ToggleCanvas+0x14>
}
 800149e:	bf00      	nop
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr

080014aa <RE_Init>:
 *      Author: asky
 */

#include "rencoder.h"

void RE_Init(RE_HandleTypeDef *hre, GPIO_TypeDef *portA, GPIO_TypeDef *portB, uint16_t pinA, uint16_t pinB) {
 80014aa:	b480      	push	{r7}
 80014ac:	b085      	sub	sp, #20
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	60f8      	str	r0, [r7, #12]
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
 80014b6:	807b      	strh	r3, [r7, #2]
	hre->counter = 0;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2200      	movs	r2, #0
 80014bc:	819a      	strh	r2, [r3, #12]
	hre->portA = portA;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	68ba      	ldr	r2, [r7, #8]
 80014c2:	601a      	str	r2, [r3, #0]
	hre->portB = portB;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	605a      	str	r2, [r3, #4]
	hre->pinA = pinA;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	887a      	ldrh	r2, [r7, #2]
 80014ce:	811a      	strh	r2, [r3, #8]
	hre->pinB = pinB;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	8b3a      	ldrh	r2, [r7, #24]
 80014d4:	815a      	strh	r2, [r3, #10]
	hre->currentA = 0;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2200      	movs	r2, #0
 80014da:	81da      	strh	r2, [r3, #14]
	hre->currentB = 0;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2200      	movs	r2, #0
 80014e0:	825a      	strh	r2, [r3, #18]
	hre->lastA = 0;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2200      	movs	r2, #0
 80014e6:	821a      	strh	r2, [r3, #16]
	hre->lastB = 0;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2200      	movs	r2, #0
 80014ec:	829a      	strh	r2, [r3, #20]
}
 80014ee:	bf00      	nop
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <RE_Process>:

void RE_Process(RE_HandleTypeDef *hre) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]

	uint16_t temp;
	uint16_t alpha = 7; // out of 10
 8001500:	2307      	movs	r3, #7
 8001502:	81fb      	strh	r3, [r7, #14]
	uint16_t ceil = 2000; //0xFFFF
 8001504:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001508:	81bb      	strh	r3, [r7, #12]
	uint16_t thr = 1000; //0xEFFF
 800150a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150e:	817b      	strh	r3, [r7, #10]

	hre->lastA = hre->currentA;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	89da      	ldrh	r2, [r3, #14]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	821a      	strh	r2, [r3, #16]
	hre->lastB = hre->currentB;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	8a5a      	ldrh	r2, [r3, #18]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	829a      	strh	r2, [r3, #20]

	temp = HAL_GPIO_ReadPin(hre->portA, hre->pinA) == GPIO_PIN_SET ? ceil : 0;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	891b      	ldrh	r3, [r3, #8]
 8001528:	4619      	mov	r1, r3
 800152a:	4610      	mov	r0, r2
 800152c:	f000 ffa6 	bl	800247c <HAL_GPIO_ReadPin>
 8001530:	4603      	mov	r3, r0
 8001532:	2b01      	cmp	r3, #1
 8001534:	d101      	bne.n	800153a <RE_Process+0x42>
 8001536:	89bb      	ldrh	r3, [r7, #12]
 8001538:	e000      	b.n	800153c <RE_Process+0x44>
 800153a:	2300      	movs	r3, #0
 800153c:	813b      	strh	r3, [r7, #8]
	hre->currentA = (hre->lastA * alpha / 10) + (temp * (10 - alpha) / 10);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	8a1b      	ldrh	r3, [r3, #16]
 8001542:	461a      	mov	r2, r3
 8001544:	89fb      	ldrh	r3, [r7, #14]
 8001546:	fb02 f303 	mul.w	r3, r2, r3
 800154a:	4a47      	ldr	r2, [pc, #284]	; (8001668 <RE_Process+0x170>)
 800154c:	fb82 1203 	smull	r1, r2, r2, r3
 8001550:	1092      	asrs	r2, r2, #2
 8001552:	17db      	asrs	r3, r3, #31
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	b29a      	uxth	r2, r3
 8001558:	893b      	ldrh	r3, [r7, #8]
 800155a:	89f9      	ldrh	r1, [r7, #14]
 800155c:	f1c1 010a 	rsb	r1, r1, #10
 8001560:	fb01 f303 	mul.w	r3, r1, r3
 8001564:	4940      	ldr	r1, [pc, #256]	; (8001668 <RE_Process+0x170>)
 8001566:	fb81 0103 	smull	r0, r1, r1, r3
 800156a:	1089      	asrs	r1, r1, #2
 800156c:	17db      	asrs	r3, r3, #31
 800156e:	1acb      	subs	r3, r1, r3
 8001570:	b29b      	uxth	r3, r3
 8001572:	4413      	add	r3, r2
 8001574:	b29a      	uxth	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	81da      	strh	r2, [r3, #14]

	temp = HAL_GPIO_ReadPin(hre->portB, hre->pinB) == GPIO_PIN_SET ? ceil : 0;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	895b      	ldrh	r3, [r3, #10]
 8001582:	4619      	mov	r1, r3
 8001584:	4610      	mov	r0, r2
 8001586:	f000 ff79 	bl	800247c <HAL_GPIO_ReadPin>
 800158a:	4603      	mov	r3, r0
 800158c:	2b01      	cmp	r3, #1
 800158e:	d101      	bne.n	8001594 <RE_Process+0x9c>
 8001590:	89bb      	ldrh	r3, [r7, #12]
 8001592:	e000      	b.n	8001596 <RE_Process+0x9e>
 8001594:	2300      	movs	r3, #0
 8001596:	813b      	strh	r3, [r7, #8]
	hre->currentB = (hre->lastB * alpha / 10) + (temp * (10 - alpha) / 10);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	8a9b      	ldrh	r3, [r3, #20]
 800159c:	461a      	mov	r2, r3
 800159e:	89fb      	ldrh	r3, [r7, #14]
 80015a0:	fb02 f303 	mul.w	r3, r2, r3
 80015a4:	4a30      	ldr	r2, [pc, #192]	; (8001668 <RE_Process+0x170>)
 80015a6:	fb82 1203 	smull	r1, r2, r2, r3
 80015aa:	1092      	asrs	r2, r2, #2
 80015ac:	17db      	asrs	r3, r3, #31
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	893b      	ldrh	r3, [r7, #8]
 80015b4:	89f9      	ldrh	r1, [r7, #14]
 80015b6:	f1c1 010a 	rsb	r1, r1, #10
 80015ba:	fb01 f303 	mul.w	r3, r1, r3
 80015be:	492a      	ldr	r1, [pc, #168]	; (8001668 <RE_Process+0x170>)
 80015c0:	fb81 0103 	smull	r0, r1, r1, r3
 80015c4:	1089      	asrs	r1, r1, #2
 80015c6:	17db      	asrs	r3, r3, #31
 80015c8:	1acb      	subs	r3, r1, r3
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	4413      	add	r3, r2
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	825a      	strh	r2, [r3, #18]

	if (hre->lastA < thr && hre->currentA >= thr) {
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	8a1b      	ldrh	r3, [r3, #16]
 80015d8:	897a      	ldrh	r2, [r7, #10]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d91d      	bls.n	800161a <RE_Process+0x122>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	89db      	ldrh	r3, [r3, #14]
 80015e2:	897a      	ldrh	r2, [r7, #10]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d818      	bhi.n	800161a <RE_Process+0x122>

		if (hre->currentB > thr) {
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	8a5b      	ldrh	r3, [r3, #18]
 80015ec:	897a      	ldrh	r2, [r7, #10]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d209      	bcs.n	8001606 <RE_Process+0x10e>
			hre->counter--;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	3b01      	subs	r3, #1
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	b21a      	sxth	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	819a      	strh	r2, [r3, #12]
		if (hre->currentB > thr) {
 8001604:	e02c      	b.n	8001660 <RE_Process+0x168>
		} else {
			hre->counter++;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800160c:	b29b      	uxth	r3, r3
 800160e:	3301      	adds	r3, #1
 8001610:	b29b      	uxth	r3, r3
 8001612:	b21a      	sxth	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	819a      	strh	r2, [r3, #12]
		if (hre->currentB > thr) {
 8001618:	e022      	b.n	8001660 <RE_Process+0x168>
		}

	} else if (hre->lastA > thr && hre->currentA <= thr) {
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	8a1b      	ldrh	r3, [r3, #16]
 800161e:	897a      	ldrh	r2, [r7, #10]
 8001620:	429a      	cmp	r2, r3
 8001622:	d21d      	bcs.n	8001660 <RE_Process+0x168>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	89db      	ldrh	r3, [r3, #14]
 8001628:	897a      	ldrh	r2, [r7, #10]
 800162a:	429a      	cmp	r2, r3
 800162c:	d318      	bcc.n	8001660 <RE_Process+0x168>

		if (hre->currentB > thr) {
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	8a5b      	ldrh	r3, [r3, #18]
 8001632:	897a      	ldrh	r2, [r7, #10]
 8001634:	429a      	cmp	r2, r3
 8001636:	d209      	bcs.n	800164c <RE_Process+0x154>
			hre->counter++;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800163e:	b29b      	uxth	r3, r3
 8001640:	3301      	adds	r3, #1
 8001642:	b29b      	uxth	r3, r3
 8001644:	b21a      	sxth	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	819a      	strh	r2, [r3, #12]
		} else {
			hre->counter--;
		}

	}
}
 800164a:	e009      	b.n	8001660 <RE_Process+0x168>
			hre->counter--;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001652:	b29b      	uxth	r3, r3
 8001654:	3b01      	subs	r3, #1
 8001656:	b29b      	uxth	r3, r3
 8001658:	b21a      	sxth	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	819a      	strh	r2, [r3, #12]
}
 800165e:	e7ff      	b.n	8001660 <RE_Process+0x168>
 8001660:	bf00      	nop
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	66666667 	.word	0x66666667

0800166c <RE_Reset>:

void RE_Reset(RE_HandleTypeDef *hre) {
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	hre->counter = 0;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	819a      	strh	r2, [r3, #12]
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <RE_GetCount>:

int16_t RE_GetCount(RE_HandleTypeDef *hre) {
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	return hre->counter;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
}
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <HAL_MspInit+0x5c>)
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	4a14      	ldr	r2, [pc, #80]	; (80016f8 <HAL_MspInit+0x5c>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6193      	str	r3, [r2, #24]
 80016ae:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_MspInit+0x5c>)
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ba:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <HAL_MspInit+0x5c>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	4a0e      	ldr	r2, [pc, #56]	; (80016f8 <HAL_MspInit+0x5c>)
 80016c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c4:	61d3      	str	r3, [r2, #28]
 80016c6:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <HAL_MspInit+0x5c>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016d2:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <HAL_MspInit+0x60>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	4a04      	ldr	r2, [pc, #16]	; (80016fc <HAL_MspInit+0x60>)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ee:	bf00      	nop
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40010000 	.word	0x40010000

08001700 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08a      	sub	sp, #40	; 0x28
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a1c      	ldr	r2, [pc, #112]	; (800178c <HAL_SPI_MspInit+0x8c>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d131      	bne.n	8001784 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <HAL_SPI_MspInit+0x90>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	4a1a      	ldr	r2, [pc, #104]	; (8001790 <HAL_SPI_MspInit+0x90>)
 8001726:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800172a:	6193      	str	r3, [r2, #24]
 800172c:	4b18      	ldr	r3, [pc, #96]	; (8001790 <HAL_SPI_MspInit+0x90>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001738:	4b15      	ldr	r3, [pc, #84]	; (8001790 <HAL_SPI_MspInit+0x90>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	4a14      	ldr	r2, [pc, #80]	; (8001790 <HAL_SPI_MspInit+0x90>)
 800173e:	f043 0308 	orr.w	r3, r3, #8
 8001742:	6193      	str	r3, [r2, #24]
 8001744:	4b12      	ldr	r3, [pc, #72]	; (8001790 <HAL_SPI_MspInit+0x90>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001750:	2328      	movs	r3, #40	; 0x28
 8001752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001758:	2303      	movs	r3, #3
 800175a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4619      	mov	r1, r3
 8001762:	480c      	ldr	r0, [pc, #48]	; (8001794 <HAL_SPI_MspInit+0x94>)
 8001764:	f000 fd06 	bl	8002174 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <HAL_SPI_MspInit+0x98>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
 800177e:	4a06      	ldr	r2, [pc, #24]	; (8001798 <HAL_SPI_MspInit+0x98>)
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001784:	bf00      	nop
 8001786:	3728      	adds	r7, #40	; 0x28
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40013000 	.word	0x40013000
 8001790:	40021000 	.word	0x40021000
 8001794:	40010c00 	.word	0x40010c00
 8001798:	40010000 	.word	0x40010000

0800179c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0d      	ldr	r2, [pc, #52]	; (80017e0 <HAL_TIM_Base_MspInit+0x44>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d113      	bne.n	80017d6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017ae:	4b0d      	ldr	r3, [pc, #52]	; (80017e4 <HAL_TIM_Base_MspInit+0x48>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	4a0c      	ldr	r2, [pc, #48]	; (80017e4 <HAL_TIM_Base_MspInit+0x48>)
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	61d3      	str	r3, [r2, #28]
 80017ba:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <HAL_TIM_Base_MspInit+0x48>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2100      	movs	r1, #0
 80017ca:	201d      	movs	r0, #29
 80017cc:	f000 faad 	bl	8001d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017d0:	201d      	movs	r0, #29
 80017d2:	f000 fac6 	bl	8001d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017d6:	bf00      	nop
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40000400 	.word	0x40000400
 80017e4:	40021000 	.word	0x40021000

080017e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 0310 	add.w	r3, r7, #16
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a2f      	ldr	r2, [pc, #188]	; (80018c0 <HAL_UART_MspInit+0xd8>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d157      	bne.n	80018b8 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001808:	4b2e      	ldr	r3, [pc, #184]	; (80018c4 <HAL_UART_MspInit+0xdc>)
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	4a2d      	ldr	r2, [pc, #180]	; (80018c4 <HAL_UART_MspInit+0xdc>)
 800180e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001812:	61d3      	str	r3, [r2, #28]
 8001814:	4b2b      	ldr	r3, [pc, #172]	; (80018c4 <HAL_UART_MspInit+0xdc>)
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001820:	4b28      	ldr	r3, [pc, #160]	; (80018c4 <HAL_UART_MspInit+0xdc>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	4a27      	ldr	r2, [pc, #156]	; (80018c4 <HAL_UART_MspInit+0xdc>)
 8001826:	f043 0308 	orr.w	r3, r3, #8
 800182a:	6193      	str	r3, [r2, #24]
 800182c:	4b25      	ldr	r3, [pc, #148]	; (80018c4 <HAL_UART_MspInit+0xdc>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f003 0308 	and.w	r3, r3, #8
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001838:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800183c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001842:	2303      	movs	r3, #3
 8001844:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001846:	f107 0310 	add.w	r3, r7, #16
 800184a:	4619      	mov	r1, r3
 800184c:	481e      	ldr	r0, [pc, #120]	; (80018c8 <HAL_UART_MspInit+0xe0>)
 800184e:	f000 fc91 	bl	8002174 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001852:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001856:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001860:	f107 0310 	add.w	r3, r7, #16
 8001864:	4619      	mov	r1, r3
 8001866:	4818      	ldr	r0, [pc, #96]	; (80018c8 <HAL_UART_MspInit+0xe0>)
 8001868:	f000 fc84 	bl	8002174 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800186c:	4b17      	ldr	r3, [pc, #92]	; (80018cc <HAL_UART_MspInit+0xe4>)
 800186e:	4a18      	ldr	r2, [pc, #96]	; (80018d0 <HAL_UART_MspInit+0xe8>)
 8001870:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001872:	4b16      	ldr	r3, [pc, #88]	; (80018cc <HAL_UART_MspInit+0xe4>)
 8001874:	2200      	movs	r2, #0
 8001876:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001878:	4b14      	ldr	r3, [pc, #80]	; (80018cc <HAL_UART_MspInit+0xe4>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800187e:	4b13      	ldr	r3, [pc, #76]	; (80018cc <HAL_UART_MspInit+0xe4>)
 8001880:	2280      	movs	r2, #128	; 0x80
 8001882:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <HAL_UART_MspInit+0xe4>)
 8001886:	2200      	movs	r2, #0
 8001888:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <HAL_UART_MspInit+0xe4>)
 800188c:	2200      	movs	r2, #0
 800188e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001890:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <HAL_UART_MspInit+0xe4>)
 8001892:	2220      	movs	r2, #32
 8001894:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001896:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <HAL_UART_MspInit+0xe4>)
 8001898:	2200      	movs	r2, #0
 800189a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800189c:	480b      	ldr	r0, [pc, #44]	; (80018cc <HAL_UART_MspInit+0xe4>)
 800189e:	f000 fa7b 	bl	8001d98 <HAL_DMA_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80018a8:	f7ff fb60 	bl	8000f6c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a07      	ldr	r2, [pc, #28]	; (80018cc <HAL_UART_MspInit+0xe4>)
 80018b0:	639a      	str	r2, [r3, #56]	; 0x38
 80018b2:	4a06      	ldr	r2, [pc, #24]	; (80018cc <HAL_UART_MspInit+0xe4>)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018b8:	bf00      	nop
 80018ba:	3720      	adds	r7, #32
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40004800 	.word	0x40004800
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40010c00 	.word	0x40010c00
 80018cc:	20001104 	.word	0x20001104
 80018d0:	40020030 	.word	0x40020030

080018d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <NMI_Handler+0x4>

080018da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018de:	e7fe      	b.n	80018de <HardFault_Handler+0x4>

080018e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <MemManage_Handler+0x4>

080018e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ea:	e7fe      	b.n	80018ea <BusFault_Handler+0x4>

080018ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <UsageFault_Handler+0x4>

080018f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr

080018fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr

0800190a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr

08001916 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800191a:	f000 f8ef 	bl	8001afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}

08001922 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN4_Pin);
 8001926:	2001      	movs	r0, #1
 8001928:	f000 fdd8 	bl	80024dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}

08001930 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN3_Pin);
 8001934:	2004      	movs	r0, #4
 8001936:	f000 fdd1 	bl	80024dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}

0800193e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN6_Pin);
 8001942:	2010      	movs	r0, #16
 8001944:	f000 fdca 	bl	80024dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}

0800194c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001950:	4802      	ldr	r0, [pc, #8]	; (800195c <DMA1_Channel3_IRQHandler+0x10>)
 8001952:	f000 fadb 	bl	8001f0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20001104 	.word	0x20001104

08001960 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN5_Pin);
 8001964:	2040      	movs	r0, #64	; 0x40
 8001966:	f000 fdb9 	bl	80024dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 800196a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800196e:	f000 fdb5 	bl	80024dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800197c:	4802      	ldr	r0, [pc, #8]	; (8001988 <TIM3_IRQHandler+0x10>)
 800197e:	f001 fce7 	bl	8003350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20001078 	.word	0x20001078

0800198c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8001990:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001994:	f000 fda2 	bl	80024dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_ENC2_Pin);
 8001998:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800199c:	f000 fd9e 	bl	80024dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_ENC1_Pin);
 80019a0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80019a4:	f000 fd9a 	bl	80024dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}

080019ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b4:	4a14      	ldr	r2, [pc, #80]	; (8001a08 <_sbrk+0x5c>)
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <_sbrk+0x60>)
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c0:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <_sbrk+0x64>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d102      	bne.n	80019ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c8:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <_sbrk+0x64>)
 80019ca:	4a12      	ldr	r2, [pc, #72]	; (8001a14 <_sbrk+0x68>)
 80019cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ce:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <_sbrk+0x64>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d207      	bcs.n	80019ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019dc:	f003 f9cc 	bl	8004d78 <__errno>
 80019e0:	4603      	mov	r3, r0
 80019e2:	220c      	movs	r2, #12
 80019e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ea:	e009      	b.n	8001a00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <_sbrk+0x64>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019f2:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <_sbrk+0x64>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	4a05      	ldr	r2, [pc, #20]	; (8001a10 <_sbrk+0x64>)
 80019fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019fe:	68fb      	ldr	r3, [r7, #12]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20005000 	.word	0x20005000
 8001a0c:	00000400 	.word	0x00000400
 8001a10:	200030bc 	.word	0x200030bc
 8001a14:	200030d8 	.word	0x200030d8

08001a18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr

08001a24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a24:	480c      	ldr	r0, [pc, #48]	; (8001a58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a26:	490d      	ldr	r1, [pc, #52]	; (8001a5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a28:	4a0d      	ldr	r2, [pc, #52]	; (8001a60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a2c:	e002      	b.n	8001a34 <LoopCopyDataInit>

08001a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a32:	3304      	adds	r3, #4

08001a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a38:	d3f9      	bcc.n	8001a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a3c:	4c0a      	ldr	r4, [pc, #40]	; (8001a68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a40:	e001      	b.n	8001a46 <LoopFillZerobss>

08001a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a44:	3204      	adds	r2, #4

08001a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a48:	d3fb      	bcc.n	8001a42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a4a:	f7ff ffe5 	bl	8001a18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a4e:	f003 f999 	bl	8004d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a52:	f7fe fe7f 	bl	8000754 <main>
  bx lr
 8001a56:	4770      	bx	lr
  ldr r0, =_sdata
 8001a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a5c:	20001004 	.word	0x20001004
  ldr r2, =_sidata
 8001a60:	08005a44 	.word	0x08005a44
  ldr r2, =_sbss
 8001a64:	20001004 	.word	0x20001004
  ldr r4, =_ebss
 8001a68:	200030d4 	.word	0x200030d4

08001a6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a6c:	e7fe      	b.n	8001a6c <ADC1_2_IRQHandler>
	...

08001a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a74:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <HAL_Init+0x28>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a07      	ldr	r2, [pc, #28]	; (8001a98 <HAL_Init+0x28>)
 8001a7a:	f043 0310 	orr.w	r3, r3, #16
 8001a7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a80:	2003      	movs	r0, #3
 8001a82:	f000 f947 	bl	8001d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a86:	200f      	movs	r0, #15
 8001a88:	f000 f808 	bl	8001a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a8c:	f7ff fe06 	bl	800169c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40022000 	.word	0x40022000

08001a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aa4:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <HAL_InitTick+0x54>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <HAL_InitTick+0x58>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	4619      	mov	r1, r3
 8001aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 f95f 	bl	8001d7e <HAL_SYSTICK_Config>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e00e      	b.n	8001ae8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b0f      	cmp	r3, #15
 8001ace:	d80a      	bhi.n	8001ae6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad8:	f000 f927 	bl	8001d2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001adc:	4a06      	ldr	r2, [pc, #24]	; (8001af8 <HAL_InitTick+0x5c>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e000      	b.n	8001ae8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000f94 	.word	0x20000f94
 8001af4:	20000f9c 	.word	0x20000f9c
 8001af8:	20000f98 	.word	0x20000f98

08001afc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <HAL_IncTick+0x1c>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <HAL_IncTick+0x20>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	4a03      	ldr	r2, [pc, #12]	; (8001b1c <HAL_IncTick+0x20>)
 8001b0e:	6013      	str	r3, [r2, #0]
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr
 8001b18:	20000f9c 	.word	0x20000f9c
 8001b1c:	200030c0 	.word	0x200030c0

08001b20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return uwTick;
 8001b24:	4b02      	ldr	r3, [pc, #8]	; (8001b30 <HAL_GetTick+0x10>)
 8001b26:	681b      	ldr	r3, [r3, #0]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr
 8001b30:	200030c0 	.word	0x200030c0

08001b34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b3c:	f7ff fff0 	bl	8001b20 <HAL_GetTick>
 8001b40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b4c:	d005      	beq.n	8001b5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <HAL_Delay+0x44>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	461a      	mov	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b5a:	bf00      	nop
 8001b5c:	f7ff ffe0 	bl	8001b20 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d8f7      	bhi.n	8001b5c <HAL_Delay+0x28>
  {
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000f9c 	.word	0x20000f9c

08001b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bae:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	60d3      	str	r3, [r2, #12]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <__NVIC_GetPriorityGrouping+0x18>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	f003 0307 	and.w	r3, r3, #7
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	db0b      	blt.n	8001c0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	f003 021f 	and.w	r2, r3, #31
 8001bf8:	4906      	ldr	r1, [pc, #24]	; (8001c14 <__NVIC_EnableIRQ+0x34>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	2001      	movs	r0, #1
 8001c02:	fa00 f202 	lsl.w	r2, r0, r2
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr
 8001c14:	e000e100 	.word	0xe000e100

08001c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	6039      	str	r1, [r7, #0]
 8001c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	db0a      	blt.n	8001c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	490c      	ldr	r1, [pc, #48]	; (8001c64 <__NVIC_SetPriority+0x4c>)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	0112      	lsls	r2, r2, #4
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c40:	e00a      	b.n	8001c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4908      	ldr	r1, [pc, #32]	; (8001c68 <__NVIC_SetPriority+0x50>)
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	3b04      	subs	r3, #4
 8001c50:	0112      	lsls	r2, r2, #4
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	440b      	add	r3, r1
 8001c56:	761a      	strb	r2, [r3, #24]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000e100 	.word	0xe000e100
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b089      	sub	sp, #36	; 0x24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f1c3 0307 	rsb	r3, r3, #7
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	bf28      	it	cs
 8001c8a:	2304      	movcs	r3, #4
 8001c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3304      	adds	r3, #4
 8001c92:	2b06      	cmp	r3, #6
 8001c94:	d902      	bls.n	8001c9c <NVIC_EncodePriority+0x30>
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3b03      	subs	r3, #3
 8001c9a:	e000      	b.n	8001c9e <NVIC_EncodePriority+0x32>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43da      	mvns	r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	401a      	ands	r2, r3
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbe:	43d9      	mvns	r1, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	4313      	orrs	r3, r2
         );
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3724      	adds	r7, #36	; 0x24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ce0:	d301      	bcc.n	8001ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e00f      	b.n	8001d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <SysTick_Config+0x40>)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cee:	210f      	movs	r1, #15
 8001cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf4:	f7ff ff90 	bl	8001c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <SysTick_Config+0x40>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cfe:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <SysTick_Config+0x40>)
 8001d00:	2207      	movs	r2, #7
 8001d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	e000e010 	.word	0xe000e010

08001d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff ff2d 	bl	8001b7c <__NVIC_SetPriorityGrouping>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b086      	sub	sp, #24
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	4603      	mov	r3, r0
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
 8001d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d3c:	f7ff ff42 	bl	8001bc4 <__NVIC_GetPriorityGrouping>
 8001d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	68b9      	ldr	r1, [r7, #8]
 8001d46:	6978      	ldr	r0, [r7, #20]
 8001d48:	f7ff ff90 	bl	8001c6c <NVIC_EncodePriority>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d52:	4611      	mov	r1, r2
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff5f 	bl	8001c18 <__NVIC_SetPriority>
}
 8001d5a:	bf00      	nop
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	4603      	mov	r3, r0
 8001d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff35 	bl	8001be0 <__NVIC_EnableIRQ>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff ffa2 	bl	8001cd0 <SysTick_Config>
 8001d8c:	4603      	mov	r3, r0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e043      	b.n	8001e36 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	4b22      	ldr	r3, [pc, #136]	; (8001e40 <HAL_DMA_Init+0xa8>)
 8001db6:	4413      	add	r3, r2
 8001db8:	4a22      	ldr	r2, [pc, #136]	; (8001e44 <HAL_DMA_Init+0xac>)
 8001dba:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbe:	091b      	lsrs	r3, r3, #4
 8001dc0:	009a      	lsls	r2, r3, #2
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a1f      	ldr	r2, [pc, #124]	; (8001e48 <HAL_DMA_Init+0xb0>)
 8001dca:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001de2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001de6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001df0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr
 8001e40:	bffdfff8 	.word	0xbffdfff8
 8001e44:	cccccccd 	.word	0xcccccccd
 8001e48:	40020000 	.word	0x40020000

08001e4c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
 8001e58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d101      	bne.n	8001e6c <HAL_DMA_Start_IT+0x20>
 8001e68:	2302      	movs	r3, #2
 8001e6a:	e04a      	b.n	8001f02 <HAL_DMA_Start_IT+0xb6>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d13a      	bne.n	8001ef4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2202      	movs	r2, #2
 8001e82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0201 	bic.w	r2, r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 f938 	bl	8002118 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d008      	beq.n	8001ec2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 020e 	orr.w	r2, r2, #14
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	e00f      	b.n	8001ee2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 0204 	bic.w	r2, r2, #4
 8001ed0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f042 020a 	orr.w	r2, r2, #10
 8001ee0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f042 0201 	orr.w	r2, r2, #1
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	e005      	b.n	8001f00 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001efc:	2302      	movs	r3, #2
 8001efe:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	2204      	movs	r2, #4
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d04f      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0xc8>
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d04a      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0320 	and.w	r3, r3, #32
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d107      	bne.n	8001f5c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0204 	bic.w	r2, r2, #4
 8001f5a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a66      	ldr	r2, [pc, #408]	; (80020fc <HAL_DMA_IRQHandler+0x1f0>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d029      	beq.n	8001fba <HAL_DMA_IRQHandler+0xae>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a65      	ldr	r2, [pc, #404]	; (8002100 <HAL_DMA_IRQHandler+0x1f4>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d022      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0xaa>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a63      	ldr	r2, [pc, #396]	; (8002104 <HAL_DMA_IRQHandler+0x1f8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d01a      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0xa4>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a62      	ldr	r2, [pc, #392]	; (8002108 <HAL_DMA_IRQHandler+0x1fc>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d012      	beq.n	8001faa <HAL_DMA_IRQHandler+0x9e>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a60      	ldr	r2, [pc, #384]	; (800210c <HAL_DMA_IRQHandler+0x200>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d00a      	beq.n	8001fa4 <HAL_DMA_IRQHandler+0x98>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a5f      	ldr	r2, [pc, #380]	; (8002110 <HAL_DMA_IRQHandler+0x204>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d102      	bne.n	8001f9e <HAL_DMA_IRQHandler+0x92>
 8001f98:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f9c:	e00e      	b.n	8001fbc <HAL_DMA_IRQHandler+0xb0>
 8001f9e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001fa2:	e00b      	b.n	8001fbc <HAL_DMA_IRQHandler+0xb0>
 8001fa4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001fa8:	e008      	b.n	8001fbc <HAL_DMA_IRQHandler+0xb0>
 8001faa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fae:	e005      	b.n	8001fbc <HAL_DMA_IRQHandler+0xb0>
 8001fb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fb4:	e002      	b.n	8001fbc <HAL_DMA_IRQHandler+0xb0>
 8001fb6:	2340      	movs	r3, #64	; 0x40
 8001fb8:	e000      	b.n	8001fbc <HAL_DMA_IRQHandler+0xb0>
 8001fba:	2304      	movs	r3, #4
 8001fbc:	4a55      	ldr	r2, [pc, #340]	; (8002114 <HAL_DMA_IRQHandler+0x208>)
 8001fbe:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 8094 	beq.w	80020f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001fd2:	e08e      	b.n	80020f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	2202      	movs	r2, #2
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d056      	beq.n	8002092 <HAL_DMA_IRQHandler+0x186>
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d051      	beq.n	8002092 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0320 	and.w	r3, r3, #32
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10b      	bne.n	8002014 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 020a 	bic.w	r2, r2, #10
 800200a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a38      	ldr	r2, [pc, #224]	; (80020fc <HAL_DMA_IRQHandler+0x1f0>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d029      	beq.n	8002072 <HAL_DMA_IRQHandler+0x166>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a37      	ldr	r2, [pc, #220]	; (8002100 <HAL_DMA_IRQHandler+0x1f4>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d022      	beq.n	800206e <HAL_DMA_IRQHandler+0x162>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a35      	ldr	r2, [pc, #212]	; (8002104 <HAL_DMA_IRQHandler+0x1f8>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d01a      	beq.n	8002068 <HAL_DMA_IRQHandler+0x15c>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a34      	ldr	r2, [pc, #208]	; (8002108 <HAL_DMA_IRQHandler+0x1fc>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d012      	beq.n	8002062 <HAL_DMA_IRQHandler+0x156>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a32      	ldr	r2, [pc, #200]	; (800210c <HAL_DMA_IRQHandler+0x200>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d00a      	beq.n	800205c <HAL_DMA_IRQHandler+0x150>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a31      	ldr	r2, [pc, #196]	; (8002110 <HAL_DMA_IRQHandler+0x204>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d102      	bne.n	8002056 <HAL_DMA_IRQHandler+0x14a>
 8002050:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002054:	e00e      	b.n	8002074 <HAL_DMA_IRQHandler+0x168>
 8002056:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800205a:	e00b      	b.n	8002074 <HAL_DMA_IRQHandler+0x168>
 800205c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002060:	e008      	b.n	8002074 <HAL_DMA_IRQHandler+0x168>
 8002062:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002066:	e005      	b.n	8002074 <HAL_DMA_IRQHandler+0x168>
 8002068:	f44f 7300 	mov.w	r3, #512	; 0x200
 800206c:	e002      	b.n	8002074 <HAL_DMA_IRQHandler+0x168>
 800206e:	2320      	movs	r3, #32
 8002070:	e000      	b.n	8002074 <HAL_DMA_IRQHandler+0x168>
 8002072:	2302      	movs	r3, #2
 8002074:	4a27      	ldr	r2, [pc, #156]	; (8002114 <HAL_DMA_IRQHandler+0x208>)
 8002076:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	2b00      	cmp	r3, #0
 8002086:	d034      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002090:	e02f      	b.n	80020f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	2208      	movs	r2, #8
 8002098:	409a      	lsls	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	4013      	ands	r3, r2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d028      	beq.n	80020f4 <HAL_DMA_IRQHandler+0x1e8>
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d023      	beq.n	80020f4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 020e 	bic.w	r2, r2, #14
 80020ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c4:	2101      	movs	r1, #1
 80020c6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d004      	beq.n	80020f4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	4798      	blx	r3
    }
  }
  return;
 80020f2:	bf00      	nop
 80020f4:	bf00      	nop
}
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40020008 	.word	0x40020008
 8002100:	4002001c 	.word	0x4002001c
 8002104:	40020030 	.word	0x40020030
 8002108:	40020044 	.word	0x40020044
 800210c:	40020058 	.word	0x40020058
 8002110:	4002006c 	.word	0x4002006c
 8002114:	40020000 	.word	0x40020000

08002118 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
 8002124:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212e:	2101      	movs	r1, #1
 8002130:	fa01 f202 	lsl.w	r2, r1, r2
 8002134:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b10      	cmp	r3, #16
 8002144:	d108      	bne.n	8002158 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002156:	e007      	b.n	8002168 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	60da      	str	r2, [r3, #12]
}
 8002168:	bf00      	nop
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr
	...

08002174 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002174:	b480      	push	{r7}
 8002176:	b08b      	sub	sp, #44	; 0x2c
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800217e:	2300      	movs	r3, #0
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002182:	2300      	movs	r3, #0
 8002184:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002186:	e169      	b.n	800245c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002188:	2201      	movs	r2, #1
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	69fa      	ldr	r2, [r7, #28]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	f040 8158 	bne.w	8002456 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	4a9a      	ldr	r2, [pc, #616]	; (8002414 <HAL_GPIO_Init+0x2a0>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d05e      	beq.n	800226e <HAL_GPIO_Init+0xfa>
 80021b0:	4a98      	ldr	r2, [pc, #608]	; (8002414 <HAL_GPIO_Init+0x2a0>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d875      	bhi.n	80022a2 <HAL_GPIO_Init+0x12e>
 80021b6:	4a98      	ldr	r2, [pc, #608]	; (8002418 <HAL_GPIO_Init+0x2a4>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d058      	beq.n	800226e <HAL_GPIO_Init+0xfa>
 80021bc:	4a96      	ldr	r2, [pc, #600]	; (8002418 <HAL_GPIO_Init+0x2a4>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d86f      	bhi.n	80022a2 <HAL_GPIO_Init+0x12e>
 80021c2:	4a96      	ldr	r2, [pc, #600]	; (800241c <HAL_GPIO_Init+0x2a8>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d052      	beq.n	800226e <HAL_GPIO_Init+0xfa>
 80021c8:	4a94      	ldr	r2, [pc, #592]	; (800241c <HAL_GPIO_Init+0x2a8>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d869      	bhi.n	80022a2 <HAL_GPIO_Init+0x12e>
 80021ce:	4a94      	ldr	r2, [pc, #592]	; (8002420 <HAL_GPIO_Init+0x2ac>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d04c      	beq.n	800226e <HAL_GPIO_Init+0xfa>
 80021d4:	4a92      	ldr	r2, [pc, #584]	; (8002420 <HAL_GPIO_Init+0x2ac>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d863      	bhi.n	80022a2 <HAL_GPIO_Init+0x12e>
 80021da:	4a92      	ldr	r2, [pc, #584]	; (8002424 <HAL_GPIO_Init+0x2b0>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d046      	beq.n	800226e <HAL_GPIO_Init+0xfa>
 80021e0:	4a90      	ldr	r2, [pc, #576]	; (8002424 <HAL_GPIO_Init+0x2b0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d85d      	bhi.n	80022a2 <HAL_GPIO_Init+0x12e>
 80021e6:	2b12      	cmp	r3, #18
 80021e8:	d82a      	bhi.n	8002240 <HAL_GPIO_Init+0xcc>
 80021ea:	2b12      	cmp	r3, #18
 80021ec:	d859      	bhi.n	80022a2 <HAL_GPIO_Init+0x12e>
 80021ee:	a201      	add	r2, pc, #4	; (adr r2, 80021f4 <HAL_GPIO_Init+0x80>)
 80021f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f4:	0800226f 	.word	0x0800226f
 80021f8:	08002249 	.word	0x08002249
 80021fc:	0800225b 	.word	0x0800225b
 8002200:	0800229d 	.word	0x0800229d
 8002204:	080022a3 	.word	0x080022a3
 8002208:	080022a3 	.word	0x080022a3
 800220c:	080022a3 	.word	0x080022a3
 8002210:	080022a3 	.word	0x080022a3
 8002214:	080022a3 	.word	0x080022a3
 8002218:	080022a3 	.word	0x080022a3
 800221c:	080022a3 	.word	0x080022a3
 8002220:	080022a3 	.word	0x080022a3
 8002224:	080022a3 	.word	0x080022a3
 8002228:	080022a3 	.word	0x080022a3
 800222c:	080022a3 	.word	0x080022a3
 8002230:	080022a3 	.word	0x080022a3
 8002234:	080022a3 	.word	0x080022a3
 8002238:	08002251 	.word	0x08002251
 800223c:	08002265 	.word	0x08002265
 8002240:	4a79      	ldr	r2, [pc, #484]	; (8002428 <HAL_GPIO_Init+0x2b4>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d013      	beq.n	800226e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002246:	e02c      	b.n	80022a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	623b      	str	r3, [r7, #32]
          break;
 800224e:	e029      	b.n	80022a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	3304      	adds	r3, #4
 8002256:	623b      	str	r3, [r7, #32]
          break;
 8002258:	e024      	b.n	80022a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	3308      	adds	r3, #8
 8002260:	623b      	str	r3, [r7, #32]
          break;
 8002262:	e01f      	b.n	80022a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	330c      	adds	r3, #12
 800226a:	623b      	str	r3, [r7, #32]
          break;
 800226c:	e01a      	b.n	80022a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d102      	bne.n	800227c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002276:	2304      	movs	r3, #4
 8002278:	623b      	str	r3, [r7, #32]
          break;
 800227a:	e013      	b.n	80022a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d105      	bne.n	8002290 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002284:	2308      	movs	r3, #8
 8002286:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69fa      	ldr	r2, [r7, #28]
 800228c:	611a      	str	r2, [r3, #16]
          break;
 800228e:	e009      	b.n	80022a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002290:	2308      	movs	r3, #8
 8002292:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69fa      	ldr	r2, [r7, #28]
 8002298:	615a      	str	r2, [r3, #20]
          break;
 800229a:	e003      	b.n	80022a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800229c:	2300      	movs	r3, #0
 800229e:	623b      	str	r3, [r7, #32]
          break;
 80022a0:	e000      	b.n	80022a4 <HAL_GPIO_Init+0x130>
          break;
 80022a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	2bff      	cmp	r3, #255	; 0xff
 80022a8:	d801      	bhi.n	80022ae <HAL_GPIO_Init+0x13a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	e001      	b.n	80022b2 <HAL_GPIO_Init+0x13e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3304      	adds	r3, #4
 80022b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	2bff      	cmp	r3, #255	; 0xff
 80022b8:	d802      	bhi.n	80022c0 <HAL_GPIO_Init+0x14c>
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	e002      	b.n	80022c6 <HAL_GPIO_Init+0x152>
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	3b08      	subs	r3, #8
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	210f      	movs	r1, #15
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	fa01 f303 	lsl.w	r3, r1, r3
 80022d4:	43db      	mvns	r3, r3
 80022d6:	401a      	ands	r2, r3
 80022d8:	6a39      	ldr	r1, [r7, #32]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	fa01 f303 	lsl.w	r3, r1, r3
 80022e0:	431a      	orrs	r2, r3
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 80b1 	beq.w	8002456 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022f4:	4b4d      	ldr	r3, [pc, #308]	; (800242c <HAL_GPIO_Init+0x2b8>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	4a4c      	ldr	r2, [pc, #304]	; (800242c <HAL_GPIO_Init+0x2b8>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6193      	str	r3, [r2, #24]
 8002300:	4b4a      	ldr	r3, [pc, #296]	; (800242c <HAL_GPIO_Init+0x2b8>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	60bb      	str	r3, [r7, #8]
 800230a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800230c:	4a48      	ldr	r2, [pc, #288]	; (8002430 <HAL_GPIO_Init+0x2bc>)
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	089b      	lsrs	r3, r3, #2
 8002312:	3302      	adds	r3, #2
 8002314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002318:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	f003 0303 	and.w	r3, r3, #3
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	220f      	movs	r2, #15
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	4013      	ands	r3, r2
 800232e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a40      	ldr	r2, [pc, #256]	; (8002434 <HAL_GPIO_Init+0x2c0>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d013      	beq.n	8002360 <HAL_GPIO_Init+0x1ec>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a3f      	ldr	r2, [pc, #252]	; (8002438 <HAL_GPIO_Init+0x2c4>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d00d      	beq.n	800235c <HAL_GPIO_Init+0x1e8>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a3e      	ldr	r2, [pc, #248]	; (800243c <HAL_GPIO_Init+0x2c8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d007      	beq.n	8002358 <HAL_GPIO_Init+0x1e4>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a3d      	ldr	r2, [pc, #244]	; (8002440 <HAL_GPIO_Init+0x2cc>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d101      	bne.n	8002354 <HAL_GPIO_Init+0x1e0>
 8002350:	2303      	movs	r3, #3
 8002352:	e006      	b.n	8002362 <HAL_GPIO_Init+0x1ee>
 8002354:	2304      	movs	r3, #4
 8002356:	e004      	b.n	8002362 <HAL_GPIO_Init+0x1ee>
 8002358:	2302      	movs	r3, #2
 800235a:	e002      	b.n	8002362 <HAL_GPIO_Init+0x1ee>
 800235c:	2301      	movs	r3, #1
 800235e:	e000      	b.n	8002362 <HAL_GPIO_Init+0x1ee>
 8002360:	2300      	movs	r3, #0
 8002362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002364:	f002 0203 	and.w	r2, r2, #3
 8002368:	0092      	lsls	r2, r2, #2
 800236a:	4093      	lsls	r3, r2
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	4313      	orrs	r3, r2
 8002370:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002372:	492f      	ldr	r1, [pc, #188]	; (8002430 <HAL_GPIO_Init+0x2bc>)
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	089b      	lsrs	r3, r3, #2
 8002378:	3302      	adds	r3, #2
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d006      	beq.n	800239a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800238c:	4b2d      	ldr	r3, [pc, #180]	; (8002444 <HAL_GPIO_Init+0x2d0>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	492c      	ldr	r1, [pc, #176]	; (8002444 <HAL_GPIO_Init+0x2d0>)
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	4313      	orrs	r3, r2
 8002396:	600b      	str	r3, [r1, #0]
 8002398:	e006      	b.n	80023a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800239a:	4b2a      	ldr	r3, [pc, #168]	; (8002444 <HAL_GPIO_Init+0x2d0>)
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	43db      	mvns	r3, r3
 80023a2:	4928      	ldr	r1, [pc, #160]	; (8002444 <HAL_GPIO_Init+0x2d0>)
 80023a4:	4013      	ands	r3, r2
 80023a6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d006      	beq.n	80023c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023b4:	4b23      	ldr	r3, [pc, #140]	; (8002444 <HAL_GPIO_Init+0x2d0>)
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	4922      	ldr	r1, [pc, #136]	; (8002444 <HAL_GPIO_Init+0x2d0>)
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	4313      	orrs	r3, r2
 80023be:	604b      	str	r3, [r1, #4]
 80023c0:	e006      	b.n	80023d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023c2:	4b20      	ldr	r3, [pc, #128]	; (8002444 <HAL_GPIO_Init+0x2d0>)
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	491e      	ldr	r1, [pc, #120]	; (8002444 <HAL_GPIO_Init+0x2d0>)
 80023cc:	4013      	ands	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d006      	beq.n	80023ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023dc:	4b19      	ldr	r3, [pc, #100]	; (8002444 <HAL_GPIO_Init+0x2d0>)
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	4918      	ldr	r1, [pc, #96]	; (8002444 <HAL_GPIO_Init+0x2d0>)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	608b      	str	r3, [r1, #8]
 80023e8:	e006      	b.n	80023f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023ea:	4b16      	ldr	r3, [pc, #88]	; (8002444 <HAL_GPIO_Init+0x2d0>)
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	4914      	ldr	r1, [pc, #80]	; (8002444 <HAL_GPIO_Init+0x2d0>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d021      	beq.n	8002448 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002404:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <HAL_GPIO_Init+0x2d0>)
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	490e      	ldr	r1, [pc, #56]	; (8002444 <HAL_GPIO_Init+0x2d0>)
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	4313      	orrs	r3, r2
 800240e:	60cb      	str	r3, [r1, #12]
 8002410:	e021      	b.n	8002456 <HAL_GPIO_Init+0x2e2>
 8002412:	bf00      	nop
 8002414:	10320000 	.word	0x10320000
 8002418:	10310000 	.word	0x10310000
 800241c:	10220000 	.word	0x10220000
 8002420:	10210000 	.word	0x10210000
 8002424:	10120000 	.word	0x10120000
 8002428:	10110000 	.word	0x10110000
 800242c:	40021000 	.word	0x40021000
 8002430:	40010000 	.word	0x40010000
 8002434:	40010800 	.word	0x40010800
 8002438:	40010c00 	.word	0x40010c00
 800243c:	40011000 	.word	0x40011000
 8002440:	40011400 	.word	0x40011400
 8002444:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <HAL_GPIO_Init+0x304>)
 800244a:	68da      	ldr	r2, [r3, #12]
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	43db      	mvns	r3, r3
 8002450:	4909      	ldr	r1, [pc, #36]	; (8002478 <HAL_GPIO_Init+0x304>)
 8002452:	4013      	ands	r3, r2
 8002454:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	3301      	adds	r3, #1
 800245a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	fa22 f303 	lsr.w	r3, r2, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	f47f ae8e 	bne.w	8002188 <HAL_GPIO_Init+0x14>
  }
}
 800246c:	bf00      	nop
 800246e:	bf00      	nop
 8002470:	372c      	adds	r7, #44	; 0x2c
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr
 8002478:	40010400 	.word	0x40010400

0800247c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	887b      	ldrh	r3, [r7, #2]
 800248e:	4013      	ands	r3, r2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d002      	beq.n	800249a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002494:	2301      	movs	r3, #1
 8002496:	73fb      	strb	r3, [r7, #15]
 8002498:	e001      	b.n	800249e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800249a:	2300      	movs	r3, #0
 800249c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800249e:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr

080024aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	460b      	mov	r3, r1
 80024b4:	807b      	strh	r3, [r7, #2]
 80024b6:	4613      	mov	r3, r2
 80024b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024ba:	787b      	ldrb	r3, [r7, #1]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024c0:	887a      	ldrh	r2, [r7, #2]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024c6:	e003      	b.n	80024d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024c8:	887b      	ldrh	r3, [r7, #2]
 80024ca:	041a      	lsls	r2, r3, #16
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	611a      	str	r2, [r3, #16]
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr
	...

080024dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024e6:	4b08      	ldr	r3, [pc, #32]	; (8002508 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024e8:	695a      	ldr	r2, [r3, #20]
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d006      	beq.n	8002500 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024f2:	4a05      	ldr	r2, [pc, #20]	; (8002508 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024f4:	88fb      	ldrh	r3, [r7, #6]
 80024f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024f8:	88fb      	ldrh	r3, [r7, #6]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fe f898 	bl	8000630 <HAL_GPIO_EXTI_Callback>
  }
}
 8002500:	bf00      	nop
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40010400 	.word	0x40010400

0800250c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e272      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 8087 	beq.w	800263a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800252c:	4b92      	ldr	r3, [pc, #584]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 030c 	and.w	r3, r3, #12
 8002534:	2b04      	cmp	r3, #4
 8002536:	d00c      	beq.n	8002552 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002538:	4b8f      	ldr	r3, [pc, #572]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 030c 	and.w	r3, r3, #12
 8002540:	2b08      	cmp	r3, #8
 8002542:	d112      	bne.n	800256a <HAL_RCC_OscConfig+0x5e>
 8002544:	4b8c      	ldr	r3, [pc, #560]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002550:	d10b      	bne.n	800256a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002552:	4b89      	ldr	r3, [pc, #548]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d06c      	beq.n	8002638 <HAL_RCC_OscConfig+0x12c>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d168      	bne.n	8002638 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e24c      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002572:	d106      	bne.n	8002582 <HAL_RCC_OscConfig+0x76>
 8002574:	4b80      	ldr	r3, [pc, #512]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a7f      	ldr	r2, [pc, #508]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 800257a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	e02e      	b.n	80025e0 <HAL_RCC_OscConfig+0xd4>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10c      	bne.n	80025a4 <HAL_RCC_OscConfig+0x98>
 800258a:	4b7b      	ldr	r3, [pc, #492]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a7a      	ldr	r2, [pc, #488]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002590:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	4b78      	ldr	r3, [pc, #480]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a77      	ldr	r2, [pc, #476]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 800259c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	e01d      	b.n	80025e0 <HAL_RCC_OscConfig+0xd4>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025ac:	d10c      	bne.n	80025c8 <HAL_RCC_OscConfig+0xbc>
 80025ae:	4b72      	ldr	r3, [pc, #456]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a71      	ldr	r2, [pc, #452]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 80025b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	4b6f      	ldr	r3, [pc, #444]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a6e      	ldr	r2, [pc, #440]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 80025c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	e00b      	b.n	80025e0 <HAL_RCC_OscConfig+0xd4>
 80025c8:	4b6b      	ldr	r3, [pc, #428]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a6a      	ldr	r2, [pc, #424]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 80025ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	4b68      	ldr	r3, [pc, #416]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a67      	ldr	r2, [pc, #412]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 80025da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d013      	beq.n	8002610 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e8:	f7ff fa9a 	bl	8001b20 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f0:	f7ff fa96 	bl	8001b20 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b64      	cmp	r3, #100	; 0x64
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e200      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002602:	4b5d      	ldr	r3, [pc, #372]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0xe4>
 800260e:	e014      	b.n	800263a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002610:	f7ff fa86 	bl	8001b20 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002618:	f7ff fa82 	bl	8001b20 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b64      	cmp	r3, #100	; 0x64
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e1ec      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800262a:	4b53      	ldr	r3, [pc, #332]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_OscConfig+0x10c>
 8002636:	e000      	b.n	800263a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d063      	beq.n	800270e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002646:	4b4c      	ldr	r3, [pc, #304]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 030c 	and.w	r3, r3, #12
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00b      	beq.n	800266a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002652:	4b49      	ldr	r3, [pc, #292]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f003 030c 	and.w	r3, r3, #12
 800265a:	2b08      	cmp	r3, #8
 800265c:	d11c      	bne.n	8002698 <HAL_RCC_OscConfig+0x18c>
 800265e:	4b46      	ldr	r3, [pc, #280]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d116      	bne.n	8002698 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800266a:	4b43      	ldr	r3, [pc, #268]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d005      	beq.n	8002682 <HAL_RCC_OscConfig+0x176>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d001      	beq.n	8002682 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e1c0      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002682:	4b3d      	ldr	r3, [pc, #244]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4939      	ldr	r1, [pc, #228]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002692:	4313      	orrs	r3, r2
 8002694:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002696:	e03a      	b.n	800270e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d020      	beq.n	80026e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026a0:	4b36      	ldr	r3, [pc, #216]	; (800277c <HAL_RCC_OscConfig+0x270>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a6:	f7ff fa3b 	bl	8001b20 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ae:	f7ff fa37 	bl	8001b20 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e1a1      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c0:	4b2d      	ldr	r3, [pc, #180]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026cc:	4b2a      	ldr	r3, [pc, #168]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4927      	ldr	r1, [pc, #156]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	600b      	str	r3, [r1, #0]
 80026e0:	e015      	b.n	800270e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026e2:	4b26      	ldr	r3, [pc, #152]	; (800277c <HAL_RCC_OscConfig+0x270>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e8:	f7ff fa1a 	bl	8001b20 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026f0:	f7ff fa16 	bl	8001b20 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e180      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002702:	4b1d      	ldr	r3, [pc, #116]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d03a      	beq.n	8002790 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d019      	beq.n	8002756 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002722:	4b17      	ldr	r3, [pc, #92]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 8002724:	2201      	movs	r2, #1
 8002726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002728:	f7ff f9fa 	bl	8001b20 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002730:	f7ff f9f6 	bl	8001b20 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e160      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002742:	4b0d      	ldr	r3, [pc, #52]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800274e:	2001      	movs	r0, #1
 8002750:	f000 fad8 	bl	8002d04 <RCC_Delay>
 8002754:	e01c      	b.n	8002790 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002756:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275c:	f7ff f9e0 	bl	8001b20 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002762:	e00f      	b.n	8002784 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002764:	f7ff f9dc 	bl	8001b20 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d908      	bls.n	8002784 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e146      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000
 800277c:	42420000 	.word	0x42420000
 8002780:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002784:	4b92      	ldr	r3, [pc, #584]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1e9      	bne.n	8002764 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80a6 	beq.w	80028ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800279e:	2300      	movs	r3, #0
 80027a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027a2:	4b8b      	ldr	r3, [pc, #556]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10d      	bne.n	80027ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ae:	4b88      	ldr	r3, [pc, #544]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	4a87      	ldr	r2, [pc, #540]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80027b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b8:	61d3      	str	r3, [r2, #28]
 80027ba:	4b85      	ldr	r3, [pc, #532]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c2:	60bb      	str	r3, [r7, #8]
 80027c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027c6:	2301      	movs	r3, #1
 80027c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ca:	4b82      	ldr	r3, [pc, #520]	; (80029d4 <HAL_RCC_OscConfig+0x4c8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d118      	bne.n	8002808 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027d6:	4b7f      	ldr	r3, [pc, #508]	; (80029d4 <HAL_RCC_OscConfig+0x4c8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a7e      	ldr	r2, [pc, #504]	; (80029d4 <HAL_RCC_OscConfig+0x4c8>)
 80027dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027e2:	f7ff f99d 	bl	8001b20 <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ea:	f7ff f999 	bl	8001b20 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b64      	cmp	r3, #100	; 0x64
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e103      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027fc:	4b75      	ldr	r3, [pc, #468]	; (80029d4 <HAL_RCC_OscConfig+0x4c8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0f0      	beq.n	80027ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d106      	bne.n	800281e <HAL_RCC_OscConfig+0x312>
 8002810:	4b6f      	ldr	r3, [pc, #444]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	4a6e      	ldr	r2, [pc, #440]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	6213      	str	r3, [r2, #32]
 800281c:	e02d      	b.n	800287a <HAL_RCC_OscConfig+0x36e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10c      	bne.n	8002840 <HAL_RCC_OscConfig+0x334>
 8002826:	4b6a      	ldr	r3, [pc, #424]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	4a69      	ldr	r2, [pc, #420]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800282c:	f023 0301 	bic.w	r3, r3, #1
 8002830:	6213      	str	r3, [r2, #32]
 8002832:	4b67      	ldr	r3, [pc, #412]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	4a66      	ldr	r2, [pc, #408]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002838:	f023 0304 	bic.w	r3, r3, #4
 800283c:	6213      	str	r3, [r2, #32]
 800283e:	e01c      	b.n	800287a <HAL_RCC_OscConfig+0x36e>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	2b05      	cmp	r3, #5
 8002846:	d10c      	bne.n	8002862 <HAL_RCC_OscConfig+0x356>
 8002848:	4b61      	ldr	r3, [pc, #388]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	4a60      	ldr	r2, [pc, #384]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800284e:	f043 0304 	orr.w	r3, r3, #4
 8002852:	6213      	str	r3, [r2, #32]
 8002854:	4b5e      	ldr	r3, [pc, #376]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	4a5d      	ldr	r2, [pc, #372]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800285a:	f043 0301 	orr.w	r3, r3, #1
 800285e:	6213      	str	r3, [r2, #32]
 8002860:	e00b      	b.n	800287a <HAL_RCC_OscConfig+0x36e>
 8002862:	4b5b      	ldr	r3, [pc, #364]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	4a5a      	ldr	r2, [pc, #360]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002868:	f023 0301 	bic.w	r3, r3, #1
 800286c:	6213      	str	r3, [r2, #32]
 800286e:	4b58      	ldr	r3, [pc, #352]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	4a57      	ldr	r2, [pc, #348]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002874:	f023 0304 	bic.w	r3, r3, #4
 8002878:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d015      	beq.n	80028ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002882:	f7ff f94d 	bl	8001b20 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002888:	e00a      	b.n	80028a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288a:	f7ff f949 	bl	8001b20 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	f241 3288 	movw	r2, #5000	; 0x1388
 8002898:	4293      	cmp	r3, r2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e0b1      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a0:	4b4b      	ldr	r3, [pc, #300]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0ee      	beq.n	800288a <HAL_RCC_OscConfig+0x37e>
 80028ac:	e014      	b.n	80028d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ae:	f7ff f937 	bl	8001b20 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b4:	e00a      	b.n	80028cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b6:	f7ff f933 	bl	8001b20 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e09b      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028cc:	4b40      	ldr	r3, [pc, #256]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1ee      	bne.n	80028b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028d8:	7dfb      	ldrb	r3, [r7, #23]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d105      	bne.n	80028ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028de:	4b3c      	ldr	r3, [pc, #240]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	4a3b      	ldr	r2, [pc, #236]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80028e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 8087 	beq.w	8002a02 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028f4:	4b36      	ldr	r3, [pc, #216]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 030c 	and.w	r3, r3, #12
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d061      	beq.n	80029c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	2b02      	cmp	r3, #2
 8002906:	d146      	bne.n	8002996 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002908:	4b33      	ldr	r3, [pc, #204]	; (80029d8 <HAL_RCC_OscConfig+0x4cc>)
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290e:	f7ff f907 	bl	8001b20 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002916:	f7ff f903 	bl	8001b20 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e06d      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002928:	4b29      	ldr	r3, [pc, #164]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1f0      	bne.n	8002916 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800293c:	d108      	bne.n	8002950 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800293e:	4b24      	ldr	r3, [pc, #144]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	4921      	ldr	r1, [pc, #132]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800294c:	4313      	orrs	r3, r2
 800294e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002950:	4b1f      	ldr	r3, [pc, #124]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a19      	ldr	r1, [r3, #32]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	430b      	orrs	r3, r1
 8002962:	491b      	ldr	r1, [pc, #108]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002964:	4313      	orrs	r3, r2
 8002966:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002968:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <HAL_RCC_OscConfig+0x4cc>)
 800296a:	2201      	movs	r2, #1
 800296c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296e:	f7ff f8d7 	bl	8001b20 <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002976:	f7ff f8d3 	bl	8001b20 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e03d      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002988:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0f0      	beq.n	8002976 <HAL_RCC_OscConfig+0x46a>
 8002994:	e035      	b.n	8002a02 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002996:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <HAL_RCC_OscConfig+0x4cc>)
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299c:	f7ff f8c0 	bl	8001b20 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a4:	f7ff f8bc 	bl	8001b20 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e026      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b6:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x498>
 80029c2:	e01e      	b.n	8002a02 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d107      	bne.n	80029dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e019      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40007000 	.word	0x40007000
 80029d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_RCC_OscConfig+0x500>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d106      	bne.n	80029fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d001      	beq.n	8002a02 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40021000 	.word	0x40021000

08002a10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e0d0      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a24:	4b6a      	ldr	r3, [pc, #424]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d910      	bls.n	8002a54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a32:	4b67      	ldr	r3, [pc, #412]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f023 0207 	bic.w	r2, r3, #7
 8002a3a:	4965      	ldr	r1, [pc, #404]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a42:	4b63      	ldr	r3, [pc, #396]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d001      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e0b8      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d020      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a6c:	4b59      	ldr	r3, [pc, #356]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	4a58      	ldr	r2, [pc, #352]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a84:	4b53      	ldr	r3, [pc, #332]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	4a52      	ldr	r2, [pc, #328]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a90:	4b50      	ldr	r3, [pc, #320]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	494d      	ldr	r1, [pc, #308]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d040      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d107      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab6:	4b47      	ldr	r3, [pc, #284]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d115      	bne.n	8002aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e07f      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d107      	bne.n	8002ade <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ace:	4b41      	ldr	r3, [pc, #260]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d109      	bne.n	8002aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e073      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ade:	4b3d      	ldr	r3, [pc, #244]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e06b      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aee:	4b39      	ldr	r3, [pc, #228]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f023 0203 	bic.w	r2, r3, #3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	4936      	ldr	r1, [pc, #216]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b00:	f7ff f80e 	bl	8001b20 <HAL_GetTick>
 8002b04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b06:	e00a      	b.n	8002b1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b08:	f7ff f80a 	bl	8001b20 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e053      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1e:	4b2d      	ldr	r3, [pc, #180]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 020c 	and.w	r2, r3, #12
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d1eb      	bne.n	8002b08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b30:	4b27      	ldr	r3, [pc, #156]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d210      	bcs.n	8002b60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3e:	4b24      	ldr	r3, [pc, #144]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f023 0207 	bic.w	r2, r3, #7
 8002b46:	4922      	ldr	r1, [pc, #136]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4e:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d001      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e032      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d008      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b6c:	4b19      	ldr	r3, [pc, #100]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	4916      	ldr	r1, [pc, #88]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d009      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b8a:	4b12      	ldr	r3, [pc, #72]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	490e      	ldr	r1, [pc, #56]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b9e:	f000 f821 	bl	8002be4 <HAL_RCC_GetSysClockFreq>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	091b      	lsrs	r3, r3, #4
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	490a      	ldr	r1, [pc, #40]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb0:	5ccb      	ldrb	r3, [r1, r3]
 8002bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb6:	4a09      	ldr	r2, [pc, #36]	; (8002bdc <HAL_RCC_ClockConfig+0x1cc>)
 8002bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bba:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <HAL_RCC_ClockConfig+0x1d0>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe ff6c 	bl	8001a9c <HAL_InitTick>

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40022000 	.word	0x40022000
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	080059f0 	.word	0x080059f0
 8002bdc:	20000f94 	.word	0x20000f94
 8002be0:	20000f98 	.word	0x20000f98

08002be4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be4:	b490      	push	{r4, r7}
 8002be6:	b08a      	sub	sp, #40	; 0x28
 8002be8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002bea:	4b29      	ldr	r3, [pc, #164]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xac>)
 8002bec:	1d3c      	adds	r4, r7, #4
 8002bee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bf0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002bf4:	f240 2301 	movw	r3, #513	; 0x201
 8002bf8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61bb      	str	r3, [r7, #24]
 8002c02:	2300      	movs	r3, #0
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
 8002c06:	2300      	movs	r3, #0
 8002c08:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c0e:	4b21      	ldr	r3, [pc, #132]	; (8002c94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f003 030c 	and.w	r3, r3, #12
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d002      	beq.n	8002c24 <HAL_RCC_GetSysClockFreq+0x40>
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d003      	beq.n	8002c2a <HAL_RCC_GetSysClockFreq+0x46>
 8002c22:	e02b      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c24:	4b1c      	ldr	r3, [pc, #112]	; (8002c98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c26:	623b      	str	r3, [r7, #32]
      break;
 8002c28:	e02b      	b.n	8002c82 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	0c9b      	lsrs	r3, r3, #18
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	3328      	adds	r3, #40	; 0x28
 8002c34:	443b      	add	r3, r7
 8002c36:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c3a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d012      	beq.n	8002c6c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c46:	4b13      	ldr	r3, [pc, #76]	; (8002c94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	0c5b      	lsrs	r3, r3, #17
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	3328      	adds	r3, #40	; 0x28
 8002c52:	443b      	add	r3, r7
 8002c54:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c58:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	4a0e      	ldr	r2, [pc, #56]	; (8002c98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c5e:	fb03 f202 	mul.w	r2, r3, r2
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c68:	627b      	str	r3, [r7, #36]	; 0x24
 8002c6a:	e004      	b.n	8002c76 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	4a0b      	ldr	r2, [pc, #44]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c70:	fb02 f303 	mul.w	r3, r2, r3
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	623b      	str	r3, [r7, #32]
      break;
 8002c7a:	e002      	b.n	8002c82 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c7c:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c7e:	623b      	str	r3, [r7, #32]
      break;
 8002c80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c82:	6a3b      	ldr	r3, [r7, #32]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3728      	adds	r7, #40	; 0x28
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc90      	pop	{r4, r7}
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	08005720 	.word	0x08005720
 8002c94:	40021000 	.word	0x40021000
 8002c98:	007a1200 	.word	0x007a1200
 8002c9c:	003d0900 	.word	0x003d0900

08002ca0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ca4:	4b02      	ldr	r3, [pc, #8]	; (8002cb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr
 8002cb0:	20000f94 	.word	0x20000f94

08002cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cb8:	f7ff fff2 	bl	8002ca0 <HAL_RCC_GetHCLKFreq>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	0a1b      	lsrs	r3, r3, #8
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	4903      	ldr	r1, [pc, #12]	; (8002cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cca:	5ccb      	ldrb	r3, [r1, r3]
 8002ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	08005a00 	.word	0x08005a00

08002cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ce0:	f7ff ffde 	bl	8002ca0 <HAL_RCC_GetHCLKFreq>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	0adb      	lsrs	r3, r3, #11
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	4903      	ldr	r1, [pc, #12]	; (8002d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cf2:	5ccb      	ldrb	r3, [r1, r3]
 8002cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	08005a00 	.word	0x08005a00

08002d04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d0c:	4b0a      	ldr	r3, [pc, #40]	; (8002d38 <RCC_Delay+0x34>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a0a      	ldr	r2, [pc, #40]	; (8002d3c <RCC_Delay+0x38>)
 8002d12:	fba2 2303 	umull	r2, r3, r2, r3
 8002d16:	0a5b      	lsrs	r3, r3, #9
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	fb02 f303 	mul.w	r3, r2, r3
 8002d1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d20:	bf00      	nop
  }
  while (Delay --);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	1e5a      	subs	r2, r3, #1
 8002d26:	60fa      	str	r2, [r7, #12]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1f9      	bne.n	8002d20 <RCC_Delay+0x1c>
}
 8002d2c:	bf00      	nop
 8002d2e:	bf00      	nop
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr
 8002d38:	20000f94 	.word	0x20000f94
 8002d3c:	10624dd3 	.word	0x10624dd3

08002d40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e076      	b.n	8002e40 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d108      	bne.n	8002d6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d62:	d009      	beq.n	8002d78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	61da      	str	r2, [r3, #28]
 8002d6a:	e005      	b.n	8002d78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d106      	bne.n	8002d98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7fe fcb4 	bl	8001700 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfc:	ea42 0103 	orr.w	r1, r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	0c1a      	lsrs	r2, r3, #16
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f002 0204 	and.w	r2, r2, #4
 8002e1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	69da      	ldr	r2, [r3, #28]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b088      	sub	sp, #32
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	603b      	str	r3, [r7, #0]
 8002e54:	4613      	mov	r3, r2
 8002e56:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_SPI_Transmit+0x22>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e126      	b.n	80030b8 <HAL_SPI_Transmit+0x270>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e72:	f7fe fe55 	bl	8001b20 <HAL_GetTick>
 8002e76:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e78:	88fb      	ldrh	r3, [r7, #6]
 8002e7a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d002      	beq.n	8002e8e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e8c:	e10b      	b.n	80030a6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <HAL_SPI_Transmit+0x52>
 8002e94:	88fb      	ldrh	r3, [r7, #6]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d102      	bne.n	8002ea0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e9e:	e102      	b.n	80030a6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2203      	movs	r2, #3
 8002ea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	88fa      	ldrh	r2, [r7, #6]
 8002eb8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	88fa      	ldrh	r2, [r7, #6]
 8002ebe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ee6:	d10f      	bne.n	8002f08 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ef6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f06:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f12:	2b40      	cmp	r3, #64	; 0x40
 8002f14:	d007      	beq.n	8002f26 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f2e:	d14b      	bne.n	8002fc8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d002      	beq.n	8002f3e <HAL_SPI_Transmit+0xf6>
 8002f38:	8afb      	ldrh	r3, [r7, #22]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d13e      	bne.n	8002fbc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	881a      	ldrh	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	1c9a      	adds	r2, r3, #2
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f62:	e02b      	b.n	8002fbc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d112      	bne.n	8002f98 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	881a      	ldrh	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	1c9a      	adds	r2, r3, #2
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f96:	e011      	b.n	8002fbc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f98:	f7fe fdc2 	bl	8001b20 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d803      	bhi.n	8002fb0 <HAL_SPI_Transmit+0x168>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fae:	d102      	bne.n	8002fb6 <HAL_SPI_Transmit+0x16e>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d102      	bne.n	8002fbc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002fba:	e074      	b.n	80030a6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1ce      	bne.n	8002f64 <HAL_SPI_Transmit+0x11c>
 8002fc6:	e04c      	b.n	8003062 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d002      	beq.n	8002fd6 <HAL_SPI_Transmit+0x18e>
 8002fd0:	8afb      	ldrh	r3, [r7, #22]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d140      	bne.n	8003058 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	330c      	adds	r3, #12
 8002fe0:	7812      	ldrb	r2, [r2, #0]
 8002fe2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	1c5a      	adds	r2, r3, #1
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002ffc:	e02c      	b.n	8003058 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b02      	cmp	r3, #2
 800300a:	d113      	bne.n	8003034 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	330c      	adds	r3, #12
 8003016:	7812      	ldrb	r2, [r2, #0]
 8003018:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	1c5a      	adds	r2, r3, #1
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003028:	b29b      	uxth	r3, r3
 800302a:	3b01      	subs	r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	86da      	strh	r2, [r3, #54]	; 0x36
 8003032:	e011      	b.n	8003058 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003034:	f7fe fd74 	bl	8001b20 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	429a      	cmp	r2, r3
 8003042:	d803      	bhi.n	800304c <HAL_SPI_Transmit+0x204>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304a:	d102      	bne.n	8003052 <HAL_SPI_Transmit+0x20a>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d102      	bne.n	8003058 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003056:	e026      	b.n	80030a6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800305c:	b29b      	uxth	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1cd      	bne.n	8002ffe <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	6839      	ldr	r1, [r7, #0]
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 f8b2 	bl	80031d0 <SPI_EndRxTxTransaction>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2220      	movs	r2, #32
 8003076:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10a      	bne.n	8003096 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003080:	2300      	movs	r3, #0
 8003082:	613b      	str	r3, [r7, #16]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	613b      	str	r3, [r7, #16]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	613b      	str	r3, [r7, #16]
 8003094:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309a:	2b00      	cmp	r3, #0
 800309c:	d002      	beq.n	80030a4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	77fb      	strb	r3, [r7, #31]
 80030a2:	e000      	b.n	80030a6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80030a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3720      	adds	r7, #32
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b088      	sub	sp, #32
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	603b      	str	r3, [r7, #0]
 80030cc:	4613      	mov	r3, r2
 80030ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030d0:	f7fe fd26 	bl	8001b20 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d8:	1a9b      	subs	r3, r3, r2
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	4413      	add	r3, r2
 80030de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80030e0:	f7fe fd1e 	bl	8001b20 <HAL_GetTick>
 80030e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80030e6:	4b39      	ldr	r3, [pc, #228]	; (80031cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	015b      	lsls	r3, r3, #5
 80030ec:	0d1b      	lsrs	r3, r3, #20
 80030ee:	69fa      	ldr	r2, [r7, #28]
 80030f0:	fb02 f303 	mul.w	r3, r2, r3
 80030f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030f6:	e054      	b.n	80031a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fe:	d050      	beq.n	80031a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003100:	f7fe fd0e 	bl	8001b20 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	429a      	cmp	r2, r3
 800310e:	d902      	bls.n	8003116 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d13d      	bne.n	8003192 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003124:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800312e:	d111      	bne.n	8003154 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003138:	d004      	beq.n	8003144 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003142:	d107      	bne.n	8003154 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003152:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800315c:	d10f      	bne.n	800317e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800317c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e017      	b.n	80031c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	3b01      	subs	r3, #1
 80031a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4013      	ands	r3, r2
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	bf0c      	ite	eq
 80031b2:	2301      	moveq	r3, #1
 80031b4:	2300      	movne	r3, #0
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d19b      	bne.n	80030f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3720      	adds	r7, #32
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000f94 	.word	0x20000f94

080031d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af02      	add	r7, sp, #8
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2200      	movs	r2, #0
 80031e4:	2180      	movs	r1, #128	; 0x80
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f7ff ff6a 	bl	80030c0 <SPI_WaitFlagStateUntilTimeout>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d007      	beq.n	8003202 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f6:	f043 0220 	orr.w	r2, r3, #32
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e000      	b.n	8003204 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e041      	b.n	80032a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d106      	bne.n	8003238 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7fe fab2 	bl	800179c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3304      	adds	r3, #4
 8003248:	4619      	mov	r1, r3
 800324a:	4610      	mov	r0, r2
 800324c:	f000 fa70 	bl	8003730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d001      	beq.n	80032c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e03a      	b.n	800333a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0201 	orr.w	r2, r2, #1
 80032da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a18      	ldr	r2, [pc, #96]	; (8003344 <HAL_TIM_Base_Start_IT+0x98>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d00e      	beq.n	8003304 <HAL_TIM_Base_Start_IT+0x58>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ee:	d009      	beq.n	8003304 <HAL_TIM_Base_Start_IT+0x58>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a14      	ldr	r2, [pc, #80]	; (8003348 <HAL_TIM_Base_Start_IT+0x9c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d004      	beq.n	8003304 <HAL_TIM_Base_Start_IT+0x58>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a13      	ldr	r2, [pc, #76]	; (800334c <HAL_TIM_Base_Start_IT+0xa0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d111      	bne.n	8003328 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2b06      	cmp	r3, #6
 8003314:	d010      	beq.n	8003338 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f042 0201 	orr.w	r2, r2, #1
 8003324:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003326:	e007      	b.n	8003338 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr
 8003344:	40012c00 	.word	0x40012c00
 8003348:	40000400 	.word	0x40000400
 800334c:	40000800 	.word	0x40000800

08003350 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b02      	cmp	r3, #2
 8003364:	d122      	bne.n	80033ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b02      	cmp	r3, #2
 8003372:	d11b      	bne.n	80033ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f06f 0202 	mvn.w	r2, #2
 800337c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f9b1 	bl	80036fa <HAL_TIM_IC_CaptureCallback>
 8003398:	e005      	b.n	80033a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f9a4 	bl	80036e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f9b3 	bl	800370c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	f003 0304 	and.w	r3, r3, #4
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d122      	bne.n	8003400 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d11b      	bne.n	8003400 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f06f 0204 	mvn.w	r2, #4
 80033d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2202      	movs	r2, #2
 80033d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f987 	bl	80036fa <HAL_TIM_IC_CaptureCallback>
 80033ec:	e005      	b.n	80033fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f97a 	bl	80036e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 f989 	bl	800370c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b08      	cmp	r3, #8
 800340c:	d122      	bne.n	8003454 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b08      	cmp	r3, #8
 800341a:	d11b      	bne.n	8003454 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f06f 0208 	mvn.w	r2, #8
 8003424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2204      	movs	r2, #4
 800342a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f95d 	bl	80036fa <HAL_TIM_IC_CaptureCallback>
 8003440:	e005      	b.n	800344e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f950 	bl	80036e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f95f 	bl	800370c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	f003 0310 	and.w	r3, r3, #16
 800345e:	2b10      	cmp	r3, #16
 8003460:	d122      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f003 0310 	and.w	r3, r3, #16
 800346c:	2b10      	cmp	r3, #16
 800346e:	d11b      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f06f 0210 	mvn.w	r2, #16
 8003478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2208      	movs	r2, #8
 800347e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f933 	bl	80036fa <HAL_TIM_IC_CaptureCallback>
 8003494:	e005      	b.n	80034a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f926 	bl	80036e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f935 	bl	800370c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d10e      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d107      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f06f 0201 	mvn.w	r2, #1
 80034cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fd f8d2 	bl	8000678 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034de:	2b80      	cmp	r3, #128	; 0x80
 80034e0:	d10e      	bne.n	8003500 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ec:	2b80      	cmp	r3, #128	; 0x80
 80034ee:	d107      	bne.n	8003500 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 fa77 	bl	80039ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350a:	2b40      	cmp	r3, #64	; 0x40
 800350c:	d10e      	bne.n	800352c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003518:	2b40      	cmp	r3, #64	; 0x40
 800351a:	d107      	bne.n	800352c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f8f9 	bl	800371e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	f003 0320 	and.w	r3, r3, #32
 8003536:	2b20      	cmp	r3, #32
 8003538:	d10e      	bne.n	8003558 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f003 0320 	and.w	r3, r3, #32
 8003544:	2b20      	cmp	r3, #32
 8003546:	d107      	bne.n	8003558 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f06f 0220 	mvn.w	r2, #32
 8003550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 fa42 	bl	80039dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003558:	bf00      	nop
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003570:	2b01      	cmp	r3, #1
 8003572:	d101      	bne.n	8003578 <HAL_TIM_ConfigClockSource+0x18>
 8003574:	2302      	movs	r3, #2
 8003576:	e0b3      	b.n	80036e0 <HAL_TIM_ConfigClockSource+0x180>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003596:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800359e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035b0:	d03e      	beq.n	8003630 <HAL_TIM_ConfigClockSource+0xd0>
 80035b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035b6:	f200 8087 	bhi.w	80036c8 <HAL_TIM_ConfigClockSource+0x168>
 80035ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035be:	f000 8085 	beq.w	80036cc <HAL_TIM_ConfigClockSource+0x16c>
 80035c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c6:	d87f      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x168>
 80035c8:	2b70      	cmp	r3, #112	; 0x70
 80035ca:	d01a      	beq.n	8003602 <HAL_TIM_ConfigClockSource+0xa2>
 80035cc:	2b70      	cmp	r3, #112	; 0x70
 80035ce:	d87b      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x168>
 80035d0:	2b60      	cmp	r3, #96	; 0x60
 80035d2:	d050      	beq.n	8003676 <HAL_TIM_ConfigClockSource+0x116>
 80035d4:	2b60      	cmp	r3, #96	; 0x60
 80035d6:	d877      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x168>
 80035d8:	2b50      	cmp	r3, #80	; 0x50
 80035da:	d03c      	beq.n	8003656 <HAL_TIM_ConfigClockSource+0xf6>
 80035dc:	2b50      	cmp	r3, #80	; 0x50
 80035de:	d873      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x168>
 80035e0:	2b40      	cmp	r3, #64	; 0x40
 80035e2:	d058      	beq.n	8003696 <HAL_TIM_ConfigClockSource+0x136>
 80035e4:	2b40      	cmp	r3, #64	; 0x40
 80035e6:	d86f      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x168>
 80035e8:	2b30      	cmp	r3, #48	; 0x30
 80035ea:	d064      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0x156>
 80035ec:	2b30      	cmp	r3, #48	; 0x30
 80035ee:	d86b      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x168>
 80035f0:	2b20      	cmp	r3, #32
 80035f2:	d060      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0x156>
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	d867      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x168>
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d05c      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0x156>
 80035fc:	2b10      	cmp	r3, #16
 80035fe:	d05a      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003600:	e062      	b.n	80036c8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	6899      	ldr	r1, [r3, #8]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f000 f966 	bl	80038e2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003624:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	609a      	str	r2, [r3, #8]
      break;
 800362e:	e04e      	b.n	80036ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6818      	ldr	r0, [r3, #0]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	6899      	ldr	r1, [r3, #8]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f000 f94f 	bl	80038e2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003652:	609a      	str	r2, [r3, #8]
      break;
 8003654:	e03b      	b.n	80036ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	6859      	ldr	r1, [r3, #4]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	461a      	mov	r2, r3
 8003664:	f000 f8c6 	bl	80037f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2150      	movs	r1, #80	; 0x50
 800366e:	4618      	mov	r0, r3
 8003670:	f000 f91d 	bl	80038ae <TIM_ITRx_SetConfig>
      break;
 8003674:	e02b      	b.n	80036ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6818      	ldr	r0, [r3, #0]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	6859      	ldr	r1, [r3, #4]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	461a      	mov	r2, r3
 8003684:	f000 f8e4 	bl	8003850 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2160      	movs	r1, #96	; 0x60
 800368e:	4618      	mov	r0, r3
 8003690:	f000 f90d 	bl	80038ae <TIM_ITRx_SetConfig>
      break;
 8003694:	e01b      	b.n	80036ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6818      	ldr	r0, [r3, #0]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	6859      	ldr	r1, [r3, #4]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	461a      	mov	r2, r3
 80036a4:	f000 f8a6 	bl	80037f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2140      	movs	r1, #64	; 0x40
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 f8fd 	bl	80038ae <TIM_ITRx_SetConfig>
      break;
 80036b4:	e00b      	b.n	80036ce <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4619      	mov	r1, r3
 80036c0:	4610      	mov	r0, r2
 80036c2:	f000 f8f4 	bl	80038ae <TIM_ITRx_SetConfig>
        break;
 80036c6:	e002      	b.n	80036ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80036c8:	bf00      	nop
 80036ca:	e000      	b.n	80036ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80036cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bc80      	pop	{r7}
 80036f8:	4770      	bx	lr

080036fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr

0800370c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	bc80      	pop	{r7}
 800371c:	4770      	bx	lr

0800371e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr

08003730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a29      	ldr	r2, [pc, #164]	; (80037e8 <TIM_Base_SetConfig+0xb8>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d00b      	beq.n	8003760 <TIM_Base_SetConfig+0x30>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800374e:	d007      	beq.n	8003760 <TIM_Base_SetConfig+0x30>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a26      	ldr	r2, [pc, #152]	; (80037ec <TIM_Base_SetConfig+0xbc>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d003      	beq.n	8003760 <TIM_Base_SetConfig+0x30>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a25      	ldr	r2, [pc, #148]	; (80037f0 <TIM_Base_SetConfig+0xc0>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d108      	bne.n	8003772 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003766:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a1c      	ldr	r2, [pc, #112]	; (80037e8 <TIM_Base_SetConfig+0xb8>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00b      	beq.n	8003792 <TIM_Base_SetConfig+0x62>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003780:	d007      	beq.n	8003792 <TIM_Base_SetConfig+0x62>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a19      	ldr	r2, [pc, #100]	; (80037ec <TIM_Base_SetConfig+0xbc>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d003      	beq.n	8003792 <TIM_Base_SetConfig+0x62>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a18      	ldr	r2, [pc, #96]	; (80037f0 <TIM_Base_SetConfig+0xc0>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d108      	bne.n	80037a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a07      	ldr	r2, [pc, #28]	; (80037e8 <TIM_Base_SetConfig+0xb8>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d103      	bne.n	80037d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	691a      	ldr	r2, [r3, #16]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	615a      	str	r2, [r3, #20]
}
 80037de:	bf00      	nop
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bc80      	pop	{r7}
 80037e6:	4770      	bx	lr
 80037e8:	40012c00 	.word	0x40012c00
 80037ec:	40000400 	.word	0x40000400
 80037f0:	40000800 	.word	0x40000800

080037f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b087      	sub	sp, #28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	f023 0201 	bic.w	r2, r3, #1
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800381e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4313      	orrs	r3, r2
 8003828:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f023 030a 	bic.w	r3, r3, #10
 8003830:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	4313      	orrs	r3, r2
 8003838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	621a      	str	r2, [r3, #32]
}
 8003846:	bf00      	nop
 8003848:	371c      	adds	r7, #28
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr

08003850 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003850:	b480      	push	{r7}
 8003852:	b087      	sub	sp, #28
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	f023 0210 	bic.w	r2, r3, #16
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800387a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	031b      	lsls	r3, r3, #12
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	4313      	orrs	r3, r2
 8003884:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800388c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	621a      	str	r2, [r3, #32]
}
 80038a4:	bf00      	nop
 80038a6:	371c      	adds	r7, #28
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bc80      	pop	{r7}
 80038ac:	4770      	bx	lr

080038ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b085      	sub	sp, #20
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
 80038b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f043 0307 	orr.w	r3, r3, #7
 80038d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	609a      	str	r2, [r3, #8]
}
 80038d8:	bf00      	nop
 80038da:	3714      	adds	r7, #20
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr

080038e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b087      	sub	sp, #28
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	60f8      	str	r0, [r7, #12]
 80038ea:	60b9      	str	r1, [r7, #8]
 80038ec:	607a      	str	r2, [r7, #4]
 80038ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	021a      	lsls	r2, r3, #8
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	431a      	orrs	r2, r3
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	4313      	orrs	r3, r2
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	4313      	orrs	r3, r2
 800390e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	609a      	str	r2, [r3, #8]
}
 8003916:	bf00      	nop
 8003918:	371c      	adds	r7, #28
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr

08003920 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003934:	2302      	movs	r3, #2
 8003936:	e046      	b.n	80039c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2202      	movs	r2, #2
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800395e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	4313      	orrs	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a16      	ldr	r2, [pc, #88]	; (80039d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d00e      	beq.n	800399a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003984:	d009      	beq.n	800399a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a12      	ldr	r2, [pc, #72]	; (80039d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d004      	beq.n	800399a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a10      	ldr	r2, [pc, #64]	; (80039d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d10c      	bne.n	80039b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr
 80039d0:	40012c00 	.word	0x40012c00
 80039d4:	40000400 	.word	0x40000400
 80039d8:	40000800 	.word	0x40000800

080039dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr

080039ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr

08003a00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e03f      	b.n	8003a92 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d106      	bne.n	8003a2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7fd fede 	bl	80017e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2224      	movs	r2, #36	; 0x24
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 fa9f 	bl	8003f88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	691a      	ldr	r2, [r3, #16]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	695a      	ldr	r2, [r3, #20]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68da      	ldr	r2, [r3, #12]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b08a      	sub	sp, #40	; 0x28
 8003a9e:	af02      	add	r7, sp, #8
 8003aa0:	60f8      	str	r0, [r7, #12]
 8003aa2:	60b9      	str	r1, [r7, #8]
 8003aa4:	603b      	str	r3, [r7, #0]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b20      	cmp	r3, #32
 8003ab8:	d17c      	bne.n	8003bb4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <HAL_UART_Transmit+0x2c>
 8003ac0:	88fb      	ldrh	r3, [r7, #6]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e075      	b.n	8003bb6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_UART_Transmit+0x3e>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e06e      	b.n	8003bb6 <HAL_UART_Transmit+0x11c>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2221      	movs	r2, #33	; 0x21
 8003aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003aee:	f7fe f817 	bl	8001b20 <HAL_GetTick>
 8003af2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	88fa      	ldrh	r2, [r7, #6]
 8003af8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	88fa      	ldrh	r2, [r7, #6]
 8003afe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b08:	d108      	bne.n	8003b1c <HAL_UART_Transmit+0x82>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d104      	bne.n	8003b1c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b12:	2300      	movs	r3, #0
 8003b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	61bb      	str	r3, [r7, #24]
 8003b1a:	e003      	b.n	8003b24 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b20:	2300      	movs	r3, #0
 8003b22:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b2c:	e02a      	b.n	8003b84 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2200      	movs	r2, #0
 8003b36:	2180      	movs	r1, #128	; 0x80
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 f934 	bl	8003da6 <UART_WaitOnFlagUntilTimeout>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e036      	b.n	8003bb6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10b      	bne.n	8003b66 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	881b      	ldrh	r3, [r3, #0]
 8003b52:	461a      	mov	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	3302      	adds	r3, #2
 8003b62:	61bb      	str	r3, [r7, #24]
 8003b64:	e007      	b.n	8003b76 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	781a      	ldrb	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	3301      	adds	r3, #1
 8003b74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1cf      	bne.n	8003b2e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2200      	movs	r2, #0
 8003b96:	2140      	movs	r1, #64	; 0x40
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 f904 	bl	8003da6 <UART_WaitOnFlagUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e006      	b.n	8003bb6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	e000      	b.n	8003bb6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003bb4:	2302      	movs	r3, #2
  }
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3720      	adds	r7, #32
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b084      	sub	sp, #16
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	60f8      	str	r0, [r7, #12]
 8003bc6:	60b9      	str	r1, [r7, #8]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b20      	cmp	r3, #32
 8003bd6:	d11d      	bne.n	8003c14 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d002      	beq.n	8003be4 <HAL_UART_Receive_DMA+0x26>
 8003bde:	88fb      	ldrh	r3, [r7, #6]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e016      	b.n	8003c16 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <HAL_UART_Receive_DMA+0x38>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e00f      	b.n	8003c16 <HAL_UART_Receive_DMA+0x58>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8003c04:	88fb      	ldrh	r3, [r7, #6]
 8003c06:	461a      	mov	r2, r3
 8003c08:	68b9      	ldr	r1, [r7, #8]
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 f916 	bl	8003e3c <UART_Start_Receive_DMA>
 8003c10:	4603      	mov	r3, r0
 8003c12:	e000      	b.n	8003c16 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003c14:	2302      	movs	r3, #2
  }
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr

08003c30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	460b      	mov	r3, r1
 8003c3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bc80      	pop	{r7}
 8003c44:	4770      	bx	lr

08003c46 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b084      	sub	sp, #16
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d12a      	bne.n	8003cb8 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c76:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695a      	ldr	r2, [r3, #20]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0201 	bic.w	r2, r2, #1
 8003c86:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	695a      	ldr	r2, [r3, #20]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c96:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d107      	bne.n	8003cb8 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0210 	bic.w	r2, r2, #16
 8003cb6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d106      	bne.n	8003cce <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f7ff ffb2 	bl	8003c30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ccc:	e002      	b.n	8003cd4 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f7fc fd02 	bl	80006d8 <HAL_UART_RxCpltCallback>
}
 8003cd4:	bf00      	nop
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d108      	bne.n	8003d04 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cf6:	085b      	lsrs	r3, r3, #1
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f7ff ff97 	bl	8003c30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d02:	e002      	b.n	8003d0a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f7fc fccf 	bl	80006a8 <HAL_UART_RxHalfCpltCallback>
}
 8003d0a:	bf00      	nop
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b084      	sub	sp, #16
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	bf14      	ite	ne
 8003d32:	2301      	movne	r3, #1
 8003d34:	2300      	moveq	r3, #0
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b21      	cmp	r3, #33	; 0x21
 8003d44:	d108      	bne.n	8003d58 <UART_DMAError+0x46>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d005      	beq.n	8003d58 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003d52:	68b8      	ldr	r0, [r7, #8]
 8003d54:	f000 f8d6 	bl	8003f04 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	bf14      	ite	ne
 8003d66:	2301      	movne	r3, #1
 8003d68:	2300      	moveq	r3, #0
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b22      	cmp	r3, #34	; 0x22
 8003d78:	d108      	bne.n	8003d8c <UART_DMAError+0x7a>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	2200      	movs	r2, #0
 8003d84:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003d86:	68b8      	ldr	r0, [r7, #8]
 8003d88:	f000 f8d1 	bl	8003f2e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	f043 0210 	orr.w	r2, r3, #16
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d98:	68b8      	ldr	r0, [r7, #8]
 8003d9a:	f7ff ff40 	bl	8003c1e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d9e:	bf00      	nop
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b084      	sub	sp, #16
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	60f8      	str	r0, [r7, #12]
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	603b      	str	r3, [r7, #0]
 8003db2:	4613      	mov	r3, r2
 8003db4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003db6:	e02c      	b.n	8003e12 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dbe:	d028      	beq.n	8003e12 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d007      	beq.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003dc6:	f7fd feab 	bl	8001b20 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d21d      	bcs.n	8003e12 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68da      	ldr	r2, [r3, #12]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003de4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695a      	ldr	r2, [r3, #20]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0201 	bic.w	r2, r2, #1
 8003df4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e00f      	b.n	8003e32 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	bf0c      	ite	eq
 8003e22:	2301      	moveq	r3, #1
 8003e24:	2300      	movne	r3, #0
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	461a      	mov	r2, r3
 8003e2a:	79fb      	ldrb	r3, [r7, #7]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d0c3      	beq.n	8003db8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
	...

08003e3c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	4613      	mov	r3, r2
 8003e48:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	88fa      	ldrh	r2, [r7, #6]
 8003e54:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2222      	movs	r2, #34	; 0x22
 8003e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	4a23      	ldr	r2, [pc, #140]	; (8003ef8 <UART_Start_Receive_DMA+0xbc>)
 8003e6a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e70:	4a22      	ldr	r2, [pc, #136]	; (8003efc <UART_Start_Receive_DMA+0xc0>)
 8003e72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e78:	4a21      	ldr	r2, [pc, #132]	; (8003f00 <UART_Start_Receive_DMA+0xc4>)
 8003e7a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e80:	2200      	movs	r2, #0
 8003e82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003e84:	f107 0308 	add.w	r3, r7, #8
 8003e88:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	3304      	adds	r3, #4
 8003e94:	4619      	mov	r1, r3
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	88fb      	ldrh	r3, [r7, #6]
 8003e9c:	f7fd ffd6 	bl	8001e4c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	613b      	str	r3, [r7, #16]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	613b      	str	r3, [r7, #16]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68da      	ldr	r2, [r3, #12]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ecc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695a      	ldr	r2, [r3, #20]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f042 0201 	orr.w	r2, r2, #1
 8003edc:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695a      	ldr	r2, [r3, #20]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eec:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	08003c47 	.word	0x08003c47
 8003efc:	08003cdd 	.word	0x08003cdd
 8003f00:	08003d13 	.word	0x08003d13

08003f04 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003f1a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bc80      	pop	{r7}
 8003f2c:	4770      	bx	lr

08003f2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b083      	sub	sp, #12
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68da      	ldr	r2, [r3, #12]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f44:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	695a      	ldr	r2, [r3, #20]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0201 	bic.w	r2, r2, #1
 8003f54:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d107      	bne.n	8003f6e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 0210 	bic.w	r2, r2, #16
 8003f6c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2220      	movs	r2, #32
 8003f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bc80      	pop	{r7}
 8003f84:	4770      	bx	lr
	...

08003f88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003fc2:	f023 030c 	bic.w	r3, r3, #12
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6812      	ldr	r2, [r2, #0]
 8003fca:	68b9      	ldr	r1, [r7, #8]
 8003fcc:	430b      	orrs	r3, r1
 8003fce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699a      	ldr	r2, [r3, #24]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a2c      	ldr	r2, [pc, #176]	; (800409c <UART_SetConfig+0x114>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d103      	bne.n	8003ff8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ff0:	f7fe fe74 	bl	8002cdc <HAL_RCC_GetPCLK2Freq>
 8003ff4:	60f8      	str	r0, [r7, #12]
 8003ff6:	e002      	b.n	8003ffe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ff8:	f7fe fe5c 	bl	8002cb4 <HAL_RCC_GetPCLK1Freq>
 8003ffc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	4613      	mov	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	009a      	lsls	r2, r3, #2
 8004008:	441a      	add	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	fbb2 f3f3 	udiv	r3, r2, r3
 8004014:	4a22      	ldr	r2, [pc, #136]	; (80040a0 <UART_SetConfig+0x118>)
 8004016:	fba2 2303 	umull	r2, r3, r2, r3
 800401a:	095b      	lsrs	r3, r3, #5
 800401c:	0119      	lsls	r1, r3, #4
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	4613      	mov	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	009a      	lsls	r2, r3, #2
 8004028:	441a      	add	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	fbb2 f2f3 	udiv	r2, r2, r3
 8004034:	4b1a      	ldr	r3, [pc, #104]	; (80040a0 <UART_SetConfig+0x118>)
 8004036:	fba3 0302 	umull	r0, r3, r3, r2
 800403a:	095b      	lsrs	r3, r3, #5
 800403c:	2064      	movs	r0, #100	; 0x64
 800403e:	fb00 f303 	mul.w	r3, r0, r3
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	011b      	lsls	r3, r3, #4
 8004046:	3332      	adds	r3, #50	; 0x32
 8004048:	4a15      	ldr	r2, [pc, #84]	; (80040a0 <UART_SetConfig+0x118>)
 800404a:	fba2 2303 	umull	r2, r3, r2, r3
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004054:	4419      	add	r1, r3
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	4613      	mov	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4413      	add	r3, r2
 800405e:	009a      	lsls	r2, r3, #2
 8004060:	441a      	add	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	fbb2 f2f3 	udiv	r2, r2, r3
 800406c:	4b0c      	ldr	r3, [pc, #48]	; (80040a0 <UART_SetConfig+0x118>)
 800406e:	fba3 0302 	umull	r0, r3, r3, r2
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	2064      	movs	r0, #100	; 0x64
 8004076:	fb00 f303 	mul.w	r3, r0, r3
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	3332      	adds	r3, #50	; 0x32
 8004080:	4a07      	ldr	r2, [pc, #28]	; (80040a0 <UART_SetConfig+0x118>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	f003 020f 	and.w	r2, r3, #15
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	440a      	add	r2, r1
 8004092:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004094:	bf00      	nop
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40013800 	.word	0x40013800
 80040a0:	51eb851f 	.word	0x51eb851f

080040a4 <Commander_Init>:


#include "commander.h"
#include <string.h>

void Commander_Init(Commander_HandleTypeDef *hcommander, UART_HandleTypeDef *huart, DMA_HandleTypeDef *hdma_uart_rx, void (*incoming_callback)(void)) {
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
 80040b0:	603b      	str	r3, [r7, #0]
	hcommander->huart = huart;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	601a      	str	r2, [r3, #0]
	hcommander->hdma_uart_rx = hdma_uart_rx;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	605a      	str	r2, [r3, #4]
	hcommander->tick_send = 0;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
	hcommander->awaiting_response = 0;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
	hcommander->command_to_process = 0;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
	hcommander->incoming_callback = incoming_callback;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
}
 80040de:	bf00      	nop
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr

080040e8 <Commander_Start>:

void Commander_Start(Commander_HandleTypeDef *hcommander) {
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(hcommander->huart, hcommander->uart_rx_buffer, COMMAND_BYTESIZE * 2);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6818      	ldr	r0, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3308      	adds	r3, #8
 80040f8:	f240 2206 	movw	r2, #518	; 0x206
 80040fc:	4619      	mov	r1, r3
 80040fe:	f7ff fd5e 	bl	8003bbe <HAL_UART_Receive_DMA>
}
 8004102:	bf00      	nop
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <Commander_SendAndWait>:

void Commander_Resume(Commander_HandleTypeDef *hcommander) {
	HAL_UART_DMAResume(hcommander->huart);
}

uint8_t Commander_SendAndWait(Commander_HandleTypeDef *hcommander) {
 800410a:	b580      	push	{r7, lr}
 800410c:	b084      	sub	sp, #16
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef status;

	hcommander->tick_send = HAL_GetTick();
 8004112:	f7fd fd05 	bl	8001b20 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
	hcommander->awaiting_response = 1;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

	status = HAL_UART_Transmit(hcommander->huart, (uint8_t *)&(hcommander->out_command), COMMAND_BYTESIZE, 1000);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6818      	ldr	r0, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f503 7145 	add.w	r1, r3, #788	; 0x314
 8004130:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004134:	f240 1203 	movw	r2, #259	; 0x103
 8004138:	f7ff fcaf 	bl	8003a9a <HAL_UART_Transmit>
 800413c:	4603      	mov	r3, r0
 800413e:	73fb      	strb	r3, [r7, #15]

	if (status == HAL_OK) {
 8004140:	7bfb      	ldrb	r3, [r7, #15]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10c      	bne.n	8004160 <Commander_SendAndWait+0x56>

		// active wait
		while (hcommander->awaiting_response /*&& HAL_GetTick() < hcommander->tick_send + TIMEOUT*/);
 8004146:	bf00      	nop
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1fa      	bne.n	8004148 <Commander_SendAndWait+0x3e>

		if (hcommander->awaiting_response == 0) {
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <Commander_SendAndWait+0x56>
			return 1;
 800415c:	2301      	movs	r3, #1
 800415e:	e004      	b.n	800416a <Commander_SendAndWait+0x60>
		}
	}

	hcommander->awaiting_response = 0;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
	return 0; // transmission error
 8004168:	2300      	movs	r3, #0

}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <Menu_Init>:

#include "menu.h"
#include <string.h>
#include <stdio.h>

void Menu_Init(Menu_HandleTypeDef *hm, Commander_HandleTypeDef *hcommander, EPD_HandleTypeDef *hepd) {
 8004172:	b580      	push	{r7, lr}
 8004174:	b084      	sub	sp, #16
 8004176:	af00      	add	r7, sp, #0
 8004178:	60f8      	str	r0, [r7, #12]
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	607a      	str	r2, [r7, #4]
	hm->selected_page = OVERVIEW;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	701a      	strb	r2, [r3, #0]
	hm->hcommander = hcommander;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	f8c3 2674 	str.w	r2, [r3, #1652]	; 0x674
	hm->hepd = hepd;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	f8c3 2678 	str.w	r2, [r3, #1656]	; 0x678

	hm->plot_xscale = 1;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 267c 	strb.w	r2, [r3, #1660]	; 0x67c
	hm->plot_yscale = 1;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 267d 	strb.w	r2, [r3, #1661]	; 0x67d
	hm->edit_index1 = 0;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 267e 	strb.w	r2, [r3, #1662]	; 0x67e
	hm->edit_index2 = 0;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 267f 	strb.w	r2, [r3, #1663]	; 0x67f
	hm->edit_active = 0;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2680 	strb.w	r2, [r3, #1664]	; 0x680
	hm->usb_ready = 0;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 2683 	strb.w	r2, [r3, #1667]	; 0x683
	hm->usb_selected = 0;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
	hm->tick = 0;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688

	hm->debug = 0;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
	hm->mode_active = 0;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2681 	strb.w	r2, [r3, #1665]	; 0x681
	hm->mode_selected = 0;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2682 	strb.w	r2, [r3, #1666]	; 0x682
	Mode_Manifest_Init(hm->mode_manifest);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fc82 	bl	8004afc <Mode_Manifest_Init>
	Pedal_Manifest_Init(hm->pedal_manifest);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f503 7365 	add.w	r3, r3, #916	; 0x394
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fcee 	bl	8004be0 <Pedal_Manifest_Init>
}
 8004204:	bf00      	nop
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <Menu_GoTo>:

uint8_t Menu_GoTo(Menu_HandleTypeDef *hm, enum page_types new_page) {
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	460b      	mov	r3, r1
 8004216:	70fb      	strb	r3, [r7, #3]
	if (hm->selected_page != new_page) {
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	78fa      	ldrb	r2, [r7, #3]
 800421e:	429a      	cmp	r2, r3
 8004220:	d00a      	beq.n	8004238 <Menu_GoTo+0x2c>
		hm->selected_page = new_page;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	78fa      	ldrb	r2, [r7, #3]
 8004226:	701a      	strb	r2, [r3, #0]
		hm->tick = HAL_GetTick();
 8004228:	f7fd fc7a 	bl	8001b20 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
		return 1;
 8004234:	2301      	movs	r3, #1
 8004236:	e000      	b.n	800423a <Menu_GoTo+0x2e>
	} else {
		return 0;
 8004238:	2300      	movs	r3, #0
	}
}
 800423a:	4618      	mov	r0, r3
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <Menu_RetrieveData>:

void Menu_RetrieveData(Menu_HandleTypeDef *hm, enum message_types type) {
 8004242:	b580      	push	{r7, lr}
 8004244:	b084      	sub	sp, #16
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	460b      	mov	r3, r1
 800424c:	70fb      	strb	r3, [r7, #3]

	Command *out_command = &(hm->hcommander->out_command);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 8004254:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8004258:	60bb      	str	r3, [r7, #8]

	out_command->header = hm->selected_page;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	781a      	ldrb	r2, [r3, #0]
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	701a      	strb	r2, [r3, #0]
	out_command->subheader = type;
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	78fa      	ldrb	r2, [r7, #3]
 8004266:	705a      	strb	r2, [r3, #1]

	if (hm->selected_page == OVERVIEW) {
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d126      	bne.n	80042be <Menu_RetrieveData+0x7c>

		if (type == FIRST) {
 8004270:	78fb      	ldrb	r3, [r7, #3]
 8004272:	2b00      	cmp	r3, #0
 8004274:	f040 812a 	bne.w	80044cc <Menu_RetrieveData+0x28a>
			for (uint8_t i = 0; i < MAX_PEDALS_COUNT; i++) {
 8004278:	2300      	movs	r3, #0
 800427a:	73fb      	strb	r3, [r7, #15]
 800427c:	e01b      	b.n	80042b6 <Menu_RetrieveData+0x74>
				out_command->param = i;
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	7bfa      	ldrb	r2, [r7, #15]
 8004282:	709a      	strb	r2, [r3, #2]
				Commander_SendAndWait(hm->hcommander);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 800428a:	4618      	mov	r0, r3
 800428c:	f7ff ff3d 	bl	800410a <Commander_SendAndWait>
				memcpy(hm->pedals[i].pedal_raw, hm->hcommander->in_command.payload.bytes, RAW_PEDAL_SIZE);
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	2298      	movs	r2, #152	; 0x98
 8004294:	fb02 f303 	mul.w	r3, r2, r3
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	4413      	add	r3, r2
 800429c:	1d18      	adds	r0, r3, #4
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 80042a4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80042a8:	2291      	movs	r2, #145	; 0x91
 80042aa:	4619      	mov	r1, r3
 80042ac:	f000 fd8e 	bl	8004dcc <memcpy>
			for (uint8_t i = 0; i < MAX_PEDALS_COUNT; i++) {
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
 80042b2:	3301      	adds	r3, #1
 80042b4:	73fb      	strb	r3, [r7, #15]
 80042b6:	7bfb      	ldrb	r3, [r7, #15]
 80042b8:	2b05      	cmp	r3, #5
 80042ba:	d9e0      	bls.n	800427e <Menu_RetrieveData+0x3c>
					memcpy(hm->pedals[i].pedal_raw, hm->hcommander->in_command.payload.bytes, RAW_PEDAL_SIZE);
				}
			}
		}
	}
}
 80042bc:	e106      	b.n	80044cc <Menu_RetrieveData+0x28a>
	} else if (hm->selected_page == PLOT) {
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d130      	bne.n	8004328 <Menu_RetrieveData+0xe6>
		if (type == FIRST || type == PERIODIC) {
 80042c6:	78fb      	ldrb	r3, [r7, #3]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <Menu_RetrieveData+0x92>
 80042cc:	78fb      	ldrb	r3, [r7, #3]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	f040 80fc 	bne.w	80044cc <Menu_RetrieveData+0x28a>
			out_command->payload.bytes[0] = hm->plot_xscale;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f893 267c 	ldrb.w	r2, [r3, #1660]	; 0x67c
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	711a      	strb	r2, [r3, #4]
			out_command->payload.bytes[1] = hm->plot_yscale;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 267d 	ldrb.w	r2, [r3, #1661]	; 0x67d
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	715a      	strb	r2, [r3, #5]
			Commander_SendAndWait(hm->hcommander);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff ff0b 	bl	800410a <Commander_SendAndWait>
			memcpy(hm->signal_in, hm->hcommander->in_command.payload.bytes, SIGNAL_SIZE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f203 5074 	addw	r0, r3, #1396	; 0x574
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 8004300:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004304:	2280      	movs	r2, #128	; 0x80
 8004306:	4619      	mov	r1, r3
 8004308:	f000 fd60 	bl	8004dcc <memcpy>
			memcpy(hm->signal_out, hm->hcommander->in_command.payload.bytes + SIGNAL_SIZE, SIGNAL_SIZE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f203 50f4 	addw	r0, r3, #1524	; 0x5f4
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 8004318:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800431c:	3380      	adds	r3, #128	; 0x80
 800431e:	2280      	movs	r2, #128	; 0x80
 8004320:	4619      	mov	r1, r3
 8004322:	f000 fd53 	bl	8004dcc <memcpy>
}
 8004326:	e0d1      	b.n	80044cc <Menu_RetrieveData+0x28a>
	} else if (hm->selected_page == EDIT) {
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b02      	cmp	r3, #2
 800432e:	d145      	bne.n	80043bc <Menu_RetrieveData+0x17a>
		if (type == FIRST) {
 8004330:	78fb      	ldrb	r3, [r7, #3]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d122      	bne.n	800437c <Menu_RetrieveData+0x13a>
			for (uint8_t i = 0; i < MAX_PEDALS_COUNT; i++) {
 8004336:	2300      	movs	r3, #0
 8004338:	73bb      	strb	r3, [r7, #14]
 800433a:	e01b      	b.n	8004374 <Menu_RetrieveData+0x132>
				out_command->param = i;
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	7bba      	ldrb	r2, [r7, #14]
 8004340:	709a      	strb	r2, [r3, #2]
				Commander_SendAndWait(hm->hcommander);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 8004348:	4618      	mov	r0, r3
 800434a:	f7ff fede 	bl	800410a <Commander_SendAndWait>
				memcpy(hm->pedals[i].pedal_raw, hm->hcommander->in_command.payload.bytes, RAW_PEDAL_SIZE);
 800434e:	7bbb      	ldrb	r3, [r7, #14]
 8004350:	2298      	movs	r2, #152	; 0x98
 8004352:	fb02 f303 	mul.w	r3, r2, r3
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	4413      	add	r3, r2
 800435a:	1d18      	adds	r0, r3, #4
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 8004362:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004366:	2291      	movs	r2, #145	; 0x91
 8004368:	4619      	mov	r1, r3
 800436a:	f000 fd2f 	bl	8004dcc <memcpy>
			for (uint8_t i = 0; i < MAX_PEDALS_COUNT; i++) {
 800436e:	7bbb      	ldrb	r3, [r7, #14]
 8004370:	3301      	adds	r3, #1
 8004372:	73bb      	strb	r3, [r7, #14]
 8004374:	7bbb      	ldrb	r3, [r7, #14]
 8004376:	2b05      	cmp	r3, #5
 8004378:	d9e0      	bls.n	800433c <Menu_RetrieveData+0xfa>
}
 800437a:	e0a7      	b.n	80044cc <Menu_RetrieveData+0x28a>
		} else if (type == USER) {
 800437c:	78fb      	ldrb	r3, [r7, #3]
 800437e:	2b02      	cmp	r3, #2
 8004380:	f040 80a4 	bne.w	80044cc <Menu_RetrieveData+0x28a>
			out_command->param = hm->edit_index2;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 267f 	ldrb.w	r2, [r3, #1663]	; 0x67f
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	709a      	strb	r2, [r3, #2]
			memcpy(out_command->payload.bytes, hm->pedals[hm->edit_index2].pedal_raw, RAW_PEDAL_SIZE);
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	1d18      	adds	r0, r3, #4
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 367f 	ldrb.w	r3, [r3, #1663]	; 0x67f
 8004398:	461a      	mov	r2, r3
 800439a:	2398      	movs	r3, #152	; 0x98
 800439c:	fb02 f303 	mul.w	r3, r2, r3
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	4413      	add	r3, r2
 80043a4:	3304      	adds	r3, #4
 80043a6:	2291      	movs	r2, #145	; 0x91
 80043a8:	4619      	mov	r1, r3
 80043aa:	f000 fd0f 	bl	8004dcc <memcpy>
			Commander_SendAndWait(hm->hcommander);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7ff fea8 	bl	800410a <Commander_SendAndWait>
}
 80043ba:	e087      	b.n	80044cc <Menu_RetrieveData+0x28a>
	} else if (hm->selected_page == MODE) {
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d118      	bne.n	80043f6 <Menu_RetrieveData+0x1b4>
		if (type == FIRST) {
 80043c4:	78fb      	ldrb	r3, [r7, #3]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d106      	bne.n	80043d8 <Menu_RetrieveData+0x196>
			Commander_SendAndWait(hm->hcommander);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff fe9a 	bl	800410a <Commander_SendAndWait>
}
 80043d6:	e079      	b.n	80044cc <Menu_RetrieveData+0x28a>
		} else if (type == USER) {
 80043d8:	78fb      	ldrb	r3, [r7, #3]
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d176      	bne.n	80044cc <Menu_RetrieveData+0x28a>
			out_command->param = hm->mode_selected;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 2682 	ldrb.w	r2, [r3, #1666]	; 0x682
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	709a      	strb	r2, [r3, #2]
			Commander_SendAndWait(hm->hcommander);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff fe8b 	bl	800410a <Commander_SendAndWait>
}
 80043f4:	e06a      	b.n	80044cc <Menu_RetrieveData+0x28a>
	} else if (hm->selected_page == TUNER) {
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d10c      	bne.n	8004418 <Menu_RetrieveData+0x1d6>
		if (type == FIRST || type == PERIODIC) {
 80043fe:	78fb      	ldrb	r3, [r7, #3]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d002      	beq.n	800440a <Menu_RetrieveData+0x1c8>
 8004404:	78fb      	ldrb	r3, [r7, #3]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d160      	bne.n	80044cc <Menu_RetrieveData+0x28a>
			Commander_SendAndWait(hm->hcommander);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff fe7a 	bl	800410a <Commander_SendAndWait>
}
 8004416:	e059      	b.n	80044cc <Menu_RetrieveData+0x28a>
	} else if (hm->selected_page == FILES) {
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	2b05      	cmp	r3, #5
 800441e:	d155      	bne.n	80044cc <Menu_RetrieveData+0x28a>
		if (type == FIRST || type == PERIODIC) {
 8004420:	78fb      	ldrb	r3, [r7, #3]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <Menu_RetrieveData+0x1ea>
 8004426:	78fb      	ldrb	r3, [r7, #3]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d10e      	bne.n	800444a <Menu_RetrieveData+0x208>
			Commander_SendAndWait(hm->hcommander);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff fe69 	bl	800410a <Commander_SendAndWait>
			hm->usb_ready = hm->hcommander->in_command.param;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 800443e:	f893 2212 	ldrb.w	r2, [r3, #530]	; 0x212
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f883 2683 	strb.w	r2, [r3, #1667]	; 0x683
}
 8004448:	e040      	b.n	80044cc <Menu_RetrieveData+0x28a>
		} else if (type == USER) {
 800444a:	78fb      	ldrb	r3, [r7, #3]
 800444c:	2b02      	cmp	r3, #2
 800444e:	d13d      	bne.n	80044cc <Menu_RetrieveData+0x28a>
			out_command->param = hm->usb_selected % 2;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 3684 	ldrb.w	r3, [r3, #1668]	; 0x684
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	b2da      	uxtb	r2, r3
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	709a      	strb	r2, [r3, #2]
			Commander_SendAndWait(hm->hcommander);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 8004466:	4618      	mov	r0, r3
 8004468:	f7ff fe4f 	bl	800410a <Commander_SendAndWait>
			if (hm->usb_selected % 2 == 0) {
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 3684 	ldrb.w	r3, [r3, #1668]	; 0x684
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b00      	cmp	r3, #0
 800447a:	d127      	bne.n	80044cc <Menu_RetrieveData+0x28a>
				out_command->header = OVERVIEW;
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	2200      	movs	r2, #0
 8004480:	701a      	strb	r2, [r3, #0]
				out_command->subheader = FIRST;
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2200      	movs	r2, #0
 8004486:	705a      	strb	r2, [r3, #1]
				for (uint8_t i = 0; i < MAX_PEDALS_COUNT; i++) {
 8004488:	2300      	movs	r3, #0
 800448a:	737b      	strb	r3, [r7, #13]
 800448c:	e01b      	b.n	80044c6 <Menu_RetrieveData+0x284>
					out_command->param = i;
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	7b7a      	ldrb	r2, [r7, #13]
 8004492:	709a      	strb	r2, [r3, #2]
					Commander_SendAndWait(hm->hcommander);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff fe35 	bl	800410a <Commander_SendAndWait>
					memcpy(hm->pedals[i].pedal_raw, hm->hcommander->in_command.payload.bytes, RAW_PEDAL_SIZE);
 80044a0:	7b7b      	ldrb	r3, [r7, #13]
 80044a2:	2298      	movs	r2, #152	; 0x98
 80044a4:	fb02 f303 	mul.w	r3, r2, r3
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	4413      	add	r3, r2
 80044ac:	1d18      	adds	r0, r3, #4
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
 80044b4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80044b8:	2291      	movs	r2, #145	; 0x91
 80044ba:	4619      	mov	r1, r3
 80044bc:	f000 fc86 	bl	8004dcc <memcpy>
				for (uint8_t i = 0; i < MAX_PEDALS_COUNT; i++) {
 80044c0:	7b7b      	ldrb	r3, [r7, #13]
 80044c2:	3301      	adds	r3, #1
 80044c4:	737b      	strb	r3, [r7, #13]
 80044c6:	7b7b      	ldrb	r3, [r7, #13]
 80044c8:	2b05      	cmp	r3, #5
 80044ca:	d9e0      	bls.n	800448e <Menu_RetrieveData+0x24c>
}
 80044cc:	bf00      	nop
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <Menu_Render>:

void Menu_Render(Menu_HandleTypeDef *hm, enum render_types render) {
 80044d4:	b590      	push	{r4, r7, lr}
 80044d6:	b091      	sub	sp, #68	; 0x44
 80044d8:	af02      	add	r7, sp, #8
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	460b      	mov	r3, r1
 80044de:	70fb      	strb	r3, [r7, #3]

	char row[20];
	uint8_t *image = hm->hepd->image;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 80044e6:	3302      	adds	r3, #2
 80044e8:	62bb      	str	r3, [r7, #40]	; 0x28
	Painter_Clean(image);
 80044ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044ec:	f7fc ffa0 	bl	8001430 <Painter_Clean>

	if (hm->selected_page == OVERVIEW) {
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f040 808d 	bne.w	8004614 <Menu_Render+0x140>

		// title
		Painter_WriteString(image, "overview", 20, 0, BOT_LEFT, LARGE);
 80044fa:	2302      	movs	r3, #2
 80044fc:	9301      	str	r3, [sp, #4]
 80044fe:	2302      	movs	r3, #2
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	2300      	movs	r3, #0
 8004504:	2214      	movs	r2, #20
 8004506:	49af      	ldr	r1, [pc, #700]	; (80047c4 <Menu_Render+0x2f0>)
 8004508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800450a:	f7fc feb4 	bl	8001276 <Painter_WriteString>
		uint8_t active_pedals = 0;
 800450e:	2300      	movs	r3, #0
 8004510:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		// content
		for (uint16_t i = 0; i < MAX_PEDALS_COUNT; i++) {
 8004514:	2300      	movs	r3, #0
 8004516:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004518:	e064      	b.n	80045e4 <Menu_Render+0x110>
			enum pedal_types t = hm->pedals[i].pedal_formatted.type;
 800451a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	2198      	movs	r1, #152	; 0x98
 8004520:	fb01 f303 	mul.w	r3, r1, r3
 8004524:	4413      	add	r3, r2
 8004526:	3304      	adds	r3, #4
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			uint16_t width = CANVAS_HEIGHT / MAX_PEDALS_COUNT;
 800452e:	2331      	movs	r3, #49	; 0x31
 8004530:	843b      	strh	r3, [r7, #32]
			if (t == BYPASS) {
 8004532:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004536:	2b02      	cmp	r3, #2
 8004538:	d118      	bne.n	800456c <Menu_Render+0x98>
				Painter_ToggleDottedRectangle(image, width * i + 4, 35, width * (i+1) - 4, 100, BOT_LEFT);
 800453a:	8c3b      	ldrh	r3, [r7, #32]
 800453c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800453e:	fb02 f303 	mul.w	r3, r2, r3
 8004542:	b29b      	uxth	r3, r3
 8004544:	3304      	adds	r3, #4
 8004546:	b299      	uxth	r1, r3
 8004548:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800454a:	3301      	adds	r3, #1
 800454c:	b29b      	uxth	r3, r3
 800454e:	8c3a      	ldrh	r2, [r7, #32]
 8004550:	fb02 f303 	mul.w	r3, r2, r3
 8004554:	b29b      	uxth	r3, r3
 8004556:	3b04      	subs	r3, #4
 8004558:	b29b      	uxth	r3, r3
 800455a:	2202      	movs	r2, #2
 800455c:	9201      	str	r2, [sp, #4]
 800455e:	2264      	movs	r2, #100	; 0x64
 8004560:	9200      	str	r2, [sp, #0]
 8004562:	2223      	movs	r2, #35	; 0x23
 8004564:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004566:	f7fc fe4d 	bl	8001204 <Painter_ToggleDottedRectangle>
 800456a:	e038      	b.n	80045de <Menu_Render+0x10a>
			} else {
				active_pedals++;
 800456c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004570:	3301      	adds	r3, #1
 8004572:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Painter_ToggleRectangle(image, width * i + 4, 35, width * (i+1) - 4, 100, BOT_LEFT);
 8004576:	8c3b      	ldrh	r3, [r7, #32]
 8004578:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800457a:	fb02 f303 	mul.w	r3, r2, r3
 800457e:	b29b      	uxth	r3, r3
 8004580:	3304      	adds	r3, #4
 8004582:	b299      	uxth	r1, r3
 8004584:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004586:	3301      	adds	r3, #1
 8004588:	b29b      	uxth	r3, r3
 800458a:	8c3a      	ldrh	r2, [r7, #32]
 800458c:	fb02 f303 	mul.w	r3, r2, r3
 8004590:	b29b      	uxth	r3, r3
 8004592:	3b04      	subs	r3, #4
 8004594:	b29b      	uxth	r3, r3
 8004596:	2202      	movs	r2, #2
 8004598:	9201      	str	r2, [sp, #4]
 800459a:	2264      	movs	r2, #100	; 0x64
 800459c:	9200      	str	r2, [sp, #0]
 800459e:	2223      	movs	r2, #35	; 0x23
 80045a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045a2:	f7fc fdfe 	bl	80011a2 <Painter_ToggleRectangle>
				Painter_WriteString(image, hm->pedal_manifest[t].short_name, 35, width * i + width / 2 - 9, BOT_RIGHT, LARGE);
 80045a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045aa:	015b      	lsls	r3, r3, #5
 80045ac:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	4413      	add	r3, r2
 80045b4:	1d19      	adds	r1, r3, #4
 80045b6:	8c3b      	ldrh	r3, [r7, #32]
 80045b8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80045ba:	fb02 f303 	mul.w	r3, r2, r3
 80045be:	b29a      	uxth	r2, r3
 80045c0:	8c3b      	ldrh	r3, [r7, #32]
 80045c2:	085b      	lsrs	r3, r3, #1
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	4413      	add	r3, r2
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	3b09      	subs	r3, #9
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	2202      	movs	r2, #2
 80045d0:	9201      	str	r2, [sp, #4]
 80045d2:	2203      	movs	r2, #3
 80045d4:	9200      	str	r2, [sp, #0]
 80045d6:	2223      	movs	r2, #35	; 0x23
 80045d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045da:	f7fc fe4c 	bl	8001276 <Painter_WriteString>
		for (uint16_t i = 0; i < MAX_PEDALS_COUNT; i++) {
 80045de:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80045e0:	3301      	adds	r3, #1
 80045e2:	86bb      	strh	r3, [r7, #52]	; 0x34
 80045e4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80045e6:	2b05      	cmp	r3, #5
 80045e8:	d997      	bls.n	800451a <Menu_Render+0x46>
			}
		}
		sprintf(row, "%d/%d", active_pedals, MAX_PEDALS_COUNT);
 80045ea:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80045ee:	f107 000c 	add.w	r0, r7, #12
 80045f2:	2306      	movs	r3, #6
 80045f4:	4974      	ldr	r1, [pc, #464]	; (80047c8 <Menu_Render+0x2f4>)
 80045f6:	f000 fbff 	bl	8004df8 <siprintf>
		Painter_WriteString(image, row, 260, 0, BOT_LEFT, SMALL);
 80045fa:	f107 010c 	add.w	r1, r7, #12
 80045fe:	2300      	movs	r3, #0
 8004600:	9301      	str	r3, [sp, #4]
 8004602:	2302      	movs	r3, #2
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	2300      	movs	r3, #0
 8004608:	f44f 7282 	mov.w	r2, #260	; 0x104
 800460c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800460e:	f7fc fe32 	bl	8001276 <Painter_WriteString>
 8004612:	e228      	b.n	8004a66 <Menu_Render+0x592>

	} else if (hm->selected_page == PLOT) {
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	2b01      	cmp	r3, #1
 800461a:	f040 8098 	bne.w	800474e <Menu_Render+0x27a>

		// title
		Painter_WriteString(image, "plot", 20, 0, BOT_LEFT, LARGE);
 800461e:	2302      	movs	r3, #2
 8004620:	9301      	str	r3, [sp, #4]
 8004622:	2302      	movs	r3, #2
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	2300      	movs	r3, #0
 8004628:	2214      	movs	r2, #20
 800462a:	4968      	ldr	r1, [pc, #416]	; (80047cc <Menu_Render+0x2f8>)
 800462c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800462e:	f7fc fe22 	bl	8001276 <Painter_WriteString>

		// commands
		sprintf(row, "y %d", hm->plot_yscale);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 367d 	ldrb.w	r3, [r3, #1661]	; 0x67d
 8004638:	461a      	mov	r2, r3
 800463a:	f107 030c 	add.w	r3, r7, #12
 800463e:	4964      	ldr	r1, [pc, #400]	; (80047d0 <Menu_Render+0x2fc>)
 8004640:	4618      	mov	r0, r3
 8004642:	f000 fbd9 	bl	8004df8 <siprintf>
		Painter_WriteString(image, row, 0, 36, BOT_LEFT, SMALL);
 8004646:	f107 010c 	add.w	r1, r7, #12
 800464a:	2300      	movs	r3, #0
 800464c:	9301      	str	r3, [sp, #4]
 800464e:	2302      	movs	r3, #2
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	2324      	movs	r3, #36	; 0x24
 8004654:	2200      	movs	r2, #0
 8004656:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004658:	f7fc fe0d 	bl	8001276 <Painter_WriteString>
		Painter_WriteString(image, ".", 8, 33, BOT_LEFT, SMALL);
 800465c:	2300      	movs	r3, #0
 800465e:	9301      	str	r3, [sp, #4]
 8004660:	2302      	movs	r3, #2
 8004662:	9300      	str	r3, [sp, #0]
 8004664:	2321      	movs	r3, #33	; 0x21
 8004666:	2208      	movs	r2, #8
 8004668:	495a      	ldr	r1, [pc, #360]	; (80047d4 <Menu_Render+0x300>)
 800466a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800466c:	f7fc fe03 	bl	8001276 <Painter_WriteString>
		sprintf(row, "x %d", hm->plot_xscale);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 367c 	ldrb.w	r3, [r3, #1660]	; 0x67c
 8004676:	461a      	mov	r2, r3
 8004678:	f107 030c 	add.w	r3, r7, #12
 800467c:	4956      	ldr	r1, [pc, #344]	; (80047d8 <Menu_Render+0x304>)
 800467e:	4618      	mov	r0, r3
 8004680:	f000 fbba 	bl	8004df8 <siprintf>
		Painter_WriteString(image, row, 0, 86, BOT_LEFT, SMALL);
 8004684:	f107 010c 	add.w	r1, r7, #12
 8004688:	2300      	movs	r3, #0
 800468a:	9301      	str	r3, [sp, #4]
 800468c:	2302      	movs	r3, #2
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	2356      	movs	r3, #86	; 0x56
 8004692:	2200      	movs	r2, #0
 8004694:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004696:	f7fc fdee 	bl	8001276 <Painter_WriteString>
		Painter_WriteString(image, ".", 8, 83, BOT_LEFT, SMALL);
 800469a:	2300      	movs	r3, #0
 800469c:	9301      	str	r3, [sp, #4]
 800469e:	2302      	movs	r3, #2
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	2353      	movs	r3, #83	; 0x53
 80046a4:	2208      	movs	r2, #8
 80046a6:	494b      	ldr	r1, [pc, #300]	; (80047d4 <Menu_Render+0x300>)
 80046a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046aa:	f7fc fde4 	bl	8001276 <Painter_WriteString>

		// content
		uint16_t x, y;
		for (uint8_t i = 0; i < SIGNAL_SIZE; i++) {
 80046ae:	2300      	movs	r3, #0
 80046b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046b4:	e03c      	b.n	8004730 <Menu_Render+0x25c>
			// IN
			x = (CANVAS_HEIGHT - 2 * SIGNAL_SIZE - 3) + i;
 80046b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	3325      	adds	r3, #37	; 0x25
 80046be:	b29b      	uxth	r3, r3
 80046c0:	817b      	strh	r3, [r7, #10]
			y = CANVAS_WIDTH / 2 + hm->signal_in[i] / 2;
 80046c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	4413      	add	r3, r2
 80046ca:	f993 3574 	ldrsb.w	r3, [r3, #1396]	; 0x574
 80046ce:	0fda      	lsrs	r2, r3, #31
 80046d0:	4413      	add	r3, r2
 80046d2:	105b      	asrs	r3, r3, #1
 80046d4:	b25b      	sxtb	r3, r3
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3340      	adds	r3, #64	; 0x40
 80046da:	b29b      	uxth	r3, r3
 80046dc:	813b      	strh	r3, [r7, #8]
			Painter_TogglePixel(image, &x, &y, BOT_LEFT);
 80046de:	f107 0208 	add.w	r2, r7, #8
 80046e2:	f107 010a 	add.w	r1, r7, #10
 80046e6:	2302      	movs	r3, #2
 80046e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046ea:	f7fc fcf9 	bl	80010e0 <Painter_TogglePixel>
			// OUT
			x = (CANVAS_HEIGHT - SIGNAL_SIZE) + i;
 80046ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	33a8      	adds	r3, #168	; 0xa8
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	817b      	strh	r3, [r7, #10]
			y = CANVAS_WIDTH / 2 + hm->signal_out[i] / 2;
 80046fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	4413      	add	r3, r2
 8004702:	f993 35f4 	ldrsb.w	r3, [r3, #1524]	; 0x5f4
 8004706:	0fda      	lsrs	r2, r3, #31
 8004708:	4413      	add	r3, r2
 800470a:	105b      	asrs	r3, r3, #1
 800470c:	b25b      	sxtb	r3, r3
 800470e:	b29b      	uxth	r3, r3
 8004710:	3340      	adds	r3, #64	; 0x40
 8004712:	b29b      	uxth	r3, r3
 8004714:	813b      	strh	r3, [r7, #8]
			Painter_TogglePixel(image, &x, &y, BOT_LEFT);
 8004716:	f107 0208 	add.w	r2, r7, #8
 800471a:	f107 010a 	add.w	r1, r7, #10
 800471e:	2302      	movs	r3, #2
 8004720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004722:	f7fc fcdd 	bl	80010e0 <Painter_TogglePixel>
		for (uint8_t i = 0; i < SIGNAL_SIZE; i++) {
 8004726:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800472a:	3301      	adds	r3, #1
 800472c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004730:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004734:	2b00      	cmp	r3, #0
 8004736:	dabe      	bge.n	80046b6 <Menu_Render+0x1e2>
		}
		Painter_ToggleDottedRectangle(image, CANVAS_HEIGHT - SIGNAL_SIZE - 2, 0, CANVAS_HEIGHT - SIGNAL_SIZE - 1, CANVAS_WIDTH, BOT_LEFT);
 8004738:	2302      	movs	r3, #2
 800473a:	9301      	str	r3, [sp, #4]
 800473c:	2380      	movs	r3, #128	; 0x80
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	23a7      	movs	r3, #167	; 0xa7
 8004742:	2200      	movs	r2, #0
 8004744:	21a6      	movs	r1, #166	; 0xa6
 8004746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004748:	f7fc fd5c 	bl	8001204 <Painter_ToggleDottedRectangle>
 800474c:	e18b      	b.n	8004a66 <Menu_Render+0x592>

	} else if (hm->selected_page == EDIT) {
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	2b02      	cmp	r3, #2
 8004754:	f040 8091 	bne.w	800487a <Menu_Render+0x3a6>

		// title
		Painter_WriteString(image, "edit", 20, 0, BOT_LEFT, LARGE);
 8004758:	2302      	movs	r3, #2
 800475a:	9301      	str	r3, [sp, #4]
 800475c:	2302      	movs	r3, #2
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	2300      	movs	r3, #0
 8004762:	2214      	movs	r2, #20
 8004764:	491d      	ldr	r1, [pc, #116]	; (80047dc <Menu_Render+0x308>)
 8004766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004768:	f7fc fd85 	bl	8001276 <Painter_WriteString>

		// content
		for (uint16_t i = 0; i < MAX_PEDALS_COUNT; i++) {
 800476c:	2300      	movs	r3, #0
 800476e:	863b      	strh	r3, [r7, #48]	; 0x30
 8004770:	e07e      	b.n	8004870 <Menu_Render+0x39c>
			// pedal selection
			enum pedal_types t = hm->pedals[i].pedal_formatted.type;
 8004772:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	2198      	movs	r1, #152	; 0x98
 8004778:	fb01 f303 	mul.w	r3, r1, r3
 800477c:	4413      	add	r3, r2
 800477e:	3304      	adds	r3, #4
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			uint16_t width = CANVAS_HEIGHT / MAX_PEDALS_COUNT;
 8004786:	2331      	movs	r3, #49	; 0x31
 8004788:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (t == BYPASS) Painter_ToggleDottedRectangle(image, width * i + 4, 20, width * (i+1) - 4, 30, BOT_LEFT);
 800478a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800478e:	2b02      	cmp	r3, #2
 8004790:	d126      	bne.n	80047e0 <Menu_Render+0x30c>
 8004792:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004794:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8004796:	fb02 f303 	mul.w	r3, r2, r3
 800479a:	b29b      	uxth	r3, r3
 800479c:	3304      	adds	r3, #4
 800479e:	b299      	uxth	r1, r3
 80047a0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80047a2:	3301      	adds	r3, #1
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80047a8:	fb02 f303 	mul.w	r3, r2, r3
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	3b04      	subs	r3, #4
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	2202      	movs	r2, #2
 80047b4:	9201      	str	r2, [sp, #4]
 80047b6:	221e      	movs	r2, #30
 80047b8:	9200      	str	r2, [sp, #0]
 80047ba:	2214      	movs	r2, #20
 80047bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047be:	f7fc fd21 	bl	8001204 <Painter_ToggleDottedRectangle>
 80047c2:	e025      	b.n	8004810 <Menu_Render+0x33c>
 80047c4:	08005730 	.word	0x08005730
 80047c8:	0800573c 	.word	0x0800573c
 80047cc:	08005744 	.word	0x08005744
 80047d0:	0800574c 	.word	0x0800574c
 80047d4:	08005754 	.word	0x08005754
 80047d8:	08005758 	.word	0x08005758
 80047dc:	08005760 	.word	0x08005760
			else Painter_ToggleRectangle(image, width * i + 4, 20, width * (i+1) - 4, 30, BOT_LEFT);
 80047e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047e2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80047e4:	fb02 f303 	mul.w	r3, r2, r3
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	3304      	adds	r3, #4
 80047ec:	b299      	uxth	r1, r3
 80047ee:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80047f0:	3301      	adds	r3, #1
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80047f6:	fb02 f303 	mul.w	r3, r2, r3
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	3b04      	subs	r3, #4
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2202      	movs	r2, #2
 8004802:	9201      	str	r2, [sp, #4]
 8004804:	221e      	movs	r2, #30
 8004806:	9200      	str	r2, [sp, #0]
 8004808:	2214      	movs	r2, #20
 800480a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800480c:	f7fc fcc9 	bl	80011a2 <Painter_ToggleRectangle>
			if (i == hm->edit_index2) {
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 367f 	ldrb.w	r3, [r3, #1663]	; 0x67f
 8004816:	b29b      	uxth	r3, r3
 8004818:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800481a:	429a      	cmp	r2, r3
 800481c:	d125      	bne.n	800486a <Menu_Render+0x396>
				Painter_WriteString(image, "^", width * i + width / 2 - 4, 31, BOT_LEFT, SMALL);
 800481e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004820:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8004822:	fb02 f303 	mul.w	r3, r2, r3
 8004826:	b29a      	uxth	r2, r3
 8004828:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800482a:	085b      	lsrs	r3, r3, #1
 800482c:	b29b      	uxth	r3, r3
 800482e:	4413      	add	r3, r2
 8004830:	b29b      	uxth	r3, r3
 8004832:	3b04      	subs	r3, #4
 8004834:	b29a      	uxth	r2, r3
 8004836:	2300      	movs	r3, #0
 8004838:	9301      	str	r3, [sp, #4]
 800483a:	2302      	movs	r3, #2
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	231f      	movs	r3, #31
 8004840:	49a6      	ldr	r1, [pc, #664]	; (8004adc <Menu_Render+0x608>)
 8004842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004844:	f7fc fd17 	bl	8001276 <Painter_WriteString>
				Painter_WriteString(image, hm->pedal_manifest[t].long_name, 110, 2, BOT_LEFT, SMALL);
 8004848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800484c:	015b      	lsls	r3, r3, #5
 800484e:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	4413      	add	r3, r2
 8004856:	1d19      	adds	r1, r3, #4
 8004858:	2300      	movs	r3, #0
 800485a:	9301      	str	r3, [sp, #4]
 800485c:	2302      	movs	r3, #2
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	2302      	movs	r3, #2
 8004862:	226e      	movs	r2, #110	; 0x6e
 8004864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004866:	f7fc fd06 	bl	8001276 <Painter_WriteString>
		for (uint16_t i = 0; i < MAX_PEDALS_COUNT; i++) {
 800486a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800486c:	3301      	adds	r3, #1
 800486e:	863b      	strh	r3, [r7, #48]	; 0x30
 8004870:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004872:	2b05      	cmp	r3, #5
 8004874:	f67f af7d 	bls.w	8004772 <Menu_Render+0x29e>
 8004878:	e0f5      	b.n	8004a66 <Menu_Render+0x592>
				// param selection
			}
		}

	} else if (hm->selected_page == MODE) {
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2b03      	cmp	r3, #3
 8004880:	f040 8093 	bne.w	80049aa <Menu_Render+0x4d6>

		// title
		Painter_WriteString(image, "mode", 20, 0, BOT_LEFT, LARGE);
 8004884:	2302      	movs	r3, #2
 8004886:	9301      	str	r3, [sp, #4]
 8004888:	2302      	movs	r3, #2
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	2300      	movs	r3, #0
 800488e:	2214      	movs	r2, #20
 8004890:	4993      	ldr	r1, [pc, #588]	; (8004ae0 <Menu_Render+0x60c>)
 8004892:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004894:	f7fc fcef 	bl	8001276 <Painter_WriteString>

		// content
		for (uint16_t i = 0; i < MODE_TYPES; i++) {
 8004898:	2300      	movs	r3, #0
 800489a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800489c:	e080      	b.n	80049a0 <Menu_Render+0x4cc>
			Painter_WriteString(image, hm->mode_manifest[i].desc, i%2?158:10, i/2*18+30, BOT_LEFT, SMALL);
 800489e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80048a0:	4613      	mov	r3, r2
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	4413      	add	r3, r2
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	4413      	add	r3, r2
 80048b0:	1d19      	adds	r1, r3, #4
 80048b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <Menu_Render+0x3ee>
 80048be:	229e      	movs	r2, #158	; 0x9e
 80048c0:	e000      	b.n	80048c4 <Menu_Render+0x3f0>
 80048c2:	220a      	movs	r2, #10
 80048c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80048c6:	085b      	lsrs	r3, r3, #1
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	4618      	mov	r0, r3
 80048cc:	00c0      	lsls	r0, r0, #3
 80048ce:	4403      	add	r3, r0
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	331e      	adds	r3, #30
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	2000      	movs	r0, #0
 80048da:	9001      	str	r0, [sp, #4]
 80048dc:	2002      	movs	r0, #2
 80048de:	9000      	str	r0, [sp, #0]
 80048e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048e2:	f7fc fcc8 	bl	8001276 <Painter_WriteString>
			if (i == hm->mode_active) {
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 3681 	ldrb.w	r3, [r3, #1665]	; 0x681
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d12d      	bne.n	8004950 <Menu_Render+0x47c>
				Painter_ToggleRectangle(image, i%2?156:8, i/2*18+28, i%2?294:146, i/2*18+44, BOT_LEFT);
 80048f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <Menu_Render+0x430>
 8004900:	219c      	movs	r1, #156	; 0x9c
 8004902:	e000      	b.n	8004906 <Menu_Render+0x432>
 8004904:	2108      	movs	r1, #8
 8004906:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004908:	085b      	lsrs	r3, r3, #1
 800490a:	b29b      	uxth	r3, r3
 800490c:	461a      	mov	r2, r3
 800490e:	00d2      	lsls	r2, r2, #3
 8004910:	4413      	add	r3, r2
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	b29b      	uxth	r3, r3
 8004916:	331c      	adds	r3, #28
 8004918:	b29a      	uxth	r2, r3
 800491a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	b29b      	uxth	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d002      	beq.n	800492c <Menu_Render+0x458>
 8004926:	f44f 7093 	mov.w	r0, #294	; 0x126
 800492a:	e000      	b.n	800492e <Menu_Render+0x45a>
 800492c:	2092      	movs	r0, #146	; 0x92
 800492e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004930:	085b      	lsrs	r3, r3, #1
 8004932:	b29b      	uxth	r3, r3
 8004934:	461c      	mov	r4, r3
 8004936:	00e4      	lsls	r4, r4, #3
 8004938:	4423      	add	r3, r4
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	b29b      	uxth	r3, r3
 800493e:	332c      	adds	r3, #44	; 0x2c
 8004940:	b29b      	uxth	r3, r3
 8004942:	2402      	movs	r4, #2
 8004944:	9401      	str	r4, [sp, #4]
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	4603      	mov	r3, r0
 800494a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800494c:	f7fc fc29 	bl	80011a2 <Painter_ToggleRectangle>
			}
			if (i == hm->mode_selected % MODE_TYPES) {
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 3682 	ldrb.w	r3, [r3, #1666]	; 0x682
 8004956:	b29b      	uxth	r3, r3
 8004958:	f003 0307 	and.w	r3, r3, #7
 800495c:	b29b      	uxth	r3, r3
 800495e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004960:	429a      	cmp	r2, r3
 8004962:	d11a      	bne.n	800499a <Menu_Render+0x4c6>
				Painter_WriteString(image, ">", i%2?148:0, i/2*18+30, BOT_LEFT, SMALL);
 8004964:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	b29b      	uxth	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <Menu_Render+0x4a0>
 8004970:	2294      	movs	r2, #148	; 0x94
 8004972:	e000      	b.n	8004976 <Menu_Render+0x4a2>
 8004974:	2200      	movs	r2, #0
 8004976:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004978:	085b      	lsrs	r3, r3, #1
 800497a:	b29b      	uxth	r3, r3
 800497c:	4619      	mov	r1, r3
 800497e:	00c9      	lsls	r1, r1, #3
 8004980:	440b      	add	r3, r1
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	b29b      	uxth	r3, r3
 8004986:	331e      	adds	r3, #30
 8004988:	b29b      	uxth	r3, r3
 800498a:	2100      	movs	r1, #0
 800498c:	9101      	str	r1, [sp, #4]
 800498e:	2102      	movs	r1, #2
 8004990:	9100      	str	r1, [sp, #0]
 8004992:	4954      	ldr	r1, [pc, #336]	; (8004ae4 <Menu_Render+0x610>)
 8004994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004996:	f7fc fc6e 	bl	8001276 <Painter_WriteString>
		for (uint16_t i = 0; i < MODE_TYPES; i++) {
 800499a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800499c:	3301      	adds	r3, #1
 800499e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80049a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80049a2:	2b07      	cmp	r3, #7
 80049a4:	f67f af7b 	bls.w	800489e <Menu_Render+0x3ca>
 80049a8:	e05d      	b.n	8004a66 <Menu_Render+0x592>
			}
		}

	} else if (hm->selected_page == TUNER) {
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d10a      	bne.n	80049c8 <Menu_Render+0x4f4>

		// title
		Painter_WriteString(image, "tuner", 20, 0, BOT_LEFT, LARGE);
 80049b2:	2302      	movs	r3, #2
 80049b4:	9301      	str	r3, [sp, #4]
 80049b6:	2302      	movs	r3, #2
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	2300      	movs	r3, #0
 80049bc:	2214      	movs	r2, #20
 80049be:	494a      	ldr	r1, [pc, #296]	; (8004ae8 <Menu_Render+0x614>)
 80049c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049c2:	f7fc fc58 	bl	8001276 <Painter_WriteString>
 80049c6:	e04e      	b.n	8004a66 <Menu_Render+0x592>


	} else if (hm->selected_page == FILES) {
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	2b05      	cmp	r3, #5
 80049ce:	d14a      	bne.n	8004a66 <Menu_Render+0x592>

		// title
		Painter_WriteString(image, "usb", 20, 0, BOT_LEFT, LARGE);
 80049d0:	2302      	movs	r3, #2
 80049d2:	9301      	str	r3, [sp, #4]
 80049d4:	2302      	movs	r3, #2
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	2300      	movs	r3, #0
 80049da:	2214      	movs	r2, #20
 80049dc:	4943      	ldr	r1, [pc, #268]	; (8004aec <Menu_Render+0x618>)
 80049de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049e0:	f7fc fc49 	bl	8001276 <Painter_WriteString>

		// content
		if (hm->usb_ready) {
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 3683 	ldrb.w	r3, [r3, #1667]	; 0x683
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d031      	beq.n	8004a52 <Menu_Render+0x57e>
			if (hm->usb_selected % 2) {
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 3684 	ldrb.w	r3, [r3, #1668]	; 0x684
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00a      	beq.n	8004a14 <Menu_Render+0x540>
				Painter_WriteString(image, ">", 294/3*2 - 36, 55, BOT_LEFT, LARGE);
 80049fe:	2302      	movs	r3, #2
 8004a00:	9301      	str	r3, [sp, #4]
 8004a02:	2302      	movs	r3, #2
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	2337      	movs	r3, #55	; 0x37
 8004a08:	22a0      	movs	r2, #160	; 0xa0
 8004a0a:	4936      	ldr	r1, [pc, #216]	; (8004ae4 <Menu_Render+0x610>)
 8004a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a0e:	f7fc fc32 	bl	8001276 <Painter_WriteString>
 8004a12:	e009      	b.n	8004a28 <Menu_Render+0x554>
			} else {
				Painter_WriteString(image, ">", 294/3 - 36, 55, BOT_LEFT, LARGE);
 8004a14:	2302      	movs	r3, #2
 8004a16:	9301      	str	r3, [sp, #4]
 8004a18:	2302      	movs	r3, #2
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	2337      	movs	r3, #55	; 0x37
 8004a1e:	223e      	movs	r2, #62	; 0x3e
 8004a20:	4930      	ldr	r1, [pc, #192]	; (8004ae4 <Menu_Render+0x610>)
 8004a22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a24:	f7fc fc27 	bl	8001276 <Painter_WriteString>
			}
			Painter_WriteString(image, "load", 294/3 - 24, 55, BOT_LEFT, LARGE);
 8004a28:	2302      	movs	r3, #2
 8004a2a:	9301      	str	r3, [sp, #4]
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	2337      	movs	r3, #55	; 0x37
 8004a32:	224a      	movs	r2, #74	; 0x4a
 8004a34:	492e      	ldr	r1, [pc, #184]	; (8004af0 <Menu_Render+0x61c>)
 8004a36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a38:	f7fc fc1d 	bl	8001276 <Painter_WriteString>
			Painter_WriteString(image, "save", 294/3*2 - 24, 55, BOT_LEFT, LARGE);
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	9301      	str	r3, [sp, #4]
 8004a40:	2302      	movs	r3, #2
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	2337      	movs	r3, #55	; 0x37
 8004a46:	22ac      	movs	r2, #172	; 0xac
 8004a48:	492a      	ldr	r1, [pc, #168]	; (8004af4 <Menu_Render+0x620>)
 8004a4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a4c:	f7fc fc13 	bl	8001276 <Painter_WriteString>
 8004a50:	e009      	b.n	8004a66 <Menu_Render+0x592>
		} else {
			Painter_WriteString(image, "disconnected", 50, 55, BOT_LEFT, LARGE);
 8004a52:	2302      	movs	r3, #2
 8004a54:	9301      	str	r3, [sp, #4]
 8004a56:	2302      	movs	r3, #2
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	2337      	movs	r3, #55	; 0x37
 8004a5c:	2232      	movs	r2, #50	; 0x32
 8004a5e:	4926      	ldr	r1, [pc, #152]	; (8004af8 <Menu_Render+0x624>)
 8004a60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a62:	f7fc fc08 	bl	8001276 <Painter_WriteString>
		}
	}

	if (render == FULL) {
 8004a66:	78fb      	ldrb	r3, [r7, #3]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d112      	bne.n	8004a92 <Menu_Render+0x5be>
		EPD_Init(hm->hepd);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fb fcc6 	bl	8000404 <EPD_Init>
		EPD_Display(hm->hepd);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fb fd32 	bl	80004e8 <EPD_Display>
		EPD_Sleep(hm->hepd);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fb fdbe 	bl	800060c <EPD_Sleep>
		EPD_Display_Partial(hm->hepd);
		Painter_ToggleCanvas(image);
		EPD_Display_Partial(hm->hepd);
		EPD_Sleep(hm->hepd);
	}
}
 8004a90:	e020      	b.n	8004ad4 <Menu_Render+0x600>
	} else if (render == PARTIAL) {
 8004a92:	78fb      	ldrb	r3, [r7, #3]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d11d      	bne.n	8004ad4 <Menu_Render+0x600>
		EPD_Init(hm->hepd);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7fb fcb0 	bl	8000404 <EPD_Init>
		Painter_ToggleCanvas(image);
 8004aa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aa6:	f7fc fcdf 	bl	8001468 <Painter_ToggleCanvas>
		EPD_Display_Partial(hm->hepd);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7fb fd37 	bl	8000524 <EPD_Display_Partial>
		Painter_ToggleCanvas(image);
 8004ab6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ab8:	f7fc fcd6 	bl	8001468 <Painter_ToggleCanvas>
		EPD_Display_Partial(hm->hepd);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7fb fd2e 	bl	8000524 <EPD_Display_Partial>
		EPD_Sleep(hm->hepd);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7fb fd9c 	bl	800060c <EPD_Sleep>
}
 8004ad4:	bf00      	nop
 8004ad6:	373c      	adds	r7, #60	; 0x3c
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd90      	pop	{r4, r7, pc}
 8004adc:	08005768 	.word	0x08005768
 8004ae0:	0800576c 	.word	0x0800576c
 8004ae4:	08005774 	.word	0x08005774
 8004ae8:	08005778 	.word	0x08005778
 8004aec:	08005780 	.word	0x08005780
 8004af0:	08005784 	.word	0x08005784
 8004af4:	0800578c 	.word	0x0800578c
 8004af8:	08005794 	.word	0x08005794

08004afc <Mode_Manifest_Init>:

#ifdef F103

#include <string.h>

void Mode_Manifest_Init(mode_manifest_t * manifest) {
 8004afc:	b4b0      	push	{r4, r5, r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
	strcpy(manifest[TS_TO_TS].desc, "ts to ts");
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	492e      	ldr	r1, [pc, #184]	; (8004bc0 <Mode_Manifest_Init+0xc4>)
 8004b08:	461a      	mov	r2, r3
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	cb03      	ldmia	r3!, {r0, r1}
 8004b0e:	6010      	str	r0, [r2, #0]
 8004b10:	6051      	str	r1, [r2, #4]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	7213      	strb	r3, [r2, #8]
	strcpy(manifest[TS_TO_RS].desc, "ts to rs");
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	3318      	adds	r3, #24
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	4b29      	ldr	r3, [pc, #164]	; (8004bc4 <Mode_Manifest_Init+0xc8>)
 8004b1e:	cb03      	ldmia	r3!, {r0, r1}
 8004b20:	6010      	str	r0, [r2, #0]
 8004b22:	6051      	str	r1, [r2, #4]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	7213      	strb	r3, [r2, #8]
	strcpy(manifest[RS_TO_TS].desc, "rs to ts");
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	3330      	adds	r3, #48	; 0x30
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	4b26      	ldr	r3, [pc, #152]	; (8004bc8 <Mode_Manifest_Init+0xcc>)
 8004b30:	cb03      	ldmia	r3!, {r0, r1}
 8004b32:	6010      	str	r0, [r2, #0]
 8004b34:	6051      	str	r1, [r2, #4]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	7213      	strb	r3, [r2, #8]
	strcpy(manifest[RS_TO_RS].desc, "rs to rs");
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	3348      	adds	r3, #72	; 0x48
 8004b3e:	461a      	mov	r2, r3
 8004b40:	4b22      	ldr	r3, [pc, #136]	; (8004bcc <Mode_Manifest_Init+0xd0>)
 8004b42:	cb03      	ldmia	r3!, {r0, r1}
 8004b44:	6010      	str	r0, [r2, #0]
 8004b46:	6051      	str	r1, [r2, #4]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	7213      	strb	r3, [r2, #8]
	strcpy(manifest[TS_TO_TRS_BALANCED].desc, "ts to trs bal.");
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3360      	adds	r3, #96	; 0x60
 8004b50:	461a      	mov	r2, r3
 8004b52:	4b1f      	ldr	r3, [pc, #124]	; (8004bd0 <Mode_Manifest_Init+0xd4>)
 8004b54:	4614      	mov	r4, r2
 8004b56:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004b58:	6020      	str	r0, [r4, #0]
 8004b5a:	6061      	str	r1, [r4, #4]
 8004b5c:	60a2      	str	r2, [r4, #8]
 8004b5e:	881a      	ldrh	r2, [r3, #0]
 8004b60:	789b      	ldrb	r3, [r3, #2]
 8004b62:	81a2      	strh	r2, [r4, #12]
 8004b64:	73a3      	strb	r3, [r4, #14]
	strcpy(manifest[TS_TO_TRS_UNBALANCED].desc, "ts to trs unbal.");
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	3378      	adds	r3, #120	; 0x78
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	4b19      	ldr	r3, [pc, #100]	; (8004bd4 <Mode_Manifest_Init+0xd8>)
 8004b6e:	4615      	mov	r5, r2
 8004b70:	461c      	mov	r4, r3
 8004b72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b74:	6028      	str	r0, [r5, #0]
 8004b76:	6069      	str	r1, [r5, #4]
 8004b78:	60aa      	str	r2, [r5, #8]
 8004b7a:	60eb      	str	r3, [r5, #12]
 8004b7c:	7823      	ldrb	r3, [r4, #0]
 8004b7e:	742b      	strb	r3, [r5, #16]
	strcpy(manifest[RS_TO_TRS_BALANCED].desc, "rs to trs bal.");
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3390      	adds	r3, #144	; 0x90
 8004b84:	461a      	mov	r2, r3
 8004b86:	4b14      	ldr	r3, [pc, #80]	; (8004bd8 <Mode_Manifest_Init+0xdc>)
 8004b88:	4614      	mov	r4, r2
 8004b8a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004b8c:	6020      	str	r0, [r4, #0]
 8004b8e:	6061      	str	r1, [r4, #4]
 8004b90:	60a2      	str	r2, [r4, #8]
 8004b92:	881a      	ldrh	r2, [r3, #0]
 8004b94:	789b      	ldrb	r3, [r3, #2]
 8004b96:	81a2      	strh	r2, [r4, #12]
 8004b98:	73a3      	strb	r3, [r4, #14]
	strcpy(manifest[RS_TO_TRS_UNBALANCED].desc, "rs to trs unbal.");
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	33a8      	adds	r3, #168	; 0xa8
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	4b0e      	ldr	r3, [pc, #56]	; (8004bdc <Mode_Manifest_Init+0xe0>)
 8004ba2:	4615      	mov	r5, r2
 8004ba4:	461c      	mov	r4, r3
 8004ba6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ba8:	6028      	str	r0, [r5, #0]
 8004baa:	6069      	str	r1, [r5, #4]
 8004bac:	60aa      	str	r2, [r5, #8]
 8004bae:	60eb      	str	r3, [r5, #12]
 8004bb0:	7823      	ldrb	r3, [r4, #0]
 8004bb2:	742b      	strb	r3, [r5, #16]
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bcb0      	pop	{r4, r5, r7}
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	080057a4 	.word	0x080057a4
 8004bc4:	080057b0 	.word	0x080057b0
 8004bc8:	080057bc 	.word	0x080057bc
 8004bcc:	080057c8 	.word	0x080057c8
 8004bd0:	080057d4 	.word	0x080057d4
 8004bd4:	080057e4 	.word	0x080057e4
 8004bd8:	080057f8 	.word	0x080057f8
 8004bdc:	08005808 	.word	0x08005808

08004be0 <Pedal_Manifest_Init>:
	}
	//params_manifest[AMPLIFIER].active_float_params[INTENSITY] = 1;
	//params_manifest[AMPLIFIER].float_name[INTENSITY] = "intensity";
}

void Pedal_Manifest_Init(pedal_manifest_t *pedal_manifest) {
 8004be0:	b4b0      	push	{r4, r5, r7}
 8004be2:	b0cb      	sub	sp, #300	; 0x12c
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004bea:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004bee:	6018      	str	r0, [r3, #0]
	pedal_manifest[AMPLIFIER] = (pedal_manifest_t){"amp", "amplifier"};
 8004bf0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004bf4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a56      	ldr	r2, [pc, #344]	; (8004d54 <Pedal_Manifest_Init+0x174>)
 8004bfc:	461c      	mov	r4, r3
 8004bfe:	4615      	mov	r5, r2
 8004c00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c02:	6020      	str	r0, [r4, #0]
 8004c04:	6061      	str	r1, [r4, #4]
 8004c06:	60a2      	str	r2, [r4, #8]
 8004c08:	60e3      	str	r3, [r4, #12]
 8004c0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c0c:	6120      	str	r0, [r4, #16]
 8004c0e:	6161      	str	r1, [r4, #20]
 8004c10:	61a2      	str	r2, [r4, #24]
 8004c12:	61e3      	str	r3, [r4, #28]
	pedal_manifest[BITCRUSHER_RS] = (pedal_manifest_t){"brs", "bitcrusher rs"};
 8004c14:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004c18:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	3320      	adds	r3, #32
 8004c20:	4a4d      	ldr	r2, [pc, #308]	; (8004d58 <Pedal_Manifest_Init+0x178>)
 8004c22:	461c      	mov	r4, r3
 8004c24:	4615      	mov	r5, r2
 8004c26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c28:	6020      	str	r0, [r4, #0]
 8004c2a:	6061      	str	r1, [r4, #4]
 8004c2c:	60a2      	str	r2, [r4, #8]
 8004c2e:	60e3      	str	r3, [r4, #12]
 8004c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c32:	6120      	str	r0, [r4, #16]
 8004c34:	6161      	str	r1, [r4, #20]
 8004c36:	61a2      	str	r2, [r4, #24]
 8004c38:	61e3      	str	r3, [r4, #28]
	pedal_manifest[BYPASS] = (pedal_manifest_t){"", "bypass"};
 8004c3a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004c3e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	3340      	adds	r3, #64	; 0x40
 8004c46:	4a45      	ldr	r2, [pc, #276]	; (8004d5c <Pedal_Manifest_Init+0x17c>)
 8004c48:	461c      	mov	r4, r3
 8004c4a:	4615      	mov	r5, r2
 8004c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c4e:	6020      	str	r0, [r4, #0]
 8004c50:	6061      	str	r1, [r4, #4]
 8004c52:	60a2      	str	r2, [r4, #8]
 8004c54:	60e3      	str	r3, [r4, #12]
 8004c56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c58:	6120      	str	r0, [r4, #16]
 8004c5a:	6161      	str	r1, [r4, #20]
 8004c5c:	61a2      	str	r2, [r4, #24]
 8004c5e:	61e3      	str	r3, [r4, #28]
	pedal_manifest[FUZZ] = (pedal_manifest_t){"fzz", "fuzz"};
 8004c60:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004c64:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3360      	adds	r3, #96	; 0x60
 8004c6c:	4a3c      	ldr	r2, [pc, #240]	; (8004d60 <Pedal_Manifest_Init+0x180>)
 8004c6e:	461c      	mov	r4, r3
 8004c70:	4615      	mov	r5, r2
 8004c72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c74:	6020      	str	r0, [r4, #0]
 8004c76:	6061      	str	r1, [r4, #4]
 8004c78:	60a2      	str	r2, [r4, #8]
 8004c7a:	60e3      	str	r3, [r4, #12]
 8004c7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c7e:	6120      	str	r0, [r4, #16]
 8004c80:	6161      	str	r1, [r4, #20]
 8004c82:	61a2      	str	r2, [r4, #24]
 8004c84:	61e3      	str	r3, [r4, #28]
	pedal_manifest[LPF] = (pedal_manifest_t){"lpf", "low pass filter"};
 8004c86:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004c8a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3380      	adds	r3, #128	; 0x80
 8004c92:	4a34      	ldr	r2, [pc, #208]	; (8004d64 <Pedal_Manifest_Init+0x184>)
 8004c94:	461c      	mov	r4, r3
 8004c96:	4615      	mov	r5, r2
 8004c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c9a:	6020      	str	r0, [r4, #0]
 8004c9c:	6061      	str	r1, [r4, #4]
 8004c9e:	60a2      	str	r2, [r4, #8]
 8004ca0:	60e3      	str	r3, [r4, #12]
 8004ca2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ca4:	6120      	str	r0, [r4, #16]
 8004ca6:	6161      	str	r1, [r4, #20]
 8004ca8:	61a2      	str	r2, [r4, #24]
 8004caa:	61e3      	str	r3, [r4, #28]
	pedal_manifest[NOISE_GATE] = (pedal_manifest_t){"ngt", "noise gate"};
 8004cac:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004cb0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	33a0      	adds	r3, #160	; 0xa0
 8004cb8:	4a2b      	ldr	r2, [pc, #172]	; (8004d68 <Pedal_Manifest_Init+0x188>)
 8004cba:	461c      	mov	r4, r3
 8004cbc:	4615      	mov	r5, r2
 8004cbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cc0:	6020      	str	r0, [r4, #0]
 8004cc2:	6061      	str	r1, [r4, #4]
 8004cc4:	60a2      	str	r2, [r4, #8]
 8004cc6:	60e3      	str	r3, [r4, #12]
 8004cc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cca:	6120      	str	r0, [r4, #16]
 8004ccc:	6161      	str	r1, [r4, #20]
 8004cce:	61a2      	str	r2, [r4, #24]
 8004cd0:	61e3      	str	r3, [r4, #28]
	pedal_manifest[OVERDRIVE] = (pedal_manifest_t){"ovr", "overdrive"};
 8004cd2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004cd6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	33c0      	adds	r3, #192	; 0xc0
 8004cde:	4a23      	ldr	r2, [pc, #140]	; (8004d6c <Pedal_Manifest_Init+0x18c>)
 8004ce0:	461c      	mov	r4, r3
 8004ce2:	4615      	mov	r5, r2
 8004ce4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ce6:	6020      	str	r0, [r4, #0]
 8004ce8:	6061      	str	r1, [r4, #4]
 8004cea:	60a2      	str	r2, [r4, #8]
 8004cec:	60e3      	str	r3, [r4, #12]
 8004cee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cf0:	6120      	str	r0, [r4, #16]
 8004cf2:	6161      	str	r1, [r4, #20]
 8004cf4:	61a2      	str	r2, [r4, #24]
 8004cf6:	61e3      	str	r3, [r4, #28]
	pedal_manifest[OVERDRIVE_SQRT] = (pedal_manifest_t){"ovrs", "overdrive s"};
 8004cf8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004cfc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	33e0      	adds	r3, #224	; 0xe0
 8004d04:	4a1a      	ldr	r2, [pc, #104]	; (8004d70 <Pedal_Manifest_Init+0x190>)
 8004d06:	461c      	mov	r4, r3
 8004d08:	4615      	mov	r5, r2
 8004d0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d0c:	6020      	str	r0, [r4, #0]
 8004d0e:	6061      	str	r1, [r4, #4]
 8004d10:	60a2      	str	r2, [r4, #8]
 8004d12:	60e3      	str	r3, [r4, #12]
 8004d14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d16:	6120      	str	r0, [r4, #16]
 8004d18:	6161      	str	r1, [r4, #20]
 8004d1a:	61a2      	str	r2, [r4, #24]
 8004d1c:	61e3      	str	r3, [r4, #28]
	pedal_manifest[TREMOLO] = (pedal_manifest_t){"trm", "tremolo"};
 8004d1e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004d22:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004d2c:	4a11      	ldr	r2, [pc, #68]	; (8004d74 <Pedal_Manifest_Init+0x194>)
 8004d2e:	461c      	mov	r4, r3
 8004d30:	4615      	mov	r5, r2
 8004d32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d34:	6020      	str	r0, [r4, #0]
 8004d36:	6061      	str	r1, [r4, #4]
 8004d38:	60a2      	str	r2, [r4, #8]
 8004d3a:	60e3      	str	r3, [r4, #12]
 8004d3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d3e:	6120      	str	r0, [r4, #16]
 8004d40:	6161      	str	r1, [r4, #20]
 8004d42:	61a2      	str	r2, [r4, #24]
 8004d44:	61e3      	str	r3, [r4, #28]
}
 8004d46:	bf00      	nop
 8004d48:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bcb0      	pop	{r4, r5, r7}
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	0800581c 	.word	0x0800581c
 8004d58:	0800583c 	.word	0x0800583c
 8004d5c:	0800585c 	.word	0x0800585c
 8004d60:	0800587c 	.word	0x0800587c
 8004d64:	0800589c 	.word	0x0800589c
 8004d68:	080058bc 	.word	0x080058bc
 8004d6c:	080058dc 	.word	0x080058dc
 8004d70:	080058fc 	.word	0x080058fc
 8004d74:	0800591c 	.word	0x0800591c

08004d78 <__errno>:
 8004d78:	4b01      	ldr	r3, [pc, #4]	; (8004d80 <__errno+0x8>)
 8004d7a:	6818      	ldr	r0, [r3, #0]
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	20000fa0 	.word	0x20000fa0

08004d84 <__libc_init_array>:
 8004d84:	b570      	push	{r4, r5, r6, lr}
 8004d86:	2600      	movs	r6, #0
 8004d88:	4d0c      	ldr	r5, [pc, #48]	; (8004dbc <__libc_init_array+0x38>)
 8004d8a:	4c0d      	ldr	r4, [pc, #52]	; (8004dc0 <__libc_init_array+0x3c>)
 8004d8c:	1b64      	subs	r4, r4, r5
 8004d8e:	10a4      	asrs	r4, r4, #2
 8004d90:	42a6      	cmp	r6, r4
 8004d92:	d109      	bne.n	8004da8 <__libc_init_array+0x24>
 8004d94:	f000 fc9c 	bl	80056d0 <_init>
 8004d98:	2600      	movs	r6, #0
 8004d9a:	4d0a      	ldr	r5, [pc, #40]	; (8004dc4 <__libc_init_array+0x40>)
 8004d9c:	4c0a      	ldr	r4, [pc, #40]	; (8004dc8 <__libc_init_array+0x44>)
 8004d9e:	1b64      	subs	r4, r4, r5
 8004da0:	10a4      	asrs	r4, r4, #2
 8004da2:	42a6      	cmp	r6, r4
 8004da4:	d105      	bne.n	8004db2 <__libc_init_array+0x2e>
 8004da6:	bd70      	pop	{r4, r5, r6, pc}
 8004da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dac:	4798      	blx	r3
 8004dae:	3601      	adds	r6, #1
 8004db0:	e7ee      	b.n	8004d90 <__libc_init_array+0xc>
 8004db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004db6:	4798      	blx	r3
 8004db8:	3601      	adds	r6, #1
 8004dba:	e7f2      	b.n	8004da2 <__libc_init_array+0x1e>
 8004dbc:	08005a3c 	.word	0x08005a3c
 8004dc0:	08005a3c 	.word	0x08005a3c
 8004dc4:	08005a3c 	.word	0x08005a3c
 8004dc8:	08005a40 	.word	0x08005a40

08004dcc <memcpy>:
 8004dcc:	440a      	add	r2, r1
 8004dce:	4291      	cmp	r1, r2
 8004dd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004dd4:	d100      	bne.n	8004dd8 <memcpy+0xc>
 8004dd6:	4770      	bx	lr
 8004dd8:	b510      	push	{r4, lr}
 8004dda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dde:	4291      	cmp	r1, r2
 8004de0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004de4:	d1f9      	bne.n	8004dda <memcpy+0xe>
 8004de6:	bd10      	pop	{r4, pc}

08004de8 <memset>:
 8004de8:	4603      	mov	r3, r0
 8004dea:	4402      	add	r2, r0
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d100      	bne.n	8004df2 <memset+0xa>
 8004df0:	4770      	bx	lr
 8004df2:	f803 1b01 	strb.w	r1, [r3], #1
 8004df6:	e7f9      	b.n	8004dec <memset+0x4>

08004df8 <siprintf>:
 8004df8:	b40e      	push	{r1, r2, r3}
 8004dfa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004dfe:	b500      	push	{lr}
 8004e00:	b09c      	sub	sp, #112	; 0x70
 8004e02:	ab1d      	add	r3, sp, #116	; 0x74
 8004e04:	9002      	str	r0, [sp, #8]
 8004e06:	9006      	str	r0, [sp, #24]
 8004e08:	9107      	str	r1, [sp, #28]
 8004e0a:	9104      	str	r1, [sp, #16]
 8004e0c:	4808      	ldr	r0, [pc, #32]	; (8004e30 <siprintf+0x38>)
 8004e0e:	4909      	ldr	r1, [pc, #36]	; (8004e34 <siprintf+0x3c>)
 8004e10:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e14:	9105      	str	r1, [sp, #20]
 8004e16:	6800      	ldr	r0, [r0, #0]
 8004e18:	a902      	add	r1, sp, #8
 8004e1a:	9301      	str	r3, [sp, #4]
 8004e1c:	f000 f868 	bl	8004ef0 <_svfiprintf_r>
 8004e20:	2200      	movs	r2, #0
 8004e22:	9b02      	ldr	r3, [sp, #8]
 8004e24:	701a      	strb	r2, [r3, #0]
 8004e26:	b01c      	add	sp, #112	; 0x70
 8004e28:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e2c:	b003      	add	sp, #12
 8004e2e:	4770      	bx	lr
 8004e30:	20000fa0 	.word	0x20000fa0
 8004e34:	ffff0208 	.word	0xffff0208

08004e38 <__ssputs_r>:
 8004e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e3c:	688e      	ldr	r6, [r1, #8]
 8004e3e:	4682      	mov	sl, r0
 8004e40:	429e      	cmp	r6, r3
 8004e42:	460c      	mov	r4, r1
 8004e44:	4690      	mov	r8, r2
 8004e46:	461f      	mov	r7, r3
 8004e48:	d838      	bhi.n	8004ebc <__ssputs_r+0x84>
 8004e4a:	898a      	ldrh	r2, [r1, #12]
 8004e4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e50:	d032      	beq.n	8004eb8 <__ssputs_r+0x80>
 8004e52:	6825      	ldr	r5, [r4, #0]
 8004e54:	6909      	ldr	r1, [r1, #16]
 8004e56:	3301      	adds	r3, #1
 8004e58:	eba5 0901 	sub.w	r9, r5, r1
 8004e5c:	6965      	ldr	r5, [r4, #20]
 8004e5e:	444b      	add	r3, r9
 8004e60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e68:	106d      	asrs	r5, r5, #1
 8004e6a:	429d      	cmp	r5, r3
 8004e6c:	bf38      	it	cc
 8004e6e:	461d      	movcc	r5, r3
 8004e70:	0553      	lsls	r3, r2, #21
 8004e72:	d531      	bpl.n	8004ed8 <__ssputs_r+0xa0>
 8004e74:	4629      	mov	r1, r5
 8004e76:	f000 fb61 	bl	800553c <_malloc_r>
 8004e7a:	4606      	mov	r6, r0
 8004e7c:	b950      	cbnz	r0, 8004e94 <__ssputs_r+0x5c>
 8004e7e:	230c      	movs	r3, #12
 8004e80:	f04f 30ff 	mov.w	r0, #4294967295
 8004e84:	f8ca 3000 	str.w	r3, [sl]
 8004e88:	89a3      	ldrh	r3, [r4, #12]
 8004e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e8e:	81a3      	strh	r3, [r4, #12]
 8004e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e94:	464a      	mov	r2, r9
 8004e96:	6921      	ldr	r1, [r4, #16]
 8004e98:	f7ff ff98 	bl	8004dcc <memcpy>
 8004e9c:	89a3      	ldrh	r3, [r4, #12]
 8004e9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ea6:	81a3      	strh	r3, [r4, #12]
 8004ea8:	6126      	str	r6, [r4, #16]
 8004eaa:	444e      	add	r6, r9
 8004eac:	6026      	str	r6, [r4, #0]
 8004eae:	463e      	mov	r6, r7
 8004eb0:	6165      	str	r5, [r4, #20]
 8004eb2:	eba5 0509 	sub.w	r5, r5, r9
 8004eb6:	60a5      	str	r5, [r4, #8]
 8004eb8:	42be      	cmp	r6, r7
 8004eba:	d900      	bls.n	8004ebe <__ssputs_r+0x86>
 8004ebc:	463e      	mov	r6, r7
 8004ebe:	4632      	mov	r2, r6
 8004ec0:	4641      	mov	r1, r8
 8004ec2:	6820      	ldr	r0, [r4, #0]
 8004ec4:	f000 fab8 	bl	8005438 <memmove>
 8004ec8:	68a3      	ldr	r3, [r4, #8]
 8004eca:	2000      	movs	r0, #0
 8004ecc:	1b9b      	subs	r3, r3, r6
 8004ece:	60a3      	str	r3, [r4, #8]
 8004ed0:	6823      	ldr	r3, [r4, #0]
 8004ed2:	4433      	add	r3, r6
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	e7db      	b.n	8004e90 <__ssputs_r+0x58>
 8004ed8:	462a      	mov	r2, r5
 8004eda:	f000 fba3 	bl	8005624 <_realloc_r>
 8004ede:	4606      	mov	r6, r0
 8004ee0:	2800      	cmp	r0, #0
 8004ee2:	d1e1      	bne.n	8004ea8 <__ssputs_r+0x70>
 8004ee4:	4650      	mov	r0, sl
 8004ee6:	6921      	ldr	r1, [r4, #16]
 8004ee8:	f000 fac0 	bl	800546c <_free_r>
 8004eec:	e7c7      	b.n	8004e7e <__ssputs_r+0x46>
	...

08004ef0 <_svfiprintf_r>:
 8004ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef4:	4698      	mov	r8, r3
 8004ef6:	898b      	ldrh	r3, [r1, #12]
 8004ef8:	4607      	mov	r7, r0
 8004efa:	061b      	lsls	r3, r3, #24
 8004efc:	460d      	mov	r5, r1
 8004efe:	4614      	mov	r4, r2
 8004f00:	b09d      	sub	sp, #116	; 0x74
 8004f02:	d50e      	bpl.n	8004f22 <_svfiprintf_r+0x32>
 8004f04:	690b      	ldr	r3, [r1, #16]
 8004f06:	b963      	cbnz	r3, 8004f22 <_svfiprintf_r+0x32>
 8004f08:	2140      	movs	r1, #64	; 0x40
 8004f0a:	f000 fb17 	bl	800553c <_malloc_r>
 8004f0e:	6028      	str	r0, [r5, #0]
 8004f10:	6128      	str	r0, [r5, #16]
 8004f12:	b920      	cbnz	r0, 8004f1e <_svfiprintf_r+0x2e>
 8004f14:	230c      	movs	r3, #12
 8004f16:	603b      	str	r3, [r7, #0]
 8004f18:	f04f 30ff 	mov.w	r0, #4294967295
 8004f1c:	e0d1      	b.n	80050c2 <_svfiprintf_r+0x1d2>
 8004f1e:	2340      	movs	r3, #64	; 0x40
 8004f20:	616b      	str	r3, [r5, #20]
 8004f22:	2300      	movs	r3, #0
 8004f24:	9309      	str	r3, [sp, #36]	; 0x24
 8004f26:	2320      	movs	r3, #32
 8004f28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f2c:	2330      	movs	r3, #48	; 0x30
 8004f2e:	f04f 0901 	mov.w	r9, #1
 8004f32:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f36:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80050dc <_svfiprintf_r+0x1ec>
 8004f3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f3e:	4623      	mov	r3, r4
 8004f40:	469a      	mov	sl, r3
 8004f42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f46:	b10a      	cbz	r2, 8004f4c <_svfiprintf_r+0x5c>
 8004f48:	2a25      	cmp	r2, #37	; 0x25
 8004f4a:	d1f9      	bne.n	8004f40 <_svfiprintf_r+0x50>
 8004f4c:	ebba 0b04 	subs.w	fp, sl, r4
 8004f50:	d00b      	beq.n	8004f6a <_svfiprintf_r+0x7a>
 8004f52:	465b      	mov	r3, fp
 8004f54:	4622      	mov	r2, r4
 8004f56:	4629      	mov	r1, r5
 8004f58:	4638      	mov	r0, r7
 8004f5a:	f7ff ff6d 	bl	8004e38 <__ssputs_r>
 8004f5e:	3001      	adds	r0, #1
 8004f60:	f000 80aa 	beq.w	80050b8 <_svfiprintf_r+0x1c8>
 8004f64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f66:	445a      	add	r2, fp
 8004f68:	9209      	str	r2, [sp, #36]	; 0x24
 8004f6a:	f89a 3000 	ldrb.w	r3, [sl]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f000 80a2 	beq.w	80050b8 <_svfiprintf_r+0x1c8>
 8004f74:	2300      	movs	r3, #0
 8004f76:	f04f 32ff 	mov.w	r2, #4294967295
 8004f7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f7e:	f10a 0a01 	add.w	sl, sl, #1
 8004f82:	9304      	str	r3, [sp, #16]
 8004f84:	9307      	str	r3, [sp, #28]
 8004f86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f8a:	931a      	str	r3, [sp, #104]	; 0x68
 8004f8c:	4654      	mov	r4, sl
 8004f8e:	2205      	movs	r2, #5
 8004f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f94:	4851      	ldr	r0, [pc, #324]	; (80050dc <_svfiprintf_r+0x1ec>)
 8004f96:	f000 fa41 	bl	800541c <memchr>
 8004f9a:	9a04      	ldr	r2, [sp, #16]
 8004f9c:	b9d8      	cbnz	r0, 8004fd6 <_svfiprintf_r+0xe6>
 8004f9e:	06d0      	lsls	r0, r2, #27
 8004fa0:	bf44      	itt	mi
 8004fa2:	2320      	movmi	r3, #32
 8004fa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fa8:	0711      	lsls	r1, r2, #28
 8004faa:	bf44      	itt	mi
 8004fac:	232b      	movmi	r3, #43	; 0x2b
 8004fae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fb2:	f89a 3000 	ldrb.w	r3, [sl]
 8004fb6:	2b2a      	cmp	r3, #42	; 0x2a
 8004fb8:	d015      	beq.n	8004fe6 <_svfiprintf_r+0xf6>
 8004fba:	4654      	mov	r4, sl
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	f04f 0c0a 	mov.w	ip, #10
 8004fc2:	9a07      	ldr	r2, [sp, #28]
 8004fc4:	4621      	mov	r1, r4
 8004fc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fca:	3b30      	subs	r3, #48	; 0x30
 8004fcc:	2b09      	cmp	r3, #9
 8004fce:	d94e      	bls.n	800506e <_svfiprintf_r+0x17e>
 8004fd0:	b1b0      	cbz	r0, 8005000 <_svfiprintf_r+0x110>
 8004fd2:	9207      	str	r2, [sp, #28]
 8004fd4:	e014      	b.n	8005000 <_svfiprintf_r+0x110>
 8004fd6:	eba0 0308 	sub.w	r3, r0, r8
 8004fda:	fa09 f303 	lsl.w	r3, r9, r3
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	46a2      	mov	sl, r4
 8004fe2:	9304      	str	r3, [sp, #16]
 8004fe4:	e7d2      	b.n	8004f8c <_svfiprintf_r+0x9c>
 8004fe6:	9b03      	ldr	r3, [sp, #12]
 8004fe8:	1d19      	adds	r1, r3, #4
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	9103      	str	r1, [sp, #12]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	bfbb      	ittet	lt
 8004ff2:	425b      	neglt	r3, r3
 8004ff4:	f042 0202 	orrlt.w	r2, r2, #2
 8004ff8:	9307      	strge	r3, [sp, #28]
 8004ffa:	9307      	strlt	r3, [sp, #28]
 8004ffc:	bfb8      	it	lt
 8004ffe:	9204      	strlt	r2, [sp, #16]
 8005000:	7823      	ldrb	r3, [r4, #0]
 8005002:	2b2e      	cmp	r3, #46	; 0x2e
 8005004:	d10c      	bne.n	8005020 <_svfiprintf_r+0x130>
 8005006:	7863      	ldrb	r3, [r4, #1]
 8005008:	2b2a      	cmp	r3, #42	; 0x2a
 800500a:	d135      	bne.n	8005078 <_svfiprintf_r+0x188>
 800500c:	9b03      	ldr	r3, [sp, #12]
 800500e:	3402      	adds	r4, #2
 8005010:	1d1a      	adds	r2, r3, #4
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	9203      	str	r2, [sp, #12]
 8005016:	2b00      	cmp	r3, #0
 8005018:	bfb8      	it	lt
 800501a:	f04f 33ff 	movlt.w	r3, #4294967295
 800501e:	9305      	str	r3, [sp, #20]
 8005020:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80050e0 <_svfiprintf_r+0x1f0>
 8005024:	2203      	movs	r2, #3
 8005026:	4650      	mov	r0, sl
 8005028:	7821      	ldrb	r1, [r4, #0]
 800502a:	f000 f9f7 	bl	800541c <memchr>
 800502e:	b140      	cbz	r0, 8005042 <_svfiprintf_r+0x152>
 8005030:	2340      	movs	r3, #64	; 0x40
 8005032:	eba0 000a 	sub.w	r0, r0, sl
 8005036:	fa03 f000 	lsl.w	r0, r3, r0
 800503a:	9b04      	ldr	r3, [sp, #16]
 800503c:	3401      	adds	r4, #1
 800503e:	4303      	orrs	r3, r0
 8005040:	9304      	str	r3, [sp, #16]
 8005042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005046:	2206      	movs	r2, #6
 8005048:	4826      	ldr	r0, [pc, #152]	; (80050e4 <_svfiprintf_r+0x1f4>)
 800504a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800504e:	f000 f9e5 	bl	800541c <memchr>
 8005052:	2800      	cmp	r0, #0
 8005054:	d038      	beq.n	80050c8 <_svfiprintf_r+0x1d8>
 8005056:	4b24      	ldr	r3, [pc, #144]	; (80050e8 <_svfiprintf_r+0x1f8>)
 8005058:	bb1b      	cbnz	r3, 80050a2 <_svfiprintf_r+0x1b2>
 800505a:	9b03      	ldr	r3, [sp, #12]
 800505c:	3307      	adds	r3, #7
 800505e:	f023 0307 	bic.w	r3, r3, #7
 8005062:	3308      	adds	r3, #8
 8005064:	9303      	str	r3, [sp, #12]
 8005066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005068:	4433      	add	r3, r6
 800506a:	9309      	str	r3, [sp, #36]	; 0x24
 800506c:	e767      	b.n	8004f3e <_svfiprintf_r+0x4e>
 800506e:	460c      	mov	r4, r1
 8005070:	2001      	movs	r0, #1
 8005072:	fb0c 3202 	mla	r2, ip, r2, r3
 8005076:	e7a5      	b.n	8004fc4 <_svfiprintf_r+0xd4>
 8005078:	2300      	movs	r3, #0
 800507a:	f04f 0c0a 	mov.w	ip, #10
 800507e:	4619      	mov	r1, r3
 8005080:	3401      	adds	r4, #1
 8005082:	9305      	str	r3, [sp, #20]
 8005084:	4620      	mov	r0, r4
 8005086:	f810 2b01 	ldrb.w	r2, [r0], #1
 800508a:	3a30      	subs	r2, #48	; 0x30
 800508c:	2a09      	cmp	r2, #9
 800508e:	d903      	bls.n	8005098 <_svfiprintf_r+0x1a8>
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0c5      	beq.n	8005020 <_svfiprintf_r+0x130>
 8005094:	9105      	str	r1, [sp, #20]
 8005096:	e7c3      	b.n	8005020 <_svfiprintf_r+0x130>
 8005098:	4604      	mov	r4, r0
 800509a:	2301      	movs	r3, #1
 800509c:	fb0c 2101 	mla	r1, ip, r1, r2
 80050a0:	e7f0      	b.n	8005084 <_svfiprintf_r+0x194>
 80050a2:	ab03      	add	r3, sp, #12
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	462a      	mov	r2, r5
 80050a8:	4638      	mov	r0, r7
 80050aa:	4b10      	ldr	r3, [pc, #64]	; (80050ec <_svfiprintf_r+0x1fc>)
 80050ac:	a904      	add	r1, sp, #16
 80050ae:	f3af 8000 	nop.w
 80050b2:	1c42      	adds	r2, r0, #1
 80050b4:	4606      	mov	r6, r0
 80050b6:	d1d6      	bne.n	8005066 <_svfiprintf_r+0x176>
 80050b8:	89ab      	ldrh	r3, [r5, #12]
 80050ba:	065b      	lsls	r3, r3, #25
 80050bc:	f53f af2c 	bmi.w	8004f18 <_svfiprintf_r+0x28>
 80050c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050c2:	b01d      	add	sp, #116	; 0x74
 80050c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050c8:	ab03      	add	r3, sp, #12
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	462a      	mov	r2, r5
 80050ce:	4638      	mov	r0, r7
 80050d0:	4b06      	ldr	r3, [pc, #24]	; (80050ec <_svfiprintf_r+0x1fc>)
 80050d2:	a904      	add	r1, sp, #16
 80050d4:	f000 f87c 	bl	80051d0 <_printf_i>
 80050d8:	e7eb      	b.n	80050b2 <_svfiprintf_r+0x1c2>
 80050da:	bf00      	nop
 80050dc:	08005a08 	.word	0x08005a08
 80050e0:	08005a0e 	.word	0x08005a0e
 80050e4:	08005a12 	.word	0x08005a12
 80050e8:	00000000 	.word	0x00000000
 80050ec:	08004e39 	.word	0x08004e39

080050f0 <_printf_common>:
 80050f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050f4:	4616      	mov	r6, r2
 80050f6:	4699      	mov	r9, r3
 80050f8:	688a      	ldr	r2, [r1, #8]
 80050fa:	690b      	ldr	r3, [r1, #16]
 80050fc:	4607      	mov	r7, r0
 80050fe:	4293      	cmp	r3, r2
 8005100:	bfb8      	it	lt
 8005102:	4613      	movlt	r3, r2
 8005104:	6033      	str	r3, [r6, #0]
 8005106:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800510a:	460c      	mov	r4, r1
 800510c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005110:	b10a      	cbz	r2, 8005116 <_printf_common+0x26>
 8005112:	3301      	adds	r3, #1
 8005114:	6033      	str	r3, [r6, #0]
 8005116:	6823      	ldr	r3, [r4, #0]
 8005118:	0699      	lsls	r1, r3, #26
 800511a:	bf42      	ittt	mi
 800511c:	6833      	ldrmi	r3, [r6, #0]
 800511e:	3302      	addmi	r3, #2
 8005120:	6033      	strmi	r3, [r6, #0]
 8005122:	6825      	ldr	r5, [r4, #0]
 8005124:	f015 0506 	ands.w	r5, r5, #6
 8005128:	d106      	bne.n	8005138 <_printf_common+0x48>
 800512a:	f104 0a19 	add.w	sl, r4, #25
 800512e:	68e3      	ldr	r3, [r4, #12]
 8005130:	6832      	ldr	r2, [r6, #0]
 8005132:	1a9b      	subs	r3, r3, r2
 8005134:	42ab      	cmp	r3, r5
 8005136:	dc28      	bgt.n	800518a <_printf_common+0x9a>
 8005138:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800513c:	1e13      	subs	r3, r2, #0
 800513e:	6822      	ldr	r2, [r4, #0]
 8005140:	bf18      	it	ne
 8005142:	2301      	movne	r3, #1
 8005144:	0692      	lsls	r2, r2, #26
 8005146:	d42d      	bmi.n	80051a4 <_printf_common+0xb4>
 8005148:	4649      	mov	r1, r9
 800514a:	4638      	mov	r0, r7
 800514c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005150:	47c0      	blx	r8
 8005152:	3001      	adds	r0, #1
 8005154:	d020      	beq.n	8005198 <_printf_common+0xa8>
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	68e5      	ldr	r5, [r4, #12]
 800515a:	f003 0306 	and.w	r3, r3, #6
 800515e:	2b04      	cmp	r3, #4
 8005160:	bf18      	it	ne
 8005162:	2500      	movne	r5, #0
 8005164:	6832      	ldr	r2, [r6, #0]
 8005166:	f04f 0600 	mov.w	r6, #0
 800516a:	68a3      	ldr	r3, [r4, #8]
 800516c:	bf08      	it	eq
 800516e:	1aad      	subeq	r5, r5, r2
 8005170:	6922      	ldr	r2, [r4, #16]
 8005172:	bf08      	it	eq
 8005174:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005178:	4293      	cmp	r3, r2
 800517a:	bfc4      	itt	gt
 800517c:	1a9b      	subgt	r3, r3, r2
 800517e:	18ed      	addgt	r5, r5, r3
 8005180:	341a      	adds	r4, #26
 8005182:	42b5      	cmp	r5, r6
 8005184:	d11a      	bne.n	80051bc <_printf_common+0xcc>
 8005186:	2000      	movs	r0, #0
 8005188:	e008      	b.n	800519c <_printf_common+0xac>
 800518a:	2301      	movs	r3, #1
 800518c:	4652      	mov	r2, sl
 800518e:	4649      	mov	r1, r9
 8005190:	4638      	mov	r0, r7
 8005192:	47c0      	blx	r8
 8005194:	3001      	adds	r0, #1
 8005196:	d103      	bne.n	80051a0 <_printf_common+0xb0>
 8005198:	f04f 30ff 	mov.w	r0, #4294967295
 800519c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051a0:	3501      	adds	r5, #1
 80051a2:	e7c4      	b.n	800512e <_printf_common+0x3e>
 80051a4:	2030      	movs	r0, #48	; 0x30
 80051a6:	18e1      	adds	r1, r4, r3
 80051a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051b2:	4422      	add	r2, r4
 80051b4:	3302      	adds	r3, #2
 80051b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051ba:	e7c5      	b.n	8005148 <_printf_common+0x58>
 80051bc:	2301      	movs	r3, #1
 80051be:	4622      	mov	r2, r4
 80051c0:	4649      	mov	r1, r9
 80051c2:	4638      	mov	r0, r7
 80051c4:	47c0      	blx	r8
 80051c6:	3001      	adds	r0, #1
 80051c8:	d0e6      	beq.n	8005198 <_printf_common+0xa8>
 80051ca:	3601      	adds	r6, #1
 80051cc:	e7d9      	b.n	8005182 <_printf_common+0x92>
	...

080051d0 <_printf_i>:
 80051d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051d4:	7e0f      	ldrb	r7, [r1, #24]
 80051d6:	4691      	mov	r9, r2
 80051d8:	2f78      	cmp	r7, #120	; 0x78
 80051da:	4680      	mov	r8, r0
 80051dc:	460c      	mov	r4, r1
 80051de:	469a      	mov	sl, r3
 80051e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80051e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80051e6:	d807      	bhi.n	80051f8 <_printf_i+0x28>
 80051e8:	2f62      	cmp	r7, #98	; 0x62
 80051ea:	d80a      	bhi.n	8005202 <_printf_i+0x32>
 80051ec:	2f00      	cmp	r7, #0
 80051ee:	f000 80d9 	beq.w	80053a4 <_printf_i+0x1d4>
 80051f2:	2f58      	cmp	r7, #88	; 0x58
 80051f4:	f000 80a4 	beq.w	8005340 <_printf_i+0x170>
 80051f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005200:	e03a      	b.n	8005278 <_printf_i+0xa8>
 8005202:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005206:	2b15      	cmp	r3, #21
 8005208:	d8f6      	bhi.n	80051f8 <_printf_i+0x28>
 800520a:	a101      	add	r1, pc, #4	; (adr r1, 8005210 <_printf_i+0x40>)
 800520c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005210:	08005269 	.word	0x08005269
 8005214:	0800527d 	.word	0x0800527d
 8005218:	080051f9 	.word	0x080051f9
 800521c:	080051f9 	.word	0x080051f9
 8005220:	080051f9 	.word	0x080051f9
 8005224:	080051f9 	.word	0x080051f9
 8005228:	0800527d 	.word	0x0800527d
 800522c:	080051f9 	.word	0x080051f9
 8005230:	080051f9 	.word	0x080051f9
 8005234:	080051f9 	.word	0x080051f9
 8005238:	080051f9 	.word	0x080051f9
 800523c:	0800538b 	.word	0x0800538b
 8005240:	080052ad 	.word	0x080052ad
 8005244:	0800536d 	.word	0x0800536d
 8005248:	080051f9 	.word	0x080051f9
 800524c:	080051f9 	.word	0x080051f9
 8005250:	080053ad 	.word	0x080053ad
 8005254:	080051f9 	.word	0x080051f9
 8005258:	080052ad 	.word	0x080052ad
 800525c:	080051f9 	.word	0x080051f9
 8005260:	080051f9 	.word	0x080051f9
 8005264:	08005375 	.word	0x08005375
 8005268:	682b      	ldr	r3, [r5, #0]
 800526a:	1d1a      	adds	r2, r3, #4
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	602a      	str	r2, [r5, #0]
 8005270:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005274:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005278:	2301      	movs	r3, #1
 800527a:	e0a4      	b.n	80053c6 <_printf_i+0x1f6>
 800527c:	6820      	ldr	r0, [r4, #0]
 800527e:	6829      	ldr	r1, [r5, #0]
 8005280:	0606      	lsls	r6, r0, #24
 8005282:	f101 0304 	add.w	r3, r1, #4
 8005286:	d50a      	bpl.n	800529e <_printf_i+0xce>
 8005288:	680e      	ldr	r6, [r1, #0]
 800528a:	602b      	str	r3, [r5, #0]
 800528c:	2e00      	cmp	r6, #0
 800528e:	da03      	bge.n	8005298 <_printf_i+0xc8>
 8005290:	232d      	movs	r3, #45	; 0x2d
 8005292:	4276      	negs	r6, r6
 8005294:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005298:	230a      	movs	r3, #10
 800529a:	485e      	ldr	r0, [pc, #376]	; (8005414 <_printf_i+0x244>)
 800529c:	e019      	b.n	80052d2 <_printf_i+0x102>
 800529e:	680e      	ldr	r6, [r1, #0]
 80052a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80052a4:	602b      	str	r3, [r5, #0]
 80052a6:	bf18      	it	ne
 80052a8:	b236      	sxthne	r6, r6
 80052aa:	e7ef      	b.n	800528c <_printf_i+0xbc>
 80052ac:	682b      	ldr	r3, [r5, #0]
 80052ae:	6820      	ldr	r0, [r4, #0]
 80052b0:	1d19      	adds	r1, r3, #4
 80052b2:	6029      	str	r1, [r5, #0]
 80052b4:	0601      	lsls	r1, r0, #24
 80052b6:	d501      	bpl.n	80052bc <_printf_i+0xec>
 80052b8:	681e      	ldr	r6, [r3, #0]
 80052ba:	e002      	b.n	80052c2 <_printf_i+0xf2>
 80052bc:	0646      	lsls	r6, r0, #25
 80052be:	d5fb      	bpl.n	80052b8 <_printf_i+0xe8>
 80052c0:	881e      	ldrh	r6, [r3, #0]
 80052c2:	2f6f      	cmp	r7, #111	; 0x6f
 80052c4:	bf0c      	ite	eq
 80052c6:	2308      	moveq	r3, #8
 80052c8:	230a      	movne	r3, #10
 80052ca:	4852      	ldr	r0, [pc, #328]	; (8005414 <_printf_i+0x244>)
 80052cc:	2100      	movs	r1, #0
 80052ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052d2:	6865      	ldr	r5, [r4, #4]
 80052d4:	2d00      	cmp	r5, #0
 80052d6:	bfa8      	it	ge
 80052d8:	6821      	ldrge	r1, [r4, #0]
 80052da:	60a5      	str	r5, [r4, #8]
 80052dc:	bfa4      	itt	ge
 80052de:	f021 0104 	bicge.w	r1, r1, #4
 80052e2:	6021      	strge	r1, [r4, #0]
 80052e4:	b90e      	cbnz	r6, 80052ea <_printf_i+0x11a>
 80052e6:	2d00      	cmp	r5, #0
 80052e8:	d04d      	beq.n	8005386 <_printf_i+0x1b6>
 80052ea:	4615      	mov	r5, r2
 80052ec:	fbb6 f1f3 	udiv	r1, r6, r3
 80052f0:	fb03 6711 	mls	r7, r3, r1, r6
 80052f4:	5dc7      	ldrb	r7, [r0, r7]
 80052f6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80052fa:	4637      	mov	r7, r6
 80052fc:	42bb      	cmp	r3, r7
 80052fe:	460e      	mov	r6, r1
 8005300:	d9f4      	bls.n	80052ec <_printf_i+0x11c>
 8005302:	2b08      	cmp	r3, #8
 8005304:	d10b      	bne.n	800531e <_printf_i+0x14e>
 8005306:	6823      	ldr	r3, [r4, #0]
 8005308:	07de      	lsls	r6, r3, #31
 800530a:	d508      	bpl.n	800531e <_printf_i+0x14e>
 800530c:	6923      	ldr	r3, [r4, #16]
 800530e:	6861      	ldr	r1, [r4, #4]
 8005310:	4299      	cmp	r1, r3
 8005312:	bfde      	ittt	le
 8005314:	2330      	movle	r3, #48	; 0x30
 8005316:	f805 3c01 	strble.w	r3, [r5, #-1]
 800531a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800531e:	1b52      	subs	r2, r2, r5
 8005320:	6122      	str	r2, [r4, #16]
 8005322:	464b      	mov	r3, r9
 8005324:	4621      	mov	r1, r4
 8005326:	4640      	mov	r0, r8
 8005328:	f8cd a000 	str.w	sl, [sp]
 800532c:	aa03      	add	r2, sp, #12
 800532e:	f7ff fedf 	bl	80050f0 <_printf_common>
 8005332:	3001      	adds	r0, #1
 8005334:	d14c      	bne.n	80053d0 <_printf_i+0x200>
 8005336:	f04f 30ff 	mov.w	r0, #4294967295
 800533a:	b004      	add	sp, #16
 800533c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005340:	4834      	ldr	r0, [pc, #208]	; (8005414 <_printf_i+0x244>)
 8005342:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005346:	6829      	ldr	r1, [r5, #0]
 8005348:	6823      	ldr	r3, [r4, #0]
 800534a:	f851 6b04 	ldr.w	r6, [r1], #4
 800534e:	6029      	str	r1, [r5, #0]
 8005350:	061d      	lsls	r5, r3, #24
 8005352:	d514      	bpl.n	800537e <_printf_i+0x1ae>
 8005354:	07df      	lsls	r7, r3, #31
 8005356:	bf44      	itt	mi
 8005358:	f043 0320 	orrmi.w	r3, r3, #32
 800535c:	6023      	strmi	r3, [r4, #0]
 800535e:	b91e      	cbnz	r6, 8005368 <_printf_i+0x198>
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	f023 0320 	bic.w	r3, r3, #32
 8005366:	6023      	str	r3, [r4, #0]
 8005368:	2310      	movs	r3, #16
 800536a:	e7af      	b.n	80052cc <_printf_i+0xfc>
 800536c:	6823      	ldr	r3, [r4, #0]
 800536e:	f043 0320 	orr.w	r3, r3, #32
 8005372:	6023      	str	r3, [r4, #0]
 8005374:	2378      	movs	r3, #120	; 0x78
 8005376:	4828      	ldr	r0, [pc, #160]	; (8005418 <_printf_i+0x248>)
 8005378:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800537c:	e7e3      	b.n	8005346 <_printf_i+0x176>
 800537e:	0659      	lsls	r1, r3, #25
 8005380:	bf48      	it	mi
 8005382:	b2b6      	uxthmi	r6, r6
 8005384:	e7e6      	b.n	8005354 <_printf_i+0x184>
 8005386:	4615      	mov	r5, r2
 8005388:	e7bb      	b.n	8005302 <_printf_i+0x132>
 800538a:	682b      	ldr	r3, [r5, #0]
 800538c:	6826      	ldr	r6, [r4, #0]
 800538e:	1d18      	adds	r0, r3, #4
 8005390:	6961      	ldr	r1, [r4, #20]
 8005392:	6028      	str	r0, [r5, #0]
 8005394:	0635      	lsls	r5, r6, #24
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	d501      	bpl.n	800539e <_printf_i+0x1ce>
 800539a:	6019      	str	r1, [r3, #0]
 800539c:	e002      	b.n	80053a4 <_printf_i+0x1d4>
 800539e:	0670      	lsls	r0, r6, #25
 80053a0:	d5fb      	bpl.n	800539a <_printf_i+0x1ca>
 80053a2:	8019      	strh	r1, [r3, #0]
 80053a4:	2300      	movs	r3, #0
 80053a6:	4615      	mov	r5, r2
 80053a8:	6123      	str	r3, [r4, #16]
 80053aa:	e7ba      	b.n	8005322 <_printf_i+0x152>
 80053ac:	682b      	ldr	r3, [r5, #0]
 80053ae:	2100      	movs	r1, #0
 80053b0:	1d1a      	adds	r2, r3, #4
 80053b2:	602a      	str	r2, [r5, #0]
 80053b4:	681d      	ldr	r5, [r3, #0]
 80053b6:	6862      	ldr	r2, [r4, #4]
 80053b8:	4628      	mov	r0, r5
 80053ba:	f000 f82f 	bl	800541c <memchr>
 80053be:	b108      	cbz	r0, 80053c4 <_printf_i+0x1f4>
 80053c0:	1b40      	subs	r0, r0, r5
 80053c2:	6060      	str	r0, [r4, #4]
 80053c4:	6863      	ldr	r3, [r4, #4]
 80053c6:	6123      	str	r3, [r4, #16]
 80053c8:	2300      	movs	r3, #0
 80053ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053ce:	e7a8      	b.n	8005322 <_printf_i+0x152>
 80053d0:	462a      	mov	r2, r5
 80053d2:	4649      	mov	r1, r9
 80053d4:	4640      	mov	r0, r8
 80053d6:	6923      	ldr	r3, [r4, #16]
 80053d8:	47d0      	blx	sl
 80053da:	3001      	adds	r0, #1
 80053dc:	d0ab      	beq.n	8005336 <_printf_i+0x166>
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	079b      	lsls	r3, r3, #30
 80053e2:	d413      	bmi.n	800540c <_printf_i+0x23c>
 80053e4:	68e0      	ldr	r0, [r4, #12]
 80053e6:	9b03      	ldr	r3, [sp, #12]
 80053e8:	4298      	cmp	r0, r3
 80053ea:	bfb8      	it	lt
 80053ec:	4618      	movlt	r0, r3
 80053ee:	e7a4      	b.n	800533a <_printf_i+0x16a>
 80053f0:	2301      	movs	r3, #1
 80053f2:	4632      	mov	r2, r6
 80053f4:	4649      	mov	r1, r9
 80053f6:	4640      	mov	r0, r8
 80053f8:	47d0      	blx	sl
 80053fa:	3001      	adds	r0, #1
 80053fc:	d09b      	beq.n	8005336 <_printf_i+0x166>
 80053fe:	3501      	adds	r5, #1
 8005400:	68e3      	ldr	r3, [r4, #12]
 8005402:	9903      	ldr	r1, [sp, #12]
 8005404:	1a5b      	subs	r3, r3, r1
 8005406:	42ab      	cmp	r3, r5
 8005408:	dcf2      	bgt.n	80053f0 <_printf_i+0x220>
 800540a:	e7eb      	b.n	80053e4 <_printf_i+0x214>
 800540c:	2500      	movs	r5, #0
 800540e:	f104 0619 	add.w	r6, r4, #25
 8005412:	e7f5      	b.n	8005400 <_printf_i+0x230>
 8005414:	08005a19 	.word	0x08005a19
 8005418:	08005a2a 	.word	0x08005a2a

0800541c <memchr>:
 800541c:	4603      	mov	r3, r0
 800541e:	b510      	push	{r4, lr}
 8005420:	b2c9      	uxtb	r1, r1
 8005422:	4402      	add	r2, r0
 8005424:	4293      	cmp	r3, r2
 8005426:	4618      	mov	r0, r3
 8005428:	d101      	bne.n	800542e <memchr+0x12>
 800542a:	2000      	movs	r0, #0
 800542c:	e003      	b.n	8005436 <memchr+0x1a>
 800542e:	7804      	ldrb	r4, [r0, #0]
 8005430:	3301      	adds	r3, #1
 8005432:	428c      	cmp	r4, r1
 8005434:	d1f6      	bne.n	8005424 <memchr+0x8>
 8005436:	bd10      	pop	{r4, pc}

08005438 <memmove>:
 8005438:	4288      	cmp	r0, r1
 800543a:	b510      	push	{r4, lr}
 800543c:	eb01 0402 	add.w	r4, r1, r2
 8005440:	d902      	bls.n	8005448 <memmove+0x10>
 8005442:	4284      	cmp	r4, r0
 8005444:	4623      	mov	r3, r4
 8005446:	d807      	bhi.n	8005458 <memmove+0x20>
 8005448:	1e43      	subs	r3, r0, #1
 800544a:	42a1      	cmp	r1, r4
 800544c:	d008      	beq.n	8005460 <memmove+0x28>
 800544e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005452:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005456:	e7f8      	b.n	800544a <memmove+0x12>
 8005458:	4601      	mov	r1, r0
 800545a:	4402      	add	r2, r0
 800545c:	428a      	cmp	r2, r1
 800545e:	d100      	bne.n	8005462 <memmove+0x2a>
 8005460:	bd10      	pop	{r4, pc}
 8005462:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005466:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800546a:	e7f7      	b.n	800545c <memmove+0x24>

0800546c <_free_r>:
 800546c:	b538      	push	{r3, r4, r5, lr}
 800546e:	4605      	mov	r5, r0
 8005470:	2900      	cmp	r1, #0
 8005472:	d040      	beq.n	80054f6 <_free_r+0x8a>
 8005474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005478:	1f0c      	subs	r4, r1, #4
 800547a:	2b00      	cmp	r3, #0
 800547c:	bfb8      	it	lt
 800547e:	18e4      	addlt	r4, r4, r3
 8005480:	f000 f910 	bl	80056a4 <__malloc_lock>
 8005484:	4a1c      	ldr	r2, [pc, #112]	; (80054f8 <_free_r+0x8c>)
 8005486:	6813      	ldr	r3, [r2, #0]
 8005488:	b933      	cbnz	r3, 8005498 <_free_r+0x2c>
 800548a:	6063      	str	r3, [r4, #4]
 800548c:	6014      	str	r4, [r2, #0]
 800548e:	4628      	mov	r0, r5
 8005490:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005494:	f000 b90c 	b.w	80056b0 <__malloc_unlock>
 8005498:	42a3      	cmp	r3, r4
 800549a:	d908      	bls.n	80054ae <_free_r+0x42>
 800549c:	6820      	ldr	r0, [r4, #0]
 800549e:	1821      	adds	r1, r4, r0
 80054a0:	428b      	cmp	r3, r1
 80054a2:	bf01      	itttt	eq
 80054a4:	6819      	ldreq	r1, [r3, #0]
 80054a6:	685b      	ldreq	r3, [r3, #4]
 80054a8:	1809      	addeq	r1, r1, r0
 80054aa:	6021      	streq	r1, [r4, #0]
 80054ac:	e7ed      	b.n	800548a <_free_r+0x1e>
 80054ae:	461a      	mov	r2, r3
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	b10b      	cbz	r3, 80054b8 <_free_r+0x4c>
 80054b4:	42a3      	cmp	r3, r4
 80054b6:	d9fa      	bls.n	80054ae <_free_r+0x42>
 80054b8:	6811      	ldr	r1, [r2, #0]
 80054ba:	1850      	adds	r0, r2, r1
 80054bc:	42a0      	cmp	r0, r4
 80054be:	d10b      	bne.n	80054d8 <_free_r+0x6c>
 80054c0:	6820      	ldr	r0, [r4, #0]
 80054c2:	4401      	add	r1, r0
 80054c4:	1850      	adds	r0, r2, r1
 80054c6:	4283      	cmp	r3, r0
 80054c8:	6011      	str	r1, [r2, #0]
 80054ca:	d1e0      	bne.n	800548e <_free_r+0x22>
 80054cc:	6818      	ldr	r0, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	4401      	add	r1, r0
 80054d2:	6011      	str	r1, [r2, #0]
 80054d4:	6053      	str	r3, [r2, #4]
 80054d6:	e7da      	b.n	800548e <_free_r+0x22>
 80054d8:	d902      	bls.n	80054e0 <_free_r+0x74>
 80054da:	230c      	movs	r3, #12
 80054dc:	602b      	str	r3, [r5, #0]
 80054de:	e7d6      	b.n	800548e <_free_r+0x22>
 80054e0:	6820      	ldr	r0, [r4, #0]
 80054e2:	1821      	adds	r1, r4, r0
 80054e4:	428b      	cmp	r3, r1
 80054e6:	bf01      	itttt	eq
 80054e8:	6819      	ldreq	r1, [r3, #0]
 80054ea:	685b      	ldreq	r3, [r3, #4]
 80054ec:	1809      	addeq	r1, r1, r0
 80054ee:	6021      	streq	r1, [r4, #0]
 80054f0:	6063      	str	r3, [r4, #4]
 80054f2:	6054      	str	r4, [r2, #4]
 80054f4:	e7cb      	b.n	800548e <_free_r+0x22>
 80054f6:	bd38      	pop	{r3, r4, r5, pc}
 80054f8:	200030c4 	.word	0x200030c4

080054fc <sbrk_aligned>:
 80054fc:	b570      	push	{r4, r5, r6, lr}
 80054fe:	4e0e      	ldr	r6, [pc, #56]	; (8005538 <sbrk_aligned+0x3c>)
 8005500:	460c      	mov	r4, r1
 8005502:	6831      	ldr	r1, [r6, #0]
 8005504:	4605      	mov	r5, r0
 8005506:	b911      	cbnz	r1, 800550e <sbrk_aligned+0x12>
 8005508:	f000 f8bc 	bl	8005684 <_sbrk_r>
 800550c:	6030      	str	r0, [r6, #0]
 800550e:	4621      	mov	r1, r4
 8005510:	4628      	mov	r0, r5
 8005512:	f000 f8b7 	bl	8005684 <_sbrk_r>
 8005516:	1c43      	adds	r3, r0, #1
 8005518:	d00a      	beq.n	8005530 <sbrk_aligned+0x34>
 800551a:	1cc4      	adds	r4, r0, #3
 800551c:	f024 0403 	bic.w	r4, r4, #3
 8005520:	42a0      	cmp	r0, r4
 8005522:	d007      	beq.n	8005534 <sbrk_aligned+0x38>
 8005524:	1a21      	subs	r1, r4, r0
 8005526:	4628      	mov	r0, r5
 8005528:	f000 f8ac 	bl	8005684 <_sbrk_r>
 800552c:	3001      	adds	r0, #1
 800552e:	d101      	bne.n	8005534 <sbrk_aligned+0x38>
 8005530:	f04f 34ff 	mov.w	r4, #4294967295
 8005534:	4620      	mov	r0, r4
 8005536:	bd70      	pop	{r4, r5, r6, pc}
 8005538:	200030c8 	.word	0x200030c8

0800553c <_malloc_r>:
 800553c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005540:	1ccd      	adds	r5, r1, #3
 8005542:	f025 0503 	bic.w	r5, r5, #3
 8005546:	3508      	adds	r5, #8
 8005548:	2d0c      	cmp	r5, #12
 800554a:	bf38      	it	cc
 800554c:	250c      	movcc	r5, #12
 800554e:	2d00      	cmp	r5, #0
 8005550:	4607      	mov	r7, r0
 8005552:	db01      	blt.n	8005558 <_malloc_r+0x1c>
 8005554:	42a9      	cmp	r1, r5
 8005556:	d905      	bls.n	8005564 <_malloc_r+0x28>
 8005558:	230c      	movs	r3, #12
 800555a:	2600      	movs	r6, #0
 800555c:	603b      	str	r3, [r7, #0]
 800555e:	4630      	mov	r0, r6
 8005560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005564:	4e2e      	ldr	r6, [pc, #184]	; (8005620 <_malloc_r+0xe4>)
 8005566:	f000 f89d 	bl	80056a4 <__malloc_lock>
 800556a:	6833      	ldr	r3, [r6, #0]
 800556c:	461c      	mov	r4, r3
 800556e:	bb34      	cbnz	r4, 80055be <_malloc_r+0x82>
 8005570:	4629      	mov	r1, r5
 8005572:	4638      	mov	r0, r7
 8005574:	f7ff ffc2 	bl	80054fc <sbrk_aligned>
 8005578:	1c43      	adds	r3, r0, #1
 800557a:	4604      	mov	r4, r0
 800557c:	d14d      	bne.n	800561a <_malloc_r+0xde>
 800557e:	6834      	ldr	r4, [r6, #0]
 8005580:	4626      	mov	r6, r4
 8005582:	2e00      	cmp	r6, #0
 8005584:	d140      	bne.n	8005608 <_malloc_r+0xcc>
 8005586:	6823      	ldr	r3, [r4, #0]
 8005588:	4631      	mov	r1, r6
 800558a:	4638      	mov	r0, r7
 800558c:	eb04 0803 	add.w	r8, r4, r3
 8005590:	f000 f878 	bl	8005684 <_sbrk_r>
 8005594:	4580      	cmp	r8, r0
 8005596:	d13a      	bne.n	800560e <_malloc_r+0xd2>
 8005598:	6821      	ldr	r1, [r4, #0]
 800559a:	3503      	adds	r5, #3
 800559c:	1a6d      	subs	r5, r5, r1
 800559e:	f025 0503 	bic.w	r5, r5, #3
 80055a2:	3508      	adds	r5, #8
 80055a4:	2d0c      	cmp	r5, #12
 80055a6:	bf38      	it	cc
 80055a8:	250c      	movcc	r5, #12
 80055aa:	4638      	mov	r0, r7
 80055ac:	4629      	mov	r1, r5
 80055ae:	f7ff ffa5 	bl	80054fc <sbrk_aligned>
 80055b2:	3001      	adds	r0, #1
 80055b4:	d02b      	beq.n	800560e <_malloc_r+0xd2>
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	442b      	add	r3, r5
 80055ba:	6023      	str	r3, [r4, #0]
 80055bc:	e00e      	b.n	80055dc <_malloc_r+0xa0>
 80055be:	6822      	ldr	r2, [r4, #0]
 80055c0:	1b52      	subs	r2, r2, r5
 80055c2:	d41e      	bmi.n	8005602 <_malloc_r+0xc6>
 80055c4:	2a0b      	cmp	r2, #11
 80055c6:	d916      	bls.n	80055f6 <_malloc_r+0xba>
 80055c8:	1961      	adds	r1, r4, r5
 80055ca:	42a3      	cmp	r3, r4
 80055cc:	6025      	str	r5, [r4, #0]
 80055ce:	bf18      	it	ne
 80055d0:	6059      	strne	r1, [r3, #4]
 80055d2:	6863      	ldr	r3, [r4, #4]
 80055d4:	bf08      	it	eq
 80055d6:	6031      	streq	r1, [r6, #0]
 80055d8:	5162      	str	r2, [r4, r5]
 80055da:	604b      	str	r3, [r1, #4]
 80055dc:	4638      	mov	r0, r7
 80055de:	f104 060b 	add.w	r6, r4, #11
 80055e2:	f000 f865 	bl	80056b0 <__malloc_unlock>
 80055e6:	f026 0607 	bic.w	r6, r6, #7
 80055ea:	1d23      	adds	r3, r4, #4
 80055ec:	1af2      	subs	r2, r6, r3
 80055ee:	d0b6      	beq.n	800555e <_malloc_r+0x22>
 80055f0:	1b9b      	subs	r3, r3, r6
 80055f2:	50a3      	str	r3, [r4, r2]
 80055f4:	e7b3      	b.n	800555e <_malloc_r+0x22>
 80055f6:	6862      	ldr	r2, [r4, #4]
 80055f8:	42a3      	cmp	r3, r4
 80055fa:	bf0c      	ite	eq
 80055fc:	6032      	streq	r2, [r6, #0]
 80055fe:	605a      	strne	r2, [r3, #4]
 8005600:	e7ec      	b.n	80055dc <_malloc_r+0xa0>
 8005602:	4623      	mov	r3, r4
 8005604:	6864      	ldr	r4, [r4, #4]
 8005606:	e7b2      	b.n	800556e <_malloc_r+0x32>
 8005608:	4634      	mov	r4, r6
 800560a:	6876      	ldr	r6, [r6, #4]
 800560c:	e7b9      	b.n	8005582 <_malloc_r+0x46>
 800560e:	230c      	movs	r3, #12
 8005610:	4638      	mov	r0, r7
 8005612:	603b      	str	r3, [r7, #0]
 8005614:	f000 f84c 	bl	80056b0 <__malloc_unlock>
 8005618:	e7a1      	b.n	800555e <_malloc_r+0x22>
 800561a:	6025      	str	r5, [r4, #0]
 800561c:	e7de      	b.n	80055dc <_malloc_r+0xa0>
 800561e:	bf00      	nop
 8005620:	200030c4 	.word	0x200030c4

08005624 <_realloc_r>:
 8005624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005628:	4680      	mov	r8, r0
 800562a:	4614      	mov	r4, r2
 800562c:	460e      	mov	r6, r1
 800562e:	b921      	cbnz	r1, 800563a <_realloc_r+0x16>
 8005630:	4611      	mov	r1, r2
 8005632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005636:	f7ff bf81 	b.w	800553c <_malloc_r>
 800563a:	b92a      	cbnz	r2, 8005648 <_realloc_r+0x24>
 800563c:	f7ff ff16 	bl	800546c <_free_r>
 8005640:	4625      	mov	r5, r4
 8005642:	4628      	mov	r0, r5
 8005644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005648:	f000 f838 	bl	80056bc <_malloc_usable_size_r>
 800564c:	4284      	cmp	r4, r0
 800564e:	4607      	mov	r7, r0
 8005650:	d802      	bhi.n	8005658 <_realloc_r+0x34>
 8005652:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005656:	d812      	bhi.n	800567e <_realloc_r+0x5a>
 8005658:	4621      	mov	r1, r4
 800565a:	4640      	mov	r0, r8
 800565c:	f7ff ff6e 	bl	800553c <_malloc_r>
 8005660:	4605      	mov	r5, r0
 8005662:	2800      	cmp	r0, #0
 8005664:	d0ed      	beq.n	8005642 <_realloc_r+0x1e>
 8005666:	42bc      	cmp	r4, r7
 8005668:	4622      	mov	r2, r4
 800566a:	4631      	mov	r1, r6
 800566c:	bf28      	it	cs
 800566e:	463a      	movcs	r2, r7
 8005670:	f7ff fbac 	bl	8004dcc <memcpy>
 8005674:	4631      	mov	r1, r6
 8005676:	4640      	mov	r0, r8
 8005678:	f7ff fef8 	bl	800546c <_free_r>
 800567c:	e7e1      	b.n	8005642 <_realloc_r+0x1e>
 800567e:	4635      	mov	r5, r6
 8005680:	e7df      	b.n	8005642 <_realloc_r+0x1e>
	...

08005684 <_sbrk_r>:
 8005684:	b538      	push	{r3, r4, r5, lr}
 8005686:	2300      	movs	r3, #0
 8005688:	4d05      	ldr	r5, [pc, #20]	; (80056a0 <_sbrk_r+0x1c>)
 800568a:	4604      	mov	r4, r0
 800568c:	4608      	mov	r0, r1
 800568e:	602b      	str	r3, [r5, #0]
 8005690:	f7fc f98c 	bl	80019ac <_sbrk>
 8005694:	1c43      	adds	r3, r0, #1
 8005696:	d102      	bne.n	800569e <_sbrk_r+0x1a>
 8005698:	682b      	ldr	r3, [r5, #0]
 800569a:	b103      	cbz	r3, 800569e <_sbrk_r+0x1a>
 800569c:	6023      	str	r3, [r4, #0]
 800569e:	bd38      	pop	{r3, r4, r5, pc}
 80056a0:	200030cc 	.word	0x200030cc

080056a4 <__malloc_lock>:
 80056a4:	4801      	ldr	r0, [pc, #4]	; (80056ac <__malloc_lock+0x8>)
 80056a6:	f000 b811 	b.w	80056cc <__retarget_lock_acquire_recursive>
 80056aa:	bf00      	nop
 80056ac:	200030d0 	.word	0x200030d0

080056b0 <__malloc_unlock>:
 80056b0:	4801      	ldr	r0, [pc, #4]	; (80056b8 <__malloc_unlock+0x8>)
 80056b2:	f000 b80c 	b.w	80056ce <__retarget_lock_release_recursive>
 80056b6:	bf00      	nop
 80056b8:	200030d0 	.word	0x200030d0

080056bc <_malloc_usable_size_r>:
 80056bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056c0:	1f18      	subs	r0, r3, #4
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	bfbc      	itt	lt
 80056c6:	580b      	ldrlt	r3, [r1, r0]
 80056c8:	18c0      	addlt	r0, r0, r3
 80056ca:	4770      	bx	lr

080056cc <__retarget_lock_acquire_recursive>:
 80056cc:	4770      	bx	lr

080056ce <__retarget_lock_release_recursive>:
 80056ce:	4770      	bx	lr

080056d0 <_init>:
 80056d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d2:	bf00      	nop
 80056d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056d6:	bc08      	pop	{r3}
 80056d8:	469e      	mov	lr, r3
 80056da:	4770      	bx	lr

080056dc <_fini>:
 80056dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056de:	bf00      	nop
 80056e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056e2:	bc08      	pop	{r3}
 80056e4:	469e      	mov	lr, r3
 80056e6:	4770      	bx	lr
