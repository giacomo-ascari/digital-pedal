
gt_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080039d4  080039d4  000139d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a4c  08003a4c  00020338  2**0
                  CONTENTS
  4 .ARM          00000000  08003a4c  08003a4c  00020338  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a4c  08003a4c  00020338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a4c  08003a4c  00013a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a50  08003a50  00013a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000338  20000000  08003a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d28  20000338  08003d8c  00020338  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002060  08003d8c  00022060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020338  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000976e  00000000  00000000  00020361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fd7  00000000  00000000  00029acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  0002baa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002c4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bfa  00000000  00000000  0002cdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b539  00000000  00000000  000449ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084821  00000000  00000000  0004ff23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d4744  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bac  00000000  00000000  000d4794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000338 	.word	0x20000338
 8000128:	00000000 	.word	0x00000000
 800012c:	080039bc 	.word	0x080039bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000033c 	.word	0x2000033c
 8000148:	080039bc 	.word	0x080039bc

0800014c <HAL_UART_RxHalfCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b0a4      	sub	sp, #144	; 0x90
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	Command command;
	memcpy(&command, hcommander.uart_rx_buffer, COMMAND_BYTESIZE);
 8000154:	f107 030c 	add.w	r3, r7, #12
 8000158:	2282      	movs	r2, #130	; 0x82
 800015a:	4907      	ldr	r1, [pc, #28]	; (8000178 <HAL_UART_RxHalfCpltCallback+0x2c>)
 800015c:	4618      	mov	r0, r3
 800015e:	f002 ffab 	bl	80030b8 <memcpy>
	Commander_Enqueue(&hcommander, &command);
 8000162:	f107 030c 	add.w	r3, r7, #12
 8000166:	4619      	mov	r1, r3
 8000168:	4804      	ldr	r0, [pc, #16]	; (800017c <HAL_UART_RxHalfCpltCallback+0x30>)
 800016a:	f000 fc93 	bl	8000a94 <Commander_Enqueue>
}
 800016e:	bf00      	nop
 8000170:	3790      	adds	r7, #144	; 0x90
 8000172:	46bd      	mov	sp, r7
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	2000043c 	.word	0x2000043c
 800017c:	20000434 	.word	0x20000434

08000180 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b0a4      	sub	sp, #144	; 0x90
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	Command command;
	memcpy(&command, hcommander.uart_rx_buffer + COMMAND_BYTESIZE, COMMAND_BYTESIZE);
 8000188:	4908      	ldr	r1, [pc, #32]	; (80001ac <HAL_UART_RxCpltCallback+0x2c>)
 800018a:	f107 030c 	add.w	r3, r7, #12
 800018e:	2282      	movs	r2, #130	; 0x82
 8000190:	4618      	mov	r0, r3
 8000192:	f002 ff91 	bl	80030b8 <memcpy>
	Commander_Enqueue(&hcommander, &command);
 8000196:	f107 030c 	add.w	r3, r7, #12
 800019a:	4619      	mov	r1, r3
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <HAL_UART_RxCpltCallback+0x30>)
 800019e:	f000 fc79 	bl	8000a94 <Commander_Enqueue>
}
 80001a2:	bf00      	nop
 80001a4:	3790      	adds	r7, #144	; 0x90
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	200004be 	.word	0x200004be
 80001b0:	20000434 	.word	0x20000434

080001b4 <command_callback>:

void command_callback(Command command) {
 80001b4:	b084      	sub	sp, #16
 80001b6:	b580      	push	{r7, lr}
 80001b8:	b086      	sub	sp, #24
 80001ba:	af00      	add	r7, sp, #0
 80001bc:	f107 0c20 	add.w	ip, r7, #32
 80001c0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	if (command.header == 0x05) {
 80001c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80001c8:	2b05      	cmp	r3, #5
 80001ca:	d12b      	bne.n	8000224 <command_callback+0x70>
		EPD_Init(&hepd1);
 80001cc:	4819      	ldr	r0, [pc, #100]	; (8000234 <command_callback+0x80>)
 80001ce:	f000 fe09 	bl	8000de4 <EPD_Init>

		char row[16+1];
		draw_clean(hepd1.image);
 80001d2:	4819      	ldr	r0, [pc, #100]	; (8000238 <command_callback+0x84>)
 80001d4:	f000 ffed 	bl	80011b2 <draw_clean>

		sprintf(row, "g33ky toad");
 80001d8:	463b      	mov	r3, r7
 80001da:	4918      	ldr	r1, [pc, #96]	; (800023c <command_callback+0x88>)
 80001dc:	4618      	mov	r0, r3
 80001de:	f002 ff81 	bl	80030e4 <siprintf>
		draw_text(hepd1.image, row, 40, 60);
 80001e2:	4639      	mov	r1, r7
 80001e4:	233c      	movs	r3, #60	; 0x3c
 80001e6:	2228      	movs	r2, #40	; 0x28
 80001e8:	4813      	ldr	r0, [pc, #76]	; (8000238 <command_callback+0x84>)
 80001ea:	f000 ffb3 	bl	8001154 <draw_text>

		for(int i = 0; i < 128; i++) {
 80001ee:	2300      	movs	r3, #0
 80001f0:	617b      	str	r3, [r7, #20]
 80001f2:	e00e      	b.n	8000212 <command_callback+0x5e>
			toggle_single_pixel(hepd1.image, i, command.payload.bytes[i]);
 80001f4:	697b      	ldr	r3, [r7, #20]
 80001f6:	b299      	uxth	r1, r3
 80001f8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80001fc:	697b      	ldr	r3, [r7, #20]
 80001fe:	4413      	add	r3, r2
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	b29b      	uxth	r3, r3
 8000204:	461a      	mov	r2, r3
 8000206:	480c      	ldr	r0, [pc, #48]	; (8000238 <command_callback+0x84>)
 8000208:	f000 feb3 	bl	8000f72 <toggle_single_pixel>
		for(int i = 0; i < 128; i++) {
 800020c:	697b      	ldr	r3, [r7, #20]
 800020e:	3301      	adds	r3, #1
 8000210:	617b      	str	r3, [r7, #20]
 8000212:	697b      	ldr	r3, [r7, #20]
 8000214:	2b7f      	cmp	r3, #127	; 0x7f
 8000216:	dded      	ble.n	80001f4 <command_callback+0x40>
		}

		EPD_Display(&hepd1);
 8000218:	4806      	ldr	r0, [pc, #24]	; (8000234 <command_callback+0x80>)
 800021a:	f000 fe55 	bl	8000ec8 <EPD_Display>
		EPD_Sleep(&hepd1);
 800021e:	4805      	ldr	r0, [pc, #20]	; (8000234 <command_callback+0x80>)
 8000220:	f000 fe70 	bl	8000f04 <EPD_Sleep>
	}

}
 8000224:	bf00      	nop
 8000226:	3718      	adds	r7, #24
 8000228:	46bd      	mov	sp, r7
 800022a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800022e:	b004      	add	sp, #16
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	20000d8c 	.word	0x20000d8c
 8000238:	20000d8e 	.word	0x20000d8e
 800023c:	080039d4 	.word	0x080039d4

08000240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000240:	b590      	push	{r4, r7, lr}
 8000242:	b08b      	sub	sp, #44	; 0x2c
 8000244:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000246:	f001 f8e1 	bl	800140c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024a:	f000 f8ab 	bl	80003a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024e:	f000 f96f 	bl	8000530 <MX_GPIO_Init>
  MX_DMA_Init();
 8000252:	f000 f94f 	bl	80004f4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000256:	f000 f923 	bl	80004a0 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 800025a:	f000 f8e9 	bl	8000430 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	Commander_Init(&hcommander, &huart3, &hdma_usart3_rx, command_callback);
 800025e:	4b42      	ldr	r3, [pc, #264]	; (8000368 <main+0x128>)
 8000260:	4a42      	ldr	r2, [pc, #264]	; (800036c <main+0x12c>)
 8000262:	4943      	ldr	r1, [pc, #268]	; (8000370 <main+0x130>)
 8000264:	4843      	ldr	r0, [pc, #268]	; (8000374 <main+0x134>)
 8000266:	f000 fb8a 	bl	800097e <Commander_Init>
	Commander_Start(&hcommander);
 800026a:	4842      	ldr	r0, [pc, #264]	; (8000374 <main+0x134>)
 800026c:	f000 fbad 	bl	80009ca <Commander_Start>

	RE_Init(&hre1, ENC1B_GPIO_Port, ENC1A_GPIO_Port, ENC1B_Pin, ENC1A_Pin, 2);
 8000270:	2302      	movs	r3, #2
 8000272:	9301      	str	r3, [sp, #4]
 8000274:	2380      	movs	r3, #128	; 0x80
 8000276:	9300      	str	r3, [sp, #0]
 8000278:	2340      	movs	r3, #64	; 0x40
 800027a:	4a3f      	ldr	r2, [pc, #252]	; (8000378 <main+0x138>)
 800027c:	493e      	ldr	r1, [pc, #248]	; (8000378 <main+0x138>)
 800027e:	483f      	ldr	r0, [pc, #252]	; (800037c <main+0x13c>)
 8000280:	f000 ffb3 	bl	80011ea <RE_Init>
	RE_Init(&hre2, ENC2A_GPIO_Port, ENC2B_GPIO_Port, ENC2A_Pin, ENC2B_Pin, 1);
 8000284:	2301      	movs	r3, #1
 8000286:	9301      	str	r3, [sp, #4]
 8000288:	2301      	movs	r3, #1
 800028a:	9300      	str	r3, [sp, #0]
 800028c:	2302      	movs	r3, #2
 800028e:	4a3c      	ldr	r2, [pc, #240]	; (8000380 <main+0x140>)
 8000290:	493b      	ldr	r1, [pc, #236]	; (8000380 <main+0x140>)
 8000292:	483c      	ldr	r0, [pc, #240]	; (8000384 <main+0x144>)
 8000294:	f000 ffa9 	bl	80011ea <RE_Init>

	EPD_Init(&hepd1);
 8000298:	483b      	ldr	r0, [pc, #236]	; (8000388 <main+0x148>)
 800029a:	f000 fda3 	bl	8000de4 <EPD_Init>
	EPD_Clear(&hepd1);
 800029e:	483a      	ldr	r0, [pc, #232]	; (8000388 <main+0x148>)
 80002a0:	f000 fdf8 	bl	8000e94 <EPD_Clear>

	char row[16+1];
	draw_clean(hepd1.image);
 80002a4:	4839      	ldr	r0, [pc, #228]	; (800038c <main+0x14c>)
 80002a6:	f000 ff84 	bl	80011b2 <draw_clean>
	draw_rectangle(hepd1.image, 36, 56, 88, 20);
 80002aa:	2314      	movs	r3, #20
 80002ac:	9300      	str	r3, [sp, #0]
 80002ae:	2358      	movs	r3, #88	; 0x58
 80002b0:	2238      	movs	r2, #56	; 0x38
 80002b2:	2124      	movs	r1, #36	; 0x24
 80002b4:	4835      	ldr	r0, [pc, #212]	; (800038c <main+0x14c>)
 80002b6:	f000 fe8d 	bl	8000fd4 <draw_rectangle>

	sprintf(row, "g33ky toad");
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	4934      	ldr	r1, [pc, #208]	; (8000390 <main+0x150>)
 80002be:	4618      	mov	r0, r3
 80002c0:	f002 ff10 	bl	80030e4 <siprintf>
	draw_text(hepd1.image, row, 40, 60);
 80002c4:	1d39      	adds	r1, r7, #4
 80002c6:	233c      	movs	r3, #60	; 0x3c
 80002c8:	2228      	movs	r2, #40	; 0x28
 80002ca:	4830      	ldr	r0, [pc, #192]	; (800038c <main+0x14c>)
 80002cc:	f000 ff42 	bl	8001154 <draw_text>

	sprintf(row, "digital pedal");
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	4930      	ldr	r1, [pc, #192]	; (8000394 <main+0x154>)
 80002d4:	4618      	mov	r0, r3
 80002d6:	f002 ff05 	bl	80030e4 <siprintf>
	draw_text(hepd1.image, row, 20, 90);
 80002da:	1d39      	adds	r1, r7, #4
 80002dc:	235a      	movs	r3, #90	; 0x5a
 80002de:	2214      	movs	r2, #20
 80002e0:	482a      	ldr	r0, [pc, #168]	; (800038c <main+0x14c>)
 80002e2:	f000 ff37 	bl	8001154 <draw_text>

	EPD_Display(&hepd1);
 80002e6:	4828      	ldr	r0, [pc, #160]	; (8000388 <main+0x148>)
 80002e8:	f000 fdee 	bl	8000ec8 <EPD_Display>
	EPD_Sleep(&hepd1);
 80002ec:	4826      	ldr	r0, [pc, #152]	; (8000388 <main+0x148>)
 80002ee:	f000 fe09 	bl	8000f04 <EPD_Sleep>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		Commander_Process(&hcommander);
 80002f2:	4820      	ldr	r0, [pc, #128]	; (8000374 <main+0x134>)
 80002f4:	f000 fb7a 	bl	80009ec <Commander_Process>

		RE_Process(&hre1);
 80002f8:	4820      	ldr	r0, [pc, #128]	; (800037c <main+0x13c>)
 80002fa:	f000 ffa3 	bl	8001244 <RE_Process>
		RE_Process(&hre2);
 80002fe:	4821      	ldr	r0, [pc, #132]	; (8000384 <main+0x144>)
 8000300:	f000 ffa0 	bl	8001244 <RE_Process>

		for (int i = 0; i < 6; i++) {
 8000304:	2300      	movs	r3, #0
 8000306:	61fb      	str	r3, [r7, #28]
 8000308:	e02a      	b.n	8000360 <main+0x120>
			int thr = (RE_GetCount(&hre1) + RE_GetCount(&hre2)) % 6;
 800030a:	481c      	ldr	r0, [pc, #112]	; (800037c <main+0x13c>)
 800030c:	f001 f864 	bl	80013d8 <RE_GetCount>
 8000310:	4603      	mov	r3, r0
 8000312:	461c      	mov	r4, r3
 8000314:	481b      	ldr	r0, [pc, #108]	; (8000384 <main+0x144>)
 8000316:	f001 f85f 	bl	80013d8 <RE_GetCount>
 800031a:	4603      	mov	r3, r0
 800031c:	18e2      	adds	r2, r4, r3
 800031e:	4b1e      	ldr	r3, [pc, #120]	; (8000398 <main+0x158>)
 8000320:	fb83 3102 	smull	r3, r1, r3, r2
 8000324:	17d3      	asrs	r3, r2, #31
 8000326:	1ac9      	subs	r1, r1, r3
 8000328:	460b      	mov	r3, r1
 800032a:	005b      	lsls	r3, r3, #1
 800032c:	440b      	add	r3, r1
 800032e:	005b      	lsls	r3, r3, #1
 8000330:	1ad3      	subs	r3, r2, r3
 8000332:	61bb      	str	r3, [r7, #24]
			HAL_GPIO_WritePin((GPIO_TypeDef *)led_port[i], led_pins[i], i <= thr ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000334:	4a19      	ldr	r2, [pc, #100]	; (800039c <main+0x15c>)
 8000336:	69fb      	ldr	r3, [r7, #28]
 8000338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800033c:	4618      	mov	r0, r3
 800033e:	4a18      	ldr	r2, [pc, #96]	; (80003a0 <main+0x160>)
 8000340:	69fb      	ldr	r3, [r7, #28]
 8000342:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000346:	69fa      	ldr	r2, [r7, #28]
 8000348:	69bb      	ldr	r3, [r7, #24]
 800034a:	429a      	cmp	r2, r3
 800034c:	bfd4      	ite	le
 800034e:	2301      	movle	r3, #1
 8000350:	2300      	movgt	r3, #0
 8000352:	b2db      	uxtb	r3, r3
 8000354:	461a      	mov	r2, r3
 8000356:	f001 fd76 	bl	8001e46 <HAL_GPIO_WritePin>
		for (int i = 0; i < 6; i++) {
 800035a:	69fb      	ldr	r3, [r7, #28]
 800035c:	3301      	adds	r3, #1
 800035e:	61fb      	str	r3, [r7, #28]
 8000360:	69fb      	ldr	r3, [r7, #28]
 8000362:	2b05      	cmp	r3, #5
 8000364:	ddd1      	ble.n	800030a <main+0xca>
		Commander_Process(&hcommander);
 8000366:	e7c4      	b.n	80002f2 <main+0xb2>
 8000368:	080001b5 	.word	0x080001b5
 800036c:	200003f0 	.word	0x200003f0
 8000370:	200003ac 	.word	0x200003ac
 8000374:	20000434 	.word	0x20000434
 8000378:	40010c00 	.word	0x40010c00
 800037c:	20002010 	.word	0x20002010
 8000380:	40010800 	.word	0x40010800
 8000384:	2000202c 	.word	0x2000202c
 8000388:	20000d8c 	.word	0x20000d8c
 800038c:	20000d8e 	.word	0x20000d8e
 8000390:	080039d4 	.word	0x080039d4
 8000394:	080039e0 	.word	0x080039e0
 8000398:	2aaaaaab 	.word	0x2aaaaaab
 800039c:	2000000c 	.word	0x2000000c
 80003a0:	20000000 	.word	0x20000000

080003a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b090      	sub	sp, #64	; 0x40
 80003a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003aa:	f107 0318 	add.w	r3, r7, #24
 80003ae:	2228      	movs	r2, #40	; 0x28
 80003b0:	2100      	movs	r1, #0
 80003b2:	4618      	mov	r0, r3
 80003b4:	f002 fe8e 	bl	80030d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]
 80003c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003c6:	2301      	movs	r3, #1
 80003c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003d0:	2300      	movs	r3, #0
 80003d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003d4:	2301      	movs	r3, #1
 80003d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d8:	2302      	movs	r3, #2
 80003da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003e2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e8:	f107 0318 	add.w	r3, r7, #24
 80003ec:	4618      	mov	r0, r3
 80003ee:	f001 fd43 	bl	8001e78 <HAL_RCC_OscConfig>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003f8:	f000 f932 	bl	8000660 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003fc:	230f      	movs	r3, #15
 80003fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000400:	2302      	movs	r3, #2
 8000402:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000404:	2300      	movs	r3, #0
 8000406:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000408:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800040c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	2102      	movs	r1, #2
 8000416:	4618      	mov	r0, r3
 8000418:	f001 ffb0 	bl	800237c <HAL_RCC_ClockConfig>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000422:	f000 f91d 	bl	8000660 <Error_Handler>
  }
}
 8000426:	bf00      	nop
 8000428:	3740      	adds	r7, #64	; 0x40
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
	...

08000430 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000434:	4b18      	ldr	r3, [pc, #96]	; (8000498 <MX_SPI1_Init+0x68>)
 8000436:	4a19      	ldr	r2, [pc, #100]	; (800049c <MX_SPI1_Init+0x6c>)
 8000438:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800043a:	4b17      	ldr	r3, [pc, #92]	; (8000498 <MX_SPI1_Init+0x68>)
 800043c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000440:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000442:	4b15      	ldr	r3, [pc, #84]	; (8000498 <MX_SPI1_Init+0x68>)
 8000444:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000448:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800044a:	4b13      	ldr	r3, [pc, #76]	; (8000498 <MX_SPI1_Init+0x68>)
 800044c:	2200      	movs	r2, #0
 800044e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000450:	4b11      	ldr	r3, [pc, #68]	; (8000498 <MX_SPI1_Init+0x68>)
 8000452:	2200      	movs	r2, #0
 8000454:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000456:	4b10      	ldr	r3, [pc, #64]	; (8000498 <MX_SPI1_Init+0x68>)
 8000458:	2200      	movs	r2, #0
 800045a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800045c:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <MX_SPI1_Init+0x68>)
 800045e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000462:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000464:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <MX_SPI1_Init+0x68>)
 8000466:	2210      	movs	r2, #16
 8000468:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800046a:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <MX_SPI1_Init+0x68>)
 800046c:	2200      	movs	r2, #0
 800046e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000470:	4b09      	ldr	r3, [pc, #36]	; (8000498 <MX_SPI1_Init+0x68>)
 8000472:	2200      	movs	r2, #0
 8000474:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000476:	4b08      	ldr	r3, [pc, #32]	; (8000498 <MX_SPI1_Init+0x68>)
 8000478:	2200      	movs	r2, #0
 800047a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800047c:	4b06      	ldr	r3, [pc, #24]	; (8000498 <MX_SPI1_Init+0x68>)
 800047e:	220a      	movs	r2, #10
 8000480:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000482:	4805      	ldr	r0, [pc, #20]	; (8000498 <MX_SPI1_Init+0x68>)
 8000484:	f002 f912 	bl	80026ac <HAL_SPI_Init>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800048e:	f000 f8e7 	bl	8000660 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	20000354 	.word	0x20000354
 800049c:	40013000 	.word	0x40013000

080004a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80004a4:	4b11      	ldr	r3, [pc, #68]	; (80004ec <MX_USART3_UART_Init+0x4c>)
 80004a6:	4a12      	ldr	r2, [pc, #72]	; (80004f0 <MX_USART3_UART_Init+0x50>)
 80004a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80004aa:	4b10      	ldr	r3, [pc, #64]	; (80004ec <MX_USART3_UART_Init+0x4c>)
 80004ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <MX_USART3_UART_Init+0x4c>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80004b8:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <MX_USART3_UART_Init+0x4c>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80004be:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <MX_USART3_UART_Init+0x4c>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80004c4:	4b09      	ldr	r3, [pc, #36]	; (80004ec <MX_USART3_UART_Init+0x4c>)
 80004c6:	220c      	movs	r2, #12
 80004c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ca:	4b08      	ldr	r3, [pc, #32]	; (80004ec <MX_USART3_UART_Init+0x4c>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <MX_USART3_UART_Init+0x4c>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80004d6:	4805      	ldr	r0, [pc, #20]	; (80004ec <MX_USART3_UART_Init+0x4c>)
 80004d8:	f002 fb4e 	bl	8002b78 <HAL_UART_Init>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80004e2:	f000 f8bd 	bl	8000660 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	200003ac 	.word	0x200003ac
 80004f0:	40004800 	.word	0x40004800

080004f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004fa:	4b0c      	ldr	r3, [pc, #48]	; (800052c <MX_DMA_Init+0x38>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4a0b      	ldr	r2, [pc, #44]	; (800052c <MX_DMA_Init+0x38>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	6153      	str	r3, [r2, #20]
 8000506:	4b09      	ldr	r3, [pc, #36]	; (800052c <MX_DMA_Init+0x38>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000512:	2200      	movs	r2, #0
 8000514:	2100      	movs	r1, #0
 8000516:	200d      	movs	r0, #13
 8000518:	f001 f8d5 	bl	80016c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800051c:	200d      	movs	r0, #13
 800051e:	f001 f8ee 	bl	80016fe <HAL_NVIC_EnableIRQ>

}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40021000 	.word	0x40021000

08000530 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000536:	f107 0310 	add.w	r3, r7, #16
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000544:	4b42      	ldr	r3, [pc, #264]	; (8000650 <MX_GPIO_Init+0x120>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	4a41      	ldr	r2, [pc, #260]	; (8000650 <MX_GPIO_Init+0x120>)
 800054a:	f043 0310 	orr.w	r3, r3, #16
 800054e:	6193      	str	r3, [r2, #24]
 8000550:	4b3f      	ldr	r3, [pc, #252]	; (8000650 <MX_GPIO_Init+0x120>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	f003 0310 	and.w	r3, r3, #16
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800055c:	4b3c      	ldr	r3, [pc, #240]	; (8000650 <MX_GPIO_Init+0x120>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	4a3b      	ldr	r2, [pc, #236]	; (8000650 <MX_GPIO_Init+0x120>)
 8000562:	f043 0320 	orr.w	r3, r3, #32
 8000566:	6193      	str	r3, [r2, #24]
 8000568:	4b39      	ldr	r3, [pc, #228]	; (8000650 <MX_GPIO_Init+0x120>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	f003 0320 	and.w	r3, r3, #32
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000574:	4b36      	ldr	r3, [pc, #216]	; (8000650 <MX_GPIO_Init+0x120>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	4a35      	ldr	r2, [pc, #212]	; (8000650 <MX_GPIO_Init+0x120>)
 800057a:	f043 0304 	orr.w	r3, r3, #4
 800057e:	6193      	str	r3, [r2, #24]
 8000580:	4b33      	ldr	r3, [pc, #204]	; (8000650 <MX_GPIO_Init+0x120>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	f003 0304 	and.w	r3, r3, #4
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800058c:	4b30      	ldr	r3, [pc, #192]	; (8000650 <MX_GPIO_Init+0x120>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	4a2f      	ldr	r2, [pc, #188]	; (8000650 <MX_GPIO_Init+0x120>)
 8000592:	f043 0308 	orr.w	r3, r3, #8
 8000596:	6193      	str	r3, [r2, #24]
 8000598:	4b2d      	ldr	r3, [pc, #180]	; (8000650 <MX_GPIO_Init+0x120>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	f003 0308 	and.w	r3, r3, #8
 80005a0:	603b      	str	r3, [r7, #0]
 80005a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD6_Pin|LD5_Pin|LD4_Pin|EPD_CS_Pin, GPIO_PIN_RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	f248 01a8 	movw	r1, #32936	; 0x80a8
 80005aa:	482a      	ldr	r0, [pc, #168]	; (8000654 <MX_GPIO_Init+0x124>)
 80005ac:	f001 fc4b 	bl	8001e46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin|LD1_Pin|EPD_RST_Pin
 80005b0:	2200      	movs	r2, #0
 80005b2:	f249 3102 	movw	r1, #37634	; 0x9302
 80005b6:	4828      	ldr	r0, [pc, #160]	; (8000658 <MX_GPIO_Init+0x128>)
 80005b8:	f001 fc45 	bl	8001e46 <HAL_GPIO_WritePin>
                          |EPD_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BTN_ENC1_Pin */
  GPIO_InitStruct.Pin = BTN_ENC1_Pin;
 80005bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_ENC1_GPIO_Port, &GPIO_InitStruct);
 80005ca:	f107 0310 	add.w	r3, r7, #16
 80005ce:	4619      	mov	r1, r3
 80005d0:	4822      	ldr	r0, [pc, #136]	; (800065c <MX_GPIO_Init+0x12c>)
 80005d2:	f001 fa9d 	bl	8001b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC2B_Pin ENC2A_Pin BTN6_Pin BTN5_Pin
                           BTN1_Pin */
  GPIO_InitStruct.Pin = ENC2B_Pin|ENC2A_Pin|BTN6_Pin|BTN5_Pin
 80005d6:	f240 1353 	movw	r3, #339	; 0x153
 80005da:	613b      	str	r3, [r7, #16]
                          |BTN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e4:	f107 0310 	add.w	r3, r7, #16
 80005e8:	4619      	mov	r1, r3
 80005ea:	481a      	ldr	r0, [pc, #104]	; (8000654 <MX_GPIO_Init+0x124>)
 80005ec:	f001 fa90 	bl	8001b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD6_Pin LD5_Pin LD4_Pin EPD_CS_Pin */
  GPIO_InitStruct.Pin = LD6_Pin|LD5_Pin|LD4_Pin|EPD_CS_Pin;
 80005f0:	f248 03a8 	movw	r3, #32936	; 0x80a8
 80005f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f6:	2301      	movs	r3, #1
 80005f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fe:	2302      	movs	r3, #2
 8000600:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000602:	f107 0310 	add.w	r3, r7, #16
 8000606:	4619      	mov	r1, r3
 8000608:	4812      	ldr	r0, [pc, #72]	; (8000654 <MX_GPIO_Init+0x124>)
 800060a:	f001 fa81 	bl	8001b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN4_Pin BTN3_Pin BTN2_Pin BTN_ENC2_Pin
                           EPD_BUSY_Pin ENC1B_Pin ENC1A_Pin */
  GPIO_InitStruct.Pin = BTN4_Pin|BTN3_Pin|BTN2_Pin|BTN_ENC2_Pin
 800060e:	f246 03d5 	movw	r3, #24789	; 0x60d5
 8000612:	613b      	str	r3, [r7, #16]
                          |EPD_BUSY_Pin|ENC1B_Pin|ENC1A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	4619      	mov	r1, r3
 8000622:	480d      	ldr	r0, [pc, #52]	; (8000658 <MX_GPIO_Init+0x128>)
 8000624:	f001 fa74 	bl	8001b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin LD1_Pin EPD_RST_Pin
                           EPD_DC_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin|LD1_Pin|EPD_RST_Pin
 8000628:	f249 3302 	movw	r3, #37634	; 0x9302
 800062c:	613b      	str	r3, [r7, #16]
                          |EPD_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062e:	2301      	movs	r3, #1
 8000630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000636:	2302      	movs	r3, #2
 8000638:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063a:	f107 0310 	add.w	r3, r7, #16
 800063e:	4619      	mov	r1, r3
 8000640:	4805      	ldr	r0, [pc, #20]	; (8000658 <MX_GPIO_Init+0x128>)
 8000642:	f001 fa65 	bl	8001b10 <HAL_GPIO_Init>

}
 8000646:	bf00      	nop
 8000648:	3720      	adds	r7, #32
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40021000 	.word	0x40021000
 8000654:	40010800 	.word	0x40010800
 8000658:	40010c00 	.word	0x40010c00
 800065c:	40011000 	.word	0x40011000

08000660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000664:	b672      	cpsid	i
}
 8000666:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000668:	e7fe      	b.n	8000668 <Error_Handler+0x8>
	...

0800066c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000672:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <HAL_MspInit+0x5c>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	4a14      	ldr	r2, [pc, #80]	; (80006c8 <HAL_MspInit+0x5c>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6193      	str	r3, [r2, #24]
 800067e:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <HAL_MspInit+0x5c>)
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_MspInit+0x5c>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <HAL_MspInit+0x5c>)
 8000690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000694:	61d3      	str	r3, [r2, #28]
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <HAL_MspInit+0x5c>)
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006a2:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <HAL_MspInit+0x60>)
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	4a04      	ldr	r2, [pc, #16]	; (80006cc <HAL_MspInit+0x60>)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006be:	bf00      	nop
 80006c0:	3714      	adds	r7, #20
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	40021000 	.word	0x40021000
 80006cc:	40010000 	.word	0x40010000

080006d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a1c      	ldr	r2, [pc, #112]	; (800075c <HAL_SPI_MspInit+0x8c>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d131      	bne.n	8000754 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006f0:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <HAL_SPI_MspInit+0x90>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a1a      	ldr	r2, [pc, #104]	; (8000760 <HAL_SPI_MspInit+0x90>)
 80006f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006fa:	6193      	str	r3, [r2, #24]
 80006fc:	4b18      	ldr	r3, [pc, #96]	; (8000760 <HAL_SPI_MspInit+0x90>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000704:	613b      	str	r3, [r7, #16]
 8000706:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000708:	4b15      	ldr	r3, [pc, #84]	; (8000760 <HAL_SPI_MspInit+0x90>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	4a14      	ldr	r2, [pc, #80]	; (8000760 <HAL_SPI_MspInit+0x90>)
 800070e:	f043 0308 	orr.w	r3, r3, #8
 8000712:	6193      	str	r3, [r2, #24]
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <HAL_SPI_MspInit+0x90>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	f003 0308 	and.w	r3, r3, #8
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000720:	2328      	movs	r3, #40	; 0x28
 8000722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000724:	2302      	movs	r3, #2
 8000726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000728:	2303      	movs	r3, #3
 800072a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4619      	mov	r1, r3
 8000732:	480c      	ldr	r0, [pc, #48]	; (8000764 <HAL_SPI_MspInit+0x94>)
 8000734:	f001 f9ec 	bl	8001b10 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000738:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <HAL_SPI_MspInit+0x98>)
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
 800073e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000740:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
 8000746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
 800074e:	4a06      	ldr	r2, [pc, #24]	; (8000768 <HAL_SPI_MspInit+0x98>)
 8000750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000752:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000754:	bf00      	nop
 8000756:	3728      	adds	r7, #40	; 0x28
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40013000 	.word	0x40013000
 8000760:	40021000 	.word	0x40021000
 8000764:	40010c00 	.word	0x40010c00
 8000768:	40010000 	.word	0x40010000

0800076c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 0310 	add.w	r3, r7, #16
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a2f      	ldr	r2, [pc, #188]	; (8000844 <HAL_UART_MspInit+0xd8>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d157      	bne.n	800083c <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800078c:	4b2e      	ldr	r3, [pc, #184]	; (8000848 <HAL_UART_MspInit+0xdc>)
 800078e:	69db      	ldr	r3, [r3, #28]
 8000790:	4a2d      	ldr	r2, [pc, #180]	; (8000848 <HAL_UART_MspInit+0xdc>)
 8000792:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000796:	61d3      	str	r3, [r2, #28]
 8000798:	4b2b      	ldr	r3, [pc, #172]	; (8000848 <HAL_UART_MspInit+0xdc>)
 800079a:	69db      	ldr	r3, [r3, #28]
 800079c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a4:	4b28      	ldr	r3, [pc, #160]	; (8000848 <HAL_UART_MspInit+0xdc>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	4a27      	ldr	r2, [pc, #156]	; (8000848 <HAL_UART_MspInit+0xdc>)
 80007aa:	f043 0308 	orr.w	r3, r3, #8
 80007ae:	6193      	str	r3, [r2, #24]
 80007b0:	4b25      	ldr	r3, [pc, #148]	; (8000848 <HAL_UART_MspInit+0xdc>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	f003 0308 	and.w	r3, r3, #8
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c2:	2302      	movs	r3, #2
 80007c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c6:	2303      	movs	r3, #3
 80007c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ca:	f107 0310 	add.w	r3, r7, #16
 80007ce:	4619      	mov	r1, r3
 80007d0:	481e      	ldr	r0, [pc, #120]	; (800084c <HAL_UART_MspInit+0xe0>)
 80007d2:	f001 f99d 	bl	8001b10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	4619      	mov	r1, r3
 80007ea:	4818      	ldr	r0, [pc, #96]	; (800084c <HAL_UART_MspInit+0xe0>)
 80007ec:	f001 f990 	bl	8001b10 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80007f0:	4b17      	ldr	r3, [pc, #92]	; (8000850 <HAL_UART_MspInit+0xe4>)
 80007f2:	4a18      	ldr	r2, [pc, #96]	; (8000854 <HAL_UART_MspInit+0xe8>)
 80007f4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007f6:	4b16      	ldr	r3, [pc, #88]	; (8000850 <HAL_UART_MspInit+0xe4>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <HAL_UART_MspInit+0xe4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <HAL_UART_MspInit+0xe4>)
 8000804:	2280      	movs	r2, #128	; 0x80
 8000806:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <HAL_UART_MspInit+0xe4>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <HAL_UART_MspInit+0xe4>)
 8000810:	2200      	movs	r2, #0
 8000812:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000814:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <HAL_UART_MspInit+0xe4>)
 8000816:	2220      	movs	r2, #32
 8000818:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800081a:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <HAL_UART_MspInit+0xe4>)
 800081c:	2200      	movs	r2, #0
 800081e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000820:	480b      	ldr	r0, [pc, #44]	; (8000850 <HAL_UART_MspInit+0xe4>)
 8000822:	f000 ff87 	bl	8001734 <HAL_DMA_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 800082c:	f7ff ff18 	bl	8000660 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4a07      	ldr	r2, [pc, #28]	; (8000850 <HAL_UART_MspInit+0xe4>)
 8000834:	639a      	str	r2, [r3, #56]	; 0x38
 8000836:	4a06      	ldr	r2, [pc, #24]	; (8000850 <HAL_UART_MspInit+0xe4>)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800083c:	bf00      	nop
 800083e:	3720      	adds	r7, #32
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40004800 	.word	0x40004800
 8000848:	40021000 	.word	0x40021000
 800084c:	40010c00 	.word	0x40010c00
 8000850:	200003f0 	.word	0x200003f0
 8000854:	40020030 	.word	0x40020030

08000858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800085c:	e7fe      	b.n	800085c <NMI_Handler+0x4>

0800085e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <HardFault_Handler+0x4>

08000864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <MemManage_Handler+0x4>

0800086a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <BusFault_Handler+0x4>

08000870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <UsageFault_Handler+0x4>

08000876 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr

08000882 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr

0800088e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr

0800089a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089e:	f000 fdfb 	bl	8001498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80008ac:	4802      	ldr	r0, [pc, #8]	; (80008b8 <DMA1_Channel3_IRQHandler+0x10>)
 80008ae:	f000 fffb 	bl	80018a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200003f0 	.word	0x200003f0

080008bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008c4:	4a14      	ldr	r2, [pc, #80]	; (8000918 <_sbrk+0x5c>)
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <_sbrk+0x60>)
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d0:	4b13      	ldr	r3, [pc, #76]	; (8000920 <_sbrk+0x64>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d102      	bne.n	80008de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <_sbrk+0x64>)
 80008da:	4a12      	ldr	r2, [pc, #72]	; (8000924 <_sbrk+0x68>)
 80008dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <_sbrk+0x64>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d207      	bcs.n	80008fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008ec:	f002 fbba 	bl	8003064 <__errno>
 80008f0:	4603      	mov	r3, r0
 80008f2:	220c      	movs	r2, #12
 80008f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008fa:	e009      	b.n	8000910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <_sbrk+0x64>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000902:	4b07      	ldr	r3, [pc, #28]	; (8000920 <_sbrk+0x64>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4413      	add	r3, r2
 800090a:	4a05      	ldr	r2, [pc, #20]	; (8000920 <_sbrk+0x64>)
 800090c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800090e:	68fb      	ldr	r3, [r7, #12]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3718      	adds	r7, #24
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20005000 	.word	0x20005000
 800091c:	00000400 	.word	0x00000400
 8000920:	20002048 	.word	0x20002048
 8000924:	20002060 	.word	0x20002060

08000928 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr

08000934 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000934:	480c      	ldr	r0, [pc, #48]	; (8000968 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000936:	490d      	ldr	r1, [pc, #52]	; (800096c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000938:	4a0d      	ldr	r2, [pc, #52]	; (8000970 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800093c:	e002      	b.n	8000944 <LoopCopyDataInit>

0800093e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000942:	3304      	adds	r3, #4

08000944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000948:	d3f9      	bcc.n	800093e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094a:	4a0a      	ldr	r2, [pc, #40]	; (8000974 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800094c:	4c0a      	ldr	r4, [pc, #40]	; (8000978 <LoopFillZerobss+0x22>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000950:	e001      	b.n	8000956 <LoopFillZerobss>

08000952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000954:	3204      	adds	r2, #4

08000956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000958:	d3fb      	bcc.n	8000952 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800095a:	f7ff ffe5 	bl	8000928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800095e:	f002 fb87 	bl	8003070 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000962:	f7ff fc6d 	bl	8000240 <main>
  bx lr
 8000966:	4770      	bx	lr
  ldr r0, =_sdata
 8000968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800096c:	20000338 	.word	0x20000338
  ldr r2, =_sidata
 8000970:	08003a54 	.word	0x08003a54
  ldr r2, =_sbss
 8000974:	20000338 	.word	0x20000338
  ldr r4, =_ebss
 8000978:	20002060 	.word	0x20002060

0800097c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800097c:	e7fe      	b.n	800097c <ADC1_2_IRQHandler>

0800097e <Commander_Init>:

#include "stm32f1xx_hal.h"
#include "commander.h"
#include <string.h>

void Commander_Init(Commander_HandleTypeDef *hcommander, UART_HandleTypeDef *huart, DMA_HandleTypeDef *hdma_uart_rx, void (*command_callback)(Command command)) {
 800097e:	b480      	push	{r7}
 8000980:	b085      	sub	sp, #20
 8000982:	af00      	add	r7, sp, #0
 8000984:	60f8      	str	r0, [r7, #12]
 8000986:	60b9      	str	r1, [r7, #8]
 8000988:	607a      	str	r2, [r7, #4]
 800098a:	603b      	str	r3, [r7, #0]
	hcommander->huart = huart;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	68ba      	ldr	r2, [r7, #8]
 8000990:	601a      	str	r2, [r3, #0]
	hcommander->hdma_uart_rx = hdma_uart_rx;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	605a      	str	r2, [r3, #4]
	hcommander->rear = -1;
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	22ff      	movs	r2, #255	; 0xff
 800099c:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
	hcommander->front = -1;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	22ff      	movs	r2, #255	; 0xff
 80009a4:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
	hcommander->commands_to_handle = 0;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	2200      	movs	r2, #0
 80009ac:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
	hcommander->counter = 0;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	2200      	movs	r2, #0
 80009b4:	f8c3 2950 	str.w	r2, [r3, #2384]	; 0x950
	hcommander->command_callback = command_callback;
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	683a      	ldr	r2, [r7, #0]
 80009bc:	f8c3 2954 	str.w	r2, [r3, #2388]	; 0x954
}
 80009c0:	bf00      	nop
 80009c2:	3714      	adds	r7, #20
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr

080009ca <Commander_Start>:

void Commander_Start(Commander_HandleTypeDef *hcommander) {
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b082      	sub	sp, #8
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(hcommander->huart, hcommander->uart_rx_buffer, COMMAND_BYTESIZE * 2);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6818      	ldr	r0, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	3308      	adds	r3, #8
 80009da:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009de:	4619      	mov	r1, r3
 80009e0:	f002 f917 	bl	8002c12 <HAL_UART_Receive_DMA>
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <Commander_Process>:
void Commander_Send(Commander_HandleTypeDef *hcommander, Command *command) {
	//HAL_StatusTypeDef status;
	/*status = */HAL_UART_Transmit(hcommander->huart, (uint8_t *)command, COMMAND_BYTESIZE, 1000);
}

void Commander_Process(Commander_HandleTypeDef *hcommander) {
 80009ec:	b5b0      	push	{r4, r5, r7, lr}
 80009ee:	b0a0      	sub	sp, #128	; 0x80
 80009f0:	af1e      	add	r7, sp, #120	; 0x78
 80009f2:	6078      	str	r0, [r7, #4]

	if(hcommander->front == -1) {
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f993 394d 	ldrsb.w	r3, [r3, #2381]	; 0x94d
 80009fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009fe:	d045      	beq.n	8000a8c <Commander_Process+0xa0>
		// underflow
	} else {

		//printf("Element deleted from queue is : %dn",cqueue_arr[front]);
		hcommander->command_callback(hcommander->command_buffer[hcommander->front]);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f8d3 5954 	ldr.w	r5, [r3, #2388]	; 0x954
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	f993 394d 	ldrsb.w	r3, [r3, #2381]	; 0x94d
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	460b      	mov	r3, r1
 8000a12:	015b      	lsls	r3, r3, #5
 8000a14:	440b      	add	r3, r1
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	4413      	add	r3, r2
 8000a1a:	f503 7484 	add.w	r4, r3, #264	; 0x108
 8000a1e:	4668      	mov	r0, sp
 8000a20:	f104 0314 	add.w	r3, r4, #20
 8000a24:	2274      	movs	r2, #116	; 0x74
 8000a26:	4619      	mov	r1, r3
 8000a28:	f002 fb46 	bl	80030b8 <memcpy>
 8000a2c:	1d23      	adds	r3, r4, #4
 8000a2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a30:	47a8      	blx	r5
		hcommander->commands_to_handle--;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f893 394e 	ldrb.w	r3, [r3, #2382]	; 0x94e
 8000a38:	3b01      	subs	r3, #1
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e

		if(hcommander->front == hcommander->rear) {
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	f993 294d 	ldrsb.w	r2, [r3, #2381]	; 0x94d
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f993 394c 	ldrsb.w	r3, [r3, #2380]	; 0x94c
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d108      	bne.n	8000a64 <Commander_Process+0x78>
			hcommander->front = -1;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	22ff      	movs	r2, #255	; 0xff
 8000a56:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
			hcommander->rear = -1;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	22ff      	movs	r2, #255	; 0xff
 8000a5e:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
		} else {
			if(hcommander->front == COMMANDS_COUNT-1) hcommander->front = 0;
			else hcommander->front++;
		}
	}
}
 8000a62:	e013      	b.n	8000a8c <Commander_Process+0xa0>
			if(hcommander->front == COMMANDS_COUNT-1) hcommander->front = 0;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f993 394d 	ldrsb.w	r3, [r3, #2381]	; 0x94d
 8000a6a:	2b0f      	cmp	r3, #15
 8000a6c:	d104      	bne.n	8000a78 <Commander_Process+0x8c>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2200      	movs	r2, #0
 8000a72:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
}
 8000a76:	e009      	b.n	8000a8c <Commander_Process+0xa0>
			else hcommander->front++;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f993 394d 	ldrsb.w	r3, [r3, #2381]	; 0x94d
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	3301      	adds	r3, #1
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	b25a      	sxtb	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bdb0      	pop	{r4, r5, r7, pc}

08000a94 <Commander_Enqueue>:

void Commander_Enqueue(Commander_HandleTypeDef *hcommander, Command *command) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]


	if((hcommander->front == 0 && hcommander->rear == COMMANDS_COUNT-1) || (hcommander->front == hcommander->rear+1)) {
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f993 394d 	ldrsb.w	r3, [r3, #2381]	; 0x94d
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d104      	bne.n	8000ab2 <Commander_Enqueue+0x1e>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f993 394c 	ldrsb.w	r3, [r3, #2380]	; 0x94c
 8000aae:	2b0f      	cmp	r3, #15
 8000ab0:	d046      	beq.n	8000b40 <Commander_Enqueue+0xac>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f993 394d 	ldrsb.w	r3, [r3, #2381]	; 0x94d
 8000ab8:	461a      	mov	r2, r3
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f993 394c 	ldrsb.w	r3, [r3, #2380]	; 0x94c
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d03c      	beq.n	8000b40 <Commander_Enqueue+0xac>
		// overflow
	} else {
		if(hcommander->front == -1) {
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f993 394d 	ldrsb.w	r3, [r3, #2381]	; 0x94d
 8000acc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ad0:	d108      	bne.n	8000ae4 <Commander_Enqueue+0x50>
			hcommander->front = 0;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
			hcommander->rear = 0;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2200      	movs	r2, #0
 8000ade:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
 8000ae2:	e013      	b.n	8000b0c <Commander_Enqueue+0x78>
		} else {
			if(hcommander->rear == COMMANDS_COUNT-1) hcommander->rear = 0;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f993 394c 	ldrsb.w	r3, [r3, #2380]	; 0x94c
 8000aea:	2b0f      	cmp	r3, #15
 8000aec:	d104      	bne.n	8000af8 <Commander_Enqueue+0x64>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2200      	movs	r2, #0
 8000af2:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
 8000af6:	e009      	b.n	8000b0c <Commander_Enqueue+0x78>
			else hcommander->rear++;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f993 394c 	ldrsb.w	r3, [r3, #2380]	; 0x94c
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	3301      	adds	r3, #1
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	b25a      	sxtb	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
		}
		memcpy(hcommander->command_buffer + hcommander->rear, command, COMMAND_BYTESIZE);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f503 7286 	add.w	r2, r3, #268	; 0x10c
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	f993 394c 	ldrsb.w	r3, [r3, #2380]	; 0x94c
 8000b18:	4619      	mov	r1, r3
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	015b      	lsls	r3, r3, #5
 8000b1e:	440b      	add	r3, r1
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	4413      	add	r3, r2
 8000b24:	2282      	movs	r2, #130	; 0x82
 8000b26:	6839      	ldr	r1, [r7, #0]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f002 fac5 	bl	80030b8 <memcpy>
		hcommander->commands_to_handle++;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f893 394e 	ldrb.w	r3, [r3, #2382]	; 0x94e
 8000b34:	3301      	adds	r3, #1
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
	}


}
 8000b3e:	e7ff      	b.n	8000b40 <Commander_Enqueue+0xac>
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <_EPD_Reset>:

uint8_t WS_20_30[159] = { 0x80,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x10,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x80,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x10,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x14,0x8,0x0,0x0,0x0,0x0,0x1,0xA,0xA,0x0,0xA,0xA,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x14,0x8,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x44,0x44,0x44,0x44,0x44,0x44,0x0,0x0,0x0,0x22,0x17,0x41,0x0,0x32,0x36 };

extern SPI_HandleTypeDef hspi1;

static void _EPD_Reset(void) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b52:	480d      	ldr	r0, [pc, #52]	; (8000b88 <_EPD_Reset+0x40>)
 8000b54:	f001 f977 	bl	8001e46 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000b58:	2064      	movs	r0, #100	; 0x64
 8000b5a:	f000 fcb9 	bl	80014d0 <HAL_Delay>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b64:	4808      	ldr	r0, [pc, #32]	; (8000b88 <_EPD_Reset+0x40>)
 8000b66:	f001 f96e 	bl	8001e46 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000b6a:	2002      	movs	r0, #2
 8000b6c:	f000 fcb0 	bl	80014d0 <HAL_Delay>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 8000b70:	2201      	movs	r2, #1
 8000b72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b76:	4804      	ldr	r0, [pc, #16]	; (8000b88 <_EPD_Reset+0x40>)
 8000b78:	f001 f965 	bl	8001e46 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000b7c:	2064      	movs	r0, #100	; 0x64
 8000b7e:	f000 fca7 	bl	80014d0 <HAL_Delay>
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40010c00 	.word	0x40010c00

08000b8c <_EPD_SendCommand>:

static void _EPD_SendCommand(uint8_t reg) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b9c:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <_EPD_SendCommand+0x44>)
 8000b9e:	f001 f952 	bl	8001e46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ba8:	480a      	ldr	r0, [pc, #40]	; (8000bd4 <_EPD_SendCommand+0x48>)
 8000baa:	f001 f94c 	bl	8001e46 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 1000);
 8000bae:	1df9      	adds	r1, r7, #7
 8000bb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	4808      	ldr	r0, [pc, #32]	; (8000bd8 <_EPD_SendCommand+0x4c>)
 8000bb8:	f001 fdfc 	bl	80027b4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_SET);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bc2:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <_EPD_SendCommand+0x48>)
 8000bc4:	f001 f93f 	bl	8001e46 <HAL_GPIO_WritePin>
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40010c00 	.word	0x40010c00
 8000bd4:	40010800 	.word	0x40010800
 8000bd8:	20000354 	.word	0x20000354

08000bdc <_EPD_SendData>:

static void _EPD_SendData(uint8_t data) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_SET);
 8000be6:	2201      	movs	r2, #1
 8000be8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bec:	480c      	ldr	r0, [pc, #48]	; (8000c20 <_EPD_SendData+0x44>)
 8000bee:	f001 f92a 	bl	8001e46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bf8:	480a      	ldr	r0, [pc, #40]	; (8000c24 <_EPD_SendData+0x48>)
 8000bfa:	f001 f924 	bl	8001e46 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8000bfe:	1df9      	adds	r1, r7, #7
 8000c00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c04:	2201      	movs	r2, #1
 8000c06:	4808      	ldr	r0, [pc, #32]	; (8000c28 <_EPD_SendData+0x4c>)
 8000c08:	f001 fdd4 	bl	80027b4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c12:	4804      	ldr	r0, [pc, #16]	; (8000c24 <_EPD_SendData+0x48>)
 8000c14:	f001 f917 	bl	8001e46 <HAL_GPIO_WritePin>
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40010c00 	.word	0x40010c00
 8000c24:	40010800 	.word	0x40010800
 8000c28:	20000354 	.word	0x20000354

08000c2c <_EPD_ReadBusy>:
	for(uint8_t i = 0; i < count; i++) {
		_EPD_SendData(array[i]);
	}
}

void _EPD_ReadBusy(void) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	while(1) {
		if(HAL_GPIO_ReadPin(EPD_BUSY_GPIO_Port, EPD_BUSY_Pin) == GPIO_PIN_RESET)
 8000c30:	2110      	movs	r1, #16
 8000c32:	4806      	ldr	r0, [pc, #24]	; (8000c4c <_EPD_ReadBusy+0x20>)
 8000c34:	f001 f8f0 	bl	8001e18 <HAL_GPIO_ReadPin>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d003      	beq.n	8000c46 <_EPD_ReadBusy+0x1a>
			break;
		HAL_Delay(1);
 8000c3e:	2001      	movs	r0, #1
 8000c40:	f000 fc46 	bl	80014d0 <HAL_Delay>
		if(HAL_GPIO_ReadPin(EPD_BUSY_GPIO_Port, EPD_BUSY_Pin) == GPIO_PIN_RESET)
 8000c44:	e7f4      	b.n	8000c30 <_EPD_ReadBusy+0x4>
			break;
 8000c46:	bf00      	nop
	}
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40010c00 	.word	0x40010c00

08000c50 <_EPD_LUT>:

static void _EPD_LUT(uint8_t *lut) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	uint8_t count;
	_EPD_SendCommand(0x32);
 8000c58:	2032      	movs	r0, #50	; 0x32
 8000c5a:	f7ff ff97 	bl	8000b8c <_EPD_SendCommand>
	for(count=0; count<153; count++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	73fb      	strb	r3, [r7, #15]
 8000c62:	e009      	b.n	8000c78 <_EPD_LUT+0x28>
		_EPD_SendData(lut[count]);
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ffb5 	bl	8000bdc <_EPD_SendData>
	for(count=0; count<153; count++)
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	3301      	adds	r3, #1
 8000c76:	73fb      	strb	r3, [r7, #15]
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
 8000c7a:	2b98      	cmp	r3, #152	; 0x98
 8000c7c:	d9f2      	bls.n	8000c64 <_EPD_LUT+0x14>
	_EPD_ReadBusy();
 8000c7e:	f7ff ffd5 	bl	8000c2c <_EPD_ReadBusy>
}
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <_EPD_LUT_by_host>:

static void _EPD_LUT_by_host(uint8_t *lut) {
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
	_EPD_LUT((uint8_t *)lut);			//lut
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff ffdc 	bl	8000c50 <_EPD_LUT>
	_EPD_SendCommand(0x3f);
 8000c98:	203f      	movs	r0, #63	; 0x3f
 8000c9a:	f7ff ff77 	bl	8000b8c <_EPD_SendCommand>
	_EPD_SendData(*(lut+153));
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	3399      	adds	r3, #153	; 0x99
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff ff99 	bl	8000bdc <_EPD_SendData>
	_EPD_SendCommand(0x03);	// gate voltage
 8000caa:	2003      	movs	r0, #3
 8000cac:	f7ff ff6e 	bl	8000b8c <_EPD_SendCommand>
	_EPD_SendData(*(lut+154));
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	339a      	adds	r3, #154	; 0x9a
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff ff90 	bl	8000bdc <_EPD_SendData>
	_EPD_SendCommand(0x04);	// source voltage
 8000cbc:	2004      	movs	r0, #4
 8000cbe:	f7ff ff65 	bl	8000b8c <_EPD_SendCommand>
	_EPD_SendData(*(lut+155));	// VSH
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	339b      	adds	r3, #155	; 0x9b
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff87 	bl	8000bdc <_EPD_SendData>
	_EPD_SendData(*(lut+156));	// VSH2
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	339c      	adds	r3, #156	; 0x9c
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ff81 	bl	8000bdc <_EPD_SendData>
	_EPD_SendData(*(lut+157));	// VSL
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	339d      	adds	r3, #157	; 0x9d
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff7b 	bl	8000bdc <_EPD_SendData>
	_EPD_SendCommand(0x2c);		// VCOM
 8000ce6:	202c      	movs	r0, #44	; 0x2c
 8000ce8:	f7ff ff50 	bl	8000b8c <_EPD_SendCommand>
	_EPD_SendData(*(lut+158));
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	339e      	adds	r3, #158	; 0x9e
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff ff72 	bl	8000bdc <_EPD_SendData>
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <_EPD_TurnOnDisplay>:

static void _EPD_TurnOnDisplay(void) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	_EPD_SendCommand(0x22); //Display Update Control
 8000d04:	2022      	movs	r0, #34	; 0x22
 8000d06:	f7ff ff41 	bl	8000b8c <_EPD_SendCommand>
	_EPD_SendData(0xc7);
 8000d0a:	20c7      	movs	r0, #199	; 0xc7
 8000d0c:	f7ff ff66 	bl	8000bdc <_EPD_SendData>
	_EPD_SendCommand(0x20); //Activate Display Update Sequence
 8000d10:	2020      	movs	r0, #32
 8000d12:	f7ff ff3b 	bl	8000b8c <_EPD_SendCommand>
	_EPD_ReadBusy();
 8000d16:	f7ff ff89 	bl	8000c2c <_EPD_ReadBusy>
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <_EPD_SetWindows>:
	_EPD_SendData(0x0F);
	_EPD_SendCommand(0x20); //Activate Display Update Sequence
	_EPD_ReadBusy();
}

static void _EPD_SetWindows(uint16_t Xstart, uint16_t Ystart, uint16_t Xend, uint16_t Yend) {
 8000d1e:	b590      	push	{r4, r7, lr}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	4604      	mov	r4, r0
 8000d26:	4608      	mov	r0, r1
 8000d28:	4611      	mov	r1, r2
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4623      	mov	r3, r4
 8000d2e:	80fb      	strh	r3, [r7, #6]
 8000d30:	4603      	mov	r3, r0
 8000d32:	80bb      	strh	r3, [r7, #4]
 8000d34:	460b      	mov	r3, r1
 8000d36:	807b      	strh	r3, [r7, #2]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	803b      	strh	r3, [r7, #0]
	_EPD_SendCommand(0x44); // SET_RAM_X_ADDRESS_START_END_POSITION
 8000d3c:	2044      	movs	r0, #68	; 0x44
 8000d3e:	f7ff ff25 	bl	8000b8c <_EPD_SendCommand>
	_EPD_SendData((Xstart>>3) & 0xFF);
 8000d42:	88fb      	ldrh	r3, [r7, #6]
 8000d44:	08db      	lsrs	r3, r3, #3
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff46 	bl	8000bdc <_EPD_SendData>
	_EPD_SendData((Xend>>3) & 0xFF);
 8000d50:	887b      	ldrh	r3, [r7, #2]
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff3f 	bl	8000bdc <_EPD_SendData>

	_EPD_SendCommand(0x45); // SET_RAM_Y_ADDRESS_START_END_POSITION
 8000d5e:	2045      	movs	r0, #69	; 0x45
 8000d60:	f7ff ff14 	bl	8000b8c <_EPD_SendCommand>
	_EPD_SendData(Ystart & 0xFF);
 8000d64:	88bb      	ldrh	r3, [r7, #4]
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff37 	bl	8000bdc <_EPD_SendData>
	_EPD_SendData((Ystart >> 8) & 0xFF);
 8000d6e:	88bb      	ldrh	r3, [r7, #4]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff ff30 	bl	8000bdc <_EPD_SendData>
	_EPD_SendData(Yend & 0xFF);
 8000d7c:	883b      	ldrh	r3, [r7, #0]
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff2b 	bl	8000bdc <_EPD_SendData>
	_EPD_SendData((Yend >> 8) & 0xFF);
 8000d86:	883b      	ldrh	r3, [r7, #0]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff ff24 	bl	8000bdc <_EPD_SendData>
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd90      	pop	{r4, r7, pc}

08000d9c <_EPD_SetCursor>:

static void _EPD_SetCursor(uint16_t Xstart, uint16_t Ystart) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	460a      	mov	r2, r1
 8000da6:	80fb      	strh	r3, [r7, #6]
 8000da8:	4613      	mov	r3, r2
 8000daa:	80bb      	strh	r3, [r7, #4]
	_EPD_SendCommand(0x4E); // SET_RAM_X_ADDRESS_COUNTER
 8000dac:	204e      	movs	r0, #78	; 0x4e
 8000dae:	f7ff feed 	bl	8000b8c <_EPD_SendCommand>
	_EPD_SendData(Xstart & 0xFF);
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ff10 	bl	8000bdc <_EPD_SendData>

	_EPD_SendCommand(0x4F); // SET_RAM_Y_ADDRESS_COUNTER
 8000dbc:	204f      	movs	r0, #79	; 0x4f
 8000dbe:	f7ff fee5 	bl	8000b8c <_EPD_SendCommand>
	_EPD_SendData(Ystart & 0xFF);
 8000dc2:	88bb      	ldrh	r3, [r7, #4]
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ff08 	bl	8000bdc <_EPD_SendData>
	_EPD_SendData((Ystart >> 8) & 0xFF);
 8000dcc:	88bb      	ldrh	r3, [r7, #4]
 8000dce:	0a1b      	lsrs	r3, r3, #8
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff01 	bl	8000bdc <_EPD_SendData>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <EPD_Init>:
		}
	}
}


void EPD_Init(EPD_HandleTypeDef *hepd) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

	// start phase 0
	//hepd->state = INIT_STATE;
	//hepd->phase = 0;
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df2:	4825      	ldr	r0, [pc, #148]	; (8000e88 <EPD_Init+0xa4>)
 8000df4:	f001 f827 	bl	8001e46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dfe:	4823      	ldr	r0, [pc, #140]	; (8000e8c <EPD_Init+0xa8>)
 8000e00:	f001 f821 	bl	8001e46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 8000e04:	2201      	movs	r2, #1
 8000e06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e0a:	481f      	ldr	r0, [pc, #124]	; (8000e88 <EPD_Init+0xa4>)
 8000e0c:	f001 f81b 	bl	8001e46 <HAL_GPIO_WritePin>
	_EPD_Reset();
 8000e10:	f7ff fe9a 	bl	8000b48 <_EPD_Reset>
	HAL_Delay(100);
 8000e14:	2064      	movs	r0, #100	; 0x64
 8000e16:	f000 fb5b 	bl	80014d0 <HAL_Delay>
	// end phase 0

	_EPD_ReadBusy();
 8000e1a:	f7ff ff07 	bl	8000c2c <_EPD_ReadBusy>

	// start phase 1
	_EPD_SendCommand(0x12);  //SWRESET
 8000e1e:	2012      	movs	r0, #18
 8000e20:	f7ff feb4 	bl	8000b8c <_EPD_SendCommand>
	// end phase 1

	_EPD_ReadBusy();
 8000e24:	f7ff ff02 	bl	8000c2c <_EPD_ReadBusy>

	_EPD_SendCommand(0x01); //Driver output control
 8000e28:	2001      	movs	r0, #1
 8000e2a:	f7ff feaf 	bl	8000b8c <_EPD_SendCommand>
	_EPD_SendData(0x27);
 8000e2e:	2027      	movs	r0, #39	; 0x27
 8000e30:	f7ff fed4 	bl	8000bdc <_EPD_SendData>
	_EPD_SendData(0x01);
 8000e34:	2001      	movs	r0, #1
 8000e36:	f7ff fed1 	bl	8000bdc <_EPD_SendData>
	_EPD_SendData(0x00);
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f7ff fece 	bl	8000bdc <_EPD_SendData>

	_EPD_SendCommand(0x11); //data entry mode
 8000e40:	2011      	movs	r0, #17
 8000e42:	f7ff fea3 	bl	8000b8c <_EPD_SendCommand>
	_EPD_SendData(0x03);
 8000e46:	2003      	movs	r0, #3
 8000e48:	f7ff fec8 	bl	8000bdc <_EPD_SendData>

	_EPD_SetWindows(0, 0, EPD_WIDTH-1, EPD_HEIGHT-1);
 8000e4c:	f240 1327 	movw	r3, #295	; 0x127
 8000e50:	227f      	movs	r2, #127	; 0x7f
 8000e52:	2100      	movs	r1, #0
 8000e54:	2000      	movs	r0, #0
 8000e56:	f7ff ff62 	bl	8000d1e <_EPD_SetWindows>

	_EPD_SendCommand(0x21); //  Display update control
 8000e5a:	2021      	movs	r0, #33	; 0x21
 8000e5c:	f7ff fe96 	bl	8000b8c <_EPD_SendCommand>
	_EPD_SendData(0x00);
 8000e60:	2000      	movs	r0, #0
 8000e62:	f7ff febb 	bl	8000bdc <_EPD_SendData>
	_EPD_SendData(0x80);
 8000e66:	2080      	movs	r0, #128	; 0x80
 8000e68:	f7ff feb8 	bl	8000bdc <_EPD_SendData>

	_EPD_SetCursor(0, 0);
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f7ff ff94 	bl	8000d9c <_EPD_SetCursor>
	_EPD_ReadBusy();
 8000e74:	f7ff feda 	bl	8000c2c <_EPD_ReadBusy>

	_EPD_LUT_by_host(WS_20_30);
 8000e78:	4805      	ldr	r0, [pc, #20]	; (8000e90 <EPD_Init+0xac>)
 8000e7a:	f7ff ff06 	bl	8000c8a <_EPD_LUT_by_host>
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40010c00 	.word	0x40010c00
 8000e8c:	40010800 	.word	0x40010800
 8000e90:	20000028 	.word	0x20000028

08000e94 <EPD_Clear>:

void EPD_Clear(EPD_HandleTypeDef *hepd) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	uint16_t i;
	_EPD_SendCommand(0x24);   //write RAM for black(0)/white (1)
 8000e9c:	2024      	movs	r0, #36	; 0x24
 8000e9e:	f7ff fe75 	bl	8000b8c <_EPD_SendCommand>
	for(i = 0; i < EPD_BYTES; i++) {
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	81fb      	strh	r3, [r7, #14]
 8000ea6:	e005      	b.n	8000eb4 <EPD_Clear+0x20>
		_EPD_SendData(0xff);
 8000ea8:	20ff      	movs	r0, #255	; 0xff
 8000eaa:	f7ff fe97 	bl	8000bdc <_EPD_SendData>
	for(i = 0; i < EPD_BYTES; i++) {
 8000eae:	89fb      	ldrh	r3, [r7, #14]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	81fb      	strh	r3, [r7, #14]
 8000eb4:	89fb      	ldrh	r3, [r7, #14]
 8000eb6:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8000eba:	d3f5      	bcc.n	8000ea8 <EPD_Clear+0x14>
	}
	_EPD_TurnOnDisplay();
 8000ebc:	f7ff ff20 	bl	8000d00 <_EPD_TurnOnDisplay>
}
 8000ec0:	bf00      	nop
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <EPD_Display>:

void EPD_Display(EPD_HandleTypeDef *hepd) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	uint16_t i;
	_EPD_SendCommand(0x24);   //write RAM for black(0)/white (1)
 8000ed0:	2024      	movs	r0, #36	; 0x24
 8000ed2:	f7ff fe5b 	bl	8000b8c <_EPD_SendCommand>
	for(i=0; i<EPD_BYTES; i++) {
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	81fb      	strh	r3, [r7, #14]
 8000eda:	e009      	b.n	8000ef0 <EPD_Display+0x28>
		_EPD_SendData(hepd->image[i]);
 8000edc:	89fb      	ldrh	r3, [r7, #14]
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	789b      	ldrb	r3, [r3, #2]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fe79 	bl	8000bdc <_EPD_SendData>
	for(i=0; i<EPD_BYTES; i++) {
 8000eea:	89fb      	ldrh	r3, [r7, #14]
 8000eec:	3301      	adds	r3, #1
 8000eee:	81fb      	strh	r3, [r7, #14]
 8000ef0:	89fb      	ldrh	r3, [r7, #14]
 8000ef2:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8000ef6:	d3f1      	bcc.n	8000edc <EPD_Display+0x14>
	}
	_EPD_TurnOnDisplay();
 8000ef8:	f7ff ff02 	bl	8000d00 <_EPD_TurnOnDisplay>
}
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <EPD_Sleep>:
		_EPD_SendData(hepd->image[i]);
	}
	_EPD_TurnOnDisplay_Partial();
}

void EPD_Sleep(EPD_HandleTypeDef *hepd) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	_EPD_SendCommand(0x10); //enter deep sleep
 8000f0c:	2010      	movs	r0, #16
 8000f0e:	f7ff fe3d 	bl	8000b8c <_EPD_SendCommand>
	_EPD_SendData(0x01);
 8000f12:	2001      	movs	r0, #1
 8000f14:	f7ff fe62 	bl	8000bdc <_EPD_SendData>
	HAL_Delay(100);
 8000f18:	2064      	movs	r0, #100	; 0x64
 8000f1a:	f000 fad9 	bl	80014d0 <HAL_Delay>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <read_font_pixel>:
#define CANVAS_WIDTH 128
#define CANVAS_HEIGHT 296

uint8_t font[516] = { 0x0, 0x18, 0x3C, 0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x60, 0x60, 0x60, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x78, 0x6C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6C, 0x78, 0x0, 0x0, 0x0, 0x7E, 0x60, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x7E, 0x60, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0x60, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x60, 0x60, 0x6E, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x66, 0x66, 0x6C, 0x6C, 0x78, 0x6C, 0x6C, 0x66, 0x66, 0x0, 0x0, 0x0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x63, 0x63, 0x77, 0x7F, 0x6B, 0x6B, 0x63, 0x63, 0x63, 0x0, 0x0, 0x0, 0x63, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x63, 0x63, 0x63, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x60, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0xC, 0x6, 0x0, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0x66, 0x64, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x60, 0x30, 0x18, 0xC, 0x6, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x0, 0x0, 0x0, 0x63, 0x63, 0x63, 0x63, 0x6B, 0x6B, 0x36, 0x36, 0x36, 0x0, 0x0, 0x0, 0x66, 0x66, 0x34, 0x18, 0x18, 0x2C, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x0, 0x0, 0x0, 0x7E, 0x6, 0x6, 0xC, 0x18, 0x30, 0x60, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x6E, 0x6E, 0x66, 0x76, 0x76, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x6, 0xE, 0x3E, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x6, 0xC, 0x18, 0x30, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x6, 0x1C, 0x6, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x30, 0x30, 0x36, 0x36, 0x36, 0x66, 0x7F, 0x6, 0x6, 0x0, 0x0, 0x0, 0x7E, 0x60, 0x60, 0x60, 0x7C, 0x6, 0x6, 0xC, 0x78, 0x0, 0x0, 0x0, 0x1C, 0x38, 0x30, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x7E, 0x6, 0xC, 0xC, 0x18, 0x18, 0x30, 0x30, 0x30, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x76, 0x3C, 0x6E, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x3E, 0xC, 0x1C, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x38, 0x18, 0x30, 0x0, 0x0, 0x0, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7E, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0xC, 0x18, 0x30, 0x60, 0x30, 0x18, 0xC, 0x6, 0x0, 0x0, 0x0, 0x60, 0x30, 0x18, 0xC, 0x6, 0xC, 0x18, 0x30, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};

uint8_t read_font_pixel(uint8_t *image, uint16_t x, uint16_t y) {
 8000f26:	b480      	push	{r7}
 8000f28:	b085      	sub	sp, #20
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	460b      	mov	r3, r1
 8000f30:	807b      	strh	r3, [r7, #2]
 8000f32:	4613      	mov	r3, r2
 8000f34:	803b      	strh	r3, [r7, #0]
	uint16_t i = (x +  y * FONT_WIDTH) / 8;
 8000f36:	887a      	ldrh	r2, [r7, #2]
 8000f38:	883b      	ldrh	r3, [r7, #0]
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	4413      	add	r3, r2
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	da00      	bge.n	8000f44 <read_font_pixel+0x1e>
 8000f42:	3307      	adds	r3, #7
 8000f44:	10db      	asrs	r3, r3, #3
 8000f46:	81fb      	strh	r3, [r7, #14]
	uint8_t pixel_group = image[i];
 8000f48:	89fb      	ldrh	r3, [r7, #14]
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	737b      	strb	r3, [r7, #13]
	return ((pixel_group >> (7 - x % 8)) & 0x01);
 8000f52:	7b7a      	ldrb	r2, [r7, #13]
 8000f54:	887b      	ldrh	r3, [r7, #2]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	f003 0307 	and.w	r3, r3, #7
 8000f5c:	fa42 f303 	asr.w	r3, r2, r3
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	b2db      	uxtb	r3, r3
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr

08000f72 <toggle_single_pixel>:

void toggle_single_pixel(uint8_t *image, uint16_t x, uint16_t y) {
 8000f72:	b480      	push	{r7}
 8000f74:	b085      	sub	sp, #20
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	807b      	strh	r3, [r7, #2]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	803b      	strh	r3, [r7, #0]
	uint16_t i = (x +  y * CANVAS_WIDTH) / 8;
 8000f82:	887a      	ldrh	r2, [r7, #2]
 8000f84:	883b      	ldrh	r3, [r7, #0]
 8000f86:	01db      	lsls	r3, r3, #7
 8000f88:	4413      	add	r3, r2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	da00      	bge.n	8000f90 <toggle_single_pixel+0x1e>
 8000f8e:	3307      	adds	r3, #7
 8000f90:	10db      	asrs	r3, r3, #3
 8000f92:	81fb      	strh	r3, [r7, #14]
	if (x < CANVAS_WIDTH && y < CANVAS_HEIGHT) image[i] ^= (0x01 << (7 - x % 8));
 8000f94:	887b      	ldrh	r3, [r7, #2]
 8000f96:	2b7f      	cmp	r3, #127	; 0x7f
 8000f98:	d817      	bhi.n	8000fca <toggle_single_pixel+0x58>
 8000f9a:	883b      	ldrh	r3, [r7, #0]
 8000f9c:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 8000fa0:	d213      	bcs.n	8000fca <toggle_single_pixel+0x58>
 8000fa2:	89fb      	ldrh	r3, [r7, #14]
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	b25a      	sxtb	r2, r3
 8000fac:	887b      	ldrh	r3, [r7, #2]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	f003 0307 	and.w	r3, r3, #7
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fba:	b25b      	sxtb	r3, r3
 8000fbc:	4053      	eors	r3, r2
 8000fbe:	b259      	sxtb	r1, r3
 8000fc0:	89fb      	ldrh	r3, [r7, #14]
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	b2ca      	uxtb	r2, r1
 8000fc8:	701a      	strb	r2, [r3, #0]
}
 8000fca:	bf00      	nop
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr

08000fd4 <draw_rectangle>:
	for (uint16_t i = 0; i < CANVAS_WIDTH * CANVAS_HEIGHT / 8; i++) {
		image[i] = ~image[i];
	}
}

void draw_rectangle(uint8_t *image, uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	4608      	mov	r0, r1
 8000fde:	4611      	mov	r1, r2
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	817b      	strh	r3, [r7, #10]
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	813b      	strh	r3, [r7, #8]
 8000fea:	4613      	mov	r3, r2
 8000fec:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i = 0; i < h; i++) {
 8000fee:	2300      	movs	r3, #0
 8000ff0:	82fb      	strh	r3, [r7, #22]
 8000ff2:	e018      	b.n	8001026 <draw_rectangle+0x52>
		for (uint16_t j = 0; j < w; j++) {
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	82bb      	strh	r3, [r7, #20]
 8000ff8:	e00e      	b.n	8001018 <draw_rectangle+0x44>
			toggle_single_pixel(image, x + j, y + i);
 8000ffa:	897a      	ldrh	r2, [r7, #10]
 8000ffc:	8abb      	ldrh	r3, [r7, #20]
 8000ffe:	4413      	add	r3, r2
 8001000:	b299      	uxth	r1, r3
 8001002:	893a      	ldrh	r2, [r7, #8]
 8001004:	8afb      	ldrh	r3, [r7, #22]
 8001006:	4413      	add	r3, r2
 8001008:	b29b      	uxth	r3, r3
 800100a:	461a      	mov	r2, r3
 800100c:	68f8      	ldr	r0, [r7, #12]
 800100e:	f7ff ffb0 	bl	8000f72 <toggle_single_pixel>
		for (uint16_t j = 0; j < w; j++) {
 8001012:	8abb      	ldrh	r3, [r7, #20]
 8001014:	3301      	adds	r3, #1
 8001016:	82bb      	strh	r3, [r7, #20]
 8001018:	8aba      	ldrh	r2, [r7, #20]
 800101a:	88fb      	ldrh	r3, [r7, #6]
 800101c:	429a      	cmp	r2, r3
 800101e:	d3ec      	bcc.n	8000ffa <draw_rectangle+0x26>
	for (uint16_t i = 0; i < h; i++) {
 8001020:	8afb      	ldrh	r3, [r7, #22]
 8001022:	3301      	adds	r3, #1
 8001024:	82fb      	strh	r3, [r7, #22]
 8001026:	8afa      	ldrh	r2, [r7, #22]
 8001028:	8c3b      	ldrh	r3, [r7, #32]
 800102a:	429a      	cmp	r2, r3
 800102c:	d3e2      	bcc.n	8000ff4 <draw_rectangle+0x20>
		}
	}
}
 800102e:	bf00      	nop
 8001030:	bf00      	nop
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <draw_char>:

void draw_char(uint8_t *image, uint16_t x, uint16_t y, uint16_t c) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	4608      	mov	r0, r1
 8001042:	4611      	mov	r1, r2
 8001044:	461a      	mov	r2, r3
 8001046:	4603      	mov	r3, r0
 8001048:	817b      	strh	r3, [r7, #10]
 800104a:	460b      	mov	r3, r1
 800104c:	813b      	strh	r3, [r7, #8]
 800104e:	4613      	mov	r3, r2
 8001050:	80fb      	strh	r3, [r7, #6]
	uint16_t font_offset = c * FONT_HEIGHT;
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	461a      	mov	r2, r3
 8001056:	0052      	lsls	r2, r2, #1
 8001058:	4413      	add	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	827b      	strh	r3, [r7, #18]
	for (uint16_t i = 0; i < FONT_HEIGHT; i++) {
 800105e:	2300      	movs	r3, #0
 8001060:	82fb      	strh	r3, [r7, #22]
 8001062:	e023      	b.n	80010ac <draw_char+0x74>
		for (uint16_t j = 0; j < FONT_WIDTH; j++) {
 8001064:	2300      	movs	r3, #0
 8001066:	82bb      	strh	r3, [r7, #20]
 8001068:	e01a      	b.n	80010a0 <draw_char+0x68>
			if (read_font_pixel(font, j, i + font_offset)) {
 800106a:	8afa      	ldrh	r2, [r7, #22]
 800106c:	8a7b      	ldrh	r3, [r7, #18]
 800106e:	4413      	add	r3, r2
 8001070:	b29a      	uxth	r2, r3
 8001072:	8abb      	ldrh	r3, [r7, #20]
 8001074:	4619      	mov	r1, r3
 8001076:	4811      	ldr	r0, [pc, #68]	; (80010bc <draw_char+0x84>)
 8001078:	f7ff ff55 	bl	8000f26 <read_font_pixel>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d00b      	beq.n	800109a <draw_char+0x62>
				toggle_single_pixel(image, x + j, y + i);
 8001082:	897a      	ldrh	r2, [r7, #10]
 8001084:	8abb      	ldrh	r3, [r7, #20]
 8001086:	4413      	add	r3, r2
 8001088:	b299      	uxth	r1, r3
 800108a:	893a      	ldrh	r2, [r7, #8]
 800108c:	8afb      	ldrh	r3, [r7, #22]
 800108e:	4413      	add	r3, r2
 8001090:	b29b      	uxth	r3, r3
 8001092:	461a      	mov	r2, r3
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f7ff ff6c 	bl	8000f72 <toggle_single_pixel>
		for (uint16_t j = 0; j < FONT_WIDTH; j++) {
 800109a:	8abb      	ldrh	r3, [r7, #20]
 800109c:	3301      	adds	r3, #1
 800109e:	82bb      	strh	r3, [r7, #20]
 80010a0:	8abb      	ldrh	r3, [r7, #20]
 80010a2:	2b07      	cmp	r3, #7
 80010a4:	d9e1      	bls.n	800106a <draw_char+0x32>
	for (uint16_t i = 0; i < FONT_HEIGHT; i++) {
 80010a6:	8afb      	ldrh	r3, [r7, #22]
 80010a8:	3301      	adds	r3, #1
 80010aa:	82fb      	strh	r3, [r7, #22]
 80010ac:	8afb      	ldrh	r3, [r7, #22]
 80010ae:	2b0b      	cmp	r3, #11
 80010b0:	d9d8      	bls.n	8001064 <draw_char+0x2c>
			}
		}
	}
}
 80010b2:	bf00      	nop
 80010b4:	bf00      	nop
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200000c8 	.word	0x200000c8

080010c0 <translate>:

uint16_t translate(char c) {
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
	if (c >= 'A' && c <= 'Z') {
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	2b40      	cmp	r3, #64	; 0x40
 80010ce:	d907      	bls.n	80010e0 <translate+0x20>
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	2b5a      	cmp	r3, #90	; 0x5a
 80010d4:	d804      	bhi.n	80010e0 <translate+0x20>
		return c - 'A';
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	b29b      	uxth	r3, r3
 80010da:	3b41      	subs	r3, #65	; 0x41
 80010dc:	b29b      	uxth	r3, r3
 80010de:	e034      	b.n	800114a <translate+0x8a>
	} else if (c >= 'a' && c <= 'z') {
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	2b60      	cmp	r3, #96	; 0x60
 80010e4:	d907      	bls.n	80010f6 <translate+0x36>
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	2b7a      	cmp	r3, #122	; 0x7a
 80010ea:	d804      	bhi.n	80010f6 <translate+0x36>
		return c - 'a';
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	3b61      	subs	r3, #97	; 0x61
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	e029      	b.n	800114a <translate+0x8a>
	} else if (c >= '0' && c <= '9') {
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	2b2f      	cmp	r3, #47	; 0x2f
 80010fa:	d907      	bls.n	800110c <translate+0x4c>
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	2b39      	cmp	r3, #57	; 0x39
 8001100:	d804      	bhi.n	800110c <translate+0x4c>
		return c - '0' + 26;
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	b29b      	uxth	r3, r3
 8001106:	3b16      	subs	r3, #22
 8001108:	b29b      	uxth	r3, r3
 800110a:	e01e      	b.n	800114a <translate+0x8a>
	} else if (c == '.') {
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	2b2e      	cmp	r3, #46	; 0x2e
 8001110:	d101      	bne.n	8001116 <translate+0x56>
		return 36;
 8001112:	2324      	movs	r3, #36	; 0x24
 8001114:	e019      	b.n	800114a <translate+0x8a>
	} else if (c == ',') {
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2b2c      	cmp	r3, #44	; 0x2c
 800111a:	d101      	bne.n	8001120 <translate+0x60>
		return 37;
 800111c:	2325      	movs	r3, #37	; 0x25
 800111e:	e014      	b.n	800114a <translate+0x8a>
	} else if (c == '+') {
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	2b2b      	cmp	r3, #43	; 0x2b
 8001124:	d101      	bne.n	800112a <translate+0x6a>
		return 38;
 8001126:	2326      	movs	r3, #38	; 0x26
 8001128:	e00f      	b.n	800114a <translate+0x8a>
	} else if (c == '-') {
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	2b2d      	cmp	r3, #45	; 0x2d
 800112e:	d101      	bne.n	8001134 <translate+0x74>
		return 39;
 8001130:	2327      	movs	r3, #39	; 0x27
 8001132:	e00a      	b.n	800114a <translate+0x8a>
	} else if (c == '<') {
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	2b3c      	cmp	r3, #60	; 0x3c
 8001138:	d101      	bne.n	800113e <translate+0x7e>
		return 40;
 800113a:	2328      	movs	r3, #40	; 0x28
 800113c:	e005      	b.n	800114a <translate+0x8a>
	} else if (c == '>') {
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	2b3e      	cmp	r3, #62	; 0x3e
 8001142:	d101      	bne.n	8001148 <translate+0x88>
		return 41;
 8001144:	2329      	movs	r3, #41	; 0x29
 8001146:	e000      	b.n	800114a <translate+0x8a>
	} else {
		return 42; // ' '
 8001148:	232a      	movs	r3, #42	; 0x2a
	}
}
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr

08001154 <draw_text>:

void draw_text(uint8_t *image, char *text, uint16_t x, uint16_t y) {
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b087      	sub	sp, #28
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	4611      	mov	r1, r2
 8001160:	461a      	mov	r2, r3
 8001162:	460b      	mov	r3, r1
 8001164:	80fb      	strh	r3, [r7, #6]
 8001166:	4613      	mov	r3, r2
 8001168:	80bb      	strh	r3, [r7, #4]
	uint16_t i = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	82fb      	strh	r3, [r7, #22]
	while(text[i] > 0) {
 800116e:	e015      	b.n	800119c <draw_text+0x48>
		draw_char(image, x + FONT_WIDTH * i, y, translate(text[i]));
 8001170:	8afb      	ldrh	r3, [r7, #22]
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	b29a      	uxth	r2, r3
 8001176:	88fb      	ldrh	r3, [r7, #6]
 8001178:	4413      	add	r3, r2
 800117a:	b29c      	uxth	r4, r3
 800117c:	8afb      	ldrh	r3, [r7, #22]
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	4413      	add	r3, r2
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff9b 	bl	80010c0 <translate>
 800118a:	4603      	mov	r3, r0
 800118c:	88ba      	ldrh	r2, [r7, #4]
 800118e:	4621      	mov	r1, r4
 8001190:	68f8      	ldr	r0, [r7, #12]
 8001192:	f7ff ff51 	bl	8001038 <draw_char>
		i++;
 8001196:	8afb      	ldrh	r3, [r7, #22]
 8001198:	3301      	adds	r3, #1
 800119a:	82fb      	strh	r3, [r7, #22]
	while(text[i] > 0) {
 800119c:	8afb      	ldrh	r3, [r7, #22]
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	4413      	add	r3, r2
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1e3      	bne.n	8001170 <draw_text+0x1c>
	}
}
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	371c      	adds	r7, #28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd90      	pop	{r4, r7, pc}

080011b2 <draw_clean>:

void draw_clean(uint8_t *image) {
 80011b2:	b480      	push	{r7}
 80011b4:	b085      	sub	sp, #20
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
	uint16_t bytes = CANVAS_WIDTH * CANVAS_HEIGHT / 8;
 80011ba:	f44f 5394 	mov.w	r3, #4736	; 0x1280
 80011be:	81bb      	strh	r3, [r7, #12]
	for (uint16_t i = 0; i < bytes; i++) image[i] = 0xFF;
 80011c0:	2300      	movs	r3, #0
 80011c2:	81fb      	strh	r3, [r7, #14]
 80011c4:	e007      	b.n	80011d6 <draw_clean+0x24>
 80011c6:	89fb      	ldrh	r3, [r7, #14]
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	4413      	add	r3, r2
 80011cc:	22ff      	movs	r2, #255	; 0xff
 80011ce:	701a      	strb	r2, [r3, #0]
 80011d0:	89fb      	ldrh	r3, [r7, #14]
 80011d2:	3301      	adds	r3, #1
 80011d4:	81fb      	strh	r3, [r7, #14]
 80011d6:	89fa      	ldrh	r2, [r7, #14]
 80011d8:	89bb      	ldrh	r3, [r7, #12]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d3f3      	bcc.n	80011c6 <draw_clean+0x14>
}
 80011de:	bf00      	nop
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr

080011ea <RE_Init>:
 *      Author: asky
 */

#include "rencoder.h"

void RE_Init(RE_HandleTypeDef *hre, GPIO_TypeDef *portA, GPIO_TypeDef *portB, uint16_t pinA, uint16_t pinB, uint16_t divider) {
 80011ea:	b480      	push	{r7}
 80011ec:	b085      	sub	sp, #20
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	60f8      	str	r0, [r7, #12]
 80011f2:	60b9      	str	r1, [r7, #8]
 80011f4:	607a      	str	r2, [r7, #4]
 80011f6:	807b      	strh	r3, [r7, #2]
	hre->lasttick = 0;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
	hre->lastA = 0;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2200      	movs	r2, #0
 8001202:	809a      	strh	r2, [r3, #4]
	hre->lastB = 0;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2200      	movs	r2, #0
 8001208:	80da      	strh	r2, [r3, #6]
	hre->currentA = 0;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	2200      	movs	r2, #0
 800120e:	811a      	strh	r2, [r3, #8]
	hre->currentB = 0;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2200      	movs	r2, #0
 8001214:	815a      	strh	r2, [r3, #10]
	hre->counter = 0;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2200      	movs	r2, #0
 800121a:	831a      	strh	r2, [r3, #24]
	hre->portA = portA;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	60da      	str	r2, [r3, #12]
	hre->portB = portB;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	611a      	str	r2, [r3, #16]
	hre->pinA = pinA;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	887a      	ldrh	r2, [r7, #2]
 800122c:	829a      	strh	r2, [r3, #20]
	hre->pinB = pinB;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	8b3a      	ldrh	r2, [r7, #24]
 8001232:	82da      	strh	r2, [r3, #22]
	hre->divider = divider;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	8bba      	ldrh	r2, [r7, #28]
 8001238:	835a      	strh	r2, [r3, #26]
}
 800123a:	bf00      	nop
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr

08001244 <RE_Process>:

uint8_t RE_Process(RE_HandleTypeDef *hre) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() != hre->lasttick) {
 800124c:	f000 f936 	bl	80014bc <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	429a      	cmp	r2, r3
 8001258:	f000 80b7 	beq.w	80013ca <RE_Process+0x186>
		hre->lasttick = HAL_GetTick();
 800125c:	f000 f92e 	bl	80014bc <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	601a      	str	r2, [r3, #0]
		hre->lastA = hre->currentA;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	891a      	ldrh	r2, [r3, #8]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	809a      	strh	r2, [r3, #4]
		hre->lastB = hre->currentB;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	895a      	ldrh	r2, [r3, #10]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	80da      	strh	r2, [r3, #6]

		uint16_t temp;
		uint16_t alpha = 75; //%
 8001276:	234b      	movs	r3, #75	; 0x4b
 8001278:	81fb      	strh	r3, [r7, #14]
		uint16_t ceil = 10000, thr = 5000;
 800127a:	f242 7310 	movw	r3, #10000	; 0x2710
 800127e:	81bb      	strh	r3, [r7, #12]
 8001280:	f241 3388 	movw	r3, #5000	; 0x1388
 8001284:	817b      	strh	r3, [r7, #10]

		temp = HAL_GPIO_ReadPin(hre->portA, hre->pinA) == GPIO_PIN_SET ? ceil : 0;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68da      	ldr	r2, [r3, #12]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	8a9b      	ldrh	r3, [r3, #20]
 800128e:	4619      	mov	r1, r3
 8001290:	4610      	mov	r0, r2
 8001292:	f000 fdc1 	bl	8001e18 <HAL_GPIO_ReadPin>
 8001296:	4603      	mov	r3, r0
 8001298:	2b01      	cmp	r3, #1
 800129a:	d101      	bne.n	80012a0 <RE_Process+0x5c>
 800129c:	89bb      	ldrh	r3, [r7, #12]
 800129e:	e000      	b.n	80012a2 <RE_Process+0x5e>
 80012a0:	2300      	movs	r3, #0
 80012a2:	813b      	strh	r3, [r7, #8]
		hre->currentA = (hre->lastA * alpha / 100) + (temp * (100 - alpha) / 100);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	889b      	ldrh	r3, [r3, #4]
 80012a8:	461a      	mov	r2, r3
 80012aa:	89fb      	ldrh	r3, [r7, #14]
 80012ac:	fb02 f303 	mul.w	r3, r2, r3
 80012b0:	4a48      	ldr	r2, [pc, #288]	; (80013d4 <RE_Process+0x190>)
 80012b2:	fb82 1203 	smull	r1, r2, r2, r3
 80012b6:	1152      	asrs	r2, r2, #5
 80012b8:	17db      	asrs	r3, r3, #31
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	b29a      	uxth	r2, r3
 80012be:	893b      	ldrh	r3, [r7, #8]
 80012c0:	89f9      	ldrh	r1, [r7, #14]
 80012c2:	f1c1 0164 	rsb	r1, r1, #100	; 0x64
 80012c6:	fb01 f303 	mul.w	r3, r1, r3
 80012ca:	4942      	ldr	r1, [pc, #264]	; (80013d4 <RE_Process+0x190>)
 80012cc:	fb81 0103 	smull	r0, r1, r1, r3
 80012d0:	1149      	asrs	r1, r1, #5
 80012d2:	17db      	asrs	r3, r3, #31
 80012d4:	1acb      	subs	r3, r1, r3
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	4413      	add	r3, r2
 80012da:	b29a      	uxth	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	811a      	strh	r2, [r3, #8]

		temp = HAL_GPIO_ReadPin(hre->portB, hre->pinB) == GPIO_PIN_SET ? ceil : 0;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	691a      	ldr	r2, [r3, #16]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	8adb      	ldrh	r3, [r3, #22]
 80012e8:	4619      	mov	r1, r3
 80012ea:	4610      	mov	r0, r2
 80012ec:	f000 fd94 	bl	8001e18 <HAL_GPIO_ReadPin>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d101      	bne.n	80012fa <RE_Process+0xb6>
 80012f6:	89bb      	ldrh	r3, [r7, #12]
 80012f8:	e000      	b.n	80012fc <RE_Process+0xb8>
 80012fa:	2300      	movs	r3, #0
 80012fc:	813b      	strh	r3, [r7, #8]
		hre->currentB = (hre->lastB * alpha / 100) + (temp * (100 - alpha) / 100);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	88db      	ldrh	r3, [r3, #6]
 8001302:	461a      	mov	r2, r3
 8001304:	89fb      	ldrh	r3, [r7, #14]
 8001306:	fb02 f303 	mul.w	r3, r2, r3
 800130a:	4a32      	ldr	r2, [pc, #200]	; (80013d4 <RE_Process+0x190>)
 800130c:	fb82 1203 	smull	r1, r2, r2, r3
 8001310:	1152      	asrs	r2, r2, #5
 8001312:	17db      	asrs	r3, r3, #31
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	b29a      	uxth	r2, r3
 8001318:	893b      	ldrh	r3, [r7, #8]
 800131a:	89f9      	ldrh	r1, [r7, #14]
 800131c:	f1c1 0164 	rsb	r1, r1, #100	; 0x64
 8001320:	fb01 f303 	mul.w	r3, r1, r3
 8001324:	492b      	ldr	r1, [pc, #172]	; (80013d4 <RE_Process+0x190>)
 8001326:	fb81 0103 	smull	r0, r1, r1, r3
 800132a:	1149      	asrs	r1, r1, #5
 800132c:	17db      	asrs	r3, r3, #31
 800132e:	1acb      	subs	r3, r1, r3
 8001330:	b29b      	uxth	r3, r3
 8001332:	4413      	add	r3, r2
 8001334:	b29a      	uxth	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	815a      	strh	r2, [r3, #10]

		if (hre->lastA < thr && hre->currentA >= thr) {
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	889b      	ldrh	r3, [r3, #4]
 800133e:	897a      	ldrh	r2, [r7, #10]
 8001340:	429a      	cmp	r2, r3
 8001342:	d91e      	bls.n	8001382 <RE_Process+0x13e>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	891b      	ldrh	r3, [r3, #8]
 8001348:	897a      	ldrh	r2, [r7, #10]
 800134a:	429a      	cmp	r2, r3
 800134c:	d819      	bhi.n	8001382 <RE_Process+0x13e>

			if (hre->currentB > thr) {
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	895b      	ldrh	r3, [r3, #10]
 8001352:	897a      	ldrh	r2, [r7, #10]
 8001354:	429a      	cmp	r2, r3
 8001356:	d209      	bcs.n	800136c <RE_Process+0x128>
				hre->counter--;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800135e:	b29b      	uxth	r3, r3
 8001360:	3b01      	subs	r3, #1
 8001362:	b29b      	uxth	r3, r3
 8001364:	b21a      	sxth	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	831a      	strh	r2, [r3, #24]
 800136a:	e008      	b.n	800137e <RE_Process+0x13a>
			} else {
				hre->counter++;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001372:	b29b      	uxth	r3, r3
 8001374:	3301      	adds	r3, #1
 8001376:	b29b      	uxth	r3, r3
 8001378:	b21a      	sxth	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	831a      	strh	r2, [r3, #24]
			}
			return 1;
 800137e:	2301      	movs	r3, #1
 8001380:	e024      	b.n	80013cc <RE_Process+0x188>

		} else if (hre->lastA > thr && hre->currentA <= thr) {
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	889b      	ldrh	r3, [r3, #4]
 8001386:	897a      	ldrh	r2, [r7, #10]
 8001388:	429a      	cmp	r2, r3
 800138a:	d21e      	bcs.n	80013ca <RE_Process+0x186>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	891b      	ldrh	r3, [r3, #8]
 8001390:	897a      	ldrh	r2, [r7, #10]
 8001392:	429a      	cmp	r2, r3
 8001394:	d319      	bcc.n	80013ca <RE_Process+0x186>

			if (hre->currentB > thr) {
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	895b      	ldrh	r3, [r3, #10]
 800139a:	897a      	ldrh	r2, [r7, #10]
 800139c:	429a      	cmp	r2, r3
 800139e:	d209      	bcs.n	80013b4 <RE_Process+0x170>
				hre->counter++;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	3301      	adds	r3, #1
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	b21a      	sxth	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	831a      	strh	r2, [r3, #24]
 80013b2:	e008      	b.n	80013c6 <RE_Process+0x182>
			} else {
				hre->counter--;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	3b01      	subs	r3, #1
 80013be:	b29b      	uxth	r3, r3
 80013c0:	b21a      	sxth	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	831a      	strh	r2, [r3, #24]
			}
			return 1;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e000      	b.n	80013cc <RE_Process+0x188>

		}
	}
	return 0;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	51eb851f 	.word	0x51eb851f

080013d8 <RE_GetCount>:

int16_t RE_GetCount(RE_HandleTypeDef *hre) {
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	if (hre->divider <= 1) {
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	8b5b      	ldrh	r3, [r3, #26]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d803      	bhi.n	80013f0 <RE_GetCount+0x18>
		return hre->counter;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80013ee:	e008      	b.n	8001402 <RE_GetCount+0x2a>
	} else {
		return hre->counter / hre->divider;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80013f6:	461a      	mov	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	8b5b      	ldrh	r3, [r3, #26]
 80013fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8001400:	b21b      	sxth	r3, r3
	}
}
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr

0800140c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <HAL_Init+0x28>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a07      	ldr	r2, [pc, #28]	; (8001434 <HAL_Init+0x28>)
 8001416:	f043 0310 	orr.w	r3, r3, #16
 800141a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800141c:	2003      	movs	r0, #3
 800141e:	f000 f947 	bl	80016b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001422:	200f      	movs	r0, #15
 8001424:	f000 f808 	bl	8001438 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001428:	f7ff f920 	bl	800066c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40022000 	.word	0x40022000

08001438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_InitTick+0x54>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_InitTick+0x58>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	4619      	mov	r1, r3
 800144a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001452:	fbb2 f3f3 	udiv	r3, r2, r3
 8001456:	4618      	mov	r0, r3
 8001458:	f000 f95f 	bl	800171a <HAL_SYSTICK_Config>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e00e      	b.n	8001484 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b0f      	cmp	r3, #15
 800146a:	d80a      	bhi.n	8001482 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800146c:	2200      	movs	r2, #0
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001474:	f000 f927 	bl	80016c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001478:	4a06      	ldr	r2, [pc, #24]	; (8001494 <HAL_InitTick+0x5c>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	e000      	b.n	8001484 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
}
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000024 	.word	0x20000024
 8001490:	200002d0 	.word	0x200002d0
 8001494:	200002cc 	.word	0x200002cc

08001498 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_IncTick+0x1c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <HAL_IncTick+0x20>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	4a03      	ldr	r2, [pc, #12]	; (80014b8 <HAL_IncTick+0x20>)
 80014aa:	6013      	str	r3, [r2, #0]
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	200002d0 	.word	0x200002d0
 80014b8:	2000204c 	.word	0x2000204c

080014bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return uwTick;
 80014c0:	4b02      	ldr	r3, [pc, #8]	; (80014cc <HAL_GetTick+0x10>)
 80014c2:	681b      	ldr	r3, [r3, #0]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	2000204c 	.word	0x2000204c

080014d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014d8:	f7ff fff0 	bl	80014bc <HAL_GetTick>
 80014dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014e8:	d005      	beq.n	80014f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_Delay+0x44>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	461a      	mov	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4413      	add	r3, r2
 80014f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014f6:	bf00      	nop
 80014f8:	f7ff ffe0 	bl	80014bc <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	429a      	cmp	r2, r3
 8001506:	d8f7      	bhi.n	80014f8 <HAL_Delay+0x28>
  {
  }
}
 8001508:	bf00      	nop
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200002d0 	.word	0x200002d0

08001518 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <__NVIC_SetPriorityGrouping+0x44>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800152e:	68ba      	ldr	r2, [r7, #8]
 8001530:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001534:	4013      	ands	r3, r2
 8001536:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001540:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154a:	4a04      	ldr	r2, [pc, #16]	; (800155c <__NVIC_SetPriorityGrouping+0x44>)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	60d3      	str	r3, [r2, #12]
}
 8001550:	bf00      	nop
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001564:	4b04      	ldr	r3, [pc, #16]	; (8001578 <__NVIC_GetPriorityGrouping+0x18>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	0a1b      	lsrs	r3, r3, #8
 800156a:	f003 0307 	and.w	r3, r3, #7
}
 800156e:	4618      	mov	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	2b00      	cmp	r3, #0
 800158c:	db0b      	blt.n	80015a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	f003 021f 	and.w	r2, r3, #31
 8001594:	4906      	ldr	r1, [pc, #24]	; (80015b0 <__NVIC_EnableIRQ+0x34>)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	095b      	lsrs	r3, r3, #5
 800159c:	2001      	movs	r0, #1
 800159e:	fa00 f202 	lsl.w	r2, r0, r2
 80015a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr
 80015b0:	e000e100 	.word	0xe000e100

080015b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	6039      	str	r1, [r7, #0]
 80015be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	db0a      	blt.n	80015de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	490c      	ldr	r1, [pc, #48]	; (8001600 <__NVIC_SetPriority+0x4c>)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	0112      	lsls	r2, r2, #4
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	440b      	add	r3, r1
 80015d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015dc:	e00a      	b.n	80015f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4908      	ldr	r1, [pc, #32]	; (8001604 <__NVIC_SetPriority+0x50>)
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	3b04      	subs	r3, #4
 80015ec:	0112      	lsls	r2, r2, #4
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	440b      	add	r3, r1
 80015f2:	761a      	strb	r2, [r3, #24]
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000e100 	.word	0xe000e100
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001608:	b480      	push	{r7}
 800160a:	b089      	sub	sp, #36	; 0x24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f1c3 0307 	rsb	r3, r3, #7
 8001622:	2b04      	cmp	r3, #4
 8001624:	bf28      	it	cs
 8001626:	2304      	movcs	r3, #4
 8001628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	3304      	adds	r3, #4
 800162e:	2b06      	cmp	r3, #6
 8001630:	d902      	bls.n	8001638 <NVIC_EncodePriority+0x30>
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3b03      	subs	r3, #3
 8001636:	e000      	b.n	800163a <NVIC_EncodePriority+0x32>
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43da      	mvns	r2, r3
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	401a      	ands	r2, r3
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001650:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	fa01 f303 	lsl.w	r3, r1, r3
 800165a:	43d9      	mvns	r1, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001660:	4313      	orrs	r3, r2
         );
}
 8001662:	4618      	mov	r0, r3
 8001664:	3724      	adds	r7, #36	; 0x24
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr

0800166c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3b01      	subs	r3, #1
 8001678:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800167c:	d301      	bcc.n	8001682 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800167e:	2301      	movs	r3, #1
 8001680:	e00f      	b.n	80016a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001682:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <SysTick_Config+0x40>)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3b01      	subs	r3, #1
 8001688:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800168a:	210f      	movs	r1, #15
 800168c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001690:	f7ff ff90 	bl	80015b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <SysTick_Config+0x40>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800169a:	4b04      	ldr	r3, [pc, #16]	; (80016ac <SysTick_Config+0x40>)
 800169c:	2207      	movs	r2, #7
 800169e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	e000e010 	.word	0xe000e010

080016b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff ff2d 	bl	8001518 <__NVIC_SetPriorityGrouping>
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b086      	sub	sp, #24
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	607a      	str	r2, [r7, #4]
 80016d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016d8:	f7ff ff42 	bl	8001560 <__NVIC_GetPriorityGrouping>
 80016dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	68b9      	ldr	r1, [r7, #8]
 80016e2:	6978      	ldr	r0, [r7, #20]
 80016e4:	f7ff ff90 	bl	8001608 <NVIC_EncodePriority>
 80016e8:	4602      	mov	r2, r0
 80016ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ee:	4611      	mov	r1, r2
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff5f 	bl	80015b4 <__NVIC_SetPriority>
}
 80016f6:	bf00      	nop
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	4603      	mov	r3, r0
 8001706:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ff35 	bl	800157c <__NVIC_EnableIRQ>
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff ffa2 	bl	800166c <SysTick_Config>
 8001728:	4603      	mov	r3, r0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e043      	b.n	80017d2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	461a      	mov	r2, r3
 8001750:	4b22      	ldr	r3, [pc, #136]	; (80017dc <HAL_DMA_Init+0xa8>)
 8001752:	4413      	add	r3, r2
 8001754:	4a22      	ldr	r2, [pc, #136]	; (80017e0 <HAL_DMA_Init+0xac>)
 8001756:	fba2 2303 	umull	r2, r3, r2, r3
 800175a:	091b      	lsrs	r3, r3, #4
 800175c:	009a      	lsls	r2, r3, #2
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a1f      	ldr	r2, [pc, #124]	; (80017e4 <HAL_DMA_Init+0xb0>)
 8001766:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2202      	movs	r2, #2
 800176c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800177e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001782:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800178c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001798:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	bffdfff8 	.word	0xbffdfff8
 80017e0:	cccccccd 	.word	0xcccccccd
 80017e4:	40020000 	.word	0x40020000

080017e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
 80017f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017f6:	2300      	movs	r3, #0
 80017f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d101      	bne.n	8001808 <HAL_DMA_Start_IT+0x20>
 8001804:	2302      	movs	r3, #2
 8001806:	e04a      	b.n	800189e <HAL_DMA_Start_IT+0xb6>
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001816:	2b01      	cmp	r3, #1
 8001818:	d13a      	bne.n	8001890 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2202      	movs	r2, #2
 800181e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2200      	movs	r2, #0
 8001826:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0201 	bic.w	r2, r2, #1
 8001836:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	68b9      	ldr	r1, [r7, #8]
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f000 f938 	bl	8001ab4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001848:	2b00      	cmp	r3, #0
 800184a:	d008      	beq.n	800185e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f042 020e 	orr.w	r2, r2, #14
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	e00f      	b.n	800187e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 0204 	bic.w	r2, r2, #4
 800186c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f042 020a 	orr.w	r2, r2, #10
 800187c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f042 0201 	orr.w	r2, r2, #1
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	e005      	b.n	800189c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001898:	2302      	movs	r3, #2
 800189a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800189c:	7dfb      	ldrb	r3, [r7, #23]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	2204      	movs	r2, #4
 80018c6:	409a      	lsls	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d04f      	beq.n	8001970 <HAL_DMA_IRQHandler+0xc8>
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	f003 0304 	and.w	r3, r3, #4
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d04a      	beq.n	8001970 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0320 	and.w	r3, r3, #32
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d107      	bne.n	80018f8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 0204 	bic.w	r2, r2, #4
 80018f6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a66      	ldr	r2, [pc, #408]	; (8001a98 <HAL_DMA_IRQHandler+0x1f0>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d029      	beq.n	8001956 <HAL_DMA_IRQHandler+0xae>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a65      	ldr	r2, [pc, #404]	; (8001a9c <HAL_DMA_IRQHandler+0x1f4>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d022      	beq.n	8001952 <HAL_DMA_IRQHandler+0xaa>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a63      	ldr	r2, [pc, #396]	; (8001aa0 <HAL_DMA_IRQHandler+0x1f8>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d01a      	beq.n	800194c <HAL_DMA_IRQHandler+0xa4>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a62      	ldr	r2, [pc, #392]	; (8001aa4 <HAL_DMA_IRQHandler+0x1fc>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d012      	beq.n	8001946 <HAL_DMA_IRQHandler+0x9e>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a60      	ldr	r2, [pc, #384]	; (8001aa8 <HAL_DMA_IRQHandler+0x200>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d00a      	beq.n	8001940 <HAL_DMA_IRQHandler+0x98>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a5f      	ldr	r2, [pc, #380]	; (8001aac <HAL_DMA_IRQHandler+0x204>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d102      	bne.n	800193a <HAL_DMA_IRQHandler+0x92>
 8001934:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001938:	e00e      	b.n	8001958 <HAL_DMA_IRQHandler+0xb0>
 800193a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800193e:	e00b      	b.n	8001958 <HAL_DMA_IRQHandler+0xb0>
 8001940:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001944:	e008      	b.n	8001958 <HAL_DMA_IRQHandler+0xb0>
 8001946:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800194a:	e005      	b.n	8001958 <HAL_DMA_IRQHandler+0xb0>
 800194c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001950:	e002      	b.n	8001958 <HAL_DMA_IRQHandler+0xb0>
 8001952:	2340      	movs	r3, #64	; 0x40
 8001954:	e000      	b.n	8001958 <HAL_DMA_IRQHandler+0xb0>
 8001956:	2304      	movs	r3, #4
 8001958:	4a55      	ldr	r2, [pc, #340]	; (8001ab0 <HAL_DMA_IRQHandler+0x208>)
 800195a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 8094 	beq.w	8001a8e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800196e:	e08e      	b.n	8001a8e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	2202      	movs	r2, #2
 8001976:	409a      	lsls	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4013      	ands	r3, r2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d056      	beq.n	8001a2e <HAL_DMA_IRQHandler+0x186>
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d051      	beq.n	8001a2e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0320 	and.w	r3, r3, #32
 8001994:	2b00      	cmp	r3, #0
 8001996:	d10b      	bne.n	80019b0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 020a 	bic.w	r2, r2, #10
 80019a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a38      	ldr	r2, [pc, #224]	; (8001a98 <HAL_DMA_IRQHandler+0x1f0>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d029      	beq.n	8001a0e <HAL_DMA_IRQHandler+0x166>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a37      	ldr	r2, [pc, #220]	; (8001a9c <HAL_DMA_IRQHandler+0x1f4>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d022      	beq.n	8001a0a <HAL_DMA_IRQHandler+0x162>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a35      	ldr	r2, [pc, #212]	; (8001aa0 <HAL_DMA_IRQHandler+0x1f8>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d01a      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x15c>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a34      	ldr	r2, [pc, #208]	; (8001aa4 <HAL_DMA_IRQHandler+0x1fc>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d012      	beq.n	80019fe <HAL_DMA_IRQHandler+0x156>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a32      	ldr	r2, [pc, #200]	; (8001aa8 <HAL_DMA_IRQHandler+0x200>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d00a      	beq.n	80019f8 <HAL_DMA_IRQHandler+0x150>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a31      	ldr	r2, [pc, #196]	; (8001aac <HAL_DMA_IRQHandler+0x204>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d102      	bne.n	80019f2 <HAL_DMA_IRQHandler+0x14a>
 80019ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019f0:	e00e      	b.n	8001a10 <HAL_DMA_IRQHandler+0x168>
 80019f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019f6:	e00b      	b.n	8001a10 <HAL_DMA_IRQHandler+0x168>
 80019f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019fc:	e008      	b.n	8001a10 <HAL_DMA_IRQHandler+0x168>
 80019fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a02:	e005      	b.n	8001a10 <HAL_DMA_IRQHandler+0x168>
 8001a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a08:	e002      	b.n	8001a10 <HAL_DMA_IRQHandler+0x168>
 8001a0a:	2320      	movs	r3, #32
 8001a0c:	e000      	b.n	8001a10 <HAL_DMA_IRQHandler+0x168>
 8001a0e:	2302      	movs	r3, #2
 8001a10:	4a27      	ldr	r2, [pc, #156]	; (8001ab0 <HAL_DMA_IRQHandler+0x208>)
 8001a12:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d034      	beq.n	8001a8e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a2c:	e02f      	b.n	8001a8e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	2208      	movs	r2, #8
 8001a34:	409a      	lsls	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d028      	beq.n	8001a90 <HAL_DMA_IRQHandler+0x1e8>
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	f003 0308 	and.w	r3, r3, #8
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d023      	beq.n	8001a90 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 020e 	bic.w	r2, r2, #14
 8001a56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a60:	2101      	movs	r1, #1
 8001a62:	fa01 f202 	lsl.w	r2, r1, r2
 8001a66:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d004      	beq.n	8001a90 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	4798      	blx	r3
    }
  }
  return;
 8001a8e:	bf00      	nop
 8001a90:	bf00      	nop
}
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40020008 	.word	0x40020008
 8001a9c:	4002001c 	.word	0x4002001c
 8001aa0:	40020030 	.word	0x40020030
 8001aa4:	40020044 	.word	0x40020044
 8001aa8:	40020058 	.word	0x40020058
 8001aac:	4002006c 	.word	0x4002006c
 8001ab0:	40020000 	.word	0x40020000

08001ab4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
 8001ac0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aca:	2101      	movs	r1, #1
 8001acc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b10      	cmp	r3, #16
 8001ae0:	d108      	bne.n	8001af4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001af2:	e007      	b.n	8001b04 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	60da      	str	r2, [r3, #12]
}
 8001b04:	bf00      	nop
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
	...

08001b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b08b      	sub	sp, #44	; 0x2c
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b22:	e169      	b.n	8001df8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b24:	2201      	movs	r2, #1
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	69fa      	ldr	r2, [r7, #28]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	f040 8158 	bne.w	8001df2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	4a9a      	ldr	r2, [pc, #616]	; (8001db0 <HAL_GPIO_Init+0x2a0>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d05e      	beq.n	8001c0a <HAL_GPIO_Init+0xfa>
 8001b4c:	4a98      	ldr	r2, [pc, #608]	; (8001db0 <HAL_GPIO_Init+0x2a0>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d875      	bhi.n	8001c3e <HAL_GPIO_Init+0x12e>
 8001b52:	4a98      	ldr	r2, [pc, #608]	; (8001db4 <HAL_GPIO_Init+0x2a4>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d058      	beq.n	8001c0a <HAL_GPIO_Init+0xfa>
 8001b58:	4a96      	ldr	r2, [pc, #600]	; (8001db4 <HAL_GPIO_Init+0x2a4>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d86f      	bhi.n	8001c3e <HAL_GPIO_Init+0x12e>
 8001b5e:	4a96      	ldr	r2, [pc, #600]	; (8001db8 <HAL_GPIO_Init+0x2a8>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d052      	beq.n	8001c0a <HAL_GPIO_Init+0xfa>
 8001b64:	4a94      	ldr	r2, [pc, #592]	; (8001db8 <HAL_GPIO_Init+0x2a8>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d869      	bhi.n	8001c3e <HAL_GPIO_Init+0x12e>
 8001b6a:	4a94      	ldr	r2, [pc, #592]	; (8001dbc <HAL_GPIO_Init+0x2ac>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d04c      	beq.n	8001c0a <HAL_GPIO_Init+0xfa>
 8001b70:	4a92      	ldr	r2, [pc, #584]	; (8001dbc <HAL_GPIO_Init+0x2ac>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d863      	bhi.n	8001c3e <HAL_GPIO_Init+0x12e>
 8001b76:	4a92      	ldr	r2, [pc, #584]	; (8001dc0 <HAL_GPIO_Init+0x2b0>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d046      	beq.n	8001c0a <HAL_GPIO_Init+0xfa>
 8001b7c:	4a90      	ldr	r2, [pc, #576]	; (8001dc0 <HAL_GPIO_Init+0x2b0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d85d      	bhi.n	8001c3e <HAL_GPIO_Init+0x12e>
 8001b82:	2b12      	cmp	r3, #18
 8001b84:	d82a      	bhi.n	8001bdc <HAL_GPIO_Init+0xcc>
 8001b86:	2b12      	cmp	r3, #18
 8001b88:	d859      	bhi.n	8001c3e <HAL_GPIO_Init+0x12e>
 8001b8a:	a201      	add	r2, pc, #4	; (adr r2, 8001b90 <HAL_GPIO_Init+0x80>)
 8001b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b90:	08001c0b 	.word	0x08001c0b
 8001b94:	08001be5 	.word	0x08001be5
 8001b98:	08001bf7 	.word	0x08001bf7
 8001b9c:	08001c39 	.word	0x08001c39
 8001ba0:	08001c3f 	.word	0x08001c3f
 8001ba4:	08001c3f 	.word	0x08001c3f
 8001ba8:	08001c3f 	.word	0x08001c3f
 8001bac:	08001c3f 	.word	0x08001c3f
 8001bb0:	08001c3f 	.word	0x08001c3f
 8001bb4:	08001c3f 	.word	0x08001c3f
 8001bb8:	08001c3f 	.word	0x08001c3f
 8001bbc:	08001c3f 	.word	0x08001c3f
 8001bc0:	08001c3f 	.word	0x08001c3f
 8001bc4:	08001c3f 	.word	0x08001c3f
 8001bc8:	08001c3f 	.word	0x08001c3f
 8001bcc:	08001c3f 	.word	0x08001c3f
 8001bd0:	08001c3f 	.word	0x08001c3f
 8001bd4:	08001bed 	.word	0x08001bed
 8001bd8:	08001c01 	.word	0x08001c01
 8001bdc:	4a79      	ldr	r2, [pc, #484]	; (8001dc4 <HAL_GPIO_Init+0x2b4>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d013      	beq.n	8001c0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001be2:	e02c      	b.n	8001c3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	623b      	str	r3, [r7, #32]
          break;
 8001bea:	e029      	b.n	8001c40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	623b      	str	r3, [r7, #32]
          break;
 8001bf4:	e024      	b.n	8001c40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	3308      	adds	r3, #8
 8001bfc:	623b      	str	r3, [r7, #32]
          break;
 8001bfe:	e01f      	b.n	8001c40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	330c      	adds	r3, #12
 8001c06:	623b      	str	r3, [r7, #32]
          break;
 8001c08:	e01a      	b.n	8001c40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d102      	bne.n	8001c18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c12:	2304      	movs	r3, #4
 8001c14:	623b      	str	r3, [r7, #32]
          break;
 8001c16:	e013      	b.n	8001c40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d105      	bne.n	8001c2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c20:	2308      	movs	r3, #8
 8001c22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69fa      	ldr	r2, [r7, #28]
 8001c28:	611a      	str	r2, [r3, #16]
          break;
 8001c2a:	e009      	b.n	8001c40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c2c:	2308      	movs	r3, #8
 8001c2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69fa      	ldr	r2, [r7, #28]
 8001c34:	615a      	str	r2, [r3, #20]
          break;
 8001c36:	e003      	b.n	8001c40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	623b      	str	r3, [r7, #32]
          break;
 8001c3c:	e000      	b.n	8001c40 <HAL_GPIO_Init+0x130>
          break;
 8001c3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	2bff      	cmp	r3, #255	; 0xff
 8001c44:	d801      	bhi.n	8001c4a <HAL_GPIO_Init+0x13a>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	e001      	b.n	8001c4e <HAL_GPIO_Init+0x13e>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	2bff      	cmp	r3, #255	; 0xff
 8001c54:	d802      	bhi.n	8001c5c <HAL_GPIO_Init+0x14c>
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	e002      	b.n	8001c62 <HAL_GPIO_Init+0x152>
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	3b08      	subs	r3, #8
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	210f      	movs	r1, #15
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	401a      	ands	r2, r3
 8001c74:	6a39      	ldr	r1, [r7, #32]
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 80b1 	beq.w	8001df2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c90:	4b4d      	ldr	r3, [pc, #308]	; (8001dc8 <HAL_GPIO_Init+0x2b8>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	4a4c      	ldr	r2, [pc, #304]	; (8001dc8 <HAL_GPIO_Init+0x2b8>)
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	6193      	str	r3, [r2, #24]
 8001c9c:	4b4a      	ldr	r3, [pc, #296]	; (8001dc8 <HAL_GPIO_Init+0x2b8>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ca8:	4a48      	ldr	r2, [pc, #288]	; (8001dcc <HAL_GPIO_Init+0x2bc>)
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	089b      	lsrs	r3, r3, #2
 8001cae:	3302      	adds	r3, #2
 8001cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	220f      	movs	r2, #15
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a40      	ldr	r2, [pc, #256]	; (8001dd0 <HAL_GPIO_Init+0x2c0>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d013      	beq.n	8001cfc <HAL_GPIO_Init+0x1ec>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a3f      	ldr	r2, [pc, #252]	; (8001dd4 <HAL_GPIO_Init+0x2c4>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d00d      	beq.n	8001cf8 <HAL_GPIO_Init+0x1e8>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a3e      	ldr	r2, [pc, #248]	; (8001dd8 <HAL_GPIO_Init+0x2c8>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d007      	beq.n	8001cf4 <HAL_GPIO_Init+0x1e4>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a3d      	ldr	r2, [pc, #244]	; (8001ddc <HAL_GPIO_Init+0x2cc>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d101      	bne.n	8001cf0 <HAL_GPIO_Init+0x1e0>
 8001cec:	2303      	movs	r3, #3
 8001cee:	e006      	b.n	8001cfe <HAL_GPIO_Init+0x1ee>
 8001cf0:	2304      	movs	r3, #4
 8001cf2:	e004      	b.n	8001cfe <HAL_GPIO_Init+0x1ee>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e002      	b.n	8001cfe <HAL_GPIO_Init+0x1ee>
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e000      	b.n	8001cfe <HAL_GPIO_Init+0x1ee>
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d00:	f002 0203 	and.w	r2, r2, #3
 8001d04:	0092      	lsls	r2, r2, #2
 8001d06:	4093      	lsls	r3, r2
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d0e:	492f      	ldr	r1, [pc, #188]	; (8001dcc <HAL_GPIO_Init+0x2bc>)
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	089b      	lsrs	r3, r3, #2
 8001d14:	3302      	adds	r3, #2
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d006      	beq.n	8001d36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d28:	4b2d      	ldr	r3, [pc, #180]	; (8001de0 <HAL_GPIO_Init+0x2d0>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	492c      	ldr	r1, [pc, #176]	; (8001de0 <HAL_GPIO_Init+0x2d0>)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	600b      	str	r3, [r1, #0]
 8001d34:	e006      	b.n	8001d44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d36:	4b2a      	ldr	r3, [pc, #168]	; (8001de0 <HAL_GPIO_Init+0x2d0>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	4928      	ldr	r1, [pc, #160]	; (8001de0 <HAL_GPIO_Init+0x2d0>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d006      	beq.n	8001d5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d50:	4b23      	ldr	r3, [pc, #140]	; (8001de0 <HAL_GPIO_Init+0x2d0>)
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	4922      	ldr	r1, [pc, #136]	; (8001de0 <HAL_GPIO_Init+0x2d0>)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]
 8001d5c:	e006      	b.n	8001d6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d5e:	4b20      	ldr	r3, [pc, #128]	; (8001de0 <HAL_GPIO_Init+0x2d0>)
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	491e      	ldr	r1, [pc, #120]	; (8001de0 <HAL_GPIO_Init+0x2d0>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d006      	beq.n	8001d86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d78:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <HAL_GPIO_Init+0x2d0>)
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	4918      	ldr	r1, [pc, #96]	; (8001de0 <HAL_GPIO_Init+0x2d0>)
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	608b      	str	r3, [r1, #8]
 8001d84:	e006      	b.n	8001d94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d86:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <HAL_GPIO_Init+0x2d0>)
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	4914      	ldr	r1, [pc, #80]	; (8001de0 <HAL_GPIO_Init+0x2d0>)
 8001d90:	4013      	ands	r3, r2
 8001d92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d021      	beq.n	8001de4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001da0:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <HAL_GPIO_Init+0x2d0>)
 8001da2:	68da      	ldr	r2, [r3, #12]
 8001da4:	490e      	ldr	r1, [pc, #56]	; (8001de0 <HAL_GPIO_Init+0x2d0>)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	60cb      	str	r3, [r1, #12]
 8001dac:	e021      	b.n	8001df2 <HAL_GPIO_Init+0x2e2>
 8001dae:	bf00      	nop
 8001db0:	10320000 	.word	0x10320000
 8001db4:	10310000 	.word	0x10310000
 8001db8:	10220000 	.word	0x10220000
 8001dbc:	10210000 	.word	0x10210000
 8001dc0:	10120000 	.word	0x10120000
 8001dc4:	10110000 	.word	0x10110000
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40010000 	.word	0x40010000
 8001dd0:	40010800 	.word	0x40010800
 8001dd4:	40010c00 	.word	0x40010c00
 8001dd8:	40011000 	.word	0x40011000
 8001ddc:	40011400 	.word	0x40011400
 8001de0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001de4:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <HAL_GPIO_Init+0x304>)
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	43db      	mvns	r3, r3
 8001dec:	4909      	ldr	r1, [pc, #36]	; (8001e14 <HAL_GPIO_Init+0x304>)
 8001dee:	4013      	ands	r3, r2
 8001df0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	3301      	adds	r3, #1
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f47f ae8e 	bne.w	8001b24 <HAL_GPIO_Init+0x14>
  }
}
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
 8001e0c:	372c      	adds	r7, #44	; 0x2c
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	40010400 	.word	0x40010400

08001e18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	887b      	ldrh	r3, [r7, #2]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d002      	beq.n	8001e36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e30:	2301      	movs	r3, #1
 8001e32:	73fb      	strb	r3, [r7, #15]
 8001e34:	e001      	b.n	8001e3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e36:	2300      	movs	r3, #0
 8001e38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr

08001e46 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	807b      	strh	r3, [r7, #2]
 8001e52:	4613      	mov	r3, r2
 8001e54:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e56:	787b      	ldrb	r3, [r7, #1]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e5c:	887a      	ldrh	r2, [r7, #2]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e62:	e003      	b.n	8001e6c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e64:	887b      	ldrh	r3, [r7, #2]
 8001e66:	041a      	lsls	r2, r3, #16
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	611a      	str	r2, [r3, #16]
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr
	...

08001e78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e272      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 8087 	beq.w	8001fa6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e98:	4b92      	ldr	r3, [pc, #584]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 030c 	and.w	r3, r3, #12
 8001ea0:	2b04      	cmp	r3, #4
 8001ea2:	d00c      	beq.n	8001ebe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ea4:	4b8f      	ldr	r3, [pc, #572]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 030c 	and.w	r3, r3, #12
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d112      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x5e>
 8001eb0:	4b8c      	ldr	r3, [pc, #560]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ebc:	d10b      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ebe:	4b89      	ldr	r3, [pc, #548]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d06c      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x12c>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d168      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e24c      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ede:	d106      	bne.n	8001eee <HAL_RCC_OscConfig+0x76>
 8001ee0:	4b80      	ldr	r3, [pc, #512]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a7f      	ldr	r2, [pc, #508]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	e02e      	b.n	8001f4c <HAL_RCC_OscConfig+0xd4>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10c      	bne.n	8001f10 <HAL_RCC_OscConfig+0x98>
 8001ef6:	4b7b      	ldr	r3, [pc, #492]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a7a      	ldr	r2, [pc, #488]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	4b78      	ldr	r3, [pc, #480]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a77      	ldr	r2, [pc, #476]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e01d      	b.n	8001f4c <HAL_RCC_OscConfig+0xd4>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f18:	d10c      	bne.n	8001f34 <HAL_RCC_OscConfig+0xbc>
 8001f1a:	4b72      	ldr	r3, [pc, #456]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a71      	ldr	r2, [pc, #452]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	4b6f      	ldr	r3, [pc, #444]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a6e      	ldr	r2, [pc, #440]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	e00b      	b.n	8001f4c <HAL_RCC_OscConfig+0xd4>
 8001f34:	4b6b      	ldr	r3, [pc, #428]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a6a      	ldr	r2, [pc, #424]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3e:	6013      	str	r3, [r2, #0]
 8001f40:	4b68      	ldr	r3, [pc, #416]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a67      	ldr	r2, [pc, #412]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d013      	beq.n	8001f7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7ff fab2 	bl	80014bc <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f5c:	f7ff faae 	bl	80014bc <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	; 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e200      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6e:	4b5d      	ldr	r3, [pc, #372]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0xe4>
 8001f7a:	e014      	b.n	8001fa6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7c:	f7ff fa9e 	bl	80014bc <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f84:	f7ff fa9a 	bl	80014bc <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b64      	cmp	r3, #100	; 0x64
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e1ec      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f96:	4b53      	ldr	r3, [pc, #332]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0x10c>
 8001fa2:	e000      	b.n	8001fa6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d063      	beq.n	800207a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fb2:	4b4c      	ldr	r3, [pc, #304]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00b      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fbe:	4b49      	ldr	r3, [pc, #292]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d11c      	bne.n	8002004 <HAL_RCC_OscConfig+0x18c>
 8001fca:	4b46      	ldr	r3, [pc, #280]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d116      	bne.n	8002004 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd6:	4b43      	ldr	r3, [pc, #268]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d005      	beq.n	8001fee <HAL_RCC_OscConfig+0x176>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d001      	beq.n	8001fee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e1c0      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fee:	4b3d      	ldr	r3, [pc, #244]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4939      	ldr	r1, [pc, #228]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002002:	e03a      	b.n	800207a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d020      	beq.n	800204e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800200c:	4b36      	ldr	r3, [pc, #216]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 800200e:	2201      	movs	r2, #1
 8002010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002012:	f7ff fa53 	bl	80014bc <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800201a:	f7ff fa4f 	bl	80014bc <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e1a1      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202c:	4b2d      	ldr	r3, [pc, #180]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0f0      	beq.n	800201a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002038:	4b2a      	ldr	r3, [pc, #168]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4927      	ldr	r1, [pc, #156]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8002048:	4313      	orrs	r3, r2
 800204a:	600b      	str	r3, [r1, #0]
 800204c:	e015      	b.n	800207a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800204e:	4b26      	ldr	r3, [pc, #152]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7ff fa32 	bl	80014bc <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800205c:	f7ff fa2e 	bl	80014bc <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e180      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206e:	4b1d      	ldr	r3, [pc, #116]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d03a      	beq.n	80020fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d019      	beq.n	80020c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800208e:	4b17      	ldr	r3, [pc, #92]	; (80020ec <HAL_RCC_OscConfig+0x274>)
 8002090:	2201      	movs	r2, #1
 8002092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002094:	f7ff fa12 	bl	80014bc <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800209c:	f7ff fa0e 	bl	80014bc <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e160      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ae:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020ba:	2001      	movs	r0, #1
 80020bc:	f000 fad8 	bl	8002670 <RCC_Delay>
 80020c0:	e01c      	b.n	80020fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <HAL_RCC_OscConfig+0x274>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c8:	f7ff f9f8 	bl	80014bc <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ce:	e00f      	b.n	80020f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d0:	f7ff f9f4 	bl	80014bc <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d908      	bls.n	80020f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e146      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000
 80020e8:	42420000 	.word	0x42420000
 80020ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f0:	4b92      	ldr	r3, [pc, #584]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1e9      	bne.n	80020d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 80a6 	beq.w	8002256 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800210a:	2300      	movs	r3, #0
 800210c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800210e:	4b8b      	ldr	r3, [pc, #556]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10d      	bne.n	8002136 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800211a:	4b88      	ldr	r3, [pc, #544]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	4a87      	ldr	r2, [pc, #540]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002124:	61d3      	str	r3, [r2, #28]
 8002126:	4b85      	ldr	r3, [pc, #532]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002132:	2301      	movs	r3, #1
 8002134:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002136:	4b82      	ldr	r3, [pc, #520]	; (8002340 <HAL_RCC_OscConfig+0x4c8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213e:	2b00      	cmp	r3, #0
 8002140:	d118      	bne.n	8002174 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002142:	4b7f      	ldr	r3, [pc, #508]	; (8002340 <HAL_RCC_OscConfig+0x4c8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a7e      	ldr	r2, [pc, #504]	; (8002340 <HAL_RCC_OscConfig+0x4c8>)
 8002148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800214e:	f7ff f9b5 	bl	80014bc <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002156:	f7ff f9b1 	bl	80014bc <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b64      	cmp	r3, #100	; 0x64
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e103      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002168:	4b75      	ldr	r3, [pc, #468]	; (8002340 <HAL_RCC_OscConfig+0x4c8>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0f0      	beq.n	8002156 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d106      	bne.n	800218a <HAL_RCC_OscConfig+0x312>
 800217c:	4b6f      	ldr	r3, [pc, #444]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	4a6e      	ldr	r2, [pc, #440]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	6213      	str	r3, [r2, #32]
 8002188:	e02d      	b.n	80021e6 <HAL_RCC_OscConfig+0x36e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10c      	bne.n	80021ac <HAL_RCC_OscConfig+0x334>
 8002192:	4b6a      	ldr	r3, [pc, #424]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	4a69      	ldr	r2, [pc, #420]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002198:	f023 0301 	bic.w	r3, r3, #1
 800219c:	6213      	str	r3, [r2, #32]
 800219e:	4b67      	ldr	r3, [pc, #412]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	4a66      	ldr	r2, [pc, #408]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021a4:	f023 0304 	bic.w	r3, r3, #4
 80021a8:	6213      	str	r3, [r2, #32]
 80021aa:	e01c      	b.n	80021e6 <HAL_RCC_OscConfig+0x36e>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	2b05      	cmp	r3, #5
 80021b2:	d10c      	bne.n	80021ce <HAL_RCC_OscConfig+0x356>
 80021b4:	4b61      	ldr	r3, [pc, #388]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	4a60      	ldr	r2, [pc, #384]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021ba:	f043 0304 	orr.w	r3, r3, #4
 80021be:	6213      	str	r3, [r2, #32]
 80021c0:	4b5e      	ldr	r3, [pc, #376]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	4a5d      	ldr	r2, [pc, #372]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	6213      	str	r3, [r2, #32]
 80021cc:	e00b      	b.n	80021e6 <HAL_RCC_OscConfig+0x36e>
 80021ce:	4b5b      	ldr	r3, [pc, #364]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	4a5a      	ldr	r2, [pc, #360]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021d4:	f023 0301 	bic.w	r3, r3, #1
 80021d8:	6213      	str	r3, [r2, #32]
 80021da:	4b58      	ldr	r3, [pc, #352]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	4a57      	ldr	r2, [pc, #348]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	f023 0304 	bic.w	r3, r3, #4
 80021e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d015      	beq.n	800221a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ee:	f7ff f965 	bl	80014bc <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f4:	e00a      	b.n	800220c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f6:	f7ff f961 	bl	80014bc <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	f241 3288 	movw	r2, #5000	; 0x1388
 8002204:	4293      	cmp	r3, r2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e0b1      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220c:	4b4b      	ldr	r3, [pc, #300]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0ee      	beq.n	80021f6 <HAL_RCC_OscConfig+0x37e>
 8002218:	e014      	b.n	8002244 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800221a:	f7ff f94f 	bl	80014bc <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002220:	e00a      	b.n	8002238 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002222:	f7ff f94b 	bl	80014bc <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002230:	4293      	cmp	r3, r2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e09b      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002238:	4b40      	ldr	r3, [pc, #256]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1ee      	bne.n	8002222 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002244:	7dfb      	ldrb	r3, [r7, #23]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d105      	bne.n	8002256 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800224a:	4b3c      	ldr	r3, [pc, #240]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	4a3b      	ldr	r2, [pc, #236]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002254:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 8087 	beq.w	800236e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002260:	4b36      	ldr	r3, [pc, #216]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 030c 	and.w	r3, r3, #12
 8002268:	2b08      	cmp	r3, #8
 800226a:	d061      	beq.n	8002330 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	2b02      	cmp	r3, #2
 8002272:	d146      	bne.n	8002302 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002274:	4b33      	ldr	r3, [pc, #204]	; (8002344 <HAL_RCC_OscConfig+0x4cc>)
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227a:	f7ff f91f 	bl	80014bc <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002282:	f7ff f91b 	bl	80014bc <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e06d      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002294:	4b29      	ldr	r3, [pc, #164]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1f0      	bne.n	8002282 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a8:	d108      	bne.n	80022bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022aa:	4b24      	ldr	r3, [pc, #144]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	4921      	ldr	r1, [pc, #132]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022bc:	4b1f      	ldr	r3, [pc, #124]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a19      	ldr	r1, [r3, #32]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	430b      	orrs	r3, r1
 80022ce:	491b      	ldr	r1, [pc, #108]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d4:	4b1b      	ldr	r3, [pc, #108]	; (8002344 <HAL_RCC_OscConfig+0x4cc>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022da:	f7ff f8ef 	bl	80014bc <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e2:	f7ff f8eb 	bl	80014bc <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e03d      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0f0      	beq.n	80022e2 <HAL_RCC_OscConfig+0x46a>
 8002300:	e035      	b.n	800236e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002302:	4b10      	ldr	r3, [pc, #64]	; (8002344 <HAL_RCC_OscConfig+0x4cc>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7ff f8d8 	bl	80014bc <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002310:	f7ff f8d4 	bl	80014bc <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e026      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x498>
 800232e:	e01e      	b.n	800236e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d107      	bne.n	8002348 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e019      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
 800233c:	40021000 	.word	0x40021000
 8002340:	40007000 	.word	0x40007000
 8002344:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002348:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <HAL_RCC_OscConfig+0x500>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	429a      	cmp	r2, r3
 800235a:	d106      	bne.n	800236a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002366:	429a      	cmp	r2, r3
 8002368:	d001      	beq.n	800236e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40021000 	.word	0x40021000

0800237c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0d0      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002390:	4b6a      	ldr	r3, [pc, #424]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d910      	bls.n	80023c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239e:	4b67      	ldr	r3, [pc, #412]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f023 0207 	bic.w	r2, r3, #7
 80023a6:	4965      	ldr	r1, [pc, #404]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ae:	4b63      	ldr	r3, [pc, #396]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d001      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0b8      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d020      	beq.n	800240e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d005      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023d8:	4b59      	ldr	r3, [pc, #356]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	4a58      	ldr	r2, [pc, #352]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0308 	and.w	r3, r3, #8
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023f0:	4b53      	ldr	r3, [pc, #332]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	4a52      	ldr	r2, [pc, #328]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80023f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023fc:	4b50      	ldr	r3, [pc, #320]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	494d      	ldr	r1, [pc, #308]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 800240a:	4313      	orrs	r3, r2
 800240c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d040      	beq.n	800249c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d107      	bne.n	8002432 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002422:	4b47      	ldr	r3, [pc, #284]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d115      	bne.n	800245a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e07f      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d107      	bne.n	800244a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243a:	4b41      	ldr	r3, [pc, #260]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d109      	bne.n	800245a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e073      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244a:	4b3d      	ldr	r3, [pc, #244]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e06b      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800245a:	4b39      	ldr	r3, [pc, #228]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f023 0203 	bic.w	r2, r3, #3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	4936      	ldr	r1, [pc, #216]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 8002468:	4313      	orrs	r3, r2
 800246a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800246c:	f7ff f826 	bl	80014bc <HAL_GetTick>
 8002470:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002472:	e00a      	b.n	800248a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002474:	f7ff f822 	bl	80014bc <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002482:	4293      	cmp	r3, r2
 8002484:	d901      	bls.n	800248a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e053      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248a:	4b2d      	ldr	r3, [pc, #180]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 020c 	and.w	r2, r3, #12
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	429a      	cmp	r2, r3
 800249a:	d1eb      	bne.n	8002474 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800249c:	4b27      	ldr	r3, [pc, #156]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d210      	bcs.n	80024cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024aa:	4b24      	ldr	r3, [pc, #144]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 0207 	bic.w	r2, r3, #7
 80024b2:	4922      	ldr	r1, [pc, #136]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ba:	4b20      	ldr	r3, [pc, #128]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d001      	beq.n	80024cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e032      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d008      	beq.n	80024ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024d8:	4b19      	ldr	r3, [pc, #100]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	4916      	ldr	r1, [pc, #88]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d009      	beq.n	800250a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024f6:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	490e      	ldr	r1, [pc, #56]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	4313      	orrs	r3, r2
 8002508:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800250a:	f000 f821 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 800250e:	4602      	mov	r2, r0
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	091b      	lsrs	r3, r3, #4
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	490a      	ldr	r1, [pc, #40]	; (8002544 <HAL_RCC_ClockConfig+0x1c8>)
 800251c:	5ccb      	ldrb	r3, [r1, r3]
 800251e:	fa22 f303 	lsr.w	r3, r2, r3
 8002522:	4a09      	ldr	r2, [pc, #36]	; (8002548 <HAL_RCC_ClockConfig+0x1cc>)
 8002524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002526:	4b09      	ldr	r3, [pc, #36]	; (800254c <HAL_RCC_ClockConfig+0x1d0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe ff84 	bl	8001438 <HAL_InitTick>

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40022000 	.word	0x40022000
 8002540:	40021000 	.word	0x40021000
 8002544:	08003a00 	.word	0x08003a00
 8002548:	20000024 	.word	0x20000024
 800254c:	200002cc 	.word	0x200002cc

08002550 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002550:	b490      	push	{r4, r7}
 8002552:	b08a      	sub	sp, #40	; 0x28
 8002554:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002556:	4b29      	ldr	r3, [pc, #164]	; (80025fc <HAL_RCC_GetSysClockFreq+0xac>)
 8002558:	1d3c      	adds	r4, r7, #4
 800255a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800255c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002560:	f240 2301 	movw	r3, #513	; 0x201
 8002564:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]
 800256a:	2300      	movs	r3, #0
 800256c:	61bb      	str	r3, [r7, #24]
 800256e:	2300      	movs	r3, #0
 8002570:	627b      	str	r3, [r7, #36]	; 0x24
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002576:	2300      	movs	r3, #0
 8002578:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800257a:	4b21      	ldr	r3, [pc, #132]	; (8002600 <HAL_RCC_GetSysClockFreq+0xb0>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f003 030c 	and.w	r3, r3, #12
 8002586:	2b04      	cmp	r3, #4
 8002588:	d002      	beq.n	8002590 <HAL_RCC_GetSysClockFreq+0x40>
 800258a:	2b08      	cmp	r3, #8
 800258c:	d003      	beq.n	8002596 <HAL_RCC_GetSysClockFreq+0x46>
 800258e:	e02b      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002590:	4b1c      	ldr	r3, [pc, #112]	; (8002604 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002592:	623b      	str	r3, [r7, #32]
      break;
 8002594:	e02b      	b.n	80025ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	0c9b      	lsrs	r3, r3, #18
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	3328      	adds	r3, #40	; 0x28
 80025a0:	443b      	add	r3, r7
 80025a2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025a6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d012      	beq.n	80025d8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025b2:	4b13      	ldr	r3, [pc, #76]	; (8002600 <HAL_RCC_GetSysClockFreq+0xb0>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	0c5b      	lsrs	r3, r3, #17
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	3328      	adds	r3, #40	; 0x28
 80025be:	443b      	add	r3, r7
 80025c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	4a0e      	ldr	r2, [pc, #56]	; (8002604 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025ca:	fb03 f202 	mul.w	r2, r3, r2
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
 80025d6:	e004      	b.n	80025e2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	4a0b      	ldr	r2, [pc, #44]	; (8002608 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025dc:	fb02 f303 	mul.w	r3, r2, r3
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	623b      	str	r3, [r7, #32]
      break;
 80025e6:	e002      	b.n	80025ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025e8:	4b06      	ldr	r3, [pc, #24]	; (8002604 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025ea:	623b      	str	r3, [r7, #32]
      break;
 80025ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ee:	6a3b      	ldr	r3, [r7, #32]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3728      	adds	r7, #40	; 0x28
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc90      	pop	{r4, r7}
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	080039f0 	.word	0x080039f0
 8002600:	40021000 	.word	0x40021000
 8002604:	007a1200 	.word	0x007a1200
 8002608:	003d0900 	.word	0x003d0900

0800260c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002610:	4b02      	ldr	r3, [pc, #8]	; (800261c <HAL_RCC_GetHCLKFreq+0x10>)
 8002612:	681b      	ldr	r3, [r3, #0]
}
 8002614:	4618      	mov	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr
 800261c:	20000024 	.word	0x20000024

08002620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002624:	f7ff fff2 	bl	800260c <HAL_RCC_GetHCLKFreq>
 8002628:	4602      	mov	r2, r0
 800262a:	4b05      	ldr	r3, [pc, #20]	; (8002640 <HAL_RCC_GetPCLK1Freq+0x20>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	0a1b      	lsrs	r3, r3, #8
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	4903      	ldr	r1, [pc, #12]	; (8002644 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002636:	5ccb      	ldrb	r3, [r1, r3]
 8002638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800263c:	4618      	mov	r0, r3
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40021000 	.word	0x40021000
 8002644:	08003a10 	.word	0x08003a10

08002648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800264c:	f7ff ffde 	bl	800260c <HAL_RCC_GetHCLKFreq>
 8002650:	4602      	mov	r2, r0
 8002652:	4b05      	ldr	r3, [pc, #20]	; (8002668 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	0adb      	lsrs	r3, r3, #11
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	4903      	ldr	r1, [pc, #12]	; (800266c <HAL_RCC_GetPCLK2Freq+0x24>)
 800265e:	5ccb      	ldrb	r3, [r1, r3]
 8002660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002664:	4618      	mov	r0, r3
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40021000 	.word	0x40021000
 800266c:	08003a10 	.word	0x08003a10

08002670 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002678:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <RCC_Delay+0x34>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a0a      	ldr	r2, [pc, #40]	; (80026a8 <RCC_Delay+0x38>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	0a5b      	lsrs	r3, r3, #9
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	fb02 f303 	mul.w	r3, r2, r3
 800268a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800268c:	bf00      	nop
  }
  while (Delay --);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	1e5a      	subs	r2, r3, #1
 8002692:	60fa      	str	r2, [r7, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1f9      	bne.n	800268c <RCC_Delay+0x1c>
}
 8002698:	bf00      	nop
 800269a:	bf00      	nop
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr
 80026a4:	20000024 	.word	0x20000024
 80026a8:	10624dd3 	.word	0x10624dd3

080026ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e076      	b.n	80027ac <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d108      	bne.n	80026d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026ce:	d009      	beq.n	80026e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	61da      	str	r2, [r3, #28]
 80026d6:	e005      	b.n	80026e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d106      	bne.n	8002704 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7fd ffe6 	bl	80006d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2202      	movs	r2, #2
 8002708:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800271a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	431a      	orrs	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002754:	431a      	orrs	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002768:	ea42 0103 	orr.w	r1, r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002770:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	0c1a      	lsrs	r2, r3, #16
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f002 0204 	and.w	r2, r2, #4
 800278a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	69da      	ldr	r2, [r3, #28]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800279a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b088      	sub	sp, #32
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	603b      	str	r3, [r7, #0]
 80027c0:	4613      	mov	r3, r2
 80027c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d101      	bne.n	80027d6 <HAL_SPI_Transmit+0x22>
 80027d2:	2302      	movs	r3, #2
 80027d4:	e126      	b.n	8002a24 <HAL_SPI_Transmit+0x270>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027de:	f7fe fe6d 	bl	80014bc <HAL_GetTick>
 80027e2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80027e4:	88fb      	ldrh	r3, [r7, #6]
 80027e6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d002      	beq.n	80027fa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80027f4:	2302      	movs	r3, #2
 80027f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027f8:	e10b      	b.n	8002a12 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d002      	beq.n	8002806 <HAL_SPI_Transmit+0x52>
 8002800:	88fb      	ldrh	r3, [r7, #6]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d102      	bne.n	800280c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	77fb      	strb	r3, [r7, #31]
    goto error;
 800280a:	e102      	b.n	8002a12 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2203      	movs	r2, #3
 8002810:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	88fa      	ldrh	r2, [r7, #6]
 8002824:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	88fa      	ldrh	r2, [r7, #6]
 800282a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002852:	d10f      	bne.n	8002874 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002862:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002872:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287e:	2b40      	cmp	r3, #64	; 0x40
 8002880:	d007      	beq.n	8002892 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002890:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800289a:	d14b      	bne.n	8002934 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d002      	beq.n	80028aa <HAL_SPI_Transmit+0xf6>
 80028a4:	8afb      	ldrh	r3, [r7, #22]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d13e      	bne.n	8002928 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	881a      	ldrh	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	1c9a      	adds	r2, r3, #2
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80028ce:	e02b      	b.n	8002928 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d112      	bne.n	8002904 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	881a      	ldrh	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	1c9a      	adds	r2, r3, #2
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	86da      	strh	r2, [r3, #54]	; 0x36
 8002902:	e011      	b.n	8002928 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002904:	f7fe fdda 	bl	80014bc <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d803      	bhi.n	800291c <HAL_SPI_Transmit+0x168>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800291a:	d102      	bne.n	8002922 <HAL_SPI_Transmit+0x16e>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d102      	bne.n	8002928 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002926:	e074      	b.n	8002a12 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800292c:	b29b      	uxth	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1ce      	bne.n	80028d0 <HAL_SPI_Transmit+0x11c>
 8002932:	e04c      	b.n	80029ce <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d002      	beq.n	8002942 <HAL_SPI_Transmit+0x18e>
 800293c:	8afb      	ldrh	r3, [r7, #22]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d140      	bne.n	80029c4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	330c      	adds	r3, #12
 800294c:	7812      	ldrb	r2, [r2, #0]
 800294e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800295e:	b29b      	uxth	r3, r3
 8002960:	3b01      	subs	r3, #1
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002968:	e02c      	b.n	80029c4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b02      	cmp	r3, #2
 8002976:	d113      	bne.n	80029a0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	330c      	adds	r3, #12
 8002982:	7812      	ldrb	r2, [r2, #0]
 8002984:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002994:	b29b      	uxth	r3, r3
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	86da      	strh	r2, [r3, #54]	; 0x36
 800299e:	e011      	b.n	80029c4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029a0:	f7fe fd8c 	bl	80014bc <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d803      	bhi.n	80029b8 <HAL_SPI_Transmit+0x204>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029b6:	d102      	bne.n	80029be <HAL_SPI_Transmit+0x20a>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d102      	bne.n	80029c4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80029c2:	e026      	b.n	8002a12 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1cd      	bne.n	800296a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	6839      	ldr	r1, [r7, #0]
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 f8b2 	bl	8002b3c <SPI_EndRxTxTransaction>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2220      	movs	r2, #32
 80029e2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10a      	bne.n	8002a02 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029ec:	2300      	movs	r3, #0
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d002      	beq.n	8002a10 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	77fb      	strb	r3, [r7, #31]
 8002a0e:	e000      	b.n	8002a12 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002a10:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a22:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3720      	adds	r7, #32
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b088      	sub	sp, #32
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	603b      	str	r3, [r7, #0]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a3c:	f7fe fd3e 	bl	80014bc <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a44:	1a9b      	subs	r3, r3, r2
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	4413      	add	r3, r2
 8002a4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a4c:	f7fe fd36 	bl	80014bc <HAL_GetTick>
 8002a50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a52:	4b39      	ldr	r3, [pc, #228]	; (8002b38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	015b      	lsls	r3, r3, #5
 8002a58:	0d1b      	lsrs	r3, r3, #20
 8002a5a:	69fa      	ldr	r2, [r7, #28]
 8002a5c:	fb02 f303 	mul.w	r3, r2, r3
 8002a60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a62:	e054      	b.n	8002b0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a6a:	d050      	beq.n	8002b0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a6c:	f7fe fd26 	bl	80014bc <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	69fa      	ldr	r2, [r7, #28]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d902      	bls.n	8002a82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d13d      	bne.n	8002afe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a9a:	d111      	bne.n	8002ac0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aa4:	d004      	beq.n	8002ab0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aae:	d107      	bne.n	8002ac0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002abe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ac8:	d10f      	bne.n	8002aea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ae8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e017      	b.n	8002b2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4013      	ands	r3, r2
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	bf0c      	ite	eq
 8002b1e:	2301      	moveq	r3, #1
 8002b20:	2300      	movne	r3, #0
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	461a      	mov	r2, r3
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d19b      	bne.n	8002a64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3720      	adds	r7, #32
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000024 	.word	0x20000024

08002b3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af02      	add	r7, sp, #8
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2180      	movs	r1, #128	; 0x80
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f7ff ff6a 	bl	8002a2c <SPI_WaitFlagStateUntilTimeout>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d007      	beq.n	8002b6e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b62:	f043 0220 	orr.w	r2, r3, #32
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e000      	b.n	8002b70 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e03f      	b.n	8002c0a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d106      	bne.n	8002ba4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7fd fde4 	bl	800076c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2224      	movs	r2, #36	; 0x24
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f9c3 	bl	8002f48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	691a      	ldr	r2, [r3, #16]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695a      	ldr	r2, [r3, #20]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002be0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bf0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2220      	movs	r2, #32
 8002c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b084      	sub	sp, #16
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	60b9      	str	r1, [r7, #8]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b20      	cmp	r3, #32
 8002c2a:	d11d      	bne.n	8002c68 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d002      	beq.n	8002c38 <HAL_UART_Receive_DMA+0x26>
 8002c32:	88fb      	ldrh	r3, [r7, #6]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e016      	b.n	8002c6a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <HAL_UART_Receive_DMA+0x38>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e00f      	b.n	8002c6a <HAL_UART_Receive_DMA+0x58>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8002c58:	88fb      	ldrh	r3, [r7, #6]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	68b9      	ldr	r1, [r7, #8]
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 f8cc 	bl	8002dfc <UART_Start_Receive_DMA>
 8002c64:	4603      	mov	r3, r0
 8002c66:	e000      	b.n	8002c6a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002c68:	2302      	movs	r3, #2
  }
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr

08002c84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr

08002c9a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b084      	sub	sp, #16
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0320 	and.w	r3, r3, #32
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d12a      	bne.n	8002d0c <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cca:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695a      	ldr	r2, [r3, #20]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0201 	bic.w	r2, r2, #1
 8002cda:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cea:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d107      	bne.n	8002d0c <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0210 	bic.w	r2, r2, #16
 8002d0a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d106      	bne.n	8002d22 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d18:	4619      	mov	r1, r3
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f7ff ffb2 	bl	8002c84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002d20:	e002      	b.n	8002d28 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f7fd fa2c 	bl	8000180 <HAL_UART_RxCpltCallback>
}
 8002d28:	bf00      	nop
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d108      	bne.n	8002d58 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d4a:	085b      	lsrs	r3, r3, #1
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	4619      	mov	r1, r3
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f7ff ff97 	bl	8002c84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002d56:	e002      	b.n	8002d5e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f7fd f9f7 	bl	800014c <HAL_UART_RxHalfCpltCallback>
}
 8002d5e:	bf00      	nop
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	bf14      	ite	ne
 8002d86:	2301      	movne	r3, #1
 8002d88:	2300      	moveq	r3, #0
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b21      	cmp	r3, #33	; 0x21
 8002d98:	d108      	bne.n	8002dac <UART_DMAError+0x46>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2200      	movs	r2, #0
 8002da4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002da6:	68b8      	ldr	r0, [r7, #8]
 8002da8:	f000 f88c 	bl	8002ec4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	bf14      	ite	ne
 8002dba:	2301      	movne	r3, #1
 8002dbc:	2300      	moveq	r3, #0
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b22      	cmp	r3, #34	; 0x22
 8002dcc:	d108      	bne.n	8002de0 <UART_DMAError+0x7a>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002dda:	68b8      	ldr	r0, [r7, #8]
 8002ddc:	f000 f887 	bl	8002eee <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	f043 0210 	orr.w	r2, r3, #16
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002dec:	68b8      	ldr	r0, [r7, #8]
 8002dee:	f7ff ff40 	bl	8002c72 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002df2:	bf00      	nop
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
	...

08002dfc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	4613      	mov	r3, r2
 8002e08:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	88fa      	ldrh	r2, [r7, #6]
 8002e14:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2222      	movs	r2, #34	; 0x22
 8002e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e28:	4a23      	ldr	r2, [pc, #140]	; (8002eb8 <UART_Start_Receive_DMA+0xbc>)
 8002e2a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e30:	4a22      	ldr	r2, [pc, #136]	; (8002ebc <UART_Start_Receive_DMA+0xc0>)
 8002e32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e38:	4a21      	ldr	r2, [pc, #132]	; (8002ec0 <UART_Start_Receive_DMA+0xc4>)
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e40:	2200      	movs	r2, #0
 8002e42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002e44:	f107 0308 	add.w	r3, r7, #8
 8002e48:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	3304      	adds	r3, #4
 8002e54:	4619      	mov	r1, r3
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	88fb      	ldrh	r3, [r7, #6]
 8002e5c:	f7fe fcc4 	bl	80017e8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002e60:	2300      	movs	r3, #0
 8002e62:	613b      	str	r3, [r7, #16]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	613b      	str	r3, [r7, #16]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68da      	ldr	r2, [r3, #12]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e8c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695a      	ldr	r2, [r3, #20]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f042 0201 	orr.w	r2, r2, #1
 8002e9c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695a      	ldr	r2, [r3, #20]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eac:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	08002c9b 	.word	0x08002c9b
 8002ebc:	08002d31 	.word	0x08002d31
 8002ec0:	08002d67 	.word	0x08002d67

08002ec4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002eda:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	4770      	bx	lr

08002eee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68da      	ldr	r2, [r3, #12]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f04:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695a      	ldr	r2, [r3, #20]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0201 	bic.w	r2, r2, #1
 8002f14:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d107      	bne.n	8002f2e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0210 	bic.w	r2, r2, #16
 8002f2c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2220      	movs	r2, #32
 8002f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bc80      	pop	{r7}
 8002f44:	4770      	bx	lr
	...

08002f48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f82:	f023 030c 	bic.w	r3, r3, #12
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6812      	ldr	r2, [r2, #0]
 8002f8a:	68b9      	ldr	r1, [r7, #8]
 8002f8c:	430b      	orrs	r3, r1
 8002f8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699a      	ldr	r2, [r3, #24]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a2c      	ldr	r2, [pc, #176]	; (800305c <UART_SetConfig+0x114>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d103      	bne.n	8002fb8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002fb0:	f7ff fb4a 	bl	8002648 <HAL_RCC_GetPCLK2Freq>
 8002fb4:	60f8      	str	r0, [r7, #12]
 8002fb6:	e002      	b.n	8002fbe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002fb8:	f7ff fb32 	bl	8002620 <HAL_RCC_GetPCLK1Freq>
 8002fbc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009a      	lsls	r2, r3, #2
 8002fc8:	441a      	add	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd4:	4a22      	ldr	r2, [pc, #136]	; (8003060 <UART_SetConfig+0x118>)
 8002fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fda:	095b      	lsrs	r3, r3, #5
 8002fdc:	0119      	lsls	r1, r3, #4
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009a      	lsls	r2, r3, #2
 8002fe8:	441a      	add	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ff4:	4b1a      	ldr	r3, [pc, #104]	; (8003060 <UART_SetConfig+0x118>)
 8002ff6:	fba3 0302 	umull	r0, r3, r3, r2
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	2064      	movs	r0, #100	; 0x64
 8002ffe:	fb00 f303 	mul.w	r3, r0, r3
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	3332      	adds	r3, #50	; 0x32
 8003008:	4a15      	ldr	r2, [pc, #84]	; (8003060 <UART_SetConfig+0x118>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	095b      	lsrs	r3, r3, #5
 8003010:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003014:	4419      	add	r1, r3
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	4613      	mov	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	009a      	lsls	r2, r3, #2
 8003020:	441a      	add	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	fbb2 f2f3 	udiv	r2, r2, r3
 800302c:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <UART_SetConfig+0x118>)
 800302e:	fba3 0302 	umull	r0, r3, r3, r2
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	2064      	movs	r0, #100	; 0x64
 8003036:	fb00 f303 	mul.w	r3, r0, r3
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	3332      	adds	r3, #50	; 0x32
 8003040:	4a07      	ldr	r2, [pc, #28]	; (8003060 <UART_SetConfig+0x118>)
 8003042:	fba2 2303 	umull	r2, r3, r2, r3
 8003046:	095b      	lsrs	r3, r3, #5
 8003048:	f003 020f 	and.w	r2, r3, #15
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	440a      	add	r2, r1
 8003052:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003054:	bf00      	nop
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40013800 	.word	0x40013800
 8003060:	51eb851f 	.word	0x51eb851f

08003064 <__errno>:
 8003064:	4b01      	ldr	r3, [pc, #4]	; (800306c <__errno+0x8>)
 8003066:	6818      	ldr	r0, [r3, #0]
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	200002d4 	.word	0x200002d4

08003070 <__libc_init_array>:
 8003070:	b570      	push	{r4, r5, r6, lr}
 8003072:	2600      	movs	r6, #0
 8003074:	4d0c      	ldr	r5, [pc, #48]	; (80030a8 <__libc_init_array+0x38>)
 8003076:	4c0d      	ldr	r4, [pc, #52]	; (80030ac <__libc_init_array+0x3c>)
 8003078:	1b64      	subs	r4, r4, r5
 800307a:	10a4      	asrs	r4, r4, #2
 800307c:	42a6      	cmp	r6, r4
 800307e:	d109      	bne.n	8003094 <__libc_init_array+0x24>
 8003080:	f000 fc9c 	bl	80039bc <_init>
 8003084:	2600      	movs	r6, #0
 8003086:	4d0a      	ldr	r5, [pc, #40]	; (80030b0 <__libc_init_array+0x40>)
 8003088:	4c0a      	ldr	r4, [pc, #40]	; (80030b4 <__libc_init_array+0x44>)
 800308a:	1b64      	subs	r4, r4, r5
 800308c:	10a4      	asrs	r4, r4, #2
 800308e:	42a6      	cmp	r6, r4
 8003090:	d105      	bne.n	800309e <__libc_init_array+0x2e>
 8003092:	bd70      	pop	{r4, r5, r6, pc}
 8003094:	f855 3b04 	ldr.w	r3, [r5], #4
 8003098:	4798      	blx	r3
 800309a:	3601      	adds	r6, #1
 800309c:	e7ee      	b.n	800307c <__libc_init_array+0xc>
 800309e:	f855 3b04 	ldr.w	r3, [r5], #4
 80030a2:	4798      	blx	r3
 80030a4:	3601      	adds	r6, #1
 80030a6:	e7f2      	b.n	800308e <__libc_init_array+0x1e>
 80030a8:	08003a4c 	.word	0x08003a4c
 80030ac:	08003a4c 	.word	0x08003a4c
 80030b0:	08003a4c 	.word	0x08003a4c
 80030b4:	08003a50 	.word	0x08003a50

080030b8 <memcpy>:
 80030b8:	440a      	add	r2, r1
 80030ba:	4291      	cmp	r1, r2
 80030bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80030c0:	d100      	bne.n	80030c4 <memcpy+0xc>
 80030c2:	4770      	bx	lr
 80030c4:	b510      	push	{r4, lr}
 80030c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80030ca:	4291      	cmp	r1, r2
 80030cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80030d0:	d1f9      	bne.n	80030c6 <memcpy+0xe>
 80030d2:	bd10      	pop	{r4, pc}

080030d4 <memset>:
 80030d4:	4603      	mov	r3, r0
 80030d6:	4402      	add	r2, r0
 80030d8:	4293      	cmp	r3, r2
 80030da:	d100      	bne.n	80030de <memset+0xa>
 80030dc:	4770      	bx	lr
 80030de:	f803 1b01 	strb.w	r1, [r3], #1
 80030e2:	e7f9      	b.n	80030d8 <memset+0x4>

080030e4 <siprintf>:
 80030e4:	b40e      	push	{r1, r2, r3}
 80030e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80030ea:	b500      	push	{lr}
 80030ec:	b09c      	sub	sp, #112	; 0x70
 80030ee:	ab1d      	add	r3, sp, #116	; 0x74
 80030f0:	9002      	str	r0, [sp, #8]
 80030f2:	9006      	str	r0, [sp, #24]
 80030f4:	9107      	str	r1, [sp, #28]
 80030f6:	9104      	str	r1, [sp, #16]
 80030f8:	4808      	ldr	r0, [pc, #32]	; (800311c <siprintf+0x38>)
 80030fa:	4909      	ldr	r1, [pc, #36]	; (8003120 <siprintf+0x3c>)
 80030fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003100:	9105      	str	r1, [sp, #20]
 8003102:	6800      	ldr	r0, [r0, #0]
 8003104:	a902      	add	r1, sp, #8
 8003106:	9301      	str	r3, [sp, #4]
 8003108:	f000 f868 	bl	80031dc <_svfiprintf_r>
 800310c:	2200      	movs	r2, #0
 800310e:	9b02      	ldr	r3, [sp, #8]
 8003110:	701a      	strb	r2, [r3, #0]
 8003112:	b01c      	add	sp, #112	; 0x70
 8003114:	f85d eb04 	ldr.w	lr, [sp], #4
 8003118:	b003      	add	sp, #12
 800311a:	4770      	bx	lr
 800311c:	200002d4 	.word	0x200002d4
 8003120:	ffff0208 	.word	0xffff0208

08003124 <__ssputs_r>:
 8003124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003128:	688e      	ldr	r6, [r1, #8]
 800312a:	4682      	mov	sl, r0
 800312c:	429e      	cmp	r6, r3
 800312e:	460c      	mov	r4, r1
 8003130:	4690      	mov	r8, r2
 8003132:	461f      	mov	r7, r3
 8003134:	d838      	bhi.n	80031a8 <__ssputs_r+0x84>
 8003136:	898a      	ldrh	r2, [r1, #12]
 8003138:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800313c:	d032      	beq.n	80031a4 <__ssputs_r+0x80>
 800313e:	6825      	ldr	r5, [r4, #0]
 8003140:	6909      	ldr	r1, [r1, #16]
 8003142:	3301      	adds	r3, #1
 8003144:	eba5 0901 	sub.w	r9, r5, r1
 8003148:	6965      	ldr	r5, [r4, #20]
 800314a:	444b      	add	r3, r9
 800314c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003150:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003154:	106d      	asrs	r5, r5, #1
 8003156:	429d      	cmp	r5, r3
 8003158:	bf38      	it	cc
 800315a:	461d      	movcc	r5, r3
 800315c:	0553      	lsls	r3, r2, #21
 800315e:	d531      	bpl.n	80031c4 <__ssputs_r+0xa0>
 8003160:	4629      	mov	r1, r5
 8003162:	f000 fb61 	bl	8003828 <_malloc_r>
 8003166:	4606      	mov	r6, r0
 8003168:	b950      	cbnz	r0, 8003180 <__ssputs_r+0x5c>
 800316a:	230c      	movs	r3, #12
 800316c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003170:	f8ca 3000 	str.w	r3, [sl]
 8003174:	89a3      	ldrh	r3, [r4, #12]
 8003176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800317a:	81a3      	strh	r3, [r4, #12]
 800317c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003180:	464a      	mov	r2, r9
 8003182:	6921      	ldr	r1, [r4, #16]
 8003184:	f7ff ff98 	bl	80030b8 <memcpy>
 8003188:	89a3      	ldrh	r3, [r4, #12]
 800318a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800318e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003192:	81a3      	strh	r3, [r4, #12]
 8003194:	6126      	str	r6, [r4, #16]
 8003196:	444e      	add	r6, r9
 8003198:	6026      	str	r6, [r4, #0]
 800319a:	463e      	mov	r6, r7
 800319c:	6165      	str	r5, [r4, #20]
 800319e:	eba5 0509 	sub.w	r5, r5, r9
 80031a2:	60a5      	str	r5, [r4, #8]
 80031a4:	42be      	cmp	r6, r7
 80031a6:	d900      	bls.n	80031aa <__ssputs_r+0x86>
 80031a8:	463e      	mov	r6, r7
 80031aa:	4632      	mov	r2, r6
 80031ac:	4641      	mov	r1, r8
 80031ae:	6820      	ldr	r0, [r4, #0]
 80031b0:	f000 fab8 	bl	8003724 <memmove>
 80031b4:	68a3      	ldr	r3, [r4, #8]
 80031b6:	2000      	movs	r0, #0
 80031b8:	1b9b      	subs	r3, r3, r6
 80031ba:	60a3      	str	r3, [r4, #8]
 80031bc:	6823      	ldr	r3, [r4, #0]
 80031be:	4433      	add	r3, r6
 80031c0:	6023      	str	r3, [r4, #0]
 80031c2:	e7db      	b.n	800317c <__ssputs_r+0x58>
 80031c4:	462a      	mov	r2, r5
 80031c6:	f000 fba3 	bl	8003910 <_realloc_r>
 80031ca:	4606      	mov	r6, r0
 80031cc:	2800      	cmp	r0, #0
 80031ce:	d1e1      	bne.n	8003194 <__ssputs_r+0x70>
 80031d0:	4650      	mov	r0, sl
 80031d2:	6921      	ldr	r1, [r4, #16]
 80031d4:	f000 fac0 	bl	8003758 <_free_r>
 80031d8:	e7c7      	b.n	800316a <__ssputs_r+0x46>
	...

080031dc <_svfiprintf_r>:
 80031dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031e0:	4698      	mov	r8, r3
 80031e2:	898b      	ldrh	r3, [r1, #12]
 80031e4:	4607      	mov	r7, r0
 80031e6:	061b      	lsls	r3, r3, #24
 80031e8:	460d      	mov	r5, r1
 80031ea:	4614      	mov	r4, r2
 80031ec:	b09d      	sub	sp, #116	; 0x74
 80031ee:	d50e      	bpl.n	800320e <_svfiprintf_r+0x32>
 80031f0:	690b      	ldr	r3, [r1, #16]
 80031f2:	b963      	cbnz	r3, 800320e <_svfiprintf_r+0x32>
 80031f4:	2140      	movs	r1, #64	; 0x40
 80031f6:	f000 fb17 	bl	8003828 <_malloc_r>
 80031fa:	6028      	str	r0, [r5, #0]
 80031fc:	6128      	str	r0, [r5, #16]
 80031fe:	b920      	cbnz	r0, 800320a <_svfiprintf_r+0x2e>
 8003200:	230c      	movs	r3, #12
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003208:	e0d1      	b.n	80033ae <_svfiprintf_r+0x1d2>
 800320a:	2340      	movs	r3, #64	; 0x40
 800320c:	616b      	str	r3, [r5, #20]
 800320e:	2300      	movs	r3, #0
 8003210:	9309      	str	r3, [sp, #36]	; 0x24
 8003212:	2320      	movs	r3, #32
 8003214:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003218:	2330      	movs	r3, #48	; 0x30
 800321a:	f04f 0901 	mov.w	r9, #1
 800321e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003222:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80033c8 <_svfiprintf_r+0x1ec>
 8003226:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800322a:	4623      	mov	r3, r4
 800322c:	469a      	mov	sl, r3
 800322e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003232:	b10a      	cbz	r2, 8003238 <_svfiprintf_r+0x5c>
 8003234:	2a25      	cmp	r2, #37	; 0x25
 8003236:	d1f9      	bne.n	800322c <_svfiprintf_r+0x50>
 8003238:	ebba 0b04 	subs.w	fp, sl, r4
 800323c:	d00b      	beq.n	8003256 <_svfiprintf_r+0x7a>
 800323e:	465b      	mov	r3, fp
 8003240:	4622      	mov	r2, r4
 8003242:	4629      	mov	r1, r5
 8003244:	4638      	mov	r0, r7
 8003246:	f7ff ff6d 	bl	8003124 <__ssputs_r>
 800324a:	3001      	adds	r0, #1
 800324c:	f000 80aa 	beq.w	80033a4 <_svfiprintf_r+0x1c8>
 8003250:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003252:	445a      	add	r2, fp
 8003254:	9209      	str	r2, [sp, #36]	; 0x24
 8003256:	f89a 3000 	ldrb.w	r3, [sl]
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 80a2 	beq.w	80033a4 <_svfiprintf_r+0x1c8>
 8003260:	2300      	movs	r3, #0
 8003262:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003266:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800326a:	f10a 0a01 	add.w	sl, sl, #1
 800326e:	9304      	str	r3, [sp, #16]
 8003270:	9307      	str	r3, [sp, #28]
 8003272:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003276:	931a      	str	r3, [sp, #104]	; 0x68
 8003278:	4654      	mov	r4, sl
 800327a:	2205      	movs	r2, #5
 800327c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003280:	4851      	ldr	r0, [pc, #324]	; (80033c8 <_svfiprintf_r+0x1ec>)
 8003282:	f000 fa41 	bl	8003708 <memchr>
 8003286:	9a04      	ldr	r2, [sp, #16]
 8003288:	b9d8      	cbnz	r0, 80032c2 <_svfiprintf_r+0xe6>
 800328a:	06d0      	lsls	r0, r2, #27
 800328c:	bf44      	itt	mi
 800328e:	2320      	movmi	r3, #32
 8003290:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003294:	0711      	lsls	r1, r2, #28
 8003296:	bf44      	itt	mi
 8003298:	232b      	movmi	r3, #43	; 0x2b
 800329a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800329e:	f89a 3000 	ldrb.w	r3, [sl]
 80032a2:	2b2a      	cmp	r3, #42	; 0x2a
 80032a4:	d015      	beq.n	80032d2 <_svfiprintf_r+0xf6>
 80032a6:	4654      	mov	r4, sl
 80032a8:	2000      	movs	r0, #0
 80032aa:	f04f 0c0a 	mov.w	ip, #10
 80032ae:	9a07      	ldr	r2, [sp, #28]
 80032b0:	4621      	mov	r1, r4
 80032b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032b6:	3b30      	subs	r3, #48	; 0x30
 80032b8:	2b09      	cmp	r3, #9
 80032ba:	d94e      	bls.n	800335a <_svfiprintf_r+0x17e>
 80032bc:	b1b0      	cbz	r0, 80032ec <_svfiprintf_r+0x110>
 80032be:	9207      	str	r2, [sp, #28]
 80032c0:	e014      	b.n	80032ec <_svfiprintf_r+0x110>
 80032c2:	eba0 0308 	sub.w	r3, r0, r8
 80032c6:	fa09 f303 	lsl.w	r3, r9, r3
 80032ca:	4313      	orrs	r3, r2
 80032cc:	46a2      	mov	sl, r4
 80032ce:	9304      	str	r3, [sp, #16]
 80032d0:	e7d2      	b.n	8003278 <_svfiprintf_r+0x9c>
 80032d2:	9b03      	ldr	r3, [sp, #12]
 80032d4:	1d19      	adds	r1, r3, #4
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	9103      	str	r1, [sp, #12]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	bfbb      	ittet	lt
 80032de:	425b      	neglt	r3, r3
 80032e0:	f042 0202 	orrlt.w	r2, r2, #2
 80032e4:	9307      	strge	r3, [sp, #28]
 80032e6:	9307      	strlt	r3, [sp, #28]
 80032e8:	bfb8      	it	lt
 80032ea:	9204      	strlt	r2, [sp, #16]
 80032ec:	7823      	ldrb	r3, [r4, #0]
 80032ee:	2b2e      	cmp	r3, #46	; 0x2e
 80032f0:	d10c      	bne.n	800330c <_svfiprintf_r+0x130>
 80032f2:	7863      	ldrb	r3, [r4, #1]
 80032f4:	2b2a      	cmp	r3, #42	; 0x2a
 80032f6:	d135      	bne.n	8003364 <_svfiprintf_r+0x188>
 80032f8:	9b03      	ldr	r3, [sp, #12]
 80032fa:	3402      	adds	r4, #2
 80032fc:	1d1a      	adds	r2, r3, #4
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	9203      	str	r2, [sp, #12]
 8003302:	2b00      	cmp	r3, #0
 8003304:	bfb8      	it	lt
 8003306:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800330a:	9305      	str	r3, [sp, #20]
 800330c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80033cc <_svfiprintf_r+0x1f0>
 8003310:	2203      	movs	r2, #3
 8003312:	4650      	mov	r0, sl
 8003314:	7821      	ldrb	r1, [r4, #0]
 8003316:	f000 f9f7 	bl	8003708 <memchr>
 800331a:	b140      	cbz	r0, 800332e <_svfiprintf_r+0x152>
 800331c:	2340      	movs	r3, #64	; 0x40
 800331e:	eba0 000a 	sub.w	r0, r0, sl
 8003322:	fa03 f000 	lsl.w	r0, r3, r0
 8003326:	9b04      	ldr	r3, [sp, #16]
 8003328:	3401      	adds	r4, #1
 800332a:	4303      	orrs	r3, r0
 800332c:	9304      	str	r3, [sp, #16]
 800332e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003332:	2206      	movs	r2, #6
 8003334:	4826      	ldr	r0, [pc, #152]	; (80033d0 <_svfiprintf_r+0x1f4>)
 8003336:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800333a:	f000 f9e5 	bl	8003708 <memchr>
 800333e:	2800      	cmp	r0, #0
 8003340:	d038      	beq.n	80033b4 <_svfiprintf_r+0x1d8>
 8003342:	4b24      	ldr	r3, [pc, #144]	; (80033d4 <_svfiprintf_r+0x1f8>)
 8003344:	bb1b      	cbnz	r3, 800338e <_svfiprintf_r+0x1b2>
 8003346:	9b03      	ldr	r3, [sp, #12]
 8003348:	3307      	adds	r3, #7
 800334a:	f023 0307 	bic.w	r3, r3, #7
 800334e:	3308      	adds	r3, #8
 8003350:	9303      	str	r3, [sp, #12]
 8003352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003354:	4433      	add	r3, r6
 8003356:	9309      	str	r3, [sp, #36]	; 0x24
 8003358:	e767      	b.n	800322a <_svfiprintf_r+0x4e>
 800335a:	460c      	mov	r4, r1
 800335c:	2001      	movs	r0, #1
 800335e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003362:	e7a5      	b.n	80032b0 <_svfiprintf_r+0xd4>
 8003364:	2300      	movs	r3, #0
 8003366:	f04f 0c0a 	mov.w	ip, #10
 800336a:	4619      	mov	r1, r3
 800336c:	3401      	adds	r4, #1
 800336e:	9305      	str	r3, [sp, #20]
 8003370:	4620      	mov	r0, r4
 8003372:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003376:	3a30      	subs	r2, #48	; 0x30
 8003378:	2a09      	cmp	r2, #9
 800337a:	d903      	bls.n	8003384 <_svfiprintf_r+0x1a8>
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0c5      	beq.n	800330c <_svfiprintf_r+0x130>
 8003380:	9105      	str	r1, [sp, #20]
 8003382:	e7c3      	b.n	800330c <_svfiprintf_r+0x130>
 8003384:	4604      	mov	r4, r0
 8003386:	2301      	movs	r3, #1
 8003388:	fb0c 2101 	mla	r1, ip, r1, r2
 800338c:	e7f0      	b.n	8003370 <_svfiprintf_r+0x194>
 800338e:	ab03      	add	r3, sp, #12
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	462a      	mov	r2, r5
 8003394:	4638      	mov	r0, r7
 8003396:	4b10      	ldr	r3, [pc, #64]	; (80033d8 <_svfiprintf_r+0x1fc>)
 8003398:	a904      	add	r1, sp, #16
 800339a:	f3af 8000 	nop.w
 800339e:	1c42      	adds	r2, r0, #1
 80033a0:	4606      	mov	r6, r0
 80033a2:	d1d6      	bne.n	8003352 <_svfiprintf_r+0x176>
 80033a4:	89ab      	ldrh	r3, [r5, #12]
 80033a6:	065b      	lsls	r3, r3, #25
 80033a8:	f53f af2c 	bmi.w	8003204 <_svfiprintf_r+0x28>
 80033ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033ae:	b01d      	add	sp, #116	; 0x74
 80033b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033b4:	ab03      	add	r3, sp, #12
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	462a      	mov	r2, r5
 80033ba:	4638      	mov	r0, r7
 80033bc:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <_svfiprintf_r+0x1fc>)
 80033be:	a904      	add	r1, sp, #16
 80033c0:	f000 f87c 	bl	80034bc <_printf_i>
 80033c4:	e7eb      	b.n	800339e <_svfiprintf_r+0x1c2>
 80033c6:	bf00      	nop
 80033c8:	08003a18 	.word	0x08003a18
 80033cc:	08003a1e 	.word	0x08003a1e
 80033d0:	08003a22 	.word	0x08003a22
 80033d4:	00000000 	.word	0x00000000
 80033d8:	08003125 	.word	0x08003125

080033dc <_printf_common>:
 80033dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033e0:	4616      	mov	r6, r2
 80033e2:	4699      	mov	r9, r3
 80033e4:	688a      	ldr	r2, [r1, #8]
 80033e6:	690b      	ldr	r3, [r1, #16]
 80033e8:	4607      	mov	r7, r0
 80033ea:	4293      	cmp	r3, r2
 80033ec:	bfb8      	it	lt
 80033ee:	4613      	movlt	r3, r2
 80033f0:	6033      	str	r3, [r6, #0]
 80033f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80033f6:	460c      	mov	r4, r1
 80033f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80033fc:	b10a      	cbz	r2, 8003402 <_printf_common+0x26>
 80033fe:	3301      	adds	r3, #1
 8003400:	6033      	str	r3, [r6, #0]
 8003402:	6823      	ldr	r3, [r4, #0]
 8003404:	0699      	lsls	r1, r3, #26
 8003406:	bf42      	ittt	mi
 8003408:	6833      	ldrmi	r3, [r6, #0]
 800340a:	3302      	addmi	r3, #2
 800340c:	6033      	strmi	r3, [r6, #0]
 800340e:	6825      	ldr	r5, [r4, #0]
 8003410:	f015 0506 	ands.w	r5, r5, #6
 8003414:	d106      	bne.n	8003424 <_printf_common+0x48>
 8003416:	f104 0a19 	add.w	sl, r4, #25
 800341a:	68e3      	ldr	r3, [r4, #12]
 800341c:	6832      	ldr	r2, [r6, #0]
 800341e:	1a9b      	subs	r3, r3, r2
 8003420:	42ab      	cmp	r3, r5
 8003422:	dc28      	bgt.n	8003476 <_printf_common+0x9a>
 8003424:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003428:	1e13      	subs	r3, r2, #0
 800342a:	6822      	ldr	r2, [r4, #0]
 800342c:	bf18      	it	ne
 800342e:	2301      	movne	r3, #1
 8003430:	0692      	lsls	r2, r2, #26
 8003432:	d42d      	bmi.n	8003490 <_printf_common+0xb4>
 8003434:	4649      	mov	r1, r9
 8003436:	4638      	mov	r0, r7
 8003438:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800343c:	47c0      	blx	r8
 800343e:	3001      	adds	r0, #1
 8003440:	d020      	beq.n	8003484 <_printf_common+0xa8>
 8003442:	6823      	ldr	r3, [r4, #0]
 8003444:	68e5      	ldr	r5, [r4, #12]
 8003446:	f003 0306 	and.w	r3, r3, #6
 800344a:	2b04      	cmp	r3, #4
 800344c:	bf18      	it	ne
 800344e:	2500      	movne	r5, #0
 8003450:	6832      	ldr	r2, [r6, #0]
 8003452:	f04f 0600 	mov.w	r6, #0
 8003456:	68a3      	ldr	r3, [r4, #8]
 8003458:	bf08      	it	eq
 800345a:	1aad      	subeq	r5, r5, r2
 800345c:	6922      	ldr	r2, [r4, #16]
 800345e:	bf08      	it	eq
 8003460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003464:	4293      	cmp	r3, r2
 8003466:	bfc4      	itt	gt
 8003468:	1a9b      	subgt	r3, r3, r2
 800346a:	18ed      	addgt	r5, r5, r3
 800346c:	341a      	adds	r4, #26
 800346e:	42b5      	cmp	r5, r6
 8003470:	d11a      	bne.n	80034a8 <_printf_common+0xcc>
 8003472:	2000      	movs	r0, #0
 8003474:	e008      	b.n	8003488 <_printf_common+0xac>
 8003476:	2301      	movs	r3, #1
 8003478:	4652      	mov	r2, sl
 800347a:	4649      	mov	r1, r9
 800347c:	4638      	mov	r0, r7
 800347e:	47c0      	blx	r8
 8003480:	3001      	adds	r0, #1
 8003482:	d103      	bne.n	800348c <_printf_common+0xb0>
 8003484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800348c:	3501      	adds	r5, #1
 800348e:	e7c4      	b.n	800341a <_printf_common+0x3e>
 8003490:	2030      	movs	r0, #48	; 0x30
 8003492:	18e1      	adds	r1, r4, r3
 8003494:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800349e:	4422      	add	r2, r4
 80034a0:	3302      	adds	r3, #2
 80034a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034a6:	e7c5      	b.n	8003434 <_printf_common+0x58>
 80034a8:	2301      	movs	r3, #1
 80034aa:	4622      	mov	r2, r4
 80034ac:	4649      	mov	r1, r9
 80034ae:	4638      	mov	r0, r7
 80034b0:	47c0      	blx	r8
 80034b2:	3001      	adds	r0, #1
 80034b4:	d0e6      	beq.n	8003484 <_printf_common+0xa8>
 80034b6:	3601      	adds	r6, #1
 80034b8:	e7d9      	b.n	800346e <_printf_common+0x92>
	...

080034bc <_printf_i>:
 80034bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034c0:	7e0f      	ldrb	r7, [r1, #24]
 80034c2:	4691      	mov	r9, r2
 80034c4:	2f78      	cmp	r7, #120	; 0x78
 80034c6:	4680      	mov	r8, r0
 80034c8:	460c      	mov	r4, r1
 80034ca:	469a      	mov	sl, r3
 80034cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80034ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80034d2:	d807      	bhi.n	80034e4 <_printf_i+0x28>
 80034d4:	2f62      	cmp	r7, #98	; 0x62
 80034d6:	d80a      	bhi.n	80034ee <_printf_i+0x32>
 80034d8:	2f00      	cmp	r7, #0
 80034da:	f000 80d9 	beq.w	8003690 <_printf_i+0x1d4>
 80034de:	2f58      	cmp	r7, #88	; 0x58
 80034e0:	f000 80a4 	beq.w	800362c <_printf_i+0x170>
 80034e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80034ec:	e03a      	b.n	8003564 <_printf_i+0xa8>
 80034ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80034f2:	2b15      	cmp	r3, #21
 80034f4:	d8f6      	bhi.n	80034e4 <_printf_i+0x28>
 80034f6:	a101      	add	r1, pc, #4	; (adr r1, 80034fc <_printf_i+0x40>)
 80034f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034fc:	08003555 	.word	0x08003555
 8003500:	08003569 	.word	0x08003569
 8003504:	080034e5 	.word	0x080034e5
 8003508:	080034e5 	.word	0x080034e5
 800350c:	080034e5 	.word	0x080034e5
 8003510:	080034e5 	.word	0x080034e5
 8003514:	08003569 	.word	0x08003569
 8003518:	080034e5 	.word	0x080034e5
 800351c:	080034e5 	.word	0x080034e5
 8003520:	080034e5 	.word	0x080034e5
 8003524:	080034e5 	.word	0x080034e5
 8003528:	08003677 	.word	0x08003677
 800352c:	08003599 	.word	0x08003599
 8003530:	08003659 	.word	0x08003659
 8003534:	080034e5 	.word	0x080034e5
 8003538:	080034e5 	.word	0x080034e5
 800353c:	08003699 	.word	0x08003699
 8003540:	080034e5 	.word	0x080034e5
 8003544:	08003599 	.word	0x08003599
 8003548:	080034e5 	.word	0x080034e5
 800354c:	080034e5 	.word	0x080034e5
 8003550:	08003661 	.word	0x08003661
 8003554:	682b      	ldr	r3, [r5, #0]
 8003556:	1d1a      	adds	r2, r3, #4
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	602a      	str	r2, [r5, #0]
 800355c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003560:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003564:	2301      	movs	r3, #1
 8003566:	e0a4      	b.n	80036b2 <_printf_i+0x1f6>
 8003568:	6820      	ldr	r0, [r4, #0]
 800356a:	6829      	ldr	r1, [r5, #0]
 800356c:	0606      	lsls	r6, r0, #24
 800356e:	f101 0304 	add.w	r3, r1, #4
 8003572:	d50a      	bpl.n	800358a <_printf_i+0xce>
 8003574:	680e      	ldr	r6, [r1, #0]
 8003576:	602b      	str	r3, [r5, #0]
 8003578:	2e00      	cmp	r6, #0
 800357a:	da03      	bge.n	8003584 <_printf_i+0xc8>
 800357c:	232d      	movs	r3, #45	; 0x2d
 800357e:	4276      	negs	r6, r6
 8003580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003584:	230a      	movs	r3, #10
 8003586:	485e      	ldr	r0, [pc, #376]	; (8003700 <_printf_i+0x244>)
 8003588:	e019      	b.n	80035be <_printf_i+0x102>
 800358a:	680e      	ldr	r6, [r1, #0]
 800358c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003590:	602b      	str	r3, [r5, #0]
 8003592:	bf18      	it	ne
 8003594:	b236      	sxthne	r6, r6
 8003596:	e7ef      	b.n	8003578 <_printf_i+0xbc>
 8003598:	682b      	ldr	r3, [r5, #0]
 800359a:	6820      	ldr	r0, [r4, #0]
 800359c:	1d19      	adds	r1, r3, #4
 800359e:	6029      	str	r1, [r5, #0]
 80035a0:	0601      	lsls	r1, r0, #24
 80035a2:	d501      	bpl.n	80035a8 <_printf_i+0xec>
 80035a4:	681e      	ldr	r6, [r3, #0]
 80035a6:	e002      	b.n	80035ae <_printf_i+0xf2>
 80035a8:	0646      	lsls	r6, r0, #25
 80035aa:	d5fb      	bpl.n	80035a4 <_printf_i+0xe8>
 80035ac:	881e      	ldrh	r6, [r3, #0]
 80035ae:	2f6f      	cmp	r7, #111	; 0x6f
 80035b0:	bf0c      	ite	eq
 80035b2:	2308      	moveq	r3, #8
 80035b4:	230a      	movne	r3, #10
 80035b6:	4852      	ldr	r0, [pc, #328]	; (8003700 <_printf_i+0x244>)
 80035b8:	2100      	movs	r1, #0
 80035ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80035be:	6865      	ldr	r5, [r4, #4]
 80035c0:	2d00      	cmp	r5, #0
 80035c2:	bfa8      	it	ge
 80035c4:	6821      	ldrge	r1, [r4, #0]
 80035c6:	60a5      	str	r5, [r4, #8]
 80035c8:	bfa4      	itt	ge
 80035ca:	f021 0104 	bicge.w	r1, r1, #4
 80035ce:	6021      	strge	r1, [r4, #0]
 80035d0:	b90e      	cbnz	r6, 80035d6 <_printf_i+0x11a>
 80035d2:	2d00      	cmp	r5, #0
 80035d4:	d04d      	beq.n	8003672 <_printf_i+0x1b6>
 80035d6:	4615      	mov	r5, r2
 80035d8:	fbb6 f1f3 	udiv	r1, r6, r3
 80035dc:	fb03 6711 	mls	r7, r3, r1, r6
 80035e0:	5dc7      	ldrb	r7, [r0, r7]
 80035e2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80035e6:	4637      	mov	r7, r6
 80035e8:	42bb      	cmp	r3, r7
 80035ea:	460e      	mov	r6, r1
 80035ec:	d9f4      	bls.n	80035d8 <_printf_i+0x11c>
 80035ee:	2b08      	cmp	r3, #8
 80035f0:	d10b      	bne.n	800360a <_printf_i+0x14e>
 80035f2:	6823      	ldr	r3, [r4, #0]
 80035f4:	07de      	lsls	r6, r3, #31
 80035f6:	d508      	bpl.n	800360a <_printf_i+0x14e>
 80035f8:	6923      	ldr	r3, [r4, #16]
 80035fa:	6861      	ldr	r1, [r4, #4]
 80035fc:	4299      	cmp	r1, r3
 80035fe:	bfde      	ittt	le
 8003600:	2330      	movle	r3, #48	; 0x30
 8003602:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003606:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800360a:	1b52      	subs	r2, r2, r5
 800360c:	6122      	str	r2, [r4, #16]
 800360e:	464b      	mov	r3, r9
 8003610:	4621      	mov	r1, r4
 8003612:	4640      	mov	r0, r8
 8003614:	f8cd a000 	str.w	sl, [sp]
 8003618:	aa03      	add	r2, sp, #12
 800361a:	f7ff fedf 	bl	80033dc <_printf_common>
 800361e:	3001      	adds	r0, #1
 8003620:	d14c      	bne.n	80036bc <_printf_i+0x200>
 8003622:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003626:	b004      	add	sp, #16
 8003628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800362c:	4834      	ldr	r0, [pc, #208]	; (8003700 <_printf_i+0x244>)
 800362e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003632:	6829      	ldr	r1, [r5, #0]
 8003634:	6823      	ldr	r3, [r4, #0]
 8003636:	f851 6b04 	ldr.w	r6, [r1], #4
 800363a:	6029      	str	r1, [r5, #0]
 800363c:	061d      	lsls	r5, r3, #24
 800363e:	d514      	bpl.n	800366a <_printf_i+0x1ae>
 8003640:	07df      	lsls	r7, r3, #31
 8003642:	bf44      	itt	mi
 8003644:	f043 0320 	orrmi.w	r3, r3, #32
 8003648:	6023      	strmi	r3, [r4, #0]
 800364a:	b91e      	cbnz	r6, 8003654 <_printf_i+0x198>
 800364c:	6823      	ldr	r3, [r4, #0]
 800364e:	f023 0320 	bic.w	r3, r3, #32
 8003652:	6023      	str	r3, [r4, #0]
 8003654:	2310      	movs	r3, #16
 8003656:	e7af      	b.n	80035b8 <_printf_i+0xfc>
 8003658:	6823      	ldr	r3, [r4, #0]
 800365a:	f043 0320 	orr.w	r3, r3, #32
 800365e:	6023      	str	r3, [r4, #0]
 8003660:	2378      	movs	r3, #120	; 0x78
 8003662:	4828      	ldr	r0, [pc, #160]	; (8003704 <_printf_i+0x248>)
 8003664:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003668:	e7e3      	b.n	8003632 <_printf_i+0x176>
 800366a:	0659      	lsls	r1, r3, #25
 800366c:	bf48      	it	mi
 800366e:	b2b6      	uxthmi	r6, r6
 8003670:	e7e6      	b.n	8003640 <_printf_i+0x184>
 8003672:	4615      	mov	r5, r2
 8003674:	e7bb      	b.n	80035ee <_printf_i+0x132>
 8003676:	682b      	ldr	r3, [r5, #0]
 8003678:	6826      	ldr	r6, [r4, #0]
 800367a:	1d18      	adds	r0, r3, #4
 800367c:	6961      	ldr	r1, [r4, #20]
 800367e:	6028      	str	r0, [r5, #0]
 8003680:	0635      	lsls	r5, r6, #24
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	d501      	bpl.n	800368a <_printf_i+0x1ce>
 8003686:	6019      	str	r1, [r3, #0]
 8003688:	e002      	b.n	8003690 <_printf_i+0x1d4>
 800368a:	0670      	lsls	r0, r6, #25
 800368c:	d5fb      	bpl.n	8003686 <_printf_i+0x1ca>
 800368e:	8019      	strh	r1, [r3, #0]
 8003690:	2300      	movs	r3, #0
 8003692:	4615      	mov	r5, r2
 8003694:	6123      	str	r3, [r4, #16]
 8003696:	e7ba      	b.n	800360e <_printf_i+0x152>
 8003698:	682b      	ldr	r3, [r5, #0]
 800369a:	2100      	movs	r1, #0
 800369c:	1d1a      	adds	r2, r3, #4
 800369e:	602a      	str	r2, [r5, #0]
 80036a0:	681d      	ldr	r5, [r3, #0]
 80036a2:	6862      	ldr	r2, [r4, #4]
 80036a4:	4628      	mov	r0, r5
 80036a6:	f000 f82f 	bl	8003708 <memchr>
 80036aa:	b108      	cbz	r0, 80036b0 <_printf_i+0x1f4>
 80036ac:	1b40      	subs	r0, r0, r5
 80036ae:	6060      	str	r0, [r4, #4]
 80036b0:	6863      	ldr	r3, [r4, #4]
 80036b2:	6123      	str	r3, [r4, #16]
 80036b4:	2300      	movs	r3, #0
 80036b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036ba:	e7a8      	b.n	800360e <_printf_i+0x152>
 80036bc:	462a      	mov	r2, r5
 80036be:	4649      	mov	r1, r9
 80036c0:	4640      	mov	r0, r8
 80036c2:	6923      	ldr	r3, [r4, #16]
 80036c4:	47d0      	blx	sl
 80036c6:	3001      	adds	r0, #1
 80036c8:	d0ab      	beq.n	8003622 <_printf_i+0x166>
 80036ca:	6823      	ldr	r3, [r4, #0]
 80036cc:	079b      	lsls	r3, r3, #30
 80036ce:	d413      	bmi.n	80036f8 <_printf_i+0x23c>
 80036d0:	68e0      	ldr	r0, [r4, #12]
 80036d2:	9b03      	ldr	r3, [sp, #12]
 80036d4:	4298      	cmp	r0, r3
 80036d6:	bfb8      	it	lt
 80036d8:	4618      	movlt	r0, r3
 80036da:	e7a4      	b.n	8003626 <_printf_i+0x16a>
 80036dc:	2301      	movs	r3, #1
 80036de:	4632      	mov	r2, r6
 80036e0:	4649      	mov	r1, r9
 80036e2:	4640      	mov	r0, r8
 80036e4:	47d0      	blx	sl
 80036e6:	3001      	adds	r0, #1
 80036e8:	d09b      	beq.n	8003622 <_printf_i+0x166>
 80036ea:	3501      	adds	r5, #1
 80036ec:	68e3      	ldr	r3, [r4, #12]
 80036ee:	9903      	ldr	r1, [sp, #12]
 80036f0:	1a5b      	subs	r3, r3, r1
 80036f2:	42ab      	cmp	r3, r5
 80036f4:	dcf2      	bgt.n	80036dc <_printf_i+0x220>
 80036f6:	e7eb      	b.n	80036d0 <_printf_i+0x214>
 80036f8:	2500      	movs	r5, #0
 80036fa:	f104 0619 	add.w	r6, r4, #25
 80036fe:	e7f5      	b.n	80036ec <_printf_i+0x230>
 8003700:	08003a29 	.word	0x08003a29
 8003704:	08003a3a 	.word	0x08003a3a

08003708 <memchr>:
 8003708:	4603      	mov	r3, r0
 800370a:	b510      	push	{r4, lr}
 800370c:	b2c9      	uxtb	r1, r1
 800370e:	4402      	add	r2, r0
 8003710:	4293      	cmp	r3, r2
 8003712:	4618      	mov	r0, r3
 8003714:	d101      	bne.n	800371a <memchr+0x12>
 8003716:	2000      	movs	r0, #0
 8003718:	e003      	b.n	8003722 <memchr+0x1a>
 800371a:	7804      	ldrb	r4, [r0, #0]
 800371c:	3301      	adds	r3, #1
 800371e:	428c      	cmp	r4, r1
 8003720:	d1f6      	bne.n	8003710 <memchr+0x8>
 8003722:	bd10      	pop	{r4, pc}

08003724 <memmove>:
 8003724:	4288      	cmp	r0, r1
 8003726:	b510      	push	{r4, lr}
 8003728:	eb01 0402 	add.w	r4, r1, r2
 800372c:	d902      	bls.n	8003734 <memmove+0x10>
 800372e:	4284      	cmp	r4, r0
 8003730:	4623      	mov	r3, r4
 8003732:	d807      	bhi.n	8003744 <memmove+0x20>
 8003734:	1e43      	subs	r3, r0, #1
 8003736:	42a1      	cmp	r1, r4
 8003738:	d008      	beq.n	800374c <memmove+0x28>
 800373a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800373e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003742:	e7f8      	b.n	8003736 <memmove+0x12>
 8003744:	4601      	mov	r1, r0
 8003746:	4402      	add	r2, r0
 8003748:	428a      	cmp	r2, r1
 800374a:	d100      	bne.n	800374e <memmove+0x2a>
 800374c:	bd10      	pop	{r4, pc}
 800374e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003752:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003756:	e7f7      	b.n	8003748 <memmove+0x24>

08003758 <_free_r>:
 8003758:	b538      	push	{r3, r4, r5, lr}
 800375a:	4605      	mov	r5, r0
 800375c:	2900      	cmp	r1, #0
 800375e:	d040      	beq.n	80037e2 <_free_r+0x8a>
 8003760:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003764:	1f0c      	subs	r4, r1, #4
 8003766:	2b00      	cmp	r3, #0
 8003768:	bfb8      	it	lt
 800376a:	18e4      	addlt	r4, r4, r3
 800376c:	f000 f910 	bl	8003990 <__malloc_lock>
 8003770:	4a1c      	ldr	r2, [pc, #112]	; (80037e4 <_free_r+0x8c>)
 8003772:	6813      	ldr	r3, [r2, #0]
 8003774:	b933      	cbnz	r3, 8003784 <_free_r+0x2c>
 8003776:	6063      	str	r3, [r4, #4]
 8003778:	6014      	str	r4, [r2, #0]
 800377a:	4628      	mov	r0, r5
 800377c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003780:	f000 b90c 	b.w	800399c <__malloc_unlock>
 8003784:	42a3      	cmp	r3, r4
 8003786:	d908      	bls.n	800379a <_free_r+0x42>
 8003788:	6820      	ldr	r0, [r4, #0]
 800378a:	1821      	adds	r1, r4, r0
 800378c:	428b      	cmp	r3, r1
 800378e:	bf01      	itttt	eq
 8003790:	6819      	ldreq	r1, [r3, #0]
 8003792:	685b      	ldreq	r3, [r3, #4]
 8003794:	1809      	addeq	r1, r1, r0
 8003796:	6021      	streq	r1, [r4, #0]
 8003798:	e7ed      	b.n	8003776 <_free_r+0x1e>
 800379a:	461a      	mov	r2, r3
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	b10b      	cbz	r3, 80037a4 <_free_r+0x4c>
 80037a0:	42a3      	cmp	r3, r4
 80037a2:	d9fa      	bls.n	800379a <_free_r+0x42>
 80037a4:	6811      	ldr	r1, [r2, #0]
 80037a6:	1850      	adds	r0, r2, r1
 80037a8:	42a0      	cmp	r0, r4
 80037aa:	d10b      	bne.n	80037c4 <_free_r+0x6c>
 80037ac:	6820      	ldr	r0, [r4, #0]
 80037ae:	4401      	add	r1, r0
 80037b0:	1850      	adds	r0, r2, r1
 80037b2:	4283      	cmp	r3, r0
 80037b4:	6011      	str	r1, [r2, #0]
 80037b6:	d1e0      	bne.n	800377a <_free_r+0x22>
 80037b8:	6818      	ldr	r0, [r3, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	4401      	add	r1, r0
 80037be:	6011      	str	r1, [r2, #0]
 80037c0:	6053      	str	r3, [r2, #4]
 80037c2:	e7da      	b.n	800377a <_free_r+0x22>
 80037c4:	d902      	bls.n	80037cc <_free_r+0x74>
 80037c6:	230c      	movs	r3, #12
 80037c8:	602b      	str	r3, [r5, #0]
 80037ca:	e7d6      	b.n	800377a <_free_r+0x22>
 80037cc:	6820      	ldr	r0, [r4, #0]
 80037ce:	1821      	adds	r1, r4, r0
 80037d0:	428b      	cmp	r3, r1
 80037d2:	bf01      	itttt	eq
 80037d4:	6819      	ldreq	r1, [r3, #0]
 80037d6:	685b      	ldreq	r3, [r3, #4]
 80037d8:	1809      	addeq	r1, r1, r0
 80037da:	6021      	streq	r1, [r4, #0]
 80037dc:	6063      	str	r3, [r4, #4]
 80037de:	6054      	str	r4, [r2, #4]
 80037e0:	e7cb      	b.n	800377a <_free_r+0x22>
 80037e2:	bd38      	pop	{r3, r4, r5, pc}
 80037e4:	20002050 	.word	0x20002050

080037e8 <sbrk_aligned>:
 80037e8:	b570      	push	{r4, r5, r6, lr}
 80037ea:	4e0e      	ldr	r6, [pc, #56]	; (8003824 <sbrk_aligned+0x3c>)
 80037ec:	460c      	mov	r4, r1
 80037ee:	6831      	ldr	r1, [r6, #0]
 80037f0:	4605      	mov	r5, r0
 80037f2:	b911      	cbnz	r1, 80037fa <sbrk_aligned+0x12>
 80037f4:	f000 f8bc 	bl	8003970 <_sbrk_r>
 80037f8:	6030      	str	r0, [r6, #0]
 80037fa:	4621      	mov	r1, r4
 80037fc:	4628      	mov	r0, r5
 80037fe:	f000 f8b7 	bl	8003970 <_sbrk_r>
 8003802:	1c43      	adds	r3, r0, #1
 8003804:	d00a      	beq.n	800381c <sbrk_aligned+0x34>
 8003806:	1cc4      	adds	r4, r0, #3
 8003808:	f024 0403 	bic.w	r4, r4, #3
 800380c:	42a0      	cmp	r0, r4
 800380e:	d007      	beq.n	8003820 <sbrk_aligned+0x38>
 8003810:	1a21      	subs	r1, r4, r0
 8003812:	4628      	mov	r0, r5
 8003814:	f000 f8ac 	bl	8003970 <_sbrk_r>
 8003818:	3001      	adds	r0, #1
 800381a:	d101      	bne.n	8003820 <sbrk_aligned+0x38>
 800381c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003820:	4620      	mov	r0, r4
 8003822:	bd70      	pop	{r4, r5, r6, pc}
 8003824:	20002054 	.word	0x20002054

08003828 <_malloc_r>:
 8003828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800382c:	1ccd      	adds	r5, r1, #3
 800382e:	f025 0503 	bic.w	r5, r5, #3
 8003832:	3508      	adds	r5, #8
 8003834:	2d0c      	cmp	r5, #12
 8003836:	bf38      	it	cc
 8003838:	250c      	movcc	r5, #12
 800383a:	2d00      	cmp	r5, #0
 800383c:	4607      	mov	r7, r0
 800383e:	db01      	blt.n	8003844 <_malloc_r+0x1c>
 8003840:	42a9      	cmp	r1, r5
 8003842:	d905      	bls.n	8003850 <_malloc_r+0x28>
 8003844:	230c      	movs	r3, #12
 8003846:	2600      	movs	r6, #0
 8003848:	603b      	str	r3, [r7, #0]
 800384a:	4630      	mov	r0, r6
 800384c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003850:	4e2e      	ldr	r6, [pc, #184]	; (800390c <_malloc_r+0xe4>)
 8003852:	f000 f89d 	bl	8003990 <__malloc_lock>
 8003856:	6833      	ldr	r3, [r6, #0]
 8003858:	461c      	mov	r4, r3
 800385a:	bb34      	cbnz	r4, 80038aa <_malloc_r+0x82>
 800385c:	4629      	mov	r1, r5
 800385e:	4638      	mov	r0, r7
 8003860:	f7ff ffc2 	bl	80037e8 <sbrk_aligned>
 8003864:	1c43      	adds	r3, r0, #1
 8003866:	4604      	mov	r4, r0
 8003868:	d14d      	bne.n	8003906 <_malloc_r+0xde>
 800386a:	6834      	ldr	r4, [r6, #0]
 800386c:	4626      	mov	r6, r4
 800386e:	2e00      	cmp	r6, #0
 8003870:	d140      	bne.n	80038f4 <_malloc_r+0xcc>
 8003872:	6823      	ldr	r3, [r4, #0]
 8003874:	4631      	mov	r1, r6
 8003876:	4638      	mov	r0, r7
 8003878:	eb04 0803 	add.w	r8, r4, r3
 800387c:	f000 f878 	bl	8003970 <_sbrk_r>
 8003880:	4580      	cmp	r8, r0
 8003882:	d13a      	bne.n	80038fa <_malloc_r+0xd2>
 8003884:	6821      	ldr	r1, [r4, #0]
 8003886:	3503      	adds	r5, #3
 8003888:	1a6d      	subs	r5, r5, r1
 800388a:	f025 0503 	bic.w	r5, r5, #3
 800388e:	3508      	adds	r5, #8
 8003890:	2d0c      	cmp	r5, #12
 8003892:	bf38      	it	cc
 8003894:	250c      	movcc	r5, #12
 8003896:	4638      	mov	r0, r7
 8003898:	4629      	mov	r1, r5
 800389a:	f7ff ffa5 	bl	80037e8 <sbrk_aligned>
 800389e:	3001      	adds	r0, #1
 80038a0:	d02b      	beq.n	80038fa <_malloc_r+0xd2>
 80038a2:	6823      	ldr	r3, [r4, #0]
 80038a4:	442b      	add	r3, r5
 80038a6:	6023      	str	r3, [r4, #0]
 80038a8:	e00e      	b.n	80038c8 <_malloc_r+0xa0>
 80038aa:	6822      	ldr	r2, [r4, #0]
 80038ac:	1b52      	subs	r2, r2, r5
 80038ae:	d41e      	bmi.n	80038ee <_malloc_r+0xc6>
 80038b0:	2a0b      	cmp	r2, #11
 80038b2:	d916      	bls.n	80038e2 <_malloc_r+0xba>
 80038b4:	1961      	adds	r1, r4, r5
 80038b6:	42a3      	cmp	r3, r4
 80038b8:	6025      	str	r5, [r4, #0]
 80038ba:	bf18      	it	ne
 80038bc:	6059      	strne	r1, [r3, #4]
 80038be:	6863      	ldr	r3, [r4, #4]
 80038c0:	bf08      	it	eq
 80038c2:	6031      	streq	r1, [r6, #0]
 80038c4:	5162      	str	r2, [r4, r5]
 80038c6:	604b      	str	r3, [r1, #4]
 80038c8:	4638      	mov	r0, r7
 80038ca:	f104 060b 	add.w	r6, r4, #11
 80038ce:	f000 f865 	bl	800399c <__malloc_unlock>
 80038d2:	f026 0607 	bic.w	r6, r6, #7
 80038d6:	1d23      	adds	r3, r4, #4
 80038d8:	1af2      	subs	r2, r6, r3
 80038da:	d0b6      	beq.n	800384a <_malloc_r+0x22>
 80038dc:	1b9b      	subs	r3, r3, r6
 80038de:	50a3      	str	r3, [r4, r2]
 80038e0:	e7b3      	b.n	800384a <_malloc_r+0x22>
 80038e2:	6862      	ldr	r2, [r4, #4]
 80038e4:	42a3      	cmp	r3, r4
 80038e6:	bf0c      	ite	eq
 80038e8:	6032      	streq	r2, [r6, #0]
 80038ea:	605a      	strne	r2, [r3, #4]
 80038ec:	e7ec      	b.n	80038c8 <_malloc_r+0xa0>
 80038ee:	4623      	mov	r3, r4
 80038f0:	6864      	ldr	r4, [r4, #4]
 80038f2:	e7b2      	b.n	800385a <_malloc_r+0x32>
 80038f4:	4634      	mov	r4, r6
 80038f6:	6876      	ldr	r6, [r6, #4]
 80038f8:	e7b9      	b.n	800386e <_malloc_r+0x46>
 80038fa:	230c      	movs	r3, #12
 80038fc:	4638      	mov	r0, r7
 80038fe:	603b      	str	r3, [r7, #0]
 8003900:	f000 f84c 	bl	800399c <__malloc_unlock>
 8003904:	e7a1      	b.n	800384a <_malloc_r+0x22>
 8003906:	6025      	str	r5, [r4, #0]
 8003908:	e7de      	b.n	80038c8 <_malloc_r+0xa0>
 800390a:	bf00      	nop
 800390c:	20002050 	.word	0x20002050

08003910 <_realloc_r>:
 8003910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003914:	4680      	mov	r8, r0
 8003916:	4614      	mov	r4, r2
 8003918:	460e      	mov	r6, r1
 800391a:	b921      	cbnz	r1, 8003926 <_realloc_r+0x16>
 800391c:	4611      	mov	r1, r2
 800391e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003922:	f7ff bf81 	b.w	8003828 <_malloc_r>
 8003926:	b92a      	cbnz	r2, 8003934 <_realloc_r+0x24>
 8003928:	f7ff ff16 	bl	8003758 <_free_r>
 800392c:	4625      	mov	r5, r4
 800392e:	4628      	mov	r0, r5
 8003930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003934:	f000 f838 	bl	80039a8 <_malloc_usable_size_r>
 8003938:	4284      	cmp	r4, r0
 800393a:	4607      	mov	r7, r0
 800393c:	d802      	bhi.n	8003944 <_realloc_r+0x34>
 800393e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003942:	d812      	bhi.n	800396a <_realloc_r+0x5a>
 8003944:	4621      	mov	r1, r4
 8003946:	4640      	mov	r0, r8
 8003948:	f7ff ff6e 	bl	8003828 <_malloc_r>
 800394c:	4605      	mov	r5, r0
 800394e:	2800      	cmp	r0, #0
 8003950:	d0ed      	beq.n	800392e <_realloc_r+0x1e>
 8003952:	42bc      	cmp	r4, r7
 8003954:	4622      	mov	r2, r4
 8003956:	4631      	mov	r1, r6
 8003958:	bf28      	it	cs
 800395a:	463a      	movcs	r2, r7
 800395c:	f7ff fbac 	bl	80030b8 <memcpy>
 8003960:	4631      	mov	r1, r6
 8003962:	4640      	mov	r0, r8
 8003964:	f7ff fef8 	bl	8003758 <_free_r>
 8003968:	e7e1      	b.n	800392e <_realloc_r+0x1e>
 800396a:	4635      	mov	r5, r6
 800396c:	e7df      	b.n	800392e <_realloc_r+0x1e>
	...

08003970 <_sbrk_r>:
 8003970:	b538      	push	{r3, r4, r5, lr}
 8003972:	2300      	movs	r3, #0
 8003974:	4d05      	ldr	r5, [pc, #20]	; (800398c <_sbrk_r+0x1c>)
 8003976:	4604      	mov	r4, r0
 8003978:	4608      	mov	r0, r1
 800397a:	602b      	str	r3, [r5, #0]
 800397c:	f7fc ff9e 	bl	80008bc <_sbrk>
 8003980:	1c43      	adds	r3, r0, #1
 8003982:	d102      	bne.n	800398a <_sbrk_r+0x1a>
 8003984:	682b      	ldr	r3, [r5, #0]
 8003986:	b103      	cbz	r3, 800398a <_sbrk_r+0x1a>
 8003988:	6023      	str	r3, [r4, #0]
 800398a:	bd38      	pop	{r3, r4, r5, pc}
 800398c:	20002058 	.word	0x20002058

08003990 <__malloc_lock>:
 8003990:	4801      	ldr	r0, [pc, #4]	; (8003998 <__malloc_lock+0x8>)
 8003992:	f000 b811 	b.w	80039b8 <__retarget_lock_acquire_recursive>
 8003996:	bf00      	nop
 8003998:	2000205c 	.word	0x2000205c

0800399c <__malloc_unlock>:
 800399c:	4801      	ldr	r0, [pc, #4]	; (80039a4 <__malloc_unlock+0x8>)
 800399e:	f000 b80c 	b.w	80039ba <__retarget_lock_release_recursive>
 80039a2:	bf00      	nop
 80039a4:	2000205c 	.word	0x2000205c

080039a8 <_malloc_usable_size_r>:
 80039a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039ac:	1f18      	subs	r0, r3, #4
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	bfbc      	itt	lt
 80039b2:	580b      	ldrlt	r3, [r1, r0]
 80039b4:	18c0      	addlt	r0, r0, r3
 80039b6:	4770      	bx	lr

080039b8 <__retarget_lock_acquire_recursive>:
 80039b8:	4770      	bx	lr

080039ba <__retarget_lock_release_recursive>:
 80039ba:	4770      	bx	lr

080039bc <_init>:
 80039bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039be:	bf00      	nop
 80039c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039c2:	bc08      	pop	{r3}
 80039c4:	469e      	mov	lr, r3
 80039c6:	4770      	bx	lr

080039c8 <_fini>:
 80039c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ca:	bf00      	nop
 80039cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ce:	bc08      	pop	{r3}
 80039d0:	469e      	mov	lr, r3
 80039d2:	4770      	bx	lr
