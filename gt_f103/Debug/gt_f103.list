
gt_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003858  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003964  08003964  00013964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039dc  080039dc  00020344  2**0
                  CONTENTS
  4 .ARM          00000000  080039dc  080039dc  00020344  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039dc  080039dc  00020344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039dc  080039dc  000139dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039e0  080039e0  000139e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000344  20000000  080039e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d28  20000344  08003d28  00020344  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000206c  08003d28  0002206c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020344  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096d2  00000000  00000000  0002036d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fb9  00000000  00000000  00029a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  0002b9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002c400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bb2  00000000  00000000  0002cd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b516  00000000  00000000  000448e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084716  00000000  00000000  0004fdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d450e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b84  00000000  00000000  000d4560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000344 	.word	0x20000344
 8000128:	00000000 	.word	0x00000000
 800012c:	0800394c 	.word	0x0800394c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000348 	.word	0x20000348
 8000148:	0800394c 	.word	0x0800394c

0800014c <HAL_UART_RxHalfCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b0a4      	sub	sp, #144	; 0x90
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	Command command;
	memcpy(&command, hcommander.uart_rx_buffer, COMMAND_BYTESIZE);
 8000154:	f107 030c 	add.w	r3, r7, #12
 8000158:	2282      	movs	r2, #130	; 0x82
 800015a:	4907      	ldr	r1, [pc, #28]	; (8000178 <HAL_UART_RxHalfCpltCallback+0x2c>)
 800015c:	4618      	mov	r0, r3
 800015e:	f002 ff73 	bl	8003048 <memcpy>
	Commander_Enqueue(&hcommander, &command);
 8000162:	f107 030c 	add.w	r3, r7, #12
 8000166:	4619      	mov	r1, r3
 8000168:	4804      	ldr	r0, [pc, #16]	; (800017c <HAL_UART_RxHalfCpltCallback+0x30>)
 800016a:	f000 fc77 	bl	8000a5c <Commander_Enqueue>
}
 800016e:	bf00      	nop
 8000170:	3790      	adds	r7, #144	; 0x90
 8000172:	46bd      	mov	sp, r7
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	20000448 	.word	0x20000448
 800017c:	20000440 	.word	0x20000440

08000180 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b0a4      	sub	sp, #144	; 0x90
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	Command command;
	memcpy(&command, hcommander.uart_rx_buffer + COMMAND_BYTESIZE, COMMAND_BYTESIZE);
 8000188:	4908      	ldr	r1, [pc, #32]	; (80001ac <HAL_UART_RxCpltCallback+0x2c>)
 800018a:	f107 030c 	add.w	r3, r7, #12
 800018e:	2282      	movs	r2, #130	; 0x82
 8000190:	4618      	mov	r0, r3
 8000192:	f002 ff59 	bl	8003048 <memcpy>
	Commander_Enqueue(&hcommander, &command);
 8000196:	f107 030c 	add.w	r3, r7, #12
 800019a:	4619      	mov	r1, r3
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <HAL_UART_RxCpltCallback+0x30>)
 800019e:	f000 fc5d 	bl	8000a5c <Commander_Enqueue>
}
 80001a2:	bf00      	nop
 80001a4:	3790      	adds	r7, #144	; 0x90
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	200004ca 	.word	0x200004ca
 80001b0:	20000440 	.word	0x20000440

080001b4 <command_callback>:

void command_callback(Command command) {
 80001b4:	b084      	sub	sp, #16
 80001b6:	b580      	push	{r7, lr}
 80001b8:	b086      	sub	sp, #24
 80001ba:	af00      	add	r7, sp, #0
 80001bc:	f107 0c20 	add.w	ip, r7, #32
 80001c0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	if (command.header == 0x05) {
 80001c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80001c8:	2b05      	cmp	r3, #5
 80001ca:	d12b      	bne.n	8000224 <command_callback+0x70>
		EPD_Init(&hepd1);
 80001cc:	4819      	ldr	r0, [pc, #100]	; (8000234 <command_callback+0x80>)
 80001ce:	f000 fded 	bl	8000dac <EPD_Init>

		char row[16+1];
		draw_clean(hepd1.image);
 80001d2:	4819      	ldr	r0, [pc, #100]	; (8000238 <command_callback+0x84>)
 80001d4:	f000 ffd1 	bl	800117a <draw_clean>

		sprintf(row, "g33ky toad");
 80001d8:	463b      	mov	r3, r7
 80001da:	4918      	ldr	r1, [pc, #96]	; (800023c <command_callback+0x88>)
 80001dc:	4618      	mov	r0, r3
 80001de:	f002 ff49 	bl	8003074 <siprintf>
		draw_text(hepd1.image, row, 40, 60);
 80001e2:	4639      	mov	r1, r7
 80001e4:	233c      	movs	r3, #60	; 0x3c
 80001e6:	2228      	movs	r2, #40	; 0x28
 80001e8:	4813      	ldr	r0, [pc, #76]	; (8000238 <command_callback+0x84>)
 80001ea:	f000 ff97 	bl	800111c <draw_text>

		for(int i = 0; i < 128; i++) {
 80001ee:	2300      	movs	r3, #0
 80001f0:	617b      	str	r3, [r7, #20]
 80001f2:	e00e      	b.n	8000212 <command_callback+0x5e>
			toggle_single_pixel(hepd1.image, i, command.payload.bytes[i]);
 80001f4:	697b      	ldr	r3, [r7, #20]
 80001f6:	b299      	uxth	r1, r3
 80001f8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80001fc:	697b      	ldr	r3, [r7, #20]
 80001fe:	4413      	add	r3, r2
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	b29b      	uxth	r3, r3
 8000204:	461a      	mov	r2, r3
 8000206:	480c      	ldr	r0, [pc, #48]	; (8000238 <command_callback+0x84>)
 8000208:	f000 fe97 	bl	8000f3a <toggle_single_pixel>
		for(int i = 0; i < 128; i++) {
 800020c:	697b      	ldr	r3, [r7, #20]
 800020e:	3301      	adds	r3, #1
 8000210:	617b      	str	r3, [r7, #20]
 8000212:	697b      	ldr	r3, [r7, #20]
 8000214:	2b7f      	cmp	r3, #127	; 0x7f
 8000216:	dded      	ble.n	80001f4 <command_callback+0x40>
		}

		EPD_Display(&hepd1);
 8000218:	4806      	ldr	r0, [pc, #24]	; (8000234 <command_callback+0x80>)
 800021a:	f000 fe39 	bl	8000e90 <EPD_Display>
		EPD_Sleep(&hepd1);
 800021e:	4805      	ldr	r0, [pc, #20]	; (8000234 <command_callback+0x80>)
 8000220:	f000 fe54 	bl	8000ecc <EPD_Sleep>
	}

}
 8000224:	bf00      	nop
 8000226:	3718      	adds	r7, #24
 8000228:	46bd      	mov	sp, r7
 800022a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800022e:	b004      	add	sp, #16
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	20000d98 	.word	0x20000d98
 8000238:	20000d9a 	.word	0x20000d9a
 800023c:	08003964 	.word	0x08003964

08000240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b08a      	sub	sp, #40	; 0x28
 8000244:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000246:	f001 f8a9 	bl	800139c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024a:	f000 f8a7 	bl	800039c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024e:	f000 f961 	bl	8000514 <MX_GPIO_Init>
  MX_DMA_Init();
 8000252:	f000 f941 	bl	80004d8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000256:	f000 f915 	bl	8000484 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 800025a:	f000 f8db 	bl	8000414 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	Commander_Init(&hcommander, &huart3, &hdma_usart3_rx, command_callback);
 800025e:	4b40      	ldr	r3, [pc, #256]	; (8000360 <main+0x120>)
 8000260:	4a40      	ldr	r2, [pc, #256]	; (8000364 <main+0x124>)
 8000262:	4941      	ldr	r1, [pc, #260]	; (8000368 <main+0x128>)
 8000264:	4841      	ldr	r0, [pc, #260]	; (800036c <main+0x12c>)
 8000266:	f000 fb6e 	bl	8000946 <Commander_Init>
	Commander_Start(&hcommander);
 800026a:	4840      	ldr	r0, [pc, #256]	; (800036c <main+0x12c>)
 800026c:	f000 fb91 	bl	8000992 <Commander_Start>

	RE_Init(&hre1, ENC1B_GPIO_Port, ENC1A_GPIO_Port, ENC1B_Pin, ENC1A_Pin);
 8000270:	2380      	movs	r3, #128	; 0x80
 8000272:	9300      	str	r3, [sp, #0]
 8000274:	2340      	movs	r3, #64	; 0x40
 8000276:	4a3e      	ldr	r2, [pc, #248]	; (8000370 <main+0x130>)
 8000278:	493d      	ldr	r1, [pc, #244]	; (8000370 <main+0x130>)
 800027a:	483e      	ldr	r0, [pc, #248]	; (8000374 <main+0x134>)
 800027c:	f000 ff99 	bl	80011b2 <RE_Init>
	RE_Init(&hre2, ENC2A_GPIO_Port, ENC2B_GPIO_Port, ENC2A_Pin, ENC2B_Pin);
 8000280:	2301      	movs	r3, #1
 8000282:	9300      	str	r3, [sp, #0]
 8000284:	2302      	movs	r3, #2
 8000286:	4a3c      	ldr	r2, [pc, #240]	; (8000378 <main+0x138>)
 8000288:	493b      	ldr	r1, [pc, #236]	; (8000378 <main+0x138>)
 800028a:	483c      	ldr	r0, [pc, #240]	; (800037c <main+0x13c>)
 800028c:	f000 ff91 	bl	80011b2 <RE_Init>

	EPD_Init(&hepd1);
 8000290:	483b      	ldr	r0, [pc, #236]	; (8000380 <main+0x140>)
 8000292:	f000 fd8b 	bl	8000dac <EPD_Init>
	EPD_Clear(&hepd1);
 8000296:	483a      	ldr	r0, [pc, #232]	; (8000380 <main+0x140>)
 8000298:	f000 fde0 	bl	8000e5c <EPD_Clear>

	char row[16+1];
	draw_clean(hepd1.image);
 800029c:	4839      	ldr	r0, [pc, #228]	; (8000384 <main+0x144>)
 800029e:	f000 ff6c 	bl	800117a <draw_clean>
	draw_rectangle(hepd1.image, 36, 56, 88, 20);
 80002a2:	2314      	movs	r3, #20
 80002a4:	9300      	str	r3, [sp, #0]
 80002a6:	2358      	movs	r3, #88	; 0x58
 80002a8:	2238      	movs	r2, #56	; 0x38
 80002aa:	2124      	movs	r1, #36	; 0x24
 80002ac:	4835      	ldr	r0, [pc, #212]	; (8000384 <main+0x144>)
 80002ae:	f000 fe75 	bl	8000f9c <draw_rectangle>

	sprintf(row, "g33ky toad");
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	4934      	ldr	r1, [pc, #208]	; (8000388 <main+0x148>)
 80002b6:	4618      	mov	r0, r3
 80002b8:	f002 fedc 	bl	8003074 <siprintf>
	draw_text(hepd1.image, row, 40, 60);
 80002bc:	1d39      	adds	r1, r7, #4
 80002be:	233c      	movs	r3, #60	; 0x3c
 80002c0:	2228      	movs	r2, #40	; 0x28
 80002c2:	4830      	ldr	r0, [pc, #192]	; (8000384 <main+0x144>)
 80002c4:	f000 ff2a 	bl	800111c <draw_text>

	sprintf(row, "digital pedal");
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	4930      	ldr	r1, [pc, #192]	; (800038c <main+0x14c>)
 80002cc:	4618      	mov	r0, r3
 80002ce:	f002 fed1 	bl	8003074 <siprintf>
	draw_text(hepd1.image, row, 20, 90);
 80002d2:	1d39      	adds	r1, r7, #4
 80002d4:	235a      	movs	r3, #90	; 0x5a
 80002d6:	2214      	movs	r2, #20
 80002d8:	482a      	ldr	r0, [pc, #168]	; (8000384 <main+0x144>)
 80002da:	f000 ff1f 	bl	800111c <draw_text>

	EPD_Display(&hepd1);
 80002de:	4828      	ldr	r0, [pc, #160]	; (8000380 <main+0x140>)
 80002e0:	f000 fdd6 	bl	8000e90 <EPD_Display>
	EPD_Sleep(&hepd1);
 80002e4:	4826      	ldr	r0, [pc, #152]	; (8000380 <main+0x140>)
 80002e6:	f000 fdf1 	bl	8000ecc <EPD_Sleep>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		Commander_Process(&hcommander);
 80002ea:	4820      	ldr	r0, [pc, #128]	; (800036c <main+0x12c>)
 80002ec:	f000 fb62 	bl	80009b4 <Commander_Process>

		RE_Process(&hre1);
 80002f0:	4820      	ldr	r0, [pc, #128]	; (8000374 <main+0x134>)
 80002f2:	f000 ff89 	bl	8001208 <RE_Process>
		RE_Process(&hre2);
 80002f6:	4821      	ldr	r0, [pc, #132]	; (800037c <main+0x13c>)
 80002f8:	f000 ff86 	bl	8001208 <RE_Process>

		for (int i = 0; i < 6; i++) {
 80002fc:	2300      	movs	r3, #0
 80002fe:	61fb      	str	r3, [r7, #28]
 8000300:	e029      	b.n	8000356 <main+0x116>
			int thr = (hre1.counter + hre2.counter) % 6;
 8000302:	4b1c      	ldr	r3, [pc, #112]	; (8000374 <main+0x134>)
 8000304:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000308:	461a      	mov	r2, r3
 800030a:	4b1c      	ldr	r3, [pc, #112]	; (800037c <main+0x13c>)
 800030c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000310:	441a      	add	r2, r3
 8000312:	4b1f      	ldr	r3, [pc, #124]	; (8000390 <main+0x150>)
 8000314:	fb83 3102 	smull	r3, r1, r3, r2
 8000318:	17d3      	asrs	r3, r2, #31
 800031a:	1ac9      	subs	r1, r1, r3
 800031c:	460b      	mov	r3, r1
 800031e:	005b      	lsls	r3, r3, #1
 8000320:	440b      	add	r3, r1
 8000322:	005b      	lsls	r3, r3, #1
 8000324:	1ad3      	subs	r3, r2, r3
 8000326:	61bb      	str	r3, [r7, #24]
			HAL_GPIO_WritePin(led_port[i], led_pins[i], i <= thr ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000328:	4a1a      	ldr	r2, [pc, #104]	; (8000394 <main+0x154>)
 800032a:	69fb      	ldr	r3, [r7, #28]
 800032c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000330:	4618      	mov	r0, r3
 8000332:	4a19      	ldr	r2, [pc, #100]	; (8000398 <main+0x158>)
 8000334:	69fb      	ldr	r3, [r7, #28]
 8000336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800033a:	b299      	uxth	r1, r3
 800033c:	69fa      	ldr	r2, [r7, #28]
 800033e:	69bb      	ldr	r3, [r7, #24]
 8000340:	429a      	cmp	r2, r3
 8000342:	bfd4      	ite	le
 8000344:	2301      	movle	r3, #1
 8000346:	2300      	movgt	r3, #0
 8000348:	b2db      	uxtb	r3, r3
 800034a:	461a      	mov	r2, r3
 800034c:	f001 fd43 	bl	8001dd6 <HAL_GPIO_WritePin>
		for (int i = 0; i < 6; i++) {
 8000350:	69fb      	ldr	r3, [r7, #28]
 8000352:	3301      	adds	r3, #1
 8000354:	61fb      	str	r3, [r7, #28]
 8000356:	69fb      	ldr	r3, [r7, #28]
 8000358:	2b05      	cmp	r3, #5
 800035a:	ddd2      	ble.n	8000302 <main+0xc2>
		Commander_Process(&hcommander);
 800035c:	e7c5      	b.n	80002ea <main+0xaa>
 800035e:	bf00      	nop
 8000360:	080001b5 	.word	0x080001b5
 8000364:	200003fc 	.word	0x200003fc
 8000368:	200003b8 	.word	0x200003b8
 800036c:	20000440 	.word	0x20000440
 8000370:	40010c00 	.word	0x40010c00
 8000374:	2000201c 	.word	0x2000201c
 8000378:	40010800 	.word	0x40010800
 800037c:	20002038 	.word	0x20002038
 8000380:	20000d98 	.word	0x20000d98
 8000384:	20000d9a 	.word	0x20000d9a
 8000388:	08003964 	.word	0x08003964
 800038c:	08003970 	.word	0x08003970
 8000390:	2aaaaaab 	.word	0x2aaaaaab
 8000394:	20000018 	.word	0x20000018
 8000398:	20000000 	.word	0x20000000

0800039c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b090      	sub	sp, #64	; 0x40
 80003a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a2:	f107 0318 	add.w	r3, r7, #24
 80003a6:	2228      	movs	r2, #40	; 0x28
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f002 fe5a 	bl	8003064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
 80003bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003be:	2302      	movs	r3, #2
 80003c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c2:	2301      	movs	r3, #1
 80003c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003c6:	2310      	movs	r3, #16
 80003c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003ca:	2300      	movs	r3, #0
 80003cc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ce:	f107 0318 	add.w	r3, r7, #24
 80003d2:	4618      	mov	r0, r3
 80003d4:	f001 fd18 	bl	8001e08 <HAL_RCC_OscConfig>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003de:	f000 f923 	bl	8000628 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e2:	230f      	movs	r3, #15
 80003e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003e6:	2300      	movs	r3, #0
 80003e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ea:	2300      	movs	r3, #0
 80003ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ee:	2300      	movs	r3, #0
 80003f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f2:	2300      	movs	r3, #0
 80003f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	2100      	movs	r1, #0
 80003fa:	4618      	mov	r0, r3
 80003fc:	f001 ff86 	bl	800230c <HAL_RCC_ClockConfig>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000406:	f000 f90f 	bl	8000628 <Error_Handler>
  }
}
 800040a:	bf00      	nop
 800040c:	3740      	adds	r7, #64	; 0x40
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
	...

08000414 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000418:	4b18      	ldr	r3, [pc, #96]	; (800047c <MX_SPI1_Init+0x68>)
 800041a:	4a19      	ldr	r2, [pc, #100]	; (8000480 <MX_SPI1_Init+0x6c>)
 800041c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800041e:	4b17      	ldr	r3, [pc, #92]	; (800047c <MX_SPI1_Init+0x68>)
 8000420:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000424:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000426:	4b15      	ldr	r3, [pc, #84]	; (800047c <MX_SPI1_Init+0x68>)
 8000428:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800042c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800042e:	4b13      	ldr	r3, [pc, #76]	; (800047c <MX_SPI1_Init+0x68>)
 8000430:	2200      	movs	r2, #0
 8000432:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000434:	4b11      	ldr	r3, [pc, #68]	; (800047c <MX_SPI1_Init+0x68>)
 8000436:	2200      	movs	r2, #0
 8000438:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800043a:	4b10      	ldr	r3, [pc, #64]	; (800047c <MX_SPI1_Init+0x68>)
 800043c:	2200      	movs	r2, #0
 800043e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000440:	4b0e      	ldr	r3, [pc, #56]	; (800047c <MX_SPI1_Init+0x68>)
 8000442:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000446:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000448:	4b0c      	ldr	r3, [pc, #48]	; (800047c <MX_SPI1_Init+0x68>)
 800044a:	2210      	movs	r2, #16
 800044c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800044e:	4b0b      	ldr	r3, [pc, #44]	; (800047c <MX_SPI1_Init+0x68>)
 8000450:	2200      	movs	r2, #0
 8000452:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000454:	4b09      	ldr	r3, [pc, #36]	; (800047c <MX_SPI1_Init+0x68>)
 8000456:	2200      	movs	r2, #0
 8000458:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800045a:	4b08      	ldr	r3, [pc, #32]	; (800047c <MX_SPI1_Init+0x68>)
 800045c:	2200      	movs	r2, #0
 800045e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000460:	4b06      	ldr	r3, [pc, #24]	; (800047c <MX_SPI1_Init+0x68>)
 8000462:	220a      	movs	r2, #10
 8000464:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000466:	4805      	ldr	r0, [pc, #20]	; (800047c <MX_SPI1_Init+0x68>)
 8000468:	f002 f8e8 	bl	800263c <HAL_SPI_Init>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000472:	f000 f8d9 	bl	8000628 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	20000360 	.word	0x20000360
 8000480:	40013000 	.word	0x40013000

08000484 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000488:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <MX_USART3_UART_Init+0x4c>)
 800048a:	4a12      	ldr	r2, [pc, #72]	; (80004d4 <MX_USART3_UART_Init+0x50>)
 800048c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800048e:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <MX_USART3_UART_Init+0x4c>)
 8000490:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000494:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <MX_USART3_UART_Init+0x4c>)
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800049c:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <MX_USART3_UART_Init+0x4c>)
 800049e:	2200      	movs	r2, #0
 80004a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80004a2:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <MX_USART3_UART_Init+0x4c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80004a8:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <MX_USART3_UART_Init+0x4c>)
 80004aa:	220c      	movs	r2, #12
 80004ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ae:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <MX_USART3_UART_Init+0x4c>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <MX_USART3_UART_Init+0x4c>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80004ba:	4805      	ldr	r0, [pc, #20]	; (80004d0 <MX_USART3_UART_Init+0x4c>)
 80004bc:	f002 fb24 	bl	8002b08 <HAL_UART_Init>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80004c6:	f000 f8af 	bl	8000628 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	200003b8 	.word	0x200003b8
 80004d4:	40004800 	.word	0x40004800

080004d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <MX_DMA_Init+0x38>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	4a0b      	ldr	r2, [pc, #44]	; (8000510 <MX_DMA_Init+0x38>)
 80004e4:	f043 0301 	orr.w	r3, r3, #1
 80004e8:	6153      	str	r3, [r2, #20]
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <MX_DMA_Init+0x38>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2100      	movs	r1, #0
 80004fa:	200d      	movs	r0, #13
 80004fc:	f001 f8ab 	bl	8001656 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000500:	200d      	movs	r0, #13
 8000502:	f001 f8c4 	bl	800168e <HAL_NVIC_EnableIRQ>

}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40021000 	.word	0x40021000

08000514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b088      	sub	sp, #32
 8000518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	f107 0310 	add.w	r3, r7, #16
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000528:	4b3b      	ldr	r3, [pc, #236]	; (8000618 <MX_GPIO_Init+0x104>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a3a      	ldr	r2, [pc, #232]	; (8000618 <MX_GPIO_Init+0x104>)
 800052e:	f043 0310 	orr.w	r3, r3, #16
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b38      	ldr	r3, [pc, #224]	; (8000618 <MX_GPIO_Init+0x104>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f003 0310 	and.w	r3, r3, #16
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000540:	4b35      	ldr	r3, [pc, #212]	; (8000618 <MX_GPIO_Init+0x104>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	4a34      	ldr	r2, [pc, #208]	; (8000618 <MX_GPIO_Init+0x104>)
 8000546:	f043 0304 	orr.w	r3, r3, #4
 800054a:	6193      	str	r3, [r2, #24]
 800054c:	4b32      	ldr	r3, [pc, #200]	; (8000618 <MX_GPIO_Init+0x104>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	f003 0304 	and.w	r3, r3, #4
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000558:	4b2f      	ldr	r3, [pc, #188]	; (8000618 <MX_GPIO_Init+0x104>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	4a2e      	ldr	r2, [pc, #184]	; (8000618 <MX_GPIO_Init+0x104>)
 800055e:	f043 0308 	orr.w	r3, r3, #8
 8000562:	6193      	str	r3, [r2, #24]
 8000564:	4b2c      	ldr	r3, [pc, #176]	; (8000618 <MX_GPIO_Init+0x104>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	f003 0308 	and.w	r3, r3, #8
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD6_Pin|LD5_Pin|LD4_Pin|EPD_CS_Pin, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	f248 01a8 	movw	r1, #32936	; 0x80a8
 8000576:	4829      	ldr	r0, [pc, #164]	; (800061c <MX_GPIO_Init+0x108>)
 8000578:	f001 fc2d 	bl	8001dd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin|LD1_Pin|EPD_RST_Pin
 800057c:	2200      	movs	r2, #0
 800057e:	f249 3102 	movw	r1, #37634	; 0x9302
 8000582:	4827      	ldr	r0, [pc, #156]	; (8000620 <MX_GPIO_Init+0x10c>)
 8000584:	f001 fc27 	bl	8001dd6 <HAL_GPIO_WritePin>
                          |EPD_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BTN_ENC1_Pin */
  GPIO_InitStruct.Pin = BTN_ENC1_Pin;
 8000588:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800058c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_ENC1_GPIO_Port, &GPIO_InitStruct);
 8000596:	f107 0310 	add.w	r3, r7, #16
 800059a:	4619      	mov	r1, r3
 800059c:	4821      	ldr	r0, [pc, #132]	; (8000624 <MX_GPIO_Init+0x110>)
 800059e:	f001 fa7f 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC2B_Pin ENC2A_Pin */
  GPIO_InitStruct.Pin = ENC2B_Pin|ENC2A_Pin;
 80005a2:	2303      	movs	r3, #3
 80005a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ae:	f107 0310 	add.w	r3, r7, #16
 80005b2:	4619      	mov	r1, r3
 80005b4:	4819      	ldr	r0, [pc, #100]	; (800061c <MX_GPIO_Init+0x108>)
 80005b6:	f001 fa73 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD6_Pin LD5_Pin LD4_Pin EPD_CS_Pin */
  GPIO_InitStruct.Pin = LD6_Pin|LD5_Pin|LD4_Pin|EPD_CS_Pin;
 80005ba:	f248 03a8 	movw	r3, #32936	; 0x80a8
 80005be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c0:	2301      	movs	r3, #1
 80005c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c8:	2302      	movs	r3, #2
 80005ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005cc:	f107 0310 	add.w	r3, r7, #16
 80005d0:	4619      	mov	r1, r3
 80005d2:	4812      	ldr	r0, [pc, #72]	; (800061c <MX_GPIO_Init+0x108>)
 80005d4:	f001 fa64 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin LD1_Pin EPD_RST_Pin
                           EPD_DC_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin|LD1_Pin|EPD_RST_Pin
 80005d8:	f249 3302 	movw	r3, #37634	; 0x9302
 80005dc:	613b      	str	r3, [r7, #16]
                          |EPD_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	2301      	movs	r3, #1
 80005e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e6:	2302      	movs	r3, #2
 80005e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ea:	f107 0310 	add.w	r3, r7, #16
 80005ee:	4619      	mov	r1, r3
 80005f0:	480b      	ldr	r0, [pc, #44]	; (8000620 <MX_GPIO_Init+0x10c>)
 80005f2:	f001 fa55 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_ENC2_Pin EPD_BUSY_Pin ENC1B_Pin ENC1A_Pin */
  GPIO_InitStruct.Pin = BTN_ENC2_Pin|EPD_BUSY_Pin|ENC1B_Pin|ENC1A_Pin;
 80005f6:	f244 03d0 	movw	r3, #16592	; 0x40d0
 80005fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000604:	f107 0310 	add.w	r3, r7, #16
 8000608:	4619      	mov	r1, r3
 800060a:	4805      	ldr	r0, [pc, #20]	; (8000620 <MX_GPIO_Init+0x10c>)
 800060c:	f001 fa48 	bl	8001aa0 <HAL_GPIO_Init>

}
 8000610:	bf00      	nop
 8000612:	3720      	adds	r7, #32
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40021000 	.word	0x40021000
 800061c:	40010800 	.word	0x40010800
 8000620:	40010c00 	.word	0x40010c00
 8000624:	40011000 	.word	0x40011000

08000628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800062c:	b672      	cpsid	i
}
 800062e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000630:	e7fe      	b.n	8000630 <Error_Handler+0x8>
	...

08000634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800063a:	4b15      	ldr	r3, [pc, #84]	; (8000690 <HAL_MspInit+0x5c>)
 800063c:	699b      	ldr	r3, [r3, #24]
 800063e:	4a14      	ldr	r2, [pc, #80]	; (8000690 <HAL_MspInit+0x5c>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6193      	str	r3, [r2, #24]
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <HAL_MspInit+0x5c>)
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000652:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <HAL_MspInit+0x5c>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <HAL_MspInit+0x5c>)
 8000658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065c:	61d3      	str	r3, [r2, #28]
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <HAL_MspInit+0x5c>)
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800066a:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <HAL_MspInit+0x60>)
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	4a04      	ldr	r2, [pc, #16]	; (8000694 <HAL_MspInit+0x60>)
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000686:	bf00      	nop
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr
 8000690:	40021000 	.word	0x40021000
 8000694:	40010000 	.word	0x40010000

08000698 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a1c      	ldr	r2, [pc, #112]	; (8000724 <HAL_SPI_MspInit+0x8c>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d131      	bne.n	800071c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006b8:	4b1b      	ldr	r3, [pc, #108]	; (8000728 <HAL_SPI_MspInit+0x90>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	4a1a      	ldr	r2, [pc, #104]	; (8000728 <HAL_SPI_MspInit+0x90>)
 80006be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006c2:	6193      	str	r3, [r2, #24]
 80006c4:	4b18      	ldr	r3, [pc, #96]	; (8000728 <HAL_SPI_MspInit+0x90>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006cc:	613b      	str	r3, [r7, #16]
 80006ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <HAL_SPI_MspInit+0x90>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a14      	ldr	r2, [pc, #80]	; (8000728 <HAL_SPI_MspInit+0x90>)
 80006d6:	f043 0308 	orr.w	r3, r3, #8
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <HAL_SPI_MspInit+0x90>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0308 	and.w	r3, r3, #8
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80006e8:	2328      	movs	r3, #40	; 0x28
 80006ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ec:	2302      	movs	r3, #2
 80006ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f0:	2303      	movs	r3, #3
 80006f2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	4619      	mov	r1, r3
 80006fa:	480c      	ldr	r0, [pc, #48]	; (800072c <HAL_SPI_MspInit+0x94>)
 80006fc:	f001 f9d0 	bl	8001aa0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000700:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <HAL_SPI_MspInit+0x98>)
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
 8000706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000708:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
 800070e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
 8000716:	4a06      	ldr	r2, [pc, #24]	; (8000730 <HAL_SPI_MspInit+0x98>)
 8000718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800071c:	bf00      	nop
 800071e:	3728      	adds	r7, #40	; 0x28
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40013000 	.word	0x40013000
 8000728:	40021000 	.word	0x40021000
 800072c:	40010c00 	.word	0x40010c00
 8000730:	40010000 	.word	0x40010000

08000734 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	f107 0310 	add.w	r3, r7, #16
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a2f      	ldr	r2, [pc, #188]	; (800080c <HAL_UART_MspInit+0xd8>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d157      	bne.n	8000804 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000754:	4b2e      	ldr	r3, [pc, #184]	; (8000810 <HAL_UART_MspInit+0xdc>)
 8000756:	69db      	ldr	r3, [r3, #28]
 8000758:	4a2d      	ldr	r2, [pc, #180]	; (8000810 <HAL_UART_MspInit+0xdc>)
 800075a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800075e:	61d3      	str	r3, [r2, #28]
 8000760:	4b2b      	ldr	r3, [pc, #172]	; (8000810 <HAL_UART_MspInit+0xdc>)
 8000762:	69db      	ldr	r3, [r3, #28]
 8000764:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800076c:	4b28      	ldr	r3, [pc, #160]	; (8000810 <HAL_UART_MspInit+0xdc>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a27      	ldr	r2, [pc, #156]	; (8000810 <HAL_UART_MspInit+0xdc>)
 8000772:	f043 0308 	orr.w	r3, r3, #8
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b25      	ldr	r3, [pc, #148]	; (8000810 <HAL_UART_MspInit+0xdc>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f003 0308 	and.w	r3, r3, #8
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000788:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078a:	2302      	movs	r3, #2
 800078c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800078e:	2303      	movs	r3, #3
 8000790:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000792:	f107 0310 	add.w	r3, r7, #16
 8000796:	4619      	mov	r1, r3
 8000798:	481e      	ldr	r0, [pc, #120]	; (8000814 <HAL_UART_MspInit+0xe0>)
 800079a:	f001 f981 	bl	8001aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800079e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	4619      	mov	r1, r3
 80007b2:	4818      	ldr	r0, [pc, #96]	; (8000814 <HAL_UART_MspInit+0xe0>)
 80007b4:	f001 f974 	bl	8001aa0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <HAL_UART_MspInit+0xe4>)
 80007ba:	4a18      	ldr	r2, [pc, #96]	; (800081c <HAL_UART_MspInit+0xe8>)
 80007bc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <HAL_UART_MspInit+0xe4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <HAL_UART_MspInit+0xe4>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <HAL_UART_MspInit+0xe4>)
 80007cc:	2280      	movs	r2, #128	; 0x80
 80007ce:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <HAL_UART_MspInit+0xe4>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <HAL_UART_MspInit+0xe4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <HAL_UART_MspInit+0xe4>)
 80007de:	2220      	movs	r2, #32
 80007e0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <HAL_UART_MspInit+0xe4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80007e8:	480b      	ldr	r0, [pc, #44]	; (8000818 <HAL_UART_MspInit+0xe4>)
 80007ea:	f000 ff6b 	bl	80016c4 <HAL_DMA_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80007f4:	f7ff ff18 	bl	8000628 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4a07      	ldr	r2, [pc, #28]	; (8000818 <HAL_UART_MspInit+0xe4>)
 80007fc:	639a      	str	r2, [r3, #56]	; 0x38
 80007fe:	4a06      	ldr	r2, [pc, #24]	; (8000818 <HAL_UART_MspInit+0xe4>)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000804:	bf00      	nop
 8000806:	3720      	adds	r7, #32
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40004800 	.word	0x40004800
 8000810:	40021000 	.word	0x40021000
 8000814:	40010c00 	.word	0x40010c00
 8000818:	200003fc 	.word	0x200003fc
 800081c:	40020030 	.word	0x40020030

08000820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <NMI_Handler+0x4>

08000826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082a:	e7fe      	b.n	800082a <HardFault_Handler+0x4>

0800082c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <MemManage_Handler+0x4>

08000832 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <BusFault_Handler+0x4>

08000838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800083c:	e7fe      	b.n	800083c <UsageFault_Handler+0x4>

0800083e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr

0800084a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr

08000856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr

08000862 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000866:	f000 fddf 	bl	8001428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000874:	4802      	ldr	r0, [pc, #8]	; (8000880 <DMA1_Channel3_IRQHandler+0x10>)
 8000876:	f000 ffdf 	bl	8001838 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200003fc 	.word	0x200003fc

08000884 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800088c:	4a14      	ldr	r2, [pc, #80]	; (80008e0 <_sbrk+0x5c>)
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <_sbrk+0x60>)
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000898:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <_sbrk+0x64>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d102      	bne.n	80008a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <_sbrk+0x64>)
 80008a2:	4a12      	ldr	r2, [pc, #72]	; (80008ec <_sbrk+0x68>)
 80008a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <_sbrk+0x64>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4413      	add	r3, r2
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d207      	bcs.n	80008c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008b4:	f002 fb9e 	bl	8002ff4 <__errno>
 80008b8:	4603      	mov	r3, r0
 80008ba:	220c      	movs	r2, #12
 80008bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008c2:	e009      	b.n	80008d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008c4:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <_sbrk+0x64>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ca:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <_sbrk+0x64>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4413      	add	r3, r2
 80008d2:	4a05      	ldr	r2, [pc, #20]	; (80008e8 <_sbrk+0x64>)
 80008d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008d6:	68fb      	ldr	r3, [r7, #12]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20005000 	.word	0x20005000
 80008e4:	00000400 	.word	0x00000400
 80008e8:	20002054 	.word	0x20002054
 80008ec:	20002070 	.word	0x20002070

080008f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr

080008fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008fc:	480c      	ldr	r0, [pc, #48]	; (8000930 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008fe:	490d      	ldr	r1, [pc, #52]	; (8000934 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000900:	4a0d      	ldr	r2, [pc, #52]	; (8000938 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000904:	e002      	b.n	800090c <LoopCopyDataInit>

08000906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090a:	3304      	adds	r3, #4

0800090c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800090c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000910:	d3f9      	bcc.n	8000906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000912:	4a0a      	ldr	r2, [pc, #40]	; (800093c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000914:	4c0a      	ldr	r4, [pc, #40]	; (8000940 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000918:	e001      	b.n	800091e <LoopFillZerobss>

0800091a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800091c:	3204      	adds	r2, #4

0800091e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000920:	d3fb      	bcc.n	800091a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000922:	f7ff ffe5 	bl	80008f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000926:	f002 fb6b 	bl	8003000 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800092a:	f7ff fc89 	bl	8000240 <main>
  bx lr
 800092e:	4770      	bx	lr
  ldr r0, =_sdata
 8000930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000934:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 8000938:	080039e4 	.word	0x080039e4
  ldr r2, =_sbss
 800093c:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 8000940:	2000206c 	.word	0x2000206c

08000944 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000944:	e7fe      	b.n	8000944 <ADC1_2_IRQHandler>

08000946 <Commander_Init>:

#include "stm32f1xx_hal.h"
#include "commander.h"
#include <string.h>

void Commander_Init(Commander_HandleTypeDef *hcommander, UART_HandleTypeDef *huart, DMA_HandleTypeDef *hdma_uart_rx, void (*command_callback)(Command command)) {
 8000946:	b480      	push	{r7}
 8000948:	b085      	sub	sp, #20
 800094a:	af00      	add	r7, sp, #0
 800094c:	60f8      	str	r0, [r7, #12]
 800094e:	60b9      	str	r1, [r7, #8]
 8000950:	607a      	str	r2, [r7, #4]
 8000952:	603b      	str	r3, [r7, #0]
	hcommander->huart = huart;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	68ba      	ldr	r2, [r7, #8]
 8000958:	601a      	str	r2, [r3, #0]
	hcommander->hdma_uart_rx = hdma_uart_rx;
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	605a      	str	r2, [r3, #4]
	hcommander->rear = -1;
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	22ff      	movs	r2, #255	; 0xff
 8000964:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
	hcommander->front = -1;
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	22ff      	movs	r2, #255	; 0xff
 800096c:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
	hcommander->commands_to_handle = 0;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	2200      	movs	r2, #0
 8000974:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
	hcommander->counter = 0;
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	2200      	movs	r2, #0
 800097c:	f8c3 2950 	str.w	r2, [r3, #2384]	; 0x950
	hcommander->command_callback = command_callback;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	683a      	ldr	r2, [r7, #0]
 8000984:	f8c3 2954 	str.w	r2, [r3, #2388]	; 0x954
}
 8000988:	bf00      	nop
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr

08000992 <Commander_Start>:

void Commander_Start(Commander_HandleTypeDef *hcommander) {
 8000992:	b580      	push	{r7, lr}
 8000994:	b082      	sub	sp, #8
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(hcommander->huart, hcommander->uart_rx_buffer, COMMAND_BYTESIZE * 2);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6818      	ldr	r0, [r3, #0]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	3308      	adds	r3, #8
 80009a2:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009a6:	4619      	mov	r1, r3
 80009a8:	f002 f8fb 	bl	8002ba2 <HAL_UART_Receive_DMA>
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <Commander_Process>:
void Commander_Send(Commander_HandleTypeDef *hcommander, Command *command) {
	//HAL_StatusTypeDef status;
	/*status = */HAL_UART_Transmit(hcommander->huart, (uint8_t *)command, COMMAND_BYTESIZE, 1000);
}

void Commander_Process(Commander_HandleTypeDef *hcommander) {
 80009b4:	b5b0      	push	{r4, r5, r7, lr}
 80009b6:	b0a0      	sub	sp, #128	; 0x80
 80009b8:	af1e      	add	r7, sp, #120	; 0x78
 80009ba:	6078      	str	r0, [r7, #4]

	if(hcommander->front == -1) {
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f993 394d 	ldrsb.w	r3, [r3, #2381]	; 0x94d
 80009c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009c6:	d045      	beq.n	8000a54 <Commander_Process+0xa0>
		// underflow
	} else {

		//printf("Element deleted from queue is : %dn",cqueue_arr[front]);
		hcommander->command_callback(hcommander->command_buffer[hcommander->front]);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f8d3 5954 	ldr.w	r5, [r3, #2388]	; 0x954
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	f993 394d 	ldrsb.w	r3, [r3, #2381]	; 0x94d
 80009d4:	4619      	mov	r1, r3
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	460b      	mov	r3, r1
 80009da:	015b      	lsls	r3, r3, #5
 80009dc:	440b      	add	r3, r1
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	4413      	add	r3, r2
 80009e2:	f503 7484 	add.w	r4, r3, #264	; 0x108
 80009e6:	4668      	mov	r0, sp
 80009e8:	f104 0314 	add.w	r3, r4, #20
 80009ec:	2274      	movs	r2, #116	; 0x74
 80009ee:	4619      	mov	r1, r3
 80009f0:	f002 fb2a 	bl	8003048 <memcpy>
 80009f4:	1d23      	adds	r3, r4, #4
 80009f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009f8:	47a8      	blx	r5
		hcommander->commands_to_handle--;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f893 394e 	ldrb.w	r3, [r3, #2382]	; 0x94e
 8000a00:	3b01      	subs	r3, #1
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e

		if(hcommander->front == hcommander->rear) {
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	f993 294d 	ldrsb.w	r2, [r3, #2381]	; 0x94d
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f993 394c 	ldrsb.w	r3, [r3, #2380]	; 0x94c
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d108      	bne.n	8000a2c <Commander_Process+0x78>
			hcommander->front = -1;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	22ff      	movs	r2, #255	; 0xff
 8000a1e:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
			hcommander->rear = -1;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	22ff      	movs	r2, #255	; 0xff
 8000a26:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
		} else {
			if(hcommander->front == COMMANDS_COUNT-1) hcommander->front = 0;
			else hcommander->front++;
		}
	}
}
 8000a2a:	e013      	b.n	8000a54 <Commander_Process+0xa0>
			if(hcommander->front == COMMANDS_COUNT-1) hcommander->front = 0;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f993 394d 	ldrsb.w	r3, [r3, #2381]	; 0x94d
 8000a32:	2b0f      	cmp	r3, #15
 8000a34:	d104      	bne.n	8000a40 <Commander_Process+0x8c>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
}
 8000a3e:	e009      	b.n	8000a54 <Commander_Process+0xa0>
			else hcommander->front++;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f993 394d 	ldrsb.w	r3, [r3, #2381]	; 0x94d
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	3301      	adds	r3, #1
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	b25a      	sxtb	r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bdb0      	pop	{r4, r5, r7, pc}

08000a5c <Commander_Enqueue>:

void Commander_Enqueue(Commander_HandleTypeDef *hcommander, Command *command) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]


	if((hcommander->front == 0 && hcommander->rear == COMMANDS_COUNT-1) || (hcommander->front == hcommander->rear+1)) {
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	f993 394d 	ldrsb.w	r3, [r3, #2381]	; 0x94d
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d104      	bne.n	8000a7a <Commander_Enqueue+0x1e>
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f993 394c 	ldrsb.w	r3, [r3, #2380]	; 0x94c
 8000a76:	2b0f      	cmp	r3, #15
 8000a78:	d046      	beq.n	8000b08 <Commander_Enqueue+0xac>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f993 394d 	ldrsb.w	r3, [r3, #2381]	; 0x94d
 8000a80:	461a      	mov	r2, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	f993 394c 	ldrsb.w	r3, [r3, #2380]	; 0x94c
 8000a88:	3301      	adds	r3, #1
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d03c      	beq.n	8000b08 <Commander_Enqueue+0xac>
		// overflow
	} else {
		if(hcommander->front == -1) {
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f993 394d 	ldrsb.w	r3, [r3, #2381]	; 0x94d
 8000a94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a98:	d108      	bne.n	8000aac <Commander_Enqueue+0x50>
			hcommander->front = 0;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
			hcommander->rear = 0;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
 8000aaa:	e013      	b.n	8000ad4 <Commander_Enqueue+0x78>
		} else {
			if(hcommander->rear == COMMANDS_COUNT-1) hcommander->rear = 0;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f993 394c 	ldrsb.w	r3, [r3, #2380]	; 0x94c
 8000ab2:	2b0f      	cmp	r3, #15
 8000ab4:	d104      	bne.n	8000ac0 <Commander_Enqueue+0x64>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
 8000abe:	e009      	b.n	8000ad4 <Commander_Enqueue+0x78>
			else hcommander->rear++;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f993 394c 	ldrsb.w	r3, [r3, #2380]	; 0x94c
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	3301      	adds	r3, #1
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	b25a      	sxtb	r2, r3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
		}
		memcpy(hcommander->command_buffer + hcommander->rear, command, COMMAND_BYTESIZE);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f503 7286 	add.w	r2, r3, #268	; 0x10c
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f993 394c 	ldrsb.w	r3, [r3, #2380]	; 0x94c
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	015b      	lsls	r3, r3, #5
 8000ae6:	440b      	add	r3, r1
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	4413      	add	r3, r2
 8000aec:	2282      	movs	r2, #130	; 0x82
 8000aee:	6839      	ldr	r1, [r7, #0]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f002 faa9 	bl	8003048 <memcpy>
		hcommander->commands_to_handle++;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f893 394e 	ldrb.w	r3, [r3, #2382]	; 0x94e
 8000afc:	3301      	adds	r3, #1
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
	}


}
 8000b06:	e7ff      	b.n	8000b08 <Commander_Enqueue+0xac>
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <_EPD_Reset>:

uint8_t WS_20_30[159] = { 0x80,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x10,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x80,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x10,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x14,0x8,0x0,0x0,0x0,0x0,0x1,0xA,0xA,0x0,0xA,0xA,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x14,0x8,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x44,0x44,0x44,0x44,0x44,0x44,0x0,0x0,0x0,0x22,0x17,0x41,0x0,0x32,0x36 };

extern SPI_HandleTypeDef hspi1;

static void _EPD_Reset(void) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 8000b14:	2201      	movs	r2, #1
 8000b16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b1a:	480d      	ldr	r0, [pc, #52]	; (8000b50 <_EPD_Reset+0x40>)
 8000b1c:	f001 f95b 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000b20:	2064      	movs	r0, #100	; 0x64
 8000b22:	f000 fc9d 	bl	8001460 <HAL_Delay>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b2c:	4808      	ldr	r0, [pc, #32]	; (8000b50 <_EPD_Reset+0x40>)
 8000b2e:	f001 f952 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000b32:	2002      	movs	r0, #2
 8000b34:	f000 fc94 	bl	8001460 <HAL_Delay>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 8000b38:	2201      	movs	r2, #1
 8000b3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b3e:	4804      	ldr	r0, [pc, #16]	; (8000b50 <_EPD_Reset+0x40>)
 8000b40:	f001 f949 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000b44:	2064      	movs	r0, #100	; 0x64
 8000b46:	f000 fc8b 	bl	8001460 <HAL_Delay>
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40010c00 	.word	0x40010c00

08000b54 <_EPD_SendCommand>:

static void _EPD_SendCommand(uint8_t reg) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b64:	480c      	ldr	r0, [pc, #48]	; (8000b98 <_EPD_SendCommand+0x44>)
 8000b66:	f001 f936 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b70:	480a      	ldr	r0, [pc, #40]	; (8000b9c <_EPD_SendCommand+0x48>)
 8000b72:	f001 f930 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 1000);
 8000b76:	1df9      	adds	r1, r7, #7
 8000b78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	4808      	ldr	r0, [pc, #32]	; (8000ba0 <_EPD_SendCommand+0x4c>)
 8000b80:	f001 fde0 	bl	8002744 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_SET);
 8000b84:	2201      	movs	r2, #1
 8000b86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b8a:	4804      	ldr	r0, [pc, #16]	; (8000b9c <_EPD_SendCommand+0x48>)
 8000b8c:	f001 f923 	bl	8001dd6 <HAL_GPIO_WritePin>
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40010c00 	.word	0x40010c00
 8000b9c:	40010800 	.word	0x40010800
 8000ba0:	20000360 	.word	0x20000360

08000ba4 <_EPD_SendData>:

static void _EPD_SendData(uint8_t data) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_SET);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb4:	480c      	ldr	r0, [pc, #48]	; (8000be8 <_EPD_SendData+0x44>)
 8000bb6:	f001 f90e 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bc0:	480a      	ldr	r0, [pc, #40]	; (8000bec <_EPD_SendData+0x48>)
 8000bc2:	f001 f908 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8000bc6:	1df9      	adds	r1, r7, #7
 8000bc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bcc:	2201      	movs	r2, #1
 8000bce:	4808      	ldr	r0, [pc, #32]	; (8000bf0 <_EPD_SendData+0x4c>)
 8000bd0:	f001 fdb8 	bl	8002744 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_SET);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bda:	4804      	ldr	r0, [pc, #16]	; (8000bec <_EPD_SendData+0x48>)
 8000bdc:	f001 f8fb 	bl	8001dd6 <HAL_GPIO_WritePin>
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40010c00 	.word	0x40010c00
 8000bec:	40010800 	.word	0x40010800
 8000bf0:	20000360 	.word	0x20000360

08000bf4 <_EPD_ReadBusy>:
	for(uint8_t i = 0; i < count; i++) {
		_EPD_SendData(array[i]);
	}
}

void _EPD_ReadBusy(void) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
	while(1) {
		if(HAL_GPIO_ReadPin(EPD_BUSY_GPIO_Port, EPD_BUSY_Pin) == GPIO_PIN_RESET)
 8000bf8:	2110      	movs	r1, #16
 8000bfa:	4806      	ldr	r0, [pc, #24]	; (8000c14 <_EPD_ReadBusy+0x20>)
 8000bfc:	f001 f8d4 	bl	8001da8 <HAL_GPIO_ReadPin>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <_EPD_ReadBusy+0x1a>
			break;
		HAL_Delay(1);
 8000c06:	2001      	movs	r0, #1
 8000c08:	f000 fc2a 	bl	8001460 <HAL_Delay>
		if(HAL_GPIO_ReadPin(EPD_BUSY_GPIO_Port, EPD_BUSY_Pin) == GPIO_PIN_RESET)
 8000c0c:	e7f4      	b.n	8000bf8 <_EPD_ReadBusy+0x4>
			break;
 8000c0e:	bf00      	nop
	}
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40010c00 	.word	0x40010c00

08000c18 <_EPD_LUT>:

static void _EPD_LUT(uint8_t *lut) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	uint8_t count;
	_EPD_SendCommand(0x32);
 8000c20:	2032      	movs	r0, #50	; 0x32
 8000c22:	f7ff ff97 	bl	8000b54 <_EPD_SendCommand>
	for(count=0; count<153; count++)
 8000c26:	2300      	movs	r3, #0
 8000c28:	73fb      	strb	r3, [r7, #15]
 8000c2a:	e009      	b.n	8000c40 <_EPD_LUT+0x28>
		_EPD_SendData(lut[count]);
 8000c2c:	7bfb      	ldrb	r3, [r7, #15]
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ffb5 	bl	8000ba4 <_EPD_SendData>
	for(count=0; count<153; count++)
 8000c3a:	7bfb      	ldrb	r3, [r7, #15]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	73fb      	strb	r3, [r7, #15]
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
 8000c42:	2b98      	cmp	r3, #152	; 0x98
 8000c44:	d9f2      	bls.n	8000c2c <_EPD_LUT+0x14>
	_EPD_ReadBusy();
 8000c46:	f7ff ffd5 	bl	8000bf4 <_EPD_ReadBusy>
}
 8000c4a:	bf00      	nop
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <_EPD_LUT_by_host>:

static void _EPD_LUT_by_host(uint8_t *lut) {
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
	_EPD_LUT((uint8_t *)lut);			//lut
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f7ff ffdc 	bl	8000c18 <_EPD_LUT>
	_EPD_SendCommand(0x3f);
 8000c60:	203f      	movs	r0, #63	; 0x3f
 8000c62:	f7ff ff77 	bl	8000b54 <_EPD_SendCommand>
	_EPD_SendData(*(lut+153));
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	3399      	adds	r3, #153	; 0x99
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ff99 	bl	8000ba4 <_EPD_SendData>
	_EPD_SendCommand(0x03);	// gate voltage
 8000c72:	2003      	movs	r0, #3
 8000c74:	f7ff ff6e 	bl	8000b54 <_EPD_SendCommand>
	_EPD_SendData(*(lut+154));
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	339a      	adds	r3, #154	; 0x9a
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff ff90 	bl	8000ba4 <_EPD_SendData>
	_EPD_SendCommand(0x04);	// source voltage
 8000c84:	2004      	movs	r0, #4
 8000c86:	f7ff ff65 	bl	8000b54 <_EPD_SendCommand>
	_EPD_SendData(*(lut+155));	// VSH
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	339b      	adds	r3, #155	; 0x9b
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff87 	bl	8000ba4 <_EPD_SendData>
	_EPD_SendData(*(lut+156));	// VSH2
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	339c      	adds	r3, #156	; 0x9c
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ff81 	bl	8000ba4 <_EPD_SendData>
	_EPD_SendData(*(lut+157));	// VSL
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	339d      	adds	r3, #157	; 0x9d
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff7b 	bl	8000ba4 <_EPD_SendData>
	_EPD_SendCommand(0x2c);		// VCOM
 8000cae:	202c      	movs	r0, #44	; 0x2c
 8000cb0:	f7ff ff50 	bl	8000b54 <_EPD_SendCommand>
	_EPD_SendData(*(lut+158));
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	339e      	adds	r3, #158	; 0x9e
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff ff72 	bl	8000ba4 <_EPD_SendData>
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <_EPD_TurnOnDisplay>:

static void _EPD_TurnOnDisplay(void) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	_EPD_SendCommand(0x22); //Display Update Control
 8000ccc:	2022      	movs	r0, #34	; 0x22
 8000cce:	f7ff ff41 	bl	8000b54 <_EPD_SendCommand>
	_EPD_SendData(0xc7);
 8000cd2:	20c7      	movs	r0, #199	; 0xc7
 8000cd4:	f7ff ff66 	bl	8000ba4 <_EPD_SendData>
	_EPD_SendCommand(0x20); //Activate Display Update Sequence
 8000cd8:	2020      	movs	r0, #32
 8000cda:	f7ff ff3b 	bl	8000b54 <_EPD_SendCommand>
	_EPD_ReadBusy();
 8000cde:	f7ff ff89 	bl	8000bf4 <_EPD_ReadBusy>
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <_EPD_SetWindows>:
	_EPD_SendData(0x0F);
	_EPD_SendCommand(0x20); //Activate Display Update Sequence
	_EPD_ReadBusy();
}

static void _EPD_SetWindows(uint16_t Xstart, uint16_t Ystart, uint16_t Xend, uint16_t Yend) {
 8000ce6:	b590      	push	{r4, r7, lr}
 8000ce8:	b083      	sub	sp, #12
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4604      	mov	r4, r0
 8000cee:	4608      	mov	r0, r1
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4623      	mov	r3, r4
 8000cf6:	80fb      	strh	r3, [r7, #6]
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	80bb      	strh	r3, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	807b      	strh	r3, [r7, #2]
 8000d00:	4613      	mov	r3, r2
 8000d02:	803b      	strh	r3, [r7, #0]
	_EPD_SendCommand(0x44); // SET_RAM_X_ADDRESS_START_END_POSITION
 8000d04:	2044      	movs	r0, #68	; 0x44
 8000d06:	f7ff ff25 	bl	8000b54 <_EPD_SendCommand>
	_EPD_SendData((Xstart>>3) & 0xFF);
 8000d0a:	88fb      	ldrh	r3, [r7, #6]
 8000d0c:	08db      	lsrs	r3, r3, #3
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ff46 	bl	8000ba4 <_EPD_SendData>
	_EPD_SendData((Xend>>3) & 0xFF);
 8000d18:	887b      	ldrh	r3, [r7, #2]
 8000d1a:	08db      	lsrs	r3, r3, #3
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff3f 	bl	8000ba4 <_EPD_SendData>

	_EPD_SendCommand(0x45); // SET_RAM_Y_ADDRESS_START_END_POSITION
 8000d26:	2045      	movs	r0, #69	; 0x45
 8000d28:	f7ff ff14 	bl	8000b54 <_EPD_SendCommand>
	_EPD_SendData(Ystart & 0xFF);
 8000d2c:	88bb      	ldrh	r3, [r7, #4]
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff37 	bl	8000ba4 <_EPD_SendData>
	_EPD_SendData((Ystart >> 8) & 0xFF);
 8000d36:	88bb      	ldrh	r3, [r7, #4]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff ff30 	bl	8000ba4 <_EPD_SendData>
	_EPD_SendData(Yend & 0xFF);
 8000d44:	883b      	ldrh	r3, [r7, #0]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff2b 	bl	8000ba4 <_EPD_SendData>
	_EPD_SendData((Yend >> 8) & 0xFF);
 8000d4e:	883b      	ldrh	r3, [r7, #0]
 8000d50:	0a1b      	lsrs	r3, r3, #8
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff ff24 	bl	8000ba4 <_EPD_SendData>
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd90      	pop	{r4, r7, pc}

08000d64 <_EPD_SetCursor>:

static void _EPD_SetCursor(uint16_t Xstart, uint16_t Ystart) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	460a      	mov	r2, r1
 8000d6e:	80fb      	strh	r3, [r7, #6]
 8000d70:	4613      	mov	r3, r2
 8000d72:	80bb      	strh	r3, [r7, #4]
	_EPD_SendCommand(0x4E); // SET_RAM_X_ADDRESS_COUNTER
 8000d74:	204e      	movs	r0, #78	; 0x4e
 8000d76:	f7ff feed 	bl	8000b54 <_EPD_SendCommand>
	_EPD_SendData(Xstart & 0xFF);
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ff10 	bl	8000ba4 <_EPD_SendData>

	_EPD_SendCommand(0x4F); // SET_RAM_Y_ADDRESS_COUNTER
 8000d84:	204f      	movs	r0, #79	; 0x4f
 8000d86:	f7ff fee5 	bl	8000b54 <_EPD_SendCommand>
	_EPD_SendData(Ystart & 0xFF);
 8000d8a:	88bb      	ldrh	r3, [r7, #4]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff ff08 	bl	8000ba4 <_EPD_SendData>
	_EPD_SendData((Ystart >> 8) & 0xFF);
 8000d94:	88bb      	ldrh	r3, [r7, #4]
 8000d96:	0a1b      	lsrs	r3, r3, #8
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff01 	bl	8000ba4 <_EPD_SendData>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <EPD_Init>:
		}
	}
}


void EPD_Init(EPD_HandleTypeDef *hepd) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]

	// start phase 0
	//hepd->state = INIT_STATE;
	//hepd->phase = 0;
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dba:	4825      	ldr	r0, [pc, #148]	; (8000e50 <EPD_Init+0xa4>)
 8000dbc:	f001 f80b 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dc6:	4823      	ldr	r0, [pc, #140]	; (8000e54 <EPD_Init+0xa8>)
 8000dc8:	f001 f805 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dd2:	481f      	ldr	r0, [pc, #124]	; (8000e50 <EPD_Init+0xa4>)
 8000dd4:	f000 ffff 	bl	8001dd6 <HAL_GPIO_WritePin>
	_EPD_Reset();
 8000dd8:	f7ff fe9a 	bl	8000b10 <_EPD_Reset>
	HAL_Delay(100);
 8000ddc:	2064      	movs	r0, #100	; 0x64
 8000dde:	f000 fb3f 	bl	8001460 <HAL_Delay>
	// end phase 0

	_EPD_ReadBusy();
 8000de2:	f7ff ff07 	bl	8000bf4 <_EPD_ReadBusy>

	// start phase 1
	_EPD_SendCommand(0x12);  //SWRESET
 8000de6:	2012      	movs	r0, #18
 8000de8:	f7ff feb4 	bl	8000b54 <_EPD_SendCommand>
	// end phase 1

	_EPD_ReadBusy();
 8000dec:	f7ff ff02 	bl	8000bf4 <_EPD_ReadBusy>

	_EPD_SendCommand(0x01); //Driver output control
 8000df0:	2001      	movs	r0, #1
 8000df2:	f7ff feaf 	bl	8000b54 <_EPD_SendCommand>
	_EPD_SendData(0x27);
 8000df6:	2027      	movs	r0, #39	; 0x27
 8000df8:	f7ff fed4 	bl	8000ba4 <_EPD_SendData>
	_EPD_SendData(0x01);
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f7ff fed1 	bl	8000ba4 <_EPD_SendData>
	_EPD_SendData(0x00);
 8000e02:	2000      	movs	r0, #0
 8000e04:	f7ff fece 	bl	8000ba4 <_EPD_SendData>

	_EPD_SendCommand(0x11); //data entry mode
 8000e08:	2011      	movs	r0, #17
 8000e0a:	f7ff fea3 	bl	8000b54 <_EPD_SendCommand>
	_EPD_SendData(0x03);
 8000e0e:	2003      	movs	r0, #3
 8000e10:	f7ff fec8 	bl	8000ba4 <_EPD_SendData>

	_EPD_SetWindows(0, 0, EPD_WIDTH-1, EPD_HEIGHT-1);
 8000e14:	f240 1327 	movw	r3, #295	; 0x127
 8000e18:	227f      	movs	r2, #127	; 0x7f
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f7ff ff62 	bl	8000ce6 <_EPD_SetWindows>

	_EPD_SendCommand(0x21); //  Display update control
 8000e22:	2021      	movs	r0, #33	; 0x21
 8000e24:	f7ff fe96 	bl	8000b54 <_EPD_SendCommand>
	_EPD_SendData(0x00);
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f7ff febb 	bl	8000ba4 <_EPD_SendData>
	_EPD_SendData(0x80);
 8000e2e:	2080      	movs	r0, #128	; 0x80
 8000e30:	f7ff feb8 	bl	8000ba4 <_EPD_SendData>

	_EPD_SetCursor(0, 0);
 8000e34:	2100      	movs	r1, #0
 8000e36:	2000      	movs	r0, #0
 8000e38:	f7ff ff94 	bl	8000d64 <_EPD_SetCursor>
	_EPD_ReadBusy();
 8000e3c:	f7ff feda 	bl	8000bf4 <_EPD_ReadBusy>

	_EPD_LUT_by_host(WS_20_30);
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <EPD_Init+0xac>)
 8000e42:	f7ff ff06 	bl	8000c52 <_EPD_LUT_by_host>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40010c00 	.word	0x40010c00
 8000e54:	40010800 	.word	0x40010800
 8000e58:	20000034 	.word	0x20000034

08000e5c <EPD_Clear>:

void EPD_Clear(EPD_HandleTypeDef *hepd) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	uint16_t i;
	_EPD_SendCommand(0x24);   //write RAM for black(0)/white (1)
 8000e64:	2024      	movs	r0, #36	; 0x24
 8000e66:	f7ff fe75 	bl	8000b54 <_EPD_SendCommand>
	for(i = 0; i < EPD_BYTES; i++) {
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	81fb      	strh	r3, [r7, #14]
 8000e6e:	e005      	b.n	8000e7c <EPD_Clear+0x20>
		_EPD_SendData(0xff);
 8000e70:	20ff      	movs	r0, #255	; 0xff
 8000e72:	f7ff fe97 	bl	8000ba4 <_EPD_SendData>
	for(i = 0; i < EPD_BYTES; i++) {
 8000e76:	89fb      	ldrh	r3, [r7, #14]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	81fb      	strh	r3, [r7, #14]
 8000e7c:	89fb      	ldrh	r3, [r7, #14]
 8000e7e:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8000e82:	d3f5      	bcc.n	8000e70 <EPD_Clear+0x14>
	}
	_EPD_TurnOnDisplay();
 8000e84:	f7ff ff20 	bl	8000cc8 <_EPD_TurnOnDisplay>
}
 8000e88:	bf00      	nop
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <EPD_Display>:

void EPD_Display(EPD_HandleTypeDef *hepd) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	uint16_t i;
	_EPD_SendCommand(0x24);   //write RAM for black(0)/white (1)
 8000e98:	2024      	movs	r0, #36	; 0x24
 8000e9a:	f7ff fe5b 	bl	8000b54 <_EPD_SendCommand>
	for(i=0; i<EPD_BYTES; i++) {
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	81fb      	strh	r3, [r7, #14]
 8000ea2:	e009      	b.n	8000eb8 <EPD_Display+0x28>
		_EPD_SendData(hepd->image[i]);
 8000ea4:	89fb      	ldrh	r3, [r7, #14]
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	789b      	ldrb	r3, [r3, #2]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fe79 	bl	8000ba4 <_EPD_SendData>
	for(i=0; i<EPD_BYTES; i++) {
 8000eb2:	89fb      	ldrh	r3, [r7, #14]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	81fb      	strh	r3, [r7, #14]
 8000eb8:	89fb      	ldrh	r3, [r7, #14]
 8000eba:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8000ebe:	d3f1      	bcc.n	8000ea4 <EPD_Display+0x14>
	}
	_EPD_TurnOnDisplay();
 8000ec0:	f7ff ff02 	bl	8000cc8 <_EPD_TurnOnDisplay>
}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <EPD_Sleep>:
		_EPD_SendData(hepd->image[i]);
	}
	_EPD_TurnOnDisplay_Partial();
}

void EPD_Sleep(EPD_HandleTypeDef *hepd) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	_EPD_SendCommand(0x10); //enter deep sleep
 8000ed4:	2010      	movs	r0, #16
 8000ed6:	f7ff fe3d 	bl	8000b54 <_EPD_SendCommand>
	_EPD_SendData(0x01);
 8000eda:	2001      	movs	r0, #1
 8000edc:	f7ff fe62 	bl	8000ba4 <_EPD_SendData>
	HAL_Delay(100);
 8000ee0:	2064      	movs	r0, #100	; 0x64
 8000ee2:	f000 fabd 	bl	8001460 <HAL_Delay>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <read_font_pixel>:
#define CANVAS_WIDTH 128
#define CANVAS_HEIGHT 296

uint8_t font[516] = { 0x0, 0x18, 0x3C, 0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x60, 0x60, 0x60, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x78, 0x6C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6C, 0x78, 0x0, 0x0, 0x0, 0x7E, 0x60, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x7E, 0x60, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0x60, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x60, 0x60, 0x6E, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x66, 0x66, 0x6C, 0x6C, 0x78, 0x6C, 0x6C, 0x66, 0x66, 0x0, 0x0, 0x0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x63, 0x63, 0x77, 0x7F, 0x6B, 0x6B, 0x63, 0x63, 0x63, 0x0, 0x0, 0x0, 0x63, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x63, 0x63, 0x63, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x60, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0xC, 0x6, 0x0, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0x66, 0x64, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x60, 0x30, 0x18, 0xC, 0x6, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x0, 0x0, 0x0, 0x63, 0x63, 0x63, 0x63, 0x6B, 0x6B, 0x36, 0x36, 0x36, 0x0, 0x0, 0x0, 0x66, 0x66, 0x34, 0x18, 0x18, 0x2C, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x0, 0x0, 0x0, 0x7E, 0x6, 0x6, 0xC, 0x18, 0x30, 0x60, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x6E, 0x6E, 0x66, 0x76, 0x76, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x6, 0xE, 0x3E, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x6, 0xC, 0x18, 0x30, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x6, 0x1C, 0x6, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x30, 0x30, 0x36, 0x36, 0x36, 0x66, 0x7F, 0x6, 0x6, 0x0, 0x0, 0x0, 0x7E, 0x60, 0x60, 0x60, 0x7C, 0x6, 0x6, 0xC, 0x78, 0x0, 0x0, 0x0, 0x1C, 0x38, 0x30, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x7E, 0x6, 0xC, 0xC, 0x18, 0x18, 0x30, 0x30, 0x30, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x76, 0x3C, 0x6E, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x3E, 0xC, 0x1C, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x38, 0x18, 0x30, 0x0, 0x0, 0x0, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7E, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0xC, 0x18, 0x30, 0x60, 0x30, 0x18, 0xC, 0x6, 0x0, 0x0, 0x0, 0x60, 0x30, 0x18, 0xC, 0x6, 0xC, 0x18, 0x30, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};

uint8_t read_font_pixel(uint8_t *image, uint16_t x, uint16_t y) {
 8000eee:	b480      	push	{r7}
 8000ef0:	b085      	sub	sp, #20
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	807b      	strh	r3, [r7, #2]
 8000efa:	4613      	mov	r3, r2
 8000efc:	803b      	strh	r3, [r7, #0]
	uint16_t i = (x +  y * FONT_WIDTH) / 8;
 8000efe:	887a      	ldrh	r2, [r7, #2]
 8000f00:	883b      	ldrh	r3, [r7, #0]
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	4413      	add	r3, r2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	da00      	bge.n	8000f0c <read_font_pixel+0x1e>
 8000f0a:	3307      	adds	r3, #7
 8000f0c:	10db      	asrs	r3, r3, #3
 8000f0e:	81fb      	strh	r3, [r7, #14]
	uint8_t pixel_group = image[i];
 8000f10:	89fb      	ldrh	r3, [r7, #14]
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	737b      	strb	r3, [r7, #13]
	return ((pixel_group >> (7 - x % 8)) & 0x01);
 8000f1a:	7b7a      	ldrb	r2, [r7, #13]
 8000f1c:	887b      	ldrh	r3, [r7, #2]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	fa42 f303 	asr.w	r3, r2, r3
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	b2db      	uxtb	r3, r3
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr

08000f3a <toggle_single_pixel>:

void toggle_single_pixel(uint8_t *image, uint16_t x, uint16_t y) {
 8000f3a:	b480      	push	{r7}
 8000f3c:	b085      	sub	sp, #20
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	460b      	mov	r3, r1
 8000f44:	807b      	strh	r3, [r7, #2]
 8000f46:	4613      	mov	r3, r2
 8000f48:	803b      	strh	r3, [r7, #0]
	uint16_t i = (x +  y * CANVAS_WIDTH) / 8;
 8000f4a:	887a      	ldrh	r2, [r7, #2]
 8000f4c:	883b      	ldrh	r3, [r7, #0]
 8000f4e:	01db      	lsls	r3, r3, #7
 8000f50:	4413      	add	r3, r2
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	da00      	bge.n	8000f58 <toggle_single_pixel+0x1e>
 8000f56:	3307      	adds	r3, #7
 8000f58:	10db      	asrs	r3, r3, #3
 8000f5a:	81fb      	strh	r3, [r7, #14]
	if (x < CANVAS_WIDTH && y < CANVAS_HEIGHT) image[i] ^= (0x01 << (7 - x % 8));
 8000f5c:	887b      	ldrh	r3, [r7, #2]
 8000f5e:	2b7f      	cmp	r3, #127	; 0x7f
 8000f60:	d817      	bhi.n	8000f92 <toggle_single_pixel+0x58>
 8000f62:	883b      	ldrh	r3, [r7, #0]
 8000f64:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 8000f68:	d213      	bcs.n	8000f92 <toggle_single_pixel+0x58>
 8000f6a:	89fb      	ldrh	r3, [r7, #14]
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	4413      	add	r3, r2
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	b25a      	sxtb	r2, r3
 8000f74:	887b      	ldrh	r3, [r7, #2]
 8000f76:	43db      	mvns	r3, r3
 8000f78:	f003 0307 	and.w	r3, r3, #7
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f82:	b25b      	sxtb	r3, r3
 8000f84:	4053      	eors	r3, r2
 8000f86:	b259      	sxtb	r1, r3
 8000f88:	89fb      	ldrh	r3, [r7, #14]
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	b2ca      	uxtb	r2, r1
 8000f90:	701a      	strb	r2, [r3, #0]
}
 8000f92:	bf00      	nop
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr

08000f9c <draw_rectangle>:
	for (uint16_t i = 0; i < CANVAS_WIDTH * CANVAS_HEIGHT / 8; i++) {
		image[i] = ~image[i];
	}
}

void draw_rectangle(uint8_t *image, uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	4608      	mov	r0, r1
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4603      	mov	r3, r0
 8000fac:	817b      	strh	r3, [r7, #10]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	813b      	strh	r3, [r7, #8]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i = 0; i < h; i++) {
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	82fb      	strh	r3, [r7, #22]
 8000fba:	e018      	b.n	8000fee <draw_rectangle+0x52>
		for (uint16_t j = 0; j < w; j++) {
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	82bb      	strh	r3, [r7, #20]
 8000fc0:	e00e      	b.n	8000fe0 <draw_rectangle+0x44>
			toggle_single_pixel(image, x + j, y + i);
 8000fc2:	897a      	ldrh	r2, [r7, #10]
 8000fc4:	8abb      	ldrh	r3, [r7, #20]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	b299      	uxth	r1, r3
 8000fca:	893a      	ldrh	r2, [r7, #8]
 8000fcc:	8afb      	ldrh	r3, [r7, #22]
 8000fce:	4413      	add	r3, r2
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	68f8      	ldr	r0, [r7, #12]
 8000fd6:	f7ff ffb0 	bl	8000f3a <toggle_single_pixel>
		for (uint16_t j = 0; j < w; j++) {
 8000fda:	8abb      	ldrh	r3, [r7, #20]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	82bb      	strh	r3, [r7, #20]
 8000fe0:	8aba      	ldrh	r2, [r7, #20]
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d3ec      	bcc.n	8000fc2 <draw_rectangle+0x26>
	for (uint16_t i = 0; i < h; i++) {
 8000fe8:	8afb      	ldrh	r3, [r7, #22]
 8000fea:	3301      	adds	r3, #1
 8000fec:	82fb      	strh	r3, [r7, #22]
 8000fee:	8afa      	ldrh	r2, [r7, #22]
 8000ff0:	8c3b      	ldrh	r3, [r7, #32]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d3e2      	bcc.n	8000fbc <draw_rectangle+0x20>
		}
	}
}
 8000ff6:	bf00      	nop
 8000ff8:	bf00      	nop
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <draw_char>:

void draw_char(uint8_t *image, uint16_t x, uint16_t y, uint16_t c) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	4608      	mov	r0, r1
 800100a:	4611      	mov	r1, r2
 800100c:	461a      	mov	r2, r3
 800100e:	4603      	mov	r3, r0
 8001010:	817b      	strh	r3, [r7, #10]
 8001012:	460b      	mov	r3, r1
 8001014:	813b      	strh	r3, [r7, #8]
 8001016:	4613      	mov	r3, r2
 8001018:	80fb      	strh	r3, [r7, #6]
	uint16_t font_offset = c * FONT_HEIGHT;
 800101a:	88fb      	ldrh	r3, [r7, #6]
 800101c:	461a      	mov	r2, r3
 800101e:	0052      	lsls	r2, r2, #1
 8001020:	4413      	add	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	827b      	strh	r3, [r7, #18]
	for (uint16_t i = 0; i < FONT_HEIGHT; i++) {
 8001026:	2300      	movs	r3, #0
 8001028:	82fb      	strh	r3, [r7, #22]
 800102a:	e023      	b.n	8001074 <draw_char+0x74>
		for (uint16_t j = 0; j < FONT_WIDTH; j++) {
 800102c:	2300      	movs	r3, #0
 800102e:	82bb      	strh	r3, [r7, #20]
 8001030:	e01a      	b.n	8001068 <draw_char+0x68>
			if (read_font_pixel(font, j, i + font_offset)) {
 8001032:	8afa      	ldrh	r2, [r7, #22]
 8001034:	8a7b      	ldrh	r3, [r7, #18]
 8001036:	4413      	add	r3, r2
 8001038:	b29a      	uxth	r2, r3
 800103a:	8abb      	ldrh	r3, [r7, #20]
 800103c:	4619      	mov	r1, r3
 800103e:	4811      	ldr	r0, [pc, #68]	; (8001084 <draw_char+0x84>)
 8001040:	f7ff ff55 	bl	8000eee <read_font_pixel>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d00b      	beq.n	8001062 <draw_char+0x62>
				toggle_single_pixel(image, x + j, y + i);
 800104a:	897a      	ldrh	r2, [r7, #10]
 800104c:	8abb      	ldrh	r3, [r7, #20]
 800104e:	4413      	add	r3, r2
 8001050:	b299      	uxth	r1, r3
 8001052:	893a      	ldrh	r2, [r7, #8]
 8001054:	8afb      	ldrh	r3, [r7, #22]
 8001056:	4413      	add	r3, r2
 8001058:	b29b      	uxth	r3, r3
 800105a:	461a      	mov	r2, r3
 800105c:	68f8      	ldr	r0, [r7, #12]
 800105e:	f7ff ff6c 	bl	8000f3a <toggle_single_pixel>
		for (uint16_t j = 0; j < FONT_WIDTH; j++) {
 8001062:	8abb      	ldrh	r3, [r7, #20]
 8001064:	3301      	adds	r3, #1
 8001066:	82bb      	strh	r3, [r7, #20]
 8001068:	8abb      	ldrh	r3, [r7, #20]
 800106a:	2b07      	cmp	r3, #7
 800106c:	d9e1      	bls.n	8001032 <draw_char+0x32>
	for (uint16_t i = 0; i < FONT_HEIGHT; i++) {
 800106e:	8afb      	ldrh	r3, [r7, #22]
 8001070:	3301      	adds	r3, #1
 8001072:	82fb      	strh	r3, [r7, #22]
 8001074:	8afb      	ldrh	r3, [r7, #22]
 8001076:	2b0b      	cmp	r3, #11
 8001078:	d9d8      	bls.n	800102c <draw_char+0x2c>
			}
		}
	}
}
 800107a:	bf00      	nop
 800107c:	bf00      	nop
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	200000d4 	.word	0x200000d4

08001088 <translate>:

uint16_t translate(char c) {
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
	if (c >= 'A' && c <= 'Z') {
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	2b40      	cmp	r3, #64	; 0x40
 8001096:	d907      	bls.n	80010a8 <translate+0x20>
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	2b5a      	cmp	r3, #90	; 0x5a
 800109c:	d804      	bhi.n	80010a8 <translate+0x20>
		return c - 'A';
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	3b41      	subs	r3, #65	; 0x41
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	e034      	b.n	8001112 <translate+0x8a>
	} else if (c >= 'a' && c <= 'z') {
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	2b60      	cmp	r3, #96	; 0x60
 80010ac:	d907      	bls.n	80010be <translate+0x36>
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	2b7a      	cmp	r3, #122	; 0x7a
 80010b2:	d804      	bhi.n	80010be <translate+0x36>
		return c - 'a';
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	3b61      	subs	r3, #97	; 0x61
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	e029      	b.n	8001112 <translate+0x8a>
	} else if (c >= '0' && c <= '9') {
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b2f      	cmp	r3, #47	; 0x2f
 80010c2:	d907      	bls.n	80010d4 <translate+0x4c>
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	2b39      	cmp	r3, #57	; 0x39
 80010c8:	d804      	bhi.n	80010d4 <translate+0x4c>
		return c - '0' + 26;
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	3b16      	subs	r3, #22
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	e01e      	b.n	8001112 <translate+0x8a>
	} else if (c == '.') {
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	2b2e      	cmp	r3, #46	; 0x2e
 80010d8:	d101      	bne.n	80010de <translate+0x56>
		return 36;
 80010da:	2324      	movs	r3, #36	; 0x24
 80010dc:	e019      	b.n	8001112 <translate+0x8a>
	} else if (c == ',') {
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b2c      	cmp	r3, #44	; 0x2c
 80010e2:	d101      	bne.n	80010e8 <translate+0x60>
		return 37;
 80010e4:	2325      	movs	r3, #37	; 0x25
 80010e6:	e014      	b.n	8001112 <translate+0x8a>
	} else if (c == '+') {
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	2b2b      	cmp	r3, #43	; 0x2b
 80010ec:	d101      	bne.n	80010f2 <translate+0x6a>
		return 38;
 80010ee:	2326      	movs	r3, #38	; 0x26
 80010f0:	e00f      	b.n	8001112 <translate+0x8a>
	} else if (c == '-') {
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	2b2d      	cmp	r3, #45	; 0x2d
 80010f6:	d101      	bne.n	80010fc <translate+0x74>
		return 39;
 80010f8:	2327      	movs	r3, #39	; 0x27
 80010fa:	e00a      	b.n	8001112 <translate+0x8a>
	} else if (c == '<') {
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	2b3c      	cmp	r3, #60	; 0x3c
 8001100:	d101      	bne.n	8001106 <translate+0x7e>
		return 40;
 8001102:	2328      	movs	r3, #40	; 0x28
 8001104:	e005      	b.n	8001112 <translate+0x8a>
	} else if (c == '>') {
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	2b3e      	cmp	r3, #62	; 0x3e
 800110a:	d101      	bne.n	8001110 <translate+0x88>
		return 41;
 800110c:	2329      	movs	r3, #41	; 0x29
 800110e:	e000      	b.n	8001112 <translate+0x8a>
	} else {
		return 42; // ' '
 8001110:	232a      	movs	r3, #42	; 0x2a
	}
}
 8001112:	4618      	mov	r0, r3
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr

0800111c <draw_text>:

void draw_text(uint8_t *image, char *text, uint16_t x, uint16_t y) {
 800111c:	b590      	push	{r4, r7, lr}
 800111e:	b087      	sub	sp, #28
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	4611      	mov	r1, r2
 8001128:	461a      	mov	r2, r3
 800112a:	460b      	mov	r3, r1
 800112c:	80fb      	strh	r3, [r7, #6]
 800112e:	4613      	mov	r3, r2
 8001130:	80bb      	strh	r3, [r7, #4]
	uint16_t i = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	82fb      	strh	r3, [r7, #22]
	while(text[i] > 0) {
 8001136:	e015      	b.n	8001164 <draw_text+0x48>
		draw_char(image, x + FONT_WIDTH * i, y, translate(text[i]));
 8001138:	8afb      	ldrh	r3, [r7, #22]
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	b29a      	uxth	r2, r3
 800113e:	88fb      	ldrh	r3, [r7, #6]
 8001140:	4413      	add	r3, r2
 8001142:	b29c      	uxth	r4, r3
 8001144:	8afb      	ldrh	r3, [r7, #22]
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	4413      	add	r3, r2
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff9b 	bl	8001088 <translate>
 8001152:	4603      	mov	r3, r0
 8001154:	88ba      	ldrh	r2, [r7, #4]
 8001156:	4621      	mov	r1, r4
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f7ff ff51 	bl	8001000 <draw_char>
		i++;
 800115e:	8afb      	ldrh	r3, [r7, #22]
 8001160:	3301      	adds	r3, #1
 8001162:	82fb      	strh	r3, [r7, #22]
	while(text[i] > 0) {
 8001164:	8afb      	ldrh	r3, [r7, #22]
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	4413      	add	r3, r2
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1e3      	bne.n	8001138 <draw_text+0x1c>
	}
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	371c      	adds	r7, #28
 8001176:	46bd      	mov	sp, r7
 8001178:	bd90      	pop	{r4, r7, pc}

0800117a <draw_clean>:

void draw_clean(uint8_t *image) {
 800117a:	b480      	push	{r7}
 800117c:	b085      	sub	sp, #20
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
	uint16_t bytes = CANVAS_WIDTH * CANVAS_HEIGHT / 8;
 8001182:	f44f 5394 	mov.w	r3, #4736	; 0x1280
 8001186:	81bb      	strh	r3, [r7, #12]
	for (uint16_t i = 0; i < bytes; i++) image[i] = 0xFF;
 8001188:	2300      	movs	r3, #0
 800118a:	81fb      	strh	r3, [r7, #14]
 800118c:	e007      	b.n	800119e <draw_clean+0x24>
 800118e:	89fb      	ldrh	r3, [r7, #14]
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	4413      	add	r3, r2
 8001194:	22ff      	movs	r2, #255	; 0xff
 8001196:	701a      	strb	r2, [r3, #0]
 8001198:	89fb      	ldrh	r3, [r7, #14]
 800119a:	3301      	adds	r3, #1
 800119c:	81fb      	strh	r3, [r7, #14]
 800119e:	89fa      	ldrh	r2, [r7, #14]
 80011a0:	89bb      	ldrh	r3, [r7, #12]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d3f3      	bcc.n	800118e <draw_clean+0x14>
}
 80011a6:	bf00      	nop
 80011a8:	bf00      	nop
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr

080011b2 <RE_Init>:
 *      Author: asky
 */

#include "rencoder.h"

void RE_Init(RE_HandleTypeDef *hre, GPIO_TypeDef *portA, GPIO_TypeDef *portB, uint16_t pinA, uint16_t pinB) {
 80011b2:	b480      	push	{r7}
 80011b4:	b085      	sub	sp, #20
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	60f8      	str	r0, [r7, #12]
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
 80011be:	807b      	strh	r3, [r7, #2]
	hre->lasttick = 0;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
	hre->lastA = 0;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2200      	movs	r2, #0
 80011ca:	809a      	strh	r2, [r3, #4]
	hre->lastB = 0;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2200      	movs	r2, #0
 80011d0:	80da      	strh	r2, [r3, #6]
	hre->currentA = 0;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2200      	movs	r2, #0
 80011d6:	811a      	strh	r2, [r3, #8]
	hre->currentB = 0;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2200      	movs	r2, #0
 80011dc:	815a      	strh	r2, [r3, #10]
	hre->counter = 0;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2200      	movs	r2, #0
 80011e2:	831a      	strh	r2, [r3, #24]
	hre->portA = portA;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	60da      	str	r2, [r3, #12]
	hre->portB = portB;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	611a      	str	r2, [r3, #16]
	hre->pinA = pinA;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	887a      	ldrh	r2, [r7, #2]
 80011f4:	829a      	strh	r2, [r3, #20]
	hre->pinB = pinB;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	8b3a      	ldrh	r2, [r7, #24]
 80011fa:	82da      	strh	r2, [r3, #22]
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
	...

08001208 <RE_Process>:

uint8_t RE_Process(RE_HandleTypeDef *hre) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() != hre->lasttick) {
 8001210:	f000 f91c 	bl	800144c <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	429a      	cmp	r2, r3
 800121c:	f000 80b7 	beq.w	800138e <RE_Process+0x186>
		hre->lasttick = HAL_GetTick();
 8001220:	f000 f914 	bl	800144c <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	601a      	str	r2, [r3, #0]
		hre->lastA = hre->currentA;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	891a      	ldrh	r2, [r3, #8]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	809a      	strh	r2, [r3, #4]
		hre->lastB = hre->currentB;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	895a      	ldrh	r2, [r3, #10]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	80da      	strh	r2, [r3, #6]

		uint16_t temp;
		uint16_t alpha = 75; //%
 800123a:	234b      	movs	r3, #75	; 0x4b
 800123c:	81fb      	strh	r3, [r7, #14]
		uint16_t ceil = 10000, thr = 5000;
 800123e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001242:	81bb      	strh	r3, [r7, #12]
 8001244:	f241 3388 	movw	r3, #5000	; 0x1388
 8001248:	817b      	strh	r3, [r7, #10]

		temp = HAL_GPIO_ReadPin(hre->portA, hre->pinA) == GPIO_PIN_SET ? ceil : 0;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68da      	ldr	r2, [r3, #12]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	8a9b      	ldrh	r3, [r3, #20]
 8001252:	4619      	mov	r1, r3
 8001254:	4610      	mov	r0, r2
 8001256:	f000 fda7 	bl	8001da8 <HAL_GPIO_ReadPin>
 800125a:	4603      	mov	r3, r0
 800125c:	2b01      	cmp	r3, #1
 800125e:	d101      	bne.n	8001264 <RE_Process+0x5c>
 8001260:	89bb      	ldrh	r3, [r7, #12]
 8001262:	e000      	b.n	8001266 <RE_Process+0x5e>
 8001264:	2300      	movs	r3, #0
 8001266:	813b      	strh	r3, [r7, #8]
		hre->currentA = (hre->lastA * alpha / 100) + (temp * (100 - alpha) / 100);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	889b      	ldrh	r3, [r3, #4]
 800126c:	461a      	mov	r2, r3
 800126e:	89fb      	ldrh	r3, [r7, #14]
 8001270:	fb02 f303 	mul.w	r3, r2, r3
 8001274:	4a48      	ldr	r2, [pc, #288]	; (8001398 <RE_Process+0x190>)
 8001276:	fb82 1203 	smull	r1, r2, r2, r3
 800127a:	1152      	asrs	r2, r2, #5
 800127c:	17db      	asrs	r3, r3, #31
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	b29a      	uxth	r2, r3
 8001282:	893b      	ldrh	r3, [r7, #8]
 8001284:	89f9      	ldrh	r1, [r7, #14]
 8001286:	f1c1 0164 	rsb	r1, r1, #100	; 0x64
 800128a:	fb01 f303 	mul.w	r3, r1, r3
 800128e:	4942      	ldr	r1, [pc, #264]	; (8001398 <RE_Process+0x190>)
 8001290:	fb81 0103 	smull	r0, r1, r1, r3
 8001294:	1149      	asrs	r1, r1, #5
 8001296:	17db      	asrs	r3, r3, #31
 8001298:	1acb      	subs	r3, r1, r3
 800129a:	b29b      	uxth	r3, r3
 800129c:	4413      	add	r3, r2
 800129e:	b29a      	uxth	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	811a      	strh	r2, [r3, #8]

		temp = HAL_GPIO_ReadPin(hre->portB, hre->pinB) == GPIO_PIN_SET ? ceil : 0;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	691a      	ldr	r2, [r3, #16]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	8adb      	ldrh	r3, [r3, #22]
 80012ac:	4619      	mov	r1, r3
 80012ae:	4610      	mov	r0, r2
 80012b0:	f000 fd7a 	bl	8001da8 <HAL_GPIO_ReadPin>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d101      	bne.n	80012be <RE_Process+0xb6>
 80012ba:	89bb      	ldrh	r3, [r7, #12]
 80012bc:	e000      	b.n	80012c0 <RE_Process+0xb8>
 80012be:	2300      	movs	r3, #0
 80012c0:	813b      	strh	r3, [r7, #8]
		hre->currentB = (hre->lastB * alpha / 100) + (temp * (100 - alpha) / 100);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	88db      	ldrh	r3, [r3, #6]
 80012c6:	461a      	mov	r2, r3
 80012c8:	89fb      	ldrh	r3, [r7, #14]
 80012ca:	fb02 f303 	mul.w	r3, r2, r3
 80012ce:	4a32      	ldr	r2, [pc, #200]	; (8001398 <RE_Process+0x190>)
 80012d0:	fb82 1203 	smull	r1, r2, r2, r3
 80012d4:	1152      	asrs	r2, r2, #5
 80012d6:	17db      	asrs	r3, r3, #31
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	b29a      	uxth	r2, r3
 80012dc:	893b      	ldrh	r3, [r7, #8]
 80012de:	89f9      	ldrh	r1, [r7, #14]
 80012e0:	f1c1 0164 	rsb	r1, r1, #100	; 0x64
 80012e4:	fb01 f303 	mul.w	r3, r1, r3
 80012e8:	492b      	ldr	r1, [pc, #172]	; (8001398 <RE_Process+0x190>)
 80012ea:	fb81 0103 	smull	r0, r1, r1, r3
 80012ee:	1149      	asrs	r1, r1, #5
 80012f0:	17db      	asrs	r3, r3, #31
 80012f2:	1acb      	subs	r3, r1, r3
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	4413      	add	r3, r2
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	815a      	strh	r2, [r3, #10]

		if (hre->lastA < thr && hre->currentA >= thr) {
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	889b      	ldrh	r3, [r3, #4]
 8001302:	897a      	ldrh	r2, [r7, #10]
 8001304:	429a      	cmp	r2, r3
 8001306:	d91e      	bls.n	8001346 <RE_Process+0x13e>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	891b      	ldrh	r3, [r3, #8]
 800130c:	897a      	ldrh	r2, [r7, #10]
 800130e:	429a      	cmp	r2, r3
 8001310:	d819      	bhi.n	8001346 <RE_Process+0x13e>

			if (hre->currentB > thr) {
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	895b      	ldrh	r3, [r3, #10]
 8001316:	897a      	ldrh	r2, [r7, #10]
 8001318:	429a      	cmp	r2, r3
 800131a:	d209      	bcs.n	8001330 <RE_Process+0x128>
				hre->counter--;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001322:	b29b      	uxth	r3, r3
 8001324:	3b01      	subs	r3, #1
 8001326:	b29b      	uxth	r3, r3
 8001328:	b21a      	sxth	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	831a      	strh	r2, [r3, #24]
 800132e:	e008      	b.n	8001342 <RE_Process+0x13a>
			} else {
				hre->counter++;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001336:	b29b      	uxth	r3, r3
 8001338:	3301      	adds	r3, #1
 800133a:	b29b      	uxth	r3, r3
 800133c:	b21a      	sxth	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	831a      	strh	r2, [r3, #24]
			}
			return 1;
 8001342:	2301      	movs	r3, #1
 8001344:	e024      	b.n	8001390 <RE_Process+0x188>

		} else if (hre->lastA > thr && hre->currentA <= thr) {
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	889b      	ldrh	r3, [r3, #4]
 800134a:	897a      	ldrh	r2, [r7, #10]
 800134c:	429a      	cmp	r2, r3
 800134e:	d21e      	bcs.n	800138e <RE_Process+0x186>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	891b      	ldrh	r3, [r3, #8]
 8001354:	897a      	ldrh	r2, [r7, #10]
 8001356:	429a      	cmp	r2, r3
 8001358:	d319      	bcc.n	800138e <RE_Process+0x186>

			if (hre->currentB > thr) {
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	895b      	ldrh	r3, [r3, #10]
 800135e:	897a      	ldrh	r2, [r7, #10]
 8001360:	429a      	cmp	r2, r3
 8001362:	d209      	bcs.n	8001378 <RE_Process+0x170>
				hre->counter++;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800136a:	b29b      	uxth	r3, r3
 800136c:	3301      	adds	r3, #1
 800136e:	b29b      	uxth	r3, r3
 8001370:	b21a      	sxth	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	831a      	strh	r2, [r3, #24]
 8001376:	e008      	b.n	800138a <RE_Process+0x182>
			} else {
				hre->counter--;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800137e:	b29b      	uxth	r3, r3
 8001380:	3b01      	subs	r3, #1
 8001382:	b29b      	uxth	r3, r3
 8001384:	b21a      	sxth	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	831a      	strh	r2, [r3, #24]
			}
			return 1;
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <RE_Process+0x188>

		}
	}
	return 0;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	51eb851f 	.word	0x51eb851f

0800139c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <HAL_Init+0x28>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <HAL_Init+0x28>)
 80013a6:	f043 0310 	orr.w	r3, r3, #16
 80013aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ac:	2003      	movs	r0, #3
 80013ae:	f000 f947 	bl	8001640 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b2:	200f      	movs	r0, #15
 80013b4:	f000 f808 	bl	80013c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b8:	f7ff f93c 	bl	8000634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40022000 	.word	0x40022000

080013c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_InitTick+0x54>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_InitTick+0x58>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4619      	mov	r1, r3
 80013da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013de:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 f95f 	bl	80016aa <HAL_SYSTICK_Config>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00e      	b.n	8001414 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b0f      	cmp	r3, #15
 80013fa:	d80a      	bhi.n	8001412 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013fc:	2200      	movs	r2, #0
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001404:	f000 f927 	bl	8001656 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001408:	4a06      	ldr	r2, [pc, #24]	; (8001424 <HAL_InitTick+0x5c>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	e000      	b.n	8001414 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000030 	.word	0x20000030
 8001420:	200002dc 	.word	0x200002dc
 8001424:	200002d8 	.word	0x200002d8

08001428 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <HAL_IncTick+0x1c>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b05      	ldr	r3, [pc, #20]	; (8001448 <HAL_IncTick+0x20>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4413      	add	r3, r2
 8001438:	4a03      	ldr	r2, [pc, #12]	; (8001448 <HAL_IncTick+0x20>)
 800143a:	6013      	str	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr
 8001444:	200002dc 	.word	0x200002dc
 8001448:	20002058 	.word	0x20002058

0800144c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return uwTick;
 8001450:	4b02      	ldr	r3, [pc, #8]	; (800145c <HAL_GetTick+0x10>)
 8001452:	681b      	ldr	r3, [r3, #0]
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	20002058 	.word	0x20002058

08001460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001468:	f7ff fff0 	bl	800144c <HAL_GetTick>
 800146c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001478:	d005      	beq.n	8001486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HAL_Delay+0x44>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	461a      	mov	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4413      	add	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001486:	bf00      	nop
 8001488:	f7ff ffe0 	bl	800144c <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	429a      	cmp	r2, r3
 8001496:	d8f7      	bhi.n	8001488 <HAL_Delay+0x28>
  {
  }
}
 8001498:	bf00      	nop
 800149a:	bf00      	nop
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200002dc 	.word	0x200002dc

080014a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c4:	4013      	ands	r3, r2
 80014c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014da:	4a04      	ldr	r2, [pc, #16]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	60d3      	str	r3, [r2, #12]
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <__NVIC_GetPriorityGrouping+0x18>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	0a1b      	lsrs	r3, r3, #8
 80014fa:	f003 0307 	and.w	r3, r3, #7
}
 80014fe:	4618      	mov	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	2b00      	cmp	r3, #0
 800151c:	db0b      	blt.n	8001536 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	f003 021f 	and.w	r2, r3, #31
 8001524:	4906      	ldr	r1, [pc, #24]	; (8001540 <__NVIC_EnableIRQ+0x34>)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	095b      	lsrs	r3, r3, #5
 800152c:	2001      	movs	r0, #1
 800152e:	fa00 f202 	lsl.w	r2, r0, r2
 8001532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	e000e100 	.word	0xe000e100

08001544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001554:	2b00      	cmp	r3, #0
 8001556:	db0a      	blt.n	800156e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	b2da      	uxtb	r2, r3
 800155c:	490c      	ldr	r1, [pc, #48]	; (8001590 <__NVIC_SetPriority+0x4c>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	0112      	lsls	r2, r2, #4
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	440b      	add	r3, r1
 8001568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800156c:	e00a      	b.n	8001584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4908      	ldr	r1, [pc, #32]	; (8001594 <__NVIC_SetPriority+0x50>)
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	3b04      	subs	r3, #4
 800157c:	0112      	lsls	r2, r2, #4
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	440b      	add	r3, r1
 8001582:	761a      	strb	r2, [r3, #24]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000e100 	.word	0xe000e100
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001598:	b480      	push	{r7}
 800159a:	b089      	sub	sp, #36	; 0x24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f1c3 0307 	rsb	r3, r3, #7
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	bf28      	it	cs
 80015b6:	2304      	movcs	r3, #4
 80015b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3304      	adds	r3, #4
 80015be:	2b06      	cmp	r3, #6
 80015c0:	d902      	bls.n	80015c8 <NVIC_EncodePriority+0x30>
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3b03      	subs	r3, #3
 80015c6:	e000      	b.n	80015ca <NVIC_EncodePriority+0x32>
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43da      	mvns	r2, r3
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	401a      	ands	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ea:	43d9      	mvns	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	4313      	orrs	r3, r2
         );
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3724      	adds	r7, #36	; 0x24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3b01      	subs	r3, #1
 8001608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800160c:	d301      	bcc.n	8001612 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800160e:	2301      	movs	r3, #1
 8001610:	e00f      	b.n	8001632 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <SysTick_Config+0x40>)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3b01      	subs	r3, #1
 8001618:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800161a:	210f      	movs	r1, #15
 800161c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001620:	f7ff ff90 	bl	8001544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <SysTick_Config+0x40>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800162a:	4b04      	ldr	r3, [pc, #16]	; (800163c <SysTick_Config+0x40>)
 800162c:	2207      	movs	r2, #7
 800162e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	e000e010 	.word	0xe000e010

08001640 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ff2d 	bl	80014a8 <__NVIC_SetPriorityGrouping>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001656:	b580      	push	{r7, lr}
 8001658:	b086      	sub	sp, #24
 800165a:	af00      	add	r7, sp, #0
 800165c:	4603      	mov	r3, r0
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
 8001662:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001668:	f7ff ff42 	bl	80014f0 <__NVIC_GetPriorityGrouping>
 800166c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	6978      	ldr	r0, [r7, #20]
 8001674:	f7ff ff90 	bl	8001598 <NVIC_EncodePriority>
 8001678:	4602      	mov	r2, r0
 800167a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167e:	4611      	mov	r1, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff5f 	bl	8001544 <__NVIC_SetPriority>
}
 8001686:	bf00      	nop
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff35 	bl	800150c <__NVIC_EnableIRQ>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff ffa2 	bl	80015fc <SysTick_Config>
 80016b8:	4603      	mov	r3, r0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d101      	bne.n	80016da <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e043      	b.n	8001762 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	461a      	mov	r2, r3
 80016e0:	4b22      	ldr	r3, [pc, #136]	; (800176c <HAL_DMA_Init+0xa8>)
 80016e2:	4413      	add	r3, r2
 80016e4:	4a22      	ldr	r2, [pc, #136]	; (8001770 <HAL_DMA_Init+0xac>)
 80016e6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ea:	091b      	lsrs	r3, r3, #4
 80016ec:	009a      	lsls	r2, r3, #2
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a1f      	ldr	r2, [pc, #124]	; (8001774 <HAL_DMA_Init+0xb0>)
 80016f6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2202      	movs	r2, #2
 80016fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800170e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001712:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800171c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001728:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001734:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	4313      	orrs	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	bffdfff8 	.word	0xbffdfff8
 8001770:	cccccccd 	.word	0xcccccccd
 8001774:	40020000 	.word	0x40020000

08001778 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001786:	2300      	movs	r3, #0
 8001788:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d101      	bne.n	8001798 <HAL_DMA_Start_IT+0x20>
 8001794:	2302      	movs	r3, #2
 8001796:	e04a      	b.n	800182e <HAL_DMA_Start_IT+0xb6>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d13a      	bne.n	8001820 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2202      	movs	r2, #2
 80017ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 0201 	bic.w	r2, r2, #1
 80017c6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f000 f938 	bl	8001a44 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d008      	beq.n	80017ee <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 020e 	orr.w	r2, r2, #14
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	e00f      	b.n	800180e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 0204 	bic.w	r2, r2, #4
 80017fc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f042 020a 	orr.w	r2, r2, #10
 800180c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f042 0201 	orr.w	r2, r2, #1
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	e005      	b.n	800182c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001828:	2302      	movs	r3, #2
 800182a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800182c:	7dfb      	ldrb	r3, [r7, #23]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001854:	2204      	movs	r2, #4
 8001856:	409a      	lsls	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4013      	ands	r3, r2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d04f      	beq.n	8001900 <HAL_DMA_IRQHandler+0xc8>
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	2b00      	cmp	r3, #0
 8001868:	d04a      	beq.n	8001900 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0320 	and.w	r3, r3, #32
 8001874:	2b00      	cmp	r3, #0
 8001876:	d107      	bne.n	8001888 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 0204 	bic.w	r2, r2, #4
 8001886:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a66      	ldr	r2, [pc, #408]	; (8001a28 <HAL_DMA_IRQHandler+0x1f0>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d029      	beq.n	80018e6 <HAL_DMA_IRQHandler+0xae>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a65      	ldr	r2, [pc, #404]	; (8001a2c <HAL_DMA_IRQHandler+0x1f4>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d022      	beq.n	80018e2 <HAL_DMA_IRQHandler+0xaa>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a63      	ldr	r2, [pc, #396]	; (8001a30 <HAL_DMA_IRQHandler+0x1f8>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d01a      	beq.n	80018dc <HAL_DMA_IRQHandler+0xa4>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a62      	ldr	r2, [pc, #392]	; (8001a34 <HAL_DMA_IRQHandler+0x1fc>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d012      	beq.n	80018d6 <HAL_DMA_IRQHandler+0x9e>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a60      	ldr	r2, [pc, #384]	; (8001a38 <HAL_DMA_IRQHandler+0x200>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d00a      	beq.n	80018d0 <HAL_DMA_IRQHandler+0x98>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a5f      	ldr	r2, [pc, #380]	; (8001a3c <HAL_DMA_IRQHandler+0x204>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d102      	bne.n	80018ca <HAL_DMA_IRQHandler+0x92>
 80018c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018c8:	e00e      	b.n	80018e8 <HAL_DMA_IRQHandler+0xb0>
 80018ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80018ce:	e00b      	b.n	80018e8 <HAL_DMA_IRQHandler+0xb0>
 80018d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80018d4:	e008      	b.n	80018e8 <HAL_DMA_IRQHandler+0xb0>
 80018d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018da:	e005      	b.n	80018e8 <HAL_DMA_IRQHandler+0xb0>
 80018dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018e0:	e002      	b.n	80018e8 <HAL_DMA_IRQHandler+0xb0>
 80018e2:	2340      	movs	r3, #64	; 0x40
 80018e4:	e000      	b.n	80018e8 <HAL_DMA_IRQHandler+0xb0>
 80018e6:	2304      	movs	r3, #4
 80018e8:	4a55      	ldr	r2, [pc, #340]	; (8001a40 <HAL_DMA_IRQHandler+0x208>)
 80018ea:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 8094 	beq.w	8001a1e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80018fe:	e08e      	b.n	8001a1e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	2202      	movs	r2, #2
 8001906:	409a      	lsls	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4013      	ands	r3, r2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d056      	beq.n	80019be <HAL_DMA_IRQHandler+0x186>
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d051      	beq.n	80019be <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0320 	and.w	r3, r3, #32
 8001924:	2b00      	cmp	r3, #0
 8001926:	d10b      	bne.n	8001940 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 020a 	bic.w	r2, r2, #10
 8001936:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a38      	ldr	r2, [pc, #224]	; (8001a28 <HAL_DMA_IRQHandler+0x1f0>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d029      	beq.n	800199e <HAL_DMA_IRQHandler+0x166>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a37      	ldr	r2, [pc, #220]	; (8001a2c <HAL_DMA_IRQHandler+0x1f4>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d022      	beq.n	800199a <HAL_DMA_IRQHandler+0x162>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a35      	ldr	r2, [pc, #212]	; (8001a30 <HAL_DMA_IRQHandler+0x1f8>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d01a      	beq.n	8001994 <HAL_DMA_IRQHandler+0x15c>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a34      	ldr	r2, [pc, #208]	; (8001a34 <HAL_DMA_IRQHandler+0x1fc>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d012      	beq.n	800198e <HAL_DMA_IRQHandler+0x156>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a32      	ldr	r2, [pc, #200]	; (8001a38 <HAL_DMA_IRQHandler+0x200>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d00a      	beq.n	8001988 <HAL_DMA_IRQHandler+0x150>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a31      	ldr	r2, [pc, #196]	; (8001a3c <HAL_DMA_IRQHandler+0x204>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d102      	bne.n	8001982 <HAL_DMA_IRQHandler+0x14a>
 800197c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001980:	e00e      	b.n	80019a0 <HAL_DMA_IRQHandler+0x168>
 8001982:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001986:	e00b      	b.n	80019a0 <HAL_DMA_IRQHandler+0x168>
 8001988:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800198c:	e008      	b.n	80019a0 <HAL_DMA_IRQHandler+0x168>
 800198e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001992:	e005      	b.n	80019a0 <HAL_DMA_IRQHandler+0x168>
 8001994:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001998:	e002      	b.n	80019a0 <HAL_DMA_IRQHandler+0x168>
 800199a:	2320      	movs	r3, #32
 800199c:	e000      	b.n	80019a0 <HAL_DMA_IRQHandler+0x168>
 800199e:	2302      	movs	r3, #2
 80019a0:	4a27      	ldr	r2, [pc, #156]	; (8001a40 <HAL_DMA_IRQHandler+0x208>)
 80019a2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d034      	beq.n	8001a1e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80019bc:	e02f      	b.n	8001a1e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	2208      	movs	r2, #8
 80019c4:	409a      	lsls	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4013      	ands	r3, r2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d028      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x1e8>
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	f003 0308 	and.w	r3, r3, #8
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d023      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 020e 	bic.w	r2, r2, #14
 80019e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f0:	2101      	movs	r1, #1
 80019f2:	fa01 f202 	lsl.w	r2, r1, r2
 80019f6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d004      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	4798      	blx	r3
    }
  }
  return;
 8001a1e:	bf00      	nop
 8001a20:	bf00      	nop
}
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40020008 	.word	0x40020008
 8001a2c:	4002001c 	.word	0x4002001c
 8001a30:	40020030 	.word	0x40020030
 8001a34:	40020044 	.word	0x40020044
 8001a38:	40020058 	.word	0x40020058
 8001a3c:	4002006c 	.word	0x4002006c
 8001a40:	40020000 	.word	0x40020000

08001a44 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
 8001a50:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a60:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b10      	cmp	r3, #16
 8001a70:	d108      	bne.n	8001a84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a82:	e007      	b.n	8001a94 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68ba      	ldr	r2, [r7, #8]
 8001a8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	60da      	str	r2, [r3, #12]
}
 8001a94:	bf00      	nop
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr
	...

08001aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b08b      	sub	sp, #44	; 0x2c
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab2:	e169      	b.n	8001d88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	69fa      	ldr	r2, [r7, #28]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	f040 8158 	bne.w	8001d82 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	4a9a      	ldr	r2, [pc, #616]	; (8001d40 <HAL_GPIO_Init+0x2a0>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d05e      	beq.n	8001b9a <HAL_GPIO_Init+0xfa>
 8001adc:	4a98      	ldr	r2, [pc, #608]	; (8001d40 <HAL_GPIO_Init+0x2a0>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d875      	bhi.n	8001bce <HAL_GPIO_Init+0x12e>
 8001ae2:	4a98      	ldr	r2, [pc, #608]	; (8001d44 <HAL_GPIO_Init+0x2a4>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d058      	beq.n	8001b9a <HAL_GPIO_Init+0xfa>
 8001ae8:	4a96      	ldr	r2, [pc, #600]	; (8001d44 <HAL_GPIO_Init+0x2a4>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d86f      	bhi.n	8001bce <HAL_GPIO_Init+0x12e>
 8001aee:	4a96      	ldr	r2, [pc, #600]	; (8001d48 <HAL_GPIO_Init+0x2a8>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d052      	beq.n	8001b9a <HAL_GPIO_Init+0xfa>
 8001af4:	4a94      	ldr	r2, [pc, #592]	; (8001d48 <HAL_GPIO_Init+0x2a8>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d869      	bhi.n	8001bce <HAL_GPIO_Init+0x12e>
 8001afa:	4a94      	ldr	r2, [pc, #592]	; (8001d4c <HAL_GPIO_Init+0x2ac>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d04c      	beq.n	8001b9a <HAL_GPIO_Init+0xfa>
 8001b00:	4a92      	ldr	r2, [pc, #584]	; (8001d4c <HAL_GPIO_Init+0x2ac>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d863      	bhi.n	8001bce <HAL_GPIO_Init+0x12e>
 8001b06:	4a92      	ldr	r2, [pc, #584]	; (8001d50 <HAL_GPIO_Init+0x2b0>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d046      	beq.n	8001b9a <HAL_GPIO_Init+0xfa>
 8001b0c:	4a90      	ldr	r2, [pc, #576]	; (8001d50 <HAL_GPIO_Init+0x2b0>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d85d      	bhi.n	8001bce <HAL_GPIO_Init+0x12e>
 8001b12:	2b12      	cmp	r3, #18
 8001b14:	d82a      	bhi.n	8001b6c <HAL_GPIO_Init+0xcc>
 8001b16:	2b12      	cmp	r3, #18
 8001b18:	d859      	bhi.n	8001bce <HAL_GPIO_Init+0x12e>
 8001b1a:	a201      	add	r2, pc, #4	; (adr r2, 8001b20 <HAL_GPIO_Init+0x80>)
 8001b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b20:	08001b9b 	.word	0x08001b9b
 8001b24:	08001b75 	.word	0x08001b75
 8001b28:	08001b87 	.word	0x08001b87
 8001b2c:	08001bc9 	.word	0x08001bc9
 8001b30:	08001bcf 	.word	0x08001bcf
 8001b34:	08001bcf 	.word	0x08001bcf
 8001b38:	08001bcf 	.word	0x08001bcf
 8001b3c:	08001bcf 	.word	0x08001bcf
 8001b40:	08001bcf 	.word	0x08001bcf
 8001b44:	08001bcf 	.word	0x08001bcf
 8001b48:	08001bcf 	.word	0x08001bcf
 8001b4c:	08001bcf 	.word	0x08001bcf
 8001b50:	08001bcf 	.word	0x08001bcf
 8001b54:	08001bcf 	.word	0x08001bcf
 8001b58:	08001bcf 	.word	0x08001bcf
 8001b5c:	08001bcf 	.word	0x08001bcf
 8001b60:	08001bcf 	.word	0x08001bcf
 8001b64:	08001b7d 	.word	0x08001b7d
 8001b68:	08001b91 	.word	0x08001b91
 8001b6c:	4a79      	ldr	r2, [pc, #484]	; (8001d54 <HAL_GPIO_Init+0x2b4>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d013      	beq.n	8001b9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b72:	e02c      	b.n	8001bce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	623b      	str	r3, [r7, #32]
          break;
 8001b7a:	e029      	b.n	8001bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	3304      	adds	r3, #4
 8001b82:	623b      	str	r3, [r7, #32]
          break;
 8001b84:	e024      	b.n	8001bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	3308      	adds	r3, #8
 8001b8c:	623b      	str	r3, [r7, #32]
          break;
 8001b8e:	e01f      	b.n	8001bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	330c      	adds	r3, #12
 8001b96:	623b      	str	r3, [r7, #32]
          break;
 8001b98:	e01a      	b.n	8001bd0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d102      	bne.n	8001ba8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ba2:	2304      	movs	r3, #4
 8001ba4:	623b      	str	r3, [r7, #32]
          break;
 8001ba6:	e013      	b.n	8001bd0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d105      	bne.n	8001bbc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bb0:	2308      	movs	r3, #8
 8001bb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69fa      	ldr	r2, [r7, #28]
 8001bb8:	611a      	str	r2, [r3, #16]
          break;
 8001bba:	e009      	b.n	8001bd0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bbc:	2308      	movs	r3, #8
 8001bbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69fa      	ldr	r2, [r7, #28]
 8001bc4:	615a      	str	r2, [r3, #20]
          break;
 8001bc6:	e003      	b.n	8001bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	623b      	str	r3, [r7, #32]
          break;
 8001bcc:	e000      	b.n	8001bd0 <HAL_GPIO_Init+0x130>
          break;
 8001bce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	2bff      	cmp	r3, #255	; 0xff
 8001bd4:	d801      	bhi.n	8001bda <HAL_GPIO_Init+0x13a>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	e001      	b.n	8001bde <HAL_GPIO_Init+0x13e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	2bff      	cmp	r3, #255	; 0xff
 8001be4:	d802      	bhi.n	8001bec <HAL_GPIO_Init+0x14c>
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	e002      	b.n	8001bf2 <HAL_GPIO_Init+0x152>
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	3b08      	subs	r3, #8
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	210f      	movs	r1, #15
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	401a      	ands	r2, r3
 8001c04:	6a39      	ldr	r1, [r7, #32]
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 80b1 	beq.w	8001d82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c20:	4b4d      	ldr	r3, [pc, #308]	; (8001d58 <HAL_GPIO_Init+0x2b8>)
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	4a4c      	ldr	r2, [pc, #304]	; (8001d58 <HAL_GPIO_Init+0x2b8>)
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	6193      	str	r3, [r2, #24]
 8001c2c:	4b4a      	ldr	r3, [pc, #296]	; (8001d58 <HAL_GPIO_Init+0x2b8>)
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c38:	4a48      	ldr	r2, [pc, #288]	; (8001d5c <HAL_GPIO_Init+0x2bc>)
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	089b      	lsrs	r3, r3, #2
 8001c3e:	3302      	adds	r3, #2
 8001c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	220f      	movs	r2, #15
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a40      	ldr	r2, [pc, #256]	; (8001d60 <HAL_GPIO_Init+0x2c0>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d013      	beq.n	8001c8c <HAL_GPIO_Init+0x1ec>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a3f      	ldr	r2, [pc, #252]	; (8001d64 <HAL_GPIO_Init+0x2c4>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d00d      	beq.n	8001c88 <HAL_GPIO_Init+0x1e8>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a3e      	ldr	r2, [pc, #248]	; (8001d68 <HAL_GPIO_Init+0x2c8>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d007      	beq.n	8001c84 <HAL_GPIO_Init+0x1e4>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a3d      	ldr	r2, [pc, #244]	; (8001d6c <HAL_GPIO_Init+0x2cc>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d101      	bne.n	8001c80 <HAL_GPIO_Init+0x1e0>
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e006      	b.n	8001c8e <HAL_GPIO_Init+0x1ee>
 8001c80:	2304      	movs	r3, #4
 8001c82:	e004      	b.n	8001c8e <HAL_GPIO_Init+0x1ee>
 8001c84:	2302      	movs	r3, #2
 8001c86:	e002      	b.n	8001c8e <HAL_GPIO_Init+0x1ee>
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e000      	b.n	8001c8e <HAL_GPIO_Init+0x1ee>
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c90:	f002 0203 	and.w	r2, r2, #3
 8001c94:	0092      	lsls	r2, r2, #2
 8001c96:	4093      	lsls	r3, r2
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c9e:	492f      	ldr	r1, [pc, #188]	; (8001d5c <HAL_GPIO_Init+0x2bc>)
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	089b      	lsrs	r3, r3, #2
 8001ca4:	3302      	adds	r3, #2
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d006      	beq.n	8001cc6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cb8:	4b2d      	ldr	r3, [pc, #180]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	492c      	ldr	r1, [pc, #176]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	600b      	str	r3, [r1, #0]
 8001cc4:	e006      	b.n	8001cd4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cc6:	4b2a      	ldr	r3, [pc, #168]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	4928      	ldr	r1, [pc, #160]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d006      	beq.n	8001cee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ce0:	4b23      	ldr	r3, [pc, #140]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	4922      	ldr	r1, [pc, #136]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	604b      	str	r3, [r1, #4]
 8001cec:	e006      	b.n	8001cfc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cee:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	491e      	ldr	r1, [pc, #120]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d006      	beq.n	8001d16 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d08:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	4918      	ldr	r1, [pc, #96]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	608b      	str	r3, [r1, #8]
 8001d14:	e006      	b.n	8001d24 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d16:	4b16      	ldr	r3, [pc, #88]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	4914      	ldr	r1, [pc, #80]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001d20:	4013      	ands	r3, r2
 8001d22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d021      	beq.n	8001d74 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d30:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	490e      	ldr	r1, [pc, #56]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	60cb      	str	r3, [r1, #12]
 8001d3c:	e021      	b.n	8001d82 <HAL_GPIO_Init+0x2e2>
 8001d3e:	bf00      	nop
 8001d40:	10320000 	.word	0x10320000
 8001d44:	10310000 	.word	0x10310000
 8001d48:	10220000 	.word	0x10220000
 8001d4c:	10210000 	.word	0x10210000
 8001d50:	10120000 	.word	0x10120000
 8001d54:	10110000 	.word	0x10110000
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40010000 	.word	0x40010000
 8001d60:	40010800 	.word	0x40010800
 8001d64:	40010c00 	.word	0x40010c00
 8001d68:	40011000 	.word	0x40011000
 8001d6c:	40011400 	.word	0x40011400
 8001d70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d74:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <HAL_GPIO_Init+0x304>)
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	4909      	ldr	r1, [pc, #36]	; (8001da4 <HAL_GPIO_Init+0x304>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	3301      	adds	r3, #1
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f47f ae8e 	bne.w	8001ab4 <HAL_GPIO_Init+0x14>
  }
}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	372c      	adds	r7, #44	; 0x2c
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr
 8001da4:	40010400 	.word	0x40010400

08001da8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	887b      	ldrh	r3, [r7, #2]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d002      	beq.n	8001dc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
 8001dc4:	e001      	b.n	8001dca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	460b      	mov	r3, r1
 8001de0:	807b      	strh	r3, [r7, #2]
 8001de2:	4613      	mov	r3, r2
 8001de4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001de6:	787b      	ldrb	r3, [r7, #1]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dec:	887a      	ldrh	r2, [r7, #2]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001df2:	e003      	b.n	8001dfc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001df4:	887b      	ldrh	r3, [r7, #2]
 8001df6:	041a      	lsls	r2, r3, #16
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	611a      	str	r2, [r3, #16]
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr
	...

08001e08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e272      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 8087 	beq.w	8001f36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e28:	4b92      	ldr	r3, [pc, #584]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d00c      	beq.n	8001e4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e34:	4b8f      	ldr	r3, [pc, #572]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 030c 	and.w	r3, r3, #12
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d112      	bne.n	8001e66 <HAL_RCC_OscConfig+0x5e>
 8001e40:	4b8c      	ldr	r3, [pc, #560]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e4c:	d10b      	bne.n	8001e66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e4e:	4b89      	ldr	r3, [pc, #548]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d06c      	beq.n	8001f34 <HAL_RCC_OscConfig+0x12c>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d168      	bne.n	8001f34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e24c      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e6e:	d106      	bne.n	8001e7e <HAL_RCC_OscConfig+0x76>
 8001e70:	4b80      	ldr	r3, [pc, #512]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a7f      	ldr	r2, [pc, #508]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	e02e      	b.n	8001edc <HAL_RCC_OscConfig+0xd4>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10c      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x98>
 8001e86:	4b7b      	ldr	r3, [pc, #492]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a7a      	ldr	r2, [pc, #488]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	4b78      	ldr	r3, [pc, #480]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a77      	ldr	r2, [pc, #476]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001e98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	e01d      	b.n	8001edc <HAL_RCC_OscConfig+0xd4>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0xbc>
 8001eaa:	4b72      	ldr	r3, [pc, #456]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a71      	ldr	r2, [pc, #452]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	4b6f      	ldr	r3, [pc, #444]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a6e      	ldr	r2, [pc, #440]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	e00b      	b.n	8001edc <HAL_RCC_OscConfig+0xd4>
 8001ec4:	4b6b      	ldr	r3, [pc, #428]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a6a      	ldr	r2, [pc, #424]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ece:	6013      	str	r3, [r2, #0]
 8001ed0:	4b68      	ldr	r3, [pc, #416]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a67      	ldr	r2, [pc, #412]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d013      	beq.n	8001f0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee4:	f7ff fab2 	bl	800144c <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eec:	f7ff faae 	bl	800144c <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b64      	cmp	r3, #100	; 0x64
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e200      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efe:	4b5d      	ldr	r3, [pc, #372]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0xe4>
 8001f0a:	e014      	b.n	8001f36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0c:	f7ff fa9e 	bl	800144c <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f14:	f7ff fa9a 	bl	800144c <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b64      	cmp	r3, #100	; 0x64
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e1ec      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f26:	4b53      	ldr	r3, [pc, #332]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f0      	bne.n	8001f14 <HAL_RCC_OscConfig+0x10c>
 8001f32:	e000      	b.n	8001f36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d063      	beq.n	800200a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f42:	4b4c      	ldr	r3, [pc, #304]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 030c 	and.w	r3, r3, #12
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00b      	beq.n	8001f66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f4e:	4b49      	ldr	r3, [pc, #292]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d11c      	bne.n	8001f94 <HAL_RCC_OscConfig+0x18c>
 8001f5a:	4b46      	ldr	r3, [pc, #280]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d116      	bne.n	8001f94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f66:	4b43      	ldr	r3, [pc, #268]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d005      	beq.n	8001f7e <HAL_RCC_OscConfig+0x176>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d001      	beq.n	8001f7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e1c0      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7e:	4b3d      	ldr	r3, [pc, #244]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	4939      	ldr	r1, [pc, #228]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f92:	e03a      	b.n	800200a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d020      	beq.n	8001fde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f9c:	4b36      	ldr	r3, [pc, #216]	; (8002078 <HAL_RCC_OscConfig+0x270>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa2:	f7ff fa53 	bl	800144c <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001faa:	f7ff fa4f 	bl	800144c <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e1a1      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbc:	4b2d      	ldr	r3, [pc, #180]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc8:	4b2a      	ldr	r3, [pc, #168]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4927      	ldr	r1, [pc, #156]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	600b      	str	r3, [r1, #0]
 8001fdc:	e015      	b.n	800200a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fde:	4b26      	ldr	r3, [pc, #152]	; (8002078 <HAL_RCC_OscConfig+0x270>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe4:	f7ff fa32 	bl	800144c <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fec:	f7ff fa2e 	bl	800144c <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e180      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffe:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f0      	bne.n	8001fec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	d03a      	beq.n	800208c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d019      	beq.n	8002052 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800201e:	4b17      	ldr	r3, [pc, #92]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8002020:	2201      	movs	r2, #1
 8002022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002024:	f7ff fa12 	bl	800144c <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800202c:	f7ff fa0e 	bl	800144c <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e160      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203e:	4b0d      	ldr	r3, [pc, #52]	; (8002074 <HAL_RCC_OscConfig+0x26c>)
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0f0      	beq.n	800202c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800204a:	2001      	movs	r0, #1
 800204c:	f000 fad8 	bl	8002600 <RCC_Delay>
 8002050:	e01c      	b.n	800208c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002052:	4b0a      	ldr	r3, [pc, #40]	; (800207c <HAL_RCC_OscConfig+0x274>)
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002058:	f7ff f9f8 	bl	800144c <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800205e:	e00f      	b.n	8002080 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002060:	f7ff f9f4 	bl	800144c <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d908      	bls.n	8002080 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e146      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000
 8002078:	42420000 	.word	0x42420000
 800207c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002080:	4b92      	ldr	r3, [pc, #584]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1e9      	bne.n	8002060 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 80a6 	beq.w	80021e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800209a:	2300      	movs	r3, #0
 800209c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800209e:	4b8b      	ldr	r3, [pc, #556]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10d      	bne.n	80020c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020aa:	4b88      	ldr	r3, [pc, #544]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	4a87      	ldr	r2, [pc, #540]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80020b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b4:	61d3      	str	r3, [r2, #28]
 80020b6:	4b85      	ldr	r3, [pc, #532]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020c2:	2301      	movs	r3, #1
 80020c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c6:	4b82      	ldr	r3, [pc, #520]	; (80022d0 <HAL_RCC_OscConfig+0x4c8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d118      	bne.n	8002104 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020d2:	4b7f      	ldr	r3, [pc, #508]	; (80022d0 <HAL_RCC_OscConfig+0x4c8>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a7e      	ldr	r2, [pc, #504]	; (80022d0 <HAL_RCC_OscConfig+0x4c8>)
 80020d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020de:	f7ff f9b5 	bl	800144c <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e6:	f7ff f9b1 	bl	800144c <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b64      	cmp	r3, #100	; 0x64
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e103      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f8:	4b75      	ldr	r3, [pc, #468]	; (80022d0 <HAL_RCC_OscConfig+0x4c8>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0f0      	beq.n	80020e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d106      	bne.n	800211a <HAL_RCC_OscConfig+0x312>
 800210c:	4b6f      	ldr	r3, [pc, #444]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	4a6e      	ldr	r2, [pc, #440]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	6213      	str	r3, [r2, #32]
 8002118:	e02d      	b.n	8002176 <HAL_RCC_OscConfig+0x36e>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10c      	bne.n	800213c <HAL_RCC_OscConfig+0x334>
 8002122:	4b6a      	ldr	r3, [pc, #424]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	4a69      	ldr	r2, [pc, #420]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002128:	f023 0301 	bic.w	r3, r3, #1
 800212c:	6213      	str	r3, [r2, #32]
 800212e:	4b67      	ldr	r3, [pc, #412]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	4a66      	ldr	r2, [pc, #408]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002134:	f023 0304 	bic.w	r3, r3, #4
 8002138:	6213      	str	r3, [r2, #32]
 800213a:	e01c      	b.n	8002176 <HAL_RCC_OscConfig+0x36e>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	2b05      	cmp	r3, #5
 8002142:	d10c      	bne.n	800215e <HAL_RCC_OscConfig+0x356>
 8002144:	4b61      	ldr	r3, [pc, #388]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	4a60      	ldr	r2, [pc, #384]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 800214a:	f043 0304 	orr.w	r3, r3, #4
 800214e:	6213      	str	r3, [r2, #32]
 8002150:	4b5e      	ldr	r3, [pc, #376]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	4a5d      	ldr	r2, [pc, #372]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	6213      	str	r3, [r2, #32]
 800215c:	e00b      	b.n	8002176 <HAL_RCC_OscConfig+0x36e>
 800215e:	4b5b      	ldr	r3, [pc, #364]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	4a5a      	ldr	r2, [pc, #360]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002164:	f023 0301 	bic.w	r3, r3, #1
 8002168:	6213      	str	r3, [r2, #32]
 800216a:	4b58      	ldr	r3, [pc, #352]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	4a57      	ldr	r2, [pc, #348]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002170:	f023 0304 	bic.w	r3, r3, #4
 8002174:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d015      	beq.n	80021aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217e:	f7ff f965 	bl	800144c <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002184:	e00a      	b.n	800219c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002186:	f7ff f961 	bl	800144c <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	f241 3288 	movw	r2, #5000	; 0x1388
 8002194:	4293      	cmp	r3, r2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e0b1      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219c:	4b4b      	ldr	r3, [pc, #300]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0ee      	beq.n	8002186 <HAL_RCC_OscConfig+0x37e>
 80021a8:	e014      	b.n	80021d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021aa:	f7ff f94f 	bl	800144c <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b0:	e00a      	b.n	80021c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b2:	f7ff f94b 	bl	800144c <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e09b      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c8:	4b40      	ldr	r3, [pc, #256]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1ee      	bne.n	80021b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021d4:	7dfb      	ldrb	r3, [r7, #23]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d105      	bne.n	80021e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021da:	4b3c      	ldr	r3, [pc, #240]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	4a3b      	ldr	r2, [pc, #236]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 8087 	beq.w	80022fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021f0:	4b36      	ldr	r3, [pc, #216]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 030c 	and.w	r3, r3, #12
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d061      	beq.n	80022c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	2b02      	cmp	r3, #2
 8002202:	d146      	bne.n	8002292 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002204:	4b33      	ldr	r3, [pc, #204]	; (80022d4 <HAL_RCC_OscConfig+0x4cc>)
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220a:	f7ff f91f 	bl	800144c <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002212:	f7ff f91b 	bl	800144c <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e06d      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002224:	4b29      	ldr	r3, [pc, #164]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f0      	bne.n	8002212 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002238:	d108      	bne.n	800224c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800223a:	4b24      	ldr	r3, [pc, #144]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	4921      	ldr	r1, [pc, #132]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002248:	4313      	orrs	r3, r2
 800224a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800224c:	4b1f      	ldr	r3, [pc, #124]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a19      	ldr	r1, [r3, #32]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	430b      	orrs	r3, r1
 800225e:	491b      	ldr	r1, [pc, #108]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002260:	4313      	orrs	r3, r2
 8002262:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002264:	4b1b      	ldr	r3, [pc, #108]	; (80022d4 <HAL_RCC_OscConfig+0x4cc>)
 8002266:	2201      	movs	r2, #1
 8002268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226a:	f7ff f8ef 	bl	800144c <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002272:	f7ff f8eb 	bl	800144c <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e03d      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002284:	4b11      	ldr	r3, [pc, #68]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0f0      	beq.n	8002272 <HAL_RCC_OscConfig+0x46a>
 8002290:	e035      	b.n	80022fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002292:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <HAL_RCC_OscConfig+0x4cc>)
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002298:	f7ff f8d8 	bl	800144c <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a0:	f7ff f8d4 	bl	800144c <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e026      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b2:	4b06      	ldr	r3, [pc, #24]	; (80022cc <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f0      	bne.n	80022a0 <HAL_RCC_OscConfig+0x498>
 80022be:	e01e      	b.n	80022fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d107      	bne.n	80022d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e019      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40007000 	.word	0x40007000
 80022d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022d8:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <HAL_RCC_OscConfig+0x500>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d106      	bne.n	80022fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d001      	beq.n	80022fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40021000 	.word	0x40021000

0800230c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e0d0      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002320:	4b6a      	ldr	r3, [pc, #424]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d910      	bls.n	8002350 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232e:	4b67      	ldr	r3, [pc, #412]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f023 0207 	bic.w	r2, r3, #7
 8002336:	4965      	ldr	r1, [pc, #404]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	4313      	orrs	r3, r2
 800233c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800233e:	4b63      	ldr	r3, [pc, #396]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d001      	beq.n	8002350 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0b8      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d020      	beq.n	800239e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002368:	4b59      	ldr	r3, [pc, #356]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	4a58      	ldr	r2, [pc, #352]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002372:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0308 	and.w	r3, r3, #8
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002380:	4b53      	ldr	r3, [pc, #332]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	4a52      	ldr	r2, [pc, #328]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002386:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800238a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800238c:	4b50      	ldr	r3, [pc, #320]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	494d      	ldr	r1, [pc, #308]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	4313      	orrs	r3, r2
 800239c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d040      	beq.n	800242c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d107      	bne.n	80023c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b2:	4b47      	ldr	r3, [pc, #284]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d115      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e07f      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d107      	bne.n	80023da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ca:	4b41      	ldr	r3, [pc, #260]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d109      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e073      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023da:	4b3d      	ldr	r3, [pc, #244]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e06b      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ea:	4b39      	ldr	r3, [pc, #228]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f023 0203 	bic.w	r2, r3, #3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	4936      	ldr	r1, [pc, #216]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023fc:	f7ff f826 	bl	800144c <HAL_GetTick>
 8002400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002402:	e00a      	b.n	800241a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002404:	f7ff f822 	bl	800144c <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002412:	4293      	cmp	r3, r2
 8002414:	d901      	bls.n	800241a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e053      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241a:	4b2d      	ldr	r3, [pc, #180]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 020c 	and.w	r2, r3, #12
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	429a      	cmp	r2, r3
 800242a:	d1eb      	bne.n	8002404 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800242c:	4b27      	ldr	r3, [pc, #156]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d210      	bcs.n	800245c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243a:	4b24      	ldr	r3, [pc, #144]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 0207 	bic.w	r2, r3, #7
 8002442:	4922      	ldr	r1, [pc, #136]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	4313      	orrs	r3, r2
 8002448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800244a:	4b20      	ldr	r3, [pc, #128]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e032      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	d008      	beq.n	800247a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002468:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	4916      	ldr	r1, [pc, #88]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	4313      	orrs	r3, r2
 8002478:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d009      	beq.n	800249a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002486:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	490e      	ldr	r1, [pc, #56]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002496:	4313      	orrs	r3, r2
 8002498:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800249a:	f000 f821 	bl	80024e0 <HAL_RCC_GetSysClockFreq>
 800249e:	4602      	mov	r2, r0
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	091b      	lsrs	r3, r3, #4
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	490a      	ldr	r1, [pc, #40]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 80024ac:	5ccb      	ldrb	r3, [r1, r3]
 80024ae:	fa22 f303 	lsr.w	r3, r2, r3
 80024b2:	4a09      	ldr	r2, [pc, #36]	; (80024d8 <HAL_RCC_ClockConfig+0x1cc>)
 80024b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024b6:	4b09      	ldr	r3, [pc, #36]	; (80024dc <HAL_RCC_ClockConfig+0x1d0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fe ff84 	bl	80013c8 <HAL_InitTick>

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40022000 	.word	0x40022000
 80024d0:	40021000 	.word	0x40021000
 80024d4:	08003990 	.word	0x08003990
 80024d8:	20000030 	.word	0x20000030
 80024dc:	200002d8 	.word	0x200002d8

080024e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e0:	b490      	push	{r4, r7}
 80024e2:	b08a      	sub	sp, #40	; 0x28
 80024e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80024e6:	4b29      	ldr	r3, [pc, #164]	; (800258c <HAL_RCC_GetSysClockFreq+0xac>)
 80024e8:	1d3c      	adds	r4, r7, #4
 80024ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024f0:	f240 2301 	movw	r3, #513	; 0x201
 80024f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
 80024fa:	2300      	movs	r3, #0
 80024fc:	61bb      	str	r3, [r7, #24]
 80024fe:	2300      	movs	r3, #0
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800250a:	4b21      	ldr	r3, [pc, #132]	; (8002590 <HAL_RCC_GetSysClockFreq+0xb0>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	2b04      	cmp	r3, #4
 8002518:	d002      	beq.n	8002520 <HAL_RCC_GetSysClockFreq+0x40>
 800251a:	2b08      	cmp	r3, #8
 800251c:	d003      	beq.n	8002526 <HAL_RCC_GetSysClockFreq+0x46>
 800251e:	e02b      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002520:	4b1c      	ldr	r3, [pc, #112]	; (8002594 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002522:	623b      	str	r3, [r7, #32]
      break;
 8002524:	e02b      	b.n	800257e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	0c9b      	lsrs	r3, r3, #18
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	3328      	adds	r3, #40	; 0x28
 8002530:	443b      	add	r3, r7
 8002532:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002536:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d012      	beq.n	8002568 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002542:	4b13      	ldr	r3, [pc, #76]	; (8002590 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	0c5b      	lsrs	r3, r3, #17
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	3328      	adds	r3, #40	; 0x28
 800254e:	443b      	add	r3, r7
 8002550:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002554:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	4a0e      	ldr	r2, [pc, #56]	; (8002594 <HAL_RCC_GetSysClockFreq+0xb4>)
 800255a:	fb03 f202 	mul.w	r2, r3, r2
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	fbb2 f3f3 	udiv	r3, r2, r3
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
 8002566:	e004      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	4a0b      	ldr	r2, [pc, #44]	; (8002598 <HAL_RCC_GetSysClockFreq+0xb8>)
 800256c:	fb02 f303 	mul.w	r3, r2, r3
 8002570:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	623b      	str	r3, [r7, #32]
      break;
 8002576:	e002      	b.n	800257e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002578:	4b06      	ldr	r3, [pc, #24]	; (8002594 <HAL_RCC_GetSysClockFreq+0xb4>)
 800257a:	623b      	str	r3, [r7, #32]
      break;
 800257c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800257e:	6a3b      	ldr	r3, [r7, #32]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3728      	adds	r7, #40	; 0x28
 8002584:	46bd      	mov	sp, r7
 8002586:	bc90      	pop	{r4, r7}
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	08003980 	.word	0x08003980
 8002590:	40021000 	.word	0x40021000
 8002594:	007a1200 	.word	0x007a1200
 8002598:	003d0900 	.word	0x003d0900

0800259c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025a0:	4b02      	ldr	r3, [pc, #8]	; (80025ac <HAL_RCC_GetHCLKFreq+0x10>)
 80025a2:	681b      	ldr	r3, [r3, #0]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr
 80025ac:	20000030 	.word	0x20000030

080025b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025b4:	f7ff fff2 	bl	800259c <HAL_RCC_GetHCLKFreq>
 80025b8:	4602      	mov	r2, r0
 80025ba:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	0a1b      	lsrs	r3, r3, #8
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	4903      	ldr	r1, [pc, #12]	; (80025d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025c6:	5ccb      	ldrb	r3, [r1, r3]
 80025c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40021000 	.word	0x40021000
 80025d4:	080039a0 	.word	0x080039a0

080025d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025dc:	f7ff ffde 	bl	800259c <HAL_RCC_GetHCLKFreq>
 80025e0:	4602      	mov	r2, r0
 80025e2:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	0adb      	lsrs	r3, r3, #11
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	4903      	ldr	r1, [pc, #12]	; (80025fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80025ee:	5ccb      	ldrb	r3, [r1, r3]
 80025f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40021000 	.word	0x40021000
 80025fc:	080039a0 	.word	0x080039a0

08002600 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002608:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <RCC_Delay+0x34>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a0a      	ldr	r2, [pc, #40]	; (8002638 <RCC_Delay+0x38>)
 800260e:	fba2 2303 	umull	r2, r3, r2, r3
 8002612:	0a5b      	lsrs	r3, r3, #9
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	fb02 f303 	mul.w	r3, r2, r3
 800261a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800261c:	bf00      	nop
  }
  while (Delay --);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	1e5a      	subs	r2, r3, #1
 8002622:	60fa      	str	r2, [r7, #12]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1f9      	bne.n	800261c <RCC_Delay+0x1c>
}
 8002628:	bf00      	nop
 800262a:	bf00      	nop
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr
 8002634:	20000030 	.word	0x20000030
 8002638:	10624dd3 	.word	0x10624dd3

0800263c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e076      	b.n	800273c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	2b00      	cmp	r3, #0
 8002654:	d108      	bne.n	8002668 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800265e:	d009      	beq.n	8002674 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	61da      	str	r2, [r3, #28]
 8002666:	e005      	b.n	8002674 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d106      	bne.n	8002694 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7fe f802 	bl	8000698 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2202      	movs	r2, #2
 8002698:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80026bc:	431a      	orrs	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	431a      	orrs	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026e4:	431a      	orrs	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f8:	ea42 0103 	orr.w	r1, r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002700:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	0c1a      	lsrs	r2, r3, #16
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f002 0204 	and.w	r2, r2, #4
 800271a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	69da      	ldr	r2, [r3, #28]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800272a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	603b      	str	r3, [r7, #0]
 8002750:	4613      	mov	r3, r2
 8002752:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002754:	2300      	movs	r3, #0
 8002756:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800275e:	2b01      	cmp	r3, #1
 8002760:	d101      	bne.n	8002766 <HAL_SPI_Transmit+0x22>
 8002762:	2302      	movs	r3, #2
 8002764:	e126      	b.n	80029b4 <HAL_SPI_Transmit+0x270>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800276e:	f7fe fe6d 	bl	800144c <HAL_GetTick>
 8002772:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002774:	88fb      	ldrh	r3, [r7, #6]
 8002776:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b01      	cmp	r3, #1
 8002782:	d002      	beq.n	800278a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002784:	2302      	movs	r3, #2
 8002786:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002788:	e10b      	b.n	80029a2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d002      	beq.n	8002796 <HAL_SPI_Transmit+0x52>
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d102      	bne.n	800279c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	77fb      	strb	r3, [r7, #31]
    goto error;
 800279a:	e102      	b.n	80029a2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2203      	movs	r2, #3
 80027a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	88fa      	ldrh	r2, [r7, #6]
 80027b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	88fa      	ldrh	r2, [r7, #6]
 80027ba:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027e2:	d10f      	bne.n	8002804 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002802:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280e:	2b40      	cmp	r3, #64	; 0x40
 8002810:	d007      	beq.n	8002822 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002820:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800282a:	d14b      	bne.n	80028c4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d002      	beq.n	800283a <HAL_SPI_Transmit+0xf6>
 8002834:	8afb      	ldrh	r3, [r7, #22]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d13e      	bne.n	80028b8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	881a      	ldrh	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	1c9a      	adds	r2, r3, #2
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002854:	b29b      	uxth	r3, r3
 8002856:	3b01      	subs	r3, #1
 8002858:	b29a      	uxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800285e:	e02b      	b.n	80028b8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b02      	cmp	r3, #2
 800286c:	d112      	bne.n	8002894 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	881a      	ldrh	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	1c9a      	adds	r2, r3, #2
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002888:	b29b      	uxth	r3, r3
 800288a:	3b01      	subs	r3, #1
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	86da      	strh	r2, [r3, #54]	; 0x36
 8002892:	e011      	b.n	80028b8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002894:	f7fe fdda 	bl	800144c <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d803      	bhi.n	80028ac <HAL_SPI_Transmit+0x168>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028aa:	d102      	bne.n	80028b2 <HAL_SPI_Transmit+0x16e>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d102      	bne.n	80028b8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80028b6:	e074      	b.n	80029a2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028bc:	b29b      	uxth	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1ce      	bne.n	8002860 <HAL_SPI_Transmit+0x11c>
 80028c2:	e04c      	b.n	800295e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d002      	beq.n	80028d2 <HAL_SPI_Transmit+0x18e>
 80028cc:	8afb      	ldrh	r3, [r7, #22]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d140      	bne.n	8002954 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	330c      	adds	r3, #12
 80028dc:	7812      	ldrb	r2, [r2, #0]
 80028de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e4:	1c5a      	adds	r2, r3, #1
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80028f8:	e02c      	b.n	8002954 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b02      	cmp	r3, #2
 8002906:	d113      	bne.n	8002930 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	330c      	adds	r3, #12
 8002912:	7812      	ldrb	r2, [r2, #0]
 8002914:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	1c5a      	adds	r2, r3, #1
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002924:	b29b      	uxth	r3, r3
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	86da      	strh	r2, [r3, #54]	; 0x36
 800292e:	e011      	b.n	8002954 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002930:	f7fe fd8c 	bl	800144c <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d803      	bhi.n	8002948 <HAL_SPI_Transmit+0x204>
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002946:	d102      	bne.n	800294e <HAL_SPI_Transmit+0x20a>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d102      	bne.n	8002954 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002952:	e026      	b.n	80029a2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002958:	b29b      	uxth	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1cd      	bne.n	80028fa <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	6839      	ldr	r1, [r7, #0]
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 f8b2 	bl	8002acc <SPI_EndRxTxTransaction>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d002      	beq.n	8002974 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2220      	movs	r2, #32
 8002972:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10a      	bne.n	8002992 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800297c:	2300      	movs	r3, #0
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	613b      	str	r3, [r7, #16]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002996:	2b00      	cmp	r3, #0
 8002998:	d002      	beq.n	80029a0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	77fb      	strb	r3, [r7, #31]
 800299e:	e000      	b.n	80029a2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80029a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3720      	adds	r7, #32
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b088      	sub	sp, #32
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	4613      	mov	r3, r2
 80029ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029cc:	f7fe fd3e 	bl	800144c <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d4:	1a9b      	subs	r3, r3, r2
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	4413      	add	r3, r2
 80029da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80029dc:	f7fe fd36 	bl	800144c <HAL_GetTick>
 80029e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80029e2:	4b39      	ldr	r3, [pc, #228]	; (8002ac8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	015b      	lsls	r3, r3, #5
 80029e8:	0d1b      	lsrs	r3, r3, #20
 80029ea:	69fa      	ldr	r2, [r7, #28]
 80029ec:	fb02 f303 	mul.w	r3, r2, r3
 80029f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029f2:	e054      	b.n	8002a9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029fa:	d050      	beq.n	8002a9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029fc:	f7fe fd26 	bl	800144c <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	69fa      	ldr	r2, [r7, #28]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d902      	bls.n	8002a12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d13d      	bne.n	8002a8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a2a:	d111      	bne.n	8002a50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a34:	d004      	beq.n	8002a40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a3e:	d107      	bne.n	8002a50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a58:	d10f      	bne.n	8002a7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e017      	b.n	8002abe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	bf0c      	ite	eq
 8002aae:	2301      	moveq	r3, #1
 8002ab0:	2300      	movne	r3, #0
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d19b      	bne.n	80029f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3720      	adds	r7, #32
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20000030 	.word	0x20000030

08002acc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af02      	add	r7, sp, #8
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	2180      	movs	r1, #128	; 0x80
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f7ff ff6a 	bl	80029bc <SPI_WaitFlagStateUntilTimeout>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d007      	beq.n	8002afe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af2:	f043 0220 	orr.w	r2, r3, #32
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e000      	b.n	8002b00 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e03f      	b.n	8002b9a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d106      	bne.n	8002b34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7fd fe00 	bl	8000734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2224      	movs	r2, #36	; 0x24
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 f9c3 	bl	8002ed8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	691a      	ldr	r2, [r3, #16]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695a      	ldr	r2, [r3, #20]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68da      	ldr	r2, [r3, #12]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b084      	sub	sp, #16
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	60f8      	str	r0, [r7, #12]
 8002baa:	60b9      	str	r1, [r7, #8]
 8002bac:	4613      	mov	r3, r2
 8002bae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	d11d      	bne.n	8002bf8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d002      	beq.n	8002bc8 <HAL_UART_Receive_DMA+0x26>
 8002bc2:	88fb      	ldrh	r3, [r7, #6]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e016      	b.n	8002bfa <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_UART_Receive_DMA+0x38>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e00f      	b.n	8002bfa <HAL_UART_Receive_DMA+0x58>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8002be8:	88fb      	ldrh	r3, [r7, #6]
 8002bea:	461a      	mov	r2, r3
 8002bec:	68b9      	ldr	r1, [r7, #8]
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 f8cc 	bl	8002d8c <UART_Start_Receive_DMA>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	e000      	b.n	8002bfa <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002bf8:	2302      	movs	r3, #2
  }
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr

08002c14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr

08002c2a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b084      	sub	sp, #16
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0320 	and.w	r3, r3, #32
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d12a      	bne.n	8002c9c <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c5a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695a      	ldr	r2, [r3, #20]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0201 	bic.w	r2, r2, #1
 8002c6a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	695a      	ldr	r2, [r3, #20]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c7a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d107      	bne.n	8002c9c <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0210 	bic.w	r2, r2, #16
 8002c9a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d106      	bne.n	8002cb2 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ca8:	4619      	mov	r1, r3
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f7ff ffb2 	bl	8002c14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002cb0:	e002      	b.n	8002cb8 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f7fd fa64 	bl	8000180 <HAL_UART_RxCpltCallback>
}
 8002cb8:	bf00      	nop
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d108      	bne.n	8002ce8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cda:	085b      	lsrs	r3, r3, #1
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	4619      	mov	r1, r3
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f7ff ff97 	bl	8002c14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002ce6:	e002      	b.n	8002cee <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f7fd fa2f 	bl	800014c <HAL_UART_RxHalfCpltCallback>
}
 8002cee:	bf00      	nop
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b084      	sub	sp, #16
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	bf14      	ite	ne
 8002d16:	2301      	movne	r3, #1
 8002d18:	2300      	moveq	r3, #0
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b21      	cmp	r3, #33	; 0x21
 8002d28:	d108      	bne.n	8002d3c <UART_DMAError+0x46>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	2200      	movs	r2, #0
 8002d34:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002d36:	68b8      	ldr	r0, [r7, #8]
 8002d38:	f000 f88c 	bl	8002e54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	bf14      	ite	ne
 8002d4a:	2301      	movne	r3, #1
 8002d4c:	2300      	moveq	r3, #0
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b22      	cmp	r3, #34	; 0x22
 8002d5c:	d108      	bne.n	8002d70 <UART_DMAError+0x7a>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d005      	beq.n	8002d70 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2200      	movs	r2, #0
 8002d68:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002d6a:	68b8      	ldr	r0, [r7, #8]
 8002d6c:	f000 f887 	bl	8002e7e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	f043 0210 	orr.w	r2, r3, #16
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d7c:	68b8      	ldr	r0, [r7, #8]
 8002d7e:	f7ff ff40 	bl	8002c02 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d82:	bf00      	nop
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	4613      	mov	r3, r2
 8002d98:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	88fa      	ldrh	r2, [r7, #6]
 8002da4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2222      	movs	r2, #34	; 0x22
 8002db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db8:	4a23      	ldr	r2, [pc, #140]	; (8002e48 <UART_Start_Receive_DMA+0xbc>)
 8002dba:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc0:	4a22      	ldr	r2, [pc, #136]	; (8002e4c <UART_Start_Receive_DMA+0xc0>)
 8002dc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc8:	4a21      	ldr	r2, [pc, #132]	; (8002e50 <UART_Start_Receive_DMA+0xc4>)
 8002dca:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002dd4:	f107 0308 	add.w	r3, r7, #8
 8002dd8:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	3304      	adds	r3, #4
 8002de4:	4619      	mov	r1, r3
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	88fb      	ldrh	r3, [r7, #6]
 8002dec:	f7fe fcc4 	bl	8001778 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002df0:	2300      	movs	r3, #0
 8002df2:	613b      	str	r3, [r7, #16]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	613b      	str	r3, [r7, #16]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	613b      	str	r3, [r7, #16]
 8002e04:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68da      	ldr	r2, [r3, #12]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e1c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695a      	ldr	r2, [r3, #20]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f042 0201 	orr.w	r2, r2, #1
 8002e2c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	695a      	ldr	r2, [r3, #20]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e3c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3718      	adds	r7, #24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	08002c2b 	.word	0x08002c2b
 8002e4c:	08002cc1 	.word	0x08002cc1
 8002e50:	08002cf7 	.word	0x08002cf7

08002e54 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002e6a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bc80      	pop	{r7}
 8002e7c:	4770      	bx	lr

08002e7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e94:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	695a      	ldr	r2, [r3, #20]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0201 	bic.w	r2, r2, #1
 8002ea4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d107      	bne.n	8002ebe <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 0210 	bic.w	r2, r2, #16
 8002ebc:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr
	...

08002ed8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f12:	f023 030c 	bic.w	r3, r3, #12
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	6812      	ldr	r2, [r2, #0]
 8002f1a:	68b9      	ldr	r1, [r7, #8]
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699a      	ldr	r2, [r3, #24]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a2c      	ldr	r2, [pc, #176]	; (8002fec <UART_SetConfig+0x114>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d103      	bne.n	8002f48 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f40:	f7ff fb4a 	bl	80025d8 <HAL_RCC_GetPCLK2Freq>
 8002f44:	60f8      	str	r0, [r7, #12]
 8002f46:	e002      	b.n	8002f4e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f48:	f7ff fb32 	bl	80025b0 <HAL_RCC_GetPCLK1Freq>
 8002f4c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	4613      	mov	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	009a      	lsls	r2, r3, #2
 8002f58:	441a      	add	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f64:	4a22      	ldr	r2, [pc, #136]	; (8002ff0 <UART_SetConfig+0x118>)
 8002f66:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	0119      	lsls	r1, r3, #4
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	009a      	lsls	r2, r3, #2
 8002f78:	441a      	add	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f84:	4b1a      	ldr	r3, [pc, #104]	; (8002ff0 <UART_SetConfig+0x118>)
 8002f86:	fba3 0302 	umull	r0, r3, r3, r2
 8002f8a:	095b      	lsrs	r3, r3, #5
 8002f8c:	2064      	movs	r0, #100	; 0x64
 8002f8e:	fb00 f303 	mul.w	r3, r0, r3
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	3332      	adds	r3, #50	; 0x32
 8002f98:	4a15      	ldr	r2, [pc, #84]	; (8002ff0 <UART_SetConfig+0x118>)
 8002f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fa4:	4419      	add	r1, r3
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	009a      	lsls	r2, r3, #2
 8002fb0:	441a      	add	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fbc:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <UART_SetConfig+0x118>)
 8002fbe:	fba3 0302 	umull	r0, r3, r3, r2
 8002fc2:	095b      	lsrs	r3, r3, #5
 8002fc4:	2064      	movs	r0, #100	; 0x64
 8002fc6:	fb00 f303 	mul.w	r3, r0, r3
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	3332      	adds	r3, #50	; 0x32
 8002fd0:	4a07      	ldr	r2, [pc, #28]	; (8002ff0 <UART_SetConfig+0x118>)
 8002fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd6:	095b      	lsrs	r3, r3, #5
 8002fd8:	f003 020f 	and.w	r2, r3, #15
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	440a      	add	r2, r1
 8002fe2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002fe4:	bf00      	nop
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40013800 	.word	0x40013800
 8002ff0:	51eb851f 	.word	0x51eb851f

08002ff4 <__errno>:
 8002ff4:	4b01      	ldr	r3, [pc, #4]	; (8002ffc <__errno+0x8>)
 8002ff6:	6818      	ldr	r0, [r3, #0]
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	200002e0 	.word	0x200002e0

08003000 <__libc_init_array>:
 8003000:	b570      	push	{r4, r5, r6, lr}
 8003002:	2600      	movs	r6, #0
 8003004:	4d0c      	ldr	r5, [pc, #48]	; (8003038 <__libc_init_array+0x38>)
 8003006:	4c0d      	ldr	r4, [pc, #52]	; (800303c <__libc_init_array+0x3c>)
 8003008:	1b64      	subs	r4, r4, r5
 800300a:	10a4      	asrs	r4, r4, #2
 800300c:	42a6      	cmp	r6, r4
 800300e:	d109      	bne.n	8003024 <__libc_init_array+0x24>
 8003010:	f000 fc9c 	bl	800394c <_init>
 8003014:	2600      	movs	r6, #0
 8003016:	4d0a      	ldr	r5, [pc, #40]	; (8003040 <__libc_init_array+0x40>)
 8003018:	4c0a      	ldr	r4, [pc, #40]	; (8003044 <__libc_init_array+0x44>)
 800301a:	1b64      	subs	r4, r4, r5
 800301c:	10a4      	asrs	r4, r4, #2
 800301e:	42a6      	cmp	r6, r4
 8003020:	d105      	bne.n	800302e <__libc_init_array+0x2e>
 8003022:	bd70      	pop	{r4, r5, r6, pc}
 8003024:	f855 3b04 	ldr.w	r3, [r5], #4
 8003028:	4798      	blx	r3
 800302a:	3601      	adds	r6, #1
 800302c:	e7ee      	b.n	800300c <__libc_init_array+0xc>
 800302e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003032:	4798      	blx	r3
 8003034:	3601      	adds	r6, #1
 8003036:	e7f2      	b.n	800301e <__libc_init_array+0x1e>
 8003038:	080039dc 	.word	0x080039dc
 800303c:	080039dc 	.word	0x080039dc
 8003040:	080039dc 	.word	0x080039dc
 8003044:	080039e0 	.word	0x080039e0

08003048 <memcpy>:
 8003048:	440a      	add	r2, r1
 800304a:	4291      	cmp	r1, r2
 800304c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003050:	d100      	bne.n	8003054 <memcpy+0xc>
 8003052:	4770      	bx	lr
 8003054:	b510      	push	{r4, lr}
 8003056:	f811 4b01 	ldrb.w	r4, [r1], #1
 800305a:	4291      	cmp	r1, r2
 800305c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003060:	d1f9      	bne.n	8003056 <memcpy+0xe>
 8003062:	bd10      	pop	{r4, pc}

08003064 <memset>:
 8003064:	4603      	mov	r3, r0
 8003066:	4402      	add	r2, r0
 8003068:	4293      	cmp	r3, r2
 800306a:	d100      	bne.n	800306e <memset+0xa>
 800306c:	4770      	bx	lr
 800306e:	f803 1b01 	strb.w	r1, [r3], #1
 8003072:	e7f9      	b.n	8003068 <memset+0x4>

08003074 <siprintf>:
 8003074:	b40e      	push	{r1, r2, r3}
 8003076:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800307a:	b500      	push	{lr}
 800307c:	b09c      	sub	sp, #112	; 0x70
 800307e:	ab1d      	add	r3, sp, #116	; 0x74
 8003080:	9002      	str	r0, [sp, #8]
 8003082:	9006      	str	r0, [sp, #24]
 8003084:	9107      	str	r1, [sp, #28]
 8003086:	9104      	str	r1, [sp, #16]
 8003088:	4808      	ldr	r0, [pc, #32]	; (80030ac <siprintf+0x38>)
 800308a:	4909      	ldr	r1, [pc, #36]	; (80030b0 <siprintf+0x3c>)
 800308c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003090:	9105      	str	r1, [sp, #20]
 8003092:	6800      	ldr	r0, [r0, #0]
 8003094:	a902      	add	r1, sp, #8
 8003096:	9301      	str	r3, [sp, #4]
 8003098:	f000 f868 	bl	800316c <_svfiprintf_r>
 800309c:	2200      	movs	r2, #0
 800309e:	9b02      	ldr	r3, [sp, #8]
 80030a0:	701a      	strb	r2, [r3, #0]
 80030a2:	b01c      	add	sp, #112	; 0x70
 80030a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80030a8:	b003      	add	sp, #12
 80030aa:	4770      	bx	lr
 80030ac:	200002e0 	.word	0x200002e0
 80030b0:	ffff0208 	.word	0xffff0208

080030b4 <__ssputs_r>:
 80030b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030b8:	688e      	ldr	r6, [r1, #8]
 80030ba:	4682      	mov	sl, r0
 80030bc:	429e      	cmp	r6, r3
 80030be:	460c      	mov	r4, r1
 80030c0:	4690      	mov	r8, r2
 80030c2:	461f      	mov	r7, r3
 80030c4:	d838      	bhi.n	8003138 <__ssputs_r+0x84>
 80030c6:	898a      	ldrh	r2, [r1, #12]
 80030c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80030cc:	d032      	beq.n	8003134 <__ssputs_r+0x80>
 80030ce:	6825      	ldr	r5, [r4, #0]
 80030d0:	6909      	ldr	r1, [r1, #16]
 80030d2:	3301      	adds	r3, #1
 80030d4:	eba5 0901 	sub.w	r9, r5, r1
 80030d8:	6965      	ldr	r5, [r4, #20]
 80030da:	444b      	add	r3, r9
 80030dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80030e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80030e4:	106d      	asrs	r5, r5, #1
 80030e6:	429d      	cmp	r5, r3
 80030e8:	bf38      	it	cc
 80030ea:	461d      	movcc	r5, r3
 80030ec:	0553      	lsls	r3, r2, #21
 80030ee:	d531      	bpl.n	8003154 <__ssputs_r+0xa0>
 80030f0:	4629      	mov	r1, r5
 80030f2:	f000 fb61 	bl	80037b8 <_malloc_r>
 80030f6:	4606      	mov	r6, r0
 80030f8:	b950      	cbnz	r0, 8003110 <__ssputs_r+0x5c>
 80030fa:	230c      	movs	r3, #12
 80030fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003100:	f8ca 3000 	str.w	r3, [sl]
 8003104:	89a3      	ldrh	r3, [r4, #12]
 8003106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800310a:	81a3      	strh	r3, [r4, #12]
 800310c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003110:	464a      	mov	r2, r9
 8003112:	6921      	ldr	r1, [r4, #16]
 8003114:	f7ff ff98 	bl	8003048 <memcpy>
 8003118:	89a3      	ldrh	r3, [r4, #12]
 800311a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800311e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003122:	81a3      	strh	r3, [r4, #12]
 8003124:	6126      	str	r6, [r4, #16]
 8003126:	444e      	add	r6, r9
 8003128:	6026      	str	r6, [r4, #0]
 800312a:	463e      	mov	r6, r7
 800312c:	6165      	str	r5, [r4, #20]
 800312e:	eba5 0509 	sub.w	r5, r5, r9
 8003132:	60a5      	str	r5, [r4, #8]
 8003134:	42be      	cmp	r6, r7
 8003136:	d900      	bls.n	800313a <__ssputs_r+0x86>
 8003138:	463e      	mov	r6, r7
 800313a:	4632      	mov	r2, r6
 800313c:	4641      	mov	r1, r8
 800313e:	6820      	ldr	r0, [r4, #0]
 8003140:	f000 fab8 	bl	80036b4 <memmove>
 8003144:	68a3      	ldr	r3, [r4, #8]
 8003146:	2000      	movs	r0, #0
 8003148:	1b9b      	subs	r3, r3, r6
 800314a:	60a3      	str	r3, [r4, #8]
 800314c:	6823      	ldr	r3, [r4, #0]
 800314e:	4433      	add	r3, r6
 8003150:	6023      	str	r3, [r4, #0]
 8003152:	e7db      	b.n	800310c <__ssputs_r+0x58>
 8003154:	462a      	mov	r2, r5
 8003156:	f000 fba3 	bl	80038a0 <_realloc_r>
 800315a:	4606      	mov	r6, r0
 800315c:	2800      	cmp	r0, #0
 800315e:	d1e1      	bne.n	8003124 <__ssputs_r+0x70>
 8003160:	4650      	mov	r0, sl
 8003162:	6921      	ldr	r1, [r4, #16]
 8003164:	f000 fac0 	bl	80036e8 <_free_r>
 8003168:	e7c7      	b.n	80030fa <__ssputs_r+0x46>
	...

0800316c <_svfiprintf_r>:
 800316c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003170:	4698      	mov	r8, r3
 8003172:	898b      	ldrh	r3, [r1, #12]
 8003174:	4607      	mov	r7, r0
 8003176:	061b      	lsls	r3, r3, #24
 8003178:	460d      	mov	r5, r1
 800317a:	4614      	mov	r4, r2
 800317c:	b09d      	sub	sp, #116	; 0x74
 800317e:	d50e      	bpl.n	800319e <_svfiprintf_r+0x32>
 8003180:	690b      	ldr	r3, [r1, #16]
 8003182:	b963      	cbnz	r3, 800319e <_svfiprintf_r+0x32>
 8003184:	2140      	movs	r1, #64	; 0x40
 8003186:	f000 fb17 	bl	80037b8 <_malloc_r>
 800318a:	6028      	str	r0, [r5, #0]
 800318c:	6128      	str	r0, [r5, #16]
 800318e:	b920      	cbnz	r0, 800319a <_svfiprintf_r+0x2e>
 8003190:	230c      	movs	r3, #12
 8003192:	603b      	str	r3, [r7, #0]
 8003194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003198:	e0d1      	b.n	800333e <_svfiprintf_r+0x1d2>
 800319a:	2340      	movs	r3, #64	; 0x40
 800319c:	616b      	str	r3, [r5, #20]
 800319e:	2300      	movs	r3, #0
 80031a0:	9309      	str	r3, [sp, #36]	; 0x24
 80031a2:	2320      	movs	r3, #32
 80031a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80031a8:	2330      	movs	r3, #48	; 0x30
 80031aa:	f04f 0901 	mov.w	r9, #1
 80031ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80031b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003358 <_svfiprintf_r+0x1ec>
 80031b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80031ba:	4623      	mov	r3, r4
 80031bc:	469a      	mov	sl, r3
 80031be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031c2:	b10a      	cbz	r2, 80031c8 <_svfiprintf_r+0x5c>
 80031c4:	2a25      	cmp	r2, #37	; 0x25
 80031c6:	d1f9      	bne.n	80031bc <_svfiprintf_r+0x50>
 80031c8:	ebba 0b04 	subs.w	fp, sl, r4
 80031cc:	d00b      	beq.n	80031e6 <_svfiprintf_r+0x7a>
 80031ce:	465b      	mov	r3, fp
 80031d0:	4622      	mov	r2, r4
 80031d2:	4629      	mov	r1, r5
 80031d4:	4638      	mov	r0, r7
 80031d6:	f7ff ff6d 	bl	80030b4 <__ssputs_r>
 80031da:	3001      	adds	r0, #1
 80031dc:	f000 80aa 	beq.w	8003334 <_svfiprintf_r+0x1c8>
 80031e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80031e2:	445a      	add	r2, fp
 80031e4:	9209      	str	r2, [sp, #36]	; 0x24
 80031e6:	f89a 3000 	ldrb.w	r3, [sl]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 80a2 	beq.w	8003334 <_svfiprintf_r+0x1c8>
 80031f0:	2300      	movs	r3, #0
 80031f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031fa:	f10a 0a01 	add.w	sl, sl, #1
 80031fe:	9304      	str	r3, [sp, #16]
 8003200:	9307      	str	r3, [sp, #28]
 8003202:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003206:	931a      	str	r3, [sp, #104]	; 0x68
 8003208:	4654      	mov	r4, sl
 800320a:	2205      	movs	r2, #5
 800320c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003210:	4851      	ldr	r0, [pc, #324]	; (8003358 <_svfiprintf_r+0x1ec>)
 8003212:	f000 fa41 	bl	8003698 <memchr>
 8003216:	9a04      	ldr	r2, [sp, #16]
 8003218:	b9d8      	cbnz	r0, 8003252 <_svfiprintf_r+0xe6>
 800321a:	06d0      	lsls	r0, r2, #27
 800321c:	bf44      	itt	mi
 800321e:	2320      	movmi	r3, #32
 8003220:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003224:	0711      	lsls	r1, r2, #28
 8003226:	bf44      	itt	mi
 8003228:	232b      	movmi	r3, #43	; 0x2b
 800322a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800322e:	f89a 3000 	ldrb.w	r3, [sl]
 8003232:	2b2a      	cmp	r3, #42	; 0x2a
 8003234:	d015      	beq.n	8003262 <_svfiprintf_r+0xf6>
 8003236:	4654      	mov	r4, sl
 8003238:	2000      	movs	r0, #0
 800323a:	f04f 0c0a 	mov.w	ip, #10
 800323e:	9a07      	ldr	r2, [sp, #28]
 8003240:	4621      	mov	r1, r4
 8003242:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003246:	3b30      	subs	r3, #48	; 0x30
 8003248:	2b09      	cmp	r3, #9
 800324a:	d94e      	bls.n	80032ea <_svfiprintf_r+0x17e>
 800324c:	b1b0      	cbz	r0, 800327c <_svfiprintf_r+0x110>
 800324e:	9207      	str	r2, [sp, #28]
 8003250:	e014      	b.n	800327c <_svfiprintf_r+0x110>
 8003252:	eba0 0308 	sub.w	r3, r0, r8
 8003256:	fa09 f303 	lsl.w	r3, r9, r3
 800325a:	4313      	orrs	r3, r2
 800325c:	46a2      	mov	sl, r4
 800325e:	9304      	str	r3, [sp, #16]
 8003260:	e7d2      	b.n	8003208 <_svfiprintf_r+0x9c>
 8003262:	9b03      	ldr	r3, [sp, #12]
 8003264:	1d19      	adds	r1, r3, #4
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	9103      	str	r1, [sp, #12]
 800326a:	2b00      	cmp	r3, #0
 800326c:	bfbb      	ittet	lt
 800326e:	425b      	neglt	r3, r3
 8003270:	f042 0202 	orrlt.w	r2, r2, #2
 8003274:	9307      	strge	r3, [sp, #28]
 8003276:	9307      	strlt	r3, [sp, #28]
 8003278:	bfb8      	it	lt
 800327a:	9204      	strlt	r2, [sp, #16]
 800327c:	7823      	ldrb	r3, [r4, #0]
 800327e:	2b2e      	cmp	r3, #46	; 0x2e
 8003280:	d10c      	bne.n	800329c <_svfiprintf_r+0x130>
 8003282:	7863      	ldrb	r3, [r4, #1]
 8003284:	2b2a      	cmp	r3, #42	; 0x2a
 8003286:	d135      	bne.n	80032f4 <_svfiprintf_r+0x188>
 8003288:	9b03      	ldr	r3, [sp, #12]
 800328a:	3402      	adds	r4, #2
 800328c:	1d1a      	adds	r2, r3, #4
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	9203      	str	r2, [sp, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	bfb8      	it	lt
 8003296:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800329a:	9305      	str	r3, [sp, #20]
 800329c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800335c <_svfiprintf_r+0x1f0>
 80032a0:	2203      	movs	r2, #3
 80032a2:	4650      	mov	r0, sl
 80032a4:	7821      	ldrb	r1, [r4, #0]
 80032a6:	f000 f9f7 	bl	8003698 <memchr>
 80032aa:	b140      	cbz	r0, 80032be <_svfiprintf_r+0x152>
 80032ac:	2340      	movs	r3, #64	; 0x40
 80032ae:	eba0 000a 	sub.w	r0, r0, sl
 80032b2:	fa03 f000 	lsl.w	r0, r3, r0
 80032b6:	9b04      	ldr	r3, [sp, #16]
 80032b8:	3401      	adds	r4, #1
 80032ba:	4303      	orrs	r3, r0
 80032bc:	9304      	str	r3, [sp, #16]
 80032be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032c2:	2206      	movs	r2, #6
 80032c4:	4826      	ldr	r0, [pc, #152]	; (8003360 <_svfiprintf_r+0x1f4>)
 80032c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032ca:	f000 f9e5 	bl	8003698 <memchr>
 80032ce:	2800      	cmp	r0, #0
 80032d0:	d038      	beq.n	8003344 <_svfiprintf_r+0x1d8>
 80032d2:	4b24      	ldr	r3, [pc, #144]	; (8003364 <_svfiprintf_r+0x1f8>)
 80032d4:	bb1b      	cbnz	r3, 800331e <_svfiprintf_r+0x1b2>
 80032d6:	9b03      	ldr	r3, [sp, #12]
 80032d8:	3307      	adds	r3, #7
 80032da:	f023 0307 	bic.w	r3, r3, #7
 80032de:	3308      	adds	r3, #8
 80032e0:	9303      	str	r3, [sp, #12]
 80032e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032e4:	4433      	add	r3, r6
 80032e6:	9309      	str	r3, [sp, #36]	; 0x24
 80032e8:	e767      	b.n	80031ba <_svfiprintf_r+0x4e>
 80032ea:	460c      	mov	r4, r1
 80032ec:	2001      	movs	r0, #1
 80032ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80032f2:	e7a5      	b.n	8003240 <_svfiprintf_r+0xd4>
 80032f4:	2300      	movs	r3, #0
 80032f6:	f04f 0c0a 	mov.w	ip, #10
 80032fa:	4619      	mov	r1, r3
 80032fc:	3401      	adds	r4, #1
 80032fe:	9305      	str	r3, [sp, #20]
 8003300:	4620      	mov	r0, r4
 8003302:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003306:	3a30      	subs	r2, #48	; 0x30
 8003308:	2a09      	cmp	r2, #9
 800330a:	d903      	bls.n	8003314 <_svfiprintf_r+0x1a8>
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0c5      	beq.n	800329c <_svfiprintf_r+0x130>
 8003310:	9105      	str	r1, [sp, #20]
 8003312:	e7c3      	b.n	800329c <_svfiprintf_r+0x130>
 8003314:	4604      	mov	r4, r0
 8003316:	2301      	movs	r3, #1
 8003318:	fb0c 2101 	mla	r1, ip, r1, r2
 800331c:	e7f0      	b.n	8003300 <_svfiprintf_r+0x194>
 800331e:	ab03      	add	r3, sp, #12
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	462a      	mov	r2, r5
 8003324:	4638      	mov	r0, r7
 8003326:	4b10      	ldr	r3, [pc, #64]	; (8003368 <_svfiprintf_r+0x1fc>)
 8003328:	a904      	add	r1, sp, #16
 800332a:	f3af 8000 	nop.w
 800332e:	1c42      	adds	r2, r0, #1
 8003330:	4606      	mov	r6, r0
 8003332:	d1d6      	bne.n	80032e2 <_svfiprintf_r+0x176>
 8003334:	89ab      	ldrh	r3, [r5, #12]
 8003336:	065b      	lsls	r3, r3, #25
 8003338:	f53f af2c 	bmi.w	8003194 <_svfiprintf_r+0x28>
 800333c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800333e:	b01d      	add	sp, #116	; 0x74
 8003340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003344:	ab03      	add	r3, sp, #12
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	462a      	mov	r2, r5
 800334a:	4638      	mov	r0, r7
 800334c:	4b06      	ldr	r3, [pc, #24]	; (8003368 <_svfiprintf_r+0x1fc>)
 800334e:	a904      	add	r1, sp, #16
 8003350:	f000 f87c 	bl	800344c <_printf_i>
 8003354:	e7eb      	b.n	800332e <_svfiprintf_r+0x1c2>
 8003356:	bf00      	nop
 8003358:	080039a8 	.word	0x080039a8
 800335c:	080039ae 	.word	0x080039ae
 8003360:	080039b2 	.word	0x080039b2
 8003364:	00000000 	.word	0x00000000
 8003368:	080030b5 	.word	0x080030b5

0800336c <_printf_common>:
 800336c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003370:	4616      	mov	r6, r2
 8003372:	4699      	mov	r9, r3
 8003374:	688a      	ldr	r2, [r1, #8]
 8003376:	690b      	ldr	r3, [r1, #16]
 8003378:	4607      	mov	r7, r0
 800337a:	4293      	cmp	r3, r2
 800337c:	bfb8      	it	lt
 800337e:	4613      	movlt	r3, r2
 8003380:	6033      	str	r3, [r6, #0]
 8003382:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003386:	460c      	mov	r4, r1
 8003388:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800338c:	b10a      	cbz	r2, 8003392 <_printf_common+0x26>
 800338e:	3301      	adds	r3, #1
 8003390:	6033      	str	r3, [r6, #0]
 8003392:	6823      	ldr	r3, [r4, #0]
 8003394:	0699      	lsls	r1, r3, #26
 8003396:	bf42      	ittt	mi
 8003398:	6833      	ldrmi	r3, [r6, #0]
 800339a:	3302      	addmi	r3, #2
 800339c:	6033      	strmi	r3, [r6, #0]
 800339e:	6825      	ldr	r5, [r4, #0]
 80033a0:	f015 0506 	ands.w	r5, r5, #6
 80033a4:	d106      	bne.n	80033b4 <_printf_common+0x48>
 80033a6:	f104 0a19 	add.w	sl, r4, #25
 80033aa:	68e3      	ldr	r3, [r4, #12]
 80033ac:	6832      	ldr	r2, [r6, #0]
 80033ae:	1a9b      	subs	r3, r3, r2
 80033b0:	42ab      	cmp	r3, r5
 80033b2:	dc28      	bgt.n	8003406 <_printf_common+0x9a>
 80033b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80033b8:	1e13      	subs	r3, r2, #0
 80033ba:	6822      	ldr	r2, [r4, #0]
 80033bc:	bf18      	it	ne
 80033be:	2301      	movne	r3, #1
 80033c0:	0692      	lsls	r2, r2, #26
 80033c2:	d42d      	bmi.n	8003420 <_printf_common+0xb4>
 80033c4:	4649      	mov	r1, r9
 80033c6:	4638      	mov	r0, r7
 80033c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033cc:	47c0      	blx	r8
 80033ce:	3001      	adds	r0, #1
 80033d0:	d020      	beq.n	8003414 <_printf_common+0xa8>
 80033d2:	6823      	ldr	r3, [r4, #0]
 80033d4:	68e5      	ldr	r5, [r4, #12]
 80033d6:	f003 0306 	and.w	r3, r3, #6
 80033da:	2b04      	cmp	r3, #4
 80033dc:	bf18      	it	ne
 80033de:	2500      	movne	r5, #0
 80033e0:	6832      	ldr	r2, [r6, #0]
 80033e2:	f04f 0600 	mov.w	r6, #0
 80033e6:	68a3      	ldr	r3, [r4, #8]
 80033e8:	bf08      	it	eq
 80033ea:	1aad      	subeq	r5, r5, r2
 80033ec:	6922      	ldr	r2, [r4, #16]
 80033ee:	bf08      	it	eq
 80033f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033f4:	4293      	cmp	r3, r2
 80033f6:	bfc4      	itt	gt
 80033f8:	1a9b      	subgt	r3, r3, r2
 80033fa:	18ed      	addgt	r5, r5, r3
 80033fc:	341a      	adds	r4, #26
 80033fe:	42b5      	cmp	r5, r6
 8003400:	d11a      	bne.n	8003438 <_printf_common+0xcc>
 8003402:	2000      	movs	r0, #0
 8003404:	e008      	b.n	8003418 <_printf_common+0xac>
 8003406:	2301      	movs	r3, #1
 8003408:	4652      	mov	r2, sl
 800340a:	4649      	mov	r1, r9
 800340c:	4638      	mov	r0, r7
 800340e:	47c0      	blx	r8
 8003410:	3001      	adds	r0, #1
 8003412:	d103      	bne.n	800341c <_printf_common+0xb0>
 8003414:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800341c:	3501      	adds	r5, #1
 800341e:	e7c4      	b.n	80033aa <_printf_common+0x3e>
 8003420:	2030      	movs	r0, #48	; 0x30
 8003422:	18e1      	adds	r1, r4, r3
 8003424:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800342e:	4422      	add	r2, r4
 8003430:	3302      	adds	r3, #2
 8003432:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003436:	e7c5      	b.n	80033c4 <_printf_common+0x58>
 8003438:	2301      	movs	r3, #1
 800343a:	4622      	mov	r2, r4
 800343c:	4649      	mov	r1, r9
 800343e:	4638      	mov	r0, r7
 8003440:	47c0      	blx	r8
 8003442:	3001      	adds	r0, #1
 8003444:	d0e6      	beq.n	8003414 <_printf_common+0xa8>
 8003446:	3601      	adds	r6, #1
 8003448:	e7d9      	b.n	80033fe <_printf_common+0x92>
	...

0800344c <_printf_i>:
 800344c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003450:	7e0f      	ldrb	r7, [r1, #24]
 8003452:	4691      	mov	r9, r2
 8003454:	2f78      	cmp	r7, #120	; 0x78
 8003456:	4680      	mov	r8, r0
 8003458:	460c      	mov	r4, r1
 800345a:	469a      	mov	sl, r3
 800345c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800345e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003462:	d807      	bhi.n	8003474 <_printf_i+0x28>
 8003464:	2f62      	cmp	r7, #98	; 0x62
 8003466:	d80a      	bhi.n	800347e <_printf_i+0x32>
 8003468:	2f00      	cmp	r7, #0
 800346a:	f000 80d9 	beq.w	8003620 <_printf_i+0x1d4>
 800346e:	2f58      	cmp	r7, #88	; 0x58
 8003470:	f000 80a4 	beq.w	80035bc <_printf_i+0x170>
 8003474:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003478:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800347c:	e03a      	b.n	80034f4 <_printf_i+0xa8>
 800347e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003482:	2b15      	cmp	r3, #21
 8003484:	d8f6      	bhi.n	8003474 <_printf_i+0x28>
 8003486:	a101      	add	r1, pc, #4	; (adr r1, 800348c <_printf_i+0x40>)
 8003488:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800348c:	080034e5 	.word	0x080034e5
 8003490:	080034f9 	.word	0x080034f9
 8003494:	08003475 	.word	0x08003475
 8003498:	08003475 	.word	0x08003475
 800349c:	08003475 	.word	0x08003475
 80034a0:	08003475 	.word	0x08003475
 80034a4:	080034f9 	.word	0x080034f9
 80034a8:	08003475 	.word	0x08003475
 80034ac:	08003475 	.word	0x08003475
 80034b0:	08003475 	.word	0x08003475
 80034b4:	08003475 	.word	0x08003475
 80034b8:	08003607 	.word	0x08003607
 80034bc:	08003529 	.word	0x08003529
 80034c0:	080035e9 	.word	0x080035e9
 80034c4:	08003475 	.word	0x08003475
 80034c8:	08003475 	.word	0x08003475
 80034cc:	08003629 	.word	0x08003629
 80034d0:	08003475 	.word	0x08003475
 80034d4:	08003529 	.word	0x08003529
 80034d8:	08003475 	.word	0x08003475
 80034dc:	08003475 	.word	0x08003475
 80034e0:	080035f1 	.word	0x080035f1
 80034e4:	682b      	ldr	r3, [r5, #0]
 80034e6:	1d1a      	adds	r2, r3, #4
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	602a      	str	r2, [r5, #0]
 80034ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0a4      	b.n	8003642 <_printf_i+0x1f6>
 80034f8:	6820      	ldr	r0, [r4, #0]
 80034fa:	6829      	ldr	r1, [r5, #0]
 80034fc:	0606      	lsls	r6, r0, #24
 80034fe:	f101 0304 	add.w	r3, r1, #4
 8003502:	d50a      	bpl.n	800351a <_printf_i+0xce>
 8003504:	680e      	ldr	r6, [r1, #0]
 8003506:	602b      	str	r3, [r5, #0]
 8003508:	2e00      	cmp	r6, #0
 800350a:	da03      	bge.n	8003514 <_printf_i+0xc8>
 800350c:	232d      	movs	r3, #45	; 0x2d
 800350e:	4276      	negs	r6, r6
 8003510:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003514:	230a      	movs	r3, #10
 8003516:	485e      	ldr	r0, [pc, #376]	; (8003690 <_printf_i+0x244>)
 8003518:	e019      	b.n	800354e <_printf_i+0x102>
 800351a:	680e      	ldr	r6, [r1, #0]
 800351c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003520:	602b      	str	r3, [r5, #0]
 8003522:	bf18      	it	ne
 8003524:	b236      	sxthne	r6, r6
 8003526:	e7ef      	b.n	8003508 <_printf_i+0xbc>
 8003528:	682b      	ldr	r3, [r5, #0]
 800352a:	6820      	ldr	r0, [r4, #0]
 800352c:	1d19      	adds	r1, r3, #4
 800352e:	6029      	str	r1, [r5, #0]
 8003530:	0601      	lsls	r1, r0, #24
 8003532:	d501      	bpl.n	8003538 <_printf_i+0xec>
 8003534:	681e      	ldr	r6, [r3, #0]
 8003536:	e002      	b.n	800353e <_printf_i+0xf2>
 8003538:	0646      	lsls	r6, r0, #25
 800353a:	d5fb      	bpl.n	8003534 <_printf_i+0xe8>
 800353c:	881e      	ldrh	r6, [r3, #0]
 800353e:	2f6f      	cmp	r7, #111	; 0x6f
 8003540:	bf0c      	ite	eq
 8003542:	2308      	moveq	r3, #8
 8003544:	230a      	movne	r3, #10
 8003546:	4852      	ldr	r0, [pc, #328]	; (8003690 <_printf_i+0x244>)
 8003548:	2100      	movs	r1, #0
 800354a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800354e:	6865      	ldr	r5, [r4, #4]
 8003550:	2d00      	cmp	r5, #0
 8003552:	bfa8      	it	ge
 8003554:	6821      	ldrge	r1, [r4, #0]
 8003556:	60a5      	str	r5, [r4, #8]
 8003558:	bfa4      	itt	ge
 800355a:	f021 0104 	bicge.w	r1, r1, #4
 800355e:	6021      	strge	r1, [r4, #0]
 8003560:	b90e      	cbnz	r6, 8003566 <_printf_i+0x11a>
 8003562:	2d00      	cmp	r5, #0
 8003564:	d04d      	beq.n	8003602 <_printf_i+0x1b6>
 8003566:	4615      	mov	r5, r2
 8003568:	fbb6 f1f3 	udiv	r1, r6, r3
 800356c:	fb03 6711 	mls	r7, r3, r1, r6
 8003570:	5dc7      	ldrb	r7, [r0, r7]
 8003572:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003576:	4637      	mov	r7, r6
 8003578:	42bb      	cmp	r3, r7
 800357a:	460e      	mov	r6, r1
 800357c:	d9f4      	bls.n	8003568 <_printf_i+0x11c>
 800357e:	2b08      	cmp	r3, #8
 8003580:	d10b      	bne.n	800359a <_printf_i+0x14e>
 8003582:	6823      	ldr	r3, [r4, #0]
 8003584:	07de      	lsls	r6, r3, #31
 8003586:	d508      	bpl.n	800359a <_printf_i+0x14e>
 8003588:	6923      	ldr	r3, [r4, #16]
 800358a:	6861      	ldr	r1, [r4, #4]
 800358c:	4299      	cmp	r1, r3
 800358e:	bfde      	ittt	le
 8003590:	2330      	movle	r3, #48	; 0x30
 8003592:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003596:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800359a:	1b52      	subs	r2, r2, r5
 800359c:	6122      	str	r2, [r4, #16]
 800359e:	464b      	mov	r3, r9
 80035a0:	4621      	mov	r1, r4
 80035a2:	4640      	mov	r0, r8
 80035a4:	f8cd a000 	str.w	sl, [sp]
 80035a8:	aa03      	add	r2, sp, #12
 80035aa:	f7ff fedf 	bl	800336c <_printf_common>
 80035ae:	3001      	adds	r0, #1
 80035b0:	d14c      	bne.n	800364c <_printf_i+0x200>
 80035b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035b6:	b004      	add	sp, #16
 80035b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035bc:	4834      	ldr	r0, [pc, #208]	; (8003690 <_printf_i+0x244>)
 80035be:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80035c2:	6829      	ldr	r1, [r5, #0]
 80035c4:	6823      	ldr	r3, [r4, #0]
 80035c6:	f851 6b04 	ldr.w	r6, [r1], #4
 80035ca:	6029      	str	r1, [r5, #0]
 80035cc:	061d      	lsls	r5, r3, #24
 80035ce:	d514      	bpl.n	80035fa <_printf_i+0x1ae>
 80035d0:	07df      	lsls	r7, r3, #31
 80035d2:	bf44      	itt	mi
 80035d4:	f043 0320 	orrmi.w	r3, r3, #32
 80035d8:	6023      	strmi	r3, [r4, #0]
 80035da:	b91e      	cbnz	r6, 80035e4 <_printf_i+0x198>
 80035dc:	6823      	ldr	r3, [r4, #0]
 80035de:	f023 0320 	bic.w	r3, r3, #32
 80035e2:	6023      	str	r3, [r4, #0]
 80035e4:	2310      	movs	r3, #16
 80035e6:	e7af      	b.n	8003548 <_printf_i+0xfc>
 80035e8:	6823      	ldr	r3, [r4, #0]
 80035ea:	f043 0320 	orr.w	r3, r3, #32
 80035ee:	6023      	str	r3, [r4, #0]
 80035f0:	2378      	movs	r3, #120	; 0x78
 80035f2:	4828      	ldr	r0, [pc, #160]	; (8003694 <_printf_i+0x248>)
 80035f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80035f8:	e7e3      	b.n	80035c2 <_printf_i+0x176>
 80035fa:	0659      	lsls	r1, r3, #25
 80035fc:	bf48      	it	mi
 80035fe:	b2b6      	uxthmi	r6, r6
 8003600:	e7e6      	b.n	80035d0 <_printf_i+0x184>
 8003602:	4615      	mov	r5, r2
 8003604:	e7bb      	b.n	800357e <_printf_i+0x132>
 8003606:	682b      	ldr	r3, [r5, #0]
 8003608:	6826      	ldr	r6, [r4, #0]
 800360a:	1d18      	adds	r0, r3, #4
 800360c:	6961      	ldr	r1, [r4, #20]
 800360e:	6028      	str	r0, [r5, #0]
 8003610:	0635      	lsls	r5, r6, #24
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	d501      	bpl.n	800361a <_printf_i+0x1ce>
 8003616:	6019      	str	r1, [r3, #0]
 8003618:	e002      	b.n	8003620 <_printf_i+0x1d4>
 800361a:	0670      	lsls	r0, r6, #25
 800361c:	d5fb      	bpl.n	8003616 <_printf_i+0x1ca>
 800361e:	8019      	strh	r1, [r3, #0]
 8003620:	2300      	movs	r3, #0
 8003622:	4615      	mov	r5, r2
 8003624:	6123      	str	r3, [r4, #16]
 8003626:	e7ba      	b.n	800359e <_printf_i+0x152>
 8003628:	682b      	ldr	r3, [r5, #0]
 800362a:	2100      	movs	r1, #0
 800362c:	1d1a      	adds	r2, r3, #4
 800362e:	602a      	str	r2, [r5, #0]
 8003630:	681d      	ldr	r5, [r3, #0]
 8003632:	6862      	ldr	r2, [r4, #4]
 8003634:	4628      	mov	r0, r5
 8003636:	f000 f82f 	bl	8003698 <memchr>
 800363a:	b108      	cbz	r0, 8003640 <_printf_i+0x1f4>
 800363c:	1b40      	subs	r0, r0, r5
 800363e:	6060      	str	r0, [r4, #4]
 8003640:	6863      	ldr	r3, [r4, #4]
 8003642:	6123      	str	r3, [r4, #16]
 8003644:	2300      	movs	r3, #0
 8003646:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800364a:	e7a8      	b.n	800359e <_printf_i+0x152>
 800364c:	462a      	mov	r2, r5
 800364e:	4649      	mov	r1, r9
 8003650:	4640      	mov	r0, r8
 8003652:	6923      	ldr	r3, [r4, #16]
 8003654:	47d0      	blx	sl
 8003656:	3001      	adds	r0, #1
 8003658:	d0ab      	beq.n	80035b2 <_printf_i+0x166>
 800365a:	6823      	ldr	r3, [r4, #0]
 800365c:	079b      	lsls	r3, r3, #30
 800365e:	d413      	bmi.n	8003688 <_printf_i+0x23c>
 8003660:	68e0      	ldr	r0, [r4, #12]
 8003662:	9b03      	ldr	r3, [sp, #12]
 8003664:	4298      	cmp	r0, r3
 8003666:	bfb8      	it	lt
 8003668:	4618      	movlt	r0, r3
 800366a:	e7a4      	b.n	80035b6 <_printf_i+0x16a>
 800366c:	2301      	movs	r3, #1
 800366e:	4632      	mov	r2, r6
 8003670:	4649      	mov	r1, r9
 8003672:	4640      	mov	r0, r8
 8003674:	47d0      	blx	sl
 8003676:	3001      	adds	r0, #1
 8003678:	d09b      	beq.n	80035b2 <_printf_i+0x166>
 800367a:	3501      	adds	r5, #1
 800367c:	68e3      	ldr	r3, [r4, #12]
 800367e:	9903      	ldr	r1, [sp, #12]
 8003680:	1a5b      	subs	r3, r3, r1
 8003682:	42ab      	cmp	r3, r5
 8003684:	dcf2      	bgt.n	800366c <_printf_i+0x220>
 8003686:	e7eb      	b.n	8003660 <_printf_i+0x214>
 8003688:	2500      	movs	r5, #0
 800368a:	f104 0619 	add.w	r6, r4, #25
 800368e:	e7f5      	b.n	800367c <_printf_i+0x230>
 8003690:	080039b9 	.word	0x080039b9
 8003694:	080039ca 	.word	0x080039ca

08003698 <memchr>:
 8003698:	4603      	mov	r3, r0
 800369a:	b510      	push	{r4, lr}
 800369c:	b2c9      	uxtb	r1, r1
 800369e:	4402      	add	r2, r0
 80036a0:	4293      	cmp	r3, r2
 80036a2:	4618      	mov	r0, r3
 80036a4:	d101      	bne.n	80036aa <memchr+0x12>
 80036a6:	2000      	movs	r0, #0
 80036a8:	e003      	b.n	80036b2 <memchr+0x1a>
 80036aa:	7804      	ldrb	r4, [r0, #0]
 80036ac:	3301      	adds	r3, #1
 80036ae:	428c      	cmp	r4, r1
 80036b0:	d1f6      	bne.n	80036a0 <memchr+0x8>
 80036b2:	bd10      	pop	{r4, pc}

080036b4 <memmove>:
 80036b4:	4288      	cmp	r0, r1
 80036b6:	b510      	push	{r4, lr}
 80036b8:	eb01 0402 	add.w	r4, r1, r2
 80036bc:	d902      	bls.n	80036c4 <memmove+0x10>
 80036be:	4284      	cmp	r4, r0
 80036c0:	4623      	mov	r3, r4
 80036c2:	d807      	bhi.n	80036d4 <memmove+0x20>
 80036c4:	1e43      	subs	r3, r0, #1
 80036c6:	42a1      	cmp	r1, r4
 80036c8:	d008      	beq.n	80036dc <memmove+0x28>
 80036ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80036d2:	e7f8      	b.n	80036c6 <memmove+0x12>
 80036d4:	4601      	mov	r1, r0
 80036d6:	4402      	add	r2, r0
 80036d8:	428a      	cmp	r2, r1
 80036da:	d100      	bne.n	80036de <memmove+0x2a>
 80036dc:	bd10      	pop	{r4, pc}
 80036de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80036e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80036e6:	e7f7      	b.n	80036d8 <memmove+0x24>

080036e8 <_free_r>:
 80036e8:	b538      	push	{r3, r4, r5, lr}
 80036ea:	4605      	mov	r5, r0
 80036ec:	2900      	cmp	r1, #0
 80036ee:	d040      	beq.n	8003772 <_free_r+0x8a>
 80036f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036f4:	1f0c      	subs	r4, r1, #4
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	bfb8      	it	lt
 80036fa:	18e4      	addlt	r4, r4, r3
 80036fc:	f000 f910 	bl	8003920 <__malloc_lock>
 8003700:	4a1c      	ldr	r2, [pc, #112]	; (8003774 <_free_r+0x8c>)
 8003702:	6813      	ldr	r3, [r2, #0]
 8003704:	b933      	cbnz	r3, 8003714 <_free_r+0x2c>
 8003706:	6063      	str	r3, [r4, #4]
 8003708:	6014      	str	r4, [r2, #0]
 800370a:	4628      	mov	r0, r5
 800370c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003710:	f000 b90c 	b.w	800392c <__malloc_unlock>
 8003714:	42a3      	cmp	r3, r4
 8003716:	d908      	bls.n	800372a <_free_r+0x42>
 8003718:	6820      	ldr	r0, [r4, #0]
 800371a:	1821      	adds	r1, r4, r0
 800371c:	428b      	cmp	r3, r1
 800371e:	bf01      	itttt	eq
 8003720:	6819      	ldreq	r1, [r3, #0]
 8003722:	685b      	ldreq	r3, [r3, #4]
 8003724:	1809      	addeq	r1, r1, r0
 8003726:	6021      	streq	r1, [r4, #0]
 8003728:	e7ed      	b.n	8003706 <_free_r+0x1e>
 800372a:	461a      	mov	r2, r3
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	b10b      	cbz	r3, 8003734 <_free_r+0x4c>
 8003730:	42a3      	cmp	r3, r4
 8003732:	d9fa      	bls.n	800372a <_free_r+0x42>
 8003734:	6811      	ldr	r1, [r2, #0]
 8003736:	1850      	adds	r0, r2, r1
 8003738:	42a0      	cmp	r0, r4
 800373a:	d10b      	bne.n	8003754 <_free_r+0x6c>
 800373c:	6820      	ldr	r0, [r4, #0]
 800373e:	4401      	add	r1, r0
 8003740:	1850      	adds	r0, r2, r1
 8003742:	4283      	cmp	r3, r0
 8003744:	6011      	str	r1, [r2, #0]
 8003746:	d1e0      	bne.n	800370a <_free_r+0x22>
 8003748:	6818      	ldr	r0, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	4401      	add	r1, r0
 800374e:	6011      	str	r1, [r2, #0]
 8003750:	6053      	str	r3, [r2, #4]
 8003752:	e7da      	b.n	800370a <_free_r+0x22>
 8003754:	d902      	bls.n	800375c <_free_r+0x74>
 8003756:	230c      	movs	r3, #12
 8003758:	602b      	str	r3, [r5, #0]
 800375a:	e7d6      	b.n	800370a <_free_r+0x22>
 800375c:	6820      	ldr	r0, [r4, #0]
 800375e:	1821      	adds	r1, r4, r0
 8003760:	428b      	cmp	r3, r1
 8003762:	bf01      	itttt	eq
 8003764:	6819      	ldreq	r1, [r3, #0]
 8003766:	685b      	ldreq	r3, [r3, #4]
 8003768:	1809      	addeq	r1, r1, r0
 800376a:	6021      	streq	r1, [r4, #0]
 800376c:	6063      	str	r3, [r4, #4]
 800376e:	6054      	str	r4, [r2, #4]
 8003770:	e7cb      	b.n	800370a <_free_r+0x22>
 8003772:	bd38      	pop	{r3, r4, r5, pc}
 8003774:	2000205c 	.word	0x2000205c

08003778 <sbrk_aligned>:
 8003778:	b570      	push	{r4, r5, r6, lr}
 800377a:	4e0e      	ldr	r6, [pc, #56]	; (80037b4 <sbrk_aligned+0x3c>)
 800377c:	460c      	mov	r4, r1
 800377e:	6831      	ldr	r1, [r6, #0]
 8003780:	4605      	mov	r5, r0
 8003782:	b911      	cbnz	r1, 800378a <sbrk_aligned+0x12>
 8003784:	f000 f8bc 	bl	8003900 <_sbrk_r>
 8003788:	6030      	str	r0, [r6, #0]
 800378a:	4621      	mov	r1, r4
 800378c:	4628      	mov	r0, r5
 800378e:	f000 f8b7 	bl	8003900 <_sbrk_r>
 8003792:	1c43      	adds	r3, r0, #1
 8003794:	d00a      	beq.n	80037ac <sbrk_aligned+0x34>
 8003796:	1cc4      	adds	r4, r0, #3
 8003798:	f024 0403 	bic.w	r4, r4, #3
 800379c:	42a0      	cmp	r0, r4
 800379e:	d007      	beq.n	80037b0 <sbrk_aligned+0x38>
 80037a0:	1a21      	subs	r1, r4, r0
 80037a2:	4628      	mov	r0, r5
 80037a4:	f000 f8ac 	bl	8003900 <_sbrk_r>
 80037a8:	3001      	adds	r0, #1
 80037aa:	d101      	bne.n	80037b0 <sbrk_aligned+0x38>
 80037ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80037b0:	4620      	mov	r0, r4
 80037b2:	bd70      	pop	{r4, r5, r6, pc}
 80037b4:	20002060 	.word	0x20002060

080037b8 <_malloc_r>:
 80037b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037bc:	1ccd      	adds	r5, r1, #3
 80037be:	f025 0503 	bic.w	r5, r5, #3
 80037c2:	3508      	adds	r5, #8
 80037c4:	2d0c      	cmp	r5, #12
 80037c6:	bf38      	it	cc
 80037c8:	250c      	movcc	r5, #12
 80037ca:	2d00      	cmp	r5, #0
 80037cc:	4607      	mov	r7, r0
 80037ce:	db01      	blt.n	80037d4 <_malloc_r+0x1c>
 80037d0:	42a9      	cmp	r1, r5
 80037d2:	d905      	bls.n	80037e0 <_malloc_r+0x28>
 80037d4:	230c      	movs	r3, #12
 80037d6:	2600      	movs	r6, #0
 80037d8:	603b      	str	r3, [r7, #0]
 80037da:	4630      	mov	r0, r6
 80037dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037e0:	4e2e      	ldr	r6, [pc, #184]	; (800389c <_malloc_r+0xe4>)
 80037e2:	f000 f89d 	bl	8003920 <__malloc_lock>
 80037e6:	6833      	ldr	r3, [r6, #0]
 80037e8:	461c      	mov	r4, r3
 80037ea:	bb34      	cbnz	r4, 800383a <_malloc_r+0x82>
 80037ec:	4629      	mov	r1, r5
 80037ee:	4638      	mov	r0, r7
 80037f0:	f7ff ffc2 	bl	8003778 <sbrk_aligned>
 80037f4:	1c43      	adds	r3, r0, #1
 80037f6:	4604      	mov	r4, r0
 80037f8:	d14d      	bne.n	8003896 <_malloc_r+0xde>
 80037fa:	6834      	ldr	r4, [r6, #0]
 80037fc:	4626      	mov	r6, r4
 80037fe:	2e00      	cmp	r6, #0
 8003800:	d140      	bne.n	8003884 <_malloc_r+0xcc>
 8003802:	6823      	ldr	r3, [r4, #0]
 8003804:	4631      	mov	r1, r6
 8003806:	4638      	mov	r0, r7
 8003808:	eb04 0803 	add.w	r8, r4, r3
 800380c:	f000 f878 	bl	8003900 <_sbrk_r>
 8003810:	4580      	cmp	r8, r0
 8003812:	d13a      	bne.n	800388a <_malloc_r+0xd2>
 8003814:	6821      	ldr	r1, [r4, #0]
 8003816:	3503      	adds	r5, #3
 8003818:	1a6d      	subs	r5, r5, r1
 800381a:	f025 0503 	bic.w	r5, r5, #3
 800381e:	3508      	adds	r5, #8
 8003820:	2d0c      	cmp	r5, #12
 8003822:	bf38      	it	cc
 8003824:	250c      	movcc	r5, #12
 8003826:	4638      	mov	r0, r7
 8003828:	4629      	mov	r1, r5
 800382a:	f7ff ffa5 	bl	8003778 <sbrk_aligned>
 800382e:	3001      	adds	r0, #1
 8003830:	d02b      	beq.n	800388a <_malloc_r+0xd2>
 8003832:	6823      	ldr	r3, [r4, #0]
 8003834:	442b      	add	r3, r5
 8003836:	6023      	str	r3, [r4, #0]
 8003838:	e00e      	b.n	8003858 <_malloc_r+0xa0>
 800383a:	6822      	ldr	r2, [r4, #0]
 800383c:	1b52      	subs	r2, r2, r5
 800383e:	d41e      	bmi.n	800387e <_malloc_r+0xc6>
 8003840:	2a0b      	cmp	r2, #11
 8003842:	d916      	bls.n	8003872 <_malloc_r+0xba>
 8003844:	1961      	adds	r1, r4, r5
 8003846:	42a3      	cmp	r3, r4
 8003848:	6025      	str	r5, [r4, #0]
 800384a:	bf18      	it	ne
 800384c:	6059      	strne	r1, [r3, #4]
 800384e:	6863      	ldr	r3, [r4, #4]
 8003850:	bf08      	it	eq
 8003852:	6031      	streq	r1, [r6, #0]
 8003854:	5162      	str	r2, [r4, r5]
 8003856:	604b      	str	r3, [r1, #4]
 8003858:	4638      	mov	r0, r7
 800385a:	f104 060b 	add.w	r6, r4, #11
 800385e:	f000 f865 	bl	800392c <__malloc_unlock>
 8003862:	f026 0607 	bic.w	r6, r6, #7
 8003866:	1d23      	adds	r3, r4, #4
 8003868:	1af2      	subs	r2, r6, r3
 800386a:	d0b6      	beq.n	80037da <_malloc_r+0x22>
 800386c:	1b9b      	subs	r3, r3, r6
 800386e:	50a3      	str	r3, [r4, r2]
 8003870:	e7b3      	b.n	80037da <_malloc_r+0x22>
 8003872:	6862      	ldr	r2, [r4, #4]
 8003874:	42a3      	cmp	r3, r4
 8003876:	bf0c      	ite	eq
 8003878:	6032      	streq	r2, [r6, #0]
 800387a:	605a      	strne	r2, [r3, #4]
 800387c:	e7ec      	b.n	8003858 <_malloc_r+0xa0>
 800387e:	4623      	mov	r3, r4
 8003880:	6864      	ldr	r4, [r4, #4]
 8003882:	e7b2      	b.n	80037ea <_malloc_r+0x32>
 8003884:	4634      	mov	r4, r6
 8003886:	6876      	ldr	r6, [r6, #4]
 8003888:	e7b9      	b.n	80037fe <_malloc_r+0x46>
 800388a:	230c      	movs	r3, #12
 800388c:	4638      	mov	r0, r7
 800388e:	603b      	str	r3, [r7, #0]
 8003890:	f000 f84c 	bl	800392c <__malloc_unlock>
 8003894:	e7a1      	b.n	80037da <_malloc_r+0x22>
 8003896:	6025      	str	r5, [r4, #0]
 8003898:	e7de      	b.n	8003858 <_malloc_r+0xa0>
 800389a:	bf00      	nop
 800389c:	2000205c 	.word	0x2000205c

080038a0 <_realloc_r>:
 80038a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038a4:	4680      	mov	r8, r0
 80038a6:	4614      	mov	r4, r2
 80038a8:	460e      	mov	r6, r1
 80038aa:	b921      	cbnz	r1, 80038b6 <_realloc_r+0x16>
 80038ac:	4611      	mov	r1, r2
 80038ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038b2:	f7ff bf81 	b.w	80037b8 <_malloc_r>
 80038b6:	b92a      	cbnz	r2, 80038c4 <_realloc_r+0x24>
 80038b8:	f7ff ff16 	bl	80036e8 <_free_r>
 80038bc:	4625      	mov	r5, r4
 80038be:	4628      	mov	r0, r5
 80038c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038c4:	f000 f838 	bl	8003938 <_malloc_usable_size_r>
 80038c8:	4284      	cmp	r4, r0
 80038ca:	4607      	mov	r7, r0
 80038cc:	d802      	bhi.n	80038d4 <_realloc_r+0x34>
 80038ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80038d2:	d812      	bhi.n	80038fa <_realloc_r+0x5a>
 80038d4:	4621      	mov	r1, r4
 80038d6:	4640      	mov	r0, r8
 80038d8:	f7ff ff6e 	bl	80037b8 <_malloc_r>
 80038dc:	4605      	mov	r5, r0
 80038de:	2800      	cmp	r0, #0
 80038e0:	d0ed      	beq.n	80038be <_realloc_r+0x1e>
 80038e2:	42bc      	cmp	r4, r7
 80038e4:	4622      	mov	r2, r4
 80038e6:	4631      	mov	r1, r6
 80038e8:	bf28      	it	cs
 80038ea:	463a      	movcs	r2, r7
 80038ec:	f7ff fbac 	bl	8003048 <memcpy>
 80038f0:	4631      	mov	r1, r6
 80038f2:	4640      	mov	r0, r8
 80038f4:	f7ff fef8 	bl	80036e8 <_free_r>
 80038f8:	e7e1      	b.n	80038be <_realloc_r+0x1e>
 80038fa:	4635      	mov	r5, r6
 80038fc:	e7df      	b.n	80038be <_realloc_r+0x1e>
	...

08003900 <_sbrk_r>:
 8003900:	b538      	push	{r3, r4, r5, lr}
 8003902:	2300      	movs	r3, #0
 8003904:	4d05      	ldr	r5, [pc, #20]	; (800391c <_sbrk_r+0x1c>)
 8003906:	4604      	mov	r4, r0
 8003908:	4608      	mov	r0, r1
 800390a:	602b      	str	r3, [r5, #0]
 800390c:	f7fc ffba 	bl	8000884 <_sbrk>
 8003910:	1c43      	adds	r3, r0, #1
 8003912:	d102      	bne.n	800391a <_sbrk_r+0x1a>
 8003914:	682b      	ldr	r3, [r5, #0]
 8003916:	b103      	cbz	r3, 800391a <_sbrk_r+0x1a>
 8003918:	6023      	str	r3, [r4, #0]
 800391a:	bd38      	pop	{r3, r4, r5, pc}
 800391c:	20002064 	.word	0x20002064

08003920 <__malloc_lock>:
 8003920:	4801      	ldr	r0, [pc, #4]	; (8003928 <__malloc_lock+0x8>)
 8003922:	f000 b811 	b.w	8003948 <__retarget_lock_acquire_recursive>
 8003926:	bf00      	nop
 8003928:	20002068 	.word	0x20002068

0800392c <__malloc_unlock>:
 800392c:	4801      	ldr	r0, [pc, #4]	; (8003934 <__malloc_unlock+0x8>)
 800392e:	f000 b80c 	b.w	800394a <__retarget_lock_release_recursive>
 8003932:	bf00      	nop
 8003934:	20002068 	.word	0x20002068

08003938 <_malloc_usable_size_r>:
 8003938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800393c:	1f18      	subs	r0, r3, #4
 800393e:	2b00      	cmp	r3, #0
 8003940:	bfbc      	itt	lt
 8003942:	580b      	ldrlt	r3, [r1, r0]
 8003944:	18c0      	addlt	r0, r0, r3
 8003946:	4770      	bx	lr

08003948 <__retarget_lock_acquire_recursive>:
 8003948:	4770      	bx	lr

0800394a <__retarget_lock_release_recursive>:
 800394a:	4770      	bx	lr

0800394c <_init>:
 800394c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800394e:	bf00      	nop
 8003950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003952:	bc08      	pop	{r3}
 8003954:	469e      	mov	lr, r3
 8003956:	4770      	bx	lr

08003958 <_fini>:
 8003958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395a:	bf00      	nop
 800395c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800395e:	bc08      	pop	{r3}
 8003960:	469e      	mov	lr, r3
 8003962:	4770      	bx	lr
