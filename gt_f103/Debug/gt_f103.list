
gt_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b34  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003c40  08003c40  00013c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cac  08003cac  00020b94  2**0
                  CONTENTS
  4 .ARM          00000000  08003cac  08003cac  00020b94  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cac  08003cac  00020b94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cac  08003cac  00013cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cb0  08003cb0  00013cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b94  20000000  08003cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002218  20000b94  08004848  00020b94  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002dac  08004848  00022dac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020b94  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009931  00000000  00000000  00020bbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002009  00000000  00000000  0002a4ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  0002c4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002cf00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c0c  00000000  00000000  0002d830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b66e  00000000  00000000  0004543c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084911  00000000  00000000  00050aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d53bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b80  00000000  00000000  000d540c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000b94 	.word	0x20000b94
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c28 	.word	0x08003c28

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000b98 	.word	0x20000b98
 8000148:	08003c28 	.word	0x08003c28

0800014c <HAL_UART_RxHalfCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b0c4      	sub	sp, #272	; 0x110
 8000150:	af00      	add	r7, sp, #0
 8000152:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000156:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800015a:	6018      	str	r0, [r3, #0]
	UNUSED(huart);
	Command command;
	memcpy(&command, hcommander.uart_rx_buffer, COMMAND_BYTESIZE);
 800015c:	f107 030c 	add.w	r3, r7, #12
 8000160:	f240 1203 	movw	r2, #259	; 0x103
 8000164:	4907      	ldr	r1, [pc, #28]	; (8000184 <HAL_UART_RxHalfCpltCallback+0x38>)
 8000166:	4618      	mov	r0, r3
 8000168:	f003 f8dc 	bl	8003324 <memcpy>
	Commander_Enqueue(&hcommander, &command);
 800016c:	f107 030c 	add.w	r3, r7, #12
 8000170:	4619      	mov	r1, r3
 8000172:	4805      	ldr	r0, [pc, #20]	; (8000188 <HAL_UART_RxHalfCpltCallback+0x3c>)
 8000174:	f000 fc88 	bl	8000a88 <Commander_Enqueue>
}
 8000178:	bf00      	nop
 800017a:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800017e:	46bd      	mov	sp, r7
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	20000c98 	.word	0x20000c98
 8000188:	20000c90 	.word	0x20000c90

0800018c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b0c4      	sub	sp, #272	; 0x110
 8000190:	af00      	add	r7, sp, #0
 8000192:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000196:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800019a:	6018      	str	r0, [r3, #0]
	UNUSED(huart);
	Command command;
	memcpy(&command, hcommander.uart_rx_buffer + COMMAND_BYTESIZE, COMMAND_BYTESIZE);
 800019c:	4909      	ldr	r1, [pc, #36]	; (80001c4 <HAL_UART_RxCpltCallback+0x38>)
 800019e:	f107 030c 	add.w	r3, r7, #12
 80001a2:	f240 1203 	movw	r2, #259	; 0x103
 80001a6:	4618      	mov	r0, r3
 80001a8:	f003 f8bc 	bl	8003324 <memcpy>
	Commander_Enqueue(&hcommander, &command);
 80001ac:	f107 030c 	add.w	r3, r7, #12
 80001b0:	4619      	mov	r1, r3
 80001b2:	4805      	ldr	r0, [pc, #20]	; (80001c8 <HAL_UART_RxCpltCallback+0x3c>)
 80001b4:	f000 fc68 	bl	8000a88 <Commander_Enqueue>
}
 80001b8:	bf00      	nop
 80001ba:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	20000d9b 	.word	0x20000d9b
 80001c8:	20000c90 	.word	0x20000c90

080001cc <command_callback>:

void command_callback(Command command) {
 80001cc:	b084      	sub	sp, #16
 80001ce:	b580      	push	{r7, lr}
 80001d0:	b088      	sub	sp, #32
 80001d2:	af02      	add	r7, sp, #8
 80001d4:	f107 0c20 	add.w	ip, r7, #32
 80001d8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	if (command.header == 0x05) {
 80001dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80001e0:	2b05      	cmp	r3, #5
 80001e2:	d120      	bne.n	8000226 <command_callback+0x5a>
		EPD_Init(&hepd1);
 80001e4:	4813      	ldr	r0, [pc, #76]	; (8000234 <command_callback+0x68>)
 80001e6:	f000 fe07 	bl	8000df8 <EPD_Init>
		//char row[16+1];
		//draw_clean(hepd1.image);
		//sprintf(row, "g33ky toad");
		//draw_text(hepd1.image, row, 40, 60);
		char row[16+1];
		sprintf(row, "g33ky toad @@");
 80001ea:	1d3b      	adds	r3, r7, #4
 80001ec:	4912      	ldr	r1, [pc, #72]	; (8000238 <command_callback+0x6c>)
 80001ee:	4618      	mov	r0, r3
 80001f0:	f003 f8ae 	bl	8003350 <siprintf>
		Painter_WriteString(hepd1.image, row, 20, 50, TOP_LEFT, LARGE);
 80001f4:	1d39      	adds	r1, r7, #4
 80001f6:	2301      	movs	r3, #1
 80001f8:	9301      	str	r3, [sp, #4]
 80001fa:	2300      	movs	r3, #0
 80001fc:	9300      	str	r3, [sp, #0]
 80001fe:	2332      	movs	r3, #50	; 0x32
 8000200:	2214      	movs	r2, #20
 8000202:	480e      	ldr	r0, [pc, #56]	; (800023c <command_callback+0x70>)
 8000204:	f001 f823 	bl	800124e <Painter_WriteString>
		Painter_ToggleCanvas(hepd1.image);
 8000208:	480c      	ldr	r0, [pc, #48]	; (800023c <command_callback+0x70>)
 800020a:	f001 f903 	bl	8001414 <Painter_ToggleCanvas>
		EPD_Display_Partial(&hepd1);
 800020e:	4809      	ldr	r0, [pc, #36]	; (8000234 <command_callback+0x68>)
 8000210:	f000 fe82 	bl	8000f18 <EPD_Display_Partial>
		Painter_ToggleCanvas(hepd1.image);
 8000214:	4809      	ldr	r0, [pc, #36]	; (800023c <command_callback+0x70>)
 8000216:	f001 f8fd 	bl	8001414 <Painter_ToggleCanvas>
		EPD_Display_Partial(&hepd1);
 800021a:	4806      	ldr	r0, [pc, #24]	; (8000234 <command_callback+0x68>)
 800021c:	f000 fe7c 	bl	8000f18 <EPD_Display_Partial>
		EPD_Sleep(&hepd1);
 8000220:	4804      	ldr	r0, [pc, #16]	; (8000234 <command_callback+0x68>)
 8000222:	f000 feed 	bl	8001000 <EPD_Sleep>
	}

}
 8000226:	bf00      	nop
 8000228:	3718      	adds	r7, #24
 800022a:	46bd      	mov	sp, r7
 800022c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr
 8000234:	200018d4 	.word	0x200018d4
 8000238:	08003c40 	.word	0x08003c40
 800023c:	200018d6 	.word	0x200018d6

08000240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000240:	b590      	push	{r4, r7, lr}
 8000242:	b08b      	sub	sp, #44	; 0x2c
 8000244:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000246:	f001 fa17 	bl	8001678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024a:	f000 f8a5 	bl	8000398 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024e:	f000 f969 	bl	8000524 <MX_GPIO_Init>
  MX_DMA_Init();
 8000252:	f000 f949 	bl	80004e8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000256:	f000 f91d 	bl	8000494 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 800025a:	f000 f8e3 	bl	8000424 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	Commander_Init(&hcommander, &huart3, &hdma_usart3_rx, command_callback);
 800025e:	4b40      	ldr	r3, [pc, #256]	; (8000360 <main+0x120>)
 8000260:	4a40      	ldr	r2, [pc, #256]	; (8000364 <main+0x124>)
 8000262:	4941      	ldr	r1, [pc, #260]	; (8000368 <main+0x128>)
 8000264:	4841      	ldr	r0, [pc, #260]	; (800036c <main+0x12c>)
 8000266:	f000 fb84 	bl	8000972 <Commander_Init>
	Commander_Start(&hcommander);
 800026a:	4840      	ldr	r0, [pc, #256]	; (800036c <main+0x12c>)
 800026c:	f000 fba7 	bl	80009be <Commander_Start>

	RE_Init(&hre1, ENC1A_GPIO_Port, ENC1B_GPIO_Port, ENC1A_Pin, ENC1B_Pin, 1);
 8000270:	2301      	movs	r3, #1
 8000272:	9301      	str	r3, [sp, #4]
 8000274:	2340      	movs	r3, #64	; 0x40
 8000276:	9300      	str	r3, [sp, #0]
 8000278:	2380      	movs	r3, #128	; 0x80
 800027a:	4a3d      	ldr	r2, [pc, #244]	; (8000370 <main+0x130>)
 800027c:	493c      	ldr	r1, [pc, #240]	; (8000370 <main+0x130>)
 800027e:	483d      	ldr	r0, [pc, #244]	; (8000374 <main+0x134>)
 8000280:	f001 f8e9 	bl	8001456 <RE_Init>
	RE_Init(&hre2, ENC2A_GPIO_Port, ENC2B_GPIO_Port, ENC2A_Pin, ENC2B_Pin, 1);
 8000284:	2301      	movs	r3, #1
 8000286:	9301      	str	r3, [sp, #4]
 8000288:	2301      	movs	r3, #1
 800028a:	9300      	str	r3, [sp, #0]
 800028c:	2302      	movs	r3, #2
 800028e:	4a3a      	ldr	r2, [pc, #232]	; (8000378 <main+0x138>)
 8000290:	4939      	ldr	r1, [pc, #228]	; (8000378 <main+0x138>)
 8000292:	483a      	ldr	r0, [pc, #232]	; (800037c <main+0x13c>)
 8000294:	f001 f8df 	bl	8001456 <RE_Init>

	EPD_Init(&hepd1);
 8000298:	4839      	ldr	r0, [pc, #228]	; (8000380 <main+0x140>)
 800029a:	f000 fdad 	bl	8000df8 <EPD_Init>
	EPD_Clear(&hepd1);
 800029e:	4838      	ldr	r0, [pc, #224]	; (8000380 <main+0x140>)
 80002a0:	f000 fe02 	bl	8000ea8 <EPD_Clear>

	Painter_Clean(hepd1.image);
 80002a4:	4837      	ldr	r0, [pc, #220]	; (8000384 <main+0x144>)
 80002a6:	f001 f899 	bl	80013dc <Painter_Clean>

	char row[16+1];

	sprintf(row, "g33ky toad @@");
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4936      	ldr	r1, [pc, #216]	; (8000388 <main+0x148>)
 80002ae:	4618      	mov	r0, r3
 80002b0:	f003 f84e 	bl	8003350 <siprintf>
	Painter_WriteString(hepd1.image, row, 10, 20, TOP_LEFT, SMALL);
 80002b4:	1d39      	adds	r1, r7, #4
 80002b6:	2300      	movs	r3, #0
 80002b8:	9301      	str	r3, [sp, #4]
 80002ba:	2300      	movs	r3, #0
 80002bc:	9300      	str	r3, [sp, #0]
 80002be:	2314      	movs	r3, #20
 80002c0:	220a      	movs	r2, #10
 80002c2:	4830      	ldr	r0, [pc, #192]	; (8000384 <main+0x144>)
 80002c4:	f000 ffc3 	bl	800124e <Painter_WriteString>
	Painter_WriteString(hepd1.image, row, 40, 20, BOT_LEFT, LARGE);
 80002c8:	1d39      	adds	r1, r7, #4
 80002ca:	2301      	movs	r3, #1
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	2302      	movs	r3, #2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	2314      	movs	r3, #20
 80002d4:	2228      	movs	r2, #40	; 0x28
 80002d6:	482b      	ldr	r0, [pc, #172]	; (8000384 <main+0x144>)
 80002d8:	f000 ffb9 	bl	800124e <Painter_WriteString>

	EPD_Display(&hepd1);
 80002dc:	4828      	ldr	r0, [pc, #160]	; (8000380 <main+0x140>)
 80002de:	f000 fdfd 	bl	8000edc <EPD_Display>
	EPD_Sleep(&hepd1);
 80002e2:	4827      	ldr	r0, [pc, #156]	; (8000380 <main+0x140>)
 80002e4:	f000 fe8c 	bl	8001000 <EPD_Sleep>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		Commander_Process(&hcommander);
 80002e8:	4820      	ldr	r0, [pc, #128]	; (800036c <main+0x12c>)
 80002ea:	f000 fb79 	bl	80009e0 <Commander_Process>

		RE_Process(&hre1);
 80002ee:	4821      	ldr	r0, [pc, #132]	; (8000374 <main+0x134>)
 80002f0:	f001 f8de 	bl	80014b0 <RE_Process>
		RE_Process(&hre2);
 80002f4:	4821      	ldr	r0, [pc, #132]	; (800037c <main+0x13c>)
 80002f6:	f001 f8db 	bl	80014b0 <RE_Process>

		for (int i = 0; i < 6; i++) {
 80002fa:	2300      	movs	r3, #0
 80002fc:	61fb      	str	r3, [r7, #28]
 80002fe:	e02a      	b.n	8000356 <main+0x116>
			int thr = (RE_GetCount(&hre1) + RE_GetCount(&hre2)) % 6;
 8000300:	481c      	ldr	r0, [pc, #112]	; (8000374 <main+0x134>)
 8000302:	f001 f99f 	bl	8001644 <RE_GetCount>
 8000306:	4603      	mov	r3, r0
 8000308:	461c      	mov	r4, r3
 800030a:	481c      	ldr	r0, [pc, #112]	; (800037c <main+0x13c>)
 800030c:	f001 f99a 	bl	8001644 <RE_GetCount>
 8000310:	4603      	mov	r3, r0
 8000312:	18e2      	adds	r2, r4, r3
 8000314:	4b1d      	ldr	r3, [pc, #116]	; (800038c <main+0x14c>)
 8000316:	fb83 3102 	smull	r3, r1, r3, r2
 800031a:	17d3      	asrs	r3, r2, #31
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	460b      	mov	r3, r1
 8000320:	005b      	lsls	r3, r3, #1
 8000322:	440b      	add	r3, r1
 8000324:	005b      	lsls	r3, r3, #1
 8000326:	1ad3      	subs	r3, r2, r3
 8000328:	61bb      	str	r3, [r7, #24]
			HAL_GPIO_WritePin((GPIO_TypeDef *)led_port[i], led_pins[i], i <= thr ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800032a:	4a19      	ldr	r2, [pc, #100]	; (8000390 <main+0x150>)
 800032c:	69fb      	ldr	r3, [r7, #28]
 800032e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000332:	4618      	mov	r0, r3
 8000334:	4a17      	ldr	r2, [pc, #92]	; (8000394 <main+0x154>)
 8000336:	69fb      	ldr	r3, [r7, #28]
 8000338:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800033c:	69fa      	ldr	r2, [r7, #28]
 800033e:	69bb      	ldr	r3, [r7, #24]
 8000340:	429a      	cmp	r2, r3
 8000342:	bfd4      	ite	le
 8000344:	2301      	movle	r3, #1
 8000346:	2300      	movgt	r3, #0
 8000348:	b2db      	uxtb	r3, r3
 800034a:	461a      	mov	r2, r3
 800034c:	f001 feb1 	bl	80020b2 <HAL_GPIO_WritePin>
		for (int i = 0; i < 6; i++) {
 8000350:	69fb      	ldr	r3, [r7, #28]
 8000352:	3301      	adds	r3, #1
 8000354:	61fb      	str	r3, [r7, #28]
 8000356:	69fb      	ldr	r3, [r7, #28]
 8000358:	2b05      	cmp	r3, #5
 800035a:	ddd1      	ble.n	8000300 <main+0xc0>
		Commander_Process(&hcommander);
 800035c:	e7c4      	b.n	80002e8 <main+0xa8>
 800035e:	bf00      	nop
 8000360:	080001cd 	.word	0x080001cd
 8000364:	20000c4c 	.word	0x20000c4c
 8000368:	20000c08 	.word	0x20000c08
 800036c:	20000c90 	.word	0x20000c90
 8000370:	40010c00 	.word	0x40010c00
 8000374:	20002b58 	.word	0x20002b58
 8000378:	40010800 	.word	0x40010800
 800037c:	20002b74 	.word	0x20002b74
 8000380:	200018d4 	.word	0x200018d4
 8000384:	200018d6 	.word	0x200018d6
 8000388:	08003c40 	.word	0x08003c40
 800038c:	2aaaaaab 	.word	0x2aaaaaab
 8000390:	2000000c 	.word	0x2000000c
 8000394:	20000000 	.word	0x20000000

08000398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b090      	sub	sp, #64	; 0x40
 800039c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039e:	f107 0318 	add.w	r3, r7, #24
 80003a2:	2228      	movs	r2, #40	; 0x28
 80003a4:	2100      	movs	r1, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f002 ffca 	bl	8003340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
 80003b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003ba:	2301      	movs	r3, #1
 80003bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003c4:	2300      	movs	r3, #0
 80003c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c8:	2301      	movs	r3, #1
 80003ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003cc:	2302      	movs	r3, #2
 80003ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003d6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003dc:	f107 0318 	add.w	r3, r7, #24
 80003e0:	4618      	mov	r0, r3
 80003e2:	f001 fe7f 	bl	80020e4 <HAL_RCC_OscConfig>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003ec:	f000 f932 	bl	8000654 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f0:	230f      	movs	r3, #15
 80003f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f4:	2302      	movs	r3, #2
 80003f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f8:	2300      	movs	r3, #0
 80003fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000400:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2102      	movs	r1, #2
 800040a:	4618      	mov	r0, r3
 800040c:	f002 f8ec 	bl	80025e8 <HAL_RCC_ClockConfig>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000416:	f000 f91d 	bl	8000654 <Error_Handler>
  }
}
 800041a:	bf00      	nop
 800041c:	3740      	adds	r7, #64	; 0x40
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000428:	4b18      	ldr	r3, [pc, #96]	; (800048c <MX_SPI1_Init+0x68>)
 800042a:	4a19      	ldr	r2, [pc, #100]	; (8000490 <MX_SPI1_Init+0x6c>)
 800042c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800042e:	4b17      	ldr	r3, [pc, #92]	; (800048c <MX_SPI1_Init+0x68>)
 8000430:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000434:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000436:	4b15      	ldr	r3, [pc, #84]	; (800048c <MX_SPI1_Init+0x68>)
 8000438:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800043c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800043e:	4b13      	ldr	r3, [pc, #76]	; (800048c <MX_SPI1_Init+0x68>)
 8000440:	2200      	movs	r2, #0
 8000442:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000444:	4b11      	ldr	r3, [pc, #68]	; (800048c <MX_SPI1_Init+0x68>)
 8000446:	2200      	movs	r2, #0
 8000448:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800044a:	4b10      	ldr	r3, [pc, #64]	; (800048c <MX_SPI1_Init+0x68>)
 800044c:	2200      	movs	r2, #0
 800044e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000450:	4b0e      	ldr	r3, [pc, #56]	; (800048c <MX_SPI1_Init+0x68>)
 8000452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000456:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <MX_SPI1_Init+0x68>)
 800045a:	2210      	movs	r2, #16
 800045c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800045e:	4b0b      	ldr	r3, [pc, #44]	; (800048c <MX_SPI1_Init+0x68>)
 8000460:	2200      	movs	r2, #0
 8000462:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000464:	4b09      	ldr	r3, [pc, #36]	; (800048c <MX_SPI1_Init+0x68>)
 8000466:	2200      	movs	r2, #0
 8000468:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800046a:	4b08      	ldr	r3, [pc, #32]	; (800048c <MX_SPI1_Init+0x68>)
 800046c:	2200      	movs	r2, #0
 800046e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <MX_SPI1_Init+0x68>)
 8000472:	220a      	movs	r2, #10
 8000474:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000476:	4805      	ldr	r0, [pc, #20]	; (800048c <MX_SPI1_Init+0x68>)
 8000478:	f002 fa4e 	bl	8002918 <HAL_SPI_Init>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000482:	f000 f8e7 	bl	8000654 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	20000bb0 	.word	0x20000bb0
 8000490:	40013000 	.word	0x40013000

08000494 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000498:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <MX_USART3_UART_Init+0x4c>)
 800049a:	4a12      	ldr	r2, [pc, #72]	; (80004e4 <MX_USART3_UART_Init+0x50>)
 800049c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800049e:	4b10      	ldr	r3, [pc, #64]	; (80004e0 <MX_USART3_UART_Init+0x4c>)
 80004a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80004a6:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <MX_USART3_UART_Init+0x4c>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <MX_USART3_UART_Init+0x4c>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <MX_USART3_UART_Init+0x4c>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80004b8:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <MX_USART3_UART_Init+0x4c>)
 80004ba:	220c      	movs	r2, #12
 80004bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004be:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <MX_USART3_UART_Init+0x4c>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <MX_USART3_UART_Init+0x4c>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80004ca:	4805      	ldr	r0, [pc, #20]	; (80004e0 <MX_USART3_UART_Init+0x4c>)
 80004cc:	f002 fc8a 	bl	8002de4 <HAL_UART_Init>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80004d6:	f000 f8bd 	bl	8000654 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	20000c08 	.word	0x20000c08
 80004e4:	40004800 	.word	0x40004800

080004e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ee:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <MX_DMA_Init+0x38>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	4a0b      	ldr	r2, [pc, #44]	; (8000520 <MX_DMA_Init+0x38>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	6153      	str	r3, [r2, #20]
 80004fa:	4b09      	ldr	r3, [pc, #36]	; (8000520 <MX_DMA_Init+0x38>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000506:	2200      	movs	r2, #0
 8000508:	2100      	movs	r1, #0
 800050a:	200d      	movs	r0, #13
 800050c:	f001 fa11 	bl	8001932 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000510:	200d      	movs	r0, #13
 8000512:	f001 fa2a 	bl	800196a <HAL_NVIC_EnableIRQ>

}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40021000 	.word	0x40021000

08000524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b088      	sub	sp, #32
 8000528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052a:	f107 0310 	add.w	r3, r7, #16
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000538:	4b42      	ldr	r3, [pc, #264]	; (8000644 <MX_GPIO_Init+0x120>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a41      	ldr	r2, [pc, #260]	; (8000644 <MX_GPIO_Init+0x120>)
 800053e:	f043 0310 	orr.w	r3, r3, #16
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b3f      	ldr	r3, [pc, #252]	; (8000644 <MX_GPIO_Init+0x120>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f003 0310 	and.w	r3, r3, #16
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000550:	4b3c      	ldr	r3, [pc, #240]	; (8000644 <MX_GPIO_Init+0x120>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a3b      	ldr	r2, [pc, #236]	; (8000644 <MX_GPIO_Init+0x120>)
 8000556:	f043 0320 	orr.w	r3, r3, #32
 800055a:	6193      	str	r3, [r2, #24]
 800055c:	4b39      	ldr	r3, [pc, #228]	; (8000644 <MX_GPIO_Init+0x120>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	f003 0320 	and.w	r3, r3, #32
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000568:	4b36      	ldr	r3, [pc, #216]	; (8000644 <MX_GPIO_Init+0x120>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	4a35      	ldr	r2, [pc, #212]	; (8000644 <MX_GPIO_Init+0x120>)
 800056e:	f043 0304 	orr.w	r3, r3, #4
 8000572:	6193      	str	r3, [r2, #24]
 8000574:	4b33      	ldr	r3, [pc, #204]	; (8000644 <MX_GPIO_Init+0x120>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	f003 0304 	and.w	r3, r3, #4
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000580:	4b30      	ldr	r3, [pc, #192]	; (8000644 <MX_GPIO_Init+0x120>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	4a2f      	ldr	r2, [pc, #188]	; (8000644 <MX_GPIO_Init+0x120>)
 8000586:	f043 0308 	orr.w	r3, r3, #8
 800058a:	6193      	str	r3, [r2, #24]
 800058c:	4b2d      	ldr	r3, [pc, #180]	; (8000644 <MX_GPIO_Init+0x120>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	f003 0308 	and.w	r3, r3, #8
 8000594:	603b      	str	r3, [r7, #0]
 8000596:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD6_Pin|LD5_Pin|LD4_Pin|EPD_CS_Pin, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	f248 01a8 	movw	r1, #32936	; 0x80a8
 800059e:	482a      	ldr	r0, [pc, #168]	; (8000648 <MX_GPIO_Init+0x124>)
 80005a0:	f001 fd87 	bl	80020b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin|LD1_Pin|EPD_RST_Pin
 80005a4:	2200      	movs	r2, #0
 80005a6:	f249 3102 	movw	r1, #37634	; 0x9302
 80005aa:	4828      	ldr	r0, [pc, #160]	; (800064c <MX_GPIO_Init+0x128>)
 80005ac:	f001 fd81 	bl	80020b2 <HAL_GPIO_WritePin>
                          |EPD_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BTN_ENC1_Pin */
  GPIO_InitStruct.Pin = BTN_ENC1_Pin;
 80005b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_ENC1_GPIO_Port, &GPIO_InitStruct);
 80005be:	f107 0310 	add.w	r3, r7, #16
 80005c2:	4619      	mov	r1, r3
 80005c4:	4822      	ldr	r0, [pc, #136]	; (8000650 <MX_GPIO_Init+0x12c>)
 80005c6:	f001 fbd9 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC2B_Pin ENC2A_Pin BTN6_Pin BTN5_Pin
                           BTN1_Pin */
  GPIO_InitStruct.Pin = ENC2B_Pin|ENC2A_Pin|BTN6_Pin|BTN5_Pin
 80005ca:	f240 1353 	movw	r3, #339	; 0x153
 80005ce:	613b      	str	r3, [r7, #16]
                          |BTN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d8:	f107 0310 	add.w	r3, r7, #16
 80005dc:	4619      	mov	r1, r3
 80005de:	481a      	ldr	r0, [pc, #104]	; (8000648 <MX_GPIO_Init+0x124>)
 80005e0:	f001 fbcc 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD6_Pin LD5_Pin LD4_Pin EPD_CS_Pin */
  GPIO_InitStruct.Pin = LD6_Pin|LD5_Pin|LD4_Pin|EPD_CS_Pin;
 80005e4:	f248 03a8 	movw	r3, #32936	; 0x80a8
 80005e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ea:	2301      	movs	r3, #1
 80005ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f2:	2302      	movs	r3, #2
 80005f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f6:	f107 0310 	add.w	r3, r7, #16
 80005fa:	4619      	mov	r1, r3
 80005fc:	4812      	ldr	r0, [pc, #72]	; (8000648 <MX_GPIO_Init+0x124>)
 80005fe:	f001 fbbd 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN4_Pin BTN3_Pin BTN2_Pin BTN_ENC2_Pin
                           EPD_BUSY_Pin ENC1B_Pin ENC1A_Pin */
  GPIO_InitStruct.Pin = BTN4_Pin|BTN3_Pin|BTN2_Pin|BTN_ENC2_Pin
 8000602:	f246 03d5 	movw	r3, #24789	; 0x60d5
 8000606:	613b      	str	r3, [r7, #16]
                          |EPD_BUSY_Pin|ENC1B_Pin|ENC1A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000610:	f107 0310 	add.w	r3, r7, #16
 8000614:	4619      	mov	r1, r3
 8000616:	480d      	ldr	r0, [pc, #52]	; (800064c <MX_GPIO_Init+0x128>)
 8000618:	f001 fbb0 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin LD1_Pin EPD_RST_Pin
                           EPD_DC_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin|LD1_Pin|EPD_RST_Pin
 800061c:	f249 3302 	movw	r3, #37634	; 0x9302
 8000620:	613b      	str	r3, [r7, #16]
                          |EPD_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000622:	2301      	movs	r3, #1
 8000624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062a:	2302      	movs	r3, #2
 800062c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062e:	f107 0310 	add.w	r3, r7, #16
 8000632:	4619      	mov	r1, r3
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_GPIO_Init+0x128>)
 8000636:	f001 fba1 	bl	8001d7c <HAL_GPIO_Init>

}
 800063a:	bf00      	nop
 800063c:	3720      	adds	r7, #32
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40021000 	.word	0x40021000
 8000648:	40010800 	.word	0x40010800
 800064c:	40010c00 	.word	0x40010c00
 8000650:	40011000 	.word	0x40011000

08000654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000658:	b672      	cpsid	i
}
 800065a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800065c:	e7fe      	b.n	800065c <Error_Handler+0x8>
	...

08000660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000666:	4b15      	ldr	r3, [pc, #84]	; (80006bc <HAL_MspInit+0x5c>)
 8000668:	699b      	ldr	r3, [r3, #24]
 800066a:	4a14      	ldr	r2, [pc, #80]	; (80006bc <HAL_MspInit+0x5c>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6193      	str	r3, [r2, #24]
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <HAL_MspInit+0x5c>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <HAL_MspInit+0x5c>)
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	4a0e      	ldr	r2, [pc, #56]	; (80006bc <HAL_MspInit+0x5c>)
 8000684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000688:	61d3      	str	r3, [r2, #28]
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <HAL_MspInit+0x5c>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000696:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <HAL_MspInit+0x60>)
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	4a04      	ldr	r2, [pc, #16]	; (80006c0 <HAL_MspInit+0x60>)
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b2:	bf00      	nop
 80006b4:	3714      	adds	r7, #20
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr
 80006bc:	40021000 	.word	0x40021000
 80006c0:	40010000 	.word	0x40010000

080006c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	; 0x28
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a1c      	ldr	r2, [pc, #112]	; (8000750 <HAL_SPI_MspInit+0x8c>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d131      	bne.n	8000748 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006e4:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <HAL_SPI_MspInit+0x90>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a1a      	ldr	r2, [pc, #104]	; (8000754 <HAL_SPI_MspInit+0x90>)
 80006ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006ee:	6193      	str	r3, [r2, #24]
 80006f0:	4b18      	ldr	r3, [pc, #96]	; (8000754 <HAL_SPI_MspInit+0x90>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fc:	4b15      	ldr	r3, [pc, #84]	; (8000754 <HAL_SPI_MspInit+0x90>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	4a14      	ldr	r2, [pc, #80]	; (8000754 <HAL_SPI_MspInit+0x90>)
 8000702:	f043 0308 	orr.w	r3, r3, #8
 8000706:	6193      	str	r3, [r2, #24]
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <HAL_SPI_MspInit+0x90>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f003 0308 	and.w	r3, r3, #8
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000714:	2328      	movs	r3, #40	; 0x28
 8000716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	2302      	movs	r3, #2
 800071a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800071c:	2303      	movs	r3, #3
 800071e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	4619      	mov	r1, r3
 8000726:	480c      	ldr	r0, [pc, #48]	; (8000758 <HAL_SPI_MspInit+0x94>)
 8000728:	f001 fb28 	bl	8001d7c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 800072c:	4b0b      	ldr	r3, [pc, #44]	; (800075c <HAL_SPI_MspInit+0x98>)
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	627b      	str	r3, [r7, #36]	; 0x24
 8000732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000734:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
 800073a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
 8000742:	4a06      	ldr	r2, [pc, #24]	; (800075c <HAL_SPI_MspInit+0x98>)
 8000744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000746:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	; 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40013000 	.word	0x40013000
 8000754:	40021000 	.word	0x40021000
 8000758:	40010c00 	.word	0x40010c00
 800075c:	40010000 	.word	0x40010000

08000760 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a2f      	ldr	r2, [pc, #188]	; (8000838 <HAL_UART_MspInit+0xd8>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d157      	bne.n	8000830 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000780:	4b2e      	ldr	r3, [pc, #184]	; (800083c <HAL_UART_MspInit+0xdc>)
 8000782:	69db      	ldr	r3, [r3, #28]
 8000784:	4a2d      	ldr	r2, [pc, #180]	; (800083c <HAL_UART_MspInit+0xdc>)
 8000786:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800078a:	61d3      	str	r3, [r2, #28]
 800078c:	4b2b      	ldr	r3, [pc, #172]	; (800083c <HAL_UART_MspInit+0xdc>)
 800078e:	69db      	ldr	r3, [r3, #28]
 8000790:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000798:	4b28      	ldr	r3, [pc, #160]	; (800083c <HAL_UART_MspInit+0xdc>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	4a27      	ldr	r2, [pc, #156]	; (800083c <HAL_UART_MspInit+0xdc>)
 800079e:	f043 0308 	orr.w	r3, r3, #8
 80007a2:	6193      	str	r3, [r2, #24]
 80007a4:	4b25      	ldr	r3, [pc, #148]	; (800083c <HAL_UART_MspInit+0xdc>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f003 0308 	and.w	r3, r3, #8
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b6:	2302      	movs	r3, #2
 80007b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ba:	2303      	movs	r3, #3
 80007bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007be:	f107 0310 	add.w	r3, r7, #16
 80007c2:	4619      	mov	r1, r3
 80007c4:	481e      	ldr	r0, [pc, #120]	; (8000840 <HAL_UART_MspInit+0xe0>)
 80007c6:	f001 fad9 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	4619      	mov	r1, r3
 80007de:	4818      	ldr	r0, [pc, #96]	; (8000840 <HAL_UART_MspInit+0xe0>)
 80007e0:	f001 facc 	bl	8001d7c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80007e4:	4b17      	ldr	r3, [pc, #92]	; (8000844 <HAL_UART_MspInit+0xe4>)
 80007e6:	4a18      	ldr	r2, [pc, #96]	; (8000848 <HAL_UART_MspInit+0xe8>)
 80007e8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007ea:	4b16      	ldr	r3, [pc, #88]	; (8000844 <HAL_UART_MspInit+0xe4>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007f0:	4b14      	ldr	r3, [pc, #80]	; (8000844 <HAL_UART_MspInit+0xe4>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007f6:	4b13      	ldr	r3, [pc, #76]	; (8000844 <HAL_UART_MspInit+0xe4>)
 80007f8:	2280      	movs	r2, #128	; 0x80
 80007fa:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <HAL_UART_MspInit+0xe4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <HAL_UART_MspInit+0xe4>)
 8000804:	2200      	movs	r2, #0
 8000806:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000808:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <HAL_UART_MspInit+0xe4>)
 800080a:	2220      	movs	r2, #32
 800080c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800080e:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <HAL_UART_MspInit+0xe4>)
 8000810:	2200      	movs	r2, #0
 8000812:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000814:	480b      	ldr	r0, [pc, #44]	; (8000844 <HAL_UART_MspInit+0xe4>)
 8000816:	f001 f8c3 	bl	80019a0 <HAL_DMA_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000820:	f7ff ff18 	bl	8000654 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4a07      	ldr	r2, [pc, #28]	; (8000844 <HAL_UART_MspInit+0xe4>)
 8000828:	639a      	str	r2, [r3, #56]	; 0x38
 800082a:	4a06      	ldr	r2, [pc, #24]	; (8000844 <HAL_UART_MspInit+0xe4>)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000830:	bf00      	nop
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40004800 	.word	0x40004800
 800083c:	40021000 	.word	0x40021000
 8000840:	40010c00 	.word	0x40010c00
 8000844:	20000c4c 	.word	0x20000c4c
 8000848:	40020030 	.word	0x40020030

0800084c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <NMI_Handler+0x4>

08000852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000856:	e7fe      	b.n	8000856 <HardFault_Handler+0x4>

08000858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800085c:	e7fe      	b.n	800085c <MemManage_Handler+0x4>

0800085e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <BusFault_Handler+0x4>

08000864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <UsageFault_Handler+0x4>

0800086a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr

08000876 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr

08000882 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr

0800088e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000892:	f000 ff37 	bl	8001704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80008a0:	4802      	ldr	r0, [pc, #8]	; (80008ac <DMA1_Channel3_IRQHandler+0x10>)
 80008a2:	f001 f937 	bl	8001b14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000c4c 	.word	0x20000c4c

080008b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008b8:	4a14      	ldr	r2, [pc, #80]	; (800090c <_sbrk+0x5c>)
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <_sbrk+0x60>)
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008c4:	4b13      	ldr	r3, [pc, #76]	; (8000914 <_sbrk+0x64>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d102      	bne.n	80008d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008cc:	4b11      	ldr	r3, [pc, #68]	; (8000914 <_sbrk+0x64>)
 80008ce:	4a12      	ldr	r2, [pc, #72]	; (8000918 <_sbrk+0x68>)
 80008d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <_sbrk+0x64>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4413      	add	r3, r2
 80008da:	693a      	ldr	r2, [r7, #16]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d207      	bcs.n	80008f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008e0:	f002 fcf6 	bl	80032d0 <__errno>
 80008e4:	4603      	mov	r3, r0
 80008e6:	220c      	movs	r2, #12
 80008e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ea:	f04f 33ff 	mov.w	r3, #4294967295
 80008ee:	e009      	b.n	8000904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008f0:	4b08      	ldr	r3, [pc, #32]	; (8000914 <_sbrk+0x64>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008f6:	4b07      	ldr	r3, [pc, #28]	; (8000914 <_sbrk+0x64>)
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4413      	add	r3, r2
 80008fe:	4a05      	ldr	r2, [pc, #20]	; (8000914 <_sbrk+0x64>)
 8000900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000902:	68fb      	ldr	r3, [r7, #12]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3718      	adds	r7, #24
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20005000 	.word	0x20005000
 8000910:	00000400 	.word	0x00000400
 8000914:	20002b90 	.word	0x20002b90
 8000918:	20002db0 	.word	0x20002db0

0800091c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr

08000928 <Reset_Handler>:
 8000928:	480c      	ldr	r0, [pc, #48]	; (800095c <LoopFillZerobss+0x12>)
 800092a:	490d      	ldr	r1, [pc, #52]	; (8000960 <LoopFillZerobss+0x16>)
 800092c:	4a0d      	ldr	r2, [pc, #52]	; (8000964 <LoopFillZerobss+0x1a>)
 800092e:	2300      	movs	r3, #0
 8000930:	e002      	b.n	8000938 <LoopCopyDataInit>

08000932 <CopyDataInit>:
 8000932:	58d4      	ldr	r4, [r2, r3]
 8000934:	50c4      	str	r4, [r0, r3]
 8000936:	3304      	adds	r3, #4

08000938 <LoopCopyDataInit>:
 8000938:	18c4      	adds	r4, r0, r3
 800093a:	428c      	cmp	r4, r1
 800093c:	d3f9      	bcc.n	8000932 <CopyDataInit>
 800093e:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <LoopFillZerobss+0x1e>)
 8000940:	4c0a      	ldr	r4, [pc, #40]	; (800096c <LoopFillZerobss+0x22>)
 8000942:	2300      	movs	r3, #0
 8000944:	e001      	b.n	800094a <LoopFillZerobss>

08000946 <FillZerobss>:
 8000946:	6013      	str	r3, [r2, #0]
 8000948:	3204      	adds	r2, #4

0800094a <LoopFillZerobss>:
 800094a:	42a2      	cmp	r2, r4
 800094c:	d3fb      	bcc.n	8000946 <FillZerobss>
 800094e:	f7ff ffe5 	bl	800091c <SystemInit>
 8000952:	f002 fcc3 	bl	80032dc <__libc_init_array>
 8000956:	f7ff fc73 	bl	8000240 <main>
 800095a:	4770      	bx	lr
 800095c:	20000000 	.word	0x20000000
 8000960:	20000b94 	.word	0x20000b94
 8000964:	08003cb4 	.word	0x08003cb4
 8000968:	20000b94 	.word	0x20000b94
 800096c:	20002dac 	.word	0x20002dac

08000970 <ADC1_2_IRQHandler>:
 8000970:	e7fe      	b.n	8000970 <ADC1_2_IRQHandler>

08000972 <Commander_Init>:

#include "stm32f1xx_hal.h"
#include "commander.h"
#include <string.h>

void Commander_Init(Commander_HandleTypeDef *hcommander, UART_HandleTypeDef *huart, DMA_HandleTypeDef *hdma_uart_rx, void (*command_callback)(Command command)) {
 8000972:	b480      	push	{r7}
 8000974:	b085      	sub	sp, #20
 8000976:	af00      	add	r7, sp, #0
 8000978:	60f8      	str	r0, [r7, #12]
 800097a:	60b9      	str	r1, [r7, #8]
 800097c:	607a      	str	r2, [r7, #4]
 800097e:	603b      	str	r3, [r7, #0]
	hcommander->huart = huart;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	601a      	str	r2, [r3, #0]
	hcommander->hdma_uart_rx = hdma_uart_rx;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	605a      	str	r2, [r3, #4]
	hcommander->rear = -1;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	22ff      	movs	r2, #255	; 0xff
 8000990:	f883 2c38 	strb.w	r2, [r3, #3128]	; 0xc38
	hcommander->front = -1;
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	22ff      	movs	r2, #255	; 0xff
 8000998:	f883 2c39 	strb.w	r2, [r3, #3129]	; 0xc39
	hcommander->commands_to_handle = 0;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	2200      	movs	r2, #0
 80009a0:	f883 2c3a 	strb.w	r2, [r3, #3130]	; 0xc3a
	hcommander->counter = 0;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	2200      	movs	r2, #0
 80009a8:	f8c3 2c3c 	str.w	r2, [r3, #3132]	; 0xc3c
	hcommander->command_callback = command_callback;
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	683a      	ldr	r2, [r7, #0]
 80009b0:	f8c3 2c40 	str.w	r2, [r3, #3136]	; 0xc40
}
 80009b4:	bf00      	nop
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr

080009be <Commander_Start>:

void Commander_Start(Commander_HandleTypeDef *hcommander) {
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(hcommander->huart, hcommander->uart_rx_buffer, COMMAND_BYTESIZE * 2);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6818      	ldr	r0, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	3308      	adds	r3, #8
 80009ce:	f240 2206 	movw	r2, #518	; 0x206
 80009d2:	4619      	mov	r1, r3
 80009d4:	f002 fa53 	bl	8002e7e <HAL_UART_Receive_DMA>
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <Commander_Process>:
void Commander_Send(Commander_HandleTypeDef *hcommander, Command *command) {
	//HAL_StatusTypeDef status;
	/*status = */HAL_UART_Transmit(hcommander->huart, (uint8_t *)command, COMMAND_BYTESIZE, 1000);
}

void Commander_Process(Commander_HandleTypeDef *hcommander) {
 80009e0:	b5b0      	push	{r4, r5, r7, lr}
 80009e2:	b0c0      	sub	sp, #256	; 0x100
 80009e4:	af3e      	add	r7, sp, #248	; 0xf8
 80009e6:	6078      	str	r0, [r7, #4]

	if(hcommander->front == -1) {
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f993 3c39 	ldrsb.w	r3, [r3, #3129]	; 0xc39
 80009ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009f2:	d045      	beq.n	8000a80 <Commander_Process+0xa0>
		// underflow
	} else {

		//printf("Element deleted from queue is : %dn",cqueue_arr[front]);
		hcommander->command_callback(hcommander->command_buffer[hcommander->front]);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f8d3 5c40 	ldr.w	r5, [r3, #3136]	; 0xc40
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f993 3c39 	ldrsb.w	r3, [r3, #3129]	; 0xc39
 8000a00:	4619      	mov	r1, r3
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	460b      	mov	r3, r1
 8000a06:	019b      	lsls	r3, r3, #6
 8000a08:	440b      	add	r3, r1
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	4413      	add	r3, r2
 8000a0e:	f503 7404 	add.w	r4, r3, #528	; 0x210
 8000a12:	4668      	mov	r0, sp
 8000a14:	f104 0310 	add.w	r3, r4, #16
 8000a18:	22f4      	movs	r2, #244	; 0xf4
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	f002 fc82 	bl	8003324 <memcpy>
 8000a20:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a24:	47a8      	blx	r5
		hcommander->commands_to_handle--;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f893 3c3a 	ldrb.w	r3, [r3, #3130]	; 0xc3a
 8000a2c:	3b01      	subs	r3, #1
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f883 2c3a 	strb.w	r2, [r3, #3130]	; 0xc3a

		if(hcommander->front == hcommander->rear) {
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	f993 2c39 	ldrsb.w	r2, [r3, #3129]	; 0xc39
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f993 3c38 	ldrsb.w	r3, [r3, #3128]	; 0xc38
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d108      	bne.n	8000a58 <Commander_Process+0x78>
			hcommander->front = -1;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	22ff      	movs	r2, #255	; 0xff
 8000a4a:	f883 2c39 	strb.w	r2, [r3, #3129]	; 0xc39
			hcommander->rear = -1;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	22ff      	movs	r2, #255	; 0xff
 8000a52:	f883 2c38 	strb.w	r2, [r3, #3128]	; 0xc38
		} else {
			if(hcommander->front == COMMANDS_COUNT-1) hcommander->front = 0;
			else hcommander->front++;
		}
	}
}
 8000a56:	e013      	b.n	8000a80 <Commander_Process+0xa0>
			if(hcommander->front == COMMANDS_COUNT-1) hcommander->front = 0;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f993 3c39 	ldrsb.w	r3, [r3, #3129]	; 0xc39
 8000a5e:	2b09      	cmp	r3, #9
 8000a60:	d104      	bne.n	8000a6c <Commander_Process+0x8c>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2200      	movs	r2, #0
 8000a66:	f883 2c39 	strb.w	r2, [r3, #3129]	; 0xc39
}
 8000a6a:	e009      	b.n	8000a80 <Commander_Process+0xa0>
			else hcommander->front++;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f993 3c39 	ldrsb.w	r3, [r3, #3129]	; 0xc39
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	3301      	adds	r3, #1
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	b25a      	sxtb	r2, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f883 2c39 	strb.w	r2, [r3, #3129]	; 0xc39
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bdb0      	pop	{r4, r5, r7, pc}

08000a88 <Commander_Enqueue>:

void Commander_Enqueue(Commander_HandleTypeDef *hcommander, Command *command) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]


	if((hcommander->front == 0 && hcommander->rear == COMMANDS_COUNT-1) || (hcommander->front == hcommander->rear+1)) {
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	f993 3c39 	ldrsb.w	r3, [r3, #3129]	; 0xc39
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d104      	bne.n	8000aa6 <Commander_Enqueue+0x1e>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f993 3c38 	ldrsb.w	r3, [r3, #3128]	; 0xc38
 8000aa2:	2b09      	cmp	r3, #9
 8000aa4:	d047      	beq.n	8000b36 <Commander_Enqueue+0xae>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f993 3c39 	ldrsb.w	r3, [r3, #3129]	; 0xc39
 8000aac:	461a      	mov	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	f993 3c38 	ldrsb.w	r3, [r3, #3128]	; 0xc38
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d03d      	beq.n	8000b36 <Commander_Enqueue+0xae>
		// overflow
	} else {
		if(hcommander->front == -1) {
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f993 3c39 	ldrsb.w	r3, [r3, #3129]	; 0xc39
 8000ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ac4:	d108      	bne.n	8000ad8 <Commander_Enqueue+0x50>
			hcommander->front = 0;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f883 2c39 	strb.w	r2, [r3, #3129]	; 0xc39
			hcommander->rear = 0;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f883 2c38 	strb.w	r2, [r3, #3128]	; 0xc38
 8000ad6:	e013      	b.n	8000b00 <Commander_Enqueue+0x78>
		} else {
			if(hcommander->rear == COMMANDS_COUNT-1) hcommander->rear = 0;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f993 3c38 	ldrsb.w	r3, [r3, #3128]	; 0xc38
 8000ade:	2b09      	cmp	r3, #9
 8000ae0:	d104      	bne.n	8000aec <Commander_Enqueue+0x64>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f883 2c38 	strb.w	r2, [r3, #3128]	; 0xc38
 8000aea:	e009      	b.n	8000b00 <Commander_Enqueue+0x78>
			else hcommander->rear++;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f993 3c38 	ldrsb.w	r3, [r3, #3128]	; 0xc38
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	3301      	adds	r3, #1
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	b25a      	sxtb	r2, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f883 2c38 	strb.w	r2, [r3, #3128]	; 0xc38
		}
		memcpy(hcommander->command_buffer + hcommander->rear, command, COMMAND_BYTESIZE);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	f993 3c38 	ldrsb.w	r3, [r3, #3128]	; 0xc38
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	460b      	mov	r3, r1
 8000b10:	019b      	lsls	r3, r3, #6
 8000b12:	440b      	add	r3, r1
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	4413      	add	r3, r2
 8000b18:	f240 1203 	movw	r2, #259	; 0x103
 8000b1c:	6839      	ldr	r1, [r7, #0]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f002 fc00 	bl	8003324 <memcpy>
		hcommander->commands_to_handle++;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f893 3c3a 	ldrb.w	r3, [r3, #3130]	; 0xc3a
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f883 2c3a 	strb.w	r2, [r3, #3130]	; 0xc3a
	}


}
 8000b34:	e7ff      	b.n	8000b36 <Commander_Enqueue+0xae>
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <_EPD_Reset>:

uint8_t WS_20_30[159] = { 0x80,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x10,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x80,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x10,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x14,0x8,0x0,0x0,0x0,0x0,0x1,0xA,0xA,0x0,0xA,0xA,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x14,0x8,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x44,0x44,0x44,0x44,0x44,0x44,0x0,0x0,0x0,0x22,0x17,0x41,0x0,0x32,0x36 };

extern SPI_HandleTypeDef hspi1;

static void _EPD_Reset(void) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 8000b44:	2201      	movs	r2, #1
 8000b46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b4a:	480d      	ldr	r0, [pc, #52]	; (8000b80 <_EPD_Reset+0x40>)
 8000b4c:	f001 fab1 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000b50:	2064      	movs	r0, #100	; 0x64
 8000b52:	f000 fdf3 	bl	800173c <HAL_Delay>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b5c:	4808      	ldr	r0, [pc, #32]	; (8000b80 <_EPD_Reset+0x40>)
 8000b5e:	f001 faa8 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000b62:	2002      	movs	r0, #2
 8000b64:	f000 fdea 	bl	800173c <HAL_Delay>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b6e:	4804      	ldr	r0, [pc, #16]	; (8000b80 <_EPD_Reset+0x40>)
 8000b70:	f001 fa9f 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000b74:	2064      	movs	r0, #100	; 0x64
 8000b76:	f000 fde1 	bl	800173c <HAL_Delay>
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40010c00 	.word	0x40010c00

08000b84 <_EPD_SendCommand>:

static void _EPD_SendCommand(uint8_t reg) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b94:	480c      	ldr	r0, [pc, #48]	; (8000bc8 <_EPD_SendCommand+0x44>)
 8000b96:	f001 fa8c 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ba0:	480a      	ldr	r0, [pc, #40]	; (8000bcc <_EPD_SendCommand+0x48>)
 8000ba2:	f001 fa86 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 1000);
 8000ba6:	1df9      	adds	r1, r7, #7
 8000ba8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bac:	2201      	movs	r2, #1
 8000bae:	4808      	ldr	r0, [pc, #32]	; (8000bd0 <_EPD_SendCommand+0x4c>)
 8000bb0:	f001 ff36 	bl	8002a20 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_SET);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bba:	4804      	ldr	r0, [pc, #16]	; (8000bcc <_EPD_SendCommand+0x48>)
 8000bbc:	f001 fa79 	bl	80020b2 <HAL_GPIO_WritePin>
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40010c00 	.word	0x40010c00
 8000bcc:	40010800 	.word	0x40010800
 8000bd0:	20000bb0 	.word	0x20000bb0

08000bd4 <_EPD_SendData>:

static void _EPD_SendData(uint8_t data) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_SET);
 8000bde:	2201      	movs	r2, #1
 8000be0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000be4:	480c      	ldr	r0, [pc, #48]	; (8000c18 <_EPD_SendData+0x44>)
 8000be6:	f001 fa64 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bf0:	480a      	ldr	r0, [pc, #40]	; (8000c1c <_EPD_SendData+0x48>)
 8000bf2:	f001 fa5e 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8000bf6:	1df9      	adds	r1, r7, #7
 8000bf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	4808      	ldr	r0, [pc, #32]	; (8000c20 <_EPD_SendData+0x4c>)
 8000c00:	f001 ff0e 	bl	8002a20 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_SET);
 8000c04:	2201      	movs	r2, #1
 8000c06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c0a:	4804      	ldr	r0, [pc, #16]	; (8000c1c <_EPD_SendData+0x48>)
 8000c0c:	f001 fa51 	bl	80020b2 <HAL_GPIO_WritePin>
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40010c00 	.word	0x40010c00
 8000c1c:	40010800 	.word	0x40010800
 8000c20:	20000bb0 	.word	0x20000bb0

08000c24 <_EPD_ReadBusy>:
	for(uint8_t i = 0; i < count; i++) {
		_EPD_SendData(array[i]);
	}
}

void _EPD_ReadBusy(void) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
	while(1) {
		if(HAL_GPIO_ReadPin(EPD_BUSY_GPIO_Port, EPD_BUSY_Pin) == GPIO_PIN_RESET)
 8000c28:	2110      	movs	r1, #16
 8000c2a:	4806      	ldr	r0, [pc, #24]	; (8000c44 <_EPD_ReadBusy+0x20>)
 8000c2c:	f001 fa2a 	bl	8002084 <HAL_GPIO_ReadPin>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d003      	beq.n	8000c3e <_EPD_ReadBusy+0x1a>
			break;
		HAL_Delay(1);
 8000c36:	2001      	movs	r0, #1
 8000c38:	f000 fd80 	bl	800173c <HAL_Delay>
		if(HAL_GPIO_ReadPin(EPD_BUSY_GPIO_Port, EPD_BUSY_Pin) == GPIO_PIN_RESET)
 8000c3c:	e7f4      	b.n	8000c28 <_EPD_ReadBusy+0x4>
			break;
 8000c3e:	bf00      	nop
	}
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40010c00 	.word	0x40010c00

08000c48 <_EPD_LUT>:

static void _EPD_LUT(uint8_t *lut) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	uint8_t count;
	_EPD_SendCommand(0x32);
 8000c50:	2032      	movs	r0, #50	; 0x32
 8000c52:	f7ff ff97 	bl	8000b84 <_EPD_SendCommand>
	for(count=0; count<153; count++)
 8000c56:	2300      	movs	r3, #0
 8000c58:	73fb      	strb	r3, [r7, #15]
 8000c5a:	e009      	b.n	8000c70 <_EPD_LUT+0x28>
		_EPD_SendData(lut[count]);
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ffb5 	bl	8000bd4 <_EPD_SendData>
	for(count=0; count<153; count++)
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	73fb      	strb	r3, [r7, #15]
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	2b98      	cmp	r3, #152	; 0x98
 8000c74:	d9f2      	bls.n	8000c5c <_EPD_LUT+0x14>
	_EPD_ReadBusy();
 8000c76:	f7ff ffd5 	bl	8000c24 <_EPD_ReadBusy>
}
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <_EPD_LUT_by_host>:

static void _EPD_LUT_by_host(uint8_t *lut) {
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
	_EPD_LUT((uint8_t *)lut);			//lut
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff ffdc 	bl	8000c48 <_EPD_LUT>
	_EPD_SendCommand(0x3f);
 8000c90:	203f      	movs	r0, #63	; 0x3f
 8000c92:	f7ff ff77 	bl	8000b84 <_EPD_SendCommand>
	_EPD_SendData(*(lut+153));
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	3399      	adds	r3, #153	; 0x99
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ff99 	bl	8000bd4 <_EPD_SendData>
	_EPD_SendCommand(0x03);	// gate voltage
 8000ca2:	2003      	movs	r0, #3
 8000ca4:	f7ff ff6e 	bl	8000b84 <_EPD_SendCommand>
	_EPD_SendData(*(lut+154));
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	339a      	adds	r3, #154	; 0x9a
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ff90 	bl	8000bd4 <_EPD_SendData>
	_EPD_SendCommand(0x04);	// source voltage
 8000cb4:	2004      	movs	r0, #4
 8000cb6:	f7ff ff65 	bl	8000b84 <_EPD_SendCommand>
	_EPD_SendData(*(lut+155));	// VSH
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	339b      	adds	r3, #155	; 0x9b
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ff87 	bl	8000bd4 <_EPD_SendData>
	_EPD_SendData(*(lut+156));	// VSH2
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	339c      	adds	r3, #156	; 0x9c
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff81 	bl	8000bd4 <_EPD_SendData>
	_EPD_SendData(*(lut+157));	// VSL
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	339d      	adds	r3, #157	; 0x9d
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff7b 	bl	8000bd4 <_EPD_SendData>
	_EPD_SendCommand(0x2c);		// VCOM
 8000cde:	202c      	movs	r0, #44	; 0x2c
 8000ce0:	f7ff ff50 	bl	8000b84 <_EPD_SendCommand>
	_EPD_SendData(*(lut+158));
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	339e      	adds	r3, #158	; 0x9e
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff ff72 	bl	8000bd4 <_EPD_SendData>
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <_EPD_TurnOnDisplay>:

static void _EPD_TurnOnDisplay(void) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	_EPD_SendCommand(0x22); //Display Update Control
 8000cfc:	2022      	movs	r0, #34	; 0x22
 8000cfe:	f7ff ff41 	bl	8000b84 <_EPD_SendCommand>
	_EPD_SendData(0xc7);
 8000d02:	20c7      	movs	r0, #199	; 0xc7
 8000d04:	f7ff ff66 	bl	8000bd4 <_EPD_SendData>
	_EPD_SendCommand(0x20); //Activate Display Update Sequence
 8000d08:	2020      	movs	r0, #32
 8000d0a:	f7ff ff3b 	bl	8000b84 <_EPD_SendCommand>
	_EPD_ReadBusy();
 8000d0e:	f7ff ff89 	bl	8000c24 <_EPD_ReadBusy>
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <_EPD_TurnOnDisplay_Partial>:

static void _EPD_TurnOnDisplay_Partial(void) {
 8000d16:	b580      	push	{r7, lr}
 8000d18:	af00      	add	r7, sp, #0
	_EPD_SendCommand(0x22); //Display Update Control
 8000d1a:	2022      	movs	r0, #34	; 0x22
 8000d1c:	f7ff ff32 	bl	8000b84 <_EPD_SendCommand>
	_EPD_SendData(0x0F);
 8000d20:	200f      	movs	r0, #15
 8000d22:	f7ff ff57 	bl	8000bd4 <_EPD_SendData>
	_EPD_SendCommand(0x20); //Activate Display Update Sequence
 8000d26:	2020      	movs	r0, #32
 8000d28:	f7ff ff2c 	bl	8000b84 <_EPD_SendCommand>
	_EPD_ReadBusy();
 8000d2c:	f7ff ff7a 	bl	8000c24 <_EPD_ReadBusy>
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <_EPD_SetWindows>:

static void _EPD_SetWindows(uint16_t Xstart, uint16_t Ystart, uint16_t Xend, uint16_t Yend) {
 8000d34:	b590      	push	{r4, r7, lr}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	4611      	mov	r1, r2
 8000d40:	461a      	mov	r2, r3
 8000d42:	4623      	mov	r3, r4
 8000d44:	80fb      	strh	r3, [r7, #6]
 8000d46:	4603      	mov	r3, r0
 8000d48:	80bb      	strh	r3, [r7, #4]
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	807b      	strh	r3, [r7, #2]
 8000d4e:	4613      	mov	r3, r2
 8000d50:	803b      	strh	r3, [r7, #0]
	_EPD_SendCommand(0x44); // SET_RAM_X_ADDRESS_START_END_POSITION
 8000d52:	2044      	movs	r0, #68	; 0x44
 8000d54:	f7ff ff16 	bl	8000b84 <_EPD_SendCommand>
	_EPD_SendData((Xstart>>3) & 0xFF);
 8000d58:	88fb      	ldrh	r3, [r7, #6]
 8000d5a:	08db      	lsrs	r3, r3, #3
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff37 	bl	8000bd4 <_EPD_SendData>
	_EPD_SendData((Xend>>3) & 0xFF);
 8000d66:	887b      	ldrh	r3, [r7, #2]
 8000d68:	08db      	lsrs	r3, r3, #3
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff ff30 	bl	8000bd4 <_EPD_SendData>

	_EPD_SendCommand(0x45); // SET_RAM_Y_ADDRESS_START_END_POSITION
 8000d74:	2045      	movs	r0, #69	; 0x45
 8000d76:	f7ff ff05 	bl	8000b84 <_EPD_SendCommand>
	_EPD_SendData(Ystart & 0xFF);
 8000d7a:	88bb      	ldrh	r3, [r7, #4]
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ff28 	bl	8000bd4 <_EPD_SendData>
	_EPD_SendData((Ystart >> 8) & 0xFF);
 8000d84:	88bb      	ldrh	r3, [r7, #4]
 8000d86:	0a1b      	lsrs	r3, r3, #8
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff21 	bl	8000bd4 <_EPD_SendData>
	_EPD_SendData(Yend & 0xFF);
 8000d92:	883b      	ldrh	r3, [r7, #0]
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff ff1c 	bl	8000bd4 <_EPD_SendData>
	_EPD_SendData((Yend >> 8) & 0xFF);
 8000d9c:	883b      	ldrh	r3, [r7, #0]
 8000d9e:	0a1b      	lsrs	r3, r3, #8
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff15 	bl	8000bd4 <_EPD_SendData>
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd90      	pop	{r4, r7, pc}

08000db2 <_EPD_SetCursor>:

static void _EPD_SetCursor(uint16_t Xstart, uint16_t Ystart) {
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	4603      	mov	r3, r0
 8000dba:	460a      	mov	r2, r1
 8000dbc:	80fb      	strh	r3, [r7, #6]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	80bb      	strh	r3, [r7, #4]
	_EPD_SendCommand(0x4E); // SET_RAM_X_ADDRESS_COUNTER
 8000dc2:	204e      	movs	r0, #78	; 0x4e
 8000dc4:	f7ff fede 	bl	8000b84 <_EPD_SendCommand>
	_EPD_SendData(Xstart & 0xFF);
 8000dc8:	88fb      	ldrh	r3, [r7, #6]
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff01 	bl	8000bd4 <_EPD_SendData>

	_EPD_SendCommand(0x4F); // SET_RAM_Y_ADDRESS_COUNTER
 8000dd2:	204f      	movs	r0, #79	; 0x4f
 8000dd4:	f7ff fed6 	bl	8000b84 <_EPD_SendCommand>
	_EPD_SendData(Ystart & 0xFF);
 8000dd8:	88bb      	ldrh	r3, [r7, #4]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fef9 	bl	8000bd4 <_EPD_SendData>
	_EPD_SendData((Ystart >> 8) & 0xFF);
 8000de2:	88bb      	ldrh	r3, [r7, #4]
 8000de4:	0a1b      	lsrs	r3, r3, #8
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fef2 	bl	8000bd4 <_EPD_SendData>
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <EPD_Init>:
		}
	}
}


void EPD_Init(EPD_HandleTypeDef *hepd) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]

	// start phase 0
	//hepd->state = INIT_STATE;
	//hepd->phase = 0;
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e06:	4825      	ldr	r0, [pc, #148]	; (8000e9c <EPD_Init+0xa4>)
 8000e08:	f001 f953 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e12:	4823      	ldr	r0, [pc, #140]	; (8000ea0 <EPD_Init+0xa8>)
 8000e14:	f001 f94d 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e1e:	481f      	ldr	r0, [pc, #124]	; (8000e9c <EPD_Init+0xa4>)
 8000e20:	f001 f947 	bl	80020b2 <HAL_GPIO_WritePin>
	_EPD_Reset();
 8000e24:	f7ff fe8c 	bl	8000b40 <_EPD_Reset>
	HAL_Delay(100);
 8000e28:	2064      	movs	r0, #100	; 0x64
 8000e2a:	f000 fc87 	bl	800173c <HAL_Delay>
	// end phase 0

	_EPD_ReadBusy();
 8000e2e:	f7ff fef9 	bl	8000c24 <_EPD_ReadBusy>

	// start phase 1
	_EPD_SendCommand(0x12);  //SWRESET
 8000e32:	2012      	movs	r0, #18
 8000e34:	f7ff fea6 	bl	8000b84 <_EPD_SendCommand>
	// end phase 1

	_EPD_ReadBusy();
 8000e38:	f7ff fef4 	bl	8000c24 <_EPD_ReadBusy>

	_EPD_SendCommand(0x01); //Driver output control
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f7ff fea1 	bl	8000b84 <_EPD_SendCommand>
	_EPD_SendData(0x27);
 8000e42:	2027      	movs	r0, #39	; 0x27
 8000e44:	f7ff fec6 	bl	8000bd4 <_EPD_SendData>
	_EPD_SendData(0x01);
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f7ff fec3 	bl	8000bd4 <_EPD_SendData>
	_EPD_SendData(0x00);
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f7ff fec0 	bl	8000bd4 <_EPD_SendData>

	_EPD_SendCommand(0x11); //data entry mode
 8000e54:	2011      	movs	r0, #17
 8000e56:	f7ff fe95 	bl	8000b84 <_EPD_SendCommand>
	_EPD_SendData(0x03);
 8000e5a:	2003      	movs	r0, #3
 8000e5c:	f7ff feba 	bl	8000bd4 <_EPD_SendData>

	_EPD_SetWindows(0, 0, EPD_WIDTH-1, EPD_HEIGHT-1);
 8000e60:	f240 1327 	movw	r3, #295	; 0x127
 8000e64:	227f      	movs	r2, #127	; 0x7f
 8000e66:	2100      	movs	r1, #0
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f7ff ff63 	bl	8000d34 <_EPD_SetWindows>

	_EPD_SendCommand(0x21); //  Display update control
 8000e6e:	2021      	movs	r0, #33	; 0x21
 8000e70:	f7ff fe88 	bl	8000b84 <_EPD_SendCommand>
	_EPD_SendData(0x00);
 8000e74:	2000      	movs	r0, #0
 8000e76:	f7ff fead 	bl	8000bd4 <_EPD_SendData>
	_EPD_SendData(0x80);
 8000e7a:	2080      	movs	r0, #128	; 0x80
 8000e7c:	f7ff feaa 	bl	8000bd4 <_EPD_SendData>

	_EPD_SetCursor(0, 0);
 8000e80:	2100      	movs	r1, #0
 8000e82:	2000      	movs	r0, #0
 8000e84:	f7ff ff95 	bl	8000db2 <_EPD_SetCursor>
	_EPD_ReadBusy();
 8000e88:	f7ff fecc 	bl	8000c24 <_EPD_ReadBusy>

	_EPD_LUT_by_host(WS_20_30);
 8000e8c:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <EPD_Init+0xac>)
 8000e8e:	f7ff fef8 	bl	8000c82 <_EPD_LUT_by_host>
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40010c00 	.word	0x40010c00
 8000ea0:	40010800 	.word	0x40010800
 8000ea4:	200000c8 	.word	0x200000c8

08000ea8 <EPD_Clear>:

void EPD_Clear(EPD_HandleTypeDef *hepd) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	uint16_t i;
	_EPD_SendCommand(0x24);   //write RAM for black(0)/white (1)
 8000eb0:	2024      	movs	r0, #36	; 0x24
 8000eb2:	f7ff fe67 	bl	8000b84 <_EPD_SendCommand>
	for(i = 0; i < EPD_BYTES; i++) {
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	81fb      	strh	r3, [r7, #14]
 8000eba:	e005      	b.n	8000ec8 <EPD_Clear+0x20>
		_EPD_SendData(0xff);
 8000ebc:	20ff      	movs	r0, #255	; 0xff
 8000ebe:	f7ff fe89 	bl	8000bd4 <_EPD_SendData>
	for(i = 0; i < EPD_BYTES; i++) {
 8000ec2:	89fb      	ldrh	r3, [r7, #14]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	81fb      	strh	r3, [r7, #14]
 8000ec8:	89fb      	ldrh	r3, [r7, #14]
 8000eca:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8000ece:	d3f5      	bcc.n	8000ebc <EPD_Clear+0x14>
	}
	_EPD_TurnOnDisplay();
 8000ed0:	f7ff ff12 	bl	8000cf8 <_EPD_TurnOnDisplay>
}
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <EPD_Display>:

void EPD_Display(EPD_HandleTypeDef *hepd) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	uint16_t i;
	_EPD_SendCommand(0x24);   //write RAM for black(0)/white (1)
 8000ee4:	2024      	movs	r0, #36	; 0x24
 8000ee6:	f7ff fe4d 	bl	8000b84 <_EPD_SendCommand>
	for(i=0; i<EPD_BYTES; i++) {
 8000eea:	2300      	movs	r3, #0
 8000eec:	81fb      	strh	r3, [r7, #14]
 8000eee:	e009      	b.n	8000f04 <EPD_Display+0x28>
		_EPD_SendData(hepd->image[i]);
 8000ef0:	89fb      	ldrh	r3, [r7, #14]
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	789b      	ldrb	r3, [r3, #2]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fe6b 	bl	8000bd4 <_EPD_SendData>
	for(i=0; i<EPD_BYTES; i++) {
 8000efe:	89fb      	ldrh	r3, [r7, #14]
 8000f00:	3301      	adds	r3, #1
 8000f02:	81fb      	strh	r3, [r7, #14]
 8000f04:	89fb      	ldrh	r3, [r7, #14]
 8000f06:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8000f0a:	d3f1      	bcc.n	8000ef0 <EPD_Display+0x14>
	}
	_EPD_TurnOnDisplay();
 8000f0c:	f7ff fef4 	bl	8000cf8 <_EPD_TurnOnDisplay>
}
 8000f10:	bf00      	nop
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <EPD_Display_Partial>:

void EPD_Display_Partial(EPD_HandleTypeDef *hepd) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	uint16_t i;

	//Reset
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f26:	4834      	ldr	r0, [pc, #208]	; (8000ff8 <EPD_Display_Partial+0xe0>)
 8000f28:	f001 f8c3 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000f2c:	2002      	movs	r0, #2
 8000f2e:	f000 fc05 	bl	800173c <HAL_Delay>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 8000f32:	2201      	movs	r2, #1
 8000f34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f38:	482f      	ldr	r0, [pc, #188]	; (8000ff8 <EPD_Display_Partial+0xe0>)
 8000f3a:	f001 f8ba 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000f3e:	2002      	movs	r0, #2
 8000f40:	f000 fbfc 	bl	800173c <HAL_Delay>

	_EPD_LUT(_WF_PARTIAL_2IN9);
 8000f44:	482d      	ldr	r0, [pc, #180]	; (8000ffc <EPD_Display_Partial+0xe4>)
 8000f46:	f7ff fe7f 	bl	8000c48 <_EPD_LUT>
	_EPD_SendCommand(0x37);
 8000f4a:	2037      	movs	r0, #55	; 0x37
 8000f4c:	f7ff fe1a 	bl	8000b84 <_EPD_SendCommand>
	_EPD_SendData(0x00);
 8000f50:	2000      	movs	r0, #0
 8000f52:	f7ff fe3f 	bl	8000bd4 <_EPD_SendData>
	_EPD_SendData(0x00);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f7ff fe3c 	bl	8000bd4 <_EPD_SendData>
	_EPD_SendData(0x00);
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f7ff fe39 	bl	8000bd4 <_EPD_SendData>
	_EPD_SendData(0x00);
 8000f62:	2000      	movs	r0, #0
 8000f64:	f7ff fe36 	bl	8000bd4 <_EPD_SendData>
	_EPD_SendData(0x00);
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f7ff fe33 	bl	8000bd4 <_EPD_SendData>
	_EPD_SendData(0x40);
 8000f6e:	2040      	movs	r0, #64	; 0x40
 8000f70:	f7ff fe30 	bl	8000bd4 <_EPD_SendData>
	_EPD_SendData(0x00);
 8000f74:	2000      	movs	r0, #0
 8000f76:	f7ff fe2d 	bl	8000bd4 <_EPD_SendData>
	_EPD_SendData(0x00);
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f7ff fe2a 	bl	8000bd4 <_EPD_SendData>
	_EPD_SendData(0x00);
 8000f80:	2000      	movs	r0, #0
 8000f82:	f7ff fe27 	bl	8000bd4 <_EPD_SendData>
	_EPD_SendData(0x00);
 8000f86:	2000      	movs	r0, #0
 8000f88:	f7ff fe24 	bl	8000bd4 <_EPD_SendData>

	_EPD_SendCommand(0x3C); //BorderWavefrom
 8000f8c:	203c      	movs	r0, #60	; 0x3c
 8000f8e:	f7ff fdf9 	bl	8000b84 <_EPD_SendCommand>
	_EPD_SendData(0x80);
 8000f92:	2080      	movs	r0, #128	; 0x80
 8000f94:	f7ff fe1e 	bl	8000bd4 <_EPD_SendData>

	_EPD_SendCommand(0x22);
 8000f98:	2022      	movs	r0, #34	; 0x22
 8000f9a:	f7ff fdf3 	bl	8000b84 <_EPD_SendCommand>
	_EPD_SendData(0xC0);
 8000f9e:	20c0      	movs	r0, #192	; 0xc0
 8000fa0:	f7ff fe18 	bl	8000bd4 <_EPD_SendData>
	_EPD_SendCommand(0x20);
 8000fa4:	2020      	movs	r0, #32
 8000fa6:	f7ff fded 	bl	8000b84 <_EPD_SendCommand>
	_EPD_ReadBusy();
 8000faa:	f7ff fe3b 	bl	8000c24 <_EPD_ReadBusy>

	_EPD_SetWindows(0, 0, EPD_WIDTH-1, EPD_HEIGHT-1);
 8000fae:	f240 1327 	movw	r3, #295	; 0x127
 8000fb2:	227f      	movs	r2, #127	; 0x7f
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f7ff febc 	bl	8000d34 <_EPD_SetWindows>
	_EPD_SetCursor(0, 0);
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f7ff fef7 	bl	8000db2 <_EPD_SetCursor>

	_EPD_SendCommand(0x24);   //Write Black and White image to RAM
 8000fc4:	2024      	movs	r0, #36	; 0x24
 8000fc6:	f7ff fddd 	bl	8000b84 <_EPD_SendCommand>
	for(i=0;i<EPD_BYTES;i++)	{
 8000fca:	2300      	movs	r3, #0
 8000fcc:	81fb      	strh	r3, [r7, #14]
 8000fce:	e009      	b.n	8000fe4 <EPD_Display_Partial+0xcc>
		_EPD_SendData(hepd->image[i]);
 8000fd0:	89fb      	ldrh	r3, [r7, #14]
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	789b      	ldrb	r3, [r3, #2]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fdfb 	bl	8000bd4 <_EPD_SendData>
	for(i=0;i<EPD_BYTES;i++)	{
 8000fde:	89fb      	ldrh	r3, [r7, #14]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	81fb      	strh	r3, [r7, #14]
 8000fe4:	89fb      	ldrh	r3, [r7, #14]
 8000fe6:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8000fea:	d3f1      	bcc.n	8000fd0 <EPD_Display_Partial+0xb8>
	}
	_EPD_TurnOnDisplay_Partial();
 8000fec:	f7ff fe93 	bl	8000d16 <_EPD_TurnOnDisplay_Partial>
}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40010c00 	.word	0x40010c00
 8000ffc:	20000028 	.word	0x20000028

08001000 <EPD_Sleep>:

void EPD_Sleep(EPD_HandleTypeDef *hepd) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	_EPD_SendCommand(0x10); //enter deep sleep
 8001008:	2010      	movs	r0, #16
 800100a:	f7ff fdbb 	bl	8000b84 <_EPD_SendCommand>
	_EPD_SendData(0x01);
 800100e:	2001      	movs	r0, #1
 8001010:	f7ff fde0 	bl	8000bd4 <_EPD_SendData>
	HAL_Delay(100);
 8001014:	2064      	movs	r0, #100	; 0x64
 8001016:	f000 fb91 	bl	800173c <HAL_Delay>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <Translate>:
 *      Author: asky
 */

#include "painter2.h"

uint16_t Translate(char c) {
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
	static uint16_t map[256];
	static uint8_t map_init = 0;

	if (!map_init) {
 800102e:	4b55      	ldr	r3, [pc, #340]	; (8001184 <Translate+0x160>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	f040 809c 	bne.w	8001170 <Translate+0x14c>

		// SYMBOLS
		map[32] = 36; // space
 8001038:	4b53      	ldr	r3, [pc, #332]	; (8001188 <Translate+0x164>)
 800103a:	2224      	movs	r2, #36	; 0x24
 800103c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		map[33] = 37; // !
 8001040:	4b51      	ldr	r3, [pc, #324]	; (8001188 <Translate+0x164>)
 8001042:	2225      	movs	r2, #37	; 0x25
 8001044:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		map[34] = 38; // @
 8001048:	4b4f      	ldr	r3, [pc, #316]	; (8001188 <Translate+0x164>)
 800104a:	2226      	movs	r2, #38	; 0x26
 800104c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		map[35] = 39; // #
 8001050:	4b4d      	ldr	r3, [pc, #308]	; (8001188 <Translate+0x164>)
 8001052:	2227      	movs	r2, #39	; 0x27
 8001054:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		map[36] = 40; // $
 8001058:	4b4b      	ldr	r3, [pc, #300]	; (8001188 <Translate+0x164>)
 800105a:	2228      	movs	r2, #40	; 0x28
 800105c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		map[37] = 41; // %
 8001060:	4b49      	ldr	r3, [pc, #292]	; (8001188 <Translate+0x164>)
 8001062:	2229      	movs	r2, #41	; 0x29
 8001064:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		map[38] = 42; // &
 8001068:	4b47      	ldr	r3, [pc, #284]	; (8001188 <Translate+0x164>)
 800106a:	222a      	movs	r2, #42	; 0x2a
 800106c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		map[39] = 43; // '
 8001070:	4b45      	ldr	r3, [pc, #276]	; (8001188 <Translate+0x164>)
 8001072:	222b      	movs	r2, #43	; 0x2b
 8001074:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		map[40] = 44; // (
 8001078:	4b43      	ldr	r3, [pc, #268]	; (8001188 <Translate+0x164>)
 800107a:	222c      	movs	r2, #44	; 0x2c
 800107c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		map[41] = 45; // )
 8001080:	4b41      	ldr	r3, [pc, #260]	; (8001188 <Translate+0x164>)
 8001082:	222d      	movs	r2, #45	; 0x2d
 8001084:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		map[42] = 46; // *
 8001088:	4b3f      	ldr	r3, [pc, #252]	; (8001188 <Translate+0x164>)
 800108a:	222e      	movs	r2, #46	; 0x2e
 800108c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		map[43] = 47; // +
 8001090:	4b3d      	ldr	r3, [pc, #244]	; (8001188 <Translate+0x164>)
 8001092:	222f      	movs	r2, #47	; 0x2f
 8001094:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		map[44] = 48; // ,
 8001098:	4b3b      	ldr	r3, [pc, #236]	; (8001188 <Translate+0x164>)
 800109a:	2230      	movs	r2, #48	; 0x30
 800109c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		map[45] = 49; // -
 80010a0:	4b39      	ldr	r3, [pc, #228]	; (8001188 <Translate+0x164>)
 80010a2:	2231      	movs	r2, #49	; 0x31
 80010a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		map[46] = 50; // .
 80010a8:	4b37      	ldr	r3, [pc, #220]	; (8001188 <Translate+0x164>)
 80010aa:	2232      	movs	r2, #50	; 0x32
 80010ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		map[47] = 51; // /
 80010b0:	4b35      	ldr	r3, [pc, #212]	; (8001188 <Translate+0x164>)
 80010b2:	2233      	movs	r2, #51	; 0x33
 80010b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		map[58] = 52; // :
 80010b8:	4b33      	ldr	r3, [pc, #204]	; (8001188 <Translate+0x164>)
 80010ba:	2234      	movs	r2, #52	; 0x34
 80010bc:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
		map[59] = 53; // ;
 80010c0:	4b31      	ldr	r3, [pc, #196]	; (8001188 <Translate+0x164>)
 80010c2:	2235      	movs	r2, #53	; 0x35
 80010c4:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
		map[60] = 54; // <
 80010c8:	4b2f      	ldr	r3, [pc, #188]	; (8001188 <Translate+0x164>)
 80010ca:	2236      	movs	r2, #54	; 0x36
 80010cc:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
		map[61] = 55; // =
 80010d0:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <Translate+0x164>)
 80010d2:	2237      	movs	r2, #55	; 0x37
 80010d4:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
		map[62] = 56; // >
 80010d8:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <Translate+0x164>)
 80010da:	2238      	movs	r2, #56	; 0x38
 80010dc:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
		map[63] = 57; // ?
 80010e0:	4b29      	ldr	r3, [pc, #164]	; (8001188 <Translate+0x164>)
 80010e2:	2239      	movs	r2, #57	; 0x39
 80010e4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
		map[91] = 58; // [
 80010e8:	4b27      	ldr	r3, [pc, #156]	; (8001188 <Translate+0x164>)
 80010ea:	223a      	movs	r2, #58	; 0x3a
 80010ec:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
		map[92] = 59; /* \ */
 80010f0:	4b25      	ldr	r3, [pc, #148]	; (8001188 <Translate+0x164>)
 80010f2:	223b      	movs	r2, #59	; 0x3b
 80010f4:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		map[93] = 60; // ]
 80010f8:	4b23      	ldr	r3, [pc, #140]	; (8001188 <Translate+0x164>)
 80010fa:	223c      	movs	r2, #60	; 0x3c
 80010fc:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		map[94] = 61; // ^
 8001100:	4b21      	ldr	r3, [pc, #132]	; (8001188 <Translate+0x164>)
 8001102:	223d      	movs	r2, #61	; 0x3d
 8001104:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		map[95] = 62; // _
 8001108:	4b1f      	ldr	r3, [pc, #124]	; (8001188 <Translate+0x164>)
 800110a:	223e      	movs	r2, #62	; 0x3e
 800110c:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		map[64] = 63; // @ special
 8001110:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <Translate+0x164>)
 8001112:	223f      	movs	r2, #63	; 0x3f
 8001114:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

		// NUMBERS
		for (uint8_t i = 0; i < 10; i++) {
 8001118:	2300      	movs	r3, #0
 800111a:	73fb      	strb	r3, [r7, #15]
 800111c:	e00b      	b.n	8001136 <Translate+0x112>
			map[48 + i] = 26 + i;
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	b29a      	uxth	r2, r3
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	3330      	adds	r3, #48	; 0x30
 8001126:	321a      	adds	r2, #26
 8001128:	b291      	uxth	r1, r2
 800112a:	4a17      	ldr	r2, [pc, #92]	; (8001188 <Translate+0x164>)
 800112c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t i = 0; i < 10; i++) {
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	3301      	adds	r3, #1
 8001134:	73fb      	strb	r3, [r7, #15]
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	2b09      	cmp	r3, #9
 800113a:	d9f0      	bls.n	800111e <Translate+0xfa>
		}

		// LETTERS
		for (uint8_t i = 0; i < 26; i++) {
 800113c:	2300      	movs	r3, #0
 800113e:	73bb      	strb	r3, [r7, #14]
 8001140:	e010      	b.n	8001164 <Translate+0x140>
			map[65 + i] = i; // uppercase
 8001142:	7bbb      	ldrb	r3, [r7, #14]
 8001144:	3341      	adds	r3, #65	; 0x41
 8001146:	7bba      	ldrb	r2, [r7, #14]
 8001148:	b291      	uxth	r1, r2
 800114a:	4a0f      	ldr	r2, [pc, #60]	; (8001188 <Translate+0x164>)
 800114c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			map[97 + i] = i; // lowercase
 8001150:	7bbb      	ldrb	r3, [r7, #14]
 8001152:	3361      	adds	r3, #97	; 0x61
 8001154:	7bba      	ldrb	r2, [r7, #14]
 8001156:	b291      	uxth	r1, r2
 8001158:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <Translate+0x164>)
 800115a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t i = 0; i < 26; i++) {
 800115e:	7bbb      	ldrb	r3, [r7, #14]
 8001160:	3301      	adds	r3, #1
 8001162:	73bb      	strb	r3, [r7, #14]
 8001164:	7bbb      	ldrb	r3, [r7, #14]
 8001166:	2b19      	cmp	r3, #25
 8001168:	d9eb      	bls.n	8001142 <Translate+0x11e>
		}

		map_init = 1;
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <Translate+0x160>)
 800116c:	2201      	movs	r2, #1
 800116e:	701a      	strb	r2, [r3, #0]
	}

	return map[(uint8_t)c];
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	4a05      	ldr	r2, [pc, #20]	; (8001188 <Translate+0x164>)
 8001174:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20002b94 	.word	0x20002b94
 8001188:	20002b98 	.word	0x20002b98

0800118c <Painter_TogglePixel>:

void Painter_TogglePixel(uint8_t *image, uint16_t *x, uint16_t *y, enum Origin origin) {
 800118c:	b480      	push	{r7}
 800118e:	b087      	sub	sp, #28
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
 8001198:	70fb      	strb	r3, [r7, #3]
	uint16_t i;
	uint16_t _x, _y;

	if (origin == TOP_LEFT) {
 800119a:	78fb      	ldrb	r3, [r7, #3]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d106      	bne.n	80011ae <Painter_TogglePixel+0x22>
		_x = *x;
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	82fb      	strh	r3, [r7, #22]
		_y = *y;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	82bb      	strh	r3, [r7, #20]
 80011ac:	e026      	b.n	80011fc <Painter_TogglePixel+0x70>
	} else if (origin == TOP_RIGHT) {
 80011ae:	78fb      	ldrb	r3, [r7, #3]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d108      	bne.n	80011c6 <Painter_TogglePixel+0x3a>
		_x = CANVAS_WIDTH - *x -1;
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80011bc:	82fb      	strh	r3, [r7, #22]
		_y = *y;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	82bb      	strh	r3, [r7, #20]
 80011c4:	e01a      	b.n	80011fc <Painter_TogglePixel+0x70>
	} else if (origin == BOT_LEFT) {
 80011c6:	78fb      	ldrb	r3, [r7, #3]
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d109      	bne.n	80011e0 <Painter_TogglePixel+0x54>
		_x = *y;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	82fb      	strh	r3, [r7, #22]
		_y = CANVAS_HEIGHT - *x -1;
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	f5c3 7393 	rsb	r3, r3, #294	; 0x126
 80011da:	3301      	adds	r3, #1
 80011dc:	82bb      	strh	r3, [r7, #20]
 80011de:	e00d      	b.n	80011fc <Painter_TogglePixel+0x70>
	} else if (origin == BOT_RIGHT) {
 80011e0:	78fb      	ldrb	r3, [r7, #3]
 80011e2:	2b03      	cmp	r3, #3
 80011e4:	d10a      	bne.n	80011fc <Painter_TogglePixel+0x70>
		_x = CANVAS_WIDTH - *y -1;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80011ee:	82fb      	strh	r3, [r7, #22]
		_y = CANVAS_HEIGHT - *x -1;
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	f5c3 7393 	rsb	r3, r3, #294	; 0x126
 80011f8:	3301      	adds	r3, #1
 80011fa:	82bb      	strh	r3, [r7, #20]
	}

	if (_x < CANVAS_WIDTH && _y < CANVAS_HEIGHT) {
 80011fc:	8afb      	ldrh	r3, [r7, #22]
 80011fe:	2b7f      	cmp	r3, #127	; 0x7f
 8001200:	d820      	bhi.n	8001244 <Painter_TogglePixel+0xb8>
 8001202:	8abb      	ldrh	r3, [r7, #20]
 8001204:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 8001208:	d21c      	bcs.n	8001244 <Painter_TogglePixel+0xb8>
		// normalized to be top_left
		i = (_x +  _y * CANVAS_WIDTH) / 8;
 800120a:	8afa      	ldrh	r2, [r7, #22]
 800120c:	8abb      	ldrh	r3, [r7, #20]
 800120e:	01db      	lsls	r3, r3, #7
 8001210:	4413      	add	r3, r2
 8001212:	2b00      	cmp	r3, #0
 8001214:	da00      	bge.n	8001218 <Painter_TogglePixel+0x8c>
 8001216:	3307      	adds	r3, #7
 8001218:	10db      	asrs	r3, r3, #3
 800121a:	827b      	strh	r3, [r7, #18]
		image[i] ^= (0x01 << (7 - _x % 8));
 800121c:	8a7b      	ldrh	r3, [r7, #18]
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	4413      	add	r3, r2
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	b25a      	sxtb	r2, r3
 8001226:	8afb      	ldrh	r3, [r7, #22]
 8001228:	43db      	mvns	r3, r3
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	2101      	movs	r1, #1
 8001230:	fa01 f303 	lsl.w	r3, r1, r3
 8001234:	b25b      	sxtb	r3, r3
 8001236:	4053      	eors	r3, r2
 8001238:	b259      	sxtb	r1, r3
 800123a:	8a7b      	ldrh	r3, [r7, #18]
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	4413      	add	r3, r2
 8001240:	b2ca      	uxtb	r2, r1
 8001242:	701a      	strb	r2, [r3, #0]
	}
}
 8001244:	bf00      	nop
 8001246:	371c      	adds	r7, #28
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr

0800124e <Painter_WriteString>:
			Painter_TogglePixel(image, &x, &y, origin);
		}
	}
}

void Painter_WriteString(uint8_t *image, char *text, uint16_t x, uint16_t y, enum Origin origin, enum Font font) {
 800124e:	b580      	push	{r7, lr}
 8001250:	b088      	sub	sp, #32
 8001252:	af02      	add	r7, sp, #8
 8001254:	60f8      	str	r0, [r7, #12]
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	4611      	mov	r1, r2
 800125a:	461a      	mov	r2, r3
 800125c:	460b      	mov	r3, r1
 800125e:	80fb      	strh	r3, [r7, #6]
 8001260:	4613      	mov	r3, r2
 8001262:	80bb      	strh	r3, [r7, #4]

	uint16_t i = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	82fb      	strh	r3, [r7, #22]
	uint16_t fwidth = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	82bb      	strh	r3, [r7, #20]
	if (font == SMALL) {
 800126c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001270:	2b00      	cmp	r3, #0
 8001272:	d102      	bne.n	800127a <Painter_WriteString+0x2c>
		fwidth = 8;
 8001274:	2308      	movs	r3, #8
 8001276:	82bb      	strh	r3, [r7, #20]
 8001278:	e020      	b.n	80012bc <Painter_WriteString+0x6e>
	} else if (font == LARGE) {
 800127a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800127e:	2b01      	cmp	r3, #1
 8001280:	d11c      	bne.n	80012bc <Painter_WriteString+0x6e>
		fwidth = 12;
 8001282:	230c      	movs	r3, #12
 8001284:	82bb      	strh	r3, [r7, #20]
	}

	while(text[i] > 0) {
 8001286:	e019      	b.n	80012bc <Painter_WriteString+0x6e>
		Painter_WriteChar(image, text[i], x + fwidth * i, y, origin, font);
 8001288:	8afb      	ldrh	r3, [r7, #22]
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	4413      	add	r3, r2
 800128e:	7819      	ldrb	r1, [r3, #0]
 8001290:	8abb      	ldrh	r3, [r7, #20]
 8001292:	8afa      	ldrh	r2, [r7, #22]
 8001294:	fb02 f303 	mul.w	r3, r2, r3
 8001298:	b29a      	uxth	r2, r3
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	4413      	add	r3, r2
 800129e:	b29a      	uxth	r2, r3
 80012a0:	88b8      	ldrh	r0, [r7, #4]
 80012a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	4603      	mov	r3, r0
 80012b0:	68f8      	ldr	r0, [r7, #12]
 80012b2:	f000 f80f 	bl	80012d4 <Painter_WriteChar>
		i++;
 80012b6:	8afb      	ldrh	r3, [r7, #22]
 80012b8:	3301      	adds	r3, #1
 80012ba:	82fb      	strh	r3, [r7, #22]
	while(text[i] > 0) {
 80012bc:	8afb      	ldrh	r3, [r7, #22]
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	4413      	add	r3, r2
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1df      	bne.n	8001288 <Painter_WriteString+0x3a>
	}
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <Painter_WriteChar>:

uint8_t font_8_12[768] = { 0x0, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x7e, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x7c, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0x7c, 0x0, 0x0, 0x0, 0x3c, 0x66, 0x66, 0x60, 0x60, 0x60, 0x66, 0x66, 0x3c, 0x0, 0x0, 0x0, 0x7c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x0, 0x0, 0x0, 0x7e, 0x60, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0x7e, 0x0, 0x0, 0x0, 0x7e, 0x60, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0x60, 0x0, 0x0, 0x0, 0x3c, 0x66, 0x66, 0x60, 0x60, 0x6e, 0x66, 0x66, 0x3c, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x66, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x66, 0x66, 0x3c, 0x0, 0x0, 0x0, 0x66, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0x66, 0x0, 0x0, 0x0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7e, 0x0, 0x0, 0x0, 0x63, 0x63, 0x77, 0x7f, 0x6b, 0x6b, 0x63, 0x63, 0x63, 0x0, 0x0, 0x0, 0x63, 0x63, 0x73, 0x7b, 0x6f, 0x67, 0x63, 0x63, 0x63, 0x0, 0x0, 0x0, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x0, 0x0, 0x0, 0x7c, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x60, 0x0, 0x0, 0x0, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0xc, 0x6, 0x0, 0x7c, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x3c, 0x66, 0x60, 0x30, 0x18, 0xc, 0x6, 0x66, 0x3c, 0x0, 0x0, 0x0, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x0, 0x0, 0x0, 0x63, 0x63, 0x63, 0x63, 0x6b, 0x6b, 0x3e, 0x36, 0x36, 0x0, 0x0, 0x0, 0x66, 0x66, 0x34, 0x18, 0x18, 0x2c, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x0, 0x0, 0x0, 0x7e, 0x6, 0x6, 0xc, 0x18, 0x30, 0x60, 0x60, 0x7e, 0x0, 0x0, 0x0, 0x3c, 0x66, 0x6e, 0x6e, 0x66, 0x76, 0x76, 0x66, 0x3c, 0x0, 0x0, 0x0, 0xc, 0x1c, 0x7c, 0xc, 0xc, 0xc, 0xc, 0xc, 0x1e, 0x0, 0x0, 0x0, 0x3c, 0x66, 0x66, 0x6, 0xc, 0x18, 0x30, 0x60, 0x7e, 0x0, 0x0, 0x0, 0x3c, 0x66, 0x66, 0x6, 0x1c, 0x6, 0x66, 0x66, 0x3c, 0x0, 0x0, 0x0, 0x30, 0x36, 0x36, 0x36, 0x36, 0x66, 0x7f, 0x6, 0x6, 0x0, 0x0, 0x0, 0x7e, 0x60, 0x60, 0x60, 0x3c, 0x6, 0x6, 0x6, 0x7c, 0x0, 0x0, 0x0, 0x1c, 0x38, 0x30, 0x7c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x0, 0x0, 0x0, 0x7e, 0x6, 0xc, 0xc, 0x18, 0x18, 0x30, 0x30, 0x30, 0x0, 0x0, 0x0, 0x3c, 0x66, 0x66, 0x76, 0x3c, 0x6e, 0x66, 0x66, 0x3c, 0x0, 0x0, 0x0, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3e, 0xc, 0x1c, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x0, 0x18, 0x18, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x66, 0x66, 0xff, 0x66, 0x66, 0x66, 0xff, 0x66, 0x66, 0x0, 0x0, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x38, 0x1c, 0x6, 0x66, 0x3c, 0x18, 0x18, 0x70, 0xd8, 0xda, 0x76, 0xc, 0x18, 0x30, 0x6e, 0x5b, 0x1b, 0xe, 0x0, 0x0, 0x38, 0x6c, 0x6c, 0x38, 0x60, 0x6f, 0x66, 0x66, 0x3b, 0x0, 0x0, 0x0, 0x18, 0x18, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x18, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x18, 0xc, 0x0, 0x30, 0x18, 0x18, 0xc, 0xc, 0xc, 0xc, 0xc, 0x18, 0x18, 0x30, 0x0, 0x0, 0x0, 0x0, 0x36, 0x1c, 0x7f, 0x1c, 0x36, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x38, 0x18, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x38, 0x0, 0x0, 0x0, 0x6, 0x6, 0xc, 0xc, 0x18, 0x18, 0x30, 0x30, 0x60, 0x60, 0x0, 0x0, 0x0, 0x0, 0x38, 0x38, 0x0, 0x0, 0x0, 0x38, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x38, 0x0, 0x0, 0x0, 0x38, 0x38, 0x18, 0x30, 0x0, 0x6, 0xc, 0x18, 0x30, 0x60, 0x30, 0x18, 0xc, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7e, 0x0, 0x7e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x30, 0x18, 0xc, 0x6, 0xc, 0x18, 0x30, 0x60, 0x0, 0x0, 0x0, 0x3c, 0x66, 0x66, 0xe, 0x18, 0x18, 0x0, 0x18, 0x18, 0x0, 0x0, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x0, 0x0, 0x60, 0x60, 0x30, 0x30, 0x18, 0x18, 0xc, 0xc, 0x6, 0x6, 0x0, 0x3c, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0x3c, 0x0, 0x18, 0x3c, 0x66, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x0, 0x18, 0x1c, 0x1e, 0x1f, 0x1b, 0x1b, 0x1a, 0x18, 0x78, 0xf8, 0xf8, 0x70, };
uint8_t font_12_18[1728] = { 0x0, 0x0, 0x60, 0xf, 0x1, 0xf8, 0x39, 0xc7, 0xe, 0x60, 0x66, 0xfe, 0x6f, 0xe6, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xf8, 0x7f, 0xc6, 0xe, 0x60, 0x66, 0x6, 0x60, 0xe6, 0xfc, 0x6f, 0xc6, 0xe, 0x60, 0x66, 0x6, 0x60, 0xe7, 0xfc, 0x7f, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xf8, 0x3f, 0xc7, 0xe, 0x60, 0x66, 0x6, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x6, 0x70, 0xe3, 0xfc, 0x1f, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xf8, 0x7f, 0xc6, 0xe, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0xe6, 0xfc, 0x6f, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xfe, 0x7f, 0xe6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x7, 0xe0, 0x7e, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x7, 0xfe, 0x7f, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xfe, 0x7f, 0xe6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x7, 0xe0, 0x7e, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xf8, 0x3f, 0xc7, 0xe, 0x60, 0x66, 0x0, 0x60, 0x6, 0x3e, 0x63, 0xe6, 0x6, 0x60, 0x66, 0x6, 0x70, 0xe3, 0xfc, 0x1f, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0x67, 0xfe, 0x7f, 0xe6, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xf8, 0x1f, 0x80, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x1, 0xf8, 0x1f, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x60, 0x66, 0x6, 0x70, 0xe3, 0xfc, 0x1f, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x60, 0x66, 0xe, 0x61, 0xc6, 0x38, 0x67, 0x6, 0xe0, 0x6e, 0x6, 0x70, 0x63, 0x86, 0x1c, 0x60, 0xe6, 0x6, 0x60, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x7, 0xfe, 0x7f, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x60, 0x67, 0xe, 0x79, 0xe7, 0xfe, 0x6f, 0x66, 0x66, 0x66, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x60, 0x67, 0x6, 0x78, 0x67, 0xc6, 0x6e, 0x66, 0x76, 0x63, 0xe6, 0x1e, 0x60, 0xe6, 0x6, 0x60, 0x66, 0x6, 0x60, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xf8, 0x3f, 0xc7, 0xe, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x70, 0xe3, 0xfc, 0x1f, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xf8, 0x7f, 0xc6, 0xe, 0x60, 0x66, 0x6, 0x60, 0xe6, 0xfc, 0x6f, 0x86, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xf8, 0x3f, 0xc7, 0xe, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x70, 0xe3, 0xbc, 0x1b, 0x80, 0x38, 0x1, 0xe0, 0xe, 0x0, 0x7, 0xf8, 0x7f, 0xc6, 0xe, 0x60, 0x66, 0x6, 0x60, 0xe7, 0xdc, 0x7b, 0x86, 0x38, 0x61, 0xc6, 0xe, 0x60, 0x66, 0x6, 0x60, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xf8, 0x3f, 0xc7, 0xe, 0x60, 0x66, 0x0, 0x70, 0x3, 0xf8, 0x1f, 0xc0, 0xe, 0x0, 0x66, 0x6, 0x70, 0xe3, 0xfc, 0x1f, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xfe, 0x7f, 0xe0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x70, 0xe3, 0xfc, 0x1f, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x70, 0xe3, 0x9c, 0x1f, 0x80, 0xf0, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x66, 0x66, 0x66, 0xf6, 0x7f, 0xe7, 0x9e, 0x70, 0xe6, 0x6, 0x60, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x60, 0x67, 0xe, 0x39, 0xc1, 0xd8, 0xe, 0x0, 0x70, 0x1b, 0x83, 0x9c, 0x70, 0xe6, 0x6, 0x60, 0x66, 0x6, 0x60, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x60, 0x66, 0x6, 0x60, 0x66, 0x6, 0x70, 0xe3, 0x9c, 0x1f, 0x80, 0xf0, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xfe, 0x7f, 0xe0, 0x6, 0x0, 0xe0, 0x1c, 0x3, 0x80, 0x70, 0xe, 0x1, 0xc0, 0x38, 0x7, 0x0, 0x60, 0x7, 0xfe, 0x7f, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xf8, 0x3f, 0xc7, 0xe, 0x61, 0x66, 0x36, 0x63, 0x66, 0x66, 0x66, 0x66, 0xc6, 0x6c, 0x66, 0x86, 0x70, 0xe3, 0xfc, 0x1f, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x3, 0x80, 0xf8, 0xf, 0x80, 0x18, 0x1, 0x80, 0x18, 0x1, 0x80, 0x18, 0x1, 0x80, 0x18, 0x1, 0x80, 0x7e, 0x7, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xf8, 0x3f, 0xc7, 0xe, 0x60, 0x66, 0x6, 0x0, 0xe1, 0xfc, 0x3f, 0x87, 0x0, 0x60, 0x6, 0x0, 0x60, 0x7, 0xfe, 0x7f, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xf8, 0x3f, 0xc7, 0xe, 0x60, 0x66, 0x6, 0x0, 0xe0, 0xfc, 0xf, 0xc0, 0xe, 0x60, 0x66, 0x6, 0x70, 0xe3, 0xfc, 0x1f, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1c, 0x3, 0xc0, 0x7c, 0xe, 0xc1, 0xcc, 0x38, 0xc7, 0xc, 0x60, 0xc6, 0xc, 0x7e, 0xe7, 0xee, 0x0, 0xc0, 0xc, 0x0, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xfe, 0x7f, 0xe6, 0x0, 0x60, 0x6, 0x0, 0x70, 0x3, 0xf8, 0x1f, 0xc0, 0xe, 0x0, 0x60, 0x6, 0x0, 0xe7, 0xfc, 0x7f, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf8, 0x1f, 0x83, 0x80, 0x70, 0x6, 0x0, 0x7f, 0x87, 0xfc, 0x70, 0xe6, 0x6, 0x60, 0x66, 0x6, 0x70, 0xe3, 0xfc, 0x1f, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xfe, 0x7f, 0xe0, 0x6, 0x0, 0x60, 0xe, 0x1, 0xc0, 0x38, 0x7, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xf8, 0x3f, 0xc7, 0xe, 0x60, 0x66, 0x6, 0x70, 0xe3, 0xfc, 0x3f, 0xc7, 0xe, 0x60, 0x66, 0x6, 0x70, 0xe3, 0xfc, 0x1f, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xf8, 0x3f, 0xc7, 0xe, 0x60, 0x66, 0x6, 0x60, 0x67, 0xe, 0x3f, 0xe1, 0xfe, 0x0, 0x60, 0xe, 0x1, 0xc1, 0xf8, 0x1f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x6, 0x0, 0xf0, 0xf, 0x0, 0xf0, 0xf, 0x0, 0x60, 0x6, 0x0, 0x60, 0x0, 0x0, 0x0, 0x6, 0x0, 0xf0, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x18, 0x31, 0x83, 0x9c, 0x18, 0xc1, 0x8c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x98, 0x19, 0x81, 0x98, 0x7f, 0xe7, 0xfe, 0x19, 0x81, 0x98, 0x19, 0x81, 0x98, 0x7f, 0xe7, 0xfe, 0x19, 0x81, 0x98, 0x19, 0x80, 0x0, 0x0, 0x0, 0x0, 0x6, 0x0, 0x60, 0x1f, 0x83, 0xfc, 0x76, 0xe6, 0x66, 0x70, 0x3, 0xf8, 0x1f, 0xc0, 0xe, 0x66, 0x67, 0x6e, 0x3f, 0xc1, 0xf8, 0x6, 0x0, 0x60, 0x0, 0x0, 0x0, 0x7c, 0xe, 0xe6, 0xc6, 0x6e, 0xe6, 0x7c, 0xe0, 0x1c, 0x3, 0x80, 0x70, 0xe, 0x1, 0xc0, 0x38, 0x7, 0x3e, 0x67, 0x76, 0x63, 0x67, 0x70, 0x3e, 0x0, 0x0, 0x0, 0x0, 0x1, 0xe0, 0x3f, 0x7, 0x38, 0x61, 0x86, 0x18, 0x73, 0x3, 0xe0, 0x3e, 0x7, 0x76, 0x63, 0xa6, 0x1c, 0x70, 0xe3, 0xf6, 0x1f, 0xa0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe0, 0xe, 0x0, 0xf0, 0x7, 0x0, 0x70, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x80, 0x70, 0xe, 0x0, 0xc0, 0xc, 0x0, 0xc0, 0xc, 0x0, 0xc0, 0xc, 0x0, 0xc0, 0xc, 0x0, 0xc0, 0xc, 0x0, 0xe0, 0x7, 0x0, 0x38, 0x0, 0x0, 0x0, 0x1c, 0x0, 0xe0, 0x7, 0x0, 0x30, 0x3, 0x0, 0x30, 0x3, 0x0, 0x30, 0x3, 0x0, 0x30, 0x3, 0x0, 0x30, 0x3, 0x0, 0x70, 0xe, 0x1, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xc, 0x39, 0xc1, 0xf8, 0xf, 0x7, 0xfe, 0x7f, 0xe0, 0xf0, 0x1f, 0x83, 0x9c, 0x30, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x7, 0xfe, 0x7f, 0xe0, 0x60, 0x6, 0x0, 0x60, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x1e, 0x1, 0xe0, 0xc, 0x1, 0xc0, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xfe, 0x7f, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x1e, 0x1, 0xe0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0xc0, 0x18, 0x1, 0x80, 0x30, 0x3, 0x0, 0x60, 0x6, 0x0, 0xc0, 0xc, 0x1, 0x80, 0x18, 0x3, 0x0, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x1, 0xe0, 0x1e, 0x0, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x1e, 0x1, 0xe0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x1, 0xe0, 0x1e, 0x0, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x1e, 0x1, 0xe0, 0xc, 0x1, 0xc0, 0x18, 0x0, 0x0, 0x0, 0x0, 0x1c, 0x3, 0x80, 0x70, 0xe, 0x1, 0xc0, 0x38, 0x7, 0x0, 0x70, 0x3, 0x80, 0x1c, 0x0, 0xe0, 0x7, 0x0, 0x38, 0x1, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xfc, 0x7f, 0xc0, 0x0, 0x0, 0x7, 0xfc, 0x7f, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x38, 0x1, 0xc0, 0xe, 0x0, 0x70, 0x3, 0x80, 0x1c, 0x1, 0xc0, 0x38, 0x7, 0x0, 0xe0, 0x1c, 0x3, 0x80, 0x70, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xf8, 0x3f, 0xc7, 0xe, 0x60, 0x66, 0x6, 0x1, 0xe0, 0x3c, 0x7, 0x0, 0x60, 0x6, 0x0, 0x0, 0x6, 0x0, 0xf0, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x0, 0xe0, 0xc, 0x0, 0xc0, 0xc, 0x0, 0xc0, 0xc, 0x0, 0xc0, 0xc, 0x0, 0xc0, 0xc, 0x0, 0xc0, 0xc, 0x0, 0xc0, 0xe, 0x0, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x30, 0x1, 0x80, 0x18, 0x0, 0xc0, 0xc, 0x0, 0x60, 0x6, 0x0, 0x30, 0x3, 0x0, 0x18, 0x1, 0x80, 0xc, 0x0, 0xc0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x0, 0x70, 0x3, 0x0, 0x30, 0x3, 0x0, 0x30, 0x3, 0x0, 0x30, 0x3, 0x0, 0x30, 0x3, 0x0, 0x30, 0x3, 0x0, 0x30, 0x7, 0x0, 0xf0, 0x0, 0x0, 0x0, 0x6, 0x0, 0xf0, 0x1f, 0x83, 0x9c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xff, 0xff, 0xf0, 0x0, 0x0, 0x0, 0x30, 0x7, 0x83, 0xec, 0x6e, 0xe4, 0xee, 0x7e, 0xe3, 0xae, 0x3f, 0x63, 0xf6, 0x3a, 0xe7, 0xee, 0x4e, 0xe6, 0xee, 0x3e, 0xc0, 0x78, 0x3, 0x0, 0x0, };

void Painter_WriteChar(uint8_t *image, char c, uint16_t x, uint16_t y, enum Origin origin, enum Font font) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08a      	sub	sp, #40	; 0x28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	4608      	mov	r0, r1
 80012de:	4611      	mov	r1, r2
 80012e0:	461a      	mov	r2, r3
 80012e2:	4603      	mov	r3, r0
 80012e4:	72fb      	strb	r3, [r7, #11]
 80012e6:	460b      	mov	r3, r1
 80012e8:	813b      	strh	r3, [r7, #8]
 80012ea:	4613      	mov	r3, r2
 80012ec:	80fb      	strh	r3, [r7, #6]

	uint16_t selected = Translate(c);
 80012ee:	7afb      	ldrb	r3, [r7, #11]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fe97 	bl	8001024 <Translate>
 80012f6:	4603      	mov	r3, r0
 80012f8:	837b      	strh	r3, [r7, #26]
	uint16_t fwidth = 0, fheight = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80012fe:	2300      	movs	r3, #0
 8001300:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t finalx, finaly;
	uint8_t *font_x_y;

	if (font == SMALL) {
 8001302:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001306:	2b00      	cmp	r3, #0
 8001308:	d106      	bne.n	8001318 <Painter_WriteChar+0x44>
		fwidth = 8;
 800130a:	2308      	movs	r3, #8
 800130c:	84fb      	strh	r3, [r7, #38]	; 0x26
		fheight = 12;
 800130e:	230c      	movs	r3, #12
 8001310:	84bb      	strh	r3, [r7, #36]	; 0x24
		font_x_y = font_8_12;
 8001312:	4b30      	ldr	r3, [pc, #192]	; (80013d4 <Painter_WriteChar+0x100>)
 8001314:	623b      	str	r3, [r7, #32]
 8001316:	e009      	b.n	800132c <Painter_WriteChar+0x58>
	} else if (font == LARGE) {
 8001318:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800131c:	2b01      	cmp	r3, #1
 800131e:	d105      	bne.n	800132c <Painter_WriteChar+0x58>
		fwidth = 12;
 8001320:	230c      	movs	r3, #12
 8001322:	84fb      	strh	r3, [r7, #38]	; 0x26
		fheight = 18;
 8001324:	2312      	movs	r3, #18
 8001326:	84bb      	strh	r3, [r7, #36]	; 0x24
		font_x_y = font_12_18;
 8001328:	4b2b      	ldr	r3, [pc, #172]	; (80013d8 <Painter_WriteChar+0x104>)
 800132a:	623b      	str	r3, [r7, #32]
	}

	for (uint16_t _y = 0; _y < fheight; _y++) {
 800132c:	2300      	movs	r3, #0
 800132e:	83fb      	strh	r3, [r7, #30]
 8001330:	e046      	b.n	80013c0 <Painter_WriteChar+0xec>
		for (uint16_t _x = 0; _x < fwidth; _x++) {
 8001332:	2300      	movs	r3, #0
 8001334:	83bb      	strh	r3, [r7, #28]
 8001336:	e03c      	b.n	80013b2 <Painter_WriteChar+0xde>
			uint16_t bit_offset = selected * fwidth * fheight;
 8001338:	8b7b      	ldrh	r3, [r7, #26]
 800133a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800133c:	fb02 f303 	mul.w	r3, r2, r3
 8001340:	b29b      	uxth	r3, r3
 8001342:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001344:	fb02 f303 	mul.w	r3, r2, r3
 8001348:	833b      	strh	r3, [r7, #24]
			uint16_t bit_index = _x + _y * fwidth;
 800134a:	8bfb      	ldrh	r3, [r7, #30]
 800134c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800134e:	fb02 f303 	mul.w	r3, r2, r3
 8001352:	b29a      	uxth	r2, r3
 8001354:	8bbb      	ldrh	r3, [r7, #28]
 8001356:	4413      	add	r3, r2
 8001358:	82fb      	strh	r3, [r7, #22]
			if ((font_x_y[(bit_offset + bit_index) / 8] >> (7 - bit_index % 8)) & 0x01) {
 800135a:	8b3a      	ldrh	r2, [r7, #24]
 800135c:	8afb      	ldrh	r3, [r7, #22]
 800135e:	4413      	add	r3, r2
 8001360:	2b00      	cmp	r3, #0
 8001362:	da00      	bge.n	8001366 <Painter_WriteChar+0x92>
 8001364:	3307      	adds	r3, #7
 8001366:	10db      	asrs	r3, r3, #3
 8001368:	461a      	mov	r2, r3
 800136a:	6a3b      	ldr	r3, [r7, #32]
 800136c:	4413      	add	r3, r2
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	8afb      	ldrh	r3, [r7, #22]
 8001374:	43db      	mvns	r3, r3
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	fa42 f303 	asr.w	r3, r2, r3
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	2b00      	cmp	r3, #0
 8001384:	d012      	beq.n	80013ac <Painter_WriteChar+0xd8>
				finalx = _x + x;
 8001386:	8bba      	ldrh	r2, [r7, #28]
 8001388:	893b      	ldrh	r3, [r7, #8]
 800138a:	4413      	add	r3, r2
 800138c:	b29b      	uxth	r3, r3
 800138e:	82bb      	strh	r3, [r7, #20]
				finaly = _y + y;
 8001390:	8bfa      	ldrh	r2, [r7, #30]
 8001392:	88fb      	ldrh	r3, [r7, #6]
 8001394:	4413      	add	r3, r2
 8001396:	b29b      	uxth	r3, r3
 8001398:	827b      	strh	r3, [r7, #18]
				Painter_TogglePixel(image, &finalx, &finaly, origin);
 800139a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800139e:	f107 0212 	add.w	r2, r7, #18
 80013a2:	f107 0114 	add.w	r1, r7, #20
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	f7ff fef0 	bl	800118c <Painter_TogglePixel>
		for (uint16_t _x = 0; _x < fwidth; _x++) {
 80013ac:	8bbb      	ldrh	r3, [r7, #28]
 80013ae:	3301      	adds	r3, #1
 80013b0:	83bb      	strh	r3, [r7, #28]
 80013b2:	8bba      	ldrh	r2, [r7, #28]
 80013b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d3be      	bcc.n	8001338 <Painter_WriteChar+0x64>
	for (uint16_t _y = 0; _y < fheight; _y++) {
 80013ba:	8bfb      	ldrh	r3, [r7, #30]
 80013bc:	3301      	adds	r3, #1
 80013be:	83fb      	strh	r3, [r7, #30]
 80013c0:	8bfa      	ldrh	r2, [r7, #30]
 80013c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d3b4      	bcc.n	8001332 <Painter_WriteChar+0x5e>
			_x += x;
			_y += y;
			Painter_TogglePixel(image, &_x, &_y, origin);
		}
	}*/
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	3728      	adds	r7, #40	; 0x28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000168 	.word	0x20000168
 80013d8:	20000468 	.word	0x20000468

080013dc <Painter_Clean>:


void Painter_Clean(uint8_t *image) {
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	uint16_t bytes = CANVAS_WIDTH * CANVAS_HEIGHT / 8;
 80013e4:	f44f 5394 	mov.w	r3, #4736	; 0x1280
 80013e8:	81bb      	strh	r3, [r7, #12]
	for (uint16_t i = 0; i < bytes; i++) image[i] = 0xFF;
 80013ea:	2300      	movs	r3, #0
 80013ec:	81fb      	strh	r3, [r7, #14]
 80013ee:	e007      	b.n	8001400 <Painter_Clean+0x24>
 80013f0:	89fb      	ldrh	r3, [r7, #14]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	22ff      	movs	r2, #255	; 0xff
 80013f8:	701a      	strb	r2, [r3, #0]
 80013fa:	89fb      	ldrh	r3, [r7, #14]
 80013fc:	3301      	adds	r3, #1
 80013fe:	81fb      	strh	r3, [r7, #14]
 8001400:	89fa      	ldrh	r2, [r7, #14]
 8001402:	89bb      	ldrh	r3, [r7, #12]
 8001404:	429a      	cmp	r2, r3
 8001406:	d3f3      	bcc.n	80013f0 <Painter_Clean+0x14>
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <Painter_ToggleCanvas>:

void Painter_ToggleCanvas(uint8_t *image) {
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	uint16_t bytes = CANVAS_WIDTH * CANVAS_HEIGHT / 8;
 800141c:	f44f 5394 	mov.w	r3, #4736	; 0x1280
 8001420:	81bb      	strh	r3, [r7, #12]
	for (uint16_t i = 0; i < bytes; i++) image[i] = ~image[i];
 8001422:	2300      	movs	r3, #0
 8001424:	81fb      	strh	r3, [r7, #14]
 8001426:	e00c      	b.n	8001442 <Painter_ToggleCanvas+0x2e>
 8001428:	89fb      	ldrh	r3, [r7, #14]
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	4413      	add	r3, r2
 800142e:	781a      	ldrb	r2, [r3, #0]
 8001430:	89fb      	ldrh	r3, [r7, #14]
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	440b      	add	r3, r1
 8001436:	43d2      	mvns	r2, r2
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	701a      	strb	r2, [r3, #0]
 800143c:	89fb      	ldrh	r3, [r7, #14]
 800143e:	3301      	adds	r3, #1
 8001440:	81fb      	strh	r3, [r7, #14]
 8001442:	89fa      	ldrh	r2, [r7, #14]
 8001444:	89bb      	ldrh	r3, [r7, #12]
 8001446:	429a      	cmp	r2, r3
 8001448:	d3ee      	bcc.n	8001428 <Painter_ToggleCanvas+0x14>
}
 800144a:	bf00      	nop
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr

08001456 <RE_Init>:
 *      Author: asky
 */

#include "rencoder.h"

void RE_Init(RE_HandleTypeDef *hre, GPIO_TypeDef *portA, GPIO_TypeDef *portB, uint16_t pinA, uint16_t pinB, uint16_t divider) {
 8001456:	b480      	push	{r7}
 8001458:	b085      	sub	sp, #20
 800145a:	af00      	add	r7, sp, #0
 800145c:	60f8      	str	r0, [r7, #12]
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	807b      	strh	r3, [r7, #2]
	hre->lasttick = 0;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
	hre->lastA = 0;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2200      	movs	r2, #0
 800146e:	809a      	strh	r2, [r3, #4]
	hre->lastB = 0;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2200      	movs	r2, #0
 8001474:	80da      	strh	r2, [r3, #6]
	hre->currentA = 0;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2200      	movs	r2, #0
 800147a:	811a      	strh	r2, [r3, #8]
	hre->currentB = 0;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2200      	movs	r2, #0
 8001480:	815a      	strh	r2, [r3, #10]
	hre->counter = 0;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2200      	movs	r2, #0
 8001486:	831a      	strh	r2, [r3, #24]
	hre->portA = portA;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	68ba      	ldr	r2, [r7, #8]
 800148c:	60da      	str	r2, [r3, #12]
	hre->portB = portB;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	611a      	str	r2, [r3, #16]
	hre->pinA = pinA;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	887a      	ldrh	r2, [r7, #2]
 8001498:	829a      	strh	r2, [r3, #20]
	hre->pinB = pinB;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	8b3a      	ldrh	r2, [r7, #24]
 800149e:	82da      	strh	r2, [r3, #22]
	hre->divider = divider;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	8bba      	ldrh	r2, [r7, #28]
 80014a4:	835a      	strh	r2, [r3, #26]
}
 80014a6:	bf00      	nop
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr

080014b0 <RE_Process>:

uint8_t RE_Process(RE_HandleTypeDef *hre) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() != hre->lasttick) {
 80014b8:	f000 f936 	bl	8001728 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	f000 80b7 	beq.w	8001636 <RE_Process+0x186>
		hre->lasttick = HAL_GetTick();
 80014c8:	f000 f92e 	bl	8001728 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	601a      	str	r2, [r3, #0]
		hre->lastA = hre->currentA;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	891a      	ldrh	r2, [r3, #8]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	809a      	strh	r2, [r3, #4]
		hre->lastB = hre->currentB;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	895a      	ldrh	r2, [r3, #10]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	80da      	strh	r2, [r3, #6]

		uint16_t temp;
		uint16_t alpha = 75; //%
 80014e2:	234b      	movs	r3, #75	; 0x4b
 80014e4:	81fb      	strh	r3, [r7, #14]
		uint16_t ceil = 10000, thr = 5000;
 80014e6:	f242 7310 	movw	r3, #10000	; 0x2710
 80014ea:	81bb      	strh	r3, [r7, #12]
 80014ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80014f0:	817b      	strh	r3, [r7, #10]

		temp = HAL_GPIO_ReadPin(hre->portA, hre->pinA) == GPIO_PIN_SET ? ceil : 0;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68da      	ldr	r2, [r3, #12]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	8a9b      	ldrh	r3, [r3, #20]
 80014fa:	4619      	mov	r1, r3
 80014fc:	4610      	mov	r0, r2
 80014fe:	f000 fdc1 	bl	8002084 <HAL_GPIO_ReadPin>
 8001502:	4603      	mov	r3, r0
 8001504:	2b01      	cmp	r3, #1
 8001506:	d101      	bne.n	800150c <RE_Process+0x5c>
 8001508:	89bb      	ldrh	r3, [r7, #12]
 800150a:	e000      	b.n	800150e <RE_Process+0x5e>
 800150c:	2300      	movs	r3, #0
 800150e:	813b      	strh	r3, [r7, #8]
		hre->currentA = (hre->lastA * alpha / 100) + (temp * (100 - alpha) / 100);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	889b      	ldrh	r3, [r3, #4]
 8001514:	461a      	mov	r2, r3
 8001516:	89fb      	ldrh	r3, [r7, #14]
 8001518:	fb02 f303 	mul.w	r3, r2, r3
 800151c:	4a48      	ldr	r2, [pc, #288]	; (8001640 <RE_Process+0x190>)
 800151e:	fb82 1203 	smull	r1, r2, r2, r3
 8001522:	1152      	asrs	r2, r2, #5
 8001524:	17db      	asrs	r3, r3, #31
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	b29a      	uxth	r2, r3
 800152a:	893b      	ldrh	r3, [r7, #8]
 800152c:	89f9      	ldrh	r1, [r7, #14]
 800152e:	f1c1 0164 	rsb	r1, r1, #100	; 0x64
 8001532:	fb01 f303 	mul.w	r3, r1, r3
 8001536:	4942      	ldr	r1, [pc, #264]	; (8001640 <RE_Process+0x190>)
 8001538:	fb81 0103 	smull	r0, r1, r1, r3
 800153c:	1149      	asrs	r1, r1, #5
 800153e:	17db      	asrs	r3, r3, #31
 8001540:	1acb      	subs	r3, r1, r3
 8001542:	b29b      	uxth	r3, r3
 8001544:	4413      	add	r3, r2
 8001546:	b29a      	uxth	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	811a      	strh	r2, [r3, #8]

		temp = HAL_GPIO_ReadPin(hre->portB, hre->pinB) == GPIO_PIN_SET ? ceil : 0;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	691a      	ldr	r2, [r3, #16]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	8adb      	ldrh	r3, [r3, #22]
 8001554:	4619      	mov	r1, r3
 8001556:	4610      	mov	r0, r2
 8001558:	f000 fd94 	bl	8002084 <HAL_GPIO_ReadPin>
 800155c:	4603      	mov	r3, r0
 800155e:	2b01      	cmp	r3, #1
 8001560:	d101      	bne.n	8001566 <RE_Process+0xb6>
 8001562:	89bb      	ldrh	r3, [r7, #12]
 8001564:	e000      	b.n	8001568 <RE_Process+0xb8>
 8001566:	2300      	movs	r3, #0
 8001568:	813b      	strh	r3, [r7, #8]
		hre->currentB = (hre->lastB * alpha / 100) + (temp * (100 - alpha) / 100);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	88db      	ldrh	r3, [r3, #6]
 800156e:	461a      	mov	r2, r3
 8001570:	89fb      	ldrh	r3, [r7, #14]
 8001572:	fb02 f303 	mul.w	r3, r2, r3
 8001576:	4a32      	ldr	r2, [pc, #200]	; (8001640 <RE_Process+0x190>)
 8001578:	fb82 1203 	smull	r1, r2, r2, r3
 800157c:	1152      	asrs	r2, r2, #5
 800157e:	17db      	asrs	r3, r3, #31
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	b29a      	uxth	r2, r3
 8001584:	893b      	ldrh	r3, [r7, #8]
 8001586:	89f9      	ldrh	r1, [r7, #14]
 8001588:	f1c1 0164 	rsb	r1, r1, #100	; 0x64
 800158c:	fb01 f303 	mul.w	r3, r1, r3
 8001590:	492b      	ldr	r1, [pc, #172]	; (8001640 <RE_Process+0x190>)
 8001592:	fb81 0103 	smull	r0, r1, r1, r3
 8001596:	1149      	asrs	r1, r1, #5
 8001598:	17db      	asrs	r3, r3, #31
 800159a:	1acb      	subs	r3, r1, r3
 800159c:	b29b      	uxth	r3, r3
 800159e:	4413      	add	r3, r2
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	815a      	strh	r2, [r3, #10]

		if (hre->lastA < thr && hre->currentA >= thr) {
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	889b      	ldrh	r3, [r3, #4]
 80015aa:	897a      	ldrh	r2, [r7, #10]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d91e      	bls.n	80015ee <RE_Process+0x13e>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	891b      	ldrh	r3, [r3, #8]
 80015b4:	897a      	ldrh	r2, [r7, #10]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d819      	bhi.n	80015ee <RE_Process+0x13e>

			if (hre->currentB > thr) {
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	895b      	ldrh	r3, [r3, #10]
 80015be:	897a      	ldrh	r2, [r7, #10]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d209      	bcs.n	80015d8 <RE_Process+0x128>
				hre->counter--;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	3b01      	subs	r3, #1
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	b21a      	sxth	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	831a      	strh	r2, [r3, #24]
 80015d6:	e008      	b.n	80015ea <RE_Process+0x13a>
			} else {
				hre->counter++;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80015de:	b29b      	uxth	r3, r3
 80015e0:	3301      	adds	r3, #1
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	b21a      	sxth	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	831a      	strh	r2, [r3, #24]
			}
			return 1;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e024      	b.n	8001638 <RE_Process+0x188>

		} else if (hre->lastA > thr && hre->currentA <= thr) {
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	889b      	ldrh	r3, [r3, #4]
 80015f2:	897a      	ldrh	r2, [r7, #10]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d21e      	bcs.n	8001636 <RE_Process+0x186>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	891b      	ldrh	r3, [r3, #8]
 80015fc:	897a      	ldrh	r2, [r7, #10]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d319      	bcc.n	8001636 <RE_Process+0x186>

			if (hre->currentB > thr) {
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	895b      	ldrh	r3, [r3, #10]
 8001606:	897a      	ldrh	r2, [r7, #10]
 8001608:	429a      	cmp	r2, r3
 800160a:	d209      	bcs.n	8001620 <RE_Process+0x170>
				hre->counter++;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001612:	b29b      	uxth	r3, r3
 8001614:	3301      	adds	r3, #1
 8001616:	b29b      	uxth	r3, r3
 8001618:	b21a      	sxth	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	831a      	strh	r2, [r3, #24]
 800161e:	e008      	b.n	8001632 <RE_Process+0x182>
			} else {
				hre->counter--;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001626:	b29b      	uxth	r3, r3
 8001628:	3b01      	subs	r3, #1
 800162a:	b29b      	uxth	r3, r3
 800162c:	b21a      	sxth	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	831a      	strh	r2, [r3, #24]
			}
			return 1;
 8001632:	2301      	movs	r3, #1
 8001634:	e000      	b.n	8001638 <RE_Process+0x188>

		}
	}
	return 0;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	51eb851f 	.word	0x51eb851f

08001644 <RE_GetCount>:

int16_t RE_GetCount(RE_HandleTypeDef *hre) {
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	if (hre->divider <= 1) {
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	8b5b      	ldrh	r3, [r3, #26]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d803      	bhi.n	800165c <RE_GetCount+0x18>
		return hre->counter;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800165a:	e008      	b.n	800166e <RE_GetCount+0x2a>
	} else {
		return hre->counter / hre->divider;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001662:	461a      	mov	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	8b5b      	ldrh	r3, [r3, #26]
 8001668:	fb92 f3f3 	sdiv	r3, r2, r3
 800166c:	b21b      	sxth	r3, r3
	}
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr

08001678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <HAL_Init+0x28>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a07      	ldr	r2, [pc, #28]	; (80016a0 <HAL_Init+0x28>)
 8001682:	f043 0310 	orr.w	r3, r3, #16
 8001686:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001688:	2003      	movs	r0, #3
 800168a:	f000 f947 	bl	800191c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800168e:	200f      	movs	r0, #15
 8001690:	f000 f808 	bl	80016a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001694:	f7fe ffe4 	bl	8000660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40022000 	.word	0x40022000

080016a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_InitTick+0x54>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_InitTick+0x58>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	4619      	mov	r1, r3
 80016b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80016be:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 f95f 	bl	8001986 <HAL_SYSTICK_Config>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e00e      	b.n	80016f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b0f      	cmp	r3, #15
 80016d6:	d80a      	bhi.n	80016ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d8:	2200      	movs	r2, #0
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	f04f 30ff 	mov.w	r0, #4294967295
 80016e0:	f000 f927 	bl	8001932 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e4:	4a06      	ldr	r2, [pc, #24]	; (8001700 <HAL_InitTick+0x5c>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	e000      	b.n	80016f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000024 	.word	0x20000024
 80016fc:	20000b2c 	.word	0x20000b2c
 8001700:	20000b28 	.word	0x20000b28

08001704 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <HAL_IncTick+0x1c>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_IncTick+0x20>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4413      	add	r3, r2
 8001714:	4a03      	ldr	r2, [pc, #12]	; (8001724 <HAL_IncTick+0x20>)
 8001716:	6013      	str	r3, [r2, #0]
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	20000b2c 	.word	0x20000b2c
 8001724:	20002d98 	.word	0x20002d98

08001728 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return uwTick;
 800172c:	4b02      	ldr	r3, [pc, #8]	; (8001738 <HAL_GetTick+0x10>)
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	20002d98 	.word	0x20002d98

0800173c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001744:	f7ff fff0 	bl	8001728 <HAL_GetTick>
 8001748:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001754:	d005      	beq.n	8001762 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001756:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <HAL_Delay+0x44>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4413      	add	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001762:	bf00      	nop
 8001764:	f7ff ffe0 	bl	8001728 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	429a      	cmp	r2, r3
 8001772:	d8f7      	bhi.n	8001764 <HAL_Delay+0x28>
  {
  }
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000b2c 	.word	0x20000b2c

08001784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a0:	4013      	ands	r3, r2
 80017a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b6:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	60d3      	str	r3, [r2, #12]
}
 80017bc:	bf00      	nop
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d0:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <__NVIC_GetPriorityGrouping+0x18>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	0a1b      	lsrs	r3, r3, #8
 80017d6:	f003 0307 	and.w	r3, r3, #7
}
 80017da:	4618      	mov	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	db0b      	blt.n	8001812 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	f003 021f 	and.w	r2, r3, #31
 8001800:	4906      	ldr	r1, [pc, #24]	; (800181c <__NVIC_EnableIRQ+0x34>)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	095b      	lsrs	r3, r3, #5
 8001808:	2001      	movs	r0, #1
 800180a:	fa00 f202 	lsl.w	r2, r0, r2
 800180e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr
 800181c:	e000e100 	.word	0xe000e100

08001820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	6039      	str	r1, [r7, #0]
 800182a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001830:	2b00      	cmp	r3, #0
 8001832:	db0a      	blt.n	800184a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	b2da      	uxtb	r2, r3
 8001838:	490c      	ldr	r1, [pc, #48]	; (800186c <__NVIC_SetPriority+0x4c>)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	0112      	lsls	r2, r2, #4
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	440b      	add	r3, r1
 8001844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001848:	e00a      	b.n	8001860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4908      	ldr	r1, [pc, #32]	; (8001870 <__NVIC_SetPriority+0x50>)
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	3b04      	subs	r3, #4
 8001858:	0112      	lsls	r2, r2, #4
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	440b      	add	r3, r1
 800185e:	761a      	strb	r2, [r3, #24]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000e100 	.word	0xe000e100
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001874:	b480      	push	{r7}
 8001876:	b089      	sub	sp, #36	; 0x24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f1c3 0307 	rsb	r3, r3, #7
 800188e:	2b04      	cmp	r3, #4
 8001890:	bf28      	it	cs
 8001892:	2304      	movcs	r3, #4
 8001894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3304      	adds	r3, #4
 800189a:	2b06      	cmp	r3, #6
 800189c:	d902      	bls.n	80018a4 <NVIC_EncodePriority+0x30>
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3b03      	subs	r3, #3
 80018a2:	e000      	b.n	80018a6 <NVIC_EncodePriority+0x32>
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43da      	mvns	r2, r3
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	401a      	ands	r2, r3
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018bc:	f04f 31ff 	mov.w	r1, #4294967295
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	fa01 f303 	lsl.w	r3, r1, r3
 80018c6:	43d9      	mvns	r1, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	4313      	orrs	r3, r2
         );
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3724      	adds	r7, #36	; 0x24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e8:	d301      	bcc.n	80018ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ea:	2301      	movs	r3, #1
 80018ec:	e00f      	b.n	800190e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ee:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <SysTick_Config+0x40>)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018f6:	210f      	movs	r1, #15
 80018f8:	f04f 30ff 	mov.w	r0, #4294967295
 80018fc:	f7ff ff90 	bl	8001820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001900:	4b05      	ldr	r3, [pc, #20]	; (8001918 <SysTick_Config+0x40>)
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001906:	4b04      	ldr	r3, [pc, #16]	; (8001918 <SysTick_Config+0x40>)
 8001908:	2207      	movs	r2, #7
 800190a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	e000e010 	.word	0xe000e010

0800191c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff ff2d 	bl	8001784 <__NVIC_SetPriorityGrouping>
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001932:	b580      	push	{r7, lr}
 8001934:	b086      	sub	sp, #24
 8001936:	af00      	add	r7, sp, #0
 8001938:	4603      	mov	r3, r0
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
 800193e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001944:	f7ff ff42 	bl	80017cc <__NVIC_GetPriorityGrouping>
 8001948:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	68b9      	ldr	r1, [r7, #8]
 800194e:	6978      	ldr	r0, [r7, #20]
 8001950:	f7ff ff90 	bl	8001874 <NVIC_EncodePriority>
 8001954:	4602      	mov	r2, r0
 8001956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800195a:	4611      	mov	r1, r2
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff5f 	bl	8001820 <__NVIC_SetPriority>
}
 8001962:	bf00      	nop
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	4603      	mov	r3, r0
 8001972:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff ff35 	bl	80017e8 <__NVIC_EnableIRQ>
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7ff ffa2 	bl	80018d8 <SysTick_Config>
 8001994:	4603      	mov	r3, r0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e043      	b.n	8001a3e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	461a      	mov	r2, r3
 80019bc:	4b22      	ldr	r3, [pc, #136]	; (8001a48 <HAL_DMA_Init+0xa8>)
 80019be:	4413      	add	r3, r2
 80019c0:	4a22      	ldr	r2, [pc, #136]	; (8001a4c <HAL_DMA_Init+0xac>)
 80019c2:	fba2 2303 	umull	r2, r3, r2, r3
 80019c6:	091b      	lsrs	r3, r3, #4
 80019c8:	009a      	lsls	r2, r3, #2
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a1f      	ldr	r2, [pc, #124]	; (8001a50 <HAL_DMA_Init+0xb0>)
 80019d2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2202      	movs	r2, #2
 80019d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80019ea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80019ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80019f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr
 8001a48:	bffdfff8 	.word	0xbffdfff8
 8001a4c:	cccccccd 	.word	0xcccccccd
 8001a50:	40020000 	.word	0x40020000

08001a54 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
 8001a60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d101      	bne.n	8001a74 <HAL_DMA_Start_IT+0x20>
 8001a70:	2302      	movs	r3, #2
 8001a72:	e04a      	b.n	8001b0a <HAL_DMA_Start_IT+0xb6>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d13a      	bne.n	8001afc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2202      	movs	r2, #2
 8001a8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 0201 	bic.w	r2, r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	68b9      	ldr	r1, [r7, #8]
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f000 f938 	bl	8001d20 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d008      	beq.n	8001aca <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f042 020e 	orr.w	r2, r2, #14
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	e00f      	b.n	8001aea <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 0204 	bic.w	r2, r2, #4
 8001ad8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f042 020a 	orr.w	r2, r2, #10
 8001ae8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f042 0201 	orr.w	r2, r2, #1
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	e005      	b.n	8001b08 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b04:	2302      	movs	r3, #2
 8001b06:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	2204      	movs	r2, #4
 8001b32:	409a      	lsls	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4013      	ands	r3, r2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d04f      	beq.n	8001bdc <HAL_DMA_IRQHandler+0xc8>
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d04a      	beq.n	8001bdc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0320 	and.w	r3, r3, #32
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d107      	bne.n	8001b64 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0204 	bic.w	r2, r2, #4
 8001b62:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a66      	ldr	r2, [pc, #408]	; (8001d04 <HAL_DMA_IRQHandler+0x1f0>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d029      	beq.n	8001bc2 <HAL_DMA_IRQHandler+0xae>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a65      	ldr	r2, [pc, #404]	; (8001d08 <HAL_DMA_IRQHandler+0x1f4>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d022      	beq.n	8001bbe <HAL_DMA_IRQHandler+0xaa>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a63      	ldr	r2, [pc, #396]	; (8001d0c <HAL_DMA_IRQHandler+0x1f8>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d01a      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0xa4>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a62      	ldr	r2, [pc, #392]	; (8001d10 <HAL_DMA_IRQHandler+0x1fc>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d012      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0x9e>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a60      	ldr	r2, [pc, #384]	; (8001d14 <HAL_DMA_IRQHandler+0x200>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d00a      	beq.n	8001bac <HAL_DMA_IRQHandler+0x98>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a5f      	ldr	r2, [pc, #380]	; (8001d18 <HAL_DMA_IRQHandler+0x204>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d102      	bne.n	8001ba6 <HAL_DMA_IRQHandler+0x92>
 8001ba0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ba4:	e00e      	b.n	8001bc4 <HAL_DMA_IRQHandler+0xb0>
 8001ba6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001baa:	e00b      	b.n	8001bc4 <HAL_DMA_IRQHandler+0xb0>
 8001bac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001bb0:	e008      	b.n	8001bc4 <HAL_DMA_IRQHandler+0xb0>
 8001bb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bb6:	e005      	b.n	8001bc4 <HAL_DMA_IRQHandler+0xb0>
 8001bb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bbc:	e002      	b.n	8001bc4 <HAL_DMA_IRQHandler+0xb0>
 8001bbe:	2340      	movs	r3, #64	; 0x40
 8001bc0:	e000      	b.n	8001bc4 <HAL_DMA_IRQHandler+0xb0>
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	4a55      	ldr	r2, [pc, #340]	; (8001d1c <HAL_DMA_IRQHandler+0x208>)
 8001bc6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 8094 	beq.w	8001cfa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001bda:	e08e      	b.n	8001cfa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	2202      	movs	r2, #2
 8001be2:	409a      	lsls	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d056      	beq.n	8001c9a <HAL_DMA_IRQHandler+0x186>
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d051      	beq.n	8001c9a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0320 	and.w	r3, r3, #32
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10b      	bne.n	8001c1c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 020a 	bic.w	r2, r2, #10
 8001c12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a38      	ldr	r2, [pc, #224]	; (8001d04 <HAL_DMA_IRQHandler+0x1f0>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d029      	beq.n	8001c7a <HAL_DMA_IRQHandler+0x166>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a37      	ldr	r2, [pc, #220]	; (8001d08 <HAL_DMA_IRQHandler+0x1f4>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d022      	beq.n	8001c76 <HAL_DMA_IRQHandler+0x162>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a35      	ldr	r2, [pc, #212]	; (8001d0c <HAL_DMA_IRQHandler+0x1f8>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d01a      	beq.n	8001c70 <HAL_DMA_IRQHandler+0x15c>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a34      	ldr	r2, [pc, #208]	; (8001d10 <HAL_DMA_IRQHandler+0x1fc>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d012      	beq.n	8001c6a <HAL_DMA_IRQHandler+0x156>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a32      	ldr	r2, [pc, #200]	; (8001d14 <HAL_DMA_IRQHandler+0x200>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d00a      	beq.n	8001c64 <HAL_DMA_IRQHandler+0x150>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a31      	ldr	r2, [pc, #196]	; (8001d18 <HAL_DMA_IRQHandler+0x204>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d102      	bne.n	8001c5e <HAL_DMA_IRQHandler+0x14a>
 8001c58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c5c:	e00e      	b.n	8001c7c <HAL_DMA_IRQHandler+0x168>
 8001c5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c62:	e00b      	b.n	8001c7c <HAL_DMA_IRQHandler+0x168>
 8001c64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c68:	e008      	b.n	8001c7c <HAL_DMA_IRQHandler+0x168>
 8001c6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c6e:	e005      	b.n	8001c7c <HAL_DMA_IRQHandler+0x168>
 8001c70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c74:	e002      	b.n	8001c7c <HAL_DMA_IRQHandler+0x168>
 8001c76:	2320      	movs	r3, #32
 8001c78:	e000      	b.n	8001c7c <HAL_DMA_IRQHandler+0x168>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	4a27      	ldr	r2, [pc, #156]	; (8001d1c <HAL_DMA_IRQHandler+0x208>)
 8001c7e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d034      	beq.n	8001cfa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c98:	e02f      	b.n	8001cfa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	2208      	movs	r2, #8
 8001ca0:	409a      	lsls	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d028      	beq.n	8001cfc <HAL_DMA_IRQHandler+0x1e8>
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d023      	beq.n	8001cfc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 020e 	bic.w	r2, r2, #14
 8001cc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ccc:	2101      	movs	r1, #1
 8001cce:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d004      	beq.n	8001cfc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	4798      	blx	r3
    }
  }
  return;
 8001cfa:	bf00      	nop
 8001cfc:	bf00      	nop
}
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40020008 	.word	0x40020008
 8001d08:	4002001c 	.word	0x4002001c
 8001d0c:	40020030 	.word	0x40020030
 8001d10:	40020044 	.word	0x40020044
 8001d14:	40020058 	.word	0x40020058
 8001d18:	4002006c 	.word	0x4002006c
 8001d1c:	40020000 	.word	0x40020000

08001d20 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
 8001d2c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d36:	2101      	movs	r1, #1
 8001d38:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b10      	cmp	r3, #16
 8001d4c:	d108      	bne.n	8001d60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d5e:	e007      	b.n	8001d70 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68ba      	ldr	r2, [r7, #8]
 8001d66:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	60da      	str	r2, [r3, #12]
}
 8001d70:	bf00      	nop
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr
	...

08001d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b08b      	sub	sp, #44	; 0x2c
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d86:	2300      	movs	r3, #0
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d8e:	e169      	b.n	8002064 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d90:	2201      	movs	r2, #1
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	69fa      	ldr	r2, [r7, #28]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	f040 8158 	bne.w	800205e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	4a9a      	ldr	r2, [pc, #616]	; (800201c <HAL_GPIO_Init+0x2a0>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d05e      	beq.n	8001e76 <HAL_GPIO_Init+0xfa>
 8001db8:	4a98      	ldr	r2, [pc, #608]	; (800201c <HAL_GPIO_Init+0x2a0>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d875      	bhi.n	8001eaa <HAL_GPIO_Init+0x12e>
 8001dbe:	4a98      	ldr	r2, [pc, #608]	; (8002020 <HAL_GPIO_Init+0x2a4>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d058      	beq.n	8001e76 <HAL_GPIO_Init+0xfa>
 8001dc4:	4a96      	ldr	r2, [pc, #600]	; (8002020 <HAL_GPIO_Init+0x2a4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d86f      	bhi.n	8001eaa <HAL_GPIO_Init+0x12e>
 8001dca:	4a96      	ldr	r2, [pc, #600]	; (8002024 <HAL_GPIO_Init+0x2a8>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d052      	beq.n	8001e76 <HAL_GPIO_Init+0xfa>
 8001dd0:	4a94      	ldr	r2, [pc, #592]	; (8002024 <HAL_GPIO_Init+0x2a8>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d869      	bhi.n	8001eaa <HAL_GPIO_Init+0x12e>
 8001dd6:	4a94      	ldr	r2, [pc, #592]	; (8002028 <HAL_GPIO_Init+0x2ac>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d04c      	beq.n	8001e76 <HAL_GPIO_Init+0xfa>
 8001ddc:	4a92      	ldr	r2, [pc, #584]	; (8002028 <HAL_GPIO_Init+0x2ac>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d863      	bhi.n	8001eaa <HAL_GPIO_Init+0x12e>
 8001de2:	4a92      	ldr	r2, [pc, #584]	; (800202c <HAL_GPIO_Init+0x2b0>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d046      	beq.n	8001e76 <HAL_GPIO_Init+0xfa>
 8001de8:	4a90      	ldr	r2, [pc, #576]	; (800202c <HAL_GPIO_Init+0x2b0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d85d      	bhi.n	8001eaa <HAL_GPIO_Init+0x12e>
 8001dee:	2b12      	cmp	r3, #18
 8001df0:	d82a      	bhi.n	8001e48 <HAL_GPIO_Init+0xcc>
 8001df2:	2b12      	cmp	r3, #18
 8001df4:	d859      	bhi.n	8001eaa <HAL_GPIO_Init+0x12e>
 8001df6:	a201      	add	r2, pc, #4	; (adr r2, 8001dfc <HAL_GPIO_Init+0x80>)
 8001df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfc:	08001e77 	.word	0x08001e77
 8001e00:	08001e51 	.word	0x08001e51
 8001e04:	08001e63 	.word	0x08001e63
 8001e08:	08001ea5 	.word	0x08001ea5
 8001e0c:	08001eab 	.word	0x08001eab
 8001e10:	08001eab 	.word	0x08001eab
 8001e14:	08001eab 	.word	0x08001eab
 8001e18:	08001eab 	.word	0x08001eab
 8001e1c:	08001eab 	.word	0x08001eab
 8001e20:	08001eab 	.word	0x08001eab
 8001e24:	08001eab 	.word	0x08001eab
 8001e28:	08001eab 	.word	0x08001eab
 8001e2c:	08001eab 	.word	0x08001eab
 8001e30:	08001eab 	.word	0x08001eab
 8001e34:	08001eab 	.word	0x08001eab
 8001e38:	08001eab 	.word	0x08001eab
 8001e3c:	08001eab 	.word	0x08001eab
 8001e40:	08001e59 	.word	0x08001e59
 8001e44:	08001e6d 	.word	0x08001e6d
 8001e48:	4a79      	ldr	r2, [pc, #484]	; (8002030 <HAL_GPIO_Init+0x2b4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d013      	beq.n	8001e76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e4e:	e02c      	b.n	8001eaa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	623b      	str	r3, [r7, #32]
          break;
 8001e56:	e029      	b.n	8001eac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	623b      	str	r3, [r7, #32]
          break;
 8001e60:	e024      	b.n	8001eac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	3308      	adds	r3, #8
 8001e68:	623b      	str	r3, [r7, #32]
          break;
 8001e6a:	e01f      	b.n	8001eac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	330c      	adds	r3, #12
 8001e72:	623b      	str	r3, [r7, #32]
          break;
 8001e74:	e01a      	b.n	8001eac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d102      	bne.n	8001e84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e7e:	2304      	movs	r3, #4
 8001e80:	623b      	str	r3, [r7, #32]
          break;
 8001e82:	e013      	b.n	8001eac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d105      	bne.n	8001e98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e8c:	2308      	movs	r3, #8
 8001e8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69fa      	ldr	r2, [r7, #28]
 8001e94:	611a      	str	r2, [r3, #16]
          break;
 8001e96:	e009      	b.n	8001eac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e98:	2308      	movs	r3, #8
 8001e9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69fa      	ldr	r2, [r7, #28]
 8001ea0:	615a      	str	r2, [r3, #20]
          break;
 8001ea2:	e003      	b.n	8001eac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	623b      	str	r3, [r7, #32]
          break;
 8001ea8:	e000      	b.n	8001eac <HAL_GPIO_Init+0x130>
          break;
 8001eaa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	2bff      	cmp	r3, #255	; 0xff
 8001eb0:	d801      	bhi.n	8001eb6 <HAL_GPIO_Init+0x13a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	e001      	b.n	8001eba <HAL_GPIO_Init+0x13e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3304      	adds	r3, #4
 8001eba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	2bff      	cmp	r3, #255	; 0xff
 8001ec0:	d802      	bhi.n	8001ec8 <HAL_GPIO_Init+0x14c>
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	e002      	b.n	8001ece <HAL_GPIO_Init+0x152>
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	3b08      	subs	r3, #8
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	210f      	movs	r1, #15
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	401a      	ands	r2, r3
 8001ee0:	6a39      	ldr	r1, [r7, #32]
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 80b1 	beq.w	800205e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001efc:	4b4d      	ldr	r3, [pc, #308]	; (8002034 <HAL_GPIO_Init+0x2b8>)
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	4a4c      	ldr	r2, [pc, #304]	; (8002034 <HAL_GPIO_Init+0x2b8>)
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	6193      	str	r3, [r2, #24]
 8001f08:	4b4a      	ldr	r3, [pc, #296]	; (8002034 <HAL_GPIO_Init+0x2b8>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	60bb      	str	r3, [r7, #8]
 8001f12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f14:	4a48      	ldr	r2, [pc, #288]	; (8002038 <HAL_GPIO_Init+0x2bc>)
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	089b      	lsrs	r3, r3, #2
 8001f1a:	3302      	adds	r3, #2
 8001f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	f003 0303 	and.w	r3, r3, #3
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	220f      	movs	r2, #15
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	4013      	ands	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a40      	ldr	r2, [pc, #256]	; (800203c <HAL_GPIO_Init+0x2c0>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d013      	beq.n	8001f68 <HAL_GPIO_Init+0x1ec>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a3f      	ldr	r2, [pc, #252]	; (8002040 <HAL_GPIO_Init+0x2c4>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d00d      	beq.n	8001f64 <HAL_GPIO_Init+0x1e8>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a3e      	ldr	r2, [pc, #248]	; (8002044 <HAL_GPIO_Init+0x2c8>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d007      	beq.n	8001f60 <HAL_GPIO_Init+0x1e4>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a3d      	ldr	r2, [pc, #244]	; (8002048 <HAL_GPIO_Init+0x2cc>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d101      	bne.n	8001f5c <HAL_GPIO_Init+0x1e0>
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e006      	b.n	8001f6a <HAL_GPIO_Init+0x1ee>
 8001f5c:	2304      	movs	r3, #4
 8001f5e:	e004      	b.n	8001f6a <HAL_GPIO_Init+0x1ee>
 8001f60:	2302      	movs	r3, #2
 8001f62:	e002      	b.n	8001f6a <HAL_GPIO_Init+0x1ee>
 8001f64:	2301      	movs	r3, #1
 8001f66:	e000      	b.n	8001f6a <HAL_GPIO_Init+0x1ee>
 8001f68:	2300      	movs	r3, #0
 8001f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f6c:	f002 0203 	and.w	r2, r2, #3
 8001f70:	0092      	lsls	r2, r2, #2
 8001f72:	4093      	lsls	r3, r2
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f7a:	492f      	ldr	r1, [pc, #188]	; (8002038 <HAL_GPIO_Init+0x2bc>)
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	089b      	lsrs	r3, r3, #2
 8001f80:	3302      	adds	r3, #2
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d006      	beq.n	8001fa2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f94:	4b2d      	ldr	r3, [pc, #180]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	492c      	ldr	r1, [pc, #176]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	600b      	str	r3, [r1, #0]
 8001fa0:	e006      	b.n	8001fb0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fa2:	4b2a      	ldr	r3, [pc, #168]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	4928      	ldr	r1, [pc, #160]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d006      	beq.n	8001fca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fbc:	4b23      	ldr	r3, [pc, #140]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	4922      	ldr	r1, [pc, #136]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	604b      	str	r3, [r1, #4]
 8001fc8:	e006      	b.n	8001fd8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fca:	4b20      	ldr	r3, [pc, #128]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	491e      	ldr	r1, [pc, #120]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d006      	beq.n	8001ff2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fe4:	4b19      	ldr	r3, [pc, #100]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	4918      	ldr	r1, [pc, #96]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	608b      	str	r3, [r1, #8]
 8001ff0:	e006      	b.n	8002000 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ff2:	4b16      	ldr	r3, [pc, #88]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	4914      	ldr	r1, [pc, #80]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d021      	beq.n	8002050 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800200c:	4b0f      	ldr	r3, [pc, #60]	; (800204c <HAL_GPIO_Init+0x2d0>)
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	490e      	ldr	r1, [pc, #56]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	60cb      	str	r3, [r1, #12]
 8002018:	e021      	b.n	800205e <HAL_GPIO_Init+0x2e2>
 800201a:	bf00      	nop
 800201c:	10320000 	.word	0x10320000
 8002020:	10310000 	.word	0x10310000
 8002024:	10220000 	.word	0x10220000
 8002028:	10210000 	.word	0x10210000
 800202c:	10120000 	.word	0x10120000
 8002030:	10110000 	.word	0x10110000
 8002034:	40021000 	.word	0x40021000
 8002038:	40010000 	.word	0x40010000
 800203c:	40010800 	.word	0x40010800
 8002040:	40010c00 	.word	0x40010c00
 8002044:	40011000 	.word	0x40011000
 8002048:	40011400 	.word	0x40011400
 800204c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <HAL_GPIO_Init+0x304>)
 8002052:	68da      	ldr	r2, [r3, #12]
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	43db      	mvns	r3, r3
 8002058:	4909      	ldr	r1, [pc, #36]	; (8002080 <HAL_GPIO_Init+0x304>)
 800205a:	4013      	ands	r3, r2
 800205c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	3301      	adds	r3, #1
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	fa22 f303 	lsr.w	r3, r2, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	f47f ae8e 	bne.w	8001d90 <HAL_GPIO_Init+0x14>
  }
}
 8002074:	bf00      	nop
 8002076:	bf00      	nop
 8002078:	372c      	adds	r7, #44	; 0x2c
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr
 8002080:	40010400 	.word	0x40010400

08002084 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	887b      	ldrh	r3, [r7, #2]
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d002      	beq.n	80020a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800209c:	2301      	movs	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
 80020a0:	e001      	b.n	80020a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020a2:	2300      	movs	r3, #0
 80020a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr

080020b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	460b      	mov	r3, r1
 80020bc:	807b      	strh	r3, [r7, #2]
 80020be:	4613      	mov	r3, r2
 80020c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020c2:	787b      	ldrb	r3, [r7, #1]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020c8:	887a      	ldrh	r2, [r7, #2]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020ce:	e003      	b.n	80020d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020d0:	887b      	ldrh	r3, [r7, #2]
 80020d2:	041a      	lsls	r2, r3, #16
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	611a      	str	r2, [r3, #16]
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
	...

080020e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e272      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 8087 	beq.w	8002212 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002104:	4b92      	ldr	r3, [pc, #584]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 030c 	and.w	r3, r3, #12
 800210c:	2b04      	cmp	r3, #4
 800210e:	d00c      	beq.n	800212a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002110:	4b8f      	ldr	r3, [pc, #572]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 030c 	and.w	r3, r3, #12
 8002118:	2b08      	cmp	r3, #8
 800211a:	d112      	bne.n	8002142 <HAL_RCC_OscConfig+0x5e>
 800211c:	4b8c      	ldr	r3, [pc, #560]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002128:	d10b      	bne.n	8002142 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800212a:	4b89      	ldr	r3, [pc, #548]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d06c      	beq.n	8002210 <HAL_RCC_OscConfig+0x12c>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d168      	bne.n	8002210 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e24c      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800214a:	d106      	bne.n	800215a <HAL_RCC_OscConfig+0x76>
 800214c:	4b80      	ldr	r3, [pc, #512]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a7f      	ldr	r2, [pc, #508]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002156:	6013      	str	r3, [r2, #0]
 8002158:	e02e      	b.n	80021b8 <HAL_RCC_OscConfig+0xd4>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10c      	bne.n	800217c <HAL_RCC_OscConfig+0x98>
 8002162:	4b7b      	ldr	r3, [pc, #492]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a7a      	ldr	r2, [pc, #488]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002168:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	4b78      	ldr	r3, [pc, #480]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a77      	ldr	r2, [pc, #476]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002174:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	e01d      	b.n	80021b8 <HAL_RCC_OscConfig+0xd4>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002184:	d10c      	bne.n	80021a0 <HAL_RCC_OscConfig+0xbc>
 8002186:	4b72      	ldr	r3, [pc, #456]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a71      	ldr	r2, [pc, #452]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800218c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	4b6f      	ldr	r3, [pc, #444]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a6e      	ldr	r2, [pc, #440]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	e00b      	b.n	80021b8 <HAL_RCC_OscConfig+0xd4>
 80021a0:	4b6b      	ldr	r3, [pc, #428]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a6a      	ldr	r2, [pc, #424]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 80021a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	4b68      	ldr	r3, [pc, #416]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a67      	ldr	r2, [pc, #412]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 80021b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d013      	beq.n	80021e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c0:	f7ff fab2 	bl	8001728 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c8:	f7ff faae 	bl	8001728 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b64      	cmp	r3, #100	; 0x64
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e200      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021da:	4b5d      	ldr	r3, [pc, #372]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0f0      	beq.n	80021c8 <HAL_RCC_OscConfig+0xe4>
 80021e6:	e014      	b.n	8002212 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e8:	f7ff fa9e 	bl	8001728 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f0:	f7ff fa9a 	bl	8001728 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b64      	cmp	r3, #100	; 0x64
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e1ec      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002202:	4b53      	ldr	r3, [pc, #332]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x10c>
 800220e:	e000      	b.n	8002212 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d063      	beq.n	80022e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800221e:	4b4c      	ldr	r3, [pc, #304]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00b      	beq.n	8002242 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800222a:	4b49      	ldr	r3, [pc, #292]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 030c 	and.w	r3, r3, #12
 8002232:	2b08      	cmp	r3, #8
 8002234:	d11c      	bne.n	8002270 <HAL_RCC_OscConfig+0x18c>
 8002236:	4b46      	ldr	r3, [pc, #280]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d116      	bne.n	8002270 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002242:	4b43      	ldr	r3, [pc, #268]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d005      	beq.n	800225a <HAL_RCC_OscConfig+0x176>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d001      	beq.n	800225a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e1c0      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225a:	4b3d      	ldr	r3, [pc, #244]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4939      	ldr	r1, [pc, #228]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800226a:	4313      	orrs	r3, r2
 800226c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800226e:	e03a      	b.n	80022e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d020      	beq.n	80022ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002278:	4b36      	ldr	r3, [pc, #216]	; (8002354 <HAL_RCC_OscConfig+0x270>)
 800227a:	2201      	movs	r2, #1
 800227c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227e:	f7ff fa53 	bl	8001728 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002286:	f7ff fa4f 	bl	8001728 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e1a1      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002298:	4b2d      	ldr	r3, [pc, #180]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a4:	4b2a      	ldr	r3, [pc, #168]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4927      	ldr	r1, [pc, #156]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	600b      	str	r3, [r1, #0]
 80022b8:	e015      	b.n	80022e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ba:	4b26      	ldr	r3, [pc, #152]	; (8002354 <HAL_RCC_OscConfig+0x270>)
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7ff fa32 	bl	8001728 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c8:	f7ff fa2e 	bl	8001728 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e180      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022da:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d03a      	beq.n	8002368 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d019      	beq.n	800232e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022fa:	4b17      	ldr	r3, [pc, #92]	; (8002358 <HAL_RCC_OscConfig+0x274>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002300:	f7ff fa12 	bl	8001728 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002308:	f7ff fa0e 	bl	8001728 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e160      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231a:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002326:	2001      	movs	r0, #1
 8002328:	f000 fad8 	bl	80028dc <RCC_Delay>
 800232c:	e01c      	b.n	8002368 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800232e:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <HAL_RCC_OscConfig+0x274>)
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002334:	f7ff f9f8 	bl	8001728 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800233a:	e00f      	b.n	800235c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800233c:	f7ff f9f4 	bl	8001728 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d908      	bls.n	800235c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e146      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
 800234e:	bf00      	nop
 8002350:	40021000 	.word	0x40021000
 8002354:	42420000 	.word	0x42420000
 8002358:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800235c:	4b92      	ldr	r3, [pc, #584]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1e9      	bne.n	800233c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 80a6 	beq.w	80024c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002376:	2300      	movs	r3, #0
 8002378:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800237a:	4b8b      	ldr	r3, [pc, #556]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10d      	bne.n	80023a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002386:	4b88      	ldr	r3, [pc, #544]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	4a87      	ldr	r2, [pc, #540]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 800238c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002390:	61d3      	str	r3, [r2, #28]
 8002392:	4b85      	ldr	r3, [pc, #532]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239a:	60bb      	str	r3, [r7, #8]
 800239c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800239e:	2301      	movs	r3, #1
 80023a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a2:	4b82      	ldr	r3, [pc, #520]	; (80025ac <HAL_RCC_OscConfig+0x4c8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d118      	bne.n	80023e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ae:	4b7f      	ldr	r3, [pc, #508]	; (80025ac <HAL_RCC_OscConfig+0x4c8>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a7e      	ldr	r2, [pc, #504]	; (80025ac <HAL_RCC_OscConfig+0x4c8>)
 80023b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ba:	f7ff f9b5 	bl	8001728 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c2:	f7ff f9b1 	bl	8001728 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b64      	cmp	r3, #100	; 0x64
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e103      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d4:	4b75      	ldr	r3, [pc, #468]	; (80025ac <HAL_RCC_OscConfig+0x4c8>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0f0      	beq.n	80023c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d106      	bne.n	80023f6 <HAL_RCC_OscConfig+0x312>
 80023e8:	4b6f      	ldr	r3, [pc, #444]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	4a6e      	ldr	r2, [pc, #440]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	6213      	str	r3, [r2, #32]
 80023f4:	e02d      	b.n	8002452 <HAL_RCC_OscConfig+0x36e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10c      	bne.n	8002418 <HAL_RCC_OscConfig+0x334>
 80023fe:	4b6a      	ldr	r3, [pc, #424]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	4a69      	ldr	r2, [pc, #420]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002404:	f023 0301 	bic.w	r3, r3, #1
 8002408:	6213      	str	r3, [r2, #32]
 800240a:	4b67      	ldr	r3, [pc, #412]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	4a66      	ldr	r2, [pc, #408]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002410:	f023 0304 	bic.w	r3, r3, #4
 8002414:	6213      	str	r3, [r2, #32]
 8002416:	e01c      	b.n	8002452 <HAL_RCC_OscConfig+0x36e>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	2b05      	cmp	r3, #5
 800241e:	d10c      	bne.n	800243a <HAL_RCC_OscConfig+0x356>
 8002420:	4b61      	ldr	r3, [pc, #388]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	4a60      	ldr	r2, [pc, #384]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002426:	f043 0304 	orr.w	r3, r3, #4
 800242a:	6213      	str	r3, [r2, #32]
 800242c:	4b5e      	ldr	r3, [pc, #376]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	4a5d      	ldr	r2, [pc, #372]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	6213      	str	r3, [r2, #32]
 8002438:	e00b      	b.n	8002452 <HAL_RCC_OscConfig+0x36e>
 800243a:	4b5b      	ldr	r3, [pc, #364]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	4a5a      	ldr	r2, [pc, #360]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002440:	f023 0301 	bic.w	r3, r3, #1
 8002444:	6213      	str	r3, [r2, #32]
 8002446:	4b58      	ldr	r3, [pc, #352]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	4a57      	ldr	r2, [pc, #348]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 800244c:	f023 0304 	bic.w	r3, r3, #4
 8002450:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d015      	beq.n	8002486 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245a:	f7ff f965 	bl	8001728 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002460:	e00a      	b.n	8002478 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002462:	f7ff f961 	bl	8001728 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002470:	4293      	cmp	r3, r2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e0b1      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002478:	4b4b      	ldr	r3, [pc, #300]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0ee      	beq.n	8002462 <HAL_RCC_OscConfig+0x37e>
 8002484:	e014      	b.n	80024b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002486:	f7ff f94f 	bl	8001728 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800248c:	e00a      	b.n	80024a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800248e:	f7ff f94b 	bl	8001728 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	f241 3288 	movw	r2, #5000	; 0x1388
 800249c:	4293      	cmp	r3, r2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e09b      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a4:	4b40      	ldr	r3, [pc, #256]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1ee      	bne.n	800248e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024b0:	7dfb      	ldrb	r3, [r7, #23]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d105      	bne.n	80024c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b6:	4b3c      	ldr	r3, [pc, #240]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	4a3b      	ldr	r2, [pc, #236]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 8087 	beq.w	80025da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024cc:	4b36      	ldr	r3, [pc, #216]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 030c 	and.w	r3, r3, #12
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	d061      	beq.n	800259c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d146      	bne.n	800256e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e0:	4b33      	ldr	r3, [pc, #204]	; (80025b0 <HAL_RCC_OscConfig+0x4cc>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e6:	f7ff f91f 	bl	8001728 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ee:	f7ff f91b 	bl	8001728 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e06d      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002500:	4b29      	ldr	r3, [pc, #164]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1f0      	bne.n	80024ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002514:	d108      	bne.n	8002528 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002516:	4b24      	ldr	r3, [pc, #144]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	4921      	ldr	r1, [pc, #132]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	4313      	orrs	r3, r2
 8002526:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002528:	4b1f      	ldr	r3, [pc, #124]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a19      	ldr	r1, [r3, #32]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	430b      	orrs	r3, r1
 800253a:	491b      	ldr	r1, [pc, #108]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 800253c:	4313      	orrs	r3, r2
 800253e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002540:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <HAL_RCC_OscConfig+0x4cc>)
 8002542:	2201      	movs	r2, #1
 8002544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002546:	f7ff f8ef 	bl	8001728 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254e:	f7ff f8eb 	bl	8001728 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e03d      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002560:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f0      	beq.n	800254e <HAL_RCC_OscConfig+0x46a>
 800256c:	e035      	b.n	80025da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256e:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <HAL_RCC_OscConfig+0x4cc>)
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7ff f8d8 	bl	8001728 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257c:	f7ff f8d4 	bl	8001728 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e026      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258e:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x498>
 800259a:	e01e      	b.n	80025da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d107      	bne.n	80025b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e019      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40007000 	.word	0x40007000
 80025b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025b4:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <HAL_RCC_OscConfig+0x500>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d106      	bne.n	80025d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d001      	beq.n	80025da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40021000 	.word	0x40021000

080025e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e0d0      	b.n	800279e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025fc:	4b6a      	ldr	r3, [pc, #424]	; (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d910      	bls.n	800262c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260a:	4b67      	ldr	r3, [pc, #412]	; (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f023 0207 	bic.w	r2, r3, #7
 8002612:	4965      	ldr	r1, [pc, #404]	; (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	4313      	orrs	r3, r2
 8002618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800261a:	4b63      	ldr	r3, [pc, #396]	; (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d001      	beq.n	800262c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0b8      	b.n	800279e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d020      	beq.n	800267a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002644:	4b59      	ldr	r3, [pc, #356]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	4a58      	ldr	r2, [pc, #352]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800264e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800265c:	4b53      	ldr	r3, [pc, #332]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	4a52      	ldr	r2, [pc, #328]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002666:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002668:	4b50      	ldr	r3, [pc, #320]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	494d      	ldr	r1, [pc, #308]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	4313      	orrs	r3, r2
 8002678:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d040      	beq.n	8002708 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d107      	bne.n	800269e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268e:	4b47      	ldr	r3, [pc, #284]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d115      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e07f      	b.n	800279e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d107      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a6:	4b41      	ldr	r3, [pc, #260]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d109      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e073      	b.n	800279e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b6:	4b3d      	ldr	r3, [pc, #244]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e06b      	b.n	800279e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026c6:	4b39      	ldr	r3, [pc, #228]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f023 0203 	bic.w	r2, r3, #3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	4936      	ldr	r1, [pc, #216]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026d8:	f7ff f826 	bl	8001728 <HAL_GetTick>
 80026dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026de:	e00a      	b.n	80026f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e0:	f7ff f822 	bl	8001728 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e053      	b.n	800279e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f6:	4b2d      	ldr	r3, [pc, #180]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f003 020c 	and.w	r2, r3, #12
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	429a      	cmp	r2, r3
 8002706:	d1eb      	bne.n	80026e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002708:	4b27      	ldr	r3, [pc, #156]	; (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d210      	bcs.n	8002738 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002716:	4b24      	ldr	r3, [pc, #144]	; (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f023 0207 	bic.w	r2, r3, #7
 800271e:	4922      	ldr	r1, [pc, #136]	; (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	4313      	orrs	r3, r2
 8002724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002726:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d001      	beq.n	8002738 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e032      	b.n	800279e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002744:	4b19      	ldr	r3, [pc, #100]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4916      	ldr	r1, [pc, #88]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002752:	4313      	orrs	r3, r2
 8002754:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002762:	4b12      	ldr	r3, [pc, #72]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	490e      	ldr	r1, [pc, #56]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002772:	4313      	orrs	r3, r2
 8002774:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002776:	f000 f821 	bl	80027bc <HAL_RCC_GetSysClockFreq>
 800277a:	4602      	mov	r2, r0
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	490a      	ldr	r1, [pc, #40]	; (80027b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002788:	5ccb      	ldrb	r3, [r1, r3]
 800278a:	fa22 f303 	lsr.w	r3, r2, r3
 800278e:	4a09      	ldr	r2, [pc, #36]	; (80027b4 <HAL_RCC_ClockConfig+0x1cc>)
 8002790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002792:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe ff84 	bl	80016a4 <HAL_InitTick>

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40022000 	.word	0x40022000
 80027ac:	40021000 	.word	0x40021000
 80027b0:	08003c60 	.word	0x08003c60
 80027b4:	20000024 	.word	0x20000024
 80027b8:	20000b28 	.word	0x20000b28

080027bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027bc:	b490      	push	{r4, r7}
 80027be:	b08a      	sub	sp, #40	; 0x28
 80027c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027c2:	4b29      	ldr	r3, [pc, #164]	; (8002868 <HAL_RCC_GetSysClockFreq+0xac>)
 80027c4:	1d3c      	adds	r4, r7, #4
 80027c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027cc:	f240 2301 	movw	r3, #513	; 0x201
 80027d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]
 80027d6:	2300      	movs	r3, #0
 80027d8:	61bb      	str	r3, [r7, #24]
 80027da:	2300      	movs	r3, #0
 80027dc:	627b      	str	r3, [r7, #36]	; 0x24
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027e6:	4b21      	ldr	r3, [pc, #132]	; (800286c <HAL_RCC_GetSysClockFreq+0xb0>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f003 030c 	and.w	r3, r3, #12
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d002      	beq.n	80027fc <HAL_RCC_GetSysClockFreq+0x40>
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d003      	beq.n	8002802 <HAL_RCC_GetSysClockFreq+0x46>
 80027fa:	e02b      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027fc:	4b1c      	ldr	r3, [pc, #112]	; (8002870 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027fe:	623b      	str	r3, [r7, #32]
      break;
 8002800:	e02b      	b.n	800285a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	0c9b      	lsrs	r3, r3, #18
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	3328      	adds	r3, #40	; 0x28
 800280c:	443b      	add	r3, r7
 800280e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002812:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d012      	beq.n	8002844 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800281e:	4b13      	ldr	r3, [pc, #76]	; (800286c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	0c5b      	lsrs	r3, r3, #17
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	3328      	adds	r3, #40	; 0x28
 800282a:	443b      	add	r3, r7
 800282c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002830:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	4a0e      	ldr	r2, [pc, #56]	; (8002870 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002836:	fb03 f202 	mul.w	r2, r3, r2
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
 8002842:	e004      	b.n	800284e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	4a0b      	ldr	r2, [pc, #44]	; (8002874 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002848:	fb02 f303 	mul.w	r3, r2, r3
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	623b      	str	r3, [r7, #32]
      break;
 8002852:	e002      	b.n	800285a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002856:	623b      	str	r3, [r7, #32]
      break;
 8002858:	bf00      	nop
    }
  }
  return sysclockfreq;
 800285a:	6a3b      	ldr	r3, [r7, #32]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3728      	adds	r7, #40	; 0x28
 8002860:	46bd      	mov	sp, r7
 8002862:	bc90      	pop	{r4, r7}
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	08003c50 	.word	0x08003c50
 800286c:	40021000 	.word	0x40021000
 8002870:	007a1200 	.word	0x007a1200
 8002874:	003d0900 	.word	0x003d0900

08002878 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800287c:	4b02      	ldr	r3, [pc, #8]	; (8002888 <HAL_RCC_GetHCLKFreq+0x10>)
 800287e:	681b      	ldr	r3, [r3, #0]
}
 8002880:	4618      	mov	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr
 8002888:	20000024 	.word	0x20000024

0800288c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002890:	f7ff fff2 	bl	8002878 <HAL_RCC_GetHCLKFreq>
 8002894:	4602      	mov	r2, r0
 8002896:	4b05      	ldr	r3, [pc, #20]	; (80028ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	0a1b      	lsrs	r3, r3, #8
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	4903      	ldr	r1, [pc, #12]	; (80028b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028a2:	5ccb      	ldrb	r3, [r1, r3]
 80028a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40021000 	.word	0x40021000
 80028b0:	08003c70 	.word	0x08003c70

080028b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028b8:	f7ff ffde 	bl	8002878 <HAL_RCC_GetHCLKFreq>
 80028bc:	4602      	mov	r2, r0
 80028be:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	0adb      	lsrs	r3, r3, #11
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	4903      	ldr	r1, [pc, #12]	; (80028d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ca:	5ccb      	ldrb	r3, [r1, r3]
 80028cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40021000 	.word	0x40021000
 80028d8:	08003c70 	.word	0x08003c70

080028dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028e4:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <RCC_Delay+0x34>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a0a      	ldr	r2, [pc, #40]	; (8002914 <RCC_Delay+0x38>)
 80028ea:	fba2 2303 	umull	r2, r3, r2, r3
 80028ee:	0a5b      	lsrs	r3, r3, #9
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	fb02 f303 	mul.w	r3, r2, r3
 80028f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028f8:	bf00      	nop
  }
  while (Delay --);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1e5a      	subs	r2, r3, #1
 80028fe:	60fa      	str	r2, [r7, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f9      	bne.n	80028f8 <RCC_Delay+0x1c>
}
 8002904:	bf00      	nop
 8002906:	bf00      	nop
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr
 8002910:	20000024 	.word	0x20000024
 8002914:	10624dd3 	.word	0x10624dd3

08002918 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e076      	b.n	8002a18 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	2b00      	cmp	r3, #0
 8002930:	d108      	bne.n	8002944 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800293a:	d009      	beq.n	8002950 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	61da      	str	r2, [r3, #28]
 8002942:	e005      	b.n	8002950 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d106      	bne.n	8002970 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7fd feaa 	bl	80006c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2202      	movs	r2, #2
 8002974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002986:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002998:	431a      	orrs	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029c0:	431a      	orrs	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d4:	ea42 0103 	orr.w	r1, r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	0c1a      	lsrs	r2, r3, #16
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f002 0204 	and.w	r2, r2, #4
 80029f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	69da      	ldr	r2, [r3, #28]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a06:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	603b      	str	r3, [r7, #0]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a30:	2300      	movs	r3, #0
 8002a32:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d101      	bne.n	8002a42 <HAL_SPI_Transmit+0x22>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e126      	b.n	8002c90 <HAL_SPI_Transmit+0x270>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a4a:	f7fe fe6d 	bl	8001728 <HAL_GetTick>
 8002a4e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002a50:	88fb      	ldrh	r3, [r7, #6]
 8002a52:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d002      	beq.n	8002a66 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002a60:	2302      	movs	r3, #2
 8002a62:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a64:	e10b      	b.n	8002c7e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d002      	beq.n	8002a72 <HAL_SPI_Transmit+0x52>
 8002a6c:	88fb      	ldrh	r3, [r7, #6]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d102      	bne.n	8002a78 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a76:	e102      	b.n	8002c7e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2203      	movs	r2, #3
 8002a7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	88fa      	ldrh	r2, [r7, #6]
 8002a90:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	88fa      	ldrh	r2, [r7, #6]
 8002a96:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002abe:	d10f      	bne.n	8002ae0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ace:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ade:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aea:	2b40      	cmp	r3, #64	; 0x40
 8002aec:	d007      	beq.n	8002afe <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002afc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b06:	d14b      	bne.n	8002ba0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d002      	beq.n	8002b16 <HAL_SPI_Transmit+0xf6>
 8002b10:	8afb      	ldrh	r3, [r7, #22]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d13e      	bne.n	8002b94 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	881a      	ldrh	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	1c9a      	adds	r2, r3, #2
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b3a:	e02b      	b.n	8002b94 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d112      	bne.n	8002b70 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	881a      	ldrh	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	1c9a      	adds	r2, r3, #2
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	3b01      	subs	r3, #1
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b6e:	e011      	b.n	8002b94 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b70:	f7fe fdda 	bl	8001728 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d803      	bhi.n	8002b88 <HAL_SPI_Transmit+0x168>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b86:	d102      	bne.n	8002b8e <HAL_SPI_Transmit+0x16e>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d102      	bne.n	8002b94 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b92:	e074      	b.n	8002c7e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1ce      	bne.n	8002b3c <HAL_SPI_Transmit+0x11c>
 8002b9e:	e04c      	b.n	8002c3a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d002      	beq.n	8002bae <HAL_SPI_Transmit+0x18e>
 8002ba8:	8afb      	ldrh	r3, [r7, #22]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d140      	bne.n	8002c30 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	330c      	adds	r3, #12
 8002bb8:	7812      	ldrb	r2, [r2, #0]
 8002bba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc0:	1c5a      	adds	r2, r3, #1
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002bd4:	e02c      	b.n	8002c30 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d113      	bne.n	8002c0c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	330c      	adds	r3, #12
 8002bee:	7812      	ldrb	r2, [r2, #0]
 8002bf0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	1c5a      	adds	r2, r3, #1
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	3b01      	subs	r3, #1
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c0a:	e011      	b.n	8002c30 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c0c:	f7fe fd8c 	bl	8001728 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d803      	bhi.n	8002c24 <HAL_SPI_Transmit+0x204>
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c22:	d102      	bne.n	8002c2a <HAL_SPI_Transmit+0x20a>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d102      	bne.n	8002c30 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c2e:	e026      	b.n	8002c7e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1cd      	bne.n	8002bd6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	6839      	ldr	r1, [r7, #0]
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 f8b2 	bl	8002da8 <SPI_EndRxTxTransaction>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10a      	bne.n	8002c6e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c58:	2300      	movs	r3, #0
 8002c5a:	613b      	str	r3, [r7, #16]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	613b      	str	r3, [r7, #16]
 8002c6c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	77fb      	strb	r3, [r7, #31]
 8002c7a:	e000      	b.n	8002c7e <HAL_SPI_Transmit+0x25e>
  }

error:
 8002c7c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3720      	adds	r7, #32
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ca8:	f7fe fd3e 	bl	8001728 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb0:	1a9b      	subs	r3, r3, r2
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002cb8:	f7fe fd36 	bl	8001728 <HAL_GetTick>
 8002cbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002cbe:	4b39      	ldr	r3, [pc, #228]	; (8002da4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	015b      	lsls	r3, r3, #5
 8002cc4:	0d1b      	lsrs	r3, r3, #20
 8002cc6:	69fa      	ldr	r2, [r7, #28]
 8002cc8:	fb02 f303 	mul.w	r3, r2, r3
 8002ccc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cce:	e054      	b.n	8002d7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd6:	d050      	beq.n	8002d7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002cd8:	f7fe fd26 	bl	8001728 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	69fa      	ldr	r2, [r7, #28]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d902      	bls.n	8002cee <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d13d      	bne.n	8002d6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002cfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d06:	d111      	bne.n	8002d2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d10:	d004      	beq.n	8002d1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d1a:	d107      	bne.n	8002d2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d34:	d10f      	bne.n	8002d56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e017      	b.n	8002d9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	4013      	ands	r3, r2
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	bf0c      	ite	eq
 8002d8a:	2301      	moveq	r3, #1
 8002d8c:	2300      	movne	r3, #0
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	461a      	mov	r2, r3
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d19b      	bne.n	8002cd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3720      	adds	r7, #32
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20000024 	.word	0x20000024

08002da8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af02      	add	r7, sp, #8
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2180      	movs	r1, #128	; 0x80
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f7ff ff6a 	bl	8002c98 <SPI_WaitFlagStateUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d007      	beq.n	8002dda <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dce:	f043 0220 	orr.w	r2, r3, #32
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e000      	b.n	8002ddc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e03f      	b.n	8002e76 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7fd fca8 	bl	8000760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2224      	movs	r2, #36	; 0x24
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 f9c3 	bl	80031b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	691a      	ldr	r2, [r3, #16]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695a      	ldr	r2, [r3, #20]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68da      	ldr	r2, [r3, #12]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b084      	sub	sp, #16
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b20      	cmp	r3, #32
 8002e96:	d11d      	bne.n	8002ed4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <HAL_UART_Receive_DMA+0x26>
 8002e9e:	88fb      	ldrh	r3, [r7, #6]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e016      	b.n	8002ed6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_UART_Receive_DMA+0x38>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e00f      	b.n	8002ed6 <HAL_UART_Receive_DMA+0x58>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8002ec4:	88fb      	ldrh	r3, [r7, #6]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	68b9      	ldr	r1, [r7, #8]
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 f8cc 	bl	8003068 <UART_Start_Receive_DMA>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	e000      	b.n	8002ed6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002ed4:	2302      	movs	r3, #2
  }
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr

08002ef0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bc80      	pop	{r7}
 8002f04:	4770      	bx	lr

08002f06 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b084      	sub	sp, #16
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0320 	and.w	r3, r3, #32
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d12a      	bne.n	8002f78 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f36:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0201 	bic.w	r2, r2, #1
 8002f46:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f56:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d107      	bne.n	8002f78 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0210 	bic.w	r2, r2, #16
 8002f76:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d106      	bne.n	8002f8e <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f84:	4619      	mov	r1, r3
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f7ff ffb2 	bl	8002ef0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f8c:	e002      	b.n	8002f94 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f7fd f8fc 	bl	800018c <HAL_UART_RxCpltCallback>
}
 8002f94:	bf00      	nop
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d108      	bne.n	8002fc4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002fb6:	085b      	lsrs	r3, r3, #1
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	4619      	mov	r1, r3
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f7ff ff97 	bl	8002ef0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002fc2:	e002      	b.n	8002fca <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f7fd f8c1 	bl	800014c <HAL_UART_RxHalfCpltCallback>
}
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b084      	sub	sp, #16
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	bf14      	ite	ne
 8002ff2:	2301      	movne	r3, #1
 8002ff4:	2300      	moveq	r3, #0
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b21      	cmp	r3, #33	; 0x21
 8003004:	d108      	bne.n	8003018 <UART_DMAError+0x46>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d005      	beq.n	8003018 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2200      	movs	r2, #0
 8003010:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003012:	68b8      	ldr	r0, [r7, #8]
 8003014:	f000 f88c 	bl	8003130 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003022:	2b00      	cmp	r3, #0
 8003024:	bf14      	ite	ne
 8003026:	2301      	movne	r3, #1
 8003028:	2300      	moveq	r3, #0
 800302a:	b2db      	uxtb	r3, r3
 800302c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b22      	cmp	r3, #34	; 0x22
 8003038:	d108      	bne.n	800304c <UART_DMAError+0x7a>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2200      	movs	r2, #0
 8003044:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003046:	68b8      	ldr	r0, [r7, #8]
 8003048:	f000 f887 	bl	800315a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	f043 0210 	orr.w	r2, r3, #16
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003058:	68b8      	ldr	r0, [r7, #8]
 800305a:	f7ff ff40 	bl	8002ede <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800305e:	bf00      	nop
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	4613      	mov	r3, r2
 8003074:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	88fa      	ldrh	r2, [r7, #6]
 8003080:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2222      	movs	r2, #34	; 0x22
 800308c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003094:	4a23      	ldr	r2, [pc, #140]	; (8003124 <UART_Start_Receive_DMA+0xbc>)
 8003096:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309c:	4a22      	ldr	r2, [pc, #136]	; (8003128 <UART_Start_Receive_DMA+0xc0>)
 800309e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a4:	4a21      	ldr	r2, [pc, #132]	; (800312c <UART_Start_Receive_DMA+0xc4>)
 80030a6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ac:	2200      	movs	r2, #0
 80030ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80030b0:	f107 0308 	add.w	r3, r7, #8
 80030b4:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	3304      	adds	r3, #4
 80030c0:	4619      	mov	r1, r3
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	f7fe fcc4 	bl	8001a54 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80030cc:	2300      	movs	r3, #0
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68da      	ldr	r2, [r3, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030f8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695a      	ldr	r2, [r3, #20]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f042 0201 	orr.w	r2, r2, #1
 8003108:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	695a      	ldr	r2, [r3, #20]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003118:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3718      	adds	r7, #24
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	08002f07 	.word	0x08002f07
 8003128:	08002f9d 	.word	0x08002f9d
 800312c:	08002fd3 	.word	0x08002fd3

08003130 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68da      	ldr	r2, [r3, #12]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003146:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr

0800315a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003170:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695a      	ldr	r2, [r3, #20]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0201 	bic.w	r2, r2, #1
 8003180:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	2b01      	cmp	r3, #1
 8003188:	d107      	bne.n	800319a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68da      	ldr	r2, [r3, #12]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 0210 	bic.w	r2, r2, #16
 8003198:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2220      	movs	r2, #32
 800319e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr
	...

080031b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031ee:	f023 030c 	bic.w	r3, r3, #12
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	68b9      	ldr	r1, [r7, #8]
 80031f8:	430b      	orrs	r3, r1
 80031fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699a      	ldr	r2, [r3, #24]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a2c      	ldr	r2, [pc, #176]	; (80032c8 <UART_SetConfig+0x114>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d103      	bne.n	8003224 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800321c:	f7ff fb4a 	bl	80028b4 <HAL_RCC_GetPCLK2Freq>
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	e002      	b.n	800322a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003224:	f7ff fb32 	bl	800288c <HAL_RCC_GetPCLK1Freq>
 8003228:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	009a      	lsls	r2, r3, #2
 8003234:	441a      	add	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003240:	4a22      	ldr	r2, [pc, #136]	; (80032cc <UART_SetConfig+0x118>)
 8003242:	fba2 2303 	umull	r2, r3, r2, r3
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	0119      	lsls	r1, r3, #4
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	009a      	lsls	r2, r3, #2
 8003254:	441a      	add	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003260:	4b1a      	ldr	r3, [pc, #104]	; (80032cc <UART_SetConfig+0x118>)
 8003262:	fba3 0302 	umull	r0, r3, r3, r2
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	2064      	movs	r0, #100	; 0x64
 800326a:	fb00 f303 	mul.w	r3, r0, r3
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	3332      	adds	r3, #50	; 0x32
 8003274:	4a15      	ldr	r2, [pc, #84]	; (80032cc <UART_SetConfig+0x118>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	095b      	lsrs	r3, r3, #5
 800327c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003280:	4419      	add	r1, r3
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	009a      	lsls	r2, r3, #2
 800328c:	441a      	add	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	fbb2 f2f3 	udiv	r2, r2, r3
 8003298:	4b0c      	ldr	r3, [pc, #48]	; (80032cc <UART_SetConfig+0x118>)
 800329a:	fba3 0302 	umull	r0, r3, r3, r2
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	2064      	movs	r0, #100	; 0x64
 80032a2:	fb00 f303 	mul.w	r3, r0, r3
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	3332      	adds	r3, #50	; 0x32
 80032ac:	4a07      	ldr	r2, [pc, #28]	; (80032cc <UART_SetConfig+0x118>)
 80032ae:	fba2 2303 	umull	r2, r3, r2, r3
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	f003 020f 	and.w	r2, r3, #15
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	440a      	add	r2, r1
 80032be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032c0:	bf00      	nop
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40013800 	.word	0x40013800
 80032cc:	51eb851f 	.word	0x51eb851f

080032d0 <__errno>:
 80032d0:	4b01      	ldr	r3, [pc, #4]	; (80032d8 <__errno+0x8>)
 80032d2:	6818      	ldr	r0, [r3, #0]
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	20000b30 	.word	0x20000b30

080032dc <__libc_init_array>:
 80032dc:	b570      	push	{r4, r5, r6, lr}
 80032de:	2600      	movs	r6, #0
 80032e0:	4d0c      	ldr	r5, [pc, #48]	; (8003314 <__libc_init_array+0x38>)
 80032e2:	4c0d      	ldr	r4, [pc, #52]	; (8003318 <__libc_init_array+0x3c>)
 80032e4:	1b64      	subs	r4, r4, r5
 80032e6:	10a4      	asrs	r4, r4, #2
 80032e8:	42a6      	cmp	r6, r4
 80032ea:	d109      	bne.n	8003300 <__libc_init_array+0x24>
 80032ec:	f000 fc9c 	bl	8003c28 <_init>
 80032f0:	2600      	movs	r6, #0
 80032f2:	4d0a      	ldr	r5, [pc, #40]	; (800331c <__libc_init_array+0x40>)
 80032f4:	4c0a      	ldr	r4, [pc, #40]	; (8003320 <__libc_init_array+0x44>)
 80032f6:	1b64      	subs	r4, r4, r5
 80032f8:	10a4      	asrs	r4, r4, #2
 80032fa:	42a6      	cmp	r6, r4
 80032fc:	d105      	bne.n	800330a <__libc_init_array+0x2e>
 80032fe:	bd70      	pop	{r4, r5, r6, pc}
 8003300:	f855 3b04 	ldr.w	r3, [r5], #4
 8003304:	4798      	blx	r3
 8003306:	3601      	adds	r6, #1
 8003308:	e7ee      	b.n	80032e8 <__libc_init_array+0xc>
 800330a:	f855 3b04 	ldr.w	r3, [r5], #4
 800330e:	4798      	blx	r3
 8003310:	3601      	adds	r6, #1
 8003312:	e7f2      	b.n	80032fa <__libc_init_array+0x1e>
 8003314:	08003cac 	.word	0x08003cac
 8003318:	08003cac 	.word	0x08003cac
 800331c:	08003cac 	.word	0x08003cac
 8003320:	08003cb0 	.word	0x08003cb0

08003324 <memcpy>:
 8003324:	440a      	add	r2, r1
 8003326:	4291      	cmp	r1, r2
 8003328:	f100 33ff 	add.w	r3, r0, #4294967295
 800332c:	d100      	bne.n	8003330 <memcpy+0xc>
 800332e:	4770      	bx	lr
 8003330:	b510      	push	{r4, lr}
 8003332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003336:	4291      	cmp	r1, r2
 8003338:	f803 4f01 	strb.w	r4, [r3, #1]!
 800333c:	d1f9      	bne.n	8003332 <memcpy+0xe>
 800333e:	bd10      	pop	{r4, pc}

08003340 <memset>:
 8003340:	4603      	mov	r3, r0
 8003342:	4402      	add	r2, r0
 8003344:	4293      	cmp	r3, r2
 8003346:	d100      	bne.n	800334a <memset+0xa>
 8003348:	4770      	bx	lr
 800334a:	f803 1b01 	strb.w	r1, [r3], #1
 800334e:	e7f9      	b.n	8003344 <memset+0x4>

08003350 <siprintf>:
 8003350:	b40e      	push	{r1, r2, r3}
 8003352:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003356:	b500      	push	{lr}
 8003358:	b09c      	sub	sp, #112	; 0x70
 800335a:	ab1d      	add	r3, sp, #116	; 0x74
 800335c:	9002      	str	r0, [sp, #8]
 800335e:	9006      	str	r0, [sp, #24]
 8003360:	9107      	str	r1, [sp, #28]
 8003362:	9104      	str	r1, [sp, #16]
 8003364:	4808      	ldr	r0, [pc, #32]	; (8003388 <siprintf+0x38>)
 8003366:	4909      	ldr	r1, [pc, #36]	; (800338c <siprintf+0x3c>)
 8003368:	f853 2b04 	ldr.w	r2, [r3], #4
 800336c:	9105      	str	r1, [sp, #20]
 800336e:	6800      	ldr	r0, [r0, #0]
 8003370:	a902      	add	r1, sp, #8
 8003372:	9301      	str	r3, [sp, #4]
 8003374:	f000 f868 	bl	8003448 <_svfiprintf_r>
 8003378:	2200      	movs	r2, #0
 800337a:	9b02      	ldr	r3, [sp, #8]
 800337c:	701a      	strb	r2, [r3, #0]
 800337e:	b01c      	add	sp, #112	; 0x70
 8003380:	f85d eb04 	ldr.w	lr, [sp], #4
 8003384:	b003      	add	sp, #12
 8003386:	4770      	bx	lr
 8003388:	20000b30 	.word	0x20000b30
 800338c:	ffff0208 	.word	0xffff0208

08003390 <__ssputs_r>:
 8003390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003394:	688e      	ldr	r6, [r1, #8]
 8003396:	4682      	mov	sl, r0
 8003398:	429e      	cmp	r6, r3
 800339a:	460c      	mov	r4, r1
 800339c:	4690      	mov	r8, r2
 800339e:	461f      	mov	r7, r3
 80033a0:	d838      	bhi.n	8003414 <__ssputs_r+0x84>
 80033a2:	898a      	ldrh	r2, [r1, #12]
 80033a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80033a8:	d032      	beq.n	8003410 <__ssputs_r+0x80>
 80033aa:	6825      	ldr	r5, [r4, #0]
 80033ac:	6909      	ldr	r1, [r1, #16]
 80033ae:	3301      	adds	r3, #1
 80033b0:	eba5 0901 	sub.w	r9, r5, r1
 80033b4:	6965      	ldr	r5, [r4, #20]
 80033b6:	444b      	add	r3, r9
 80033b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80033c0:	106d      	asrs	r5, r5, #1
 80033c2:	429d      	cmp	r5, r3
 80033c4:	bf38      	it	cc
 80033c6:	461d      	movcc	r5, r3
 80033c8:	0553      	lsls	r3, r2, #21
 80033ca:	d531      	bpl.n	8003430 <__ssputs_r+0xa0>
 80033cc:	4629      	mov	r1, r5
 80033ce:	f000 fb61 	bl	8003a94 <_malloc_r>
 80033d2:	4606      	mov	r6, r0
 80033d4:	b950      	cbnz	r0, 80033ec <__ssputs_r+0x5c>
 80033d6:	230c      	movs	r3, #12
 80033d8:	f04f 30ff 	mov.w	r0, #4294967295
 80033dc:	f8ca 3000 	str.w	r3, [sl]
 80033e0:	89a3      	ldrh	r3, [r4, #12]
 80033e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033e6:	81a3      	strh	r3, [r4, #12]
 80033e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033ec:	464a      	mov	r2, r9
 80033ee:	6921      	ldr	r1, [r4, #16]
 80033f0:	f7ff ff98 	bl	8003324 <memcpy>
 80033f4:	89a3      	ldrh	r3, [r4, #12]
 80033f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80033fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033fe:	81a3      	strh	r3, [r4, #12]
 8003400:	6126      	str	r6, [r4, #16]
 8003402:	444e      	add	r6, r9
 8003404:	6026      	str	r6, [r4, #0]
 8003406:	463e      	mov	r6, r7
 8003408:	6165      	str	r5, [r4, #20]
 800340a:	eba5 0509 	sub.w	r5, r5, r9
 800340e:	60a5      	str	r5, [r4, #8]
 8003410:	42be      	cmp	r6, r7
 8003412:	d900      	bls.n	8003416 <__ssputs_r+0x86>
 8003414:	463e      	mov	r6, r7
 8003416:	4632      	mov	r2, r6
 8003418:	4641      	mov	r1, r8
 800341a:	6820      	ldr	r0, [r4, #0]
 800341c:	f000 fab8 	bl	8003990 <memmove>
 8003420:	68a3      	ldr	r3, [r4, #8]
 8003422:	2000      	movs	r0, #0
 8003424:	1b9b      	subs	r3, r3, r6
 8003426:	60a3      	str	r3, [r4, #8]
 8003428:	6823      	ldr	r3, [r4, #0]
 800342a:	4433      	add	r3, r6
 800342c:	6023      	str	r3, [r4, #0]
 800342e:	e7db      	b.n	80033e8 <__ssputs_r+0x58>
 8003430:	462a      	mov	r2, r5
 8003432:	f000 fba3 	bl	8003b7c <_realloc_r>
 8003436:	4606      	mov	r6, r0
 8003438:	2800      	cmp	r0, #0
 800343a:	d1e1      	bne.n	8003400 <__ssputs_r+0x70>
 800343c:	4650      	mov	r0, sl
 800343e:	6921      	ldr	r1, [r4, #16]
 8003440:	f000 fac0 	bl	80039c4 <_free_r>
 8003444:	e7c7      	b.n	80033d6 <__ssputs_r+0x46>
	...

08003448 <_svfiprintf_r>:
 8003448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800344c:	4698      	mov	r8, r3
 800344e:	898b      	ldrh	r3, [r1, #12]
 8003450:	4607      	mov	r7, r0
 8003452:	061b      	lsls	r3, r3, #24
 8003454:	460d      	mov	r5, r1
 8003456:	4614      	mov	r4, r2
 8003458:	b09d      	sub	sp, #116	; 0x74
 800345a:	d50e      	bpl.n	800347a <_svfiprintf_r+0x32>
 800345c:	690b      	ldr	r3, [r1, #16]
 800345e:	b963      	cbnz	r3, 800347a <_svfiprintf_r+0x32>
 8003460:	2140      	movs	r1, #64	; 0x40
 8003462:	f000 fb17 	bl	8003a94 <_malloc_r>
 8003466:	6028      	str	r0, [r5, #0]
 8003468:	6128      	str	r0, [r5, #16]
 800346a:	b920      	cbnz	r0, 8003476 <_svfiprintf_r+0x2e>
 800346c:	230c      	movs	r3, #12
 800346e:	603b      	str	r3, [r7, #0]
 8003470:	f04f 30ff 	mov.w	r0, #4294967295
 8003474:	e0d1      	b.n	800361a <_svfiprintf_r+0x1d2>
 8003476:	2340      	movs	r3, #64	; 0x40
 8003478:	616b      	str	r3, [r5, #20]
 800347a:	2300      	movs	r3, #0
 800347c:	9309      	str	r3, [sp, #36]	; 0x24
 800347e:	2320      	movs	r3, #32
 8003480:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003484:	2330      	movs	r3, #48	; 0x30
 8003486:	f04f 0901 	mov.w	r9, #1
 800348a:	f8cd 800c 	str.w	r8, [sp, #12]
 800348e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003634 <_svfiprintf_r+0x1ec>
 8003492:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003496:	4623      	mov	r3, r4
 8003498:	469a      	mov	sl, r3
 800349a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800349e:	b10a      	cbz	r2, 80034a4 <_svfiprintf_r+0x5c>
 80034a0:	2a25      	cmp	r2, #37	; 0x25
 80034a2:	d1f9      	bne.n	8003498 <_svfiprintf_r+0x50>
 80034a4:	ebba 0b04 	subs.w	fp, sl, r4
 80034a8:	d00b      	beq.n	80034c2 <_svfiprintf_r+0x7a>
 80034aa:	465b      	mov	r3, fp
 80034ac:	4622      	mov	r2, r4
 80034ae:	4629      	mov	r1, r5
 80034b0:	4638      	mov	r0, r7
 80034b2:	f7ff ff6d 	bl	8003390 <__ssputs_r>
 80034b6:	3001      	adds	r0, #1
 80034b8:	f000 80aa 	beq.w	8003610 <_svfiprintf_r+0x1c8>
 80034bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034be:	445a      	add	r2, fp
 80034c0:	9209      	str	r2, [sp, #36]	; 0x24
 80034c2:	f89a 3000 	ldrb.w	r3, [sl]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 80a2 	beq.w	8003610 <_svfiprintf_r+0x1c8>
 80034cc:	2300      	movs	r3, #0
 80034ce:	f04f 32ff 	mov.w	r2, #4294967295
 80034d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034d6:	f10a 0a01 	add.w	sl, sl, #1
 80034da:	9304      	str	r3, [sp, #16]
 80034dc:	9307      	str	r3, [sp, #28]
 80034de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034e2:	931a      	str	r3, [sp, #104]	; 0x68
 80034e4:	4654      	mov	r4, sl
 80034e6:	2205      	movs	r2, #5
 80034e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034ec:	4851      	ldr	r0, [pc, #324]	; (8003634 <_svfiprintf_r+0x1ec>)
 80034ee:	f000 fa41 	bl	8003974 <memchr>
 80034f2:	9a04      	ldr	r2, [sp, #16]
 80034f4:	b9d8      	cbnz	r0, 800352e <_svfiprintf_r+0xe6>
 80034f6:	06d0      	lsls	r0, r2, #27
 80034f8:	bf44      	itt	mi
 80034fa:	2320      	movmi	r3, #32
 80034fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003500:	0711      	lsls	r1, r2, #28
 8003502:	bf44      	itt	mi
 8003504:	232b      	movmi	r3, #43	; 0x2b
 8003506:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800350a:	f89a 3000 	ldrb.w	r3, [sl]
 800350e:	2b2a      	cmp	r3, #42	; 0x2a
 8003510:	d015      	beq.n	800353e <_svfiprintf_r+0xf6>
 8003512:	4654      	mov	r4, sl
 8003514:	2000      	movs	r0, #0
 8003516:	f04f 0c0a 	mov.w	ip, #10
 800351a:	9a07      	ldr	r2, [sp, #28]
 800351c:	4621      	mov	r1, r4
 800351e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003522:	3b30      	subs	r3, #48	; 0x30
 8003524:	2b09      	cmp	r3, #9
 8003526:	d94e      	bls.n	80035c6 <_svfiprintf_r+0x17e>
 8003528:	b1b0      	cbz	r0, 8003558 <_svfiprintf_r+0x110>
 800352a:	9207      	str	r2, [sp, #28]
 800352c:	e014      	b.n	8003558 <_svfiprintf_r+0x110>
 800352e:	eba0 0308 	sub.w	r3, r0, r8
 8003532:	fa09 f303 	lsl.w	r3, r9, r3
 8003536:	4313      	orrs	r3, r2
 8003538:	46a2      	mov	sl, r4
 800353a:	9304      	str	r3, [sp, #16]
 800353c:	e7d2      	b.n	80034e4 <_svfiprintf_r+0x9c>
 800353e:	9b03      	ldr	r3, [sp, #12]
 8003540:	1d19      	adds	r1, r3, #4
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	9103      	str	r1, [sp, #12]
 8003546:	2b00      	cmp	r3, #0
 8003548:	bfbb      	ittet	lt
 800354a:	425b      	neglt	r3, r3
 800354c:	f042 0202 	orrlt.w	r2, r2, #2
 8003550:	9307      	strge	r3, [sp, #28]
 8003552:	9307      	strlt	r3, [sp, #28]
 8003554:	bfb8      	it	lt
 8003556:	9204      	strlt	r2, [sp, #16]
 8003558:	7823      	ldrb	r3, [r4, #0]
 800355a:	2b2e      	cmp	r3, #46	; 0x2e
 800355c:	d10c      	bne.n	8003578 <_svfiprintf_r+0x130>
 800355e:	7863      	ldrb	r3, [r4, #1]
 8003560:	2b2a      	cmp	r3, #42	; 0x2a
 8003562:	d135      	bne.n	80035d0 <_svfiprintf_r+0x188>
 8003564:	9b03      	ldr	r3, [sp, #12]
 8003566:	3402      	adds	r4, #2
 8003568:	1d1a      	adds	r2, r3, #4
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	9203      	str	r2, [sp, #12]
 800356e:	2b00      	cmp	r3, #0
 8003570:	bfb8      	it	lt
 8003572:	f04f 33ff 	movlt.w	r3, #4294967295
 8003576:	9305      	str	r3, [sp, #20]
 8003578:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003638 <_svfiprintf_r+0x1f0>
 800357c:	2203      	movs	r2, #3
 800357e:	4650      	mov	r0, sl
 8003580:	7821      	ldrb	r1, [r4, #0]
 8003582:	f000 f9f7 	bl	8003974 <memchr>
 8003586:	b140      	cbz	r0, 800359a <_svfiprintf_r+0x152>
 8003588:	2340      	movs	r3, #64	; 0x40
 800358a:	eba0 000a 	sub.w	r0, r0, sl
 800358e:	fa03 f000 	lsl.w	r0, r3, r0
 8003592:	9b04      	ldr	r3, [sp, #16]
 8003594:	3401      	adds	r4, #1
 8003596:	4303      	orrs	r3, r0
 8003598:	9304      	str	r3, [sp, #16]
 800359a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800359e:	2206      	movs	r2, #6
 80035a0:	4826      	ldr	r0, [pc, #152]	; (800363c <_svfiprintf_r+0x1f4>)
 80035a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035a6:	f000 f9e5 	bl	8003974 <memchr>
 80035aa:	2800      	cmp	r0, #0
 80035ac:	d038      	beq.n	8003620 <_svfiprintf_r+0x1d8>
 80035ae:	4b24      	ldr	r3, [pc, #144]	; (8003640 <_svfiprintf_r+0x1f8>)
 80035b0:	bb1b      	cbnz	r3, 80035fa <_svfiprintf_r+0x1b2>
 80035b2:	9b03      	ldr	r3, [sp, #12]
 80035b4:	3307      	adds	r3, #7
 80035b6:	f023 0307 	bic.w	r3, r3, #7
 80035ba:	3308      	adds	r3, #8
 80035bc:	9303      	str	r3, [sp, #12]
 80035be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035c0:	4433      	add	r3, r6
 80035c2:	9309      	str	r3, [sp, #36]	; 0x24
 80035c4:	e767      	b.n	8003496 <_svfiprintf_r+0x4e>
 80035c6:	460c      	mov	r4, r1
 80035c8:	2001      	movs	r0, #1
 80035ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80035ce:	e7a5      	b.n	800351c <_svfiprintf_r+0xd4>
 80035d0:	2300      	movs	r3, #0
 80035d2:	f04f 0c0a 	mov.w	ip, #10
 80035d6:	4619      	mov	r1, r3
 80035d8:	3401      	adds	r4, #1
 80035da:	9305      	str	r3, [sp, #20]
 80035dc:	4620      	mov	r0, r4
 80035de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035e2:	3a30      	subs	r2, #48	; 0x30
 80035e4:	2a09      	cmp	r2, #9
 80035e6:	d903      	bls.n	80035f0 <_svfiprintf_r+0x1a8>
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0c5      	beq.n	8003578 <_svfiprintf_r+0x130>
 80035ec:	9105      	str	r1, [sp, #20]
 80035ee:	e7c3      	b.n	8003578 <_svfiprintf_r+0x130>
 80035f0:	4604      	mov	r4, r0
 80035f2:	2301      	movs	r3, #1
 80035f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80035f8:	e7f0      	b.n	80035dc <_svfiprintf_r+0x194>
 80035fa:	ab03      	add	r3, sp, #12
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	462a      	mov	r2, r5
 8003600:	4638      	mov	r0, r7
 8003602:	4b10      	ldr	r3, [pc, #64]	; (8003644 <_svfiprintf_r+0x1fc>)
 8003604:	a904      	add	r1, sp, #16
 8003606:	f3af 8000 	nop.w
 800360a:	1c42      	adds	r2, r0, #1
 800360c:	4606      	mov	r6, r0
 800360e:	d1d6      	bne.n	80035be <_svfiprintf_r+0x176>
 8003610:	89ab      	ldrh	r3, [r5, #12]
 8003612:	065b      	lsls	r3, r3, #25
 8003614:	f53f af2c 	bmi.w	8003470 <_svfiprintf_r+0x28>
 8003618:	9809      	ldr	r0, [sp, #36]	; 0x24
 800361a:	b01d      	add	sp, #116	; 0x74
 800361c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003620:	ab03      	add	r3, sp, #12
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	462a      	mov	r2, r5
 8003626:	4638      	mov	r0, r7
 8003628:	4b06      	ldr	r3, [pc, #24]	; (8003644 <_svfiprintf_r+0x1fc>)
 800362a:	a904      	add	r1, sp, #16
 800362c:	f000 f87c 	bl	8003728 <_printf_i>
 8003630:	e7eb      	b.n	800360a <_svfiprintf_r+0x1c2>
 8003632:	bf00      	nop
 8003634:	08003c78 	.word	0x08003c78
 8003638:	08003c7e 	.word	0x08003c7e
 800363c:	08003c82 	.word	0x08003c82
 8003640:	00000000 	.word	0x00000000
 8003644:	08003391 	.word	0x08003391

08003648 <_printf_common>:
 8003648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800364c:	4616      	mov	r6, r2
 800364e:	4699      	mov	r9, r3
 8003650:	688a      	ldr	r2, [r1, #8]
 8003652:	690b      	ldr	r3, [r1, #16]
 8003654:	4607      	mov	r7, r0
 8003656:	4293      	cmp	r3, r2
 8003658:	bfb8      	it	lt
 800365a:	4613      	movlt	r3, r2
 800365c:	6033      	str	r3, [r6, #0]
 800365e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003662:	460c      	mov	r4, r1
 8003664:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003668:	b10a      	cbz	r2, 800366e <_printf_common+0x26>
 800366a:	3301      	adds	r3, #1
 800366c:	6033      	str	r3, [r6, #0]
 800366e:	6823      	ldr	r3, [r4, #0]
 8003670:	0699      	lsls	r1, r3, #26
 8003672:	bf42      	ittt	mi
 8003674:	6833      	ldrmi	r3, [r6, #0]
 8003676:	3302      	addmi	r3, #2
 8003678:	6033      	strmi	r3, [r6, #0]
 800367a:	6825      	ldr	r5, [r4, #0]
 800367c:	f015 0506 	ands.w	r5, r5, #6
 8003680:	d106      	bne.n	8003690 <_printf_common+0x48>
 8003682:	f104 0a19 	add.w	sl, r4, #25
 8003686:	68e3      	ldr	r3, [r4, #12]
 8003688:	6832      	ldr	r2, [r6, #0]
 800368a:	1a9b      	subs	r3, r3, r2
 800368c:	42ab      	cmp	r3, r5
 800368e:	dc28      	bgt.n	80036e2 <_printf_common+0x9a>
 8003690:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003694:	1e13      	subs	r3, r2, #0
 8003696:	6822      	ldr	r2, [r4, #0]
 8003698:	bf18      	it	ne
 800369a:	2301      	movne	r3, #1
 800369c:	0692      	lsls	r2, r2, #26
 800369e:	d42d      	bmi.n	80036fc <_printf_common+0xb4>
 80036a0:	4649      	mov	r1, r9
 80036a2:	4638      	mov	r0, r7
 80036a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036a8:	47c0      	blx	r8
 80036aa:	3001      	adds	r0, #1
 80036ac:	d020      	beq.n	80036f0 <_printf_common+0xa8>
 80036ae:	6823      	ldr	r3, [r4, #0]
 80036b0:	68e5      	ldr	r5, [r4, #12]
 80036b2:	f003 0306 	and.w	r3, r3, #6
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	bf18      	it	ne
 80036ba:	2500      	movne	r5, #0
 80036bc:	6832      	ldr	r2, [r6, #0]
 80036be:	f04f 0600 	mov.w	r6, #0
 80036c2:	68a3      	ldr	r3, [r4, #8]
 80036c4:	bf08      	it	eq
 80036c6:	1aad      	subeq	r5, r5, r2
 80036c8:	6922      	ldr	r2, [r4, #16]
 80036ca:	bf08      	it	eq
 80036cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036d0:	4293      	cmp	r3, r2
 80036d2:	bfc4      	itt	gt
 80036d4:	1a9b      	subgt	r3, r3, r2
 80036d6:	18ed      	addgt	r5, r5, r3
 80036d8:	341a      	adds	r4, #26
 80036da:	42b5      	cmp	r5, r6
 80036dc:	d11a      	bne.n	8003714 <_printf_common+0xcc>
 80036de:	2000      	movs	r0, #0
 80036e0:	e008      	b.n	80036f4 <_printf_common+0xac>
 80036e2:	2301      	movs	r3, #1
 80036e4:	4652      	mov	r2, sl
 80036e6:	4649      	mov	r1, r9
 80036e8:	4638      	mov	r0, r7
 80036ea:	47c0      	blx	r8
 80036ec:	3001      	adds	r0, #1
 80036ee:	d103      	bne.n	80036f8 <_printf_common+0xb0>
 80036f0:	f04f 30ff 	mov.w	r0, #4294967295
 80036f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036f8:	3501      	adds	r5, #1
 80036fa:	e7c4      	b.n	8003686 <_printf_common+0x3e>
 80036fc:	2030      	movs	r0, #48	; 0x30
 80036fe:	18e1      	adds	r1, r4, r3
 8003700:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003704:	1c5a      	adds	r2, r3, #1
 8003706:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800370a:	4422      	add	r2, r4
 800370c:	3302      	adds	r3, #2
 800370e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003712:	e7c5      	b.n	80036a0 <_printf_common+0x58>
 8003714:	2301      	movs	r3, #1
 8003716:	4622      	mov	r2, r4
 8003718:	4649      	mov	r1, r9
 800371a:	4638      	mov	r0, r7
 800371c:	47c0      	blx	r8
 800371e:	3001      	adds	r0, #1
 8003720:	d0e6      	beq.n	80036f0 <_printf_common+0xa8>
 8003722:	3601      	adds	r6, #1
 8003724:	e7d9      	b.n	80036da <_printf_common+0x92>
	...

08003728 <_printf_i>:
 8003728:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800372c:	7e0f      	ldrb	r7, [r1, #24]
 800372e:	4691      	mov	r9, r2
 8003730:	2f78      	cmp	r7, #120	; 0x78
 8003732:	4680      	mov	r8, r0
 8003734:	460c      	mov	r4, r1
 8003736:	469a      	mov	sl, r3
 8003738:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800373a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800373e:	d807      	bhi.n	8003750 <_printf_i+0x28>
 8003740:	2f62      	cmp	r7, #98	; 0x62
 8003742:	d80a      	bhi.n	800375a <_printf_i+0x32>
 8003744:	2f00      	cmp	r7, #0
 8003746:	f000 80d9 	beq.w	80038fc <_printf_i+0x1d4>
 800374a:	2f58      	cmp	r7, #88	; 0x58
 800374c:	f000 80a4 	beq.w	8003898 <_printf_i+0x170>
 8003750:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003754:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003758:	e03a      	b.n	80037d0 <_printf_i+0xa8>
 800375a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800375e:	2b15      	cmp	r3, #21
 8003760:	d8f6      	bhi.n	8003750 <_printf_i+0x28>
 8003762:	a101      	add	r1, pc, #4	; (adr r1, 8003768 <_printf_i+0x40>)
 8003764:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003768:	080037c1 	.word	0x080037c1
 800376c:	080037d5 	.word	0x080037d5
 8003770:	08003751 	.word	0x08003751
 8003774:	08003751 	.word	0x08003751
 8003778:	08003751 	.word	0x08003751
 800377c:	08003751 	.word	0x08003751
 8003780:	080037d5 	.word	0x080037d5
 8003784:	08003751 	.word	0x08003751
 8003788:	08003751 	.word	0x08003751
 800378c:	08003751 	.word	0x08003751
 8003790:	08003751 	.word	0x08003751
 8003794:	080038e3 	.word	0x080038e3
 8003798:	08003805 	.word	0x08003805
 800379c:	080038c5 	.word	0x080038c5
 80037a0:	08003751 	.word	0x08003751
 80037a4:	08003751 	.word	0x08003751
 80037a8:	08003905 	.word	0x08003905
 80037ac:	08003751 	.word	0x08003751
 80037b0:	08003805 	.word	0x08003805
 80037b4:	08003751 	.word	0x08003751
 80037b8:	08003751 	.word	0x08003751
 80037bc:	080038cd 	.word	0x080038cd
 80037c0:	682b      	ldr	r3, [r5, #0]
 80037c2:	1d1a      	adds	r2, r3, #4
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	602a      	str	r2, [r5, #0]
 80037c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037d0:	2301      	movs	r3, #1
 80037d2:	e0a4      	b.n	800391e <_printf_i+0x1f6>
 80037d4:	6820      	ldr	r0, [r4, #0]
 80037d6:	6829      	ldr	r1, [r5, #0]
 80037d8:	0606      	lsls	r6, r0, #24
 80037da:	f101 0304 	add.w	r3, r1, #4
 80037de:	d50a      	bpl.n	80037f6 <_printf_i+0xce>
 80037e0:	680e      	ldr	r6, [r1, #0]
 80037e2:	602b      	str	r3, [r5, #0]
 80037e4:	2e00      	cmp	r6, #0
 80037e6:	da03      	bge.n	80037f0 <_printf_i+0xc8>
 80037e8:	232d      	movs	r3, #45	; 0x2d
 80037ea:	4276      	negs	r6, r6
 80037ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037f0:	230a      	movs	r3, #10
 80037f2:	485e      	ldr	r0, [pc, #376]	; (800396c <_printf_i+0x244>)
 80037f4:	e019      	b.n	800382a <_printf_i+0x102>
 80037f6:	680e      	ldr	r6, [r1, #0]
 80037f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80037fc:	602b      	str	r3, [r5, #0]
 80037fe:	bf18      	it	ne
 8003800:	b236      	sxthne	r6, r6
 8003802:	e7ef      	b.n	80037e4 <_printf_i+0xbc>
 8003804:	682b      	ldr	r3, [r5, #0]
 8003806:	6820      	ldr	r0, [r4, #0]
 8003808:	1d19      	adds	r1, r3, #4
 800380a:	6029      	str	r1, [r5, #0]
 800380c:	0601      	lsls	r1, r0, #24
 800380e:	d501      	bpl.n	8003814 <_printf_i+0xec>
 8003810:	681e      	ldr	r6, [r3, #0]
 8003812:	e002      	b.n	800381a <_printf_i+0xf2>
 8003814:	0646      	lsls	r6, r0, #25
 8003816:	d5fb      	bpl.n	8003810 <_printf_i+0xe8>
 8003818:	881e      	ldrh	r6, [r3, #0]
 800381a:	2f6f      	cmp	r7, #111	; 0x6f
 800381c:	bf0c      	ite	eq
 800381e:	2308      	moveq	r3, #8
 8003820:	230a      	movne	r3, #10
 8003822:	4852      	ldr	r0, [pc, #328]	; (800396c <_printf_i+0x244>)
 8003824:	2100      	movs	r1, #0
 8003826:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800382a:	6865      	ldr	r5, [r4, #4]
 800382c:	2d00      	cmp	r5, #0
 800382e:	bfa8      	it	ge
 8003830:	6821      	ldrge	r1, [r4, #0]
 8003832:	60a5      	str	r5, [r4, #8]
 8003834:	bfa4      	itt	ge
 8003836:	f021 0104 	bicge.w	r1, r1, #4
 800383a:	6021      	strge	r1, [r4, #0]
 800383c:	b90e      	cbnz	r6, 8003842 <_printf_i+0x11a>
 800383e:	2d00      	cmp	r5, #0
 8003840:	d04d      	beq.n	80038de <_printf_i+0x1b6>
 8003842:	4615      	mov	r5, r2
 8003844:	fbb6 f1f3 	udiv	r1, r6, r3
 8003848:	fb03 6711 	mls	r7, r3, r1, r6
 800384c:	5dc7      	ldrb	r7, [r0, r7]
 800384e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003852:	4637      	mov	r7, r6
 8003854:	42bb      	cmp	r3, r7
 8003856:	460e      	mov	r6, r1
 8003858:	d9f4      	bls.n	8003844 <_printf_i+0x11c>
 800385a:	2b08      	cmp	r3, #8
 800385c:	d10b      	bne.n	8003876 <_printf_i+0x14e>
 800385e:	6823      	ldr	r3, [r4, #0]
 8003860:	07de      	lsls	r6, r3, #31
 8003862:	d508      	bpl.n	8003876 <_printf_i+0x14e>
 8003864:	6923      	ldr	r3, [r4, #16]
 8003866:	6861      	ldr	r1, [r4, #4]
 8003868:	4299      	cmp	r1, r3
 800386a:	bfde      	ittt	le
 800386c:	2330      	movle	r3, #48	; 0x30
 800386e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003872:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003876:	1b52      	subs	r2, r2, r5
 8003878:	6122      	str	r2, [r4, #16]
 800387a:	464b      	mov	r3, r9
 800387c:	4621      	mov	r1, r4
 800387e:	4640      	mov	r0, r8
 8003880:	f8cd a000 	str.w	sl, [sp]
 8003884:	aa03      	add	r2, sp, #12
 8003886:	f7ff fedf 	bl	8003648 <_printf_common>
 800388a:	3001      	adds	r0, #1
 800388c:	d14c      	bne.n	8003928 <_printf_i+0x200>
 800388e:	f04f 30ff 	mov.w	r0, #4294967295
 8003892:	b004      	add	sp, #16
 8003894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003898:	4834      	ldr	r0, [pc, #208]	; (800396c <_printf_i+0x244>)
 800389a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800389e:	6829      	ldr	r1, [r5, #0]
 80038a0:	6823      	ldr	r3, [r4, #0]
 80038a2:	f851 6b04 	ldr.w	r6, [r1], #4
 80038a6:	6029      	str	r1, [r5, #0]
 80038a8:	061d      	lsls	r5, r3, #24
 80038aa:	d514      	bpl.n	80038d6 <_printf_i+0x1ae>
 80038ac:	07df      	lsls	r7, r3, #31
 80038ae:	bf44      	itt	mi
 80038b0:	f043 0320 	orrmi.w	r3, r3, #32
 80038b4:	6023      	strmi	r3, [r4, #0]
 80038b6:	b91e      	cbnz	r6, 80038c0 <_printf_i+0x198>
 80038b8:	6823      	ldr	r3, [r4, #0]
 80038ba:	f023 0320 	bic.w	r3, r3, #32
 80038be:	6023      	str	r3, [r4, #0]
 80038c0:	2310      	movs	r3, #16
 80038c2:	e7af      	b.n	8003824 <_printf_i+0xfc>
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	f043 0320 	orr.w	r3, r3, #32
 80038ca:	6023      	str	r3, [r4, #0]
 80038cc:	2378      	movs	r3, #120	; 0x78
 80038ce:	4828      	ldr	r0, [pc, #160]	; (8003970 <_printf_i+0x248>)
 80038d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80038d4:	e7e3      	b.n	800389e <_printf_i+0x176>
 80038d6:	0659      	lsls	r1, r3, #25
 80038d8:	bf48      	it	mi
 80038da:	b2b6      	uxthmi	r6, r6
 80038dc:	e7e6      	b.n	80038ac <_printf_i+0x184>
 80038de:	4615      	mov	r5, r2
 80038e0:	e7bb      	b.n	800385a <_printf_i+0x132>
 80038e2:	682b      	ldr	r3, [r5, #0]
 80038e4:	6826      	ldr	r6, [r4, #0]
 80038e6:	1d18      	adds	r0, r3, #4
 80038e8:	6961      	ldr	r1, [r4, #20]
 80038ea:	6028      	str	r0, [r5, #0]
 80038ec:	0635      	lsls	r5, r6, #24
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	d501      	bpl.n	80038f6 <_printf_i+0x1ce>
 80038f2:	6019      	str	r1, [r3, #0]
 80038f4:	e002      	b.n	80038fc <_printf_i+0x1d4>
 80038f6:	0670      	lsls	r0, r6, #25
 80038f8:	d5fb      	bpl.n	80038f2 <_printf_i+0x1ca>
 80038fa:	8019      	strh	r1, [r3, #0]
 80038fc:	2300      	movs	r3, #0
 80038fe:	4615      	mov	r5, r2
 8003900:	6123      	str	r3, [r4, #16]
 8003902:	e7ba      	b.n	800387a <_printf_i+0x152>
 8003904:	682b      	ldr	r3, [r5, #0]
 8003906:	2100      	movs	r1, #0
 8003908:	1d1a      	adds	r2, r3, #4
 800390a:	602a      	str	r2, [r5, #0]
 800390c:	681d      	ldr	r5, [r3, #0]
 800390e:	6862      	ldr	r2, [r4, #4]
 8003910:	4628      	mov	r0, r5
 8003912:	f000 f82f 	bl	8003974 <memchr>
 8003916:	b108      	cbz	r0, 800391c <_printf_i+0x1f4>
 8003918:	1b40      	subs	r0, r0, r5
 800391a:	6060      	str	r0, [r4, #4]
 800391c:	6863      	ldr	r3, [r4, #4]
 800391e:	6123      	str	r3, [r4, #16]
 8003920:	2300      	movs	r3, #0
 8003922:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003926:	e7a8      	b.n	800387a <_printf_i+0x152>
 8003928:	462a      	mov	r2, r5
 800392a:	4649      	mov	r1, r9
 800392c:	4640      	mov	r0, r8
 800392e:	6923      	ldr	r3, [r4, #16]
 8003930:	47d0      	blx	sl
 8003932:	3001      	adds	r0, #1
 8003934:	d0ab      	beq.n	800388e <_printf_i+0x166>
 8003936:	6823      	ldr	r3, [r4, #0]
 8003938:	079b      	lsls	r3, r3, #30
 800393a:	d413      	bmi.n	8003964 <_printf_i+0x23c>
 800393c:	68e0      	ldr	r0, [r4, #12]
 800393e:	9b03      	ldr	r3, [sp, #12]
 8003940:	4298      	cmp	r0, r3
 8003942:	bfb8      	it	lt
 8003944:	4618      	movlt	r0, r3
 8003946:	e7a4      	b.n	8003892 <_printf_i+0x16a>
 8003948:	2301      	movs	r3, #1
 800394a:	4632      	mov	r2, r6
 800394c:	4649      	mov	r1, r9
 800394e:	4640      	mov	r0, r8
 8003950:	47d0      	blx	sl
 8003952:	3001      	adds	r0, #1
 8003954:	d09b      	beq.n	800388e <_printf_i+0x166>
 8003956:	3501      	adds	r5, #1
 8003958:	68e3      	ldr	r3, [r4, #12]
 800395a:	9903      	ldr	r1, [sp, #12]
 800395c:	1a5b      	subs	r3, r3, r1
 800395e:	42ab      	cmp	r3, r5
 8003960:	dcf2      	bgt.n	8003948 <_printf_i+0x220>
 8003962:	e7eb      	b.n	800393c <_printf_i+0x214>
 8003964:	2500      	movs	r5, #0
 8003966:	f104 0619 	add.w	r6, r4, #25
 800396a:	e7f5      	b.n	8003958 <_printf_i+0x230>
 800396c:	08003c89 	.word	0x08003c89
 8003970:	08003c9a 	.word	0x08003c9a

08003974 <memchr>:
 8003974:	4603      	mov	r3, r0
 8003976:	b510      	push	{r4, lr}
 8003978:	b2c9      	uxtb	r1, r1
 800397a:	4402      	add	r2, r0
 800397c:	4293      	cmp	r3, r2
 800397e:	4618      	mov	r0, r3
 8003980:	d101      	bne.n	8003986 <memchr+0x12>
 8003982:	2000      	movs	r0, #0
 8003984:	e003      	b.n	800398e <memchr+0x1a>
 8003986:	7804      	ldrb	r4, [r0, #0]
 8003988:	3301      	adds	r3, #1
 800398a:	428c      	cmp	r4, r1
 800398c:	d1f6      	bne.n	800397c <memchr+0x8>
 800398e:	bd10      	pop	{r4, pc}

08003990 <memmove>:
 8003990:	4288      	cmp	r0, r1
 8003992:	b510      	push	{r4, lr}
 8003994:	eb01 0402 	add.w	r4, r1, r2
 8003998:	d902      	bls.n	80039a0 <memmove+0x10>
 800399a:	4284      	cmp	r4, r0
 800399c:	4623      	mov	r3, r4
 800399e:	d807      	bhi.n	80039b0 <memmove+0x20>
 80039a0:	1e43      	subs	r3, r0, #1
 80039a2:	42a1      	cmp	r1, r4
 80039a4:	d008      	beq.n	80039b8 <memmove+0x28>
 80039a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80039ae:	e7f8      	b.n	80039a2 <memmove+0x12>
 80039b0:	4601      	mov	r1, r0
 80039b2:	4402      	add	r2, r0
 80039b4:	428a      	cmp	r2, r1
 80039b6:	d100      	bne.n	80039ba <memmove+0x2a>
 80039b8:	bd10      	pop	{r4, pc}
 80039ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80039be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80039c2:	e7f7      	b.n	80039b4 <memmove+0x24>

080039c4 <_free_r>:
 80039c4:	b538      	push	{r3, r4, r5, lr}
 80039c6:	4605      	mov	r5, r0
 80039c8:	2900      	cmp	r1, #0
 80039ca:	d040      	beq.n	8003a4e <_free_r+0x8a>
 80039cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039d0:	1f0c      	subs	r4, r1, #4
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	bfb8      	it	lt
 80039d6:	18e4      	addlt	r4, r4, r3
 80039d8:	f000 f910 	bl	8003bfc <__malloc_lock>
 80039dc:	4a1c      	ldr	r2, [pc, #112]	; (8003a50 <_free_r+0x8c>)
 80039de:	6813      	ldr	r3, [r2, #0]
 80039e0:	b933      	cbnz	r3, 80039f0 <_free_r+0x2c>
 80039e2:	6063      	str	r3, [r4, #4]
 80039e4:	6014      	str	r4, [r2, #0]
 80039e6:	4628      	mov	r0, r5
 80039e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039ec:	f000 b90c 	b.w	8003c08 <__malloc_unlock>
 80039f0:	42a3      	cmp	r3, r4
 80039f2:	d908      	bls.n	8003a06 <_free_r+0x42>
 80039f4:	6820      	ldr	r0, [r4, #0]
 80039f6:	1821      	adds	r1, r4, r0
 80039f8:	428b      	cmp	r3, r1
 80039fa:	bf01      	itttt	eq
 80039fc:	6819      	ldreq	r1, [r3, #0]
 80039fe:	685b      	ldreq	r3, [r3, #4]
 8003a00:	1809      	addeq	r1, r1, r0
 8003a02:	6021      	streq	r1, [r4, #0]
 8003a04:	e7ed      	b.n	80039e2 <_free_r+0x1e>
 8003a06:	461a      	mov	r2, r3
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	b10b      	cbz	r3, 8003a10 <_free_r+0x4c>
 8003a0c:	42a3      	cmp	r3, r4
 8003a0e:	d9fa      	bls.n	8003a06 <_free_r+0x42>
 8003a10:	6811      	ldr	r1, [r2, #0]
 8003a12:	1850      	adds	r0, r2, r1
 8003a14:	42a0      	cmp	r0, r4
 8003a16:	d10b      	bne.n	8003a30 <_free_r+0x6c>
 8003a18:	6820      	ldr	r0, [r4, #0]
 8003a1a:	4401      	add	r1, r0
 8003a1c:	1850      	adds	r0, r2, r1
 8003a1e:	4283      	cmp	r3, r0
 8003a20:	6011      	str	r1, [r2, #0]
 8003a22:	d1e0      	bne.n	80039e6 <_free_r+0x22>
 8003a24:	6818      	ldr	r0, [r3, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	4401      	add	r1, r0
 8003a2a:	6011      	str	r1, [r2, #0]
 8003a2c:	6053      	str	r3, [r2, #4]
 8003a2e:	e7da      	b.n	80039e6 <_free_r+0x22>
 8003a30:	d902      	bls.n	8003a38 <_free_r+0x74>
 8003a32:	230c      	movs	r3, #12
 8003a34:	602b      	str	r3, [r5, #0]
 8003a36:	e7d6      	b.n	80039e6 <_free_r+0x22>
 8003a38:	6820      	ldr	r0, [r4, #0]
 8003a3a:	1821      	adds	r1, r4, r0
 8003a3c:	428b      	cmp	r3, r1
 8003a3e:	bf01      	itttt	eq
 8003a40:	6819      	ldreq	r1, [r3, #0]
 8003a42:	685b      	ldreq	r3, [r3, #4]
 8003a44:	1809      	addeq	r1, r1, r0
 8003a46:	6021      	streq	r1, [r4, #0]
 8003a48:	6063      	str	r3, [r4, #4]
 8003a4a:	6054      	str	r4, [r2, #4]
 8003a4c:	e7cb      	b.n	80039e6 <_free_r+0x22>
 8003a4e:	bd38      	pop	{r3, r4, r5, pc}
 8003a50:	20002d9c 	.word	0x20002d9c

08003a54 <sbrk_aligned>:
 8003a54:	b570      	push	{r4, r5, r6, lr}
 8003a56:	4e0e      	ldr	r6, [pc, #56]	; (8003a90 <sbrk_aligned+0x3c>)
 8003a58:	460c      	mov	r4, r1
 8003a5a:	6831      	ldr	r1, [r6, #0]
 8003a5c:	4605      	mov	r5, r0
 8003a5e:	b911      	cbnz	r1, 8003a66 <sbrk_aligned+0x12>
 8003a60:	f000 f8bc 	bl	8003bdc <_sbrk_r>
 8003a64:	6030      	str	r0, [r6, #0]
 8003a66:	4621      	mov	r1, r4
 8003a68:	4628      	mov	r0, r5
 8003a6a:	f000 f8b7 	bl	8003bdc <_sbrk_r>
 8003a6e:	1c43      	adds	r3, r0, #1
 8003a70:	d00a      	beq.n	8003a88 <sbrk_aligned+0x34>
 8003a72:	1cc4      	adds	r4, r0, #3
 8003a74:	f024 0403 	bic.w	r4, r4, #3
 8003a78:	42a0      	cmp	r0, r4
 8003a7a:	d007      	beq.n	8003a8c <sbrk_aligned+0x38>
 8003a7c:	1a21      	subs	r1, r4, r0
 8003a7e:	4628      	mov	r0, r5
 8003a80:	f000 f8ac 	bl	8003bdc <_sbrk_r>
 8003a84:	3001      	adds	r0, #1
 8003a86:	d101      	bne.n	8003a8c <sbrk_aligned+0x38>
 8003a88:	f04f 34ff 	mov.w	r4, #4294967295
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	bd70      	pop	{r4, r5, r6, pc}
 8003a90:	20002da0 	.word	0x20002da0

08003a94 <_malloc_r>:
 8003a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a98:	1ccd      	adds	r5, r1, #3
 8003a9a:	f025 0503 	bic.w	r5, r5, #3
 8003a9e:	3508      	adds	r5, #8
 8003aa0:	2d0c      	cmp	r5, #12
 8003aa2:	bf38      	it	cc
 8003aa4:	250c      	movcc	r5, #12
 8003aa6:	2d00      	cmp	r5, #0
 8003aa8:	4607      	mov	r7, r0
 8003aaa:	db01      	blt.n	8003ab0 <_malloc_r+0x1c>
 8003aac:	42a9      	cmp	r1, r5
 8003aae:	d905      	bls.n	8003abc <_malloc_r+0x28>
 8003ab0:	230c      	movs	r3, #12
 8003ab2:	2600      	movs	r6, #0
 8003ab4:	603b      	str	r3, [r7, #0]
 8003ab6:	4630      	mov	r0, r6
 8003ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003abc:	4e2e      	ldr	r6, [pc, #184]	; (8003b78 <_malloc_r+0xe4>)
 8003abe:	f000 f89d 	bl	8003bfc <__malloc_lock>
 8003ac2:	6833      	ldr	r3, [r6, #0]
 8003ac4:	461c      	mov	r4, r3
 8003ac6:	bb34      	cbnz	r4, 8003b16 <_malloc_r+0x82>
 8003ac8:	4629      	mov	r1, r5
 8003aca:	4638      	mov	r0, r7
 8003acc:	f7ff ffc2 	bl	8003a54 <sbrk_aligned>
 8003ad0:	1c43      	adds	r3, r0, #1
 8003ad2:	4604      	mov	r4, r0
 8003ad4:	d14d      	bne.n	8003b72 <_malloc_r+0xde>
 8003ad6:	6834      	ldr	r4, [r6, #0]
 8003ad8:	4626      	mov	r6, r4
 8003ada:	2e00      	cmp	r6, #0
 8003adc:	d140      	bne.n	8003b60 <_malloc_r+0xcc>
 8003ade:	6823      	ldr	r3, [r4, #0]
 8003ae0:	4631      	mov	r1, r6
 8003ae2:	4638      	mov	r0, r7
 8003ae4:	eb04 0803 	add.w	r8, r4, r3
 8003ae8:	f000 f878 	bl	8003bdc <_sbrk_r>
 8003aec:	4580      	cmp	r8, r0
 8003aee:	d13a      	bne.n	8003b66 <_malloc_r+0xd2>
 8003af0:	6821      	ldr	r1, [r4, #0]
 8003af2:	3503      	adds	r5, #3
 8003af4:	1a6d      	subs	r5, r5, r1
 8003af6:	f025 0503 	bic.w	r5, r5, #3
 8003afa:	3508      	adds	r5, #8
 8003afc:	2d0c      	cmp	r5, #12
 8003afe:	bf38      	it	cc
 8003b00:	250c      	movcc	r5, #12
 8003b02:	4638      	mov	r0, r7
 8003b04:	4629      	mov	r1, r5
 8003b06:	f7ff ffa5 	bl	8003a54 <sbrk_aligned>
 8003b0a:	3001      	adds	r0, #1
 8003b0c:	d02b      	beq.n	8003b66 <_malloc_r+0xd2>
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	442b      	add	r3, r5
 8003b12:	6023      	str	r3, [r4, #0]
 8003b14:	e00e      	b.n	8003b34 <_malloc_r+0xa0>
 8003b16:	6822      	ldr	r2, [r4, #0]
 8003b18:	1b52      	subs	r2, r2, r5
 8003b1a:	d41e      	bmi.n	8003b5a <_malloc_r+0xc6>
 8003b1c:	2a0b      	cmp	r2, #11
 8003b1e:	d916      	bls.n	8003b4e <_malloc_r+0xba>
 8003b20:	1961      	adds	r1, r4, r5
 8003b22:	42a3      	cmp	r3, r4
 8003b24:	6025      	str	r5, [r4, #0]
 8003b26:	bf18      	it	ne
 8003b28:	6059      	strne	r1, [r3, #4]
 8003b2a:	6863      	ldr	r3, [r4, #4]
 8003b2c:	bf08      	it	eq
 8003b2e:	6031      	streq	r1, [r6, #0]
 8003b30:	5162      	str	r2, [r4, r5]
 8003b32:	604b      	str	r3, [r1, #4]
 8003b34:	4638      	mov	r0, r7
 8003b36:	f104 060b 	add.w	r6, r4, #11
 8003b3a:	f000 f865 	bl	8003c08 <__malloc_unlock>
 8003b3e:	f026 0607 	bic.w	r6, r6, #7
 8003b42:	1d23      	adds	r3, r4, #4
 8003b44:	1af2      	subs	r2, r6, r3
 8003b46:	d0b6      	beq.n	8003ab6 <_malloc_r+0x22>
 8003b48:	1b9b      	subs	r3, r3, r6
 8003b4a:	50a3      	str	r3, [r4, r2]
 8003b4c:	e7b3      	b.n	8003ab6 <_malloc_r+0x22>
 8003b4e:	6862      	ldr	r2, [r4, #4]
 8003b50:	42a3      	cmp	r3, r4
 8003b52:	bf0c      	ite	eq
 8003b54:	6032      	streq	r2, [r6, #0]
 8003b56:	605a      	strne	r2, [r3, #4]
 8003b58:	e7ec      	b.n	8003b34 <_malloc_r+0xa0>
 8003b5a:	4623      	mov	r3, r4
 8003b5c:	6864      	ldr	r4, [r4, #4]
 8003b5e:	e7b2      	b.n	8003ac6 <_malloc_r+0x32>
 8003b60:	4634      	mov	r4, r6
 8003b62:	6876      	ldr	r6, [r6, #4]
 8003b64:	e7b9      	b.n	8003ada <_malloc_r+0x46>
 8003b66:	230c      	movs	r3, #12
 8003b68:	4638      	mov	r0, r7
 8003b6a:	603b      	str	r3, [r7, #0]
 8003b6c:	f000 f84c 	bl	8003c08 <__malloc_unlock>
 8003b70:	e7a1      	b.n	8003ab6 <_malloc_r+0x22>
 8003b72:	6025      	str	r5, [r4, #0]
 8003b74:	e7de      	b.n	8003b34 <_malloc_r+0xa0>
 8003b76:	bf00      	nop
 8003b78:	20002d9c 	.word	0x20002d9c

08003b7c <_realloc_r>:
 8003b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b80:	4680      	mov	r8, r0
 8003b82:	4614      	mov	r4, r2
 8003b84:	460e      	mov	r6, r1
 8003b86:	b921      	cbnz	r1, 8003b92 <_realloc_r+0x16>
 8003b88:	4611      	mov	r1, r2
 8003b8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b8e:	f7ff bf81 	b.w	8003a94 <_malloc_r>
 8003b92:	b92a      	cbnz	r2, 8003ba0 <_realloc_r+0x24>
 8003b94:	f7ff ff16 	bl	80039c4 <_free_r>
 8003b98:	4625      	mov	r5, r4
 8003b9a:	4628      	mov	r0, r5
 8003b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ba0:	f000 f838 	bl	8003c14 <_malloc_usable_size_r>
 8003ba4:	4284      	cmp	r4, r0
 8003ba6:	4607      	mov	r7, r0
 8003ba8:	d802      	bhi.n	8003bb0 <_realloc_r+0x34>
 8003baa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003bae:	d812      	bhi.n	8003bd6 <_realloc_r+0x5a>
 8003bb0:	4621      	mov	r1, r4
 8003bb2:	4640      	mov	r0, r8
 8003bb4:	f7ff ff6e 	bl	8003a94 <_malloc_r>
 8003bb8:	4605      	mov	r5, r0
 8003bba:	2800      	cmp	r0, #0
 8003bbc:	d0ed      	beq.n	8003b9a <_realloc_r+0x1e>
 8003bbe:	42bc      	cmp	r4, r7
 8003bc0:	4622      	mov	r2, r4
 8003bc2:	4631      	mov	r1, r6
 8003bc4:	bf28      	it	cs
 8003bc6:	463a      	movcs	r2, r7
 8003bc8:	f7ff fbac 	bl	8003324 <memcpy>
 8003bcc:	4631      	mov	r1, r6
 8003bce:	4640      	mov	r0, r8
 8003bd0:	f7ff fef8 	bl	80039c4 <_free_r>
 8003bd4:	e7e1      	b.n	8003b9a <_realloc_r+0x1e>
 8003bd6:	4635      	mov	r5, r6
 8003bd8:	e7df      	b.n	8003b9a <_realloc_r+0x1e>
	...

08003bdc <_sbrk_r>:
 8003bdc:	b538      	push	{r3, r4, r5, lr}
 8003bde:	2300      	movs	r3, #0
 8003be0:	4d05      	ldr	r5, [pc, #20]	; (8003bf8 <_sbrk_r+0x1c>)
 8003be2:	4604      	mov	r4, r0
 8003be4:	4608      	mov	r0, r1
 8003be6:	602b      	str	r3, [r5, #0]
 8003be8:	f7fc fe62 	bl	80008b0 <_sbrk>
 8003bec:	1c43      	adds	r3, r0, #1
 8003bee:	d102      	bne.n	8003bf6 <_sbrk_r+0x1a>
 8003bf0:	682b      	ldr	r3, [r5, #0]
 8003bf2:	b103      	cbz	r3, 8003bf6 <_sbrk_r+0x1a>
 8003bf4:	6023      	str	r3, [r4, #0]
 8003bf6:	bd38      	pop	{r3, r4, r5, pc}
 8003bf8:	20002da4 	.word	0x20002da4

08003bfc <__malloc_lock>:
 8003bfc:	4801      	ldr	r0, [pc, #4]	; (8003c04 <__malloc_lock+0x8>)
 8003bfe:	f000 b811 	b.w	8003c24 <__retarget_lock_acquire_recursive>
 8003c02:	bf00      	nop
 8003c04:	20002da8 	.word	0x20002da8

08003c08 <__malloc_unlock>:
 8003c08:	4801      	ldr	r0, [pc, #4]	; (8003c10 <__malloc_unlock+0x8>)
 8003c0a:	f000 b80c 	b.w	8003c26 <__retarget_lock_release_recursive>
 8003c0e:	bf00      	nop
 8003c10:	20002da8 	.word	0x20002da8

08003c14 <_malloc_usable_size_r>:
 8003c14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c18:	1f18      	subs	r0, r3, #4
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	bfbc      	itt	lt
 8003c1e:	580b      	ldrlt	r3, [r1, r0]
 8003c20:	18c0      	addlt	r0, r0, r3
 8003c22:	4770      	bx	lr

08003c24 <__retarget_lock_acquire_recursive>:
 8003c24:	4770      	bx	lr

08003c26 <__retarget_lock_release_recursive>:
 8003c26:	4770      	bx	lr

08003c28 <_init>:
 8003c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c2a:	bf00      	nop
 8003c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c2e:	bc08      	pop	{r3}
 8003c30:	469e      	mov	lr, r3
 8003c32:	4770      	bx	lr

08003c34 <_fini>:
 8003c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c36:	bf00      	nop
 8003c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c3a:	bc08      	pop	{r3}
 8003c3c:	469e      	mov	lr, r3
 8003c3e:	4770      	bx	lr
